{
  "metadata": {
    "total_behaviors_analyzed": 3500,
    "unique_arguments": 978,
    "behavioral_patterns": 15
  },
  "arg_to_functions": {
    "x": [
      "entuple",
      "detuple",
      "enlist",
      "delist",
      "itc",
      "list_roll",
      "fansi_printed",
      "with_drop_shadow",
      "_is_instance_of_module_class",
      "is_numpy_array",
      "is_torch_tensor",
      "is_torch_module",
      "_is_pandas_dataframe",
      "_is_pandas_series",
      "_is_pandas_iloc_iterable",
      "_is_easydict",
      "random_element",
      "blend",
      "iblend",
      "interp",
      "matching_keys",
      "matching_indices",
      "pop_gather",
      "gather_attrs",
      "list_set",
      "_muted_stdout_write",
      "_translate_timezone",
      "sign",
      "is_iterable",
      "display_dot",
      "by_number",
      "sorted_by_number",
      "sorted_by_len",
      "sorted_by_attr",
      "contains_any",
      "contains_all",
      "in_any",
      "in_all",
      "full_range",
      "clip_string_width",
      "clamp",
      "int_clamp",
      "float_clamp",
      "cartesian_to_polar",
      "_cdh_folder_is_protected",
      "_print_status",
      "run_until_complete",
      "_rich_inspect",
      "_rich_print",
      "pretty_print",
      "repr_kwargs_dict",
      "has_len",
      "string_transpose",
      "circular_extrema_indices",
      "circ_diff_inverse",
      "is_number",
      "cv_distance_to_contour",
      "cv_closest_contour_point",
      "cv_closest_contour",
      "cv_draw_circle",
      "cv_draw_circles",
      "cosine_similarity",
      "scatter_plot",
      "is_complex_vector",
      "is_points_array",
      "is_cv_contour",
      "_set_hash",
      "_dict_hash",
      "_list_hash",
      "_tuple_hash",
      "_slice_hash",
      "_omni_save_default_extension",
      "magnitude",
      "normalized",
      "as_numpy_array",
      "shift_image",
      "norm_cdf",
      "norm_pdf",
      "_tensorify",
      "_brew_install",
      "can_convert_object_to_bytes",
      "_dill_dumps",
      "object_to_bytes",
      "object_to_base64",
      "base64_to_object",
      "bytes_to_object",
      "torch_remap_image",
      "_ceil",
      "_floor",
      "_round",
      "_sin",
      "_cos",
      "_tan",
      "_exp",
      "_log",
      "_log10",
      "_sqrt",
      "_abs",
      "_pow",
      "_fft",
      "_ifft",
      "_tanh",
      "_sigmoid",
      "_relu",
      "_softmax",
      "_log2",
      "_asin",
      "_acos",
      "_atan",
      "_clip",
      "_nan_to_num",
      "_clamp",
      "_atan2",
      "_sinh",
      "_cosh",
      "_sign",
      "_degrees",
      "_radians",
      "_create_array_like",
      "_zeros_like",
      "_ones_like",
      "_randn_like",
      "_rand_like",
      "_maximum",
      "_minimum",
      "_max",
      "_min",
      "_sum",
      "_mean",
      "_copy_tensor",
      "get_bilinear_weights",
      "torch_scatter_add_image",
      "_is_dir_entry",
      "cv_remap_image",
      "linerino",
      "parent_class_names",
      "is_dictlike",
      "errortext",
      "sorting_key",
      "linear_function",
      "_parenthesizer_automator",
      "patch",
      "reverse",
      "mouse_callback",
      "on_mouse_move",
      "on_mouse_down",
      "is_non_str_iterable",
      "is_listlike",
      "should_include",
      "should_explore",
      "postprocess_path",
      "explore",
      "rain_once",
      "animate_rain",
      "do_path",
      "to_str",
      "p",
      "strip",
      "is_module",
      "eval_for_rinsp",
      "add_to_successful_command_history",
      "try_eval",
      "file_size_key"
    ],
    "f": [
      "itc",
      "run_func",
      "fog",
      "_minmax_indices",
      "riemann_sum",
      "riemann_mean",
      "dec2bin",
      "num_args",
      "print_to_string"
    ],
    "func\u2d53scoop\u02cfnew": [
      "scoop"
    ],
    "list_in": [
      "scoop"
    ],
    "init_value": [
      "scoop"
    ],
    "func": [
      "seq_map",
      "par_map",
      "lazy_par_map",
      "run_as_new_thread",
      "run_as_new_process",
      "line_graph_live",
      "gather_args",
      "gather_args_call",
      "gather_args_wrap",
      "gather_args_bind",
      "squelch_call",
      "squelch_wrap",
      "globalize_locals",
      "_alpha_weighted_rgba_image_func",
      "file_cache_call",
      "_images_conversion",
      "reduce_wrap",
      "func_call_to_shell_command",
      "decorator",
      "run_test",
      "patcher"
    ],
    "num_threads": [
      "par_map",
      "lazy_par_map",
      "load_files",
      "_load_files",
      "load_images",
      "load_text_files",
      "load_jsons",
      "load_yaml_files",
      "read_symlinks",
      "make_symlinks_relative",
      "make_symlinks_absolute",
      "replace_symlinks_with_hardlinks",
      "download_fonts",
      "download_google_fonts",
      "load_video_streams",
      "load_videos",
      "convert_to_gifs_via_ffmpeg",
      "copy_paths",
      "download_urls",
      "download_urls_to_cache",
      "get_all_taken_ports"
    ],
    "buffer_limit": [
      "par_map",
      "lazy_par_map",
      "load_files",
      "_load_files",
      "load_video_streams",
      "load_videos",
      "download_urls",
      "download_urls_to_cache"
    ],
    "funcs": [
      "seq",
      "pam"
    ],
    "funcs\u11a2voids": [
      "par"
    ],
    "shift": [
      "list_roll",
      "shift_image_hue"
    ],
    "list_2d": [
      "list_flatten"
    ],
    "l": [
      "unique",
      "shuffled",
      "_minmax_indices",
      "min_valued_indices",
      "max_valued_indices",
      "min_valued_elements",
      "max_valued_elements",
      "max_valued_index",
      "min_valued_index",
      "matching_indices",
      "list_to_index_dict",
      "invert_list_to_dict",
      "display_list",
      "split_into_sublists",
      "split_into_n_sublists"
    ],
    "title": [
      "ptoc",
      "bar_graph",
      "line_graph",
      "display_code_cell",
      "shorten_github_url",
      "_eta",
      "_set_session_title",
      "_display_columns",
      "set_process_title",
      "scatter_plot",
      "_run_sys_command",
      "display_pandas_correlation_heatmap",
      "line_graph_via_bokeh",
      "histogram_via_bokeh",
      "append_stat"
    ],
    "new_line": [
      "ptoc",
      "fansi_print"
    ],
    "label": [
      "ptoctic",
      "cv_imshow"
    ],
    "seconds": [
      "seconds",
      "millis",
      "micros",
      "nanos",
      "play_tone",
      "play_semitone"
    ],
    "pid": [
      "get_process_cwd",
      "get_current_directory",
      "get_process_memory",
      "get_process_username",
      "get_process_exists",
      "get_process_start_date",
      "kill_process",
      "get_gpu_ids_used_by_process",
      "get_used_vram",
      "print_process_info"
    ],
    "path": [
      "set_current_directory",
      "fansi_highlight_path",
      "_load_images_via_pdf2image",
      "load_pdf_as_images",
      "get_pdf_num_pages",
      "load_pdf_as_text",
      "_load_pdf_as_text_via_pdfminer",
      "save_image_jpg",
      "save_image_webp",
      "save_image_avif",
      "save_image_jxl",
      "save_animated_webp",
      "load_mp3_file",
      "load_wav_file",
      "save_wav",
      "play_sound_file",
      "display_polygon",
      "load_json",
      "save_json",
      "load_yaml_file",
      "load_dyaml_file",
      "touch_file",
      "add_to_env_path",
      "display_path",
      "_add_to_cd_history",
      "read_symlink",
      "symlink_is_broken",
      "is_symbolic_link",
      "is_utf8_file",
      "_convert_powerpoint_file",
      "save_animated_png",
      "total_disc_bytes",
      "get_file_size",
      "evenly_split_path",
      "as_complex_vector",
      "as_points_array",
      "as_cv_contour",
      "_omni_load_animated_image",
      "_omni_save_animated_image",
      "_omni_load",
      "_omni_save",
      "file_cache_call",
      "file_cache_wrap",
      "with_file_extension",
      "with_file_name",
      "with_folder_name",
      "get_path_name",
      "get_relative_path",
      "get_absolute_path",
      "date_modified",
      "date_created",
      "date_accessed",
      "r_transform",
      "r_transform_inverse",
      "download_youtube_video",
      "_moviepy_VideoFileClip",
      "_get_video_file_duration_via_moviepy",
      "get_video_file_duration",
      "_get_video_file_framerate_via_moviepy",
      "_get_video_file_framerate_via_ffprobe",
      "get_video_file_framerate",
      "load_video_stream",
      "load_video",
      "save_video_avi",
      "_cv_save_video_mp4",
      "save_video_mp4",
      "save_video_gif_via_pil",
      "save_video",
      "directory_exists",
      "is_empty_folder",
      "file_exists",
      "path_exists",
      "rename_path",
      "delete_file",
      "delete_folder",
      "delete_symlink",
      "delete_path",
      "make_directory",
      "make_parent_directory",
      "take_directory",
      "path_split",
      "get_unique_copy_path",
      "open_file_with_default_application",
      "download_url",
      "graham_scan",
      "path_intersects_point",
      "get_video_file_shape",
      "get_video_file_num_frames",
      "get_video_file_height",
      "get_video_file_width",
      "bytes_to_file",
      "file_to_bytes",
      "file_to_base64",
      "file_to_object",
      "object_to_file",
      "get_path_inode",
      "web_paste_path",
      "_paste_path_from_bundle",
      "web_copy_path",
      "_copy_path_to_bundle",
      "clear_jupyter_notebook_outputs",
      "get_git_branch",
      "get_git_is_dirty",
      "get_git_commit_date",
      "is_a_git_repo",
      "get_git_repo_root",
      "git_clone",
      "git_pull",
      "load_safetensors",
      "save_safetensors",
      "get_total_disk_space",
      "get_used_disk_space",
      "get_free_disk_space",
      "_load_file",
      "_save_image",
      "get_stats_string",
      "localized_path",
      "is_hidden",
      "load",
      "delfunc",
      "apply_suffix_to_path",
      "format_path",
      "request_replace",
      "should_read",
      "filter_by_extension"
    ],
    "condition": [
      "ConditionalContext",
      "input_conditional"
    ],
    "context_manager": [
      "ConditionalContext"
    ],
    "spec": [
      "_transform_fansi_arg"
    ],
    "style_keywords": [
      "_transform_fansi_arg"
    ],
    "text_string": [
      "fansi",
      "_legacy_fansi",
      "fansi_print"
    ],
    "text_color": [
      "fansi",
      "_legacy_fansi",
      "fansi_print",
      "fansi_print_lines",
      "labeled_image"
    ],
    "style": [
      "fansi",
      "_legacy_fansi",
      "fansi_print",
      "fansi_pygments",
      "set_prompt_style",
      "_line_numbered_string",
      "pseudo_terminal",
      "fansi_print_lines",
      "skia_text_to_image"
    ],
    "background_color": [
      "fansi",
      "_legacy_fansi",
      "fansi_print",
      "get_progress_bar_image",
      "image_with_progress_bar",
      "video_with_progress_bar",
      "line_graph_via_plotille",
      "fansi_print_lines",
      "cv_line_graph",
      "labeled_image",
      "cv_text_to_image",
      "_single_line_cv_text_to_image",
      "_slow_pil_text_to_image",
      "pil_text_to_image",
      "skia_text_to_image"
    ],
    "underline_color": [
      "fansi",
      "fansi_print",
      "fansi_print_lines"
    ],
    "per_line": [
      "fansi",
      "_legacy_fansi"
    ],
    "reset": [
      "fansi",
      "fansi_print",
      "fansi_print_lines"
    ],
    "truecolor": [
      "fansi",
      "fansi_print",
      "display_image_in_terminal_color",
      "fansi_print_lines"
    ],
    "link": [
      "fansi",
      "fansi_print",
      "fansi_print_lines"
    ],
    "string": [
      "_fansi_fix",
      "_set_local_clipboard_string",
      "string_to_clipboard",
      "_copy_text_over_terminal",
      "random_substring",
      "string_to_text_file",
      "save_text_file",
      "parse_yaml",
      "_string_with_any",
      "starts_with_any",
      "ends_with_any",
      "unindent",
      "with_line_numbers",
      "number_of_lines",
      "number_of_lines_in_terminal",
      "_line_numbered_string",
      "parenthesizer_automator",
      "repr_multiline",
      "regex_match",
      "regex_replace",
      "remove_all_whitespace",
      "line_split",
      "_highlighted_query_results",
      "visible_string_ljust",
      "visible_string_rjust",
      "visible_string_center",
      "make_string_rectangular",
      "string_is_rectangular",
      "wrap_string_to_width",
      "bordered_string",
      "simple_boxed_string",
      "strip_ansi_escapes",
      "visible_string_length",
      "string_width",
      "string_height",
      "_pad_string_height",
      "pad_string_to_dims",
      "words_to_number",
      "_string_pager_via_pypager",
      "_string_pager_via_click",
      "_string_pager_via_less",
      "string_pager",
      "string_to_date",
      "fuzzy_string_match",
      "strip_trailing_whitespace",
      "delete_empty_lines",
      "propagate_whitespace",
      "tmux_copy",
      "_maybe_display_string_in_pager",
      "vim_copy",
      "get_all_pygments_tokens",
      "get_all_token_strings",
      "fansi_progress",
      "is_valid_integer_string",
      "on_fail",
      "highlighted",
      "sanitize_string",
      "is_valid_int",
      "indentify_all_but_first_line",
      "fansify",
      "string_to_modifier",
      "repr_string_to_modifier",
      "number_of_leading_spaces"
    ],
    "code": [
      "_old_fansi_syntax_highlighting",
      "fansi_syntax_highlighting",
      "fansi_pygments",
      "fansi_pygments_demo",
      "_get_carbon_url",
      "display_code_cell",
      "split_python_tokens",
      "is_valid_python_syntax",
      "_is_valid_exeval_python_syntax",
      "is_valid_shell_syntax",
      "is_valid_sh_syntax",
      "is_valid_bash_syntax",
      "is_valid_zsh_syntax",
      "_parse_exeval_code",
      "exeval",
      "_pterm_exeval",
      "as_example_comment",
      "javascript",
      "python_2_to_3",
      "strip_python_docstrings",
      "strip_python_comments",
      "_sort_imports_via_isort",
      "clean_imports_via_unimport",
      "_run_ai_cli_coder",
      "_run_claude_code",
      "_run_gemini_cli",
      "deepgenx",
      "minify_python_code",
      "_autoformat_python_code_via_black",
      "autoformat_html_via_bs4",
      "add_trailing_commas",
      "run_removestar",
      "qualify_imports",
      "_qualify_imports",
      "get_star_modules",
      "remove_fstrings",
      "refactor_flynt",
      "_inline_rp_code",
      "ipython_exeval",
      "get_all_function_names",
      "_get_function_name",
      "_has_if_name_main",
      "extract_imports",
      "remove_first_import_line",
      "unarpy",
      "autoformat_python_via_black",
      "print_code"
    ],
    "namespace": [
      "_old_fansi_syntax_highlighting",
      "fansi_syntax_highlighting",
      "mini_editor"
    ],
    "style_overrides": [
      "_old_fansi_syntax_highlighting",
      "fansi_syntax_highlighting"
    ],
    "line_wrap_width": [
      "fansi_syntax_highlighting"
    ],
    "show_line_numbers": [
      "fansi_syntax_highlighting"
    ],
    "lazy": [
      "fansi_syntax_highlighting",
      "video_with_progress_bar",
      "load_files",
      "with_alpha_checkerboards",
      "load_text_files",
      "load_jsons",
      "load_yaml_files",
      "split_into_sublists",
      "join_with_separator",
      "rotate_images",
      "read_symlinks",
      "make_symlinks_relative",
      "make_symlinks_absolute",
      "replace_symlinks_with_hardlinks",
      "labeled_images",
      "labeled_videos",
      "download_fonts",
      "download_google_fonts",
      "get_all_runnable_python_files",
      "load_video_streams",
      "load_videos",
      "copy_paths",
      "path_join",
      "remove_duplicate_frames",
      "crop_images",
      "crop_videos",
      "crop_videos_to_min_size",
      "crop_videos_to_max_size",
      "s3_list_objects",
      "download_urls",
      "download_urls_to_cache",
      "get_cache_file_paths",
      "get_all_taken_ports",
      "cv_resize_images",
      "resize_videos",
      "resize_images_to_hold",
      "resize_images_to_fit",
      "resize_video_to_hold",
      "resize_video_to_fit",
      "resize_videos_to_fit",
      "resize_videos_to_hold",
      "_get_all_paths_fast",
      "calculate_flows"
    ],
    "language": [
      "fansi_pygments",
      "display_code_cell",
      "split_sentences"
    ],
    "color_mode": [
      "fansi_pygments"
    ],
    "wipe": [
      "accumulate_clipboard_text"
    ],
    "unique": [
      "accumulate_clipboard_text"
    ],
    "image": [
      "_rgb_to_grayscale",
      "gauss_blur",
      "with_drop_shadow",
      "with_corner_radius",
      "with_image_glow",
      "get_alpha_outline",
      "with_alpha_outline",
      "image_with_progress_bar",
      "crop_image_to_square",
      "crop_image_at_random_position",
      "max_filter",
      "min_filter",
      "med_filter",
      "range_filter",
      "_auto_interp_for_resize_image",
      "_resize_image_via_skimage",
      "resize_image",
      "is_torch_image",
      "is_pil_image",
      "_is_skia_image",
      "_copy_image_to_clipboard_via_pyjpgclipboard",
      "_copy_image_to_clipboard_via_copykitten",
      "copy_image_to_clipboard",
      "_encode_image_to_bytes",
      "encode_image_to_bytes",
      "encode_image_to_base64",
      "save_image",
      "temp_saved_image",
      "save_image_to_imgur",
      "save_image_jpg",
      "save_image_webp",
      "save_image_avif",
      "save_image_jxl",
      "save_openexr_image",
      "_display_image_in_notebook_via_ipyplot",
      "_display_image_in_notebook_via_ipython",
      "_display_downloadable_image_in_notebook_via_ipython",
      "display_image_in_notebook",
      "_image_to_html",
      "display_image",
      "with_alpha_checkerboard",
      "display_alpha_image",
      "display_cv_color_histogram",
      "decode_float_matrix_from_rgba_byte_image",
      "display_image_in_terminal",
      "display_image_in_terminal_color",
      "display_image_in_terminal_imgcat",
      "auto_canny",
      "skeletonize",
      "_skimage_skeletonize",
      "get_edge_drawing",
      "rotate_image",
      "_rotate_rgb_image",
      "_view_image_via_textual_imageview",
      "_cv_helper",
      "cv_find_contours",
      "cv_draw_contours",
      "cv_draw_contour",
      "cv_draw_rectangle",
      "cv_draw_circle",
      "cv_draw_circles",
      "cv_draw_arrow",
      "cv_draw_arrows",
      "byte_image_histogram",
      "cv_apply_affine_to_image",
      "cv_manually_selected_contours",
      "cv_manually_selected_contour",
      "_cv_morphological_helper",
      "cv_erode",
      "cv_dilate",
      "cv_gauss_blur",
      "is_opaque_image",
      "is_transparent_image",
      "_alpha_weighted_rgba_image_func",
      "labeled_image",
      "vertically_flipped_image",
      "horizontally_flipped_image",
      "_binary_floyd_steinburg_dithering",
      "is_image",
      "is_grayscale_image",
      "is_rgb_image",
      "is_rgba_image",
      "_grayscale_image_to_grayscale_image",
      "_grayscale_image_to_rgb_image",
      "_grayscale_image_to_rgba_image",
      "_rgb_image_to_grayscale_image",
      "_rgb_image_to_rgb_image",
      "_rgb_image_to_rgba_image",
      "_rgba_image_to_grayscale_image",
      "_rgba_image_to_rgb_image",
      "_rgba_image_to_rgba_image",
      "as_grayscale_image",
      "as_rgb_image",
      "as_rgba_image",
      "is_float_image",
      "is_byte_image",
      "is_binary_image",
      "_clamp_float_image",
      "_float_image_to_float_image",
      "_float_image_to_byte_image",
      "_float_image_to_binary_image",
      "_byte_image_to_float_image",
      "_byte_image_to_byte_image",
      "_byte_image_to_binary_image",
      "_binary_image_to_float_image",
      "_binary_image_to_byte_image",
      "_binary_image_to_binary_image",
      "as_float_image",
      "as_byte_image",
      "as_binary_image",
      "get_image_dimensions",
      "get_image_height",
      "get_image_width",
      "bordered_image_solid_color",
      "cv_box_blur",
      "shift_image",
      "roll_image",
      "crop_image",
      "crop_image_zeros",
      "edit_image_in_terminal",
      "decode_image_to_bytes",
      "inverted_image",
      "sobel_edges",
      "get_image_hue",
      "get_image_saturation",
      "get_image_value",
      "get_image_red",
      "get_image_green",
      "get_image_blue",
      "_with_image_channel",
      "with_image_red",
      "with_image_green",
      "with_image_blue",
      "with_image_hue",
      "shift_image_hue",
      "with_image_saturation",
      "with_image_brightness",
      "apply_colormap_to_image",
      "cv_image_filter",
      "_prepare_cv_image",
      "cv_resize_image",
      "skia_resize_image",
      "torch_resize_image",
      "torch_remap_image",
      "apply_uv_map",
      "torch_scatter_add_image",
      "resize_image_to_hold",
      "resize_image_to_fit",
      "cv_inpaint_image",
      "cv_floodfill_mask",
      "image_to_text",
      "cv_equalize_histogram",
      "extract_image_channels",
      "extract_alpha_channel",
      "apply_image_function_per_channel",
      "with_alpha_channel",
      "with_image_rgb",
      "unwarped_perspective_image",
      "run_depth_pro",
      "cv_remap_image",
      "detect_apriltags",
      "as_pil_image",
      "as_numpy_image",
      "as_torch_image",
      "width",
      "height",
      "_save_image",
      "display",
      "zoom_crop_origin",
      "converter",
      "_get_html",
      "_as_skia_image"
    ],
    "matrix": [
      "grayscale_to_rgb",
      "append_uniform_row",
      "append_zeros_row",
      "append_ones_row",
      "append_uniform_column",
      "append_zeros_column",
      "append_ones_column",
      "is_a_matrix",
      "is_a_square_matrix",
      "square_matrix_size"
    ],
    "number_of_channels": [
      "grayscale_to_rgb"
    ],
    "\u03c3": [
      "gauss_blur"
    ],
    "single_channel": [
      "gauss_blur",
      "max_filter",
      "min_filter",
      "med_filter",
      "range_filter"
    ],
    "mode": [
      "gauss_blur",
      "blend_images",
      "overlay_images",
      "trim_video",
      "_trim_videos_to_same_length",
      "max_filter",
      "min_filter",
      "med_filter",
      "range_filter",
      "load_tsv",
      "is_valid_python_syntax",
      "_is_valid_exeval_python_syntax",
      "skia_stamp_image",
      "optical_flow_to_image",
      "addstr_wordwrap"
    ],
    "shutup": [
      "gauss_blur",
      "max_filter",
      "min_filter",
      "med_filter",
      "range_filter",
      "load_image_from_webcam"
    ],
    "diameter": [
      "flat_circle_kernel",
      "max_filter",
      "min_filter",
      "med_filter",
      "range_filter",
      "_cv_morphological_helper",
      "cv_erode",
      "cv_dilate",
      "cv_box_blur"
    ],
    "size": [
      "gaussian_kernel",
      "image_with_progress_bar",
      "video_with_progress_bar",
      "display_dot",
      "labeled_image",
      "_slow_pil_text_to_image",
      "pil_text_to_image",
      "skia_text_to_image",
      "cv_resize_image",
      "_size_to_height_width",
      "cv_resize_images",
      "resize_videos",
      "skia_resize_image",
      "torch_resize_image",
      "torch_resize_images",
      "get_apriltag_image",
      "get_apriltag_images",
      "read",
      "is_human",
      "human_to_num_bytes",
      "num_bytes_to_human",
      "is_num_bytes"
    ],
    "sigma": [
      "gaussian_kernel",
      "auto_canny",
      "circular_gaussian_blur",
      "cv_gauss_blur"
    ],
    "dim": [
      "gaussian_kernel",
      "random_rotation_matrix",
      "_softmax",
      "_max",
      "_min",
      "_sum",
      "_mean"
    ],
    "height": [
      "uniform_float_color_image",
      "get_checkerboard_image",
      "get_progress_bar_image",
      "crop_image_at_random_position",
      "grid2d",
      "xy_float_images",
      "xy_torch_matrices",
      "line_graph_via_plotille",
      "load_image_from_webcam",
      "cv_line_graph",
      "rgb_histogram_image",
      "_cv_char_to_image",
      "launch_terminal_in_colab",
      "bordered_image_solid_color",
      "bordered_images_solid_color",
      "cv_box_blur",
      "save_video_mp4",
      "crop_image",
      "crop_images",
      "crop_videos",
      "bordered_string",
      "_pad_string_height",
      "pad_string_to_dims",
      "wordcloud_image",
      "get_identity_uv_map",
      "torch_scatter_add_image",
      "resize_image_to_hold",
      "resize_image_to_fit",
      "resize_images_to_hold",
      "resize_images_to_fit",
      "resize_video_to_hold",
      "resize_video_to_fit",
      "resize_videos_to_fit",
      "resize_videos_to_hold",
      "unwarped_perspective_image",
      "unwarped_perspective_contour",
      "line_graph_via_bokeh",
      "histogram_via_bokeh"
    ],
    "width": [
      "uniform_float_color_image",
      "get_checkerboard_image",
      "get_progress_bar_image",
      "crop_image_at_random_position",
      "grid2d",
      "xy_float_images",
      "xy_torch_matrices",
      "bar_graph",
      "line_graph_via_plotille",
      "load_image_from_webcam",
      "print_rich_stack_trace",
      "get_rich_traceback_string",
      "cv_draw_contours",
      "cv_line_graph",
      "rgb_histogram_image",
      "_cv_char_to_image",
      "skia_text_to_image",
      "bordered_image_solid_color",
      "bordered_images_solid_color",
      "cv_box_blur",
      "save_video_mp4",
      "crop_image",
      "crop_images",
      "crop_videos",
      "visible_string_ljust",
      "visible_string_rjust",
      "visible_string_center",
      "wrap_string_to_width",
      "bordered_string",
      "pad_string_to_dims",
      "wordcloud_image",
      "get_identity_uv_map",
      "torch_scatter_add_image",
      "resize_image_to_hold",
      "resize_image_to_fit",
      "resize_images_to_hold",
      "resize_images_to_fit",
      "resize_video_to_hold",
      "resize_video_to_fit",
      "resize_videos_to_fit",
      "resize_videos_to_hold",
      "unwarped_perspective_image",
      "unwarped_perspective_contour",
      "line_graph_via_bokeh",
      "histogram_via_bokeh"
    ],
    "color": [
      "uniform_float_color_image",
      "with_drop_shadow",
      "with_alpha_outline",
      "display_dot",
      "display_path",
      "cv_draw_contours",
      "cv_draw_rectangle",
      "cv_draw_circle",
      "cv_draw_circles",
      "cv_draw_arrow",
      "cv_draw_arrows",
      "scatter_plot",
      "cv_text_to_image",
      "_single_line_cv_text_to_image",
      "_slow_pil_text_to_image",
      "as_rgba_float_color",
      "as_rgb_float_color",
      "pil_text_to_image",
      "skia_text_to_image",
      "is_color",
      "is_binary_color",
      "is_byte_color",
      "is_float_color",
      "get_color_hue",
      "get_color_saturation",
      "get_color_brightness",
      "bordered_image_solid_color",
      "bordered_images_solid_color",
      "inverted_color",
      "optical_flow_to_arrow_grid"
    ],
    "bot": [
      "blend_images",
      "laplacian_blend"
    ],
    "top": [
      "blend_images",
      "laplacian_blend",
      "bordered_image_solid_color",
      "bordered_images_solid_color",
      "bordered_string"
    ],
    "alpha": [
      "blend_images",
      "laplacian_blend",
      "display_polygon",
      "display_cv_color_histogram",
      "display_path",
      "with_alpha_channel",
      "blend_rgb"
    ],
    "levels": [
      "laplacian_blend",
      "get_path_parent",
      "get_paths_parents"
    ],
    "tile_size": [
      "get_checkerboard_image",
      "with_alpha_checkerboard",
      "with_alpha_checkerboards",
      "display_alpha_image"
    ],
    "first_color": [
      "get_checkerboard_image",
      "with_alpha_checkerboard",
      "with_alpha_checkerboards",
      "display_alpha_image"
    ],
    "second_color": [
      "get_checkerboard_image",
      "with_alpha_checkerboard",
      "with_alpha_checkerboards",
      "display_alpha_image"
    ],
    "y": [
      "with_drop_shadow",
      "line_graph_in_terminal",
      "blend",
      "iblend",
      "display_dot",
      "_contains_func_y",
      "cartesian_to_polar",
      "cv_distance_to_contour",
      "cv_closest_contour_point",
      "cv_closest_contour",
      "cv_draw_circle",
      "cv_draw_circles",
      "cosine_similarity",
      "scatter_plot",
      "shift_image",
      "torch_remap_image",
      "_pow",
      "_atan2",
      "_maximum",
      "_minimum",
      "get_bilinear_weights",
      "torch_scatter_add_image",
      "cv_remap_image",
      "mouse_callback",
      "on_mouse_move",
      "on_mouse_down"
    ],
    "blur": [
      "with_drop_shadow",
      "with_image_glow",
      "with_image_glows"
    ],
    "opacity": [
      "with_drop_shadow"
    ],
    "images": [
      "with_drop_shadows",
      "crop_images_to_square",
      "encode_images_to_bytes",
      "encode_images_to_base64",
      "save_images",
      "_display_image_slideshow_animated",
      "display_image_slideshow",
      "_images_are_all_same_size",
      "labeled_images",
      "horizontally_concatenated_images",
      "tiled_images",
      "_images_conversion",
      "as_float_images",
      "as_byte_images",
      "as_binary_images",
      "as_rgb_images",
      "as_rgba_images",
      "as_grayscale_images",
      "_common_image_channel_converter",
      "_common_image_dtype_converter",
      "_common_image_converter",
      "crop_images",
      "inverted_images",
      "as_numpy_images",
      "as_pil_images",
      "as_torch_images"
    ],
    "radius": [
      "with_corner_radius",
      "with_corner_radii",
      "cv_draw_circle",
      "cv_draw_circles",
      "cv_inpaint_image"
    ],
    "antialias": [
      "with_corner_radius",
      "with_corner_radii",
      "_cv_helper",
      "cv_draw_contours",
      "cv_draw_rectangle",
      "cv_draw_circle",
      "cv_draw_circles",
      "cv_draw_arrow",
      "cv_draw_arrows",
      "cv_line_graph"
    ],
    "background": [
      "with_corner_radius",
      "_line_numbered_string",
      "optical_flow_to_arrow_grid"
    ],
    "strength": [
      "with_image_glow",
      "with_image_glows"
    ],
    "inner_radius": [
      "get_alpha_outline",
      "with_alpha_outline"
    ],
    "outer_radius": [
      "get_alpha_outline",
      "with_alpha_outline"
    ],
    "include_edges": [
      "get_alpha_outline",
      "with_alpha_outline"
    ],
    "allow_growth": [
      "get_alpha_outline",
      "with_alpha_outline",
      "shift_image",
      "resize_image_to_fit",
      "resize_images_to_fit",
      "resize_video_to_fit",
      "resize_videos_to_fit"
    ],
    "progress": [
      "get_progress_bar_image",
      "image_with_progress_bar"
    ],
    "bar_color": [
      "get_progress_bar_image",
      "image_with_progress_bar",
      "video_with_progress_bar"
    ],
    "reverse": [
      "get_progress_bar_image",
      "image_with_progress_bar",
      "video_with_progress_bar",
      "sorted_by_number",
      "sorted_by_len",
      "sorted_by_attr",
      "sorted_dict",
      "contains_sort",
      "powerset",
      "input_select",
      "input_select_multiple",
      "input_select_path",
      "input_select_folder",
      "input_select_file",
      "accumulate_flows",
      "file_line_iterator"
    ],
    "position": [
      "image_with_progress_bar",
      "video_with_progress_bar",
      "labeled_image",
      "cv_floodfill_mask"
    ],
    "video": [
      "video_with_progress_bar",
      "boomerang_video",
      "slowmo_video_via_rife",
      "trim_video",
      "save_animated_webp",
      "display_video",
      "_make_video_dimensions_even",
      "_display_video_via_mediapy",
      "display_video_in_notebook",
      "_display_video_in_notebook",
      "display_video_in_notebook_webp",
      "_omni_save_animated_image",
      "get_video_height",
      "get_video_width",
      "_cv_save_video_mp4",
      "save_video_gif_via_pil",
      "save_video",
      "encode_video_to_bytes",
      "remove_duplicate_frames",
      "resize_video_to_hold",
      "resize_video_to_fit",
      "run_cotracker",
      "run_tapnet",
      "calculate_flows",
      "as_numpy_video",
      "loop_wrapper"
    ],
    "length": [
      "video_with_progress_bar",
      "trim_video",
      "trim_videos",
      "random_substring",
      "line_graph_live",
      "tiled_images",
      "load_video",
      "load_videos",
      "resize_list",
      "resize_lists"
    ],
    "name": [
      "_get_executable",
      "with_file_name",
      "with_folder_name",
      "_get_rp_color",
      "_ensure_installed",
      "tmux_get_unique_session_name",
      "monkey_patch",
      "__new__",
      "match",
      "apply_suffix_to_name",
      "run_test",
      "__delattr__",
      "__setattr__",
      "get_code",
      "_is_likely_module_function"
    ],
    "download_urls": [
      "_get_executable"
    ],
    "executable_name": [
      "_get_executable"
    ],
    "origin": [
      "_crop_images_to_max_or_min_size",
      "crop_images_to_max_size",
      "crop_images_to_min_size",
      "crop_images_to_max_height",
      "crop_images_to_max_width",
      "crop_images_to_min_height",
      "crop_images_to_min_width",
      "crop_image_to_square",
      "crop_images_to_square",
      "_concatenated_videos",
      "horizontally_concatenated_videos",
      "vertically_concatenated_videos",
      "vertically_concatenated_images",
      "grid_concatenated_images",
      "tiled_images",
      "crop_image",
      "crop_images",
      "crop_videos",
      "crop_videos_to_min_size",
      "crop_videos_to_max_size",
      "_pad_string_height",
      "pad_to_same_number_of_lines",
      "_parse_origin_to_pixels"
    ],
    "criterion": [
      "_crop_images_to_max_or_min_size"
    ],
    "copy": [
      "_crop_images_to_max_or_min_size",
      "crop_images_to_max_size",
      "crop_images_to_min_size",
      "crop_images_to_max_height",
      "crop_images_to_max_width",
      "crop_images_to_min_height",
      "crop_images_to_min_width",
      "crop_image_to_square",
      "crop_images_to_square",
      "trim_video",
      "_trim_videos_to_same_length",
      "trim_videos_to_max_length",
      "trim_videos_to_min_length",
      "cv_bgr_rgb_swap",
      "_cv_helper",
      "cv_draw_contours",
      "cv_draw_rectangle",
      "cv_draw_circle",
      "cv_draw_circles",
      "cv_draw_arrow",
      "cv_draw_arrows",
      "_cv_morphological_helper",
      "cv_erode",
      "cv_dilate",
      "skia_stamp_image",
      "as_grayscale_image",
      "as_rgb_image",
      "as_rgba_image",
      "as_float_image",
      "as_byte_image",
      "as_binary_image",
      "_images_conversion",
      "as_float_images",
      "as_byte_images",
      "as_binary_images",
      "as_rgb_images",
      "as_rgba_images",
      "as_grayscale_images",
      "crop_image",
      "cv_resize_image",
      "cv_resize_images",
      "torch_resize_image",
      "torch_resize_images",
      "with_alpha_channel",
      "with_image_rgb",
      "as_numpy_images",
      "as_numpy_image",
      "as_torch_videos",
      "as_torch_images",
      "as_torch_image",
      "converter"
    ],
    "do_height": [
      "_crop_images_to_max_or_min_size"
    ],
    "do_width": [
      "_crop_images_to_max_or_min_size"
    ],
    "grow": [
      "crop_image_to_square",
      "crop_images_to_square"
    ],
    "include_position": [
      "crop_image_at_random_position"
    ],
    "image_dimensions": [
      "get_random_crop_bounds",
      "get_center_crop_bounds"
    ],
    "crop_dimensions": [
      "get_random_crop_bounds",
      "get_center_crop_bounds"
    ],
    "image_method": [
      "_concatenated_videos"
    ],
    "videos": [
      "_concatenated_videos",
      "labeled_videos",
      "tiled_videos",
      "crop_videos",
      "crop_videos_to_min_size",
      "crop_videos_to_max_size",
      "as_numpy_videos",
      "as_torch_videos"
    ],
    "f\u11a2row\u02cfcolumn": [
      "grid2d"
    ],
    "grid2d_input": [
      "grid2d_map"
    ],
    "value_func": [
      "grid2d_map"
    ],
    "resize_func": [
      "_auto_interp_for_resize_image"
    ],
    "new_size": [
      "_auto_interp_for_resize_image"
    ],
    "scale": [
      "_resize_image_via_skimage",
      "resize_image",
      "contours_to_image",
      "cv_text_to_image",
      "_single_line_cv_text_to_image",
      "get_sinusoidal_positional_encodings"
    ],
    "interp": [
      "_resize_image_via_skimage",
      "resize_image",
      "rotate_image",
      "rotate_images",
      "_rotate_rgb_image",
      "roll_image",
      "cv_resize_image",
      "cv_resize_images",
      "resize_videos",
      "skia_resize_image",
      "torch_resize_image",
      "torch_resize_images",
      "torch_remap_image",
      "apply_uv_map",
      "torch_scatter_add_image",
      "resize_image_to_hold",
      "resize_image_to_fit",
      "resize_images_to_hold",
      "resize_images_to_fit",
      "resize_video_to_hold",
      "resize_video_to_fit",
      "resize_videos_to_fit",
      "resize_videos_to_hold",
      "resize_images_to_max_size",
      "resize_images_to_min_size",
      "resize_videos_to_min_size",
      "resize_videos_to_max_size",
      "cv_remap_image",
      "_get_skia_sampling"
    ],
    "min_x": [
      "xy_float_images",
      "xy_torch_matrices"
    ],
    "max_x": [
      "xy_float_images",
      "xy_torch_matrices"
    ],
    "min_y": [
      "xy_float_images",
      "xy_torch_matrices"
    ],
    "max_y": [
      "xy_float_images",
      "xy_torch_matrices"
    ],
    "dtype": [
      "xy_torch_matrices",
      "_create_array_like",
      "_zeros_like",
      "_ones_like",
      "_randn_like",
      "_rand_like",
      "_get_cotracker_model",
      "as_torch_videos",
      "as_torch_images",
      "as_torch_image"
    ],
    "device": [
      "xy_torch_matrices",
      "_get_depth_pro_model",
      "run_depth_pro",
      "_get_cotracker_model",
      "run_cotracker",
      "run_tapnet",
      "as_torch_videos",
      "as_torch_images",
      "as_torch_image",
      "load_safetensors",
      "_torch_device_to_index"
    ],
    "use_cache": [
      "xy_torch_matrices",
      "load_animated_gif",
      "load_image",
      "load_rgb_image",
      "load_images",
      "_load_images_via_pdf2image",
      "display_image_slideshow",
      "text_file_to_string",
      "load_file_lines",
      "load_text_files",
      "load_json",
      "load_jsons",
      "load_tsv",
      "load_parquet",
      "load_yaml_file",
      "load_yaml_files",
      "get_system_commands",
      "system_command_exists",
      "_get_all_github_gists_info",
      "get_youtube_video_thumbnail",
      "get_video_file_duration",
      "_get_video_file_framerate_via_moviepy",
      "_get_video_file_framerate_via_ffprobe",
      "get_video_file_framerate",
      "load_video",
      "load_videos",
      "get_cutscene_frame_numbers",
      "get_all_importable_module_names",
      "get_all_taken_ports",
      "get_video_file_shape",
      "get_video_file_num_frames",
      "get_video_file_height",
      "get_video_file_width",
      "file_to_bytes",
      "file_to_base64",
      "file_to_object",
      "is_a_git_repo",
      "get_git_repo_root",
      "load_safetensors"
    ],
    "module_name": [
      "_is_instance_of_module_class",
      "get_module_path_from_name",
      "module_exists",
      "pip_import",
      "_import_module",
      "autoimportable_module",
      "try_import"
    ],
    "class_name": [
      "_is_instance_of_module_class"
    ],
    "arr_or_len": [
      "random_index"
    ],
    "n": [
      "random_permutation",
      "pop_exception_traceback",
      "random_namespace_hash",
      "split_into_n_sublists",
      "split_into_n_subdicts",
      "ncr",
      "cv_best_match_contours",
      "fractional_integral_in_frequency_domain",
      "best_flann_dict_matches",
      "unicode_loading_bar",
      "fibonacci",
      "inverse_fibonacci",
      "get_next_free_port",
      "select_torch_device",
      "get_gpu_with_most_free_vram",
      "out",
      "__call__",
      "f"
    ],
    "permutation": [
      "is_a_permutation",
      "inverse_permutation"
    ],
    "a_inclusive": [
      "randint",
      "randints"
    ],
    "b_inclusive": [
      "randint",
      "randints"
    ],
    "N": [
      "randints",
      "random_floats",
      "riemann_sum",
      "riemann_mean",
      "random_rgb_byte_colors",
      "random_rgba_byte_colors",
      "random_grayscale_byte_colors",
      "random_rgb_float_colors",
      "random_rgba_float_colors",
      "random_grayscale_float_colors",
      "random_rgb_binary_colors",
      "random_rgba_binary_colors",
      "random_grayscale_binary_colors",
      "random_hex_colors"
    ],
    "exclusive_max": [
      "random_float",
      "random_float_complex",
      "random_floats"
    ],
    "inclusive_min": [
      "random_float",
      "random_float_complex",
      "random_floats"
    ],
    "probability": [
      "random_chance"
    ],
    "full_list": [
      "random_batch",
      "random_batch_up_to",
      "random_batch_with_replacement"
    ],
    "batch_size": [
      "random_batch",
      "random_batch_with_replacement",
      "random_parallel_batch"
    ],
    "retain_order": [
      "random_batch",
      "random_batch_up_to",
      "random_parallel_batch"
    ],
    "max_batch_size": [
      "random_batch_up_to"
    ],
    "method": [
      "random_batch_with_replacement",
      "_cpah",
      "display_pandas_correlation_heatmap"
    ],
    "seed": [
      "temporary_random_seed",
      "temporary_numpy_random_seed",
      "temporary_torch_random_seed",
      "seed_all",
      "temporary_seed_all"
    ],
    "url": [
      "is_valid_url",
      "load_image_from_url",
      "display_website_in_terminal",
      "shorten_url",
      "shorten_github_url",
      "open_url_in_web_browser",
      "download_font",
      "_is_youtube_video_url",
      "_get_youtube_video_data_via_embeddify",
      "is_s3_url",
      "is_gs_url",
      "download_url",
      "download_url_to_cache",
      "get_cache_file_path",
      "curl",
      "curl_bytes",
      "dns_lookup",
      "_distill_github_url",
      "_get_repo_name_from_url",
      "git_clone",
      "download"
    ],
    "load_file": [
      "load_files",
      "_load_files"
    ],
    "file_paths": [
      "load_files",
      "_load_files",
      "get_file_extensions"
    ],
    "show_progress": [
      "load_files",
      "_load_files",
      "load_images",
      "save_images",
      "convert_image_files",
      "load_text_files",
      "load_jsons",
      "load_tsv",
      "load_parquet",
      "load_yaml_files",
      "rotate_images",
      "read_symlinks",
      "make_symlinks_relative",
      "make_symlinks_absolute",
      "replace_symlinks_with_hardlinks",
      "search_processes",
      "cv_draw_circles",
      "cv_draw_arrows",
      "_get_hash",
      "get_md5_hash",
      "get_sha256_hash",
      "labeled_images",
      "labeled_videos",
      "download_fonts",
      "download_google_fonts",
      "download_all_google_fonts",
      "tiled_videos",
      "download_youtube_video",
      "load_video_streams",
      "load_video",
      "load_videos",
      "_cv_save_video_mp4",
      "save_video_mp4",
      "convert_to_gif_via_ffmpeg",
      "convert_to_gifs_via_ffmpeg",
      "_delete_paths_helper",
      "delete_paths",
      "delete_files",
      "delete_folders",
      "copy_paths",
      "path_join",
      "remove_duplicate_frames",
      "crop_images",
      "crop_videos",
      "crop_videos_to_min_size",
      "crop_videos_to_max_size",
      "s3_list_objects",
      "download_url",
      "download_urls",
      "download_url_to_cache",
      "download_urls_to_cache",
      "get_cache_file_paths",
      "get_all_taken_ports",
      "_web_copy",
      "web_copy",
      "extract_zip_file",
      "cv_resize_images",
      "resize_videos",
      "resize_images_to_hold",
      "resize_images_to_fit",
      "resize_video_to_hold",
      "resize_video_to_fit",
      "resize_videos_to_fit",
      "resize_videos_to_hold",
      "web_copy_path",
      "calculate_flows",
      "git_clone",
      "git_pull",
      "load_safetensors",
      "refresh"
    ],
    "strict": [
      "load_files",
      "_load_files",
      "load_images",
      "convert_image_files",
      "gather",
      "load_text_files",
      "load_jsons",
      "load_yaml_files",
      "split_into_sublists",
      "split_into_subdicts",
      "read_symlinks",
      "make_symlinks_relative",
      "make_symlinks_absolute",
      "replace_symlinks_with_hardlinks",
      "make_symlink",
      "kill_processes",
      "_get_font_path",
      "download_fonts",
      "download_google_fonts",
      "split_tensor_into_regions",
      "load_video_streams",
      "load_videos",
      "delete_file",
      "_delete_paths_helper",
      "delete_paths",
      "delete_files",
      "delete_folders",
      "copy_paths",
      "download_urls",
      "download_urls_to_cache",
      "get_process_using_port",
      "tmux_kill_session",
      "tmux_kill_sessions",
      "import_all_submodules",
      "broadcast_lists",
      "killport"
    ],
    "location": [
      "load_animated_gif",
      "load_image",
      "load_rgb_image",
      "_load_text_from_file_or_url",
      "_load_video_stream"
    ],
    "backend": [
      "copy_image_to_clipboard",
      "set_save_video_mp4_default_backend",
      "save_video_mp4",
      "pip_install"
    ],
    "dpi": [
      "_load_images_via_pdf2image",
      "load_image_from_matplotlib"
    ],
    "file_name": [
      "load_image_from_file",
      "_load_image_from_file_via_PIL",
      "_load_image_from_file_via_imageio",
      "_load_image_from_file_via_scipy",
      "_load_image_from_file_via_opencv",
      "save_image",
      "play_sound_file_via_pygame",
      "_display_downloadable_image_in_notebook_via_ipython",
      "load_pickled_value",
      "save_pickled_value",
      "file_line_iterator",
      "_file_line_gen",
      "_reverse_file_line_gen"
    ],
    "fig": [
      "load_image_from_matplotlib"
    ],
    "file_path": [
      "_get_openexr_image_dimensions",
      "is_valid_openexr_file",
      "get_openexr_channels",
      "load_openexr_image",
      "save_openexr_image",
      "load_sound_file",
      "string_to_text_file",
      "save_text_file",
      "text_file_to_string",
      "load_file_lines",
      "save_file_lines",
      "append_line_to_file",
      "load_tsv",
      "load_parquet",
      "_guess_mimetype",
      "is_image_file",
      "is_video_file",
      "is_sound_file",
      "strip_file_extension",
      "get_file_extension",
      "has_file_extension",
      "get_git_date_modified"
    ],
    "channels": [
      "load_openexr_image",
      "display_cv_color_histogram",
      "display_cv_color_histograms",
      "get_sinusoidal_positional_encodings"
    ],
    "filetype": [
      "_encode_image_to_bytes",
      "encode_image_to_bytes",
      "encode_images_to_bytes",
      "encode_image_to_base64",
      "encode_images_to_base64",
      "display_video_in_notebook",
      "_display_video_in_notebook",
      "download_youtube_video",
      "encode_video_to_bytes",
      "decode_video_from_bytes"
    ],
    "quality": [
      "_encode_image_to_bytes",
      "encode_image_to_bytes",
      "encode_images_to_bytes",
      "encode_image_to_base64",
      "encode_images_to_base64",
      "save_image_jpg",
      "save_image_webp",
      "save_image_avif",
      "save_image_jxl",
      "save_animated_webp",
      "display_video_in_notebook_webp",
      "_cv_save_video_mp4",
      "take_photo"
    ],
    "encoded_images": [
      "decode_images_from_bytes"
    ],
    "base64_string": [
      "decode_image_from_base64",
      "base64_to_bytes",
      "_call_from_base64_string"
    ],
    "base64_strings": [
      "decode_images_from_base64"
    ],
    "encoded_image": [
      "decode_bytes_to_image"
    ],
    "add_png_extension": [
      "save_image"
    ],
    "paths": [
      "save_images",
      "_get_files_from_paths",
      "_cpah",
      "_detuple_paths",
      "find_and_replace_text_files",
      "_nbca"
    ],
    "skip_overwrites": [
      "save_images"
    ],
    "add_extension": [
      "save_image_jpg",
      "save_image_webp",
      "save_image_avif",
      "save_image_jxl",
      "save_animated_webp"
    ],
    "framerate": [
      "save_animated_webp",
      "display_video",
      "_display_video_via_mediapy",
      "display_video_in_notebook",
      "_display_video_in_notebook",
      "display_video_in_notebook_webp",
      "line_graph_live",
      "display_video_in_terminal_color",
      "save_animated_png",
      "save_video_avi",
      "_cv_save_video_mp4",
      "save_video_mp4",
      "save_video_gif_via_pil",
      "convert_to_gif_via_ffmpeg",
      "convert_to_gifs_via_ffmpeg",
      "save_video",
      "encode_video_to_bytes"
    ],
    "loop": [
      "save_animated_webp",
      "play_sound_from_samples",
      "display_video",
      "display_video_in_terminal_color",
      "loop_direction_2d",
      "is_clockwise",
      "is_counter_clockwise",
      "differential_euclidean_distances",
      "cumulative_euclidean_distances",
      "evenly_split_path"
    ],
    "get_files": [
      "_get_files_from_paths"
    ],
    "input_file": [
      "convert_image_file",
      "convert_audio_file",
      "_convert_image"
    ],
    "new_extension": [
      "convert_image_file",
      "convert_image_files"
    ],
    "output_folder": [
      "convert_image_file",
      "convert_image_files"
    ],
    "skip_overwrite": [
      "convert_image_file",
      "convert_image_files"
    ],
    "image_transform": [
      "convert_image_file",
      "convert_image_files"
    ],
    "name_transform": [
      "convert_image_file",
      "convert_image_files"
    ],
    "load_image": [
      "convert_image_file",
      "convert_image_files"
    ],
    "save_image": [
      "convert_image_file",
      "convert_image_files"
    ],
    "delete_original": [
      "convert_image_file",
      "convert_image_files"
    ],
    "input_files": [
      "convert_image_files"
    ],
    "parallel": [
      "convert_image_files",
      "play_sound_file_via_afplay",
      "_nbca"
    ],
    "text": [
      "text_to_speech_via_apple",
      "text_to_speech_via_google",
      "text_to_speech_voices_comparison",
      "text_to_speech",
      "display_qr_code_in_terminal",
      "_translate_offline",
      "translate",
      "_labeled_image_text_to_image",
      "labeled_image",
      "_cv_text_to_image_monospace",
      "cv_text_to_image",
      "_single_line_cv_text_to_image",
      "_slow_pil_text_to_image",
      "pil_text_to_image",
      "skia_text_to_image",
      "split_sentences",
      "zalgo_text",
      "big_ascii_text",
      "gpt3",
      "_tokenize",
      "cyan"
    ],
    "voice": [
      "text_to_speech_via_apple",
      "text_to_speech_via_google",
      "text_to_speech"
    ],
    "run_as_thread": [
      "text_to_speech_via_apple",
      "text_to_speech_via_google",
      "text_to_speech"
    ],
    "rate_in_words_per_minute": [
      "text_to_speech_via_apple"
    ],
    "filter_characters": [
      "text_to_speech_via_apple"
    ],
    "play_sound": [
      "text_to_speech_via_google"
    ],
    "time_per_voice": [
      "text_to_speech_voices_comparison"
    ],
    "voices": [
      "text_to_speech_voices_comparison"
    ],
    "samples": [
      "adjust_samplerate",
      "save_wav",
      "play_sound_from_samples"
    ],
    "original_samplerate": [
      "adjust_samplerate"
    ],
    "new_samplerate": [
      "adjust_samplerate"
    ],
    "samplerate": [
      "load_sound_file",
      "save_wav",
      "play_sound_from_samples",
      "mp3_to_wav",
      "wav_to_mp3",
      "record_mono_audio",
      "sine_tone_sampler",
      "triangle_tone_sampler",
      "sawtooth_tone_sampler",
      "square_tone_sampler",
      "play_tone",
      "play_semitone"
    ],
    "blocking": [
      "play_sound_from_samples",
      "play_tone",
      "play_semitone"
    ],
    "absolute_file_path_and_name": [
      "play_sound_file_via_afplay"
    ],
    "volume": [
      "play_sound_file_via_afplay"
    ],
    "rate": [
      "play_sound_file_via_afplay",
      "record_mouse_positions",
      "playback_mouse_positions"
    ],
    "rate_quality": [
      "play_sound_file_via_afplay"
    ],
    "debug": [
      "play_sound_file_via_afplay"
    ],
    "return_simple_stopping_function": [
      "play_sound_file_via_pygame"
    ],
    "mp3_file_path": [
      "mp3_to_wav"
    ],
    "wav_output_path": [
      "mp3_to_wav"
    ],
    "wav_file_path": [
      "wav_to_mp3"
    ],
    "mp3_output_path": [
      "wav_to_mp3"
    ],
    "output_file": [
      "convert_audio_file",
      "concat_mp4_files"
    ],
    "skip_existing": [
      "convert_audio_file",
      "download_google_font",
      "download_font",
      "download_fonts",
      "download_google_fonts",
      "download_youtube_video",
      "copy_paths",
      "download_url",
      "download_urls",
      "download_url_to_cache",
      "download_urls_to_cache"
    ],
    "kernel_name": [
      "add_ipython_kernel"
    ],
    "display_name": [
      "add_ipython_kernel"
    ],
    "embed": [
      "display_video_in_notebook",
      "_display_video_in_notebook"
    ],
    "save_video": [
      "_display_video_in_notebook"
    ],
    "block": [
      "display_image",
      "display_alpha_image",
      "bar_graph",
      "line_graph",
      "display_polygon",
      "display_update",
      "display_cv_color_histogram",
      "display_cv_color_histograms",
      "display_dot",
      "display_path",
      "play_chord",
      "scatter_plot",
      "display_pandas_correlation_heatmap"
    ],
    "display": [
      "display_image_slideshow"
    ],
    "values": [
      "bar_graph",
      "histogram_in_terminal",
      "linterp",
      "keys_and_values_to_dict",
      "get_box_char_bar_graph",
      "line_graph_via_bokeh",
      "histogram_via_bokeh",
      "plot"
    ],
    "align": [
      "bar_graph",
      "format_date",
      "with_line_numbers",
      "_labeled_image_text_to_image",
      "labeled_image",
      "cv_text_to_image",
      "pil_text_to_image",
      "skia_text_to_image",
      "make_string_rectangular",
      "simple_boxed_string"
    ],
    "xlabel": [
      "bar_graph",
      "line_graph_via_plotille",
      "line_graph",
      "scatter_plot",
      "line_graph_via_bokeh",
      "histogram_via_bokeh"
    ],
    "ylabel": [
      "bar_graph",
      "line_graph_via_plotille",
      "line_graph",
      "scatter_plot",
      "line_graph_via_bokeh",
      "histogram_via_bokeh"
    ],
    "label_bars": [
      "bar_graph"
    ],
    "sideways": [
      "histogram_in_terminal"
    ],
    "y_values": [
      "line_graph_via_plotille",
      "cv_line_graph"
    ],
    "x_values": [
      "line_graph_via_plotille",
      "cv_line_graph"
    ],
    "y_min": [
      "line_graph_via_plotille",
      "cv_line_graph"
    ],
    "y_max": [
      "line_graph_via_plotille",
      "cv_line_graph"
    ],
    "x_min": [
      "line_graph_via_plotille",
      "cv_line_graph"
    ],
    "x_max": [
      "line_graph_via_plotille",
      "cv_line_graph"
    ],
    "line_color": [
      "line_graph_via_plotille",
      "line_graph",
      "display_polygon",
      "cv_line_graph"
    ],
    "silent": [
      "line_graph_via_plotille",
      "is_valid_shell_syntax",
      "is_valid_sh_syntax",
      "is_valid_bash_syntax",
      "is_valid_zsh_syntax",
      "_fd",
      "select_torch_device",
      "print_gpu_summary",
      "check_pip_requirements"
    ],
    "graph": [
      "line_graph_live"
    ],
    "show_dots": [
      "line_graph"
    ],
    "clf": [
      "line_graph",
      "display_cv_color_histogram",
      "display_cv_color_histograms"
    ],
    "use_dashed_lines": [
      "line_graph"
    ],
    "background_image": [
      "line_graph"
    ],
    "logx": [
      "line_graph",
      "line_graph_via_bokeh",
      "histogram_via_bokeh"
    ],
    "logy": [
      "line_graph",
      "line_graph_via_bokeh",
      "histogram_via_bokeh"
    ],
    "filled": [
      "display_polygon"
    ],
    "fill_color": [
      "display_polygon"
    ],
    "line_width": [
      "display_polygon"
    ],
    "line_style": [
      "display_polygon"
    ],
    "clear": [
      "display_polygon",
      "scatter_plot"
    ],
    "on_click": [
      "block"
    ],
    "on_unclick": [
      "block"
    ],
    "time": [
      "display_update"
    ],
    "linestyle": [
      "display_cv_color_histogram",
      "display_path"
    ],
    "image1": [
      "display_cv_color_histograms"
    ],
    "image2": [
      "display_cv_color_histograms"
    ],
    "key": [
      "_minmax_indices",
      "min_valued_indices",
      "max_valued_indices",
      "min_valued_elements",
      "max_valued_elements",
      "max_valued_index",
      "matching_keys",
      "matching_indices",
      "sync_sorted",
      "sorted_by_attr",
      "sorted_dict",
      "contains_sort",
      "cluster_by_key",
      "chunk_by_key",
      "_get_openai_api_key",
      "on_key_press",
      "__delitem__",
      "__contains__",
      "get",
      "_keyify",
      "add",
      "__getattr__",
      "delete",
      "dupdate",
      "__getattribute__"
    ],
    "\u03b1": [
      "blend"
    ],
    "z": [
      "iblend"
    ],
    "x0": [
      "interp",
      "riemann_sum",
      "riemann_mean",
      "perpendicular_bisector_function"
    ],
    "x1": [
      "interp",
      "riemann_sum",
      "riemann_mean",
      "perpendicular_bisector_function"
    ],
    "y0": [
      "interp",
      "perpendicular_bisector_function"
    ],
    "y1": [
      "interp",
      "perpendicular_bisector_function"
    ],
    "index": [
      "linterp",
      "_cv_print_cam_props",
      "__getitem__"
    ],
    "cyclic": [
      "linterp"
    ],
    "blend_func": [
      "linterp"
    ],
    "d": [
      "matching_keys",
      "destructure",
      "invert_dict",
      "dict_to_list",
      "display_dict",
      "split_into_subdicts",
      "split_into_n_subdicts",
      "dict_walk",
      "_load_pyin_settings_from_dict",
      "sorty",
      "dictify",
      "dupdate",
      "deep_dark_dict_copy"
    ],
    "check": [
      "matching_keys",
      "matching_indices"
    ],
    "iterable": [
      "gather",
      "deepcopy_multiply",
      "cluster_by_key",
      "cluster_by_attr",
      "chunk_by_attr",
      "chunk_by_key",
      "join_with_separator",
      "powerset",
      "_iterfzf",
      "skip_filter"
    ],
    "as_dict": [
      "gather",
      "gather_vars",
      "gather_attrs",
      "cluster_by_key",
      "cluster_by_attr",
      "chunk_by_attr",
      "get_image_dimensions"
    ],
    "frames_back": [
      "gather_vars",
      "gather_args",
      "gather_args_call",
      "gather_args_wrap",
      "gather_args_bind",
      "get_current_function",
      "get_current_function_name",
      "gather_args_recursive_call",
      "get_rich_traceback_string",
      "repr_vars",
      "get_scope",
      "_get_visible_scope"
    ],
    "skip_missing": [
      "gather_vars"
    ],
    "value": [
      "replace_if_none",
      "MIDI_control",
      "MIDI_control_precisely",
      "MIDI_breath",
      "proportion_to_digits",
      "handy_hash",
      "get_apriltag_image",
      "get_form",
      "as_form",
      "is_form",
      "__setitem__",
      "fallback",
      "__setattr__",
      "should_traverse",
      "pterm_pretty_print",
      "do",
      "do_if_new",
      "_display_pterm_image"
    ],
    "exception_types": [
      "squelch_call",
      "squelch_wrap"
    ],
    "on_exception": [
      "squelch_call",
      "squelch_wrap"
    ],
    "module": [
      "rebind_globals_to_module",
      "reload_module",
      "get_all_submodule_names",
      "get_module_path",
      "explore_torch_module",
      "record_torch_module_forward_stats",
      "import_all_submodules",
      "get_code",
      "get_full_module_name"
    ],
    "monkey_patch": [
      "rebind_globals_to_module"
    ],
    "input_dict": [
      "_filter_dict_via_fzf"
    ],
    "preview": [
      "_filter_dict_via_fzf",
      "_ISM"
    ],
    "bijection": [
      "invert_dict"
    ],
    "precedence": [
      "invert_dict",
      "merged_dicts"
    ],
    "key_color": [
      "display_dict",
      "display_list"
    ],
    "arrow_color": [
      "display_dict",
      "display_list"
    ],
    "value_color": [
      "display_dict",
      "display_list"
    ],
    "clip_width": [
      "display_dict"
    ],
    "post_processor": [
      "display_dict"
    ],
    "key_sorter": [
      "display_dict"
    ],
    "print_it": [
      "display_dict",
      "display_list",
      "print_stack_trace"
    ],
    "arrow": [
      "display_dict"
    ],
    "markdown": [
      "display_markdown"
    ],
    "date": [
      "format_date"
    ],
    "timezone": [
      "format_date",
      "format_current_date"
    ],
    "decorator": [
      "_method_decorator_metaclass"
    ],
    "docstring": [
      "_method_decorator_metaclass"
    ],
    "form": [
      "get_current_timezone",
      "as_form",
      "is_form"
    ],
    "object": [
      "rinsp",
      "get_source_code",
      "get_source_file",
      "_omni_save",
      "is_a_module",
      "object_to_file",
      "get_parent_hierarchy"
    ],
    "search_or_show_documentation": [
      "rinsp"
    ],
    "show_source_code": [
      "rinsp"
    ],
    "show_summary": [
      "rinsp"
    ],
    "max_str_lines": [
      "rinsp"
    ],
    "fansi": [
      "rinsp"
    ],
    "webcam_index": [
      "load_image_from_webcam"
    ],
    "monitor": [
      "load_image_from_screenshot_via_mss"
    ],
    "cursor": [
      "load_image_from_screenshot_via_mss"
    ],
    "time_in_seconds": [
      "record_mono_audio"
    ],
    "stream": [
      "record_mono_audio"
    ],
    "chunk_size": [
      "record_mono_audio"
    ],
    "message": [
      "MIDI_output",
      "printed",
      "mini_editor",
      "_convert_powerpoint_file",
      "send_text_message",
      "input_select_path",
      "input_select_folder",
      "input_select_file",
      "send_facebook_message",
      "_run_openai_llm",
      "run_llm_api"
    ],
    "controller_number": [
      "MIDI_control",
      "MIDI_jiggle_control"
    ],
    "coarse_controller_number": [
      "MIDI_control_precisely"
    ],
    "fine_controller_number": [
      "MIDI_control_precisely"
    ],
    "note": [
      "MIDI_note_on",
      "MIDI_note_off"
    ],
    "velocity": [
      "MIDI_note_on",
      "MIDI_note_off"
    ],
    "\u0394semitones": [
      "MIDI_pitch_bend"
    ],
    "\u0192_callback": [
      "MIDI_input"
    ],
    "mycmp": [
      "cmp_to_key"
    ],
    "zero": [
      "sign"
    ],
    "lines": [
      "save_file_lines",
      "combine_range"
    ],
    "line": [
      "append_line_to_file",
      "count_leading",
      "matches",
      "process_line",
      "print_line",
      "is_valid_line",
      "get_lines",
      "get_timestamp",
      "strip_braces"
    ],
    "data": [
      "save_json",
      "_view_with_pyfx",
      "_view_interactive_json",
      "compress_bytes",
      "encode_bytes_to_image",
      "_web_copy",
      "web_copy",
      "local_copy",
      "bytes_to_file",
      "view_table",
      "_paste_path_from_bundle",
      "autoformat_json",
      "list_dict_transpose"
    ],
    "pretty": [
      "save_json"
    ],
    "default": [
      "save_json",
      "input_default",
      "dupdate"
    ],
    "header": [
      "load_tsv",
      "print_stack_trace",
      "python_input"
    ],
    "sep": [
      "load_tsv"
    ],
    "max_rows": [
      "load_tsv"
    ],
    "src": [
      "parse_dyaml",
      "translate",
      "parse_dyaml_junctions"
    ],
    "factor": [
      "deepcopy_multiply"
    ],
    "equality_check": [
      "assert_equality"
    ],
    "list_to_be_accessed": [
      "get_nested_value"
    ],
    "ignore_errors": [
      "get_nested_value"
    ],
    "obj": [
      "get_nested_attr",
      "_get_object_lineno"
    ],
    "attr": [
      "get_nested_attr",
      "sorted_by_attr",
      "cluster_by_attr",
      "chunk_by_attr",
      "color"
    ],
    "command": [
      "shell_command",
      "system_command_exists",
      "is_valid_shell_syntax",
      "is_valid_sh_syntax",
      "is_valid_bash_syntax",
      "is_valid_zsh_syntax",
      "_run_ai_cli_coder",
      "_run_tmux_command",
      "_string_diff_helper",
      "run_and_read_all",
      "run_and_parse_first_match",
      "process_command"
    ],
    "stdin": [
      "shell_command"
    ],
    "value_to_be_returned": [
      "printed"
    ],
    "end": [
      "printed",
      "print",
      "rain_once",
      "animate_rain",
      "combine_range"
    ],
    "shape": [
      "display_dot",
      "get_sinusoidal_positional_encodings",
      "_create_array_like",
      "_zeros_like",
      "_ones_like",
      "_randn_like",
      "_rand_like",
      "_parse_origin_to_pixels",
      "format_shape"
    ],
    "marker": [
      "display_path"
    ],
    "to_language": [
      "_translate_offline"
    ],
    "dest": [
      "translate"
    ],
    "reversed": [
      "sync_sorted"
    ],
    "dict": [
      "sorted_dict"
    ],
    "substrings": [
      "_string_with_any"
    ],
    "match_func": [
      "_string_with_any"
    ],
    "return_match": [
      "_string_with_any",
      "starts_with_any",
      "ends_with_any"
    ],
    "array": [
      "contains_sort",
      "circular_diff",
      "circular_quotient",
      "resize_list",
      "resize_list_to_fit",
      "fuzzy_match"
    ],
    "contains": [
      "contains_sort"
    ],
    "min": [
      "full_range"
    ],
    "max": [
      "full_range"
    ],
    "\u0192": [
      "sine_tone_sampler",
      "triangle_tone_sampler",
      "sawtooth_tone_sampler",
      "square_tone_sampler"
    ],
    "T": [
      "sine_tone_sampler",
      "triangle_tone_sampler",
      "sawtooth_tone_sampler",
      "square_tone_sampler"
    ],
    "hz": [
      "play_tone"
    ],
    "tone_sampler": [
      "play_tone",
      "play_semitone"
    ],
    "\u2188_semitones_from_A4_aka_440hz": [
      "play_semitone"
    ],
    "\u2188": [
      "semitone_to_hz"
    ],
    "t": [
      "play_chord",
      "format"
    ],
    "sampler": [
      "play_chord"
    ],
    "out": [
      "mini_editor"
    ],
    "c": [
      "is_namespaceable",
      "is_literal"
    ],
    "max_width": [
      "clip_string_width",
      "wrapped_line_tokens"
    ],
    "max_wraps_per_line": [
      "clip_string_width"
    ],
    "clipped_suffix": [
      "clip_string_width"
    ],
    "src_path": [
      "properties_to_xml"
    ],
    "target_path": [
      "properties_to_xml"
    ],
    "input": [
      "split_including_delimiters"
    ],
    "delimiter": [
      "split_including_delimiters"
    ],
    "s": [
      "split_letters_from_digits",
      "split_camel_case",
      "is_int_literal",
      "is_string_literal",
      "indentify",
      "lrstrip_all_lines",
      "search_replace_simul",
      "_truncate_string_floats",
      "type_string_with_keyboard",
      "pretty_lines",
      "is_builtin",
      "addstr_wordwrap",
      "words_and_spaces",
      "print_fansi_colors_in_curses"
    ],
    "min_value": [
      "clamp",
      "int_clamp",
      "float_clamp"
    ],
    "max_value": [
      "clamp",
      "int_clamp",
      "float_clamp"
    ],
    "exception": [
      "pop_exception_traceback",
      "print_verbose_stack_trace",
      "_all_files_listed_in_exception_traceback",
      "_vimore"
    ],
    "error": [
      "print_stack_trace",
      "print_highlighted_stack_trace",
      "get_name_from_name_error"
    ],
    "full_traceback": [
      "print_stack_trace"
    ],
    "error_or_frames_back": [
      "print_rich_stack_trace"
    ],
    "extra_lines": [
      "print_rich_stack_trace",
      "get_rich_traceback_string"
    ],
    "show_locals": [
      "print_rich_stack_trace",
      "get_rich_traceback_string"
    ],
    "print_output": [
      "print_rich_stack_trace"
    ],
    "exc": [
      "_get_stack_trace_string"
    ],
    "mono_audio": [
      "audio_stretch"
    ],
    "new_number_of_samples": [
      "audio_stretch"
    ],
    "\u0398_unit": [
      "cartesian_to_polar",
      "complex_to_polar"
    ],
    "complex": [
      "complex_to_polar"
    ],
    "left_to_right_sum_ratio": [
      "riemann_sum",
      "riemann_mean"
    ],
    "cyclic_function": [
      "fourier"
    ],
    "freq": [
      "fourier",
      "discrete_fourier"
    ],
    "cyclic_period": [
      "fourier"
    ],
    "\u2188_riemann_terms": [
      "fourier"
    ],
    "cyclic_vector": [
      "discrete_fourier"
    ],
    "m": [
      "matrix_to_tuples",
      "complex_linear_coeffs_to_euclidean_affine",
      "f"
    ],
    "filter": [
      "matrix_to_tuples",
      "cluster_filter"
    ],
    "wave": [
      "harmonic_analysis_via_least_squares"
    ],
    "harmonics": [
      "harmonic_analysis_via_least_squares"
    ],
    "compare": [
      "chunk_by_key"
    ],
    "vec": [
      "cluster_filter"
    ],
    "base": [
      "proportion_to_digits",
      "digits_to_proportion"
    ],
    "number_of_digits": [
      "proportion_to_digits"
    ],
    "digits": [
      "digits_to_proportion"
    ],
    "float_matrix": [
      "encode_float_matrix_to_rgba_byte_image"
    ],
    "indent": [
      "indentify",
      "unindent",
      "as_example_comment",
      "autoformat_json",
      "indentify_all_but_first_line"
    ],
    "replacements": [
      "search_replace_simul"
    ],
    "shortened_url": [
      "unshorten_url"
    ],
    "gist_url": [
      "load_gist"
    ],
    "content": [
      "save_gist",
      "_convert_content",
      "get_urls"
    ],
    "shorten_url": [
      "save_gist"
    ],
    "description": [
      "save_gist"
    ],
    "filename": [
      "save_gist",
      "number_of_lines_in_file",
      "take_photo"
    ],
    "token": [
      "save_gist",
      "git_import"
    ],
    "paper": [
      "get_arxiv_bibtex"
    ],
    "chars_to_choose_from": [
      "random_namespace_hash"
    ],
    "equation": [
      "latex_image"
    ],
    "dither": [
      "display_image_in_terminal",
      "as_binary_image"
    ],
    "auto_resize": [
      "display_image_in_terminal"
    ],
    "bordered": [
      "display_image_in_terminal"
    ],
    "pixels_per_line": [
      "display_image_in_terminal_imgcat"
    ],
    "frames": [
      "display_video_in_terminal_color",
      "save_animated_png",
      "save_video_avi",
      "save_video_mp4"
    ],
    "display_image": [
      "display_video_in_terminal_color"
    ],
    "lower": [
      "auto_canny"
    ],
    "upper": [
      "auto_canny"
    ],
    "img": [
      "_cv_skeletonize",
      "cv_imshow",
      "heightify"
    ],
    "latex": [
      "print_latex_image"
    ],
    "ans": [
      "_user_path_ans",
      "_absolute_path_ans",
      "_relative_path_ans",
      "_rma",
      "_ISM",
      "_input_select_rp_gists",
      "_get_function_names",
      "print_fix"
    ],
    "query": [
      "_cdh_back_query",
      "google_search_url",
      "open_google_search_in_web_browser",
      "_ric_current_candidate_fuzzy_matches",
      "_highlighted_query_results",
      "_rinsp_search_helper",
      "rinsp_search",
      "_datamuse_words_request",
      "_fd",
      "find_and_replace_text_files",
      "display_query_options",
      "highlighted"
    ],
    "sublist_len": [
      "split_into_sublists"
    ],
    "keep_remainder": [
      "split_into_sublists",
      "split_into_subdicts"
    ],
    "subdict_size": [
      "split_into_subdicts"
    ],
    "separator": [
      "join_with_separator"
    ],
    "expand_separator": [
      "join_with_separator"
    ],
    "angle_in_degrees": [
      "rotate_image",
      "_rotate_rgb_image"
    ],
    "angle": [
      "rotate_images",
      "rotation_matrix",
      "rotation_affine_2d"
    ],
    "total_n": [
      "_eta"
    ],
    "min_interval": [
      "_eta"
    ],
    "mutate": [
      "merged_dicts"
    ],
    "keys": [
      "keys_and_values_to_dict"
    ],
    "file_or_object": [
      "edit",
      "vim"
    ],
    "editor_command": [
      "edit"
    ],
    "modpath": [
      "_static_calldefs"
    ],
    "line_number": [
      "vim",
      "line_number_prefix_generator"
    ],
    "scope": [
      "_ipython_exeval_maker",
      "exeval",
      "python_input",
      "exec_ipynb"
    ],
    "local": [
      "_display_pterm_flamechart"
    ],
    "num_sigfigs": [
      "_truncate_string_floats"
    ],
    "exec": [
      "_pterm_exeval",
      "pseudo_terminal"
    ],
    "eval": [
      "_pterm_exeval",
      "pseudo_terminal"
    ],
    "tictoc": [
      "_pterm_exeval"
    ],
    "profile": [
      "_pterm_exeval"
    ],
    "line_profile": [
      "_pterm_exeval"
    ],
    "ipython": [
      "_pterm_exeval"
    ],
    "line_times": [
      "_rp_show_custom_line_profile"
    ],
    "line_hits": [
      "_rp_show_custom_line_profile"
    ],
    "start_time": [
      "_rp_show_custom_line_profile"
    ],
    "end_time": [
      "_rp_show_custom_line_profile"
    ],
    "prompt": [
      "_multi_line_python_input",
      "input_conditional",
      "input_default"
    ],
    "ui_theme_name": [
      "_set_pterm_theme"
    ],
    "code_theme_name": [
      "_set_pterm_theme"
    ],
    "enable_ptpython": [
      "python_input",
      "pseudo_terminal"
    ],
    "iPython": [
      "python_input"
    ],
    "history": [
      "_dhistory_helper"
    ],
    "prefix": [
      "with_line_numbers",
      "walk"
    ],
    "start_from": [
      "with_line_numbers"
    ],
    "recursive": [
      "read_symlink",
      "make_symlink_absolute",
      "make_symlink_relative",
      "read_symlinks",
      "make_symlinks_relative",
      "make_symlinks_absolute",
      "make_hardlink",
      "get_all_paths",
      "get_all_runnable_python_files",
      "delete_folder",
      "delete_all_paths_in_directory",
      "delete_all_files_in_directory",
      "s3_list_objects",
      "_get_all_paths_fast",
      "import_all_submodules"
    ],
    "symlink_path": [
      "make_symlink_absolute",
      "make_symlink_relative",
      "replace_symlink_with_hardlink",
      "make_symlink"
    ],
    "physical": [
      "make_symlink_absolute",
      "get_absolute_path",
      "get_absolute_paths",
      "get_all_paths"
    ],
    "original_path": [
      "make_hardlink",
      "make_symlink"
    ],
    "hardlink_path": [
      "make_hardlink"
    ],
    "relative": [
      "make_symlink",
      "symlink_move",
      "get_all_paths",
      "get_subfolders",
      "torch_remap_image",
      "apply_uv_map",
      "torch_scatter_add_image",
      "cv_remap_image"
    ],
    "replace": [
      "make_symlink",
      "with_file_extension",
      "with_file_extensions"
    ],
    "from_path": [
      "symlink_move",
      "_mv",
      "move_path",
      "copy_path",
      "copy_to_folder",
      "copy_directory",
      "copy_file"
    ],
    "to_path": [
      "symlink_move",
      "move_path",
      "copy_path",
      "copy_to_folder",
      "copy_directory",
      "copy_file"
    ],
    "root": [
      "display_file_tree",
      "get_relative_path",
      "get_relative_paths",
      "_is_python_exe_root",
      "_rinsp_search_helper",
      "rinsp_search",
      "input_select_path",
      "input_select_folder",
      "input_select_file",
      "_run_filebrowser",
      "breadth_first_path_iterator",
      "_display_filetype_size_histogram",
      "get",
      "keys",
      "files_walk"
    ],
    "all": [
      "display_file_tree"
    ],
    "only_directories": [
      "display_file_tree"
    ],
    "traverse_symlinks": [
      "display_file_tree"
    ],
    "foreground": [
      "_line_numbered_string"
    ],
    "to_dir": [
      "_mv"
    ],
    "cmd": [
      "_which",
      "evaluable_part"
    ],
    "json": [
      "_view_json_via_jtree"
    ],
    "entries": [
      "_display_columns"
    ],
    "history_filename": [
      "_input_select_multiple_history_multiline",
      "_input_select_multiple_history"
    ],
    "old_code": [
      "_input_select_multiple_history_multiline",
      "_input_select_multiple_paragraphs"
    ],
    "paragraphs": [
      "_input_select_multiple_paragraphs"
    ],
    "lss_name": [
      "_autocomplete_lss_name"
    ],
    "command_name": [
      "_autocomplete_lss_name"
    ],
    "query_path": [
      "_pterm_fuzzy_cd",
      "is_a_match"
    ],
    "do_cd": [
      "_pterm_fuzzy_cd"
    ],
    "username": [
      "get_number_of_github_gists",
      "_get_all_github_gists_info"
    ],
    "max_filesize": [
      "_download_rp_gists"
    ],
    "dir": [
      "_pterm_cd"
    ],
    "repeat": [
      "_pterm_cd"
    ],
    "file_or_string": [
      "_view_markdown_in_terminal"
    ],
    "shortcut": [
      "_add_pterm_prefix_shortcut"
    ],
    "replacement": [
      "_add_pterm_prefix_shortcut",
      "regex_replace",
      "find_and_replace_text_files"
    ],
    "shortcuts": [
      "_add_pterm_command_shortcuts"
    ],
    "get_user_input": [
      "pseudo_terminal"
    ],
    "modifier": [
      "pseudo_terminal"
    ],
    "rprc": [
      "pseudo_terminal"
    ],
    "level_title": [
      "pseudo_terminal"
    ],
    "on_return": [
      "pseudo_terminal"
    ],
    "file_size": [
      "human_readable_file_size"
    ],
    "size_str": [
      "string_to_file_size"
    ],
    "with_lines": [
      "pretty_print"
    ],
    "align_equals": [
      "repr_kwargs_dict"
    ],
    "sort": [
      "repr_vars"
    ],
    "fill": [
      "string_transpose",
      "cv_draw_contours",
      "bordered_string",
      "pad_string_to_dims"
    ],
    "flush": [
      "print_lines",
      "print"
    ],
    "M": [
      "reduced_row_echelon_form"
    ],
    "vector": [
      "all_rolls",
      "circular_gaussian_blur",
      "translation_affine",
      "neighbors"
    ],
    "axis": [
      "all_rolls",
      "circular_diff",
      "circular_quotient",
      "normalized"
    ],
    "a": [
      "circular_convolve",
      "circular_cross_correlate",
      "circular_auto_correlate",
      "cv_contour_match",
      "longest_common_prefix",
      "longest_common_suffix",
      "longest_common_substring",
      "compose_rgba_image",
      "cmp",
      "format",
      "equal"
    ],
    "b": [
      "circular_convolve",
      "circular_cross_correlate",
      "cv_contour_match",
      "complex_linear_coeffs_to_euclidean_affine",
      "longest_common_prefix",
      "longest_common_suffix",
      "longest_common_substring",
      "compose_rgb_image",
      "compose_rgba_image",
      "cmp",
      "equal"
    ],
    "r": [
      "ncr",
      "compose_rgb_image",
      "compose_rgba_image",
      "p"
    ],
    "signall": [
      "kill_process",
      "kill_processes"
    ],
    "pattern": [
      "search_processes",
      "_has_globbing_characters"
    ],
    "whole_arg": [
      "search_processes"
    ],
    "regex": [
      "regex_match",
      "regex_replace",
      "run_and_parse_first_match"
    ],
    "blinking": [
      "set_cursor_to_bar",
      "set_cursor_to_box",
      "set_cursor_to_underscore"
    ],
    "image_or_video": [
      "cv_bgr_rgb_swap"
    ],
    "img_is_rgb": [
      "cv_imshow"
    ],
    "wait": [
      "cv_imshow"
    ],
    "on_mouse_down": [
      "cv_imshow"
    ],
    "on_mouse_move": [
      "cv_imshow"
    ],
    "on_mouse_up": [
      "cv_imshow"
    ],
    "on_key_press": [
      "cv_imshow"
    ],
    "include_every_pixel": [
      "cv_find_contours"
    ],
    "contour": [
      "cv_simplify_contour",
      "cv_distance_to_contour",
      "cv_closest_contour_point",
      "cv_draw_contour",
      "cv_contour_length",
      "cv_contour_area",
      "fourier_descriptor",
      "cv_best_match_contour",
      "cv_best_match_contours",
      "cv_make_clockwise",
      "contour_to_image",
      "cv_contour_to_segment",
      "unwarped_perspective_contour",
      "distance"
    ],
    "epsilon": [
      "cv_simplify_contour"
    ],
    "contours": [
      "cv_closest_contour",
      "cv_draw_contours",
      "cv_manually_selected_contours",
      "cv_manually_selected_contour",
      "cv_best_match_contour",
      "cv_best_match_contours",
      "contours_to_image"
    ],
    "start_point": [
      "cv_draw_rectangle"
    ],
    "end_point": [
      "cv_draw_rectangle"
    ],
    "thickness": [
      "cv_draw_rectangle",
      "cv_draw_arrow",
      "cv_draw_arrows",
      "cv_line_graph",
      "cv_text_to_image",
      "_single_line_cv_text_to_image",
      "bordered_image_solid_color",
      "bordered_images_solid_color"
    ],
    "closed": [
      "cv_contour_length"
    ],
    "rim": [
      "cv_draw_circle",
      "cv_draw_circles",
      "cv_draw_arrow",
      "cv_draw_arrows"
    ],
    "rim_color": [
      "cv_draw_circle",
      "cv_draw_circles",
      "cv_draw_arrow",
      "cv_draw_arrows"
    ],
    "start_x": [
      "cv_draw_arrow",
      "cv_draw_arrows"
    ],
    "start_y": [
      "cv_draw_arrow",
      "cv_draw_arrows"
    ],
    "end_x": [
      "cv_draw_arrow",
      "cv_draw_arrows"
    ],
    "end_y": [
      "cv_draw_arrow",
      "cv_draw_arrows"
    ],
    "tip_length": [
      "cv_draw_arrow",
      "cv_draw_arrows"
    ],
    "visible": [
      "cv_draw_arrows"
    ],
    "vertical_bar_x": [
      "cv_line_graph"
    ],
    "vertical_bar_color": [
      "cv_line_graph"
    ],
    "vertical_bar_thickness": [
      "cv_line_graph"
    ],
    "histograms": [
      "rgb_histogram_image"
    ],
    "yscale": [
      "rgb_histogram_image"
    ],
    "smoothing": [
      "rgb_histogram_image"
    ],
    "affine": [
      "cv_apply_affine_to_image",
      "inverse_affine",
      "apply_affine",
      "is_euclidean_affine_matrix",
      "is_affine_matrix",
      "euclidean_affine_to_complex_linear_coeffs"
    ],
    "output_resolution": [
      "cv_apply_affine_to_image"
    ],
    "mask": [
      "cv_distance_transform",
      "cv_inpaint_image"
    ],
    "distance_to": [
      "cv_distance_transform"
    ],
    "metric": [
      "cv_distance_transform"
    ],
    "algorithm": [
      "cv_distance_transform",
      "cv_inpaint_image",
      "cv_optical_flow"
    ],
    "order": [
      "fourier_descriptor"
    ],
    "normalize": [
      "fourier_descriptor"
    ],
    "contour_1": [
      "fourier_descriptor_distance",
      "fourier_descriptor_similarity"
    ],
    "contour_2": [
      "fourier_descriptor_distance",
      "fourier_descriptor_similarity"
    ],
    "scale_invariant": [
      "cv_contour_match"
    ],
    "cv_method": [
      "_cv_morphological_helper"
    ],
    "circular": [
      "_cv_morphological_helper",
      "cv_erode",
      "cv_dilate"
    ],
    "iterations": [
      "_cv_morphological_helper",
      "cv_erode",
      "cv_dilate"
    ],
    "alpha_weighted": [
      "cv_gauss_blur",
      "cv_box_blur",
      "cv_resize_image",
      "cv_resize_images",
      "resize_videos",
      "resize_image_to_hold",
      "resize_image_to_fit",
      "resize_images_to_hold",
      "resize_images_to_fit",
      "resize_video_to_hold",
      "resize_video_to_fit",
      "resize_videos_to_fit",
      "resize_videos_to_hold",
      "resize_images_to_max_size",
      "resize_images_to_min_size"
    ],
    "out_of": [
      "rotation_matrix",
      "rotation_affine_2d"
    ],
    "dot_size": [
      "scatter_plot"
    ],
    "scalar": [
      "append_uniform_row",
      "append_uniform_column"
    ],
    "from_point": [
      "squared_euclidean_distance",
      "euclidean_distance"
    ],
    "to_point": [
      "squared_euclidean_distance",
      "euclidean_distance"
    ],
    "points": [
      "differential_euclidean_distances",
      "cumulative_euclidean_distances",
      "apply_affine",
      "whiten_points_covariance",
      "convex_hull",
      "complex_descriptors",
      "complex_descriptor",
      "point_cloud_angle"
    ],
    "include_zero": [
      "differential_euclidean_distances",
      "cumulative_euclidean_distances"
    ],
    "number_of_pieces": [
      "evenly_split_path"
    ],
    "points_array": [
      "_points_array_to_complex_vector",
      "_points_array_to_cv_contour"
    ],
    "complex_vector": [
      "_complex_vector_to_points_array",
      "_complex_vector_to_cv_contour"
    ],
    "cv_contour": [
      "_cv_contour_to_points_array",
      "_cv_contour_to_complex_vector"
    ],
    "crop": [
      "contours_to_image"
    ],
    "from_points": [
      "squared_distance_matrix",
      "distance_matrix",
      "closest_points",
      "least_squares_euclidean_affine",
      "least_squares_affine",
      "icp_least_squares_euclidean_affine",
      "unwarped_perspective_image",
      "unwarped_perspective_contour",
      "ryan_match"
    ],
    "to_points": [
      "squared_distance_matrix",
      "distance_matrix",
      "closest_points",
      "least_squares_euclidean_affine",
      "least_squares_affine",
      "icp_least_squares_euclidean_affine",
      "unwarped_perspective_image",
      "unwarped_perspective_contour",
      "ryan_match"
    ],
    "return_values": [
      "closest_points"
    ],
    "include_correlation": [
      "least_squares_euclidean_affine",
      "least_squares_regression_line_coeffs"
    ],
    "include_extra": [
      "least_squares_affine",
      "icp_least_squares_euclidean_affine"
    ],
    "pivot": [
      "rotation_affine_2d"
    ],
    "ndim": [
      "identity_affine"
    ],
    "max_iter": [
      "icp_least_squares_euclidean_affine"
    ],
    "tensor": [
      "_torch_tensor_to_bytes_for_hashing",
      "split_tensor_into_regions"
    ],
    "value_hasher": [
      "_dict_hash",
      "_list_hash",
      "_tuple_hash",
      "_slice_hash"
    ],
    "function": [
      "args_hash",
      "memoized",
      "apply_image_function_per_channel",
      "handler",
      "squelch"
    ],
    "auto_extension": [
      "_omni_save"
    ],
    "save": [
      "file_cache_call",
      "file_cache_wrap"
    ],
    "load": [
      "file_cache_call",
      "file_cache_wrap"
    ],
    "invalid": [
      "file_cache_call"
    ],
    "source": [
      "_get_hash",
      "get_md5_hash",
      "get_sha256_hash",
      "analyze_python"
    ],
    "hash_func_name": [
      "_get_hash"
    ],
    "func_display_name": [
      "_get_hash"
    ],
    "format": [
      "_get_hash",
      "get_md5_hash",
      "get_sha256_hash",
      "refactor_flynt"
    ],
    "font": [
      "_labeled_image_text_to_image",
      "labeled_image",
      "cv_text_to_image",
      "_single_line_cv_text_to_image",
      "_slow_pil_text_to_image",
      "_get_font_path",
      "get_font_supported_chars",
      "pil_text_to_image",
      "skia_text_to_image",
      "big_ascii_text"
    ],
    "flip_text": [
      "labeled_image"
    ],
    "size_by_lines": [
      "labeled_image"
    ],
    "labels": [
      "labeled_images",
      "labeled_videos"
    ],
    "lazy_frames": [
      "labeled_videos",
      "crop_videos",
      "crop_videos_to_min_size",
      "crop_videos_to_max_size",
      "resize_videos",
      "resize_videos_to_fit",
      "resize_videos_to_hold"
    ],
    "char": [
      "_cv_char_to_image",
      "count_leading"
    ],
    "tight_fit": [
      "cv_text_to_image",
      "_single_line_cv_text_to_image"
    ],
    "monospace": [
      "cv_text_to_image"
    ],
    "clamp": [
      "as_rgba_float_color",
      "as_rgb_float_color",
      "as_rgba_float_colors",
      "as_rgb_float_colors"
    ],
    "colors": [
      "as_rgba_float_colors",
      "as_rgb_float_colors",
      "ansi_highlight"
    ],
    "fallback_fonts": [
      "skia_text_to_image"
    ],
    "canvas": [
      "skia_stamp_image"
    ],
    "sprite": [
      "skia_stamp_image"
    ],
    "offset": [
      "skia_stamp_image"
    ],
    "sprite_origin": [
      "skia_stamp_image"
    ],
    "canvas_origin": [
      "skia_stamp_image"
    ],
    "font_name": [
      "download_google_font"
    ],
    "path_or_url": [
      "_get_file_path",
      "get_path_parent"
    ],
    "extension": [
      "with_file_extension",
      "with_file_extensions",
      "_get_default_video_path"
    ],
    "keep_extension": [
      "with_file_name",
      "rename_path"
    ],
    "include_file_extension": [
      "get_path_name",
      "get_notebook_name"
    ],
    "include_file_extensions": [
      "get_path_names",
      "get_all_paths"
    ],
    "sort_by": [
      "get_all_paths",
      "get_subfolders",
      "input_select_path",
      "input_select_folder",
      "input_select_file"
    ],
    "file_extension_filter": [
      "get_all_paths",
      "input_select_path",
      "input_select_folder",
      "input_select_file"
    ],
    "include_files": [
      "get_all_paths",
      "delete_all_paths_in_directory",
      "input_select_path",
      "_get_all_paths_fast"
    ],
    "include_folders": [
      "get_all_paths",
      "delete_all_paths_in_directory",
      "input_select_path",
      "_get_all_paths_fast"
    ],
    "just_file_names": [
      "get_all_paths"
    ],
    "ignore_permission_errors": [
      "get_all_paths",
      "get_all_runnable_python_files",
      "_get_all_paths_fast"
    ],
    "include_hidden": [
      "get_all_paths",
      "get_all_runnable_python_files",
      "get_random_folders",
      "get_random_folder",
      "_get_all_paths_fast"
    ],
    "include_symlinks": [
      "get_all_paths",
      "get_random_folders",
      "get_random_folder"
    ],
    "explore_symlinks": [
      "get_all_paths",
      "get_all_runnable_python_files",
      "_get_all_paths_fast"
    ],
    "folder_placement": [
      "get_all_paths"
    ],
    "hidden_placement": [
      "get_all_paths"
    ],
    "folder": [
      "get_all_runnable_python_files",
      "get_subfolders",
      "_os_listdir_files",
      "folder_is_empty",
      "get_random_file",
      "get_random_files",
      "_maybe_unbury_folder",
      "get_current_git_hash",
      "get_git_commit_message",
      "get_git_info",
      "get_folder_size"
    ],
    "quantity": [
      "get_random_files",
      "get_random_folders"
    ],
    "root_dir": [
      "get_random_folders",
      "get_random_folder",
      "_get_all_paths_fast"
    ],
    "check_exists": [
      "rp_iglob"
    ],
    "coefficients": [
      "fractional_integral_in_frequency_domain"
    ],
    "queries": [
      "best_flann_dict_matches",
      "run_cotracker",
      "run_tapnet"
    ],
    "flann_dict": [
      "best_flann_dict_matches"
    ],
    "query_to_vector": [
      "best_flann_dict_matches"
    ],
    "vectors": [
      "knn_clusters"
    ],
    "k": [
      "knn_clusters"
    ],
    "spatial_dict": [
      "knn_clusters"
    ],
    "image_grid": [
      "grid_concatenated_images"
    ],
    "border_color": [
      "tiled_images"
    ],
    "border_thickness": [
      "tiled_images",
      "tiled_videos"
    ],
    "transpose": [
      "tiled_images",
      "load_video_streams"
    ],
    "X": [
      "least_squares_regression_line_coeffs"
    ],
    "Y": [
      "least_squares_regression_line_coeffs"
    ],
    "copy_check": [
      "_images_conversion"
    ],
    "hashtag": [
      "random_hex_color",
      "random_hex_colors",
      "byte_color_to_hex_color",
      "float_color_to_hex_color"
    ],
    "hex_color": [
      "hex_color_to_byte_color",
      "hex_color_to_float_color"
    ],
    "byte_color": [
      "byte_color_to_hex_color",
      "byte_color_to_float_color"
    ],
    "float_color": [
      "float_color_to_byte_color",
      "float_color_to_hex_color"
    ],
    "color_name": [
      "color_name_to_float_color",
      "color_name_to_byte_color",
      "color_name_to_hex_color"
    ],
    "fullscreen": [
      "launch_terminal_in_colab"
    ],
    "flat": [
      "split_tensor_into_regions"
    ],
    "indices_tensor": [
      "apply_tensor_mapping"
    ],
    "mapping_tensor": [
      "apply_tensor_mapping"
    ],
    "bottom": [
      "bordered_image_solid_color",
      "bordered_images_solid_color",
      "bordered_string"
    ],
    "left": [
      "bordered_image_solid_color",
      "bordered_images_solid_color",
      "bordered_string"
    ],
    "right": [
      "bordered_image_solid_color",
      "bordered_images_solid_color",
      "bordered_string"
    ],
    "tensors": [
      "get_principle_components",
      "save_safetensors"
    ],
    "number_of_components": [
      "get_principle_components"
    ],
    "depth": [
      "_rinsp_search_helper",
      "rinsp_search",
      "git_clone"
    ],
    "question": [
      "input_conditional",
      "input_yes_no",
      "input_select",
      "input_select_multiple"
    ],
    "on_fail": [
      "input_conditional"
    ],
    "minimum": [
      "input_integer"
    ],
    "maximum": [
      "input_integer"
    ],
    "options": [
      "input_select",
      "input_select_multiple"
    ],
    "stringify": [
      "input_select",
      "input_select_multiple"
    ],
    "url_or_id": [
      "get_youtube_video_url",
      "get_youtube_video_transcript",
      "download_youtube_video",
      "get_youtube_video_title",
      "get_youtube_video_thumbnail"
    ],
    "need_video": [
      "download_youtube_video"
    ],
    "need_audio": [
      "download_youtube_video"
    ],
    "max_resolution": [
      "download_youtube_video"
    ],
    "min_resolution": [
      "download_youtube_video"
    ],
    "resolution_preference": [
      "download_youtube_video"
    ],
    "overwrite": [
      "download_youtube_video"
    ],
    "output": [
      "get_youtube_video_thumbnail",
      "crop_image_zeros"
    ],
    "start_frame": [
      "_load_video_stream",
      "load_video_stream",
      "load_video_streams",
      "load_video",
      "load_videos"
    ],
    "with_length": [
      "load_video_stream",
      "load_video_streams"
    ],
    "frame_transform": [
      "load_video_stream",
      "load_video_streams",
      "load_video",
      "load_videos"
    ],
    "video_bitrate": [
      "_as_video_bitrate",
      "save_video_mp4"
    ],
    "video_quality": [
      "_as_video_quality"
    ],
    "video_path": [
      "convert_to_gif_via_ffmpeg",
      "add_audio_to_video_file",
      "change_video_file_framerate",
      "get_cutscene_frame_numbers"
    ],
    "output_path": [
      "convert_to_gif_via_ffmpeg",
      "add_audio_to_video_file",
      "change_video_file_framerate"
    ],
    "custom_palette": [
      "convert_to_gif_via_ffmpeg",
      "convert_to_gifs_via_ffmpeg"
    ],
    "video_paths": [
      "convert_to_gifs_via_ffmpeg",
      "change_video_file_framerates"
    ],
    "output_paths": [
      "convert_to_gifs_via_ffmpeg"
    ],
    "encoded_video": [
      "decode_video_from_bytes"
    ],
    "audio_path": [
      "add_audio_to_video_file"
    ],
    "new_framerate": [
      "change_video_file_framerate",
      "change_video_file_framerates"
    ],
    "new_name": [
      "rename_path"
    ],
    "path_a": [
      "swap_paths",
      "paths_intersect",
      "path_intersections"
    ],
    "path_b": [
      "swap_paths",
      "paths_intersect",
      "path_intersections"
    ],
    "permanent": [
      "delete_file",
      "delete_folder",
      "delete_path",
      "_delete_paths_helper",
      "delete_paths",
      "delete_files",
      "delete_folders",
      "delete_all_paths_in_directory",
      "delete_all_files_in_directory"
    ],
    "delete_function": [
      "_delete_paths_helper"
    ],
    "extract": [
      "copy_path",
      "copy_directory",
      "copy_paths"
    ],
    "follow_symlinks": [
      "copy_directory",
      "copy_paths"
    ],
    "from_paths": [
      "copy_paths"
    ],
    "to_paths": [
      "copy_paths"
    ],
    "directory": [
      "delete_all_paths_in_directory",
      "delete_all_files_in_directory",
      "walk"
    ],
    "suffix": [
      "get_unique_copy_path",
      "apply_suffix_to_name",
      "apply_suffix_to_path"
    ],
    "as_indices": [
      "remove_duplicate_frames"
    ],
    "number": [
      "send_text_message",
      "number_to_words",
      "prime_factors"
    ],
    "dx": [
      "roll_image",
      "optical_flow_to_image",
      "optical_flow_to_arrow_grid"
    ],
    "dy": [
      "roll_image",
      "optical_flow_to_image",
      "optical_flow_to_arrow_grid"
    ],
    "fillchar": [
      "visible_string_ljust",
      "visible_string_rjust",
      "visible_string_center",
      "make_string_rectangular",
      "horizontally_concatenated_strings"
    ],
    "rectangularize": [
      "horizontally_concatenated_strings"
    ],
    "weight": [
      "bordered_string"
    ],
    "width_fill": [
      "bordered_string"
    ],
    "height_fill": [
      "bordered_string"
    ],
    "left_fill": [
      "bordered_string"
    ],
    "right_fill": [
      "bordered_string"
    ],
    "bottom_fill": [
      "bordered_string"
    ],
    "top_fill": [
      "bordered_string"
    ],
    "bottom_right_fill": [
      "bordered_string"
    ],
    "bottom_left_fill": [
      "bordered_string"
    ],
    "top_right_fill": [
      "bordered_string"
    ],
    "top_left_fill": [
      "bordered_string"
    ],
    "chars": [
      "simple_boxed_string",
      "unicode_loading_bar"
    ],
    "string_from": [
      "edit_distance"
    ],
    "string_to": [
      "edit_distance"
    ],
    "noun": [
      "is_plural_noun",
      "is_singular_noun",
      "plural_noun",
      "singular_noun"
    ],
    "singular_word": [
      "is_singular_noun_of",
      "is_plural_noun_of"
    ],
    "plural_word": [
      "is_singular_noun_of",
      "is_plural_noun_of"
    ],
    "force": [
      "plural_noun",
      "_ensure_installed",
      "_install_ollama",
      "_install_lazygit"
    ],
    "word": [
      "_get_parts_of_speech_via_nltk",
      "is_a_verb",
      "is_an_adjective",
      "is_a_noun",
      "is_an_english_word",
      "get_english_synonyms_via_nltk",
      "_datamuse_words_request",
      "get_english_synonyms_via_datamuse",
      "get_english_related_words_via_datamuse",
      "get_english_antonyms_via_datamuse",
      "get_english_rhymes_via_datamuse",
      "get_english_synonyms"
    ],
    "duration": [
      "record_mouse_positions"
    ],
    "positions": [
      "playback_mouse_positions"
    ],
    "min_val": [
      "get_box_char_bar_graph",
      "_clip",
      "_clamp"
    ],
    "max_val": [
      "get_box_char_bar_graph",
      "_clip",
      "_clamp"
    ],
    "num_lines": [
      "get_box_char_bar_graph"
    ],
    "datetime_obj": [
      "date_to_epoch_seconds",
      "date_to_epoch_millis"
    ],
    "epoch_seconds": [
      "epoch_seconds_to_date"
    ],
    "epoch_millis": [
      "epoch_millis_to_date"
    ],
    "mean": [
      "norm_cdf",
      "norm_pdf",
      "inverse_norm_cdf"
    ],
    "std": [
      "norm_cdf",
      "norm_pdf",
      "inverse_norm_cdf"
    ],
    "p": [
      "inverse_norm_cdf",
      "mli"
    ],
    "s3url": [
      "s3_list_objects"
    ],
    "include_metadata": [
      "s3_list_objects"
    ],
    "timeout": [
      "download_url",
      "download_urls",
      "download_url_to_cache",
      "download_urls_to_cache"
    ],
    "url_to_path": [
      "download_urls"
    ],
    "cache_dir": [
      "download_url_to_cache",
      "download_urls_to_cache",
      "get_cache_file_path",
      "get_cache_file_paths"
    ],
    "hash_func": [
      "download_url_to_cache",
      "download_urls_to_cache",
      "get_cache_file_path",
      "get_cache_file_paths"
    ],
    "file_extension": [
      "get_cache_file_path",
      "get_cache_file_paths",
      "temporary_file_path"
    ],
    "urls": [
      "get_cache_file_paths",
      "fetch_data"
    ],
    "level": [
      "debug"
    ],
    "percent": [
      "set_os_volume",
      "refactor_flynt"
    ],
    "target": [
      "fuzzy_string_match",
      "launch_visidata",
      "monkey_patch",
      "fuzzy_match"
    ],
    "case_sensitive": [
      "fuzzy_string_match",
      "is_a_match"
    ],
    "point": [
      "_point_on_edge",
      "path_intersects_point"
    ],
    "edge": [
      "_point_on_edge"
    ],
    "edge_a": [
      "_edges_intersect",
      "_edge_intersection_positions"
    ],
    "edge_b": [
      "_edges_intersect",
      "_edge_intersection_positions"
    ],
    "handle_keyboard_interrupt": [
      "input_keypress"
    ],
    "strip_whitespace": [
      "delete_empty_lines"
    ],
    "package": [
      "_vim_pip_install",
      "fix_package"
    ],
    "confirm": [
      "_set_ryan_vimrc"
    ],
    "windows": [
      "_ensure_installed",
      "tmuxp_create_session_yaml"
    ],
    "mac": [
      "_ensure_installed"
    ],
    "linux": [
      "_ensure_installed"
    ],
    "port": [
      "_run_filebrowser",
      "get_port_is_taken",
      "get_next_free_port",
      "get_process_using_port",
      "killport"
    ],
    "compressed_data": [
      "decompress_bytes"
    ],
    "filter_condition": [
      "_tmux_close_windows"
    ],
    "session": [
      "_get_all_tmux_clients",
      "tmux_type_in_all_panes",
      "_tmux_reset_all_panes"
    ],
    "session_name": [
      "tmux_session_exists",
      "tmux_kill_session",
      "tmuxp_create_session_yaml"
    ],
    "keystrokes": [
      "tmux_type_in_all_panes"
    ],
    "window": [
      "tmux_type_in_all_panes",
      "_tmux_reset_all_panes",
      "addstr_wordwrap"
    ],
    "command_before": [
      "tmuxp_create_session_yaml"
    ],
    "session_yaml": [
      "tmuxp_launch_session_from_yaml"
    ],
    "attach": [
      "tmuxp_launch_session_from_yaml"
    ],
    "notebook_path": [
      "_extract_code_cells_from_ipynb",
      "exec_ipynb",
      "extract_code_from_ipynb"
    ],
    "show_code": [
      "exec_ipynb"
    ],
    "email": [
      "_get_facebook_client"
    ],
    "password": [
      "_get_facebook_client"
    ],
    "my_email": [
      "send_facebook_message",
      "get_all_facebook_messages"
    ],
    "my_password": [
      "send_facebook_message",
      "get_all_facebook_messages"
    ],
    "my_name": [
      "get_all_facebook_messages"
    ],
    "max_number_of_messages": [
      "get_all_facebook_messages"
    ],
    "model": [
      "visualize_pytorch_model",
      "_run_openai_llm",
      "run_llm_api",
      "run_tapnet"
    ],
    "input_shape": [
      "visualize_pytorch_model"
    ],
    "example_input": [
      "visualize_pytorch_model"
    ],
    "supress_warnings": [
      "visualize_pytorch_model"
    ],
    "invert_alpha": [
      "inverted_image",
      "inverted_images"
    ],
    "src_folder": [
      "make_zip_file_from_folder"
    ],
    "dst_zip_file": [
      "make_zip_file_from_folder"
    ],
    "zip_file_path": [
      "extract_zip_file"
    ],
    "folder_path": [
      "extract_zip_file",
      "_extract_archive_via_pyunpack",
      "zip_folder_to_bytes"
    ],
    "treat_as": [
      "extract_zip_file"
    ],
    "archive_path": [
      "_extract_archive_via_pyunpack"
    ],
    "bump_map": [
      "get_normal_map"
    ],
    "verbose": [
      "currently_running_desktop",
      "validate_tensor_shapes",
      "import_all_submodules",
      "load_safetensors",
      "save_safetensors"
    ],
    "with_line_numbers": [
      "_maybe_display_string_in_pager"
    ],
    "select": [
      "_fd"
    ],
    "image_file_path": [
      "get_image_file_dimensions"
    ],
    "hsv_image": [
      "_hsv_to_rgb_via_numpy",
      "_hsv_to_rgb_via_numba",
      "hsv_to_rgb"
    ],
    "rgb_image": [
      "_rgb_to_hsv_via_numpy",
      "_rgb_to_hsv_via_numba",
      "rgb_to_hsv"
    ],
    "color_img_or_value": [
      "_with_image_channel"
    ],
    "channel_idx": [
      "_with_image_channel"
    ],
    "red": [
      "with_image_red"
    ],
    "green": [
      "with_image_green"
    ],
    "blue": [
      "with_image_blue"
    ],
    "hue": [
      "with_image_hue"
    ],
    "saturation": [
      "with_image_saturation"
    ],
    "brightness": [
      "with_image_brightness"
    ],
    "colormap_name": [
      "apply_colormap_to_image"
    ],
    "amount": [
      "zalgo_text"
    ],
    "bytestring": [
      "bytes_to_base64",
      "bytes_to_base16"
    ],
    "base16_string": [
      "base16_to_bytes"
    ],
    "kernel": [
      "cv_image_filter",
      "conv_circ"
    ],
    "words": [
      "wordcloud_image"
    ],
    "colormap": [
      "wordcloud_image"
    ],
    "dataframe": [
      "display_pandas_correlation_heatmap"
    ],
    "show_numbers": [
      "display_pandas_correlation_heatmap"
    ],
    "entry": [
      "_write_to_pterm_hist",
      "breakify"
    ],
    "in_height": [
      "_size_to_height_width"
    ],
    "in_width": [
      "_size_to_height_width"
    ],
    "add_alpha_mask": [
      "torch_remap_image"
    ],
    "use_cached_meshgrid": [
      "torch_remap_image"
    ],
    "uv_map": [
      "apply_uv_map"
    ],
    "uv_form": [
      "apply_uv_map",
      "get_identity_uv_map"
    ],
    "return_dims": [
      "validate_tensor_shapes"
    ],
    "func_name": [
      "_create_array_like"
    ],
    "keepdim": [
      "_max",
      "_min",
      "_sum",
      "_mean"
    ],
    "prepend_ones": [
      "torch_scatter_add_image"
    ],
    "reduce": [
      "accumulate_flows"
    ],
    "allow_shrink": [
      "resize_image_to_hold",
      "resize_images_to_hold",
      "resize_video_to_hold",
      "resize_videos_to_hold"
    ],
    "invert_mask": [
      "cv_inpaint_image"
    ],
    "tolerance": [
      "cv_floodfill_mask"
    ],
    "bridge_diagonals": [
      "cv_floodfill_mask"
    ],
    "include_symlink_files": [
      "_get_all_paths_fast"
    ],
    "include_symlink_folders": [
      "_get_all_paths_fast"
    ],
    "traversal": [
      "_get_all_paths_fast"
    ],
    "api_key": [
      "_run_openai_llm",
      "run_llm_api"
    ],
    "by_value": [
      "cv_equalize_histogram"
    ],
    "g": [
      "compose_rgb_image",
      "compose_rgba_image"
    ],
    "rgb": [
      "with_image_rgb"
    ],
    "before": [
      "_string_diff_helper",
      "dunk_string_diff",
      "view_string_diff",
      "vim_string_diff"
    ],
    "after": [
      "_string_diff_helper",
      "dunk_string_diff",
      "view_string_diff",
      "vim_string_diff"
    ],
    "ask_to_replace": [
      "web_paste_path",
      "_paste_path_from_bundle"
    ],
    "address": [
      "ip_to_mac_address",
      "ip_to_host_name",
      "get_mac_address_vendor"
    ],
    "actions": [
      "PynputCasette"
    ],
    "interactive": [
      "find_and_replace_text_files"
    ],
    "files": [
      "_fart"
    ],
    "extensions": [
      "_fzf_multi_grep"
    ],
    "print_instructions": [
      "_fzf_multi_grep"
    ],
    "text_files": [
      "_fzf_multi_grep"
    ],
    "single_line": [
      "_fzf_multi_grep"
    ],
    "autoyes": [
      "_pip_import_depth_pro"
    ],
    "focal_length": [
      "run_depth_pro"
    ],
    "segm_mask": [
      "run_cotracker"
    ],
    "grid_size": [
      "run_cotracker",
      "run_tapnet"
    ],
    "grid_query_frame": [
      "run_cotracker",
      "run_tapnet"
    ],
    "backward_tracking": [
      "run_cotracker"
    ],
    "model_dir": [
      "run_tapnet",
      "_ensure_tapnet_installed"
    ],
    "image_from": [
      "get_optical_flow_via_pyflow"
    ],
    "image_to": [
      "get_optical_flow_via_pyflow"
    ],
    "frame_a": [
      "cv_optical_flow",
      "sim_score"
    ],
    "frame_b": [
      "cv_optical_flow",
      "sim_score"
    ],
    "flow_func": [
      "calculate_flows"
    ],
    "sensitivity": [
      "optical_flow_to_image"
    ],
    "step": [
      "optical_flow_to_arrow_grid"
    ],
    "family": [
      "detect_apriltags",
      "get_apriltag_image",
      "get_apriltag_images"
    ],
    "auto_yes": [
      "_nbca",
      "clear_jupyter_notebook_outputs",
      "pip_import"
    ],
    "bins": [
      "histogram_via_bokeh"
    ],
    "repo": [
      "get_git_remote_url",
      "git_import"
    ],
    "branch": [
      "git_clone",
      "git_pull"
    ],
    "single_branch": [
      "git_clone"
    ],
    "python_code_snippet": [
      "autoformat_python_via_black_macchiato"
    ],
    "max_line_length": [
      "autoformat_python_via_black_macchiato",
      "run_removestar"
    ],
    "keys_only": [
      "load_safetensors"
    ],
    "metadata": [
      "load_safetensors",
      "save_safetensors"
    ],
    "prefer_used": [
      "select_torch_device"
    ],
    "reserve": [
      "select_torch_device"
    ],
    "gpu_id": [
      "_waste_gpu",
      "_get_gpu_memory_info",
      "_get_gpu_handle",
      "get_gpu_uuid",
      "get_gpu_pids",
      "get_free_vram",
      "get_total_vram",
      "get_used_vram",
      "get_gpu_name",
      "get_vram_used_by_current_process",
      "get_gpu_temperature",
      "get_gpu_utilization"
    ],
    "quiet": [
      "run_removestar",
      "pip_install_multiple"
    ],
    "qualify": [
      "run_removestar"
    ],
    "aggressive": [
      "refactor_flynt"
    ],
    "multiline": [
      "refactor_flynt"
    ],
    "len_limit": [
      "refactor_flynt"
    ],
    "concat": [
      "refactor_flynt"
    ],
    "join": [
      "refactor_flynt"
    ],
    "with_len": [
      "file_line_iterator"
    ],
    "filetypes": [
      "get_system_fonts"
    ],
    "max_length": [
      "resize_list_to_fit",
      "resize_lists_to_fit",
      "animate_rain"
    ],
    "arrays": [
      "resize_lists_to_fit"
    ],
    "list_of_lists": [
      "list_transpose"
    ],
    "dic": [
      "dict_transpose"
    ],
    "existing_only": [
      "get_gpu_pids"
    ],
    "choices": [
      "get_gpu_with_most_free_vram"
    ],
    "include_processes": [
      "print_gpu_summary"
    ],
    "include_temperature": [
      "print_gpu_summary"
    ],
    "include_percent_vram": [
      "print_gpu_summary"
    ],
    "include_utilization": [
      "print_gpu_summary"
    ],
    "time_per_stroke": [
      "type_string_with_keyboard"
    ],
    "key_points": [
      "delaunay_interpolation_weights"
    ],
    "query_points": [
      "delaunay_interpolation_weights"
    ],
    "pip_args": [
      "pip_install"
    ],
    "packages": [
      "pip_install_multiple"
    ],
    "shotgun": [
      "pip_install_multiple"
    ],
    "package_name": [
      "pip_import"
    ],
    "pull": [
      "git_import"
    ],
    "file": [
      "check_pip_requirements",
      "formula_as_file",
      "old_and_new_text",
      "file_will_change",
      "push",
      "load_text",
      "load_annotated_lines",
      "is_hidden_file"
    ],
    "equals": [
      "fuzzy_match"
    ],
    "collection": [
      "get_only"
    ],
    "clear_redo_on_do": [
      "__init__"
    ],
    "content_grid": [
      "_convert_content_grid",
      "grid_update"
    ],
    "converted_content": [
      "_update"
    ],
    "bytes_count": [
      "update"
    ],
    "content_row": [
      "row_update"
    ],
    "event_data": [
      "handler"
    ],
    "frame": [
      "is_comprehension",
      "timeout_handler",
      "write_frame",
      "load_frame",
      "preprocess_frame",
      "handle_timeout",
      "trace_func",
      "trace_lines"
    ],
    "variables": [
      "maybe_add_varkw",
      "maybe_replace_varargs"
    ],
    "item": [
      "format_string",
      "__setitem__",
      "discard",
      "convert_grid_item",
      "format_signature"
    ],
    "tz": [
      "human_to_iana",
      "iana_to_tzinfo",
      "iana_to_human",
      "tzinfo_to_iana",
      "human_to_tzinfo",
      "tzinfo_to_human",
      "is_iana",
      "is_tzinfo"
    ],
    "prefix_length": [
      "linerino"
    ],
    "exclude": [
      "parent_class_names"
    ],
    "class_object": [
      "get_full_class_name"
    ],
    "hierarchy": [
      "format_parent_hierarchy"
    ],
    "spaces": [
      "format_parent_hierarchy"
    ],
    "cap": [
      "list_cap_props"
    ],
    "junction": [
      "handle_key_colons"
    ],
    "junctions": [
      "split_colon_keys",
      "expand_comma_keys",
      "apply_deltas_from_junctions",
      "junctions_to_dict"
    ],
    "recipient": [
      "apply_deltas_from_junctions"
    ],
    "e": [
      "new_key"
    ],
    "stdscr": [
      "main",
      "config",
      "rain_forever",
      "rain_once",
      "animate_rain",
      "add_rain",
      "print_fansi_colors_in_curses"
    ],
    "pygments_lexer": [
      "get_all_pygments_tokens"
    ],
    "formula": [
      "formula_as_file"
    ],
    "negate": [
      "formula_as_file"
    ],
    "timg": [
      "_helper"
    ],
    "cli": [
      "in_tokens"
    ],
    "proportion": [
      "fansi_progress"
    ],
    "proportion_completed": [
      "display_eta"
    ],
    "time_elapsed_in_seconds": [
      "display_eta"
    ],
    "TOTAL_TO_COMPLETE": [
      "display_eta"
    ],
    "COMPLETED_SO_FAR": [
      "display_eta"
    ],
    "_ignored_1": [
      "ipython_exeval"
    ],
    "_ignored_2": [
      "ipython_exeval"
    ],
    "directive_line": [
      "parse"
    ],
    "other": [
      "__eq__",
      "__lt__",
      "__gt__",
      "__le__",
      "__ge__",
      "__ne__"
    ],
    "match": [
      "replace"
    ],
    "child": [
      "highlight_child"
    ],
    "absolute": [
      "highlight_child",
      "register"
    ],
    "bundle": [
      "run"
    ],
    "run_lambda": [
      "run_and_read_all",
      "run_and_parse_first_match",
      "get_nvidia_driver_version",
      "get_gpu_info",
      "get_running_cuda_version",
      "get_cudnn_version",
      "get_mac_version",
      "get_windows_version",
      "get_lsb_version",
      "check_release_file",
      "get_os",
      "squelch"
    ],
    "paragraph": [
      "process_paragraph"
    ],
    "real_path": [
      "is_a_match"
    ],
    "names": [
      "joined_names"
    ],
    "page_index": [
      "load_page"
    ],
    "signum": [
      "timeout_handler",
      "handle_timeout"
    ],
    "units_dict": [
      "postprocess"
    ],
    "unit": [
      "normalize_unit"
    ],
    "event": [
      "mouse_callback",
      "trace_func",
      "trace_lines"
    ],
    "flags": [
      "mouse_callback"
    ],
    "param": [
      "mouse_callback"
    ],
    "approach": [
      "complex_descriptors",
      "complex_descriptor"
    ],
    "signal": [
      "conv_circ"
    ],
    "instance": [
      "__get__"
    ],
    "owner": [
      "__get__"
    ],
    "bases": [
      "__new__"
    ],
    "class_dict": [
      "__new__"
    ],
    "directory_path": [
      "recursion_helper"
    ],
    "v": [
      "minmax"
    ],
    "inMat": [
      "dithering_gray"
    ],
    "samplingF": [
      "dithering_gray"
    ],
    "color_a": [
      "blend_colors"
    ],
    "color_b": [
      "blend_colors"
    ],
    "user_input": [
      "condition"
    ],
    "option": [
      "_stringify",
      "option_to_string"
    ],
    "pair": [
      "do_copy",
      "join_command"
    ],
    "num_copies": [
      "apply_suffix_to_name",
      "apply_suffix_to_path"
    ],
    "iterator": [
      "printed_generator"
    ],
    "mipmap": [
      "_get_skia_sampling"
    ],
    "should_raise": [
      "run_test"
    ],
    "pool": [
      "rain_forever",
      "add_rain"
    ],
    "begin": [
      "rain_once",
      "animate_rain"
    ],
    "last_char": [
      "rain_once",
      "animate_rain"
    ],
    "speed": [
      "animate_rain"
    ],
    "rains": [
      "add_rain"
    ],
    "job_q": [
      "pinger"
    ],
    "results_q": [
      "pinger"
    ],
    "pool_size": [
      "map_network"
    ],
    "pids": [
      "filter_pids_exist"
    ],
    "used_vram": [
      "none_to_zero"
    ],
    "start": [
      "combine_range"
    ],
    "classified_text": [
      "ansi_highlight"
    ],
    "action": [
      "progress_func"
    ],
    "savefile": [
      "save"
    ],
    "fp": [
      "write_to_fp"
    ],
    "max_size": [
      "_tokenize",
      "_minimize"
    ],
    "thestring": [
      "_minimize"
    ],
    "delim": [
      "_minimize"
    ],
    "arg": [
      "trace_func",
      "trace_lines"
    ],
    "stat": [
      "append_stat"
    ],
    "loader": [
      "map_constructor"
    ],
    "node": [
      "map_constructor"
    ],
    "interface": [
      "getmac"
    ],
    "fd": [
      "ioctl_GWINSZ"
    ],
    "change": [
      "level_label"
    ],
    "input_str": [
      "split_numbers_and_letters"
    ],
    "cell_num": [
      "_announce_cell"
    ],
    "i": [
      "get_color"
    ],
    "original_node": [
      "leave_ImportFrom",
      "leave_Call",
      "leave_Name"
    ],
    "updated_node": [
      "leave_ImportFrom",
      "leave_Call",
      "leave_Name"
    ],
    "tokens": [
      "wrapped_line_tokens"
    ],
    "color1": [
      "blend_rgb"
    ],
    "color2": [
      "blend_rgb"
    ],
    "snapshot": [
      "set_snapshot",
      "set_ans"
    ],
    "val": [
      "set_ans"
    ],
    "save_history": [
      "set_ans"
    ],
    "force_green": [
      "set_ans"
    ],
    "return_as_string_instead_of_printing": [
      "print_history"
    ],
    "E": [
      "show_error"
    ],
    "ram": [
      "ram_to_string"
    ],
    "true": [
      "try_eval"
    ],
    "strings_input": [
      "columnify_strings"
    ],
    "highlight": [
      "print_code"
    ],
    "line_numbers": [
      "print_code"
    ]
  },
  "behaviors": [
    {
      "arg_name": "x",
      "function": "entuple",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "isinstance(x, tuple)",
      "transformation_code": "entuple(x) | isinstance(x, tuple)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "detuple",
      "default_value": null,
      "usage_pattern": "indexing,length_check",
      "validation_code": "x = detuple",
      "transformation_code": "x = detuple(x) | detuple(x) | print_sum(*x)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "enlist",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "isinstance(x, list)",
      "transformation_code": "enlist(x) | isinstance(x, list)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "delist",
      "default_value": null,
      "usage_pattern": "indexing,length_check",
      "validation_code": "",
      "transformation_code": "delist(x) | len(x)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "f",
      "function": "itc",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "y = f",
      "transformation_code": "itc(f, x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "itc",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "y == x | x = y",
      "transformation_code": "x = y | itc(f, x) | f(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "f",
      "function": "run_func",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "run_func(f, *g, **kwg)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "f",
      "function": "fog",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "fog(f, *g, **kwg)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "func\u2d53scoop\u02cfnew",
      "function": "scoop",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "scoop_value = func\u2d53scoop\u02cfnew",
      "transformation_code": "scoop(func\u2d53scoop\u02cfnew, list_in, init_value=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "list_in",
      "function": "scoop",
      "default_value": null,
      "usage_pattern": "iteration",
      "validation_code": "",
      "transformation_code": "scoop(func\u2d53scoop\u02cfnew, list_in, init_value=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "init_value",
      "function": "scoop",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "init_value=None | scoop_value = init_value",
      "transformation_code": "init_value=None): | scoop(func\u2d53scoop\u02cfnew, list_in, init_value=None) | deepcopy(init_value)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "func",
      "function": "seq_map",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "seq_map(func, *iterables) | list(map(func, *iterables)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "func",
      "function": "par_map",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "par_map(func, *iterables, num_threads=None, buffer_limit=0) | list(lazy_par_map(func, *iterables, num_threads=num_threads, buffer_limit=buffer_limit)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "num_threads",
      "function": "par_map",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "num_threads=None | num_threads=num_threads",
      "transformation_code": "num_threads=None, buffer_limit=0): | num_threads=num_threads, buffer_limit=buffer_limit)) | par_map(func, *iterables, num_threads=None, buffer_limit=0) | list(lazy_par_map(func, *iterables, num_threads=num_threads, buffer_limit=buffer_limit)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "buffer_limit",
      "function": "par_map",
      "default_value": 0,
      "usage_pattern": "simple_usage",
      "validation_code": "buffer_limit=0 | buffer_limit=buffer_limit",
      "transformation_code": "buffer_limit=0): | buffer_limit=buffer_limit)) | par_map(func, *iterables, num_threads=None, buffer_limit=0) | list(lazy_par_map(func, *iterables, num_threads=num_threads, buffer_limit=buffer_limit)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "func",
      "function": "lazy_par_map",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "value = func",
      "transformation_code": "lazy_par_map(func, *iterables, num_threads=None, buffer_limit=None) | list(lazy_par_map(func,range(10)",
      "error_handling": "",
      "documentation": "func: The function to apply to the items."
    },
    {
      "arg_name": "num_threads",
      "function": "lazy_par_map",
      "default_value": null,
      "usage_pattern": "equality_check,boolean_condition,none_check,type_check",
      "validation_code": "isinstance(num_threads, int) | num_threads=None | num_threads=3",
      "transformation_code": "num_threads=None, buffer_limit=None): | num_threads=3)) | lazy_par_map(func, *iterables, num_threads=None, buffer_limit=None) | and (not isinstance(num_threads, int)",
      "error_handling": "",
      "documentation": "num_threads (optional)"
    },
    {
      "arg_name": "buffer_limit",
      "function": "lazy_par_map",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check,type_check",
      "validation_code": "assert ans==sorted(ans),'lazy_par_map failed to preserve order with a non-zero buffer_limit' | isinstance(buffer_limit, int) | buffer_limit=None",
      "transformation_code": "buffer_limit=None): | buffer_limit=3,num_threads=3)) | lazy_par_map(func, *iterables, num_threads=None, buffer_limit=None) | and (not isinstance(buffer_limit, int)",
      "error_handling": "",
      "documentation": "buffer_limit (optional)"
    },
    {
      "arg_name": "funcs",
      "function": "seq",
      "default_value": null,
      "usage_pattern": "iteration",
      "validation_code": "funcs = list",
      "transformation_code": "funcs = list(funcs) | seq(funcs, *init) | list(funcs)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "funcs\u11a2voids",
      "function": "par",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "par(funcs\u11a2voids, *params)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "funcs",
      "function": "pam",
      "default_value": null,
      "usage_pattern": "iteration",
      "validation_code": "assert is_iterable(funcs), str(funcs) + \" \u2263 funcs\uff0cis NOT iterable. Don't bother using pam! Pam is meant for mapping multiple functions onto one set of arguments",
      "transformation_code": "pam(funcs, *args, **kwargs) | is_iterable(funcs)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "list_roll",
      "default_value": null,
      "usage_pattern": "indexing,length_check",
      "validation_code": "",
      "transformation_code": "list_roll(x, shift=0) | list(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "shift",
      "function": "list_roll",
      "default_value": 0,
      "usage_pattern": "simple_usage",
      "validation_code": "shift=0",
      "transformation_code": "shift=0): | list_roll(x, shift=0) | list(x[-shift:])",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "list_2d",
      "function": "list_flatten",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "list_flatten(list_2d) | list(chain.from_iterable(list_2d)",
      "error_handling": "",
      "documentation": "list_2d:scoop(lambda old,new"
    },
    {
      "arg_name": "l",
      "function": "unique",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "unique(l: list) | reversed(l)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "title",
      "function": "ptoc",
      "default_value": "",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "title='', *, new_line=True) -> None: | ptoc(title='', *, new_line=True) | print(str(title)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "new_line",
      "function": "ptoc",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "new_line=True",
      "transformation_code": "new_line=True) -> None: | ptoc(title='', *, new_line=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "label",
      "function": "ptoctic",
      "default_value": "",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "label='') -> None: | ptoctic(label='') | ptoc(label)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "seconds",
      "function": "seconds",
      "default_value": "<gtoc>",
      "usage_pattern": "simple_usage",
      "validation_code": "seconds=gtoc",
      "transformation_code": "seconds=gtoc) -> int: | seconds(seconds=gtoc) | _milli_micro_nano_converter(seconds, 10 ** 0)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "seconds",
      "function": "millis",
      "default_value": "<gtoc>",
      "usage_pattern": "simple_usage",
      "validation_code": "seconds=gtoc",
      "transformation_code": "seconds=gtoc) -> int: | millis(seconds=gtoc) | _milli_micro_nano_converter(seconds, 10 ** 3)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "seconds",
      "function": "micros",
      "default_value": "<gtoc>",
      "usage_pattern": "simple_usage",
      "validation_code": "seconds=gtoc",
      "transformation_code": "seconds=gtoc) -> int: | micros(seconds=gtoc) | _milli_micro_nano_converter(seconds, 10 ** 6)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "seconds",
      "function": "nanos",
      "default_value": "<gtoc>",
      "usage_pattern": "simple_usage",
      "validation_code": "seconds=gtoc",
      "transformation_code": "seconds=gtoc) -> int: | nanos(seconds=gtoc) | _milli_micro_nano_converter(seconds, 10 ** 9)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "pid",
      "function": "get_process_cwd",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "get_process_cwd(pid) | Process(pid)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "pid",
      "function": "get_current_directory",
      "default_value": null,
      "usage_pattern": "boolean_condition,type_check",
      "validation_code": "assert isinstance(pid, int), pid | isinstance(pid, int) | pid=None",
      "transformation_code": "pid=None): | get_current_directory(pid=None) | isinstance(pid, int)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "set_current_directory",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "set_current_directory(path) | chdir(path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "condition",
      "function": "ConditionalContext",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "condition = random.choice | condition_val = condition | condition_val = condition",
      "transformation_code": "condition = random.choice([True, False]) | ConditionalContext(condition, context_manager, *args, **kwargs) | conditional_context(some_condition, some_context, arg1, arg2, key=value)",
      "error_handling": "",
      "documentation": "condition (bool or callable)"
    },
    {
      "arg_name": "context_manager",
      "function": "ConditionalContext",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "ConditionalContext(condition, context_manager, *args, **kwargs)",
      "error_handling": "",
      "documentation": "context_manager (callable)"
    },
    {
      "arg_name": "spec",
      "function": "_transform_fansi_arg",
      "default_value": null,
      "usage_pattern": "method_call,iteration",
      "validation_code": "spec = spec.lower",
      "transformation_code": "spec = spec.lower() | _transform_fansi_arg(spec, style_keywords=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "style_keywords",
      "function": "_transform_fansi_arg",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "style_keywords=None | style_keywords = style_keywords",
      "transformation_code": "style_keywords=None): | style_keywords = style_keywords or _fansi_styles | _transform_fansi_arg(spec, style_keywords=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "text_string",
      "function": "fansi",
      "default_value": "",
      "usage_pattern": "method_call",
      "validation_code": "text_string = str | lines = text_string",
      "transformation_code": "text_string='', text_color=None, style=None, background_color=None, underline_color=None, *, per_line=True, reset=True, truecolor=None, link=None): | text_string = str(text_string) | fansi(text_string='', text_color=None, style=None, background_color=None, underline_color=None, *, per_line=True, reset=True, truecolor=None, link=None) | str(text_string)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "text_color",
      "function": "fansi",
      "default_value": null,
      "usage_pattern": "boolean_condition,method_call,addition,type_check",
      "validation_code": "isinstance(text_color, str) | isinstance(text_color, str) | isinstance(text_color, int)",
      "transformation_code": "text_color=None, style=None, background_color=None, underline_color=None, *, per_line=True, reset=True, truecolor=None, link=None): | text_color=tuple(pixel/255),truecolor=truecolor) | fansi(text_string='', text_color=None, style=None, background_color=None, underline_color=None, *, per_line=True, reset=True, truecolor=None, link=None) | fansi('\u2588\u2588',text_color=tuple(pixel/255)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "style",
      "function": "fansi",
      "default_value": null,
      "usage_pattern": "method_call,iteration,addition,type_check",
      "validation_code": "isinstance(style, str) | style=None | style=style_a",
      "transformation_code": "style=None, background_color=None, underline_color=None, *, per_line=True, reset=True, truecolor=None, link=None): | style=style_a + \" \" + style_b)) | fansi(text_string='', text_color=None, style=None, background_color=None, underline_color=None, *, per_line=True, reset=True, truecolor=None, link=None) | print(fansi(\"\tCombined Style: \" + style_a + \" \" + style_b, style=style_a + \" \" + style_b)",
      "error_handling": "",
      "documentation": "Style: \" + style_a + \" \" + style_b, style=style_a + \" \" + style_b))"
    },
    {
      "arg_name": "background_color",
      "function": "fansi",
      "default_value": null,
      "usage_pattern": "boolean_condition,type_check",
      "validation_code": "isinstance(background_color, str) | isinstance(background_color, int) | isinstance(background_color, int)",
      "transformation_code": "background_color=None, underline_color=None, *, per_line=True, reset=True, truecolor=None, link=None): | background_color=color)) | fansi(text_string='', text_color=None, style=None, background_color=None, underline_color=None, *, per_line=True, reset=True, truecolor=None, link=None) | sum((x is None for x in [text_color, style, background_color])",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "underline_color",
      "function": "fansi",
      "default_value": null,
      "usage_pattern": "boolean_condition,type_check",
      "validation_code": "isinstance(underline_color, str) | isinstance(underline_color, int) | isinstance(underline_color, int)",
      "transformation_code": "underline_color=None, *, per_line=True, reset=True, truecolor=None, link=None): | underline_color=underline_color, per_line=False, reset=reset, truecolor=truecolor, link=link) for line in lines] | fansi(text_string='', text_color=None, style=None, background_color=None, underline_color=None, *, per_line=True, reset=True, truecolor=None, link=None) | fansi(line, text_color, style, background_color, underline_color=underline_color, per_line=False, reset=reset, truecolor=truecolor, link=link)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "per_line",
      "function": "fansi",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "per_line=True | per_line=False",
      "transformation_code": "per_line=True, reset=True, truecolor=None, link=None): | per_line=False, reset=reset, truecolor=truecolor, link=link) for line in lines] | fansi(text_string='', text_color=None, style=None, background_color=None, underline_color=None, *, per_line=True, reset=True, truecolor=None, link=None) | fansi(line, text_color, style, background_color, underline_color=underline_color, per_line=False, reset=reset, truecolor=truecolor, link=link)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "reset",
      "function": "fansi",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "reset=True | reset=False | reset=False",
      "transformation_code": "reset=True, truecolor=None, link=None): | reset=False | fansi(text_string='', text_color=None, style=None, background_color=None, underline_color=None, *, per_line=True, reset=True, truecolor=None, link=None) | print(\n        ...     fansi(\"hello \", \"red\", \"sub\", reset=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "truecolor",
      "function": "fansi",
      "default_value": null,
      "usage_pattern": "equality_check,boolean_condition,none_check",
      "validation_code": "truecolor=None | truecolor==True | truecolor=True",
      "transformation_code": "truecolor=None, link=None): | truecolor==True | fansi(text_string='', text_color=None, style=None, background_color=None, underline_color=None, *, per_line=True, reset=True, truecolor=None, link=None) | print('truecolor = ',truecolor)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "link",
      "function": "fansi",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "link=None | link=link",
      "transformation_code": "link=None): | link=\"https://example.com\") | fansi(text_string='', text_color=None, style=None, background_color=None, underline_color=None, *, per_line=True, reset=True, truecolor=None, link=None) | fansi(\"Click me\", \"blue\", \"underlined\", link=\"https://example.com\")",
      "error_handling": "",
      "documentation": "LINK:"
    },
    {
      "arg_name": "string",
      "function": "_fansi_fix",
      "default_value": null,
      "usage_pattern": "indexing,length_check",
      "validation_code": "",
      "transformation_code": "_fansi_fix(string) | finditer(string)",
      "error_handling": "",
      "documentation": "string (str)"
    },
    {
      "arg_name": "text_string",
      "function": "_legacy_fansi",
      "default_value": null,
      "usage_pattern": "equality_check,boolean_condition",
      "validation_code": "text_string = str",
      "transformation_code": "text_string = str(text_string) | text_string == '': | _legacy_fansi(text_string, text_color=None, style=None, background_color=None, *, per_line=True) | str(text_string)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "text_color",
      "function": "_legacy_fansi",
      "default_value": null,
      "usage_pattern": "equality_check,boolean_condition,method_call,addition,type_check",
      "validation_code": "assert 0 <= text_color <= 7, 'text_color == ' + str(text_color) + ' \u2234 \u00ac\ufe590 <= text_color <= 7\ufe5a \u2234 AssertionError' | isinstance(text_color, str) | text_color=None",
      "transformation_code": "text_color=None, style=None, background_color=None, *, per_line=True): | text_color = text_colors[text_color.lower()] | _legacy_fansi(text_string, text_color=None, style=None, background_color=None, *, per_line=True) | fansi(line, text_color, style, background_color, per_line=False)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "style",
      "function": "_legacy_fansi",
      "default_value": null,
      "usage_pattern": "equality_check,boolean_condition,method_call,addition,type_check",
      "validation_code": "assert 0 <= style <= 7, 'style == ' + str(style) + ' \u2234 \u00ac\ufe590 <= style <= 7\ufe5a \u2234 AssertionError' | isinstance(style, str) | style=None",
      "transformation_code": "style=None, background_color=None, *, per_line=True): | style = styles[style.lower()] | _legacy_fansi(text_string, text_color=None, style=None, background_color=None, *, per_line=True) | fansi(line, text_color, style, background_color, per_line=False)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "background_color",
      "function": "_legacy_fansi",
      "default_value": null,
      "usage_pattern": "equality_check,boolean_condition,method_call,addition,type_check",
      "validation_code": "assert 0 <= background_color <= 7, 'background_color == ' + str(background_color) + ' \u2234 \u00ac\ufe590 <= background_color <= 7\ufe5a \u2234 AssertionError' | isinstance(background_color, str) | background_color=None",
      "transformation_code": "background_color=None, *, per_line=True): | background_color = background_colors[background_color.lower()] | _legacy_fansi(text_string, text_color=None, style=None, background_color=None, *, per_line=True) | fansi(line, text_color, style, background_color, per_line=False)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "per_line",
      "function": "_legacy_fansi",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "per_line=True | per_line=False",
      "transformation_code": "per_line=True): | per_line=False) for line in lines] | _legacy_fansi(text_string, text_color=None, style=None, background_color=None, *, per_line=True) | fansi(line, text_color, style, background_color, per_line=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "text_string",
      "function": "fansi_print",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "fansi_print(text_string: object, text_color: object=None, style: object=None, background_color: object=None, underline_color=None, *, link=None, new_line=True, reset=True, truecolor=None) | print(fansi(text_string, text_color=text_color, style=style, background_color=background_color, reset=reset, truecolor=truecolor, underline_color=underline_color, link=link)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "text_color",
      "function": "fansi_print",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "text_color=text_color",
      "transformation_code": "text_color=text_color, style=style, background_color=background_color, reset=reset, truecolor=truecolor, underline_color=underline_color, link=link), end='\\n' if new_line else '', flush=True) | fansi_print(text_string: object, text_color: object=None, style: object=None, background_color: object=None, underline_color=None, *, link=None, new_line=True, reset=True, truecolor=None) | print(fansi(text_string, text_color=text_color, style=style, background_color=background_color, reset=reset, truecolor=truecolor, underline_color=underline_color, link=link)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "style",
      "function": "fansi_print",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "style=style",
      "transformation_code": "style=style, background_color=background_color, reset=reset, truecolor=truecolor, underline_color=underline_color, link=link), end='\\n' if new_line else '', flush=True) | fansi_print(text_string: object, text_color: object=None, style: object=None, background_color: object=None, underline_color=None, *, link=None, new_line=True, reset=True, truecolor=None) | print(fansi(text_string, text_color=text_color, style=style, background_color=background_color, reset=reset, truecolor=truecolor, underline_color=underline_color, link=link)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "background_color",
      "function": "fansi_print",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "background_color=background_color",
      "transformation_code": "background_color=background_color, reset=reset, truecolor=truecolor, underline_color=underline_color, link=link), end='\\n' if new_line else '', flush=True) | fansi_print(text_string: object, text_color: object=None, style: object=None, background_color: object=None, underline_color=None, *, link=None, new_line=True, reset=True, truecolor=None) | print(fansi(text_string, text_color=text_color, style=style, background_color=background_color, reset=reset, truecolor=truecolor, underline_color=underline_color, link=link)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "underline_color",
      "function": "fansi_print",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "underline_color=None | underline_color=underline_color",
      "transformation_code": "underline_color=None, *, link=None, new_line=True, reset=True, truecolor=None): | underline_color=underline_color, link=link), end='\\n' if new_line else '', flush=True) | fansi_print(text_string: object, text_color: object=None, style: object=None, background_color: object=None, underline_color=None, *, link=None, new_line=True, reset=True, truecolor=None) | print(fansi(text_string, text_color=text_color, style=style, background_color=background_color, reset=reset, truecolor=truecolor, underline_color=underline_color, link=link)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "link",
      "function": "fansi_print",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "link=None | link=link",
      "transformation_code": "link=None, new_line=True, reset=True, truecolor=None): | link=link), end='\\n' if new_line else '', flush=True) | fansi_print(text_string: object, text_color: object=None, style: object=None, background_color: object=None, underline_color=None, *, link=None, new_line=True, reset=True, truecolor=None) | print(fansi(text_string, text_color=text_color, style=style, background_color=background_color, reset=reset, truecolor=truecolor, underline_color=underline_color, link=link)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "new_line",
      "function": "fansi_print",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "new_line=True",
      "transformation_code": "new_line=True, reset=True, truecolor=None): | fansi_print(text_string: object, text_color: object=None, style: object=None, background_color: object=None, underline_color=None, *, link=None, new_line=True, reset=True, truecolor=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "reset",
      "function": "fansi_print",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "reset=True | reset=reset",
      "transformation_code": "reset=True, truecolor=None): | reset=reset, truecolor=truecolor, underline_color=underline_color, link=link), end='\\n' if new_line else '', flush=True) | fansi_print(text_string: object, text_color: object=None, style: object=None, background_color: object=None, underline_color=None, *, link=None, new_line=True, reset=True, truecolor=None) | print(fansi(text_string, text_color=text_color, style=style, background_color=background_color, reset=reset, truecolor=truecolor, underline_color=underline_color, link=link)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "truecolor",
      "function": "fansi_print",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "truecolor=None | truecolor=truecolor",
      "transformation_code": "truecolor=None): | truecolor=truecolor, underline_color=underline_color, link=link), end='\\n' if new_line else '', flush=True) | fansi_print(text_string: object, text_color: object=None, style: object=None, background_color: object=None, underline_color=None, *, link=None, new_line=True, reset=True, truecolor=None) | print(fansi(text_string, text_color=text_color, style=style, background_color=background_color, reset=reset, truecolor=truecolor, underline_color=underline_color, link=link)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "fansi_printed",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "fansi_printed(x, *args, **kwargs) | fansi_print(x, *args, **kwargs)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "code",
      "function": "_old_fansi_syntax_highlighting",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_old_fansi_syntax_highlighting(code: str, namespace=() | ansi_highlight(analyze_python(code)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "namespace",
      "function": "_old_fansi_syntax_highlighting",
      "default_value": "()",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "namespace=(), style_overrides={}): | _old_fansi_syntax_highlighting(code: str, namespace=()",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "style_overrides",
      "function": "_old_fansi_syntax_highlighting",
      "default_value": "{}",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "style_overrides={}): | update(style_overrides)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "code",
      "function": "fansi_syntax_highlighting",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "code=get_source_code | num_code_lines = code",
      "transformation_code": "code=get_source_code(r) | fansi_syntax_highlighting(code: str, namespace=() | fansi_syntax_highlighting(code,lazy=True,show_line_numbers=True,line_wrap_width=get_terminal_width()",
      "error_handling": "",
      "documentation": "code(r)"
    },
    {
      "arg_name": "namespace",
      "function": "fansi_syntax_highlighting",
      "default_value": "()",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "namespace=(), style_overrides: dict={}, line_wrap_width: int=None, show_line_numbers: bool=False, lazy: bool=False): | fansi_syntax_highlighting(code: str, namespace=() | _old_fansi_syntax_highlighting(code, namespace, style_overrides)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "style_overrides",
      "function": "fansi_syntax_highlighting",
      "default_value": "{}",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_old_fansi_syntax_highlighting(code, namespace, style_overrides) | update(style_overrides)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "line_wrap_width",
      "function": "fansi_syntax_highlighting",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "line_wrap_width=get_terminal_width | line_wrap_width=30 | line_wrap_width = 9999999",
      "transformation_code": "line_wrap_width=get_terminal_width()): | line_wrap_width=30,show_line_numbers=False)) | fansi_syntax_highlighting(code,lazy=True,show_line_numbers=True,line_wrap_width=get_terminal_width() | and (not line_wrap_width)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "show_line_numbers",
      "function": "fansi_syntax_highlighting",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "show_line_numbers=True | show_line_numbers=False | show_line_numbers = False",
      "transformation_code": "show_line_numbers=True,line_wrap_width=get_terminal_width()): | show_line_numbers=False)) | fansi_syntax_highlighting(code,lazy=True,show_line_numbers=True,line_wrap_width=get_terminal_width() | and (not show_line_numbers)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "lazy",
      "function": "fansi_syntax_highlighting",
      "default_value": false,
      "usage_pattern": "equality_check,boolean_condition",
      "validation_code": "lazy==True | lazy=True",
      "transformation_code": "lazy==True, this function returns a generator of strings that should be printed sequentially without new lines | lazy=True,show_line_numbers=True,line_wrap_width=get_terminal_width()): | fansi_syntax_highlighting(code,lazy=True,show_line_numbers=True,line_wrap_width=get_terminal_width()",
      "error_handling": "",
      "documentation": "LAZY:"
    },
    {
      "arg_name": "path",
      "function": "fansi_highlight_path",
      "default_value": null,
      "usage_pattern": "method_call,iteration",
      "validation_code": "path = strip_ansi_escapes | path = path.split",
      "transformation_code": "path = strip_ansi_escapes(path) | path = path.split('/') | fansi_highlight_path(path) | strip_ansi_escapes(path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "code",
      "function": "fansi_pygments",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "code = highlight | code = highlighted_code",
      "transformation_code": "code = highlight(code, lexer, formatter) | code = highlighted_code[:-1] | fansi_pygments(code, language=None, *, style=None, color_mode=None) | guess_lexer(code)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "language",
      "function": "fansi_pygments",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "language=None",
      "transformation_code": "language=None, *, style=None, color_mode=None): | fansi_pygments(code, language=None, *, style=None, color_mode=None) | get_lexer_by_name(language)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "style",
      "function": "fansi_pygments",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "style=None | style = get_style_by_name | style = list",
      "transformation_code": "style=None, color_mode=None): | style = 'default' | fansi_pygments(code, language=None, *, style=None, color_mode=None) | get_style_by_name(style)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "color_mode",
      "function": "fansi_pygments",
      "default_value": null,
      "usage_pattern": "equality_check,boolean_condition,none_check",
      "validation_code": "color_mode=None",
      "transformation_code": "color_mode=None): | color_mode = 'basic' | fansi_pygments(code, language=None, *, style=None, color_mode=None) | ValueError(\"Invalid color mode '{}' specified. Available modes: basic, 256, true\".format(color_mode)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "code",
      "function": "fansi_pygments_demo",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "code=None | code = unindent",
      "transformation_code": "code=None): | code = unindent('\\n        @decorator\\n        def f(x, *y):\\n            print(\"HELLO\", 1+2.3 <= [])\\n        ').strip() | fansi_pygments_demo(code=None) | print(style.center(string_width(code)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "string",
      "function": "_set_local_clipboard_string",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "_local_clipboard_string = string",
      "transformation_code": "string = string | _set_local_clipboard_string(string) | string_to_text_file(_local_clipboard_string_path, string)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "string",
      "function": "string_to_clipboard",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "string_to_clipboard(string) | _copy_text_over_terminal(string)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "string",
      "function": "_copy_text_over_terminal",
      "default_value": null,
      "usage_pattern": "method_call,type_check",
      "validation_code": "isinstance(string, str) | string = base64.b64encode",
      "transformation_code": "string = base64.b64encode(string.encode()).decode() | _copy_text_over_terminal(string) | isinstance(string, str)",
      "error_handling": "",
      "documentation": "string (str)"
    },
    {
      "arg_name": "wipe",
      "function": "accumulate_clipboard_text",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "wipe=False",
      "transformation_code": "wipe=False, unique=False): | accumulate_clipboard_text(*, wipe=False, unique=False)",
      "error_handling": "",
      "documentation": "wipe (bool, optional)"
    },
    {
      "arg_name": "unique",
      "function": "accumulate_clipboard_text",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "unique=False | unique=True",
      "transformation_code": "unique=False): | unique=True) | accumulate_clipboard_text(*, wipe=False, unique=False) | run_clipboard_text_accumulator(unique=True)",
      "error_handling": "try_except",
      "documentation": "unique (bool, optional)"
    },
    {
      "arg_name": "image",
      "function": "_rgb_to_grayscale",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "assert image.ndim == 3 | image = as_numpy_array",
      "transformation_code": "image = as_numpy_array(image) | _rgb_to_grayscale(image) | as_numpy_array(image)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "matrix",
      "function": "grayscale_to_rgb",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "grayscale_to_rgb(matrix, number_of_channels=3) | stack((matrix,)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "number_of_channels",
      "function": "grayscale_to_rgb",
      "default_value": 3,
      "usage_pattern": "simple_usage",
      "validation_code": "number_of_channels=3",
      "transformation_code": "number_of_channels=3): | grayscale_to_rgb(matrix, number_of_channels=3)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "gauss_blur",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert mode in {'constant', 'nearest', 'reflect', 'mirror', 'wrap'}, 'r.med_filter: Invalid mode for blurring edge-areas of image. mode=' + str(mode)",
      "transformation_code": "gauss_blur(image, \u03c3, single_channel: bool=False, mode: str='reflect', shutup: bool=False) | shape(image)",
      "error_handling": "",
      "documentation": "image: Any valid image (NumPy, PIL, etc)"
    },
    {
      "arg_name": "\u03c3",
      "function": "gauss_blur",
      "default_value": null,
      "usage_pattern": "equality_check,boolean_condition",
      "validation_code": "\u03c3 == 0 | sigma=\u03c3",
      "transformation_code": "\u03c3 == 0: | gauss_blur(image, \u03c3, single_channel: bool=False, mode: str='reflect', shutup: bool=False) | gaussian_filter(x, sigma=\u03c3, mode=mode)",
      "error_handling": "",
      "documentation": "\u03c3: Standard deviation for Gaussian kernel (0 = no blur)"
    },
    {
      "arg_name": "single_channel",
      "function": "gauss_blur",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "gauss_blur(image, \u03c3, single_channel: bool=False, mode: str='reflect', shutup: bool=False)",
      "error_handling": "",
      "documentation": "single_channel: If False, blurs each channel separately (preserves colors)"
    },
    {
      "arg_name": "mode",
      "function": "gauss_blur",
      "default_value": "reflect",
      "usage_pattern": "method_call",
      "validation_code": "assert mode in {'constant', 'nearest', 'reflect', 'mirror', 'wrap'}, 'r.med_filter: Invalid mode for blurring edge-areas of image. mode=' + str(mode) | mode = mode.lower | mode=mode",
      "transformation_code": "mode = mode.lower() | mode=' + str(mode) | gauss_blur(image, \u03c3, single_channel: bool=False, mode: str='reflect', shutup: bool=False) | str(mode)",
      "error_handling": "",
      "documentation": "mode: Edge handling"
    },
    {
      "arg_name": "shutup",
      "function": "gauss_blur",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "gauss_blur(image, \u03c3, single_channel: bool=False, mode: str='reflect', shutup: bool=False) | and (not shutup)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "diameter",
      "function": "flat_circle_kernel",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "",
      "transformation_code": "flat_circle_kernel(diameter) | int(diameter)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "size",
      "function": "gaussian_kernel",
      "default_value": 21,
      "usage_pattern": "simple_usage",
      "validation_code": "size=21 | num=size",
      "transformation_code": "size=21, sigma=3, dim=2): | gaussian_kernel(size=21, sigma=3, dim=2) | linspace(-(size // 2)",
      "error_handling": "",
      "documentation": "size : float, the kernel size (will be square)"
    },
    {
      "arg_name": "sigma",
      "function": "gaussian_kernel",
      "default_value": 3,
      "usage_pattern": "simple_usage",
      "validation_code": "sigma=3",
      "transformation_code": "sigma=3, dim=2): | gaussian_kernel(size=21, sigma=3, dim=2)",
      "error_handling": "",
      "documentation": "sigma : float, the sigma Gaussian parameter"
    },
    {
      "arg_name": "dim",
      "function": "gaussian_kernel",
      "default_value": 2,
      "usage_pattern": "equality_check,boolean_condition",
      "validation_code": "assert dim == 2 or dim == 1, 'Only 1d and 2d gaussians are supported right now' | dim=2 | dim == 2",
      "transformation_code": "dim=2): | dim == 2 or dim == 1, 'Only 1d and 2d gaussians are supported right now' | gaussian_kernel(size=21, sigma=3, dim=2)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "height",
      "function": "uniform_float_color_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert height >= 0 and width >= 0 | height=randint | height >= 0",
      "transformation_code": "height=randint(10,30) | uniform_float_color_image(height: int, width: int, color: tuple=(0, 0, 0, 0) | uniform_float_color_image(height,width,color)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "width",
      "function": "uniform_float_color_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert height >= 0 and width >= 0 | width=randint | width >= 0",
      "transformation_code": "width=randint(10,30) | uniform_float_color_image(height: int, width: int, color: tuple=(0, 0, 0, 0) | uniform_float_color_image(height,width,color)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "color",
      "function": "uniform_float_color_image",
      "default_value": "(0, 0, 0, 0)",
      "usage_pattern": "length_check",
      "validation_code": "assert is_number(color) or (is_color(color) and len(color) in {3, 4}), 'Color should be a number, an RGB float color, or an RGBA float color' | assert len(color) == 3 and is_rgb_image(output) or (len(color) == 4 and is_rgba_image(output)) | color=random_rgb_float_color",
      "transformation_code": "color=random_rgb_float_color() #Color is like (.1235, .5742, .8652) | color = as_rgba_float_color(color) | uniform_float_color_image(height: int, width: int, color: tuple=(0, 0, 0, 0) | uniform_float_color_image(height,width,color)",
      "error_handling": "",
      "documentation": "color (a tuple with 3 or 4 floats between 0 and 1)"
    },
    {
      "arg_name": "bot",
      "function": "blend_images",
      "default_value": null,
      "usage_pattern": "indexing,length_check,addition,type_check",
      "validation_code": "assert is_image(bot) or (is_color(bot) and len(bot) in {3, 4}) or is_number(bot) or isinstance(bot, str) | assert is_float_color(bot) | assert is_image(bot)",
      "transformation_code": "bot = as_rgba_float_color(bot) | bot = float(bot) | blend_images(bot, top, alpha=1, mode='normal') | inputs (top and bot can be floats, images or colors etc)",
      "error_handling": "",
      "documentation": "bot (Union[numpy.ndarray, float, Tuple[float, float, float], Tuple[float, float, float, float]])"
    },
    {
      "arg_name": "top",
      "function": "blend_images",
      "default_value": null,
      "usage_pattern": "indexing,length_check,addition,type_check",
      "validation_code": "assert is_image(top) or (is_color(top) and len(top) in {3, 4}) or is_number(top) or isinstance(top, str) | assert is_float_color(top) | assert is_image(top)",
      "transformation_code": "top = as_rgba_float_color(top) | top = as_rgba_float_color(top) | blend_images(bot, top, alpha=1, mode='normal') | inputs (top and bot can be floats, images or colors etc)",
      "error_handling": "",
      "documentation": "top (Union[numpy.ndarray, float, Tuple[float, float, float], Tuple[float, float, float, float]])"
    },
    {
      "arg_name": "alpha",
      "function": "blend_images",
      "default_value": 1,
      "usage_pattern": "indexing,addition",
      "validation_code": "assert is_image(alpha) or is_number(alpha) | assert is_image(alpha) | alpha=1",
      "transformation_code": "alpha=1, mode='normal'): | alpha=checkerboard) #Mix the dice on with a checkerboard mask | blend_images(bot, top, alpha=1, mode='normal') | blend_images(composite,dice,alpha=checkerboard)",
      "error_handling": "",
      "documentation": "alpha (Union[numpy.ndarray, float], optional)"
    },
    {
      "arg_name": "mode",
      "function": "blend_images",
      "default_value": "normal",
      "usage_pattern": "method_call",
      "validation_code": "assert mode in blend_modes, 'Please choose a blend mode from the following options: ' + str(blend_modes)",
      "transformation_code": "mode='normal'): | mode='add'))     #Add mode example | blend_images(bot, top, alpha=1, mode='normal') | display_image(blend_images(mountains,penguin,mode='add')",
      "error_handling": "",
      "documentation": "mode (str, optional)"
    },
    {
      "arg_name": "mode",
      "function": "overlay_images",
      "default_value": "normal",
      "usage_pattern": "simple_usage",
      "validation_code": "mode=mode",
      "transformation_code": "mode='normal'): | mode=mode) | overlay_images(*images, mode='normal') | blend_images(output, image, mode=mode)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "bot",
      "function": "laplacian_blend",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "laplacian_blend(bot, top, alpha, levels=None) | resize_images_to_fit(crop_images_to_square(load_images(download_urls_to_cache(bot_url, top_url)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "top",
      "function": "laplacian_blend",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "top = resize_images_to_fit | bot.shape == top",
      "transformation_code": "top = resize_images_to_fit(crop_images_to_square(load_images(download_urls_to_cache(bot_url, top_url), use_cache=True)), height=S, width=S) | laplacian_blend(bot, top, alpha, levels=None) | resize_images_to_fit(crop_images_to_square(load_images(download_urls_to_cache(bot_url, top_url)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "alpha",
      "function": "laplacian_blend",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "alpha = get_checkerboard_image | alpha = as_float_images | top.shape == alpha",
      "transformation_code": "alpha = get_checkerboard_image(S, S, tile_size=64,first_color=0,second_color=1) | alpha = as_float_images(as_rgb_images([bot, top, alpha])) | laplacian_blend(bot, top, alpha, levels=None) | as_float_images(as_rgb_images([bot, top, alpha])",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "levels",
      "function": "laplacian_blend",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "levels=None | levels = int",
      "transformation_code": "levels=None): | levels = int(np.ceil(np.log2(min_dim))) | laplacian_blend(bot, top, alpha, levels=None) | laplacian_blend(bot, top, alpha,levels)",
      "error_handling": "",
      "documentation": "levels (int, None)"
    },
    {
      "arg_name": "height",
      "function": "get_checkerboard_image",
      "default_value": 64,
      "usage_pattern": "simple_usage",
      "validation_code": "height=64",
      "transformation_code": "height=64, width=64, *, tile_size=8, first_color=(1.0, 1.0, 1.0, 1.0), second_color=(0.0, 0.0, 0.0, 1.0)): | get_checkerboard_image(height=64, width=64, *, tile_size=8, first_color=(1.0, 1.0, 1.0, 1.0) | int (tile_height, tile_width)",
      "error_handling": "",
      "documentation": "height: int"
    },
    {
      "arg_name": "width",
      "function": "get_checkerboard_image",
      "default_value": 64,
      "usage_pattern": "simple_usage",
      "validation_code": "width=64 | width=get_image_dimensions",
      "transformation_code": "width=64, *, tile_size=8, first_color=(1.0, 1.0, 1.0, 1.0), second_color=(0.0, 0.0, 0.0, 1.0)): | width=get_image_dimensions(rgba_image) | get_checkerboard_image(height=64, width=64, *, tile_size=8, first_color=(1.0, 1.0, 1.0, 1.0) | int (tile_height, tile_width)",
      "error_handling": "",
      "documentation": "width: int"
    },
    {
      "arg_name": "tile_size",
      "function": "get_checkerboard_image",
      "default_value": 8,
      "usage_pattern": "type_check",
      "validation_code": "isinstance(tile_size, int) | tile_size=8",
      "transformation_code": "tile_size=8, first_color=(1.0, 1.0, 1.0, 1.0), second_color=(0.0, 0.0, 0.0, 1.0)): | get_checkerboard_image(height=64, width=64, *, tile_size=8, first_color=(1.0, 1.0, 1.0, 1.0) | isinstance(tile_size, int)",
      "error_handling": "",
      "documentation": "tile_size: int or tuple of int (tile_height, tile_width)"
    },
    {
      "arg_name": "first_color",
      "function": "get_checkerboard_image",
      "default_value": "(1.0, 1.0, 1.0, 1.0)",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "first_color=(1.0, 1.0, 1.0, 1.0), second_color=(0.0, 0.0, 0.0, 1.0)): | get_checkerboard_image(height=64, width=64, *, tile_size=8, first_color=(1.0, 1.0, 1.0, 1.0) | as_rgba_image(uniform_float_color_image(tile_height, tile_width, first_color)",
      "error_handling": "",
      "documentation": "first_color: tuple of float (r, g, b, a)"
    },
    {
      "arg_name": "second_color",
      "function": "get_checkerboard_image",
      "default_value": "(0.0, 0.0, 0.0, 1.0)",
      "usage_pattern": "simple_usage",
      "validation_code": "second_color=.75",
      "transformation_code": "second_color=(0.0, 0.0, 0.0, 1.0)): | second_color=.75) #You can use floats as colors | get_checkerboard_image(height,width, second_color=.75) | as_rgba_image(uniform_float_color_image(tile_height, tile_width, second_color)",
      "error_handling": "",
      "documentation": "second_color: tuple of float (r, g, b, a)"
    },
    {
      "arg_name": "image",
      "function": "with_drop_shadow",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "image = as_numpy_image | image = as_float_image",
      "transformation_code": "image = as_numpy_image(image, copy=False) | image = as_float_image(image, copy=False) | with_drop_shadow(image, *, x=0, y=0, color=(0, 0, 0, 1) | as_numpy_image(image, copy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "with_drop_shadow",
      "default_value": 0,
      "usage_pattern": "simple_usage",
      "validation_code": "x=0",
      "transformation_code": "x=0, y=0, color=(0, 0, 0, 1), blur=10, opacity=1): | with_drop_shadow(image, *, x=0, y=0, color=(0, 0, 0, 1) | shift_image(alpha, x, y, allow_growth=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "y",
      "function": "with_drop_shadow",
      "default_value": 0,
      "usage_pattern": "simple_usage",
      "validation_code": "y=0 | y=1 | y=False",
      "transformation_code": "y=0, color=(0, 0, 0, 1), blur=10, opacity=1): | y=False) | with_drop_shadow(image, *, x=0, y=0, color=(0, 0, 0, 1) | as_numpy_image(image, copy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "color",
      "function": "with_drop_shadow",
      "default_value": "(0, 0, 0, 1)",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "color=(0, 0, 0, 1), blur=10, opacity=1): | with_drop_shadow(image, *, x=0, y=0, color=(0, 0, 0, 1) | with_alpha_channel(uniform_float_color_image(height, width, color)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "blur",
      "function": "with_drop_shadow",
      "default_value": 10,
      "usage_pattern": "simple_usage",
      "validation_code": "blur=10 | sigma=blur",
      "transformation_code": "blur=10, opacity=1): | cv_gauss_blur(shadow_alpha, sigma=blur)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "opacity",
      "function": "with_drop_shadow",
      "default_value": 1,
      "usage_pattern": "simple_usage",
      "validation_code": "opacity=1",
      "transformation_code": "opacity=1):",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "images",
      "function": "with_drop_shadows",
      "default_value": null,
      "usage_pattern": "iteration",
      "validation_code": "",
      "transformation_code": "with_drop_shadows(images, **kwargs)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "with_corner_radius",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "image = load_image",
      "transformation_code": "image = load_image( | with_corner_radius(image, radius, *, antialias=True, background=None) | load_image(\n            \"https://upload.wikimedia.org/wikipedia/en/7/7d/Lenna_%28test_image%29.png\"\n        )",
      "error_handling": "",
      "documentation": "image("
    },
    {
      "arg_name": "radius",
      "function": "with_corner_radius",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert radius >= 0 | radius = round | radius >= 0",
      "transformation_code": "radius = round(radius) | with_corner_radius(image, radius, *, antialias=True, background=None) | display_alpha_image(\n                with_drop_shadow(\n                    crop_image(\n                        with_corner_radius(image, radius)",
      "error_handling": "",
      "documentation": "radius(image, radius),"
    },
    {
      "arg_name": "antialias",
      "function": "with_corner_radius",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "antialias=True",
      "transformation_code": "antialias=True, background=None): | with_corner_radius(image, radius, *, antialias=True, background=None) | tuple((x * antialias_upsampling_factor for x in mask_size)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "background",
      "function": "with_corner_radius",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "background=None",
      "transformation_code": "background=None): | with_corner_radius(image, radius, *, antialias=True, background=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "with_image_glow",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "image = as_float_image | image = as_rgba_image",
      "transformation_code": "image = as_float_image(image) | image = as_rgba_image(image) | with_image_glow(image, *, blur=None, strength=None) | display_image(\n        ...         with_image_glow(\n        ...             resize_image_to_fit(pil_text_to_image(\n        ...                 \"Hello World\n0123456789\n\" + str(i)",
      "error_handling": "",
      "documentation": "image("
    },
    {
      "arg_name": "blur",
      "function": "with_image_glow",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "blur=None | blur=50 | blur = 10",
      "transformation_code": "blur=None, strength=None): | blur=50, | with_image_glow(image, *, blur=None, strength=None) | cv_gauss_blur(image, blur, alpha_weighted=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "strength",
      "function": "with_image_glow",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "strength=None | strength=1.5 | strength = 1",
      "transformation_code": "strength=None): | strength=1.5, | with_image_glow(image, *, blur=None, strength=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "blur",
      "function": "with_image_glows",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "blur=None | blur=blur",
      "transformation_code": "blur=None, strength=None): | blur=blur, strength=strength) for image in images] | with_image_glows(*images, blur=None, strength=None) | with_image_glow(image, blur=blur, strength=strength)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "strength",
      "function": "with_image_glows",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "strength=None | strength=strength",
      "transformation_code": "strength=None): | strength=strength) for image in images] | with_image_glows(*images, blur=None, strength=None) | with_image_glow(image, blur=blur, strength=strength)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "radius",
      "function": "with_corner_radii",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "with_corner_radii(*images, radius, antialias=True) | with_corner_radius(image, radius, antialias=antialias)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "antialias",
      "function": "with_corner_radii",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "antialias=True | antialias=antialias",
      "transformation_code": "antialias=True): | antialias=antialias) for image in images] | with_corner_radii(*images, radius, antialias=True) | with_corner_radius(image, radius, antialias=antialias)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "get_alpha_outline",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "image = bordered_image_solid_color | image = bordered_image_solid_color",
      "transformation_code": "image = bordered_image_solid_color(image, color=(0, 0, 0, 0)) | image = bordered_image_solid_color(image, color=color, thickness=outer_radius) | get_alpha_outline(image, *, inner_radius=0, outer_radius=0, include_edges=True, allow_growth=False) | bordered_image_solid_color(image, color=(0, 0, 0, 0)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "inner_radius",
      "function": "get_alpha_outline",
      "default_value": 0,
      "usage_pattern": "simple_usage",
      "validation_code": "inner_radius=0 | inner_radius>0 | inner_radius>0",
      "transformation_code": "inner_radius=0, outer_radius=0, include_edges=True, allow_growth=False): | get_alpha_outline(image, *, inner_radius=0, outer_radius=0, include_edges=True, allow_growth=False) | cv_erode(mask, diameter=inner_radius, circular=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "outer_radius",
      "function": "get_alpha_outline",
      "default_value": 0,
      "usage_pattern": "simple_usage",
      "validation_code": "outer_radius=0 | outer_radius>0 | thickness=outer_radius",
      "transformation_code": "outer_radius=0, include_edges=True, allow_growth=False): | get_alpha_outline(image, *, inner_radius=0, outer_radius=0, include_edges=True, allow_growth=False) | bordered_image_solid_color(image, color=color, thickness=outer_radius)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "include_edges",
      "function": "get_alpha_outline",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "include_edges=True",
      "transformation_code": "include_edges=True, allow_growth=False): | get_alpha_outline(image, *, inner_radius=0, outer_radius=0, include_edges=True, allow_growth=False)",
      "error_handling": "",
      "documentation": "include_edges (bool)"
    },
    {
      "arg_name": "allow_growth",
      "function": "get_alpha_outline",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "allow_growth=False",
      "transformation_code": "allow_growth=False): | get_alpha_outline(image, *, inner_radius=0, outer_radius=0, include_edges=True, allow_growth=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "with_alpha_outline",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "image = bordered_image_solid_color",
      "transformation_code": "image = bordered_image_solid_color(image, color=(0, 0, 0, 0), thickness=outer_radius) | with_alpha_outline(image, *, inner_radius=0, outer_radius=0, include_edges=True, color=(1, 1, 1, 1) | bordered_image_solid_color(image, color=(0, 0, 0, 0)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "inner_radius",
      "function": "with_alpha_outline",
      "default_value": 0,
      "usage_pattern": "simple_usage",
      "validation_code": "inner_radius=0 | inner_radius=inner_radius",
      "transformation_code": "inner_radius=0, outer_radius=0, include_edges=True, color=(1, 1, 1, 1), allow_growth=False): | inner_radius=inner_radius, outer_radius=outer_radius, include_edges=include_edges, allow_growth=False) | with_alpha_outline(image, *, inner_radius=0, outer_radius=0, include_edges=True, color=(1, 1, 1, 1) | get_alpha_outline(image, inner_radius=inner_radius, outer_radius=outer_radius, include_edges=include_edges, allow_growth=False)",
      "error_handling": "",
      "documentation": "inner_radius: Outline extends inward from alpha edges"
    },
    {
      "arg_name": "outer_radius",
      "function": "with_alpha_outline",
      "default_value": 0,
      "usage_pattern": "simple_usage",
      "validation_code": "outer_radius=0 | thickness=outer_radius | outer_radius=outer_radius",
      "transformation_code": "outer_radius=0, include_edges=True, color=(1, 1, 1, 1), allow_growth=False): | outer_radius=outer_radius, include_edges=include_edges, allow_growth=False) | with_alpha_outline(image, *, inner_radius=0, outer_radius=0, include_edges=True, color=(1, 1, 1, 1) | get_alpha_outline(image, inner_radius=inner_radius, outer_radius=outer_radius, include_edges=include_edges, allow_growth=False)",
      "error_handling": "",
      "documentation": "outer_radius: Outline extends outward from alpha edges"
    },
    {
      "arg_name": "include_edges",
      "function": "with_alpha_outline",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "include_edges=True | include_edges=include_edges",
      "transformation_code": "include_edges=True, color=(1, 1, 1, 1), allow_growth=False): | include_edges=include_edges, allow_growth=False) | with_alpha_outline(image, *, inner_radius=0, outer_radius=0, include_edges=True, color=(1, 1, 1, 1) | get_alpha_outline(image, inner_radius=inner_radius, outer_radius=outer_radius, include_edges=include_edges, allow_growth=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "color",
      "function": "with_alpha_outline",
      "default_value": "(1, 1, 1, 1)",
      "usage_pattern": "simple_usage",
      "validation_code": "color = as_rgba_float_color",
      "transformation_code": "color=(1, 1, 1, 1), allow_growth=False): | color=(0, 0, 0, 0), thickness=outer_radius) | with_alpha_outline(image, *, inner_radius=0, outer_radius=0, include_edges=True, color=(1, 1, 1, 1) | bordered_image_solid_color(image, color=(0, 0, 0, 0)",
      "error_handling": "",
      "documentation": "color: RGBA color tuple (values 0-1)"
    },
    {
      "arg_name": "allow_growth",
      "function": "with_alpha_outline",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "allow_growth=False | allow_growth=False",
      "transformation_code": "allow_growth=False): | allow_growth=False) | get_alpha_outline(image, inner_radius=inner_radius, outer_radius=outer_radius, include_edges=include_edges, allow_growth=False)",
      "error_handling": "",
      "documentation": "allow_growth: If True, image can grow to accommodate outer outline"
    },
    {
      "arg_name": "progress",
      "function": "get_progress_bar_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "progress = clamp | bar_width = progress",
      "transformation_code": "progress = clamp(progress, 0, 1) | get_progress_bar_image(progress, *, height=10, width=100, bar_color='white', background_color='black', reverse=False) | display_image(get_progress_bar_image(i/N,width=10)",
      "error_handling": "",
      "documentation": "progress (float)"
    },
    {
      "arg_name": "height",
      "function": "get_progress_bar_image",
      "default_value": 10,
      "usage_pattern": "simple_usage",
      "validation_code": "height=10",
      "transformation_code": "height=10, width=100, bar_color='white', background_color='black', reverse=False): | get_progress_bar_image(progress, *, height=10, width=100, bar_color='white', background_color='black', reverse=False) | uniform_float_color_image(height, width, background_color)",
      "error_handling": "",
      "documentation": "height (int)"
    },
    {
      "arg_name": "width",
      "function": "get_progress_bar_image",
      "default_value": 100,
      "usage_pattern": "simple_usage",
      "validation_code": "width=100 | width=10 | width = progress",
      "transformation_code": "width=100, bar_color='white', background_color='black', reverse=False): | width=10)) | get_progress_bar_image(progress, *, height=10, width=100, bar_color='white', background_color='black', reverse=False) | display_image(get_progress_bar_image(i/N,width=10)",
      "error_handling": "",
      "documentation": "width  (int)"
    },
    {
      "arg_name": "bar_color",
      "function": "get_progress_bar_image",
      "default_value": "white",
      "usage_pattern": "simple_usage",
      "validation_code": "bar_color = as_rgba_float_color",
      "transformation_code": "bar_color='white', background_color='black', reverse=False): | bar_color = as_rgba_float_color(bar_color) | get_progress_bar_image(progress, *, height=10, width=100, bar_color='white', background_color='black', reverse=False) | as_rgba_float_color(bar_color)",
      "error_handling": "",
      "documentation": "bar_color        (str, tuple[float], float)"
    },
    {
      "arg_name": "background_color",
      "function": "get_progress_bar_image",
      "default_value": "black",
      "usage_pattern": "simple_usage",
      "validation_code": "background_color = as_rgba_float_color",
      "transformation_code": "background_color='black', reverse=False): | background_color = as_rgba_float_color(background_color) | get_progress_bar_image(progress, *, height=10, width=100, bar_color='white', background_color='black', reverse=False) | as_rgba_float_color(background_color)",
      "error_handling": "",
      "documentation": "background_color (str, tuple[float], float)"
    },
    {
      "arg_name": "reverse",
      "function": "get_progress_bar_image",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "reverse=False",
      "transformation_code": "reverse=False): | get_progress_bar_image(progress, *, height=10, width=100, bar_color='white', background_color='black', reverse=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "image_with_progress_bar",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "image = load_image | image = gather_args_call | image = rotate_image",
      "transformation_code": "image = load_image( | image = gather_args_call(get_progress_bar_image, height=abs(bar_height), width=bar_width) | image_with_progress_bar(image, progress, *, size=10, bar_color='white', background_color='black', position='top', reverse=False) | load_image(\n        ...     \"https://upload.wikimedia.org/wikipedia/en/7/7d/Lenna_%28test_image%29.png\",\n        ...     use_cache=True,\n        ... )",
      "error_handling": "",
      "documentation": "image("
    },
    {
      "arg_name": "progress",
      "function": "image_with_progress_bar",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "image_with_progress_bar(image, progress, *, size=10, bar_color='white', background_color='black', position='top', reverse=False) | display_alpha_image(\n        ...         labeled_image(\n        ...             image_with_progress_bar(\n        ...                 image,\n        ...                 i / N,\n        ...                 bar_color=\"white\",\n        ...                 background_color=\"dark blue\",\n        ...             )",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "size",
      "function": "image_with_progress_bar",
      "default_value": 10,
      "usage_pattern": "equality_check,boolean_condition",
      "validation_code": "assert is_number(size) | size=10 | size == 0",
      "transformation_code": "size=10, bar_color='white', background_color='black', position='top', reverse=False): | size == 0: | image_with_progress_bar(image, progress, *, size=10, bar_color='white', background_color='black', position='top', reverse=False) | is_number(size)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "bar_color",
      "function": "image_with_progress_bar",
      "default_value": "white",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "bar_color='white', background_color='black', position='top', reverse=False): | bar_color=\"white\", | image_with_progress_bar(image, progress, *, size=10, bar_color='white', background_color='black', position='top', reverse=False) | display_alpha_image(\n        ...         labeled_image(\n        ...             image_with_progress_bar(\n        ...                 image,\n        ...                 i / N,\n        ...                 bar_color=\"white\",\n        ...                 background_color=\"dark blue\",\n        ...             )",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "background_color",
      "function": "image_with_progress_bar",
      "default_value": "black",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "background_color='black', position='top', reverse=False): | background_color=\"dark blue\", | image_with_progress_bar(image, progress, *, size=10, bar_color='white', background_color='black', position='top', reverse=False) | display_alpha_image(\n        ...         labeled_image(\n        ...             image_with_progress_bar(\n        ...                 image,\n        ...                 i / N,\n        ...                 bar_color=\"white\",\n        ...                 background_color=\"dark blue\",\n        ...             )",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "position",
      "function": "image_with_progress_bar",
      "default_value": "top",
      "usage_pattern": "equality_check,boolean_condition,type_check",
      "validation_code": "assert isinstance(position, str) | assert False, 'rp.image_with_progress_bar: position should be \"top\", \"bottom\", \"left\" or \"right\", not ' + repr(position) | isinstance(position, str)",
      "transformation_code": "position='top', reverse=False): | position == 'top': | image_with_progress_bar(image, progress, *, size=10, bar_color='white', background_color='black', position='top', reverse=False) | isinstance(position, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "reverse",
      "function": "image_with_progress_bar",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "reverse=False | reverse=not | reverse=not",
      "transformation_code": "reverse=False): | reverse=not reverse) | image_with_progress_bar(image, progress, *, size=10, bar_color='white', background_color='black', position='top', reverse=False) | gather_args_call(image_with_progress_bar, position='top', reverse=not reverse)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "video",
      "function": "video_with_progress_bar",
      "default_value": null,
      "usage_pattern": "length_check",
      "validation_code": "assert length > 0, 'Cannot make progress bar on video with only one frame - length=' + str(length) | video = load_video | video=resize_list",
      "transformation_code": "video = load_video( | video=resize_list(video,30) | video_with_progress_bar(video, *, size=10, length=None, bar_color='white', background_color='black', reverse=False, position='top', lazy=False) | display_video(\n       ...     video_with_progress_bar(\n       ...         load_video(\n       ...             \"https://www.shutterstock.com/shutterstock/videos/1070160847/preview/stock-footage-electric-car-drive-on-the-wind-turbines-background-car-drives-along-a-mountain-road-electric-car.webm\",\n       ...             use_cache=True,\n       ...         )",
      "error_handling": "",
      "documentation": "video("
    },
    {
      "arg_name": "size",
      "function": "video_with_progress_bar",
      "default_value": 10,
      "usage_pattern": "simple_usage",
      "validation_code": "size=10 | size=10",
      "transformation_code": "size=10, length=None, bar_color='white', background_color='black', reverse=False, position='top', lazy=False): | size=-20, | video_with_progress_bar(video, *, size=10, length=None, bar_color='white', background_color='black', reverse=False, position='top', lazy=False) | video_with_progress_bar(\n        ...     video,\n        ...     position=\"right\",\n        ...     size=-20,\n        ...     background_color=\"translucent orange\",\n        ...     lazy=True,\n        ... )",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "length",
      "function": "video_with_progress_bar",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "assert length > 0, 'Cannot make progress bar on video with only one frame - length=' + str(length) | length=None | length = len",
      "transformation_code": "length=None, bar_color='white', background_color='black', reverse=False, position='top', lazy=False): | length = len(video) | video_with_progress_bar(video, *, size=10, length=None, bar_color='white', background_color='black', reverse=False, position='top', lazy=False) | str(length)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "bar_color",
      "function": "video_with_progress_bar",
      "default_value": "white",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "bar_color='white', background_color='black', reverse=False, position='top', lazy=False): | bar_color='translucent black', | video_with_progress_bar(video, *, size=10, length=None, bar_color='white', background_color='black', reverse=False, position='top', lazy=False) | video_with_progress_bar(\n        ...     video,\n        ...     position=\"right\",\n        ...     size=-5,\n        ...     background_color=\"green\",\n        ...     bar_color='translucent black',\n        ...     lazy=True,\n        ...     reverse=True\n        ... )",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "background_color",
      "function": "video_with_progress_bar",
      "default_value": "black",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "background_color='black', reverse=False, position='top', lazy=False): | background_color=\"translucent orange\", | video_with_progress_bar(video, *, size=10, length=None, bar_color='white', background_color='black', reverse=False, position='top', lazy=False) | video_with_progress_bar(\n        ...     video,\n        ...     position=\"right\",\n        ...     size=-20,\n        ...     background_color=\"translucent orange\",\n        ...     lazy=True,\n        ... )",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "reverse",
      "function": "video_with_progress_bar",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "reverse=False | reverse=True | reverse=False",
      "transformation_code": "reverse=False, position='top', lazy=False): | reverse=True | video_with_progress_bar(video, *, size=10, length=None, bar_color='white', background_color='black', reverse=False, position='top', lazy=False) | video_with_progress_bar(\n        ...     video,\n        ...     position=\"right\",\n        ...     size=-5,\n        ...     background_color=\"green\",\n        ...     bar_color='translucent black',\n        ...     lazy=True,\n        ...     reverse=True\n        ... )",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "position",
      "function": "video_with_progress_bar",
      "default_value": "top",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "position='top', lazy=False): | position=\"right\", | video_with_progress_bar(video, *, size=10, length=None, bar_color='white', background_color='black', reverse=False, position='top', lazy=False) | video_with_progress_bar(\n        ...     video,\n        ...     position=\"right\",\n        ...     size=-20,\n        ...     background_color=\"translucent orange\",\n        ...     lazy=True,\n        ... )",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "lazy",
      "function": "video_with_progress_bar",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "lazy=False | lazy=True | lazy=True",
      "transformation_code": "lazy=False): | lazy=True, | video_with_progress_bar(video, *, size=10, length=None, bar_color='white', background_color='black', reverse=False, position='top', lazy=False) | video_with_progress_bar(\n        ...     video,\n        ...     position=\"right\",\n        ...     size=-20,\n        ...     background_color=\"translucent orange\",\n        ...     lazy=True,\n        ... )",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "video",
      "function": "boomerang_video",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "isinstance(video, str) | video = load_video | video = list",
      "transformation_code": "video = load_video(video) | video = list(video)[:-1] + list(video)[::-1][:-1] | boomerang_video(video) | isinstance(video, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "name",
      "function": "_get_executable",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_get_executable(name, download_urls, executable_name) | make_directory(path_join(_rp_downloads_folder, name)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "download_urls",
      "function": "_get_executable",
      "default_value": null,
      "usage_pattern": "indexing",
      "validation_code": "url = download_urls",
      "transformation_code": "_get_executable(name, download_urls, executable_name)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "executable_name",
      "function": "_get_executable",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_get_executable(name, download_urls, executable_name) | path_join(folder, executable_name)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "video",
      "function": "slowmo_video_via_rife",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "video = load_images | video = as_numpy_array",
      "transformation_code": "video = load_images(output_dir, show_progress=True) | video = as_numpy_array(new_video) | slowmo_video_via_rife(video) | save_images(video, input_dir, show_progress=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "origin",
      "function": "_crop_images_to_max_or_min_size",
      "default_value": "top left",
      "usage_pattern": "simple_usage",
      "validation_code": "origin=origin",
      "transformation_code": "origin='top left', criterion=max, copy=True, do_height=True, do_width=True): | origin=origin, copy=copy) for image in images] | _crop_images_to_max_or_min_size(*images, origin='top left', criterion=max, copy=True, do_height=True, do_width=True) | crop_image(image, max_height, max_width, origin=origin, copy=copy)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "criterion",
      "function": "_crop_images_to_max_or_min_size",
      "default_value": "<max>",
      "usage_pattern": "simple_usage",
      "validation_code": "criterion=max | max_height = criterion | max_width = criterion",
      "transformation_code": "criterion=max, copy=True, do_height=True, do_width=True): | _crop_images_to_max_or_min_size(*images, origin='top left', criterion=max, copy=True, do_height=True, do_width=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "copy",
      "function": "_crop_images_to_max_or_min_size",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "copy=True | copy=copy",
      "transformation_code": "copy=True, do_height=True, do_width=True): | copy=copy) for image in images] | _crop_images_to_max_or_min_size(*images, origin='top left', criterion=max, copy=True, do_height=True, do_width=True) | crop_image(image, max_height, max_width, origin=origin, copy=copy)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "do_height",
      "function": "_crop_images_to_max_or_min_size",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "do_height=True",
      "transformation_code": "do_height=True, do_width=True): | _crop_images_to_max_or_min_size(*images, origin='top left', criterion=max, copy=True, do_height=True, do_width=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "do_width",
      "function": "_crop_images_to_max_or_min_size",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "do_width=True",
      "transformation_code": "do_width=True): | _crop_images_to_max_or_min_size(*images, origin='top left', criterion=max, copy=True, do_height=True, do_width=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "origin",
      "function": "crop_images_to_max_size",
      "default_value": "top left",
      "usage_pattern": "simple_usage",
      "validation_code": "origin=origin",
      "transformation_code": "origin='top left', copy=True): | origin='center')) | crop_images_to_max_size(*images, origin='top left', copy=True) | display_image_slideshow(crop_images_to_max_size(ans,origin='center')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "copy",
      "function": "crop_images_to_max_size",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "copy=True | copy=copy",
      "transformation_code": "copy=True): | copy=copy) | crop_images_to_max_size(*images, origin='top left', copy=True) | _crop_images_to_max_or_min_size(*images, origin=origin, criterion=max, copy=copy)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "origin",
      "function": "crop_images_to_min_size",
      "default_value": "top left",
      "usage_pattern": "simple_usage",
      "validation_code": "origin=origin",
      "transformation_code": "origin='top left', copy=True): | origin='center')) | crop_images_to_min_size(*images, origin='top left', copy=True) | display_image_slideshow(crop_images_to_min_size(ans,origin='center')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "copy",
      "function": "crop_images_to_min_size",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "copy=True | copy=copy",
      "transformation_code": "copy=True): | copy=copy) | crop_images_to_min_size(*images, origin='top left', copy=True) | _crop_images_to_max_or_min_size(*images, origin=origin, criterion=min, copy=copy)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "origin",
      "function": "crop_images_to_max_height",
      "default_value": "top left",
      "usage_pattern": "simple_usage",
      "validation_code": "origin=origin",
      "transformation_code": "origin='top left', copy=True): | origin=origin, criterion=max, copy=copy, do_width=False) | crop_images_to_max_height(*images, origin='top left', copy=True) | _crop_images_to_max_or_min_size(*images, origin=origin, criterion=max, copy=copy, do_width=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "copy",
      "function": "crop_images_to_max_height",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "copy=True | copy=copy",
      "transformation_code": "copy=True): | copy=copy, do_width=False) | crop_images_to_max_height(*images, origin='top left', copy=True) | _crop_images_to_max_or_min_size(*images, origin=origin, criterion=max, copy=copy, do_width=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "origin",
      "function": "crop_images_to_max_width",
      "default_value": "top left",
      "usage_pattern": "simple_usage",
      "validation_code": "origin=origin",
      "transformation_code": "origin='top left', copy=True): | origin=origin, criterion=max, copy=copy, do_height=False) | crop_images_to_max_width(*images, origin='top left', copy=True) | _crop_images_to_max_or_min_size(*images, origin=origin, criterion=max, copy=copy, do_height=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "copy",
      "function": "crop_images_to_max_width",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "copy=True | copy=copy",
      "transformation_code": "copy=True): | copy=copy, do_height=False) | crop_images_to_max_width(*images, origin='top left', copy=True) | _crop_images_to_max_or_min_size(*images, origin=origin, criterion=max, copy=copy, do_height=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "origin",
      "function": "crop_images_to_min_height",
      "default_value": "top left",
      "usage_pattern": "simple_usage",
      "validation_code": "origin=origin",
      "transformation_code": "origin='top left', copy=True): | origin=origin, criterion=min, copy=copy, do_width=False) | crop_images_to_min_height(*images, origin='top left', copy=True) | _crop_images_to_max_or_min_size(*images, origin=origin, criterion=min, copy=copy, do_width=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "copy",
      "function": "crop_images_to_min_height",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "copy=True | copy=copy",
      "transformation_code": "copy=True): | copy=copy, do_width=False) | crop_images_to_min_height(*images, origin='top left', copy=True) | _crop_images_to_max_or_min_size(*images, origin=origin, criterion=min, copy=copy, do_width=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "origin",
      "function": "crop_images_to_min_width",
      "default_value": "top left",
      "usage_pattern": "simple_usage",
      "validation_code": "origin=origin",
      "transformation_code": "origin='top left', copy=True): | origin=origin, criterion=min, copy=copy, do_height=False) | crop_images_to_min_width(*images, origin='top left', copy=True) | _crop_images_to_max_or_min_size(*images, origin=origin, criterion=min, copy=copy, do_height=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "copy",
      "function": "crop_images_to_min_width",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "copy=True | copy=copy",
      "transformation_code": "copy=True): | copy=copy, do_height=False) | crop_images_to_min_width(*images, origin='top left', copy=True) | _crop_images_to_max_or_min_size(*images, origin=origin, criterion=min, copy=copy, do_height=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "crop_image_to_square",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert is_image(image) | image = crop_image",
      "transformation_code": "image = crop_image(image, height=size, width=size, origin=origin, copy=copy) | crop_image_to_square(image, *, origin='center', grow=False, copy=True) | smaller\n        (this means it pads the image with black transparent pixels)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "origin",
      "function": "crop_image_to_square",
      "default_value": "center",
      "usage_pattern": "type_check",
      "validation_code": "assert isinstance(origin, str) | isinstance(origin, str) | origin=origin",
      "transformation_code": "origin='center', grow=False, copy=True): | origin=origin, copy=copy) | crop_image_to_square(image, *, origin='center', grow=False, copy=True) | isinstance(origin, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "grow",
      "function": "crop_image_to_square",
      "default_value": false,
      "usage_pattern": "equality_check,boolean_condition",
      "validation_code": "grow=False | grow==True",
      "transformation_code": "grow=False, copy=True): | grow==True, the image can become larger instead of smaller | crop_image_to_square(image, *, origin='center', grow=False, copy=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "copy",
      "function": "crop_image_to_square",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "copy=True | copy=copy",
      "transformation_code": "copy=True): | copy=copy) | crop_image_to_square(image, *, origin='center', grow=False, copy=True) | crop_image(image, height=size, width=size, origin=origin, copy=copy)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "images",
      "function": "crop_images_to_square",
      "default_value": null,
      "usage_pattern": "iteration",
      "validation_code": "",
      "transformation_code": "crop_images_to_square(images, *, origin='center', grow=False, copy=True) | is_numpy_array(images)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "origin",
      "function": "crop_images_to_square",
      "default_value": "center",
      "usage_pattern": "simple_usage",
      "validation_code": "origin=origin",
      "transformation_code": "origin='center', grow=False, copy=True): | origin=origin, grow=grow, copy=copy) for image in images] | crop_images_to_square(images, *, origin='center', grow=False, copy=True) | crop_image_to_square(image, origin=origin, grow=grow, copy=copy)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "grow",
      "function": "crop_images_to_square",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "grow=False | grow=grow",
      "transformation_code": "grow=False, copy=True): | grow=grow, copy=copy) for image in images] | crop_images_to_square(images, *, origin='center', grow=False, copy=True) | crop_image_to_square(image, origin=origin, grow=grow, copy=copy)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "copy",
      "function": "crop_images_to_square",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "copy=True | copy=copy",
      "transformation_code": "copy=True): | copy=copy) for image in images] | crop_images_to_square(images, *, origin='center', grow=False, copy=True) | crop_image_to_square(image, origin=origin, grow=grow, copy=copy)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "crop_image_at_random_position",
      "default_value": null,
      "usage_pattern": "indexing",
      "validation_code": "assert is_image(image) | cropped_image = image",
      "transformation_code": "image = image[y:y + height, x:x + width] | crop_image_at_random_position(image, height, width, include_position=False) | tuple (cropped_image, (x, y)",
      "error_handling": "",
      "documentation": "image : numpy.ndarray"
    },
    {
      "arg_name": "height",
      "function": "crop_image_at_random_position",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "height > img_height",
      "transformation_code": "crop_image_at_random_position(image, height, width, include_position=False) | randint(0, img_height - height)",
      "error_handling": "",
      "documentation": "height : int"
    },
    {
      "arg_name": "width",
      "function": "crop_image_at_random_position",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "width > img_width",
      "transformation_code": "crop_image_at_random_position(image, height, width, include_position=False) | randint(0, img_width - width)",
      "error_handling": "",
      "documentation": "width : int"
    },
    {
      "arg_name": "include_position",
      "function": "crop_image_at_random_position",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "include_position=False",
      "transformation_code": "include_position=False): | crop_image_at_random_position(image, height, width, include_position=False)",
      "error_handling": "",
      "documentation": "include_position : bool"
    },
    {
      "arg_name": "image_dimensions",
      "function": "get_random_crop_bounds",
      "default_value": null,
      "usage_pattern": "length_check",
      "validation_code": "",
      "transformation_code": "get_random_crop_bounds(image_dimensions, crop_dimensions) | len(image_dimensions)",
      "error_handling": "",
      "documentation": "image_dimensions : tuple of int"
    },
    {
      "arg_name": "crop_dimensions",
      "function": "get_random_crop_bounds",
      "default_value": null,
      "usage_pattern": "length_check",
      "validation_code": "image\n        >>> crop_dimensions | video\n        >>> crop_dimensions",
      "transformation_code": "crop_dimensions = crop_height, crop_width = 50, 80 | crop_dimensions = crop_height, crop_width, crop_time = 120, 200, 50 | get_random_crop_bounds(image_dimensions, crop_dimensions) | len(crop_dimensions)",
      "error_handling": "",
      "documentation": "crop_dimensions : tuple of int"
    },
    {
      "arg_name": "image_dimensions",
      "function": "get_center_crop_bounds",
      "default_value": null,
      "usage_pattern": "length_check",
      "validation_code": "",
      "transformation_code": "get_center_crop_bounds(image_dimensions, crop_dimensions) | get_center_crop_bounds(\n        >>>         get_image_dimensions(image)",
      "error_handling": "",
      "documentation": "image_dimensions : tuple of int"
    },
    {
      "arg_name": "crop_dimensions",
      "function": "get_center_crop_bounds",
      "default_value": null,
      "usage_pattern": "length_check",
      "validation_code": "image\n        >>> crop_dimensions | video\n        >>> crop_dimensions",
      "transformation_code": "crop_dimensions = crop_height, crop_width = 50, 80 | crop_dimensions = crop_height, crop_width, crop_time = 120, 200, 50 | get_center_crop_bounds(image_dimensions, crop_dimensions) | len(crop_dimensions)",
      "error_handling": "",
      "documentation": "crop_dimensions : tuple of int"
    },
    {
      "arg_name": "video",
      "function": "trim_video",
      "default_value": null,
      "usage_pattern": "indexing,length_check,type_check",
      "validation_code": "assert length >= 0, 'Cannot trim a video to a negative length' | assert is_numpy_array(video) or isinstance(video, list), 'Only list-videos and numpy-videos are supported right now' | assert len(video), 'Cannot extend a video with no frames - we need an example frame to determine the width and height'",
      "transformation_code": "trim_video(video, length: int, copy=True, mode='extend') | is_numpy_array(video)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "length",
      "function": "trim_video",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert length >= 0, 'Cannot trim a video to a negative length' | length >= 0 | number_of_extra_frames = length",
      "transformation_code": "trim_video(video, length: int, copy=True, mode='extend')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "copy",
      "function": "trim_video",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "copy=True",
      "transformation_code": "copy=True, mode='extend'): | trim_video(video, length: int, copy=True, mode='extend') | and (not copy)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "mode",
      "function": "trim_video",
      "default_value": "extend",
      "usage_pattern": "equality_check,boolean_condition",
      "validation_code": "assert False, 'Invalid mode: ' + mode",
      "transformation_code": "mode='extend'): | mode == 'zeros': | trim_video(video, length: int, copy=True, mode='extend')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "length",
      "function": "trim_videos",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "trim_videos(*videos, length: int) | trim_video(video, length)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "mode",
      "function": "_trim_videos_to_same_length",
      "default_value": "<max>",
      "usage_pattern": "simple_usage",
      "validation_code": "mode=max | mode = max | mode = min",
      "transformation_code": "mode=max, copy=True): | mode = max, adds blank frames to the end of videos to make sure they're all the same number of frames | _trim_videos_to_same_length(*videos, mode=max, copy=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "copy",
      "function": "_trim_videos_to_same_length",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "copy=True | copy=False",
      "transformation_code": "copy=True): | copy=False, it might return the original tensor without copying | _trim_videos_to_same_length(*videos, mode=max, copy=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "copy",
      "function": "trim_videos_to_max_length",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "copy=True | copy=copy",
      "transformation_code": "copy=True): | copy=copy) | trim_videos_to_max_length(*videos, copy=True) | _trim_videos_to_same_length(*videos, mode=max, copy=copy)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "copy",
      "function": "trim_videos_to_min_length",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "copy=True | copy=copy",
      "transformation_code": "copy=True): | copy=copy) | trim_videos_to_min_length(*videos, copy=True) | _trim_videos_to_same_length(*videos, mode=min, copy=copy)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image_method",
      "function": "_concatenated_videos",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_concatenated_videos(image_method, videos, origin)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "videos",
      "function": "_concatenated_videos",
      "default_value": null,
      "usage_pattern": "iteration",
      "validation_code": "videos = detuple | videos = trim_videos_to_max_length",
      "transformation_code": "videos = detuple(videos) | videos = [video for video in videos if len(video)] | _concatenated_videos(image_method, videos, origin) | detuple(videos)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "origin",
      "function": "_concatenated_videos",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "origin=origin",
      "transformation_code": "origin=origin) for frames in zip(*videos)] | _concatenated_videos(image_method, videos, origin) | image_method(*frames, origin=origin)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "origin",
      "function": "horizontally_concatenated_videos",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "origin=None | origin=origin",
      "transformation_code": "origin=None): | origin=origin) | horizontally_concatenated_videos(*videos, origin=None) | _concatenated_videos(horizontally_concatenated_images, videos, origin=origin)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "origin",
      "function": "vertically_concatenated_videos",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "origin=None | origin=origin",
      "transformation_code": "origin=None): | origin=origin) | vertically_concatenated_videos(*videos, origin=None) | _concatenated_videos(vertically_concatenated_images, videos, origin=origin)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "max_filter",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert mode in {'constant', 'nearest', 'reflect', 'mirror', 'wrap'}, 'r.max_filter: Invalid mode for max-filtering edge-areas of image. mode=' + str(mode)",
      "transformation_code": "max_filter(image, diameter, single_channel: bool=False, mode: str='reflect', shutup: bool=False) | shape(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "diameter",
      "function": "max_filter",
      "default_value": null,
      "usage_pattern": "equality_check,boolean_condition",
      "validation_code": "diameter == 0",
      "transformation_code": "diameter == 0: | max_filter(image, diameter, single_channel: bool=False, mode: str='reflect', shutup: bool=False) | flat_circle_kernel(diameter)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "single_channel",
      "function": "max_filter",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "max_filter(image, diameter, single_channel: bool=False, mode: str='reflect', shutup: bool=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "mode",
      "function": "max_filter",
      "default_value": "reflect",
      "usage_pattern": "method_call",
      "validation_code": "assert mode in {'constant', 'nearest', 'reflect', 'mirror', 'wrap'}, 'r.max_filter: Invalid mode for max-filtering edge-areas of image. mode=' + str(mode) | mode = mode.lower | mode=mode",
      "transformation_code": "mode = mode.lower() | mode=' + str(mode) | max_filter(image, diameter, single_channel: bool=False, mode: str='reflect', shutup: bool=False) | str(mode)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "shutup",
      "function": "max_filter",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "max_filter(image, diameter, single_channel: bool=False, mode: str='reflect', shutup: bool=False) | and (not shutup)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "min_filter",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert mode in {'constant', 'nearest', 'reflect', 'mir3ror', 'wrap'}, 'r.min_filter: Invalid mode for min-filtering edge-areas of image. mode=' + str(mode)",
      "transformation_code": "min_filter(image, diameter, single_channel: bool=False, mode: str='reflect', shutup: bool=False) | shape(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "diameter",
      "function": "min_filter",
      "default_value": null,
      "usage_pattern": "equality_check,boolean_condition",
      "validation_code": "diameter == 0",
      "transformation_code": "diameter == 0: | min_filter(image, diameter, single_channel: bool=False, mode: str='reflect', shutup: bool=False) | flat_circle_kernel(diameter)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "single_channel",
      "function": "min_filter",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "min_filter(image, diameter, single_channel: bool=False, mode: str='reflect', shutup: bool=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "mode",
      "function": "min_filter",
      "default_value": "reflect",
      "usage_pattern": "method_call",
      "validation_code": "assert mode in {'constant', 'nearest', 'reflect', 'mir3ror', 'wrap'}, 'r.min_filter: Invalid mode for min-filtering edge-areas of image. mode=' + str(mode) | mode = mode.lower | mode=mode",
      "transformation_code": "mode = mode.lower() | mode=' + str(mode) | min_filter(image, diameter, single_channel: bool=False, mode: str='reflect', shutup: bool=False) | str(mode)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "shutup",
      "function": "min_filter",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "min_filter(image, diameter, single_channel: bool=False, mode: str='reflect', shutup: bool=False) | and (not shutup)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "med_filter",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert mode in {'constant', 'nearest', 'reflect', 'mirror', 'wrap'}, 'r.med_filter: Invalid mode for med-filtering edge-areas of image. mode=' + str(mode)",
      "transformation_code": "med_filter(image, diameter, single_channel: bool=False, mode: str='reflect', shutup: bool=False) | shape(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "diameter",
      "function": "med_filter",
      "default_value": null,
      "usage_pattern": "equality_check,boolean_condition",
      "validation_code": "diameter == 0",
      "transformation_code": "diameter == 0: | med_filter(image, diameter, single_channel: bool=False, mode: str='reflect', shutup: bool=False) | flat_circle_kernel(diameter)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "single_channel",
      "function": "med_filter",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "med_filter(image, diameter, single_channel: bool=False, mode: str='reflect', shutup: bool=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "mode",
      "function": "med_filter",
      "default_value": "reflect",
      "usage_pattern": "method_call",
      "validation_code": "assert mode in {'constant', 'nearest', 'reflect', 'mirror', 'wrap'}, 'r.med_filter: Invalid mode for med-filtering edge-areas of image. mode=' + str(mode) | mode = mode.lower | mode=mode",
      "transformation_code": "mode = mode.lower() | mode=' + str(mode) | med_filter(image, diameter, single_channel: bool=False, mode: str='reflect', shutup: bool=False) | str(mode)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "shutup",
      "function": "med_filter",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "med_filter(image, diameter, single_channel: bool=False, mode: str='reflect', shutup: bool=False) | and (not shutup)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "range_filter",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "range_filter(image, diameter, single_channel: bool=False, mode: str='reflect', shutup: bool=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "diameter",
      "function": "range_filter",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "range_filter(image, diameter, single_channel: bool=False, mode: str='reflect', shutup: bool=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "single_channel",
      "function": "range_filter",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "range_filter(image, diameter, single_channel: bool=False, mode: str='reflect', shutup: bool=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "mode",
      "function": "range_filter",
      "default_value": "reflect",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "range_filter(image, diameter, single_channel: bool=False, mode: str='reflect', shutup: bool=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "shutup",
      "function": "range_filter",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "range_filter(image, diameter, single_channel: bool=False, mode: str='reflect', shutup: bool=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "width",
      "function": "grid2d",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "grid2d(width: int, height: int, f\u11a2row\u02cfcolumn=lambda r, c: None) | deepcopy_multiply([[[None]] * height], width)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "height",
      "function": "grid2d",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "grid2d(width: int, height: int, f\u11a2row\u02cfcolumn=lambda r, c: None) | deepcopy_multiply([[[None]] * height], width)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "f\u11a2row\u02cfcolumn",
      "function": "grid2d",
      "default_value": "lambda r, c: None",
      "usage_pattern": "simple_usage",
      "validation_code": "f\u11a2row\u02cfcolumn=lambda",
      "transformation_code": "f\u11a2row\u02cfcolumn=lambda r, c: None) -> list: | grid2d(width: int, height: int, f\u11a2row\u02cfcolumn=lambda r, c: None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "grid2d_input",
      "function": "grid2d_map",
      "default_value": null,
      "usage_pattern": "indexing",
      "validation_code": "",
      "transformation_code": "grid2d_map(grid2d_input, value_func=identity) | grid2d(width(grid2d_input)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "value_func",
      "function": "grid2d_map",
      "default_value": "<identity>",
      "usage_pattern": "simple_usage",
      "validation_code": "value_func=identity",
      "transformation_code": "value_func=identity) -> list: | grid2d_map(grid2d_input, value_func=identity)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "resize_func",
      "function": "_auto_interp_for_resize_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "out = resize_func | out = resize_func | out = resize_func",
      "transformation_code": "_auto_interp_for_resize_image(resize_func, image, new_size)",
      "error_handling": "",
      "documentation": "resize_func: is expected to be an image resizing function from rp, such as rp.resize_image, rp.cv_resize_image or rp.torch_resize_image"
    },
    {
      "arg_name": "image",
      "function": "_auto_interp_for_resize_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "image = cv_resize_image | image = resize_image | image = crop_image",
      "transformation_code": "image = cv_resize_image(c, (new_height, new_width), interp=interp) | image = resize_image(c, (new_height, new_width), interp=interp) | _auto_interp_for_resize_image(resize_func, image, new_size) | crop_image(resized_image, height=300, width=300)",
      "error_handling": "",
      "documentation": "image      : should be an image type compatible with rp.get_image_dimensions and the given resize_func"
    },
    {
      "arg_name": "new_size",
      "function": "_auto_interp_for_resize_image",
      "default_value": null,
      "usage_pattern": "length_check,iteration,type_check",
      "validation_code": "assert isinstance(new_size, tuple) and len(new_size) == 2 and all((isinstance(x, int) for x in new_size)) | isinstance(new_size, tuple)",
      "transformation_code": "_auto_interp_for_resize_image(resize_func, image, new_size) | isinstance(new_size, tuple)",
      "error_handling": "",
      "documentation": "new_size   : is expected to be a tuple containing two integers (height, width)"
    },
    {
      "arg_name": "image",
      "function": "_resize_image_via_skimage",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert is_image(image)",
      "transformation_code": "_resize_image_via_skimage(image, scale, interp='bilinear') | is_image(image)",
      "error_handling": "",
      "documentation": "image (slower but handles more cases)."
    },
    {
      "arg_name": "scale",
      "function": "_resize_image_via_skimage",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "isinstance(scale, tuple)",
      "transformation_code": "_resize_image_via_skimage(image, scale, interp='bilinear') | isinstance(scale, tuple)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "interp",
      "function": "_resize_image_via_skimage",
      "default_value": "bilinear",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "interp='bilinear'): | _resize_image_via_skimage(image, scale, interp='bilinear')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "resize_image",
      "default_value": null,
      "usage_pattern": "indexing,length_check",
      "validation_code": "",
      "transformation_code": "resize_image(image, scale, interp='bilinear') | cv_resize_image(image, scale, interp)",
      "error_handling": "try_except",
      "documentation": "image: a numpy array, preferably. But it can also handle pure-python list-of-lists if that fails."
    },
    {
      "arg_name": "scale",
      "function": "resize_image",
      "default_value": null,
      "usage_pattern": "equality_check,boolean_condition",
      "validation_code": "scale == 1",
      "transformation_code": "scale == 1: | resize_image(image, scale, interp='bilinear') | cv_resize_image(image, scale, interp)",
      "error_handling": "try_except",
      "documentation": "scale: can either be a scalar (get it? for SCALE? lol ok yeah that died quickly) or a tuple of integers to specify the new dimensions we want like (128,128)"
    },
    {
      "arg_name": "interp",
      "function": "resize_image",
      "default_value": "bilinear",
      "usage_pattern": "equality_check,boolean_condition",
      "validation_code": "assert interp in {'nearest', 'bilinear', 'bicubic'} | arrays! interp",
      "transformation_code": "interp='bilinear'): | interp == 'auto': | resize_image(image, scale, interp='bilinear') | cv_resize_image(image, scale, interp)",
      "error_handling": "try_except",
      "documentation": "interp: ONLY APPLIES FOR numpy arrays! interp \u2208 {'auto','nearest','bilinear','bicubic','cubic'}"
    },
    {
      "arg_name": "height",
      "function": "xy_float_images",
      "default_value": 256,
      "usage_pattern": "simple_usage",
      "validation_code": "height=256 | height=256 | num=height",
      "transformation_code": "height=256, width=256, *, min_x=0, max_x=1, min_y=0, max_y=1): | height=256,width=256) - 1 | xy_float_images(height=256, width=256, *, min_x=0, max_x=1, min_y=0, max_y=1) | shape (2, height, width)",
      "error_handling": "",
      "documentation": "height (int)"
    },
    {
      "arg_name": "width",
      "function": "xy_float_images",
      "default_value": 256,
      "usage_pattern": "simple_usage",
      "validation_code": "width=256 | width=256 | num=width",
      "transformation_code": "width=256, *, min_x=0, max_x=1, min_y=0, max_y=1): | width=256) - 1 | xy_float_images(height=256, width=256, *, min_x=0, max_x=1, min_y=0, max_y=1) | shape (2, height, width)",
      "error_handling": "",
      "documentation": "width (int)"
    },
    {
      "arg_name": "min_x",
      "function": "xy_float_images",
      "default_value": 0,
      "usage_pattern": "simple_usage",
      "validation_code": "min_x=0",
      "transformation_code": "min_x=0, max_x=1, min_y=0, max_y=1): | xy_float_images(height=256, width=256, *, min_x=0, max_x=1, min_y=0, max_y=1) | meshgrid(np.linspace(min_x, max_x, num=width)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "max_x",
      "function": "xy_float_images",
      "default_value": 1,
      "usage_pattern": "simple_usage",
      "validation_code": "max_x=1",
      "transformation_code": "max_x=1, min_y=0, max_y=1): | xy_float_images(height=256, width=256, *, min_x=0, max_x=1, min_y=0, max_y=1) | meshgrid(np.linspace(min_x, max_x, num=width)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "min_y",
      "function": "xy_float_images",
      "default_value": 0,
      "usage_pattern": "simple_usage",
      "validation_code": "min_y=0",
      "transformation_code": "min_y=0, max_y=1): | xy_float_images(height=256, width=256, *, min_x=0, max_x=1, min_y=0, max_y=1) | linspace(min_y, max_y, num=height)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "max_y",
      "function": "xy_float_images",
      "default_value": 1,
      "usage_pattern": "simple_usage",
      "validation_code": "max_y=1",
      "transformation_code": "max_y=1): | xy_float_images(height=256, width=256, *, min_x=0, max_x=1, min_y=0, max_y=1) | linspace(min_y, max_y, num=height)",
      "error_handling": "",
      "documentation": "max_y (float, optional)"
    },
    {
      "arg_name": "height",
      "function": "xy_torch_matrices",
      "default_value": 256,
      "usage_pattern": "simple_usage",
      "validation_code": "height=256 | height=256",
      "transformation_code": "height=256, width=256, *, dtype=None, device=None, min_x=0, max_x=1, min_y=0, max_y=1, use_cache=False): | height=256,width=256) - 1 | xy_torch_matrices(height=256, width=256, *, dtype=None, device=None, min_x=0, max_x=1, min_y=0, max_y=1, use_cache=False) | shape (2, height, width)",
      "error_handling": "",
      "documentation": "height (int)"
    },
    {
      "arg_name": "width",
      "function": "xy_torch_matrices",
      "default_value": 256,
      "usage_pattern": "simple_usage",
      "validation_code": "width=256 | width=256",
      "transformation_code": "width=256, *, dtype=None, device=None, min_x=0, max_x=1, min_y=0, max_y=1, use_cache=False): | width=256) - 1 | xy_torch_matrices(height=256, width=256, *, dtype=None, device=None, min_x=0, max_x=1, min_y=0, max_y=1, use_cache=False) | shape (2, height, width)",
      "error_handling": "",
      "documentation": "width (int)"
    },
    {
      "arg_name": "dtype",
      "function": "xy_torch_matrices",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "dtype=None | dtype = torch.float32 | dtype=dtype",
      "transformation_code": "dtype=None, device=None, min_x=0, max_x=1, min_y=0, max_y=1, use_cache=False): | dtype = torch.float32 | xy_torch_matrices(height=256, width=256, *, dtype=None, device=None, min_x=0, max_x=1, min_y=0, max_y=1, use_cache=False) | dtype (torch.dtype, optional)",
      "error_handling": "",
      "documentation": "dtype (torch.dtype, optional)"
    },
    {
      "arg_name": "device",
      "function": "xy_torch_matrices",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "device=None | device=device | device=device",
      "transformation_code": "device=None, min_x=0, max_x=1, min_y=0, max_y=1, use_cache=False): | device = 'cpu' | xy_torch_matrices(height=256, width=256, *, dtype=None, device=None, min_x=0, max_x=1, min_y=0, max_y=1, use_cache=False) | device (torch.device, optional)",
      "error_handling": "",
      "documentation": "device (torch.device, optional)"
    },
    {
      "arg_name": "min_x",
      "function": "xy_torch_matrices",
      "default_value": 0,
      "usage_pattern": "simple_usage",
      "validation_code": "min_x=0",
      "transformation_code": "min_x=0, max_x=1, min_y=0, max_y=1, use_cache=False): | xy_torch_matrices(height=256, width=256, *, dtype=None, device=None, min_x=0, max_x=1, min_y=0, max_y=1, use_cache=False) | gather_vars('height width dtype device min_x max_x min_y max_y')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "max_x",
      "function": "xy_torch_matrices",
      "default_value": 1,
      "usage_pattern": "simple_usage",
      "validation_code": "max_x=1",
      "transformation_code": "max_x=1, min_y=0, max_y=1, use_cache=False): | xy_torch_matrices(height=256, width=256, *, dtype=None, device=None, min_x=0, max_x=1, min_y=0, max_y=1, use_cache=False) | gather_vars('height width dtype device min_x max_x min_y max_y')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "min_y",
      "function": "xy_torch_matrices",
      "default_value": 0,
      "usage_pattern": "simple_usage",
      "validation_code": "min_y=0",
      "transformation_code": "min_y=0, max_y=1, use_cache=False): | xy_torch_matrices(height=256, width=256, *, dtype=None, device=None, min_x=0, max_x=1, min_y=0, max_y=1, use_cache=False) | gather_vars('height width dtype device min_x max_x min_y max_y')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "max_y",
      "function": "xy_torch_matrices",
      "default_value": 1,
      "usage_pattern": "simple_usage",
      "validation_code": "max_y=1",
      "transformation_code": "max_y=1, use_cache=False): | xy_torch_matrices(height=256, width=256, *, dtype=None, device=None, min_x=0, max_x=1, min_y=0, max_y=1, use_cache=False) | gather_vars('height width dtype device min_x max_x min_y max_y')",
      "error_handling": "",
      "documentation": "max_y (float, optional)"
    },
    {
      "arg_name": "use_cache",
      "function": "xy_torch_matrices",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "use_cache=False",
      "transformation_code": "use_cache=False): | xy_torch_matrices(height=256, width=256, *, dtype=None, device=None, min_x=0, max_x=1, min_y=0, max_y=1, use_cache=False)",
      "error_handling": "",
      "documentation": "use_cache: Useful when bottlenecked by excessive CPU/GPU transfers (seeing a lot of Tensor.to's in the profiler)"
    },
    {
      "arg_name": "x",
      "function": "_is_instance_of_module_class",
      "default_value": null,
      "usage_pattern": "boolean_condition,type_check",
      "validation_code": "isinstance(x, class_)",
      "transformation_code": "_is_instance_of_module_class(x, module_name: str, class_name: str) | _is_instance_of_module_class(x,     'numpy',     'ndarray'  )",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "module_name",
      "function": "_is_instance_of_module_class",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "",
      "transformation_code": "_is_instance_of_module_class(x, module_name: str, class_name: str) | module (specified by 'module_name')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "class_name",
      "function": "_is_instance_of_module_class",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_is_instance_of_module_class(x, module_name: str, class_name: str) | class (specified by 'class_name')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "is_numpy_array",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "is_numpy_array(x) | _is_instance_of_module_class(x, 'numpy', 'ndarray')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "is_torch_tensor",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "is_torch_tensor(x) | _is_instance_of_module_class(x, 'torch', 'Tensor')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "is_torch_image",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "",
      "transformation_code": "is_torch_image(image) | is_torch_tensor(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "is_torch_module",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "is_torch_module(x) | _is_instance_of_module_class(x, 'torch.nn', 'Module')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "_is_pandas_dataframe",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_is_pandas_dataframe(x) | _is_instance_of_module_class(x, 'pandas', 'DataFrame')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "_is_pandas_series",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_is_pandas_series(x) | _is_instance_of_module_class(x, 'pandas', 'Series')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "_is_pandas_iloc_iterable",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_is_pandas_iloc_iterable(x) | _is_pandas_series(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "is_pil_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "is_pil_image(image) | _is_instance_of_module_class(image, 'PIL.Image', 'Image')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "_is_skia_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_is_skia_image(image) | _is_instance_of_module_class(image, 'skia', 'Image')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "_is_easydict",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_is_easydict(x) | _is_instance_of_module_class(x, 'easydict', 'EasyDict')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "arr_or_len",
      "function": "random_index",
      "default_value": null,
      "usage_pattern": "method_call,length_check,type_check",
      "validation_code": "assert arr_or_len != 0, 'Array length cannot be zero.' | isinstance(arr_or_len, dict) | isinstance(arr_or_len, int)",
      "transformation_code": "random_index(arr_or_len) | isinstance(arr_or_len, dict)",
      "error_handling": "",
      "documentation": "arr_or_len: The array, array length, or dict-like object."
    },
    {
      "arg_name": "x",
      "function": "random_element",
      "default_value": null,
      "usage_pattern": "indexing,method_call,length_check,type_check",
      "validation_code": "assert is_iterable(x) | isinstance(x,dict) | isinstance(x,set)",
      "transformation_code": "x=list(x) | x = random_index(x) | random_element(x) | random_element(x)",
      "error_handling": "",
      "documentation": "x (iterable or Mapping or Set)"
    },
    {
      "arg_name": "n",
      "function": "random_permutation",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "random_permutation(n) | integer (as a length)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "permutation",
      "function": "is_a_permutation",
      "default_value": null,
      "usage_pattern": "length_check",
      "validation_code": "",
      "transformation_code": "is_a_permutation(permutation) | len(permutation)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "permutation",
      "function": "inverse_permutation",
      "default_value": null,
      "usage_pattern": "length_check",
      "validation_code": "assert is_a_permutation(permutation)",
      "transformation_code": "inverse_permutation(permutation) | gather(p,inverse_permutation(p)",
      "error_handling": "",
      "documentation": "permutation(100)"
    },
    {
      "arg_name": "a_inclusive",
      "function": "randint",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "randint(a_inclusive, b_inclusive=0) | randint(min([a_inclusive, b_inclusive])",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "b_inclusive",
      "function": "randint",
      "default_value": 0,
      "usage_pattern": "simple_usage",
      "validation_code": "b_inclusive=0",
      "transformation_code": "b_inclusive=0): | randint(a_inclusive, b_inclusive=0) | randint(min([a_inclusive, b_inclusive])",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "N",
      "function": "randints",
      "default_value": null,
      "usage_pattern": "equality_check",
      "validation_code": "assert N >= 0 and N == int(N), 'Cannot have a non-counting-number length: N=' + repr(N) | N >= 0 | N == int",
      "transformation_code": "N == int(N), 'Cannot have a non-counting-number length: N=' + repr(N) | randints(N, a_inclusive=99, b_inclusive=0) | int(N)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "a_inclusive",
      "function": "randints",
      "default_value": 99,
      "usage_pattern": "simple_usage",
      "validation_code": "a_inclusive=99",
      "transformation_code": "a_inclusive=99, b_inclusive=0): | randints(N, a_inclusive=99, b_inclusive=0) | randint(a_inclusive, b_inclusive)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "b_inclusive",
      "function": "randints",
      "default_value": 0,
      "usage_pattern": "simple_usage",
      "validation_code": "b_inclusive=0",
      "transformation_code": "b_inclusive=0): | randints(N, a_inclusive=99, b_inclusive=0) | randint(a_inclusive, b_inclusive)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "exclusive_max",
      "function": "random_float",
      "default_value": 1,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "random_float(exclusive_max: float=1, inclusive_min=0) | sorted([inclusive_min, exclusive_max])",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "inclusive_min",
      "function": "random_float",
      "default_value": 0,
      "usage_pattern": "simple_usage",
      "validation_code": "inclusive_min=0",
      "transformation_code": "inclusive_min=0) -> float: | random_float(exclusive_max: float=1, inclusive_min=0) | sorted([inclusive_min, exclusive_max])",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "exclusive_max",
      "function": "random_float_complex",
      "default_value": 1,
      "usage_pattern": "simple_usage",
      "validation_code": "exclusive_max=exclusive_max | exclusive_max=exclusive_max",
      "transformation_code": "exclusive_max=exclusive_max, inclusive_min=inclusive_min) + 1j * random_float(exclusive_max=exclusive_max, inclusive_min=inclusive_min) | random_float_complex(exclusive_max: float=1, inclusive_min=0) | random_float(exclusive_max=exclusive_max, inclusive_min=inclusive_min)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "inclusive_min",
      "function": "random_float_complex",
      "default_value": 0,
      "usage_pattern": "simple_usage",
      "validation_code": "inclusive_min=0 | inclusive_min=inclusive_min | inclusive_min=inclusive_min",
      "transformation_code": "inclusive_min=0) -> float: | inclusive_min=inclusive_min) + 1j * random_float(exclusive_max=exclusive_max, inclusive_min=inclusive_min) | random_float_complex(exclusive_max: float=1, inclusive_min=0) | random_float(exclusive_max=exclusive_max, inclusive_min=inclusive_min)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "N",
      "function": "random_floats",
      "default_value": null,
      "usage_pattern": "equality_check",
      "validation_code": "assert N >= 0 and N == int(N), 'Cannot have a non-counting-number length: N=' + repr(N) | N >= 0 | N == int",
      "transformation_code": "N == int(N), 'Cannot have a non-counting-number length: N=' + repr(N) | random_floats(N, exclusive_max=1, inclusive_min=0) | int(N)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "exclusive_max",
      "function": "random_floats",
      "default_value": 1,
      "usage_pattern": "simple_usage",
      "validation_code": "exclusive_max=1",
      "transformation_code": "exclusive_max=1, inclusive_min=0): | random_floats(N, exclusive_max=1, inclusive_min=0) | sorted([inclusive_min, exclusive_max])",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "inclusive_min",
      "function": "random_floats",
      "default_value": 0,
      "usage_pattern": "simple_usage",
      "validation_code": "inclusive_min=0",
      "transformation_code": "inclusive_min=0): | random_floats(N, exclusive_max=1, inclusive_min=0) | sorted([inclusive_min, exclusive_max])",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "probability",
      "function": "random_chance",
      "default_value": 0.5,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "random_chance(probability: float=0.5)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "full_list",
      "function": "random_batch",
      "default_value": null,
      "usage_pattern": "indexing,length_check,type_check",
      "validation_code": "assert 0 <= batch_size <= len(full_list), 'batch_size must be between 0 and the number of rows in the DataFrame' | assert 0 <= batch_size <= len(full_list), 'batch_size == ' + str(batch_size) + ' \u22c0 len(full_list) == ' + str(len(full_list)) + '\uff0c\u2234  \u00ac (0 <= batch_size <= len\ufe59full_list\ufe5a)   Explanation: We do not allow duplicates, \u2234 we cannot generate a larger batch than we have elements to choose from full_list' | assert 0 <= batch_size <= len(full_list), 'batch_size == ' + str(batch_size) + ' \u22c0 len(full_list) == ' + str(len(full_list)) + '\uff0c\u2234  \u00ac (0 <= batch_size <= len\ufe59full_list\ufe5a)   Explanation: We do not allow duplicates, \u2234 we cannot generate a larger batch than we have elements to choose from full_list'",
      "transformation_code": "full_list = list(full_list) | random_batch(full_list, batch_size: int=None, *, retain_order: bool=False) | _is_pandas_dataframe(full_list)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "batch_size",
      "function": "random_batch",
      "default_value": null,
      "usage_pattern": "equality_check,boolean_condition,none_check",
      "validation_code": "assert 0 <= batch_size <= len(full_list), 'batch_size must be between 0 and the number of rows in the DataFrame' | assert 0 <= batch_size <= len(full_list), 'batch_size == ' + str(batch_size) + ' \u22c0 len(full_list) == ' + str(len(full_list)) + '\uff0c\u2234  \u00ac (0 <= batch_size <= len\ufe59full_list\ufe5a)   Explanation: We do not allow duplicates, \u2234 we cannot generate a larger batch than we have elements to choose from full_list' | assert 0 <= batch_size <= len(full_list), 'batch_size == ' + str(batch_size) + ' \u22c0 len(full_list) == ' + str(len(full_list)) + '\uff0c\u2234  \u00ac (0 <= batch_size <= len\ufe59full_list\ufe5a)   Explanation: We do not allow duplicates, \u2234 we cannot generate a larger batch than we have elements to choose from full_list'",
      "transformation_code": "batch_size = len(full_list) | batch_size=batch_size, retain_order=retain_order) | random_batch(full_list, batch_size: int=None, *, retain_order: bool=False) | random_batch(keys, batch_size=batch_size, retain_order=retain_order)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "retain_order",
      "function": "random_batch",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "retain_order=True | retain_order=True | retain_order=True",
      "transformation_code": "retain_order=True) --> {3: 4, 5: 6, 7: 8} | retain_order=True) --> {1: 2, 5: 6, 7: 8} | random_batch(full_list, batch_size: int=None, *, retain_order: bool=False) | random_batch({1:2,3:4,5:6,7:8},3,retain_order=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "full_list",
      "function": "random_batch_up_to",
      "default_value": null,
      "usage_pattern": "length_check",
      "validation_code": "",
      "transformation_code": "random_batch_up_to(full_list, max_batch_size=None, retain_order=False) | len(full_list)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "max_batch_size",
      "function": "random_batch_up_to",
      "default_value": null,
      "usage_pattern": "boolean_condition,type_check",
      "validation_code": "assert isinstance(max_batch_size, int) | isinstance(max_batch_size, int) | max_batch_size=None",
      "transformation_code": "max_batch_size=None, retain_order=False): | random_batch_up_to(full_list, max_batch_size=None, retain_order=False) | isinstance(max_batch_size, int)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "retain_order",
      "function": "random_batch_up_to",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "retain_order=False | retain_order=retain_order",
      "transformation_code": "retain_order=False): | retain_order=retain_order) | random_batch_up_to(full_list, max_batch_size=None, retain_order=False) | random_batch(full_list, batch_size, retain_order=retain_order)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "full_list",
      "function": "random_batch_with_replacement",
      "default_value": null,
      "usage_pattern": "length_check",
      "validation_code": "assert len(full_list) > 0 | full_list = list",
      "transformation_code": "full_list = list(full_list) | random_batch_with_replacement(full_list, batch_size: int=None, method: str='balanced') | len(full_list)",
      "error_handling": "",
      "documentation": "full_list: The list to sample from."
    },
    {
      "arg_name": "batch_size",
      "function": "random_batch_with_replacement",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert batch_size >= 0 | batch_size >= 0 | repeats = batch_size",
      "transformation_code": "random_batch_with_replacement(full_list, batch_size: int=None, method: str='balanced') | range(batch_size)",
      "error_handling": "",
      "documentation": "batch_size: The desired size of the output batch."
    },
    {
      "arg_name": "method",
      "function": "random_batch_with_replacement",
      "default_value": "balanced",
      "usage_pattern": "equality_check,boolean_condition",
      "validation_code": "",
      "transformation_code": "method=\"balanced\") | method=\"balanced\") | random_batch_with_replacement(full_list, batch_size: int=None, method: str='balanced') | random_batch_with_replacement([1, 2, 3], 10, method=\"balanced\")",
      "error_handling": "",
      "documentation": "method: The sampling method to use. Defaults to \"balanced\"."
    },
    {
      "arg_name": "string",
      "function": "random_substring",
      "default_value": null,
      "usage_pattern": "indexing,length_check",
      "validation_code": "assert len(string) >= length",
      "transformation_code": "random_substring(string: str, length: int=None) | random_int(0, len(string)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "length",
      "function": "random_substring",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check,addition",
      "validation_code": "assert len(string) >= length | assert length >= 0 | length = random_int",
      "transformation_code": "length = random_int(0, len(string)) | random_substring(string: str, length: int=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "l",
      "function": "shuffled",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "isinstance(l, str)",
      "transformation_code": "shuffled(l) | isinstance(l, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "batch_size",
      "function": "random_parallel_batch",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "batch_size=batch_size",
      "transformation_code": "batch_size=batch_size, retain_order=retain_order) | random_parallel_batch(*full_lists, batch_size: int=None, retain_order: bool=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "retain_order",
      "function": "random_parallel_batch",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "retain_order=retain_order",
      "transformation_code": "retain_order=retain_order) | random_parallel_batch(*full_lists, batch_size: int=None, retain_order: bool=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "seed",
      "function": "temporary_random_seed",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "seed=None | seed=99",
      "transformation_code": "seed=None): | seed=99): | temporary_random_seed(seed=None) | temporary_random_seed(seed=99)",
      "error_handling": "",
      "documentation": "seed (int, optional)"
    },
    {
      "arg_name": "seed",
      "function": "temporary_numpy_random_seed",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "seed=None | seed=99",
      "transformation_code": "seed=None): | seed=99): | temporary_numpy_random_seed(seed=None) | temporary_numpy_random_seed(seed=99)",
      "error_handling": "",
      "documentation": "seed (int, optional)"
    },
    {
      "arg_name": "seed",
      "function": "temporary_torch_random_seed",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "seed=None | seed=99",
      "transformation_code": "seed=None): | seed=99): | temporary_torch_random_seed(seed=None) | temporary_torch_random_seed(seed=99)",
      "error_handling": "",
      "documentation": "seed (int, optional)"
    },
    {
      "arg_name": "seed",
      "function": "seed_all",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "seed=None",
      "transformation_code": "seed=None): | seed_all(seed=None) | seed(seed)",
      "error_handling": "try_except",
      "documentation": "seed (int, optional)"
    },
    {
      "arg_name": "seed",
      "function": "temporary_seed_all",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "seed=None | seed=seed | seed=seed",
      "transformation_code": "seed=None): | seed=seed)] | temporary_seed_all(seed=None) | temporary_random_seed(seed=seed)",
      "error_handling": "try_except",
      "documentation": "seed (int, optional)"
    },
    {
      "arg_name": "func",
      "function": "run_as_new_thread",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "target=func",
      "transformation_code": "run_as_new_thread(func, *args, **kwargs) | new_thread(target=func, args=args, kwargs=kwargs)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "func",
      "function": "run_as_new_process",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "target=func",
      "transformation_code": "run_as_new_process(func, *args, **kwargs) | Process(target=func, args=args, kwargs=kwargs)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "url",
      "function": "is_valid_url",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "isinstance(url, str) | result = url",
      "transformation_code": "is_valid_url(url: str) | isinstance(url, str)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "load_file",
      "function": "load_files",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "load_files(load_file, file_paths, *, num_threads: int=None, show_progress=False, strict=True, lazy=False, buffer_limit=None) | _load_files(load_file, file_paths, num_threads, show_progress, strict, buffer_limit)",
      "error_handling": "",
      "documentation": "load_file (function)"
    },
    {
      "arg_name": "file_paths",
      "function": "load_files",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "load_files(load_file, file_paths, *, num_threads: int=None, show_progress=False, strict=True, lazy=False, buffer_limit=None) | _load_files(load_file, file_paths, num_threads, show_progress, strict, buffer_limit)",
      "error_handling": "",
      "documentation": "file_paths (iterable)"
    },
    {
      "arg_name": "num_threads",
      "function": "load_files",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "load_files(load_file, file_paths, *, num_threads: int=None, show_progress=False, strict=True, lazy=False, buffer_limit=None) | _load_files(load_file, file_paths, num_threads, show_progress, strict, buffer_limit)",
      "error_handling": "",
      "documentation": "num_threads (int, optional)"
    },
    {
      "arg_name": "show_progress",
      "function": "load_files",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "show_progress=False",
      "transformation_code": "show_progress=False, strict=True, lazy=False, buffer_limit=None): | load_files(load_file, file_paths, *, num_threads: int=None, show_progress=False, strict=True, lazy=False, buffer_limit=None) | _load_files(load_file, file_paths, num_threads, show_progress, strict, buffer_limit)",
      "error_handling": "",
      "documentation": "show_progress (True, False, 'eta' or 'tqdm')"
    },
    {
      "arg_name": "strict",
      "function": "load_files",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "strict=True",
      "transformation_code": "strict=True, lazy=False, buffer_limit=None): | load_files(load_file, file_paths, *, num_threads: int=None, show_progress=False, strict=True, lazy=False, buffer_limit=None) | _load_files(load_file, file_paths, num_threads, show_progress, strict, buffer_limit)",
      "error_handling": "",
      "documentation": "strict (True, False, or None)"
    },
    {
      "arg_name": "lazy",
      "function": "load_files",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "lazy=False",
      "transformation_code": "lazy=False, buffer_limit=None): | load_files(load_file, file_paths, *, num_threads: int=None, show_progress=False, strict=True, lazy=False, buffer_limit=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "buffer_limit",
      "function": "load_files",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "buffer_limit=None",
      "transformation_code": "buffer_limit=None): | load_files(load_file, file_paths, *, num_threads: int=None, show_progress=False, strict=True, lazy=False, buffer_limit=None) | _load_files(load_file, file_paths, num_threads, show_progress, strict, buffer_limit)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "load_file",
      "function": "_load_files",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert callable(load_file), 'rp.load_files: load_file must be a function that takes a file path and returns a value, but type(load_file) is ' + str(type(load_file)) | content = load_file",
      "transformation_code": "_load_files(load_file, file_paths, num_threads: int=None, show_progress=False, strict=True, buffer_limit=None) | callable(load_file)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "file_paths",
      "function": "_load_files",
      "default_value": null,
      "usage_pattern": "length_check",
      "validation_code": "assert is_iterable(file_paths), 'rp.load_files: file_paths must be iterable, but type(file_paths) is ' + str(type(file_paths)) | assert hasattr(file_paths, '__len__'), 'Cannot show progress because file_paths doesnt have a length' | file_paths = list",
      "transformation_code": "file_paths = list(file_paths) | _load_files(load_file, file_paths, num_threads: int=None, show_progress=False, strict=True, buffer_limit=None) | is_iterable(file_paths)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "num_threads",
      "function": "_load_files",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check,type_check",
      "validation_code": "assert num_threads is None or (isinstance(num_threads, int) and num_threads >= 0), 'Must have at least 1 thread, or set num_threads=0 to run in the main thread only' | isinstance(num_threads, int) | num_threads >= 0",
      "transformation_code": "num_threads=0 to run in the main thread only' | num_threads = 32 | _load_files(load_file, file_paths, num_threads: int=None, show_progress=False, strict=True, buffer_limit=None) | or (isinstance(num_threads, int)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "show_progress",
      "function": "_load_files",
      "default_value": false,
      "usage_pattern": "equality_check,boolean_condition,indexing,method_call,type_check",
      "validation_code": "assert show_progress in {True, False, 'tqdm', 'eta'} or (isinstance(show_progress, str) and starts_with_any(show_progress, 'eta:')), \"The 'show_progress' parameter must be either True, False, or 'tqdm'.\" | isinstance(show_progress, str) | isinstance(show_progress, str)",
      "transformation_code": "show_progress=False, strict=True, buffer_limit=None): | show_progress == 'tqdm': | _load_files(load_file, file_paths, num_threads: int=None, show_progress=False, strict=True, buffer_limit=None) | or (isinstance(show_progress, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "strict",
      "function": "_load_files",
      "default_value": true,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "assert strict is True or strict is False or strict is None, \"The 'strict' parameter must be set to either True, False, or None.\" | assert strict is None | strict=True",
      "transformation_code": "strict=True, buffer_limit=None): | _load_files(load_file, file_paths, num_threads: int=None, show_progress=False, strict=True, buffer_limit=None)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "buffer_limit",
      "function": "_load_files",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "buffer_limit=None | buffer_limit=buffer_limit",
      "transformation_code": "buffer_limit=None): | buffer_limit=buffer_limit)) | _load_files(load_file, file_paths, num_threads: int=None, show_progress=False, strict=True, buffer_limit=None) | skip_filter(lazy_par_map(_load_file, file_paths, num_threads=num_threads, buffer_limit=buffer_limit)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "location",
      "function": "load_animated_gif",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert file_exists(location), 'No such file exists: ' + repr(location) | location = get_absolute_path",
      "transformation_code": "location = get_absolute_path(location) | load_animated_gif(location, *, use_cache=True) | get_absolute_path(location)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "use_cache",
      "function": "load_animated_gif",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "use_cache=True | use_cache=True",
      "transformation_code": "use_cache=True): | use_cache=True): | load_animated_gif(location, *, use_cache=True) | load_animated_gif(url,use_cache=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "_copy_image_to_clipboard_via_pyjpgclipboard",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "isinstance(image, str) | image = load_image",
      "transformation_code": "image = load_image(image) | _copy_image_to_clipboard_via_pyjpgclipboard(image) | isinstance(image, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "_copy_image_to_clipboard_via_copykitten",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "image = as_rgba_image | image = as_pil_image",
      "transformation_code": "image = as_rgba_image(image) | image = as_pil_image(image) | _copy_image_to_clipboard_via_copykitten(image) | as_rgba_image(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "copy_image_to_clipboard",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "copy_image_to_clipboard(image, *, backend=None) | _copy_image_to_clipboard_via_copykitten(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "backend",
      "function": "copy_image_to_clipboard",
      "default_value": null,
      "usage_pattern": "equality_check,boolean_condition,none_check",
      "validation_code": "backend=None",
      "transformation_code": "backend=None): | backend = 'copykitten' | copy_image_to_clipboard(image, *, backend=None) | ValueError('Invalid backend ' + backend)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "location",
      "function": "load_image",
      "default_value": null,
      "usage_pattern": "equality_check,boolean_condition,type_check",
      "validation_code": "assert isinstance(location, str), 'load_image error: location should be a string representing a URL or file path. However, location is not a string. type(location)==' + repr(type(location)) + ' and location==' + repr(location) | isinstance(location, str) | location = get_absolute_path",
      "transformation_code": "location==' + repr(location) | location = get_absolute_path(location) | load_image(location, *, use_cache=False) | isinstance(location, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "use_cache",
      "function": "load_image",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "use_cache=False",
      "transformation_code": "use_cache=False): | load_image(location, *, use_cache=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "location",
      "function": "load_rgb_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "load_rgb_image(location, *, use_cache=False) | as_rgb_image(load_image(location, use_cache=use_cache)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "use_cache",
      "function": "load_rgb_image",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "use_cache=False | use_cache=use_cache",
      "transformation_code": "use_cache=False): | use_cache=use_cache)) | load_rgb_image(location, *, use_cache=False) | as_rgb_image(load_image(location, use_cache=use_cache)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "use_cache",
      "function": "load_images",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "assert isinstance(path,str)\\n        \\n        nonlocal cancelled\\n        if cancelled:\\n            if isinstance(cancelled,Exception):\\n                raise cancelled\\n            else:\\n                return None\\n\\n        try:\\n            image=load_image(path,use_cache=use_cache)\\n        except Exception as e:\\n            if strict==True:\\n                cancelled=e\\n                raise\\n            else:\\n                image=None\\n\\n        if cancelled:\\n            return image\\n\\n        if show_progress:\\n            nonlocal number_of_images_loaded\\n            number_of_images_loaded+=1\\n            show_time_remaining(number_of_images_loaded)\\n        \\n        return image\\n\\n    try:\\n        assert all(isinstance(x,str) for x in locations)\\n        images = par_map(_load_image,locations)#This is fast because it's multithreaded\\n\\n        if strict is False:\\n            #When strict is False (as opposed to None), we skip any images that failed to load | use_cache=False | use_cache=use_cache",
      "transformation_code": "use_cache=False, show_progress=False, num_threads=None, strict=True): | use_cache=use_cache, show_progress=show_progress, strict=strict) | load_images(*locations, use_cache=False, show_progress=False, num_threads=None, strict=True) | load_images(locations, use_cache=use_cache, show_progress=show_progress, strict=strict)",
      "error_handling": "try_except,conditional_raise,return_none",
      "documentation": ""
    },
    {
      "arg_name": "show_progress",
      "function": "load_images",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "assert isinstance(path,str)\\n        \\n        nonlocal cancelled\\n        if cancelled:\\n            if isinstance(cancelled,Exception):\\n                raise cancelled\\n            else:\\n                return None\\n\\n        try:\\n            image=load_image(path,use_cache=use_cache)\\n        except Exception as e:\\n            if strict==True:\\n                cancelled=e\\n                raise\\n            else:\\n                image=None\\n\\n        if cancelled:\\n            return image\\n\\n        if show_progress:\\n            nonlocal number_of_images_loaded\\n            number_of_images_loaded+=1\\n            show_time_remaining(number_of_images_loaded)\\n        \\n        return image\\n\\n    try:\\n        assert all(isinstance(x,str) for x in locations)\\n        images = par_map(_load_image,locations)#This is fast because it's multithreaded\\n\\n        if strict is False:\\n            #When strict is False (as opposed to None), we skip any images that failed to load | show_progress=False | show_progress=show_progress",
      "transformation_code": "show_progress=False, num_threads=None, strict=True): | show_progress=show_progress, strict=strict) | load_images(*locations, use_cache=False, show_progress=False, num_threads=None, strict=True) | load_images(locations, use_cache=use_cache, show_progress=show_progress, strict=strict)",
      "error_handling": "try_except,conditional_raise,return_none",
      "documentation": ""
    },
    {
      "arg_name": "num_threads",
      "function": "load_images",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "num_threads=None | num_threads=num_threads",
      "transformation_code": "num_threads=None, strict=True): | num_threads=num_threads) | load_images(*locations, use_cache=False, show_progress=False, num_threads=None, strict=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "strict",
      "function": "load_images",
      "default_value": true,
      "usage_pattern": "equality_check,boolean_condition",
      "validation_code": "assert strict in {True, False, None}, \"load_images: The 'strict' parameter must be set to either True, False, or None. See the documentation for this function to see what that means.\" | assert isinstance(path,str)\\n        \\n        nonlocal cancelled\\n        if cancelled:\\n            if isinstance(cancelled,Exception):\\n                raise cancelled\\n            else:\\n                return None\\n\\n        try:\\n            image=load_image(path,use_cache=use_cache)\\n        except Exception as e:\\n            if strict==True:\\n                cancelled=e\\n                raise\\n            else:\\n                image=None\\n\\n        if cancelled:\\n            return image\\n\\n        if show_progress:\\n            nonlocal number_of_images_loaded\\n            number_of_images_loaded+=1\\n            show_time_remaining(number_of_images_loaded)\\n        \\n        return image\\n\\n    try:\\n        assert all(isinstance(x,str) for x in locations)\\n        images = par_map(_load_image,locations)#This is fast because it's multithreaded\\n\\n        if strict is False:\\n            #When strict is False (as opposed to None), we skip any images that failed to load | strict=True",
      "transformation_code": "strict=True): | strict==True, this function will throw an error if any one of the images fails to load | load_images(*locations, use_cache=False, show_progress=False, num_threads=None, strict=True) | load_images(locations, use_cache=use_cache, show_progress=show_progress, strict=strict)",
      "error_handling": "try_except,conditional_raise,return_none",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "_load_images_via_pdf2image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_load_images_via_pdf2image(path, *, dpi=200, use_cache=False) | handy_hash([path, dpi])",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "dpi",
      "function": "_load_images_via_pdf2image",
      "default_value": 200,
      "usage_pattern": "simple_usage",
      "validation_code": "dpi=200 | dpi=dpi",
      "transformation_code": "dpi=200, use_cache=False): | dpi=dpi) | _load_images_via_pdf2image(path, *, dpi=200, use_cache=False) | handy_hash([path, dpi])",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "use_cache",
      "function": "_load_images_via_pdf2image",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "use_cache=False | use_cache=False",
      "transformation_code": "use_cache=False): | use_cache=False) | _load_images_via_pdf2image(path, *, dpi=200, use_cache=False) | gather_args_recursive_call(use_cache=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "load_pdf_as_images",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "load_pdf_as_images(path) | _load_images_via_pdf2image(path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "get_pdf_num_pages",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "get_pdf_num_pages(path: str) | pdfinfo_from_path(path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "load_pdf_as_text",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "load_pdf_as_text(path) | _load_pdf_as_text_via_pdfminer(path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "_load_pdf_as_text_via_pdfminer",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_load_pdf_as_text_via_pdfminer(path) | extract_text(path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "file_name",
      "function": "load_image_from_file",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert file_exists(file_name), 'No such image file exists: ' + repr(file_name)",
      "transformation_code": "load_image_from_file(file_name) | file_exists(file_name)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "file_name",
      "function": "_load_image_from_file_via_PIL",
      "default_value": null,
      "usage_pattern": "boolean_condition,method_call",
      "validation_code": "",
      "transformation_code": "_load_image_from_file_via_PIL(file_name) | as_numpy_array(Image.open(file_name)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "file_name",
      "function": "_load_image_from_file_via_imageio",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_load_image_from_file_via_imageio(file_name) | imread(file_name)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "file_name",
      "function": "_load_image_from_file_via_scipy",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_load_image_from_file_via_scipy(file_name) | imread(file_name)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "file_name",
      "function": "_load_image_from_file_via_opencv",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert False, 'OpenCV failed to load image file at the path: ' + file_name",
      "transformation_code": "_load_image_from_file_via_opencv(file_name) | imread(file_name, cv2.IMREAD_ANYCOLOR | cv2.IMREAD_ANYDEPTH)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "url",
      "function": "load_image_from_url",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "assert url.startswith('data:image') or is_valid_url(url), 'load_image_from_url error: invalid url: ' + repr(url)",
      "transformation_code": "load_image_from_url(url: str) | is_valid_url(url)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "dpi",
      "function": "load_image_from_matplotlib",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "dpi = fig.dpi | dpi=dpi",
      "transformation_code": "dpi = fig.dpi | dpi=dpi) | load_image_from_matplotlib(*, dpi: int=None, fig=None) | savefig(buf, format='png', dpi=dpi)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "fig",
      "function": "load_image_from_matplotlib",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check,method_call",
      "validation_code": "fig=None | fig = plt.gcf | dpi = fig",
      "transformation_code": "fig=None): | fig = plt.gcf() | load_image_from_matplotlib(*, dpi: int=None, fig=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "file_path",
      "function": "_get_openexr_image_dimensions",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "isinstance(file_path, OpenEXR.InputFile) | input_file = file_path",
      "transformation_code": "_get_openexr_image_dimensions(file_path) | isinstance(file_path, OpenEXR.InputFile)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "file_path",
      "function": "is_valid_openexr_file",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "is_valid_openexr_file(file_path) | isOpenExrFile(file_path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "file_path",
      "function": "get_openexr_channels",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "isinstance(file_path, OpenEXR.InputFile) | input_file = file_path",
      "transformation_code": "get_openexr_channels(file_path) | isinstance(file_path, OpenEXR.InputFile)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "file_path",
      "function": "load_openexr_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert False, 'rp.load_openexr_image: Image %s is not a valid OpenEXR file' % file_path | assert False, 'rp.load_openexr_image: This image (aka %s) is neither RGB nor RGBA. Please specify the channels manually, such as channels==%s' % (file_path, str(get_openexr_channels(input_file)))",
      "transformation_code": "load_openexr_image(file_path, *, channels=None) | get_openexr_channels(file_path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "channels",
      "function": "load_openexr_image",
      "default_value": null,
      "usage_pattern": "equality_check,boolean_condition,none_check,length_check",
      "validation_code": "assert False, 'rp.load_openexr_image: This image (aka %s) is neither RGB nor RGBA. Please specify the channels manually, such as channels==%s' % (file_path, str(get_openexr_channels(input_file))) | assert set(channels) <= input_channels, 'rp.load_openexr_image: OpenEXR file is missing the following channels: ' + repr(set(channels) - input_channels) | channels=None",
      "transformation_code": "channels=None): | channels=None).shape #It happens to be the case that Image0032.exr is RGBA. This was detected automatically because channels=None | load_openexr_image(file_path, *, channels=None) | load_openexr_image('Image0032.exr',channels=None)",
      "error_handling": "",
      "documentation": "channels(file_path)"
    },
    {
      "arg_name": "image",
      "function": "_encode_image_to_bytes",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert is_image(image) | assert filetype[1:] in _opencv_supported_image_formats, 'Unsupported image format: ' + repr(filetype) + ', please choose from [.' + ', .'.join(_opencv_supported_image_formats) + ']' | image = as_byte_image",
      "transformation_code": "image = as_byte_image(image) | image = as_rgba_image(image) | _encode_image_to_bytes(image, filetype: str, quality) | is_image(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "filetype",
      "function": "_encode_image_to_bytes",
      "default_value": null,
      "usage_pattern": "boolean_condition,indexing,method_call,addition,type_check",
      "validation_code": "assert isinstance(filetype, str) | assert filetype.startswith('.') | assert filetype[1:] in _opencv_supported_image_formats, 'Unsupported image format: ' + repr(filetype) + ', please choose from [.' + ', .'.join(_opencv_supported_image_formats) + ']'",
      "transformation_code": "filetype = filetype.lower() | filetype = '.' + filetype | _encode_image_to_bytes(image, filetype: str, quality) | isinstance(filetype, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "quality",
      "function": "_encode_image_to_bytes",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_encode_image_to_bytes(image, filetype: str, quality)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "encode_image_to_bytes",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "assert is_image(image) or isinstance(image, str) | isinstance(image, str) | isinstance(image, str)",
      "transformation_code": "image = load_image(image) | encode_image_to_bytes(image, filetype=None, quality=100) | is_image(image)",
      "error_handling": "",
      "documentation": "image (str or object)"
    },
    {
      "arg_name": "filetype",
      "function": "encode_image_to_bytes",
      "default_value": null,
      "usage_pattern": "equality_check,boolean_condition,none_check",
      "validation_code": "filetype=None | filetype = get_file_extension",
      "transformation_code": "filetype=None, quality=100): | filetype=='jpg' for instance). Specified as a percentage. | encode_image_to_bytes(image, filetype=None, quality=100) | quality (useful when filetype=='jpg' for instance)",
      "error_handling": "",
      "documentation": "filetype (str, optional)"
    },
    {
      "arg_name": "quality",
      "function": "encode_image_to_bytes",
      "default_value": 100,
      "usage_pattern": "equality_check",
      "validation_code": "quality=100 | quality=100 | quality == 100",
      "transformation_code": "quality=100): | quality=100, it is not currently lossless. TODO: Fix this | encode_image_to_bytes(image, filetype=None, quality=100) | and (quality == 100)",
      "error_handling": "",
      "documentation": "quality (int)"
    },
    {
      "arg_name": "images",
      "function": "encode_images_to_bytes",
      "default_value": null,
      "usage_pattern": "iteration",
      "validation_code": "",
      "transformation_code": "encode_images_to_bytes(images, filetype=None, quality=100)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "filetype",
      "function": "encode_images_to_bytes",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "filetype=None | filetype=filetype",
      "transformation_code": "filetype=None, quality=100): | filetype=filetype, quality=quality) for x in images] | encode_images_to_bytes(images, filetype=None, quality=100) | encode_image_to_bytes(x, filetype=filetype, quality=quality)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "quality",
      "function": "encode_images_to_bytes",
      "default_value": 100,
      "usage_pattern": "simple_usage",
      "validation_code": "quality=100 | quality=quality",
      "transformation_code": "quality=100): | quality=quality) for x in images] | encode_images_to_bytes(images, filetype=None, quality=100) | encode_image_to_bytes(x, filetype=filetype, quality=quality)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "encoded_images",
      "function": "decode_images_from_bytes",
      "default_value": null,
      "usage_pattern": "iteration,type_check",
      "validation_code": "isinstance(encoded_images, bytes) | encoded_images = bytes_to_object",
      "transformation_code": "encoded_images = bytes_to_object(encoded_images) | decode_images_from_bytes(encoded_images) | isinstance(encoded_images, bytes)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "encode_image_to_base64",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "encode_image_to_base64(image, filetype=None, quality=100) | encode_image_to_bytes(image, filetype)",
      "error_handling": "",
      "documentation": "image (str or object)"
    },
    {
      "arg_name": "filetype",
      "function": "encode_image_to_base64",
      "default_value": null,
      "usage_pattern": "equality_check",
      "validation_code": "filetype=None",
      "transformation_code": "filetype=None, quality=100): | filetype=='jpg' for instance) | encode_image_to_base64(image, filetype=None, quality=100) | quality (useful when filetype=='jpg' for instance)",
      "error_handling": "",
      "documentation": "filetype (str, optional)"
    },
    {
      "arg_name": "quality",
      "function": "encode_image_to_base64",
      "default_value": 100,
      "usage_pattern": "simple_usage",
      "validation_code": "quality=100",
      "transformation_code": "quality=100): | encode_image_to_base64(image, filetype=None, quality=100)",
      "error_handling": "",
      "documentation": "quality (int)"
    },
    {
      "arg_name": "images",
      "function": "encode_images_to_base64",
      "default_value": null,
      "usage_pattern": "iteration",
      "validation_code": "",
      "transformation_code": "encode_images_to_base64(images, filetype=None, quality=100)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "filetype",
      "function": "encode_images_to_base64",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "filetype=None",
      "transformation_code": "filetype=None, quality=100): | encode_images_to_base64(images, filetype=None, quality=100) | encode_image_to_base64(image, filetype, quality)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "quality",
      "function": "encode_images_to_base64",
      "default_value": 100,
      "usage_pattern": "simple_usage",
      "validation_code": "quality=100",
      "transformation_code": "quality=100): | encode_images_to_base64(images, filetype=None, quality=100) | encode_image_to_base64(image, filetype, quality)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "base64_string",
      "function": "decode_image_from_base64",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "decode_image_from_base64(base64_string) | decode_bytes_to_image(base64_to_bytes(base64_string)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "base64_strings",
      "function": "decode_images_from_base64",
      "default_value": null,
      "usage_pattern": "iteration",
      "validation_code": "",
      "transformation_code": "decode_images_from_base64(base64_strings)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "encoded_image",
      "function": "decode_bytes_to_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "decode_bytes_to_image(encoded_image: bytes) | array(Image.open(BytesIO(encoded_image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "save_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "image = as_byte_image | image = as_rgb_image",
      "transformation_code": "image = as_byte_image(image) | image = as_rgb_image(image) | save_image(image, file_name=None, add_png_extension: bool=True) | get_unique_copy_path('image.png')",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "file_name",
      "function": "save_image",
      "default_value": null,
      "usage_pattern": "equality_check,boolean_condition,method_call,addition",
      "validation_code": "file_name=None | file_name == None | file_name = get_unique_copy_path",
      "transformation_code": "file_name=None, add_png_extension: bool=True): | file_name == None: | save_image(image, file_name=None, add_png_extension: bool=True) | get_absolute_path(file_name)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "add_png_extension",
      "function": "save_image",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "",
      "transformation_code": "save_image(image, file_name=None, add_png_extension: bool=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "images",
      "function": "save_images",
      "default_value": null,
      "usage_pattern": "length_check",
      "validation_code": "assert len(paths) == len(images), 'Must have exactly one path to go with every image' | assert all(map(is_image, images)), 'All images must be images as defined by rp.is_image' | assert all((isinstance(path, str) or path is None for path in paths)), 'All paths must be strings. They are where the images are saved to.'",
      "transformation_code": "save_images(images, paths: list=None, skip_overwrites=False, show_progress=False) | save_images(my_images, 'image_%03i.png', skip_overwrites=True, show_progress=True)",
      "error_handling": "try_except",
      "documentation": "images (list)"
    },
    {
      "arg_name": "paths",
      "function": "save_images",
      "default_value": null,
      "usage_pattern": "equality_check,boolean_condition,none_check,length_check,iteration,type_check",
      "validation_code": "assert len(paths) == len(images), 'Must have exactly one path to go with every image' | assert all((isinstance(path, str) or path is None for path in paths)), 'All paths must be strings. They are where the images are saved to.' | isinstance(paths, str)",
      "transformation_code": "paths==None, except images are saved in that subfolder | paths = random_namespace_hash() + '_%05i.png' | save_images(images, paths: list=None, skip_overwrites=False, show_progress=False) | or (isinstance(paths, str)",
      "error_handling": "try_except",
      "documentation": "paths (list, str, or None, optional)"
    },
    {
      "arg_name": "skip_overwrites",
      "function": "save_images",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "skip_overwrites=False | skip_overwrites=True",
      "transformation_code": "skip_overwrites=False, show_progress=False): | skip_overwrites=True, show_progress=True) | save_images(images, paths: list=None, skip_overwrites=False, show_progress=False) | save_images(my_images, 'image_%03i.png', skip_overwrites=True, show_progress=True)",
      "error_handling": "",
      "documentation": "skip_overwrites (bool, optional)"
    },
    {
      "arg_name": "show_progress",
      "function": "save_images",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "show_progress=False | show_progress=True",
      "transformation_code": "show_progress=False): | show_progress=True) | save_images(images, paths: list=None, skip_overwrites=False, show_progress=False) | save_images(my_images, 'image_%03i.png', skip_overwrites=True, show_progress=True)",
      "error_handling": "",
      "documentation": "show_progress (bool, optional)"
    },
    {
      "arg_name": "image",
      "function": "temp_saved_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "temp_saved_image(image) | Image(temp_saved_image(\u2039some numpy image\u203a,retina=True)",
      "error_handling": "",
      "documentation": "Image(temp_saved_image(\u2039some numpy image\u203a,retina=True)) #<-- Displays image at FULL resolution, optimized for a retina monitor. 'retina=True' is totally optional, it  just looks really nice on my macb"
    },
    {
      "arg_name": "image",
      "function": "save_image_to_imgur",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "assert is_image_file(image) or is_image(image), 'The input image must either be a path to an image, or a numpy array representing an image' | assert file_exists(image), 'Cannot find a file at path ' + repr(image) | assert is_image_file(image), 'There is a file, but its not an image: ' + repr(path)",
      "transformation_code": "save_image_to_imgur(image) | is_image_file(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "save_image_jpg",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "image = as_numpy_image | image = as_rgb_image | image = as_byte_image",
      "transformation_code": "image = as_numpy_image(image) | image = as_rgb_image(image) | save_image_jpg(image, path=None, *, quality=100, add_extension=True) | get_unique_copy_path('image.jpg')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "save_image_jpg",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check,addition",
      "validation_code": "path=None | path = get_unique_copy_path",
      "transformation_code": "path=None, *, quality=100, add_extension=True): | path = get_unique_copy_path('image.jpg') | save_image_jpg(image, path=None, *, quality=100, add_extension=True) | make_parent_directory(path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "quality",
      "function": "save_image_jpg",
      "default_value": 100,
      "usage_pattern": "equality_check,boolean_condition",
      "validation_code": "assert 0 <= quality <= 100, 'Jpg quality is measured in percent' | quality=100 | 0 <= quality",
      "transformation_code": "quality=100, add_extension=True): | quality == 100: | save_image_jpg(image, path=None, *, quality=100, add_extension=True) | save(path, 'JPEG', quality=quality, optimize=False, progressive=True, **extra_kwargs)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "add_extension",
      "function": "save_image_jpg",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "add_extension=True",
      "transformation_code": "add_extension=True): | save_image_jpg(image, path=None, *, quality=100, add_extension=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "save_image_webp",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "image = as_numpy_image | image = as_rgb_image | image = as_byte_image",
      "transformation_code": "image = as_numpy_image(image) | image = as_rgb_image(image) | save_image_webp(image, path=None, *, quality=100, add_extension=True) | as_numpy_image(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "save_image_webp",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check,addition",
      "validation_code": "path=None | path = get_unique_copy_path",
      "transformation_code": "path=None, *, quality=100, add_extension=True): | path = get_unique_copy_path('image.webp') | save_image_webp(image, path=None, *, quality=100, add_extension=True) | make_parent_directory(path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "quality",
      "function": "save_image_webp",
      "default_value": 100,
      "usage_pattern": "equality_check",
      "validation_code": "assert 0 <= quality <= 100, 'WebP quality is measured in percent' | quality=100 | 0 <= quality",
      "transformation_code": "quality=100, add_extension=True): | quality == 100, quality=quality) | save_image_webp(image, path=None, *, quality=100, add_extension=True) | dict(lossless=quality == 100, quality=quality)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "add_extension",
      "function": "save_image_webp",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "add_extension=True",
      "transformation_code": "add_extension=True): | save_image_webp(image, path=None, *, quality=100, add_extension=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "save_image_avif",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "image = as_numpy_image | image = as_rgb_image | image = as_byte_image",
      "transformation_code": "image = as_numpy_image(image) | image = as_rgb_image(image) | save_image_avif(image, path=None, *, quality=100, add_extension=True) | as_numpy_image(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "save_image_avif",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check,addition",
      "validation_code": "path=None | path = get_unique_copy_path",
      "transformation_code": "path=None, *, quality=100, add_extension=True): | path = get_unique_copy_path('image.avif') | save_image_avif(image, path=None, *, quality=100, add_extension=True) | make_parent_directory(path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "quality",
      "function": "save_image_avif",
      "default_value": 100,
      "usage_pattern": "equality_check",
      "validation_code": "assert 0 <= quality <= 100, 'AVIF quality is measured in percent' | quality=100 | 0 <= quality",
      "transformation_code": "quality=100, add_extension=True): | quality == 100, quality=quality) | save_image_avif(image, path=None, *, quality=100, add_extension=True) | dict(lossless=quality == 100, quality=quality)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "add_extension",
      "function": "save_image_avif",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "add_extension=True",
      "transformation_code": "add_extension=True): | save_image_avif(image, path=None, *, quality=100, add_extension=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "save_image_jxl",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "image = load_image | image=resize_image_to_fit | image = as_numpy_image",
      "transformation_code": "image = load_image('https://lh3.googleusercontent.com/EE9uifZsj9rVE4PDHKRx4jaTYUymIDItRbgxCNzKc7o14NJijwvj2uhSC7oKByRfxEF1SRqMUVispOb3W6r340P4KA=w640-h400-e365-rj-sc0x00ffffff',use_cache=True) | image=resize_image_to_fit(text_image,width=get_image_width(emma)) | save_image_jxl(image, path=None, *, quality=100, add_extension=True) | load_image('https://github.com/RyannDaGreat/Diffusion-Illusions/blob/gh-pages/images/emma.png?raw=true', use_cache=True)",
      "error_handling": "",
      "documentation": "image('https"
    },
    {
      "arg_name": "path",
      "function": "save_image_jxl",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check,addition",
      "validation_code": "path=None | path = save_image_jpg | path=f",
      "transformation_code": "path=None, *, quality=100, add_extension=True): | path = save_image_jpg (emma, path=f'{quality}', quality=quality) | save_image_jxl(image, path=None, *, quality=100, add_extension=True) | save_image_jpg (emma, path=f'{quality}', quality=quality)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "quality",
      "function": "save_image_jxl",
      "default_value": 100,
      "usage_pattern": "equality_check,boolean_condition",
      "validation_code": "assert 0 <= quality <= 100, 'JpgXL quality is measured in percent' | quality=100 | quality=100",
      "transformation_code": "quality=100, add_extension=True): | quality=100 for lossless compression. | save_image_jxl(image, path=None, *, quality=100, add_extension=True) | EXAMPLE (Comparison video between JPG and JXL quality)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "add_extension",
      "function": "save_image_jxl",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "add_extension=True",
      "transformation_code": "add_extension=True): | save_image_jxl(image, path=None, *, quality=100, add_extension=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "video",
      "function": "save_animated_webp",
      "default_value": null,
      "usage_pattern": "indexing",
      "validation_code": "video = as_rgba_images | video = as_byte_images | video = as_pil_images",
      "transformation_code": "video = as_rgba_images(video) | video = as_byte_images(video) | save_animated_webp(video, path=None, *, framerate=60, quality=100, loop=True, add_extension=True) | get_unique_copy_path('video.webp')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "save_animated_webp",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check,addition",
      "validation_code": "path=None | path = get_unique_copy_path",
      "transformation_code": "path=None, *, framerate=60, quality=100, loop=True, add_extension=True): | path = get_unique_copy_path('video.webp') | save_animated_webp(video, path=None, *, framerate=60, quality=100, loop=True, add_extension=True) | make_parent_directory(path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "framerate",
      "function": "save_animated_webp",
      "default_value": 60,
      "usage_pattern": "simple_usage",
      "validation_code": "framerate=60",
      "transformation_code": "framerate=60, quality=100, loop=True, add_extension=True): | save_animated_webp(video, path=None, *, framerate=60, quality=100, loop=True, add_extension=True) | dict(save_all=True, append_images=video[1:], duration=1000 // framerate, loop=0 if loop else 1, quality=quality)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "quality",
      "function": "save_animated_webp",
      "default_value": 100,
      "usage_pattern": "simple_usage",
      "validation_code": "assert 0 <= quality <= 100, 'WebP quality is measured in percent' | quality=100 | 0 <= quality",
      "transformation_code": "quality=100, loop=True, add_extension=True): | quality=quality) | save_animated_webp(video, path=None, *, framerate=60, quality=100, loop=True, add_extension=True) | dict(save_all=True, append_images=video[1:], duration=1000 // framerate, loop=0 if loop else 1, quality=quality)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "loop",
      "function": "save_animated_webp",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "loop=True | loop=0",
      "transformation_code": "loop=True, add_extension=True): | loop=0 if loop else 1, quality=quality) | save_animated_webp(video, path=None, *, framerate=60, quality=100, loop=True, add_extension=True) | dict(save_all=True, append_images=video[1:], duration=1000 // framerate, loop=0 if loop else 1, quality=quality)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "add_extension",
      "function": "save_animated_webp",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "add_extension=True",
      "transformation_code": "add_extension=True): | save_animated_webp(video, path=None, *, framerate=60, quality=100, loop=True, add_extension=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "save_openexr_image",
      "default_value": null,
      "usage_pattern": "indexing",
      "validation_code": "assert is_image(image) | assert len(image.shape) == 3 | image = as_rgb_image",
      "transformation_code": "image = as_rgb_image(image) | image = as_float_image(image, copy=False) | save_openexr_image(image, file_path) | is_image(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "file_path",
      "function": "save_openexr_image",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "assert isinstance(file_path, str) | isinstance(file_path, str)",
      "transformation_code": "save_openexr_image(image, file_path) | isinstance(file_path, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "paths",
      "function": "_get_files_from_paths",
      "default_value": null,
      "usage_pattern": "iteration,type_check",
      "validation_code": "isinstance(paths, str) | paths = list_flatten | paths = list_flatten",
      "transformation_code": "paths = [paths] | paths = list_flatten((glob(x) for x in paths)) | _get_files_from_paths(paths, get_files=None) | isinstance(paths, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "get_files",
      "function": "_get_files_from_paths",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "get_files=None | get_files = rp.get_all_files",
      "transformation_code": "get_files=None): | get_files = rp.get_all_files | _get_files_from_paths(paths, get_files=None) | list_flatten((get_files(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "input_file",
      "function": "convert_image_file",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "isinstance(input_file, str) | output_file_name = input_file",
      "transformation_code": "convert_image_file(input_file, new_extension=None, output_folder=None, *, skip_overwrite=False, image_transform=lambda image, image_file: image, name_transform=lambda file_name: file_name, load_image=lambda path: rp.load_image(path) | get_parent_folder(input_file)",
      "error_handling": "try_except",
      "documentation": "input_file (str)"
    },
    {
      "arg_name": "new_extension",
      "function": "convert_image_file",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check,type_check",
      "validation_code": "isinstance(new_extension, str) | new_extension=None | new_extension = get_file_extension",
      "transformation_code": "new_extension=None, output_folder=None, *, skip_overwrite=False, image_transform=lambda image, image_file: image, name_transform=lambda file_name: file_name, load_image=lambda path: rp.load_image(path), save_image=lambda image, path: rp.save_image(image, path), delete_original=False): | new_extension = get_file_extension(input_file) | convert_image_file(input_file, new_extension=None, output_folder=None, *, skip_overwrite=False, image_transform=lambda image, image_file: image, name_transform=lambda file_name: file_name, load_image=lambda path: rp.load_image(path) | isinstance(new_extension, str)",
      "error_handling": "",
      "documentation": "new_extension (str, optional)"
    },
    {
      "arg_name": "output_folder",
      "function": "convert_image_file",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check,type_check",
      "validation_code": "isinstance(output_folder, str) | output_folder=None | output_folder = get_parent_folder",
      "transformation_code": "output_folder=None, *, skip_overwrite=False, image_transform=lambda image, image_file: image, name_transform=lambda file_name: file_name, load_image=lambda path: rp.load_image(path), save_image=lambda image, path: rp.save_image(image, path), delete_original=False): | output_folder = get_parent_folder(input_file) | convert_image_file(input_file, new_extension=None, output_folder=None, *, skip_overwrite=False, image_transform=lambda image, image_file: image, name_transform=lambda file_name: file_name, load_image=lambda path: rp.load_image(path) | isinstance(output_folder, str)",
      "error_handling": "",
      "documentation": "output_folder (str, optional)"
    },
    {
      "arg_name": "skip_overwrite",
      "function": "convert_image_file",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "skip_overwrite=False",
      "transformation_code": "skip_overwrite=False, image_transform=lambda image, image_file: image, name_transform=lambda file_name: file_name, load_image=lambda path: rp.load_image(path), save_image=lambda image, path: rp.save_image(image, path), delete_original=False): | convert_image_file(input_file, new_extension=None, output_folder=None, *, skip_overwrite=False, image_transform=lambda image, image_file: image, name_transform=lambda file_name: file_name, load_image=lambda path: rp.load_image(path)",
      "error_handling": "",
      "documentation": "skip_overwrite (bool, optional)"
    },
    {
      "arg_name": "image_transform",
      "function": "convert_image_file",
      "default_value": "lambda image, image_file: image",
      "usage_pattern": "simple_usage",
      "validation_code": "image_transform=lambda | image = image_transform | image = image_transform",
      "transformation_code": "image_transform=lambda image, image_file: image, name_transform=lambda file_name: file_name, load_image=lambda path: rp.load_image(path), save_image=lambda image, path: rp.save_image(image, path), delete_original=False): | convert_image_file(input_file, new_extension=None, output_folder=None, *, skip_overwrite=False, image_transform=lambda image, image_file: image, name_transform=lambda file_name: file_name, load_image=lambda path: rp.load_image(path)",
      "error_handling": "try_except",
      "documentation": "image_transform (func, optional)"
    },
    {
      "arg_name": "name_transform",
      "function": "convert_image_file",
      "default_value": "lambda file_name: file_name",
      "usage_pattern": "simple_usage",
      "validation_code": "name_transform=lambda | output_file_name = name_transform",
      "transformation_code": "name_transform=lambda file_name: file_name, load_image=lambda path: rp.load_image(path), save_image=lambda image, path: rp.save_image(image, path), delete_original=False): | convert_image_file(input_file, new_extension=None, output_folder=None, *, skip_overwrite=False, image_transform=lambda image, image_file: image, name_transform=lambda file_name: file_name, load_image=lambda path: rp.load_image(path)",
      "error_handling": "",
      "documentation": "name_transform (func, optional)"
    },
    {
      "arg_name": "load_image",
      "function": "convert_image_file",
      "default_value": "lambda path: rp.load_image(path)",
      "usage_pattern": "simple_usage",
      "validation_code": "load_image=lambda | image = load_image",
      "transformation_code": "load_image=lambda path: rp.load_image(path), save_image=lambda image, path: rp.save_image(image, path), delete_original=False): | convert_image_file(input_file, new_extension=None, output_folder=None, *, skip_overwrite=False, image_transform=lambda image, image_file: image, name_transform=lambda file_name: file_name, load_image=lambda path: rp.load_image(path)",
      "error_handling": "",
      "documentation": "load_image (func, optional)"
    },
    {
      "arg_name": "save_image",
      "function": "convert_image_file",
      "default_value": "lambda image, path: rp.save_image(image, path)",
      "usage_pattern": "simple_usage",
      "validation_code": "save_image=lambda | output = save_image",
      "transformation_code": "save_image=lambda image, path: rp.save_image(image, path), delete_original=False):",
      "error_handling": "",
      "documentation": "save_image (func, optional)"
    },
    {
      "arg_name": "delete_original",
      "function": "convert_image_file",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "delete_original=False",
      "transformation_code": "delete_original=False):",
      "error_handling": "",
      "documentation": "delete_original (bool, optional)"
    },
    {
      "arg_name": "input_files",
      "function": "convert_image_files",
      "default_value": ".",
      "usage_pattern": "length_check",
      "validation_code": "assert is_iterable(input_files), 'Input files should be a list of files or a string (a folder path), but got {}.'.format(type(input_files)) | input_files = _get_files_from_paths",
      "transformation_code": "input_files='.', new_extension=None, output_folder=None, *, strict=True, parallel=True, show_progress=False, skip_overwrite=False, image_transform=lambda image, image_file: image, name_transform=lambda file_name: file_name, load_image=lambda path: rp.load_image(path), save_image=lambda image, path: rp.save_image(image, path), delete_original=False): | input_files = _get_files_from_paths(input_files, get_files=get_all_image_files) | convert_image_files(input_files='.', new_extension=None, output_folder=None, *, strict=True, parallel=True, show_progress=False, skip_overwrite=False, image_transform=lambda image, image_file: image, name_transform=lambda file_name: file_name, load_image=lambda path: rp.load_image(path) | is_iterable(input_files)",
      "error_handling": "try_except",
      "documentation": "input_files (list or str)"
    },
    {
      "arg_name": "new_extension",
      "function": "convert_image_files",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "new_extension=None",
      "transformation_code": "new_extension=None, output_folder=None, *, strict=True, parallel=True, show_progress=False, skip_overwrite=False, image_transform=lambda image, image_file: image, name_transform=lambda file_name: file_name, load_image=lambda path: rp.load_image(path), save_image=lambda image, path: rp.save_image(image, path), delete_original=False): | new_extension=\"png\", | convert_image_files(input_files='.', new_extension=None, output_folder=None, *, strict=True, parallel=True, show_progress=False, skip_overwrite=False, image_transform=lambda image, image_file: image, name_transform=lambda file_name: file_name, load_image=lambda path: rp.load_image(path) | convert_image_files(\n            \"photoshop_files/*.psd\",\n            new_extension=\"png\",\n            output_folder=\"output_files\",\n            image_transform=lambda image, path: labeled_image(\n                resize_image(image, 0.1)",
      "error_handling": "try_except",
      "documentation": "new_extension (str, optional)"
    },
    {
      "arg_name": "output_folder",
      "function": "convert_image_files",
      "default_value": null,
      "usage_pattern": "none_check,type_check",
      "validation_code": "assert output_folder is None or isinstance(output_folder, str), 'Output folder must be a string, but got {}.'.format(type(output_folder)) | isinstance(output_folder, str) | output_folder=None",
      "transformation_code": "output_folder=None, *, strict=True, parallel=True, show_progress=False, skip_overwrite=False, image_transform=lambda image, image_file: image, name_transform=lambda file_name: file_name, load_image=lambda path: rp.load_image(path), save_image=lambda image, path: rp.save_image(image, path), delete_original=False): | output_folder=\"output_files\", | convert_image_files(input_files='.', new_extension=None, output_folder=None, *, strict=True, parallel=True, show_progress=False, skip_overwrite=False, image_transform=lambda image, image_file: image, name_transform=lambda file_name: file_name, load_image=lambda path: rp.load_image(path) | convert_image_files(\n            \"photoshop_files/*.psd\",\n            new_extension=\"png\",\n            output_folder=\"output_files\",\n            image_transform=lambda image, path: labeled_image(\n                resize_image(image, 0.1)",
      "error_handling": "try_except",
      "documentation": "output_folder (str, optional)"
    },
    {
      "arg_name": "strict",
      "function": "convert_image_files",
      "default_value": true,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "assert strict in {True, False, None}, \"The 'strict' parameter must be set to either True, False, or None.\" | strict=True",
      "transformation_code": "strict=True, parallel=True, show_progress=False, skip_overwrite=False, image_transform=lambda image, image_file: image, name_transform=lambda file_name: file_name, load_image=lambda path: rp.load_image(path), save_image=lambda image, path: rp.save_image(image, path), delete_original=False): | convert_image_files(input_files='.', new_extension=None, output_folder=None, *, strict=True, parallel=True, show_progress=False, skip_overwrite=False, image_transform=lambda image, image_file: image, name_transform=lambda file_name: file_name, load_image=lambda path: rp.load_image(path)",
      "error_handling": "try_except",
      "documentation": "strict (bool, optional)"
    },
    {
      "arg_name": "parallel",
      "function": "convert_image_files",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "parallel=True",
      "transformation_code": "parallel=True, show_progress=False, skip_overwrite=False, image_transform=lambda image, image_file: image, name_transform=lambda file_name: file_name, load_image=lambda path: rp.load_image(path), save_image=lambda image, path: rp.save_image(image, path), delete_original=False): | convert_image_files(input_files='.', new_extension=None, output_folder=None, *, strict=True, parallel=True, show_progress=False, skip_overwrite=False, image_transform=lambda image, image_file: image, name_transform=lambda file_name: file_name, load_image=lambda path: rp.load_image(path)",
      "error_handling": "try_except",
      "documentation": "parallel (bool, optional)"
    },
    {
      "arg_name": "show_progress",
      "function": "convert_image_files",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "show_progress=False | show_progress=True",
      "transformation_code": "show_progress=False, skip_overwrite=False, image_transform=lambda image, image_file: image, name_transform=lambda file_name: file_name, load_image=lambda path: rp.load_image(path), save_image=lambda image, path: rp.save_image(image, path), delete_original=False): | show_progress=True, | convert_image_files(input_files='.', new_extension=None, output_folder=None, *, strict=True, parallel=True, show_progress=False, skip_overwrite=False, image_transform=lambda image, image_file: image, name_transform=lambda file_name: file_name, load_image=lambda path: rp.load_image(path)",
      "error_handling": "try_except",
      "documentation": "show_progress (bool, optional)"
    },
    {
      "arg_name": "skip_overwrite",
      "function": "convert_image_files",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "skip_overwrite=False | skip_overwrite=True | skip_overwrite=skip_overwrite",
      "transformation_code": "skip_overwrite=False, image_transform=lambda image, image_file: image, name_transform=lambda file_name: file_name, load_image=lambda path: rp.load_image(path), save_image=lambda image, path: rp.save_image(image, path), delete_original=False): | skip_overwrite=True, | convert_image_files(input_files='.', new_extension=None, output_folder=None, *, strict=True, parallel=True, show_progress=False, skip_overwrite=False, image_transform=lambda image, image_file: image, name_transform=lambda file_name: file_name, load_image=lambda path: rp.load_image(path) | convert_image_file(input_file, new_extension, output_folder, skip_overwrite=skip_overwrite, image_transform=image_transform, name_transform=name_transform, load_image=load_image, save_image=save_image, delete_original=delete_original)",
      "error_handling": "try_except",
      "documentation": "skip_overwrite (bool, optional)"
    },
    {
      "arg_name": "image_transform",
      "function": "convert_image_files",
      "default_value": "lambda image, image_file: image",
      "usage_pattern": "simple_usage",
      "validation_code": "image_transform=lambda | image_transform=lambda | image_transform=image_transform",
      "transformation_code": "image_transform=lambda image, image_file: image, name_transform=lambda file_name: file_name, load_image=lambda path: rp.load_image(path), save_image=lambda image, path: rp.save_image(image, path), delete_original=False): | image_transform=lambda image, path: labeled_image( | convert_image_files(input_files='.', new_extension=None, output_folder=None, *, strict=True, parallel=True, show_progress=False, skip_overwrite=False, image_transform=lambda image, image_file: image, name_transform=lambda file_name: file_name, load_image=lambda path: rp.load_image(path) | convert_image_files(\n            \"photoshop_files/*.psd\",\n            new_extension=\"png\",\n            output_folder=\"output_files\",\n            image_transform=lambda image, path: labeled_image(\n                resize_image(image, 0.1)",
      "error_handling": "try_except",
      "documentation": "image_transform (func, optional)"
    },
    {
      "arg_name": "name_transform",
      "function": "convert_image_files",
      "default_value": "lambda file_name: file_name",
      "usage_pattern": "simple_usage",
      "validation_code": "name_transform=lambda | name_transform=lambda | name_transform=name_transform",
      "transformation_code": "name_transform=lambda file_name: file_name, load_image=lambda path: rp.load_image(path), save_image=lambda image, path: rp.save_image(image, path), delete_original=False): | name_transform=lambda name: \"smaller_labeled_\" + name, | convert_image_files(input_files='.', new_extension=None, output_folder=None, *, strict=True, parallel=True, show_progress=False, skip_overwrite=False, image_transform=lambda image, image_file: image, name_transform=lambda file_name: file_name, load_image=lambda path: rp.load_image(path) | convert_image_file(input_file, new_extension, output_folder, skip_overwrite=skip_overwrite, image_transform=image_transform, name_transform=name_transform, load_image=load_image, save_image=save_image, delete_original=delete_original)",
      "error_handling": "try_except",
      "documentation": "name_transform (func, optional)"
    },
    {
      "arg_name": "load_image",
      "function": "convert_image_files",
      "default_value": "lambda path: rp.load_image(path)",
      "usage_pattern": "simple_usage",
      "validation_code": "load_image=lambda | load_image=load_image",
      "transformation_code": "load_image=lambda path: rp.load_image(path), save_image=lambda image, path: rp.save_image(image, path), delete_original=False): | load_image=load_image, save_image=save_image, delete_original=delete_original) | convert_image_files(input_files='.', new_extension=None, output_folder=None, *, strict=True, parallel=True, show_progress=False, skip_overwrite=False, image_transform=lambda image, image_file: image, name_transform=lambda file_name: file_name, load_image=lambda path: rp.load_image(path) | convert_image_file(input_file, new_extension, output_folder, skip_overwrite=skip_overwrite, image_transform=image_transform, name_transform=name_transform, load_image=load_image, save_image=save_image, delete_original=delete_original)",
      "error_handling": "try_except",
      "documentation": "load_image (func, optional)"
    },
    {
      "arg_name": "save_image",
      "function": "convert_image_files",
      "default_value": "lambda image, path: rp.save_image(image, path)",
      "usage_pattern": "simple_usage",
      "validation_code": "save_image=lambda | save_image=save_image",
      "transformation_code": "save_image=lambda image, path: rp.save_image(image, path), delete_original=False): | save_image=save_image, delete_original=delete_original) | convert_image_file(input_file, new_extension, output_folder, skip_overwrite=skip_overwrite, image_transform=image_transform, name_transform=name_transform, load_image=load_image, save_image=save_image, delete_original=delete_original)",
      "error_handling": "try_except",
      "documentation": "save_image (func, optional)"
    },
    {
      "arg_name": "delete_original",
      "function": "convert_image_files",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "delete_original=False | delete_original=delete_original",
      "transformation_code": "delete_original=False): | delete_original=delete_original) | convert_image_file(input_file, new_extension, output_folder, skip_overwrite=skip_overwrite, image_transform=image_transform, name_transform=name_transform, load_image=load_image, save_image=save_image, delete_original=delete_original)",
      "error_handling": "try_except",
      "documentation": "delete_original (bool, optional)"
    },
    {
      "arg_name": "text",
      "function": "text_to_speech_via_apple",
      "default_value": null,
      "usage_pattern": "iteration",
      "validation_code": "text = str",
      "transformation_code": "text = str(text) | text = ''.join(list((c if c.isalnum() or c in '.,' else ' ' for c in text))) | text_to_speech_via_apple(text: str, voice='Samantha', run_as_thread=True, rate_in_words_per_minute=None, filter_characters=True) | str(text)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "voice",
      "function": "text_to_speech_via_apple",
      "default_value": "Samantha",
      "usage_pattern": "addition",
      "validation_code": "assert voice in text_to_speech_voices_for_apple",
      "transformation_code": "voice='Samantha', run_as_thread=True, rate_in_words_per_minute=None, filter_characters=True): | text_to_speech_via_apple(text: str, voice='Samantha', run_as_thread=True, rate_in_words_per_minute=None, filter_characters=True) | fog(shell_command, 'say -v ' + voice + (' -r ' + str(rate_in_words_per_minute)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "run_as_thread",
      "function": "text_to_speech_via_apple",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "run_as_thread=True",
      "transformation_code": "run_as_thread=True, rate_in_words_per_minute=None, filter_characters=True): | text_to_speech_via_apple(text: str, voice='Samantha', run_as_thread=True, rate_in_words_per_minute=None, filter_characters=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "rate_in_words_per_minute",
      "function": "text_to_speech_via_apple",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "rate_in_words_per_minute=None | 90 <= rate_in_words_per_minute",
      "transformation_code": "rate_in_words_per_minute=None, filter_characters=True): | text_to_speech_via_apple(text: str, voice='Samantha', run_as_thread=True, rate_in_words_per_minute=None, filter_characters=True) | and (not 90 <= rate_in_words_per_minute <= 720)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "filter_characters",
      "function": "text_to_speech_via_apple",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "filter_characters=True",
      "transformation_code": "filter_characters=True): | text_to_speech_via_apple(text: str, voice='Samantha', run_as_thread=True, rate_in_words_per_minute=None, filter_characters=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "text",
      "function": "text_to_speech_via_google",
      "default_value": null,
      "usage_pattern": "length_check",
      "validation_code": "self.text = text | self.text_parts = text | text=text",
      "transformation_code": "text = text | text=text, voice=voice, mp3_file_path=mp3_file_path, play_sound=play_sound, run_as_thread=False)) | text_to_speech_via_google(text: str, voice='en', *, play_sound: bool=True, run_as_thread: bool=True) | __init__(self, text, lang='en', debug=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "voice",
      "function": "text_to_speech_via_google",
      "default_value": "en",
      "usage_pattern": "simple_usage",
      "validation_code": "voice=voice | lang = voice",
      "transformation_code": "voice='en', *, play_sound: bool=True, run_as_thread: bool=True): | voice=voice, mp3_file_path=mp3_file_path, play_sound=play_sound, run_as_thread=False)) | text_to_speech_via_google(text: str, voice='en', *, play_sound: bool=True, run_as_thread: bool=True) | run_as_new_thread(text_to_speech_via_google(text=text, voice=voice, mp3_file_path=mp3_file_path, play_sound=play_sound, run_as_thread=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "play_sound",
      "function": "text_to_speech_via_google",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "play_sound=play_sound",
      "transformation_code": "play_sound=play_sound, run_as_thread=False)) | text_to_speech_via_google(text: str, voice='en', *, play_sound: bool=True, run_as_thread: bool=True) | run_as_new_thread(text_to_speech_via_google(text=text, voice=voice, mp3_file_path=mp3_file_path, play_sound=play_sound, run_as_thread=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "run_as_thread",
      "function": "text_to_speech_via_google",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "run_as_thread=False",
      "transformation_code": "run_as_thread=False)) | text_to_speech_via_google(text: str, voice='en', *, play_sound: bool=True, run_as_thread: bool=True) | run_as_new_thread(text_to_speech_via_google(text=text, voice=voice, mp3_file_path=mp3_file_path, play_sound=play_sound, run_as_thread=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "text",
      "function": "text_to_speech_voices_comparison",
      "default_value": "Hello world",
      "usage_pattern": "simple_usage",
      "validation_code": "text=text",
      "transformation_code": "text='Hello world', time_per_voice=2, voices=None): | text=text, voice=voice, run_as_thread=True) | text_to_speech_voices_comparison(text='Hello world', time_per_voice=2, voices=None) | shuffled(text_to_speech_voices_all)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "time_per_voice",
      "function": "text_to_speech_voices_comparison",
      "default_value": 2,
      "usage_pattern": "simple_usage",
      "validation_code": "time_per_voice=2",
      "transformation_code": "time_per_voice=2, voices=None): | text_to_speech_voices_comparison(text='Hello world', time_per_voice=2, voices=None) | sleep(time_per_voice)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "voices",
      "function": "text_to_speech_voices_comparison",
      "default_value": null,
      "usage_pattern": "iteration",
      "validation_code": "voices=None | voices = voices",
      "transformation_code": "voices=None): | voices = voices or text_to_speech_voices_favorites + shuffled(text_to_speech_voices_all) | text_to_speech_voices_comparison(text='Hello world', time_per_voice=2, voices=None) | shuffled(text_to_speech_voices_all)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "text",
      "function": "text_to_speech",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "text=text | text=text",
      "transformation_code": "text=text, voice=voice, run_as_thread=False) | text=text, run_as_thread=False) | text_to_speech(text: str, voice: str=None, run_as_thread=True) | run_as_new_thread(text_to_speech, text=text, voice=voice, run_as_thread=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "voice",
      "function": "text_to_speech",
      "default_value": null,
      "usage_pattern": "boolean_condition,method_call",
      "validation_code": "voice=voice | voice = random_element",
      "transformation_code": "voice=voice, run_as_thread=False) | voice = random_element(text_to_speech_voices_favorites) | text_to_speech(text: str, voice: str=None, run_as_thread=True) | run_as_new_thread(text_to_speech, text=text, voice=voice, run_as_thread=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "run_as_thread",
      "function": "text_to_speech",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "run_as_thread=True | run_as_thread=False | run_as_thread=False",
      "transformation_code": "run_as_thread=True): | run_as_thread=False) | text_to_speech(text: str, voice: str=None, run_as_thread=True) | run_as_new_thread(text_to_speech, text=text, voice=voice, run_as_thread=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "load_mp3_file",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "load_mp3_file(path) | read(path, True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "load_wav_file",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "load_wav_file(path) | read(path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "samples",
      "function": "adjust_samplerate",
      "default_value": null,
      "usage_pattern": "length_check",
      "validation_code": "samples = int",
      "transformation_code": "samples = int(length_in_seconds * new_samplerate) | adjust_samplerate(samples, original_samplerate: int, new_samplerate: int) | len(samples)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "original_samplerate",
      "function": "adjust_samplerate",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "adjust_samplerate(samples, original_samplerate: int, new_samplerate: int)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "new_samplerate",
      "function": "adjust_samplerate",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "adjust_samplerate(samples, original_samplerate: int, new_samplerate: int) | int(length_in_seconds * new_samplerate)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "file_path",
      "function": "load_sound_file",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "assert isinstance(file_path, str), 'r.load_sound_file: file_path must be a string, but you gave it a %s' % str(type(file_path)) | assert has_file_extension(file_path), \"r.load_sound_file: Your file doesnt have an extension, so I'm not sure what to do with it. Your file path: %s. Supported filetypes include: %s\" % (repr(file_path), ', '.join(supported_filetypes)) | isinstance(file_path, str)",
      "transformation_code": "load_sound_file(file_path: str, samplerate: int=None) | isinstance(file_path, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "samplerate",
      "function": "load_sound_file",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "assert False, 'r.load_sound_file: samplerate must either be True (which will return both the samples and the samplerate), None (which will return the audio at its original samplerate)elif , or an integer representing the desired samplerate.' | samplerate != original_samplerate",
      "transformation_code": "load_sound_file(file_path: str, samplerate: int=None) | returns (samples, samplerate)",
      "error_handling": "",
      "documentation": "samplerate: either True, None or an int. If True, returns (samples, samplerate). If None, returns (samples at original samplerate). If int, returns (samples converted to samplerate)."
    },
    {
      "arg_name": "samples",
      "function": "save_wav",
      "default_value": null,
      "usage_pattern": "boolean_condition,method_call",
      "validation_code": "samples = samples.astype",
      "transformation_code": "samples = samples.astype(np.float32) | save_wav(samples, path, samplerate=None) | write(path, samplerate or default_samplerate, samples)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "save_wav",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "save_wav(samples, path, samplerate=None) | write(path, samplerate or default_samplerate, samples)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "samplerate",
      "function": "save_wav",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "samplerate=None",
      "transformation_code": "samplerate=None) -> None: | save_wav(samples, path, samplerate=None) | write(path, samplerate or default_samplerate, samples)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "samples",
      "function": "play_sound_from_samples",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "play_sound_from_samples(samples, samplerate=None, blocking=False, loop=False, **kwargs) | array(np.minimum(2 ** 15 - 1, 2 ** 15 * np.maximum(-1, np.minimum(1, np.matrix(list(samples)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "samplerate",
      "function": "play_sound_from_samples",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "samplerate=None | samplerate=samplerate | rate=samplerate",
      "transformation_code": "samplerate=None, blocking=False, loop=False, **kwargs): | samplerate=samplerate or default_samplerate, blocking=blocking, loop=loop, **kwargs) | play_sound_from_samples(samples, samplerate=None, blocking=False, loop=False, **kwargs) | play(wav_wave, samplerate=samplerate or default_samplerate, blocking=blocking, loop=loop, **kwargs)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "blocking",
      "function": "play_sound_from_samples",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "assert not blocking, 'This function cannot currently block while playing audio when running in Jupyter' | blocking=False | blocking=blocking",
      "transformation_code": "blocking=False, loop=False, **kwargs): | blocking=blocking, loop=loop, **kwargs) | play_sound_from_samples(samples, samplerate=None, blocking=False, loop=False, **kwargs) | play(wav_wave, samplerate=samplerate or default_samplerate, blocking=blocking, loop=loop, **kwargs)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "loop",
      "function": "play_sound_from_samples",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "assert not loop, 'This function cannot currently play looped audio when running in Jupyter' | loop=False | loop=loop",
      "transformation_code": "loop=False, **kwargs): | loop=loop, **kwargs) | play_sound_from_samples(samples, samplerate=None, blocking=False, loop=False, **kwargs) | play(wav_wave, samplerate=samplerate or default_samplerate, blocking=blocking, loop=loop, **kwargs)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "play_sound_file",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "play_sound_file(path) | load_sound_file(path, samplerate=True)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "absolute_file_path_and_name",
      "function": "play_sound_file_via_afplay",
      "default_value": null,
      "usage_pattern": "addition",
      "validation_code": "",
      "transformation_code": "play_sound_file_via_afplay(absolute_file_path_and_name: str, volume: float=None, rate: float=None, rate_quality: float=None, parallel: bool=True, debug: bool=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "volume",
      "function": "play_sound_file_via_afplay",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "",
      "transformation_code": "play_sound_file_via_afplay(absolute_file_path_and_name: str, volume: float=None, rate: float=None, rate_quality: float=None, parallel: bool=True, debug: bool=True) | str(volume)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "rate",
      "function": "play_sound_file_via_afplay",
      "default_value": null,
      "usage_pattern": "equality_check,boolean_condition,none_check",
      "validation_code": "assert rate > 0, 'r.play_sound_file_via_afplay: Playback rate cannot rate=' + str(rate) | rate > 0 | rate==None",
      "transformation_code": "rate=' + str(rate) | rate==None, so rate_quality doesn't matter. Just sayin'. To make me shut up, turn the debug parameter in my method to True.\") | play_sound_file_via_afplay(absolute_file_path_and_name: str, volume: float=None, rate: float=None, rate_quality: float=None, parallel: bool=True, debug: bool=True) | str(rate)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "rate_quality",
      "function": "play_sound_file_via_afplay",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "",
      "transformation_code": "play_sound_file_via_afplay(absolute_file_path_and_name: str, volume: float=None, rate: float=None, rate_quality: float=None, parallel: bool=True, debug: bool=True) | print(\"r.play_sound_file_via_afplay: There'_s no reason for rate_quality not to be none: rate==None, so rate_quality doesn't matter. Just sayin'. To make me shut up, turn the debug parameter in my method to True.\")",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "parallel",
      "function": "play_sound_file_via_afplay",
      "default_value": true,
      "usage_pattern": "equality_check,boolean_condition",
      "validation_code": "parallel==False | parallel==True",
      "transformation_code": "parallel==False, the code will pause until the song is finished playing. | parallel==True the sound is run in a new process, and returns this process so you can .terminate() it later. It lets things continue as usual (no delay before the next line of code) | play_sound_file_via_afplay(absolute_file_path_and_name: str, volume: float=None, rate: float=None, rate_quality: float=None, parallel: bool=True, debug: bool=True) | return (run_as_new_thread if parallel else run_func)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "debug",
      "function": "play_sound_file_via_afplay",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "play_sound_file_via_afplay(absolute_file_path_and_name: str, volume: float=None, rate: float=None, rate_quality: float=None, parallel: bool=True, debug: bool=True) | print(\"r.play_sound_file_via_afplay: There'_s no reason for rate_quality not to be none: rate==None, so rate_quality doesn't matter. Just sayin'. To make me shut up, turn the debug parameter in my method to True.\")",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "file_name",
      "function": "play_sound_file_via_pygame",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "play_sound_file_via_pygame(file_name: str, return_simple_stopping_function=True) | Sound(file_name)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "return_simple_stopping_function",
      "function": "play_sound_file_via_pygame",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "return_simple_stopping_function=True",
      "transformation_code": "return_simple_stopping_function=True): | play_sound_file_via_pygame(file_name: str, return_simple_stopping_function=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "mp3_file_path",
      "function": "mp3_to_wav",
      "default_value": null,
      "usage_pattern": "addition",
      "validation_code": "",
      "transformation_code": "mp3_to_wav(mp3_file_path: str, wav_output_path: str=None, samplerate=None) | shell_command('lame --decode '+mp3_file_path+\" \"+wav_output_path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "wav_output_path",
      "function": "mp3_to_wav",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "wav_output_path = os.path.splitext",
      "transformation_code": "wav_output_path = os.path.splitext(mp3_file_path)[0] + '.wav' | mp3_to_wav(mp3_file_path: str, wav_output_path: str=None, samplerate=None) | shell_command('lame --decode '+mp3_file_path+\" \"+wav_output_path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "samplerate",
      "function": "mp3_to_wav",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "samplerate=None",
      "transformation_code": "samplerate=None) -> str: | mp3_to_wav(mp3_file_path: str, wav_output_path: str=None, samplerate=None) | _run_sys_command('lame ' + str(samplerate or default_samplerate)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "wav_file_path",
      "function": "wav_to_mp3",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "wav_to_mp3(wav_file_path: str, mp3_output_path: str=None, samplerate: int=44100) | splitext(wav_file_path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "mp3_output_path",
      "function": "wav_to_mp3",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "mp3_output_path = os.path.splitext",
      "transformation_code": "mp3_output_path = os.path.splitext(wav_file_path)[0] + '.mp3' | wav_to_mp3(wav_file_path: str, mp3_output_path: str=None, samplerate: int=44100) | extend(['-y', mp3_output_path])",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "samplerate",
      "function": "wav_to_mp3",
      "default_value": 44100,
      "usage_pattern": "boolean_condition",
      "validation_code": "",
      "transformation_code": "wav_to_mp3(wav_file_path: str, mp3_output_path: str=None, samplerate: int=44100) | extend(['-ar', str(samplerate)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "input_file",
      "function": "convert_audio_file",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "output_file == input_file",
      "transformation_code": "convert_audio_file(input_file, output_file, *, skip_existing=False) | exists(input_file)",
      "error_handling": "try_except",
      "documentation": "input_file (str)"
    },
    {
      "arg_name": "output_file",
      "function": "convert_audio_file",
      "default_value": null,
      "usage_pattern": "equality_check,boolean_condition",
      "validation_code": "output_file = rp.with_file_extension | output_file == input_file | output_file = rp.get_unique_copy_path",
      "transformation_code": "output_file = rp.with_file_extension(input_file, output_file, replace=True) | output_file == input_file: | convert_audio_file(input_file, output_file, *, skip_existing=False) | with_file_extension(input_file, output_file, replace=True)",
      "error_handling": "try_except",
      "documentation": "output_file (str)"
    },
    {
      "arg_name": "skip_existing",
      "function": "convert_audio_file",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "skip_existing=False",
      "transformation_code": "skip_existing=False): | convert_audio_file(input_file, output_file, *, skip_existing=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "_display_image_in_notebook_via_ipyplot",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert is_image(image) | image = as_rgb_image | img_width=image",
      "transformation_code": "image = as_rgb_image(as_byte_image(image)) | _display_image_in_notebook_via_ipyplot(image) | is_image(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "_display_image_in_notebook_via_ipython",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_display_image_in_notebook_via_ipython(image) | display_png(encode_image_to_bytes(image, 'png')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "kernel_name",
      "function": "add_ipython_kernel",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check,type_check",
      "validation_code": "assert isinstance(kernel_name, str) | isinstance(kernel_name, str) | kernel_name = input_default",
      "transformation_code": "kernel_name = input_default(' > ', default) | add_ipython_kernel(kernel_name: str=None, display_name: str=None) | isinstance(kernel_name, str)",
      "error_handling": "",
      "documentation": "kernel_name: The name for the kernel, as it would appear in the command to start it. For example, \"python3.9\"."
    },
    {
      "arg_name": "display_name",
      "function": "add_ipython_kernel",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check,addition,type_check",
      "validation_code": "assert display_name is None or isinstance(display_name, str) | isinstance(display_name, str) | display_name = kernel_name",
      "transformation_code": "display_name = kernel_name | add_ipython_kernel(kernel_name: str=None, display_name: str=None) | isinstance(display_name, str)",
      "error_handling": "",
      "documentation": "display_name: The name as it appears in the Jupyter UI. Defaults to kernel_name. Example"
    },
    {
      "arg_name": "video",
      "function": "display_video",
      "default_value": null,
      "usage_pattern": "indexing,length_check,iteration,type_check",
      "validation_code": "assert is_video_file(video), repr(video) + ' is not a video file' | isinstance(video, str) | video = load_video_stream",
      "transformation_code": "video = load_video_stream(video) | video = loop_wrapper(video) | display_video(video, framerate=30, *, loop=False) | loop_wrapper(video)",
      "error_handling": "",
      "documentation": "video (aka a 4d tensor or iterable of images)"
    },
    {
      "arg_name": "framerate",
      "function": "display_video",
      "default_value": 30,
      "usage_pattern": "simple_usage",
      "validation_code": "framerate=30 | framerate=framerate",
      "transformation_code": "framerate=30, *, loop=False): | framerate=framerate) | display_video(video, framerate=30, *, loop=False) | display_video_in_notebook(video, framerate=framerate)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "loop",
      "function": "display_video",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "loop=False | video = loop",
      "transformation_code": "loop=False): | display_video(video, framerate=30, *, loop=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "video",
      "function": "_make_video_dimensions_even",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "video = rp.crop_images_to_max_size | video = rp.crop_images",
      "transformation_code": "video = rp.crop_images_to_max_size(video) | video = rp.crop_images(video, new_height, new_width) | _make_video_dimensions_even(video) | crop_images_to_max_size(video)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "video",
      "function": "_display_video_via_mediapy",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "video = rp.as_numpy_images | video = rp.as_rgb_images | video = rp.as_byte_images",
      "transformation_code": "video = rp.as_numpy_images(video) | video = rp.as_rgb_images(video) | _display_video_via_mediapy(video, framerate) | as_numpy_images(video)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "framerate",
      "function": "_display_video_via_mediapy",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "fps=framerate",
      "transformation_code": "_display_video_via_mediapy(video, framerate) | show_video(video, fps=framerate)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "video",
      "function": "display_video_in_notebook",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "video = create_video",
      "transformation_code": "video = create_video(...) | display_video_in_notebook(video, filetype='mp4', *, embed=True, framerate=60) | display_video_in_jupyter_notebook(video, filetype='mp4', embed=True)",
      "error_handling": "",
      "documentation": "video: The video object to display."
    },
    {
      "arg_name": "filetype",
      "function": "display_video_in_notebook",
      "default_value": "mp4",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "filetype='mp4', *, embed=True, framerate=60): | filetype='mp4', embed=True) | display_video_in_notebook(video, filetype='mp4', *, embed=True, framerate=60) | display_video_in_jupyter_notebook(video, filetype='mp4', embed=True)",
      "error_handling": "",
      "documentation": "filetype (str, optional)"
    },
    {
      "arg_name": "embed",
      "function": "display_video_in_notebook",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "embed=True | embed=True",
      "transformation_code": "embed=True, framerate=60): | embed=True) | display_video_in_notebook(video, filetype='mp4', *, embed=True, framerate=60) | display_video_in_jupyter_notebook(video, filetype='mp4', embed=True)",
      "error_handling": "",
      "documentation": "embed (bool, optional)"
    },
    {
      "arg_name": "framerate",
      "function": "display_video_in_notebook",
      "default_value": 60,
      "usage_pattern": "simple_usage",
      "validation_code": "framerate=60",
      "transformation_code": "framerate=60): | display_video_in_notebook(video, filetype='mp4', *, embed=True, framerate=60)",
      "error_handling": "",
      "documentation": "framerate (int, optional)"
    },
    {
      "arg_name": "video",
      "function": "_display_video_in_notebook",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "assert is_valid_url(video) or file_exists(video), 'rp.display_video_in_notebook: Video file {0} does not exist'.format(video) | isinstance(video, str) | isinstance(video, str)",
      "transformation_code": "video=None): | video = save_video | _display_video_in_notebook(video, filetype, *, embed, framerate, save_video=None) | and (not isinstance(video, str)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "filetype",
      "function": "_display_video_in_notebook",
      "default_value": null,
      "usage_pattern": "equality_check,boolean_condition,method_call",
      "validation_code": "filetype = filetype.strip | filetype = get_file_extension",
      "transformation_code": "filetype = filetype.strip('.').lower() | filetype == 'mp4'): | _display_video_in_notebook(video, filetype, *, embed, framerate, save_video=None) | and (filetype == 'mp4')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "embed",
      "function": "_display_video_in_notebook",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "assert is_valid_url(temp_path), \"I wasn't able to get embed=False to work with image paths yet: temp_path=%s\" % temp_path | embed=False | embed=embed",
      "transformation_code": "embed=False to work with image paths yet: temp_path=%s\" % temp_path | embed=embed) | _display_video_in_notebook(video, filetype, *, embed, framerate, save_video=None) | Image(filename=temp_path, embed=embed)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "framerate",
      "function": "_display_video_in_notebook",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "framerate=framerate",
      "transformation_code": "framerate=framerate) | _display_video_in_notebook(video, filetype, *, embed, framerate, save_video=None) | _display_video_via_mediapy(video, framerate)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "save_video",
      "function": "_display_video_in_notebook",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "save_video=None | save_video = save_video",
      "transformation_code": "save_video=None): | save_video = save_video | _display_video_in_notebook(video, filetype, *, embed, framerate, save_video=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "video",
      "function": "display_video_in_notebook_webp",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "video = rp.load_video",
      "transformation_code": "video = rp.load_video(video_url, use_cache=True) | display_video_in_notebook_webp(video, quality=100, framerate=60) | load_video(video_url, use_cache=True)",
      "error_handling": "",
      "documentation": "video(video_url, use_cache=True)"
    },
    {
      "arg_name": "quality",
      "function": "display_video_in_notebook_webp",
      "default_value": 100,
      "usage_pattern": "simple_usage",
      "validation_code": "quality=100 | quality=quality",
      "transformation_code": "quality=100, framerate=60): | quality=quality, framerate=framerate) | display_video_in_notebook_webp(video, quality=100, framerate=60) | print(quality)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "framerate",
      "function": "display_video_in_notebook_webp",
      "default_value": 60,
      "usage_pattern": "simple_usage",
      "validation_code": "framerate=60 | framerate=framerate",
      "transformation_code": "framerate=60): | framerate=framerate) | display_video_in_notebook_webp(video, quality=100, framerate=60) | save_video(video, path, framerate)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "_display_downloadable_image_in_notebook_via_ipython",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_display_downloadable_image_in_notebook_via_ipython(image, file_name: str) | b64encode(encode_image_to_bytes(image, 'png')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "file_name",
      "function": "_display_downloadable_image_in_notebook_via_ipython",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "file_name = with_file_extension",
      "transformation_code": "file_name = with_file_extension(file_name, 'png') | _display_downloadable_image_in_notebook_via_ipython(image, file_name: str) | with_file_extension(file_name, 'png')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "display_image_in_notebook",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "display_image_in_notebook(image) | update(image)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "_image_to_html",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "image = rp.encode_image_to_base64",
      "transformation_code": "image = rp.encode_image_to_base64(image) | _image_to_html(image) | encode_image_to_base64(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "display_image",
      "default_value": null,
      "usage_pattern": "boolean_condition,method_call,type_check",
      "validation_code": "assert ndim in {2, 3}, 'Image tensor must have either two or three dimensions (either a grayscale image or RGB or RGBA image)' | isinstance(image, str) | isinstance(image, np.ndarray)",
      "transformation_code": "image = load_image(image) | image = as_numpy_image(image, copy=False) | display_image(image, block=False) | images (see rp.is_image()",
      "error_handling": "try_except",
      "documentation": "image() for more information)"
    },
    {
      "arg_name": "block",
      "function": "display_image",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "block=False | block=True | block=block",
      "transformation_code": "block=False): | block=True, it will. | display_image(image, block=False) | cv_imshow(image, wait=10 if not block else 10000000, label='rp.display_image()",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "with_alpha_checkerboard",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "with_alpha_checkerboard(image, *, tile_size=8, first_color=1.0, second_color=0.75) | get_checkerboard_image(*get_image_dimensions(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "tile_size",
      "function": "with_alpha_checkerboard",
      "default_value": 8,
      "usage_pattern": "simple_usage",
      "validation_code": "tile_size=8 | tile_size=tile_size",
      "transformation_code": "tile_size=8, first_color=1.0, second_color=0.75): | tile_size=tile_size, first_color=first_color, second_color=second_color) | with_alpha_checkerboard(image, *, tile_size=8, first_color=1.0, second_color=0.75)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "first_color",
      "function": "with_alpha_checkerboard",
      "default_value": 1.0,
      "usage_pattern": "simple_usage",
      "validation_code": "first_color=1.0 | first_color=first_color",
      "transformation_code": "first_color=1.0, second_color=0.75): | first_color=first_color, second_color=second_color) | with_alpha_checkerboard(image, *, tile_size=8, first_color=1.0, second_color=0.75)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "second_color",
      "function": "with_alpha_checkerboard",
      "default_value": 0.75,
      "usage_pattern": "simple_usage",
      "validation_code": "second_color=0.75 | second_color=second_color",
      "transformation_code": "second_color=0.75): | second_color=second_color) | with_alpha_checkerboard(image, *, tile_size=8, first_color=1.0, second_color=0.75)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "tile_size",
      "function": "with_alpha_checkerboards",
      "default_value": 8,
      "usage_pattern": "simple_usage",
      "validation_code": "tile_size=8 | tile_size=tile_size",
      "transformation_code": "tile_size=8, first_color=1.0, second_color=0.75, lazy=False): | tile_size=tile_size, first_color=first_color, second_color=second_color) for image in images) | with_alpha_checkerboards(*images, tile_size=8, first_color=1.0, second_color=0.75, lazy=False) | with_alpha_checkerboard(image, tile_size=tile_size, first_color=first_color, second_color=second_color)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "first_color",
      "function": "with_alpha_checkerboards",
      "default_value": 1.0,
      "usage_pattern": "simple_usage",
      "validation_code": "first_color=1.0 | first_color=first_color",
      "transformation_code": "first_color=1.0, second_color=0.75, lazy=False): | first_color=first_color, second_color=second_color) for image in images) | with_alpha_checkerboards(*images, tile_size=8, first_color=1.0, second_color=0.75, lazy=False) | with_alpha_checkerboard(image, tile_size=tile_size, first_color=first_color, second_color=second_color)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "second_color",
      "function": "with_alpha_checkerboards",
      "default_value": 0.75,
      "usage_pattern": "simple_usage",
      "validation_code": "second_color=0.75 | second_color=second_color",
      "transformation_code": "second_color=0.75, lazy=False): | second_color=second_color) for image in images) | with_alpha_checkerboards(*images, tile_size=8, first_color=1.0, second_color=0.75, lazy=False) | with_alpha_checkerboard(image, tile_size=tile_size, first_color=first_color, second_color=second_color)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "lazy",
      "function": "with_alpha_checkerboards",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "lazy=False",
      "transformation_code": "lazy=False): | with_alpha_checkerboards(*images, tile_size=8, first_color=1.0, second_color=0.75, lazy=False) | and (not lazy)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "display_alpha_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "image = with_alpha_checkerboard",
      "transformation_code": "image = with_alpha_checkerboard(image, tile_size=tile_size, first_color=first_color, second_color=second_color) | display_alpha_image(image, block=False, tile_size=8, first_color=1.0, second_color=0.75) | with_alpha_checkerboard(image, tile_size=tile_size, first_color=first_color, second_color=second_color)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "block",
      "function": "display_alpha_image",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "block=False | block=block",
      "transformation_code": "block=False, tile_size=8, first_color=1.0, second_color=0.75): | block=block) | display_alpha_image(image, block=False, tile_size=8, first_color=1.0, second_color=0.75) | display_image(alpha_checkerboard_image, block=block)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "tile_size",
      "function": "display_alpha_image",
      "default_value": 8,
      "usage_pattern": "simple_usage",
      "validation_code": "tile_size=8 | tile_size=tile_size",
      "transformation_code": "tile_size=8, first_color=1.0, second_color=0.75): | tile_size=tile_size, first_color=first_color, second_color=second_color) | display_alpha_image(image, block=False, tile_size=8, first_color=1.0, second_color=0.75) | with_alpha_checkerboard(image, tile_size=tile_size, first_color=first_color, second_color=second_color)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "first_color",
      "function": "display_alpha_image",
      "default_value": 1.0,
      "usage_pattern": "simple_usage",
      "validation_code": "first_color=1.0 | first_color=first_color",
      "transformation_code": "first_color=1.0, second_color=0.75): | first_color=first_color, second_color=second_color) | display_alpha_image(image, block=False, tile_size=8, first_color=1.0, second_color=0.75) | with_alpha_checkerboard(image, tile_size=tile_size, first_color=first_color, second_color=second_color)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "second_color",
      "function": "display_alpha_image",
      "default_value": 0.75,
      "usage_pattern": "simple_usage",
      "validation_code": "second_color=0.75 | second_color=second_color",
      "transformation_code": "second_color=0.75): | second_color=second_color) | display_alpha_image(image, block=False, tile_size=8, first_color=1.0, second_color=0.75) | with_alpha_checkerboard(image, tile_size=tile_size, first_color=first_color, second_color=second_color)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "images",
      "function": "_display_image_slideshow_animated",
      "default_value": null,
      "usage_pattern": "indexing,length_check,iteration",
      "validation_code": "assert len(images) > 0, 'Must have at least one image to display, but len(images)==%i' % len(images)",
      "transformation_code": "images = [as_rgb_image(as_byte_image(image)) for image in images] | _display_image_slideshow_animated(images) | display_video(images)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "text",
      "function": "display_qr_code_in_terminal",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "display_qr_code_in_terminal(text) | add_data(text)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "url",
      "function": "display_website_in_terminal",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert is_valid_url(url), 'Invalid url: %s' % url",
      "transformation_code": "display_website_in_terminal(url) | is_valid_url(url)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "images",
      "function": "display_image_slideshow",
      "default_value": ".",
      "usage_pattern": "indexing,length_check,iteration,type_check",
      "validation_code": "assert all((isinstance(path, str) for path in images)) | assert all((is_image(image) or is_image_file(image) for image in images)) | assert len(images) > 0, 'Must have at least one image to create a slideshow'",
      "transformation_code": "images='.', display=None, use_cache=True): | images=line_split('''https://upload.wikimedia.org/wikipedia/commons/4/41/Left_side_of_Flying_Pigeon.jpg | display_image_slideshow(images='.', display=None, use_cache=True) | line_split('''https://upload.wikimedia.org/wikipedia/commons/4/41/Left_side_of_Flying_Pigeon.jpg\n        https://d17fnq9dkz9hgj.cloudfront.net/uploads/2020/04/shelter-dog-cropped-1.jpg\n        https://i.pinimg.com/736x/4d/8e/cc/4d8ecc6967b4a3d475be5c4d881c4d9c.jpg\n        https://www.dictionary.com/e/wp-content/uploads/2018/03/doge-300x300.jpg\n        https://i.pinimg.com/originals/cb/e9/b4/cbe9b4280f390636e4d9432a02159528.jpg\n        https://i.insider.com/5989fc4eefe3df1f008b48b9?width=1100&format=jpeg&auto=webp\n        https://pyxis.nymag.com/v1/imgs/cd8/804/e0f612fa12d17e68e3d68ccf55f93cac4f-06-rick-morty.rsquare.w700.jpg\n        https://assets.bwbx.io/images/users/iqjWHBFdfxIU/iXusLDq1QUac/v1/1000x-1.jpg\n        https://i0.wp.com/huskerchalktalk.com/wp-content/uploads/2016/09/chessboard.jpg?fit=698%2C400&ssl=1https://www.colorado.edu/mcdb/sites/default/files/styles/medium/public/article-image/logo-blm.png?itok=sbQ6vxqb''')",
      "error_handling": "try_except",
      "documentation": "images:"
    },
    {
      "arg_name": "display",
      "function": "display_image_slideshow",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "display=None | display=display_image_in_terminal | display=display_image_in_terminal",
      "transformation_code": "display=None, use_cache=True): | display=display_image_in_terminal, you can view the slideshow entirely over SSH | display_image_slideshow(images='.', display=None, use_cache=True) | display_image_slideshow(images,display_image_in_terminal)",
      "error_handling": "try_except",
      "documentation": "display:"
    },
    {
      "arg_name": "use_cache",
      "function": "display_image_slideshow",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "use_cache=True | use_cache=use_cache",
      "transformation_code": "use_cache=True): | use_cache=use_cache) | display_image_slideshow(images='.', display=None, use_cache=True) | load_image(image, use_cache=use_cache)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "values",
      "function": "bar_graph",
      "default_value": null,
      "usage_pattern": "indexing,length_check",
      "validation_code": "y=values",
      "transformation_code": "bar_graph(values, *, width=0.9, align='center', block=False, xlabel=None, ylabel=None, title=None, label_bars=False, **kwargs) | list(range(len(values)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "width",
      "function": "bar_graph",
      "default_value": 0.9,
      "usage_pattern": "simple_usage",
      "validation_code": "width=0.9 | width=width",
      "transformation_code": "width=0.9, align='center', block=False, xlabel=None, ylabel=None, title=None, label_bars=False, **kwargs): | width=width, align=align, **kwargs) | bar_graph(values, *, width=0.9, align='center', block=False, xlabel=None, ylabel=None, title=None, label_bars=False, **kwargs) | bar(x, values, width=width, align=align, **kwargs)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "align",
      "function": "bar_graph",
      "default_value": "center",
      "usage_pattern": "equality_check,boolean_condition",
      "validation_code": "assert align in {'center', 'left', 'right'} | align=align",
      "transformation_code": "align='center', block=False, xlabel=None, ylabel=None, title=None, label_bars=False, **kwargs): | align == 'right': | bar_graph(values, *, width=0.9, align='center', block=False, xlabel=None, ylabel=None, title=None, label_bars=False, **kwargs) | bar(x, values, width=width, align=align, **kwargs)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "block",
      "function": "bar_graph",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "block=False",
      "transformation_code": "block=False, xlabel=None, ylabel=None, title=None, label_bars=False, **kwargs): | bar_graph(values, *, width=0.9, align='center', block=False, xlabel=None, ylabel=None, title=None, label_bars=False, **kwargs)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "xlabel",
      "function": "bar_graph",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "xlabel=None",
      "transformation_code": "xlabel=None, ylabel=None, title=None, label_bars=False, **kwargs): | bar_graph(values, *, width=0.9, align='center', block=False, xlabel=None, ylabel=None, title=None, label_bars=False, **kwargs) | xlabel(xlabel)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "ylabel",
      "function": "bar_graph",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "ylabel=None",
      "transformation_code": "ylabel=None, title=None, label_bars=False, **kwargs): | bar_graph(values, *, width=0.9, align='center', block=False, xlabel=None, ylabel=None, title=None, label_bars=False, **kwargs) | ylabel(ylabel)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "title",
      "function": "bar_graph",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "title=None",
      "transformation_code": "title=None, label_bars=False, **kwargs): | bar_graph(values, *, width=0.9, align='center', block=False, xlabel=None, ylabel=None, title=None, label_bars=False, **kwargs) | title(title)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "label_bars",
      "function": "bar_graph",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "label_bars=False",
      "transformation_code": "label_bars=False, **kwargs): | bar_graph(values, *, width=0.9, align='center', block=False, xlabel=None, ylabel=None, title=None, label_bars=False, **kwargs)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "values",
      "function": "histogram_in_terminal",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "values = as_numpy_array",
      "transformation_code": "values = as_numpy_array(values).flatten() | histogram_in_terminal(values, sideways=False) | as_numpy_array(values)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "sideways",
      "function": "histogram_in_terminal",
      "default_value": false,
      "usage_pattern": "equality_check,boolean_condition",
      "validation_code": "sideways=False | sideways == True",
      "transformation_code": "sideways=False): | sideways == True: | histogram_in_terminal(values, sideways=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "y_values",
      "function": "line_graph_via_plotille",
      "default_value": null,
      "usage_pattern": "length_check",
      "validation_code": "",
      "transformation_code": "y_values = [math.sin(x) for x in x_values] | line_graph_via_plotille(y_values, x_values=None, width=None, height=None, y_min=None, y_max=None, x_min=None, x_max=None, background_color=None, line_color=None, xlabel='X', ylabel='Y', silent=False) | line_graph_in_terminal(y_values, x_values, line_color='blue', xlabel='Angle', ylabel='Sine', silent=True)",
      "error_handling": "",
      "documentation": "y_values (list)"
    },
    {
      "arg_name": "x_values",
      "function": "line_graph_via_plotille",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check,iteration",
      "validation_code": "x_values=None | math\n        >>> x_values | x_values = list",
      "transformation_code": "x_values=None, width=None, height=None, y_min=None, y_max=None, x_min=None, x_max=None, background_color=None, line_color=None, xlabel='X', ylabel='Y', silent=False): | x_values = [x / 10.0 for x in range(-50, 50, 1)] | line_graph_via_plotille(y_values, x_values=None, width=None, height=None, y_min=None, y_max=None, x_min=None, x_max=None, background_color=None, line_color=None, xlabel='X', ylabel='Y', silent=False) | line_graph_in_terminal(y_values, x_values, line_color='blue', xlabel='Angle', ylabel='Sine', silent=True)",
      "error_handling": "",
      "documentation": "x_values (list, optional)"
    },
    {
      "arg_name": "width",
      "function": "line_graph_via_plotille",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "width=None | width=width",
      "transformation_code": "width=None, height=None, y_min=None, y_max=None, x_min=None, x_max=None, background_color=None, line_color=None, xlabel='X', ylabel='Y', silent=False): | width=width or get_terminal_width() - 20, height=height or get_terminal_height() - 13, x_min=x_min, x_max=x_max, y_min=y_min, y_max=y_max, X_label=xlabel, Y_label=ylabel) | line_graph_via_plotille(y_values, x_values=None, width=None, height=None, y_min=None, y_max=None, x_min=None, x_max=None, background_color=None, line_color=None, xlabel='X', ylabel='Y', silent=False) | plot(x_values, y_values, bg=background_color, lc=line_color, width=width or get_terminal_width()",
      "error_handling": "",
      "documentation": "width     (int, optional)"
    },
    {
      "arg_name": "height",
      "function": "line_graph_via_plotille",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "height=None | height=height",
      "transformation_code": "height=None, y_min=None, y_max=None, x_min=None, x_max=None, background_color=None, line_color=None, xlabel='X', ylabel='Y', silent=False): | height=height or get_terminal_height() - 13, x_min=x_min, x_max=x_max, y_min=y_min, y_max=y_max, X_label=xlabel, Y_label=ylabel) | line_graph_via_plotille(y_values, x_values=None, width=None, height=None, y_min=None, y_max=None, x_min=None, x_max=None, background_color=None, line_color=None, xlabel='X', ylabel='Y', silent=False)",
      "error_handling": "",
      "documentation": "height    (int, optional)"
    },
    {
      "arg_name": "y_min",
      "function": "line_graph_via_plotille",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "y_min=None | y_min=y_min",
      "transformation_code": "y_min=None, y_max=None, x_min=None, x_max=None, background_color=None, line_color=None, xlabel='X', ylabel='Y', silent=False): | y_min=y_min, y_max=y_max, X_label=xlabel, Y_label=ylabel) | line_graph_via_plotille(y_values, x_values=None, width=None, height=None, y_min=None, y_max=None, x_min=None, x_max=None, background_color=None, line_color=None, xlabel='X', ylabel='Y', silent=False)",
      "error_handling": "",
      "documentation": "y_min   (float, optional)"
    },
    {
      "arg_name": "y_max",
      "function": "line_graph_via_plotille",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "y_max=None | y_max=y_max",
      "transformation_code": "y_max=None, x_min=None, x_max=None, background_color=None, line_color=None, xlabel='X', ylabel='Y', silent=False): | y_max=y_max, X_label=xlabel, Y_label=ylabel) | line_graph_via_plotille(y_values, x_values=None, width=None, height=None, y_min=None, y_max=None, x_min=None, x_max=None, background_color=None, line_color=None, xlabel='X', ylabel='Y', silent=False)",
      "error_handling": "",
      "documentation": "y_max   (float, optional)"
    },
    {
      "arg_name": "x_min",
      "function": "line_graph_via_plotille",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "x_min=None | x_min=x_min",
      "transformation_code": "x_min=None, x_max=None, background_color=None, line_color=None, xlabel='X', ylabel='Y', silent=False): | x_min=x_min, x_max=x_max, y_min=y_min, y_max=y_max, X_label=xlabel, Y_label=ylabel) | line_graph_via_plotille(y_values, x_values=None, width=None, height=None, y_min=None, y_max=None, x_min=None, x_max=None, background_color=None, line_color=None, xlabel='X', ylabel='Y', silent=False)",
      "error_handling": "",
      "documentation": "x_min   (float, optional)"
    },
    {
      "arg_name": "x_max",
      "function": "line_graph_via_plotille",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "x_max=None | x_max=x_max",
      "transformation_code": "x_max=None, background_color=None, line_color=None, xlabel='X', ylabel='Y', silent=False): | x_max=x_max, y_min=y_min, y_max=y_max, X_label=xlabel, Y_label=ylabel) | line_graph_via_plotille(y_values, x_values=None, width=None, height=None, y_min=None, y_max=None, x_min=None, x_max=None, background_color=None, line_color=None, xlabel='X', ylabel='Y', silent=False)",
      "error_handling": "",
      "documentation": "x_max   (float, optional)"
    },
    {
      "arg_name": "background_color",
      "function": "line_graph_via_plotille",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "background_color=None | bg=background_color",
      "transformation_code": "background_color=None, line_color=None, xlabel='X', ylabel='Y', silent=False): | line_graph_via_plotille(y_values, x_values=None, width=None, height=None, y_min=None, y_max=None, x_min=None, x_max=None, background_color=None, line_color=None, xlabel='X', ylabel='Y', silent=False) | plot(x_values, y_values, bg=background_color, lc=line_color, width=width or get_terminal_width()",
      "error_handling": "",
      "documentation": "background_color (str, optional)"
    },
    {
      "arg_name": "line_color",
      "function": "line_graph_via_plotille",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "line_color=None | lc=line_color",
      "transformation_code": "line_color=None, xlabel='X', ylabel='Y', silent=False): | line_color='blue', xlabel='Angle', ylabel='Sine', silent=True) | line_graph_via_plotille(y_values, x_values=None, width=None, height=None, y_min=None, y_max=None, x_min=None, x_max=None, background_color=None, line_color=None, xlabel='X', ylabel='Y', silent=False) | line_graph_in_terminal(y_values, x_values, line_color='blue', xlabel='Angle', ylabel='Sine', silent=True)",
      "error_handling": "",
      "documentation": "line_color (str, optional)"
    },
    {
      "arg_name": "xlabel",
      "function": "line_graph_via_plotille",
      "default_value": "X",
      "usage_pattern": "simple_usage",
      "validation_code": "X_label=xlabel",
      "transformation_code": "xlabel='X', ylabel='Y', silent=False): | xlabel='Angle', ylabel='Sine', silent=True) | line_graph_via_plotille(y_values, x_values=None, width=None, height=None, y_min=None, y_max=None, x_min=None, x_max=None, background_color=None, line_color=None, xlabel='X', ylabel='Y', silent=False) | line_graph_in_terminal(y_values, x_values, line_color='blue', xlabel='Angle', ylabel='Sine', silent=True)",
      "error_handling": "",
      "documentation": "xlabel (str, optional)"
    },
    {
      "arg_name": "ylabel",
      "function": "line_graph_via_plotille",
      "default_value": "Y",
      "usage_pattern": "simple_usage",
      "validation_code": "Y_label=ylabel",
      "transformation_code": "ylabel='Y', silent=False): | ylabel='Sine', silent=True) | line_graph_via_plotille(y_values, x_values=None, width=None, height=None, y_min=None, y_max=None, x_min=None, x_max=None, background_color=None, line_color=None, xlabel='X', ylabel='Y', silent=False) | line_graph_in_terminal(y_values, x_values, line_color='blue', xlabel='Angle', ylabel='Sine', silent=True)",
      "error_handling": "",
      "documentation": "ylabel (str, optional)"
    },
    {
      "arg_name": "silent",
      "function": "line_graph_via_plotille",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "silent=False | silent=True",
      "transformation_code": "silent=False): | silent=True) | line_graph_via_plotille(y_values, x_values=None, width=None, height=None, y_min=None, y_max=None, x_min=None, x_max=None, background_color=None, line_color=None, xlabel='X', ylabel='Y', silent=False) | line_graph_in_terminal(y_values, x_values, line_color='blue', xlabel='Angle', ylabel='Sine', silent=True)",
      "error_handling": "",
      "documentation": "silent (bool, optional)"
    },
    {
      "arg_name": "func",
      "function": "line_graph_live",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "new_value = func",
      "transformation_code": "line_graph_live(func, *, length=None, framerate=60, graph=None)",
      "error_handling": "",
      "documentation": "func (callable)"
    },
    {
      "arg_name": "length",
      "function": "line_graph_live",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "length=None | length=100 | length=100",
      "transformation_code": "length=None, framerate=60, graph=None): | length=100, | line_graph_live(func, *, length=None, framerate=60, graph=None) | line_graph_live(\n        ...     get_mouse_y,\n        ...     graph=line_graph,\n        ...     length=100,\n        ... )",
      "error_handling": "",
      "documentation": "length (int, optional)"
    },
    {
      "arg_name": "framerate",
      "function": "line_graph_live",
      "default_value": 60,
      "usage_pattern": "simple_usage",
      "validation_code": "framerate=60 | framerate=30",
      "transformation_code": "framerate=60, graph=None): | framerate=30, | line_graph_live(func, *, length=None, framerate=60, graph=None)",
      "error_handling": "",
      "documentation": "framerate (int, optional)"
    },
    {
      "arg_name": "graph",
      "function": "line_graph_live",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "graph=None | graph=line_graph | graph=lambda",
      "transformation_code": "graph=None): | graph=line_graph, | line_graph_live(func, *, length=None, framerate=60, graph=None) | line_graph_live(\n        ...     get_mouse_y,\n        ...     graph=line_graph,\n        ...     length=100,\n        ... )",
      "error_handling": "",
      "documentation": "graph (callable, optional)"
    },
    {
      "arg_name": "y",
      "function": "line_graph_in_terminal",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "line_graph_in_terminal(y) | line_graph_via_plotille(y)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "show_dots",
      "function": "line_graph",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "",
      "transformation_code": "line_graph(*y_values, show_dots: bool=False, clf: bool=True, ylabel: str=None, xlabel: str=None, use_dashed_lines: bool=False, line_color: str=None, title=None, block: bool=False, background_image=None, logx: float=None, logy: float=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "clf",
      "function": "line_graph",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "",
      "transformation_code": "line_graph(*y_values, show_dots: bool=False, clf: bool=True, ylabel: str=None, xlabel: str=None, use_dashed_lines: bool=False, line_color: str=None, title=None, block: bool=False, background_image=None, logx: float=None, logy: float=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "ylabel",
      "function": "line_graph",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "",
      "transformation_code": "line_graph(*y_values, show_dots: bool=False, clf: bool=True, ylabel: str=None, xlabel: str=None, use_dashed_lines: bool=False, line_color: str=None, title=None, block: bool=False, background_image=None, logx: float=None, logy: float=None) | ylabel(ylabel)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "xlabel",
      "function": "line_graph",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "",
      "transformation_code": "line_graph(*y_values, show_dots: bool=False, clf: bool=True, ylabel: str=None, xlabel: str=None, use_dashed_lines: bool=False, line_color: str=None, title=None, block: bool=False, background_image=None, logx: float=None, logy: float=None) | xlabel(xlabel)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "use_dashed_lines",
      "function": "line_graph",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "",
      "transformation_code": "line_graph(*y_values, show_dots: bool=False, clf: bool=True, ylabel: str=None, xlabel: str=None, use_dashed_lines: bool=False, line_color: str=None, title=None, block: bool=False, background_image=None, logx: float=None, logy: float=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "line_color",
      "function": "line_graph",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "",
      "transformation_code": "line_graph(*y_values, show_dots: bool=False, clf: bool=True, ylabel: str=None, xlabel: str=None, use_dashed_lines: bool=False, line_color: str=None, title=None, block: bool=False, background_image=None, logx: float=None, logy: float=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "title",
      "function": "line_graph",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "title=None",
      "transformation_code": "title=None, block: bool=False, background_image=None, logx: float=None, logy: float=None) -> None: | line_graph(*y_values, show_dots: bool=False, clf: bool=True, ylabel: str=None, xlabel: str=None, use_dashed_lines: bool=False, line_color: str=None, title=None, block: bool=False, background_image=None, logx: float=None, logy: float=None) | title(title)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "block",
      "function": "line_graph",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "block=block",
      "transformation_code": "block=block) | line_graph(*y_values, show_dots: bool=False, clf: bool=True, ylabel: str=None, xlabel: str=None, use_dashed_lines: bool=False, line_color: str=None, title=None, block: bool=False, background_image=None, logx: float=None, logy: float=None) | display_update(block=block)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "background_image",
      "function": "line_graph",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "background_image=None",
      "transformation_code": "background_image=None, logx: float=None, logy: float=None) -> None: | line_graph(*y_values, show_dots: bool=False, clf: bool=True, ylabel: str=None, xlabel: str=None, use_dashed_lines: bool=False, line_color: str=None, title=None, block: bool=False, background_image=None, logx: float=None, logy: float=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "logx",
      "function": "line_graph",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "logx = 2 | base=logx",
      "transformation_code": "logx = 2 | line_graph(*y_values, show_dots: bool=False, clf: bool=True, ylabel: str=None, xlabel: str=None, use_dashed_lines: bool=False, line_color: str=None, title=None, block: bool=False, background_image=None, logx: float=None, logy: float=None) | xscale('log', base=logx)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "logy",
      "function": "line_graph",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "logy = 2 | base=logy",
      "transformation_code": "logy = 2 | line_graph(*y_values, show_dots: bool=False, clf: bool=True, ylabel: str=None, xlabel: str=None, use_dashed_lines: bool=False, line_color: str=None, title=None, block: bool=False, background_image=None, logx: float=None, logy: float=None) | yscale('log', base=logy)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "display_polygon",
      "default_value": null,
      "usage_pattern": "length_check",
      "validation_code": "path = as_points_array",
      "transformation_code": "path = as_points_array(path) | display_polygon(path, *, filled=True, fill_color=None, line_width=1, line_style='solid', line_color=None, clear=False, block=False, alpha=1) | as_points_array(path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "filled",
      "function": "display_polygon",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "filled=True",
      "transformation_code": "filled=True, fill_color=None, line_width=1, line_style='solid', line_color=None, clear=False, block=False, alpha=1): | display_polygon(path, *, filled=True, fill_color=None, line_width=1, line_style='solid', line_color=None, clear=False, block=False, alpha=1) | set_fill(filled)",
      "error_handling": "",
      "documentation": "filled    : boolean whether we should fill the object or just use an outline"
    },
    {
      "arg_name": "fill_color",
      "function": "display_polygon",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "fill_color=None | fill_color = random_rgb_float_color",
      "transformation_code": "fill_color=None, line_width=1, line_style='solid', line_color=None, clear=False, block=False, alpha=1): | fill_color = random_rgb_float_color() | display_polygon(path, *, filled=True, fill_color=None, line_width=1, line_style='solid', line_color=None, clear=False, block=False, alpha=1) | set_facecolor(fill_color)",
      "error_handling": "",
      "documentation": "fill_color: The color of the area of the polygon (like (1,0,0) for red, etc)"
    },
    {
      "arg_name": "line_width",
      "function": "display_polygon",
      "default_value": 1,
      "usage_pattern": "simple_usage",
      "validation_code": "line_width=1",
      "transformation_code": "line_width=1, line_style='solid', line_color=None, clear=False, block=False, alpha=1): | display_polygon(path, *, filled=True, fill_color=None, line_width=1, line_style='solid', line_color=None, clear=False, block=False, alpha=1) | set_linewidth(line_width)",
      "error_handling": "",
      "documentation": "line_width: The width of the border around the polygon (set to 0 for no border)"
    },
    {
      "arg_name": "line_style",
      "function": "display_polygon",
      "default_value": "solid",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "line_style='solid', line_color=None, clear=False, block=False, alpha=1): | display_polygon(path, *, filled=True, fill_color=None, line_width=1, line_style='solid', line_color=None, clear=False, block=False, alpha=1) | set_linestyle(line_style)",
      "error_handling": "",
      "documentation": "line_style: Please see https"
    },
    {
      "arg_name": "line_color",
      "function": "display_polygon",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "line_color=None",
      "transformation_code": "line_color=None, clear=False, block=False, alpha=1): | display_polygon(path, *, filled=True, fill_color=None, line_width=1, line_style='solid', line_color=None, clear=False, block=False, alpha=1) | set_edgecolor(line_color)",
      "error_handling": "",
      "documentation": "line_color: The color of the outline aka border of the polygon (like (1,0,0) for red, etc)"
    },
    {
      "arg_name": "clear",
      "function": "display_polygon",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "clear=False",
      "transformation_code": "clear=False, block=False, alpha=1): | display_polygon(path, *, filled=True, fill_color=None, line_width=1, line_style='solid', line_color=None, clear=False, block=False, alpha=1)",
      "error_handling": "",
      "documentation": "clear     : Whether we should clear the plot before drawing this polygon"
    },
    {
      "arg_name": "block",
      "function": "display_polygon",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "block=False | block=block",
      "transformation_code": "block=False, alpha=1): | block=block) | display_polygon(path, *, filled=True, fill_color=None, line_width=1, line_style='solid', line_color=None, clear=False, block=False, alpha=1) | show(block=block)",
      "error_handling": "",
      "documentation": "block     : True for an interactive plot that blocks the current python code; False to display immediately and continue python code; None to just plot it and skip the displaying step (which is faster "
    },
    {
      "arg_name": "alpha",
      "function": "display_polygon",
      "default_value": 1,
      "usage_pattern": "simple_usage",
      "validation_code": "alpha=1 | alpha=.5",
      "transformation_code": "alpha=1): | alpha=.5) | display_polygon(path, *, filled=True, fill_color=None, line_width=1, line_style='solid', line_color=None, clear=False, block=False, alpha=1) | set_alpha(alpha)",
      "error_handling": "",
      "documentation": "alpha     : The transparency value (1 is opaque, 0 is completely transparent)"
    },
    {
      "arg_name": "on_click",
      "function": "block",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "assert callable(on_click) | on_click=None",
      "transformation_code": "on_click=None, on_unclick=None): | block(on_click=None, on_unclick=None) | callable(on_click)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "on_unclick",
      "function": "block",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "assert callable(on_unclick) | on_unclick=None",
      "transformation_code": "on_unclick=None): | block(on_click=None, on_unclick=None) | callable(on_unclick)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "block",
      "function": "display_update",
      "default_value": false,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "block=False | block=block",
      "transformation_code": "block=False, time=0.01): | block=block) | display_update(block=False, time=0.01) | show(block=block)",
      "error_handling": "",
      "documentation": "block() function shown above"
    },
    {
      "arg_name": "time",
      "function": "display_update",
      "default_value": 0.01,
      "usage_pattern": "simple_usage",
      "validation_code": "time=0.01",
      "transformation_code": "time=0.01): | display_update(block=False, time=0.01) | pause(time)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "display_cv_color_histogram",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "isinstance(image, str) | image = load_image | image = as_rgba_image",
      "transformation_code": "image = load_image(image) | image = as_rgba_image(image) | display_cv_color_histogram(image, *, channels='rgb', linestyle='-', alpha=1, block=False, clf=True) | isinstance(image, str)",
      "error_handling": "",
      "documentation": "image (str or numpy.ndarray)"
    },
    {
      "arg_name": "channels",
      "function": "display_cv_color_histogram",
      "default_value": "rgb",
      "usage_pattern": "iteration",
      "validation_code": "",
      "transformation_code": "channels='rgb', linestyle='-', alpha=1, block=False, clf=True): | display_cv_color_histogram(image, *, channels='rgb', linestyle='-', alpha=1, block=False, clf=True)",
      "error_handling": "",
      "documentation": "channels (str, optional)"
    },
    {
      "arg_name": "linestyle",
      "function": "display_cv_color_histogram",
      "default_value": "-",
      "usage_pattern": "simple_usage",
      "validation_code": "linestyle=linestyle",
      "transformation_code": "linestyle='-', alpha=1, block=False, clf=True): | linestyle=linestyle, alpha=alpha) | display_cv_color_histogram(image, *, channels='rgb', linestyle='-', alpha=1, block=False, clf=True) | plot(hist, color=plot_color, linestyle=linestyle, alpha=alpha)",
      "error_handling": "",
      "documentation": "linestyle (str, optional)"
    },
    {
      "arg_name": "alpha",
      "function": "display_cv_color_histogram",
      "default_value": 1,
      "usage_pattern": "simple_usage",
      "validation_code": "alpha=1 | alpha=alpha",
      "transformation_code": "alpha=1, block=False, clf=True): | alpha=alpha) | display_cv_color_histogram(image, *, channels='rgb', linestyle='-', alpha=1, block=False, clf=True) | plot(hist, color=plot_color, linestyle=linestyle, alpha=alpha)",
      "error_handling": "",
      "documentation": "alpha (float, optional)"
    },
    {
      "arg_name": "block",
      "function": "display_cv_color_histogram",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "block=False | block=block",
      "transformation_code": "block=False, clf=True): | block=block) | display_cv_color_histogram(image, *, channels='rgb', linestyle='-', alpha=1, block=False, clf=True) | display_update(block=block)",
      "error_handling": "",
      "documentation": "block (bool, optional)"
    },
    {
      "arg_name": "clf",
      "function": "display_cv_color_histogram",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "clf=True",
      "transformation_code": "clf=True): | display_cv_color_histogram(image, *, channels='rgb', linestyle='-', alpha=1, block=False, clf=True)",
      "error_handling": "",
      "documentation": "clf (bool, optional)"
    },
    {
      "arg_name": "image1",
      "function": "display_cv_color_histograms",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "image1 = \"/path/to/image1.jpg\" | display_cv_color_histograms(image1, image2, channels='rgb', block=False, clf=True) | display_cv_color_histograms(image1, image2, channels=\"rg\", block=True)",
      "error_handling": "",
      "documentation": "image1 (str or numpy.ndarray)"
    },
    {
      "arg_name": "image2",
      "function": "display_cv_color_histograms",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "image2 = \"/path/to/image2.png\" | display_cv_color_histograms(image1, image2, channels='rgb', block=False, clf=True) | display_cv_color_histograms(image1, image2, channels=\"rg\", block=True)",
      "error_handling": "",
      "documentation": "image2 (str or numpy.ndarray)"
    },
    {
      "arg_name": "channels",
      "function": "display_cv_color_histograms",
      "default_value": "rgb",
      "usage_pattern": "simple_usage",
      "validation_code": "channels=channels | channels=channels",
      "transformation_code": "channels='rgb', block=False, clf=True): | channels=\"rg\", block=True) | display_cv_color_histograms(image1, image2, channels='rgb', block=False, clf=True) | display_cv_color_histograms(image1, image2, channels=\"rg\", block=True)",
      "error_handling": "",
      "documentation": "channels (str, optional)"
    },
    {
      "arg_name": "block",
      "function": "display_cv_color_histograms",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "block=False | block=True | block=None",
      "transformation_code": "block=False, clf=True): | block=True) | display_cv_color_histograms(image1, image2, channels='rgb', block=False, clf=True) | display_cv_color_histograms(image1, image2, channels=\"rg\", block=True)",
      "error_handling": "",
      "documentation": "block (bool, optional)"
    },
    {
      "arg_name": "clf",
      "function": "display_cv_color_histograms",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "clf=True | clf=clf | clf=False",
      "transformation_code": "clf=True): | clf=clf, channels=channels) | display_cv_color_histograms(image1, image2, channels='rgb', block=False, clf=True) | display_cv_color_histogram(image1, block=None, clf=clf, channels=channels)",
      "error_handling": "",
      "documentation": "clf (bool, optional)"
    },
    {
      "arg_name": "l",
      "function": "_minmax_indices",
      "default_value": null,
      "usage_pattern": "method_call,length_check,type_check",
      "validation_code": "isinstance(l, dict)",
      "transformation_code": "_minmax_indices(l, f=None, key=None) | len(l)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "f",
      "function": "_minmax_indices",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "f=None",
      "transformation_code": "f=None, key=None) -> list: | _minmax_indices(l, f=None, key=None) | matching_keys(f(l.values()",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "key",
      "function": "_minmax_indices",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "key=None | key=key | key=key",
      "transformation_code": "key=None) -> list: | key=key), l, key=key) | _minmax_indices(l, f=None, key=None) | matching_indices(f(l, key=key)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "l",
      "function": "min_valued_indices",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "min_valued_indices(l, key=None) | _minmax_indices(l, min, key=key)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "key",
      "function": "min_valued_indices",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "key=None | key=key",
      "transformation_code": "key=None) -> list: | key=key) | min_valued_indices(l, key=None) | _minmax_indices(l, min, key=key)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "l",
      "function": "max_valued_indices",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "max_valued_indices(l, key=None) | _minmax_indices(l, max, key=key)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "key",
      "function": "max_valued_indices",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "key=None | key=key",
      "transformation_code": "key=None) -> list: | key=key) | max_valued_indices(l, key=None) | _minmax_indices(l, max, key=key)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "l",
      "function": "min_valued_elements",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "min_valued_elements(l, key=None) | gather(l, min_valued_indices(l, key=key)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "key",
      "function": "min_valued_elements",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "key=None | key=key",
      "transformation_code": "key=None): | key=key)) | min_valued_elements(l, key=None) | gather(l, min_valued_indices(l, key=key)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "l",
      "function": "max_valued_elements",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "max_valued_elements(l, key=None) | gather(l, max_valued_indices(l, key=key)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "key",
      "function": "max_valued_elements",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "key=None | key=key",
      "transformation_code": "key=None): | key=key)) | max_valued_elements(l, key=None) | gather(l, max_valued_indices(l, key=key)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "l",
      "function": "max_valued_index",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "isinstance(l, dict)",
      "transformation_code": "max_valued_index(l, key=None) | isinstance(l, dict)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "key",
      "function": "max_valued_index",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "key=None | key=key",
      "transformation_code": "key=None): | key=key)] | max_valued_index(l, key=None) | max(inverted_dict, key=key)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "l",
      "function": "min_valued_index",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "isinstance(l, dict)",
      "transformation_code": "min_valued_index(l) | isinstance(l, dict)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "blend",
      "default_value": null,
      "usage_pattern": "addition",
      "validation_code": "",
      "transformation_code": "blend(x, y, \u03b1)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "y",
      "function": "blend",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "blend(x, y, \u03b1)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "\u03b1",
      "function": "blend",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "blend(x, y, \u03b1) | return (1 - \u03b1)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "z",
      "function": "iblend",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "z = z | z = z",
      "transformation_code": "z = z - x | z = z / (y - x) | iblend(z, x, y)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "iblend",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "iblend(z, x, y)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "y",
      "function": "iblend",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "iblend(z, x, y)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "interp",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "interp(x, x0, x1, y0, y1) | return (x - x0)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x0",
      "function": "interp",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "interp(x, x0, x1, y0, y1) | return (x - x0)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x1",
      "function": "interp",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "interp(x, x0, x1, y0, y1)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "y0",
      "function": "interp",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "interp(x, x0, x1, y0, y1)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "y1",
      "function": "interp",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "interp(x, x0, x1, y0, y1)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "values",
      "function": "linterp",
      "default_value": null,
      "usage_pattern": "indexing,length_check",
      "validation_code": "assert is_iterable(values), \"The 'values' parameter should be a list of values you'd like to interpolate between, but type \" + str(type(index)) + ' is not iterable and does not have numerical indices' | l = values",
      "transformation_code": "linterp(values: list, index: float, *, cyclic=False, blend_func=blend) | linterp(values,some_integer)",
      "error_handling": "",
      "documentation": "values (list)"
    },
    {
      "arg_name": "index",
      "function": "linterp",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert is_number(index), \"The 'index' parameter should be a single number (which can be a float, but doesnt have to be), but got type \" + str(type(index)) | assert is_iterable(values), \"The 'values' parameter should be a list of values you'd like to interpolate between, but type \" + str(type(index)) + ' is not iterable and does not have numerical indices' | x0 <= index",
      "transformation_code": "linterp(values: list, index: float, *, cyclic=False, blend_func=blend) | blend_func(values[x0], values[x1], (index - x0)",
      "error_handling": "",
      "documentation": "index (float)"
    },
    {
      "arg_name": "cyclic",
      "function": "linterp",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "cyclic=False | cyclic=False | cyclic=True",
      "transformation_code": "cyclic=False, blend_func=blend): | cyclic=False, index should be in the range  | linterp(values: list, index: float, *, cyclic=False, blend_func=blend) | linterp(images,index,cyclic=True)",
      "error_handling": "try_except",
      "documentation": "cyclic (bool, optional)"
    },
    {
      "arg_name": "blend_func",
      "function": "linterp",
      "default_value": "<blend>",
      "usage_pattern": "simple_usage",
      "validation_code": "blend_func=blend",
      "transformation_code": "blend_func=blend): | linterp(values: list, index: float, *, cyclic=False, blend_func=blend)",
      "error_handling": "try_except",
      "documentation": "blend_func (function, optional)"
    },
    {
      "arg_name": "x",
      "function": "matching_keys",
      "default_value": null,
      "usage_pattern": "equality_check",
      "validation_code": "x == y",
      "transformation_code": "x == y, key=None) -> list: | matching_keys(x, d: dict, check=lambda x, y: x == y, key=None) | key(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "d",
      "function": "matching_keys",
      "default_value": null,
      "usage_pattern": "indexing,method_call,type_check",
      "validation_code": "assert isinstance(d, dict) | isinstance(d, dict)",
      "transformation_code": "matching_keys(x, d: dict, check=lambda x, y: x == y, key=None) | isinstance(d, dict)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "check",
      "function": "matching_keys",
      "default_value": "lambda x, y: x == y",
      "usage_pattern": "simple_usage",
      "validation_code": "check=lambda",
      "transformation_code": "check=lambda x, y: x == y, key=None) -> list: | matching_keys(x, d: dict, check=lambda x, y: x == y, key=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "key",
      "function": "matching_keys",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "key=None | key = identity",
      "transformation_code": "key=None) -> list: | key = identity | matching_keys(x, d: dict, check=lambda x, y: x == y, key=None) | for (key, value)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "matching_indices",
      "default_value": null,
      "usage_pattern": "equality_check",
      "validation_code": "x == y",
      "transformation_code": "x == y, key=None) -> list: | matching_indices(x, l, check=lambda x, y: x == y, key=None) | matching_keys(x, l, check=check)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "l",
      "function": "matching_indices",
      "default_value": null,
      "usage_pattern": "indexing,type_check",
      "validation_code": "isinstance(l, dict) | check=l",
      "transformation_code": "matching_indices(x, l, check=lambda x, y: x == y, key=None) | isinstance(l, dict)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "check",
      "function": "matching_indices",
      "default_value": "lambda x, y: x == y",
      "usage_pattern": "boolean_condition",
      "validation_code": "check=lambda | check=check",
      "transformation_code": "check=lambda x, y: x == y, key=None) -> list: | check=check) | matching_indices(x, l, check=lambda x, y: x == y, key=None) | matching_keys(x, l, check=check)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "key",
      "function": "matching_indices",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "key=None | key = identity",
      "transformation_code": "key=None) -> list: | key = identity | matching_indices(x, l, check=lambda x, y: x == y, key=None) | check(key(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "iterable",
      "function": "gather",
      "default_value": null,
      "usage_pattern": "indexing",
      "validation_code": "assert is_iterable(iterable), \"The 'iterable' parameter you fed in is not an iterable!\"",
      "transformation_code": "gather(iterable, *indices, as_dict=False, strict=True) | is_iterable(iterable)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "as_dict",
      "function": "gather",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "as_dict=False",
      "transformation_code": "as_dict=False, strict=True): | gather(iterable, *indices, as_dict=False, strict=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "strict",
      "function": "gather",
      "default_value": true,
      "usage_pattern": "type_check",
      "validation_code": "assert isinstance(strict, bool) | isinstance(strict, bool) | strict=True",
      "transformation_code": "strict=True): | gather(iterable, *indices, as_dict=False, strict=True) | isinstance(strict, bool)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "pop_gather",
      "default_value": null,
      "usage_pattern": "indexing",
      "validation_code": "",
      "transformation_code": "pop_gather(x, *indices) | gather(x, indices)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "frames_back",
      "function": "gather_vars",
      "default_value": 1,
      "usage_pattern": "equality_check,boolean_condition",
      "validation_code": "assert frames_back == ... or frames_back >= 1, \"gather_vars is useless if we don't look at least one frame back\" | frames_back=1 | frames_back = ...",
      "transformation_code": "frames_back=1, skip_missing=False, as_dict=True): | frames_back = ... functionality for getting ALL frames back - we want a min_frames_back and max_frames_back | gather_vars(*var_names, frames_back=1, skip_missing=False, as_dict=True) | range(min_frames_back)",
      "error_handling": "",
      "documentation": "frames_back: An integer specifying the number of frames to go back to find the correct scope. Default is 1."
    },
    {
      "arg_name": "skip_missing",
      "function": "gather_vars",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "assert not skip_missing, 'rp.gather_vars: Cannot have as_dict and skip_missing. If we return a list of vars instead of a dict, there cannot be any gaps' | assert not skip_missing | skip_missing=False",
      "transformation_code": "skip_missing=False, as_dict=True): | skip_missing=True) | gather_vars(*var_names, frames_back=1, skip_missing=False, as_dict=True) | gather_vars('a b c',skip_missing=True)",
      "error_handling": "",
      "documentation": "skip_missing: If True, the output will simply omit any variables it can't find. Otherwise, it will throw an error if any variables are missing."
    },
    {
      "arg_name": "as_dict",
      "function": "gather_vars",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "assert not skip_missing, 'rp.gather_vars: Cannot have as_dict and skip_missing. If we return a list of vars instead of a dict, there cannot be any gaps' | as_dict=True",
      "transformation_code": "as_dict=True): | gather_vars(*var_names, frames_back=1, skip_missing=False, as_dict=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "gather_attrs",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "gather_attrs(x, *attrs, as_dict=False) | as_easydict({name: getattr(x, name)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "as_dict",
      "function": "gather_attrs",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "as_dict=False",
      "transformation_code": "as_dict=False): | gather_attrs(x, *attrs, as_dict=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "d",
      "function": "destructure",
      "default_value": null,
      "usage_pattern": "indexing",
      "validation_code": "y = d | z = d | blue = d",
      "transformation_code": "d = {'x': 1, 'y': 2, 'z': 3} | d = {'p': {'q': 4}} | destructure(d: dict) | hold (for example,\n    in ptpython or the default python repl. Jupyter and rp work fine though.)",
      "error_handling": "try_except",
      "documentation": "d (for example,"
    },
    {
      "arg_name": "func",
      "function": "gather_args",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "func\n        >>> def | placeholder = func",
      "transformation_code": "gather_args(func, *args, frames_back=1, **kwargs) | gather_args(example_func, frames_back=1)",
      "error_handling": "",
      "documentation": "func (callable)"
    },
    {
      "arg_name": "frames_back",
      "function": "gather_args",
      "default_value": 1,
      "usage_pattern": "addition",
      "validation_code": "assert frames_back >= 1, \"gather_args is useless if we don't look at least one frame back\" | frames_back=1 | frames_back=1",
      "transformation_code": "frames_back=1, **kwargs): | frames_back=1) | gather_args(func, *args, frames_back=1, **kwargs) | gather_args(example_func, frames_back=1)",
      "error_handling": "",
      "documentation": "frames_back (int, optional)"
    },
    {
      "arg_name": "func",
      "function": "gather_args_call",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "gather_args_call(func, *args, frames_back=1, **kwargs) | gather_args_call(example_func)",
      "error_handling": "",
      "documentation": "func (callable)"
    },
    {
      "arg_name": "frames_back",
      "function": "gather_args_call",
      "default_value": 1,
      "usage_pattern": "addition",
      "validation_code": "frames_back=1 | frames_back=frames_back",
      "transformation_code": "frames_back=1, **kwargs): | frames_back=frames_back + 1, **kwargs) | gather_args_call(func, *args, frames_back=1, **kwargs) | gather_args(func, *args, frames_back=frames_back + 1, **kwargs)",
      "error_handling": "",
      "documentation": "frames_back (int, optional)"
    },
    {
      "arg_name": "func",
      "function": "gather_args_wrap",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "gather_args_wrap(func, *, frames_back=1) | wraps(func)",
      "error_handling": "",
      "documentation": "func (callable)"
    },
    {
      "arg_name": "frames_back",
      "function": "gather_args_wrap",
      "default_value": 1,
      "usage_pattern": "addition",
      "validation_code": "frames_back=1 | frames_back=frames_back",
      "transformation_code": "frames_back=1): | frames_back=frames_back + 1, **kwargs) | gather_args_wrap(func, *, frames_back=1) | gather_args_call(func, *args, frames_back=frames_back + 1, **kwargs)",
      "error_handling": "",
      "documentation": "frames_back (int, optional)"
    },
    {
      "arg_name": "func",
      "function": "gather_args_bind",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "func_name = func",
      "transformation_code": "gather_args_bind(func, *args, frames_back=1, **kwargs) | getfullargspec(func)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "frames_back",
      "function": "gather_args_bind",
      "default_value": 1,
      "usage_pattern": "addition",
      "validation_code": "frames_back=1 | frames_back=frames_back",
      "transformation_code": "frames_back=1, **kwargs): | frames_back=frames_back + 1) | gather_args_bind(func, *args, frames_back=1, **kwargs) | gather_args(func, *args, **kwargs, frames_back=frames_back + 1)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "frames_back",
      "function": "get_current_function",
      "default_value": 0,
      "usage_pattern": "boolean_condition,addition,type_check",
      "validation_code": "isinstance(frames_back, int) | frames_back=0 | frames_back < 1",
      "transformation_code": "frames_back=0): | get_current_function(frames_back=0) | isinstance(frames_back, int)",
      "error_handling": "",
      "documentation": "frames_back (int, optional)"
    },
    {
      "arg_name": "frames_back",
      "function": "get_current_function_name",
      "default_value": 0,
      "usage_pattern": "addition",
      "validation_code": "frames_back=0",
      "transformation_code": "frames_back=0): | get_current_function_name(frames_back=0) | get_current_function(frames_back + 1)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "frames_back",
      "function": "gather_args_recursive_call",
      "default_value": 0,
      "usage_pattern": "addition",
      "validation_code": "frames_back=0 | frames_back=frames_back",
      "transformation_code": "frames_back=0, **kwargs): | frames_back=frames_back + 1, **kwargs) | gather_args_recursive_call(*args, frames_back=0, **kwargs) | get_current_function(frames_back)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "value",
      "function": "replace_if_none",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "value = eval",
      "transformation_code": "value = eval(target, frame.f_locals) | replace_if_none(value)",
      "error_handling": "try_except",
      "documentation": "value: any"
    },
    {
      "arg_name": "func",
      "function": "squelch_call",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "squelch_call(func, *args, exception_types=(Exception,)",
      "error_handling": "try_except",
      "documentation": "func (callable)"
    },
    {
      "arg_name": "exception_types",
      "function": "squelch_call",
      "default_value": "(Exception,)",
      "usage_pattern": "iteration,type_check",
      "validation_code": "assert is_iterable(exception_types) | assert all((isinstance(x, type) and issubclass(x, BaseException) for x in exception_types)) | isinstance(exception_types, type)",
      "transformation_code": "exception_types=(Exception,), on_exception=identity, **kwargs): | exception_types=ZeroDivisionError, on_exception=lambda e: \"Cannot divide by zero\") | squelch_call(func, *args, exception_types=(Exception,) | squelch_call(divide, 10, 0, exception_types=ZeroDivisionError, on_exception=lambda e: \"Cannot divide by zero\")",
      "error_handling": "try_except",
      "documentation": "exception_types (type or iterable of types, optional)"
    },
    {
      "arg_name": "on_exception",
      "function": "squelch_call",
      "default_value": "<identity>",
      "usage_pattern": "simple_usage",
      "validation_code": "on_exception=identity | on_exception=lambda",
      "transformation_code": "on_exception=identity, **kwargs): | on_exception=lambda e: \"Cannot divide by zero\") | squelch_call(divide, 10, 0, exception_types=ZeroDivisionError, on_exception=lambda e: \"Cannot divide by zero\")",
      "error_handling": "try_except",
      "documentation": "on_exception (callable, optional)"
    },
    {
      "arg_name": "func",
      "function": "squelch_wrap",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "squelch_wrap(func, exception_types=(Exception,) | wraps(func)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "exception_types",
      "function": "squelch_wrap",
      "default_value": "(Exception,)",
      "usage_pattern": "simple_usage",
      "validation_code": "exception_types=exception_types",
      "transformation_code": "exception_types=(Exception,), on_exception=identity): | exception_types=exception_types, on_exception=on_exception, **kwargs) | squelch_wrap(func, exception_types=(Exception,) | squelch_call(func, *args, exception_types=exception_types, on_exception=on_exception, **kwargs)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "on_exception",
      "function": "squelch_wrap",
      "default_value": "<identity>",
      "usage_pattern": "simple_usage",
      "validation_code": "on_exception=identity | on_exception=on_exception",
      "transformation_code": "on_exception=identity): | on_exception=on_exception, **kwargs) | squelch_call(func, *args, exception_types=exception_types, on_exception=on_exception, **kwargs)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "module",
      "function": "rebind_globals_to_module",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert is_a_module(module), 'rebind_globals_to_module is a decorator' | module = obj.__module__",
      "transformation_code": "module = obj.__module__ | rebind_globals_to_module(module, *, monkey_patch=False) | is_a_module(module)",
      "error_handling": "",
      "documentation": "module: The target module to bind the globals to."
    },
    {
      "arg_name": "monkey_patch",
      "function": "rebind_globals_to_module",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "monkey_patch=False",
      "transformation_code": "monkey_patch=False): | rebind_globals_to_module(module, *, monkey_patch=False)",
      "error_handling": "",
      "documentation": "monkey_patch: If True, adds the object to the module."
    },
    {
      "arg_name": "func",
      "function": "globalize_locals",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "frame.f_code == func",
      "transformation_code": "globalize_locals(func) | wraps(func)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "input_dict",
      "function": "_filter_dict_via_fzf",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "",
      "transformation_code": "_filter_dict_via_fzf(input_dict, *, preview=None) | list(input_dict.items()",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "preview",
      "function": "_filter_dict_via_fzf",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "preview=None | preview=preview",
      "transformation_code": "preview=None): | preview=preview) | _filter_dict_via_fzf(input_dict, *, preview=None) | _iterfzf(display_lines, multi=True, exact=True, preview=preview)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "l",
      "function": "list_to_index_dict",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "list_to_index_dict(l: list) | enumerate(l)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "d",
      "function": "invert_dict",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "",
      "transformation_code": "invert_dict(d: dict, bijection=True, precedence='last') | d (dict)",
      "error_handling": "",
      "documentation": "d (dict)"
    },
    {
      "arg_name": "bijection",
      "function": "invert_dict",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "bijection=True | bijection=False",
      "transformation_code": "bijection=True, precedence='last') -> dict: | bijection=False) | invert_dict(d: dict, bijection=True, precedence='last') | invert_dict({0: 'a', 1: 'a', 2: 'b'}, bijection=False)",
      "error_handling": "",
      "documentation": "bijection (bool, optional)"
    },
    {
      "arg_name": "precedence",
      "function": "invert_dict",
      "default_value": "last",
      "usage_pattern": "equality_check,boolean_condition",
      "validation_code": "assert precedence in ['first', 'last']",
      "transformation_code": "precedence='last') -> dict: | precedence == 'first': | invert_dict(d: dict, bijection=True, precedence='last')",
      "error_handling": "",
      "documentation": "precedence (str)"
    },
    {
      "arg_name": "l",
      "function": "invert_list_to_dict",
      "default_value": null,
      "usage_pattern": "length_check",
      "validation_code": "assert len(set(l)) == len(l), 'r.dict_of_values_to_indices: l contains duplicate values, so we cannot return a 1-to-1 function",
      "transformation_code": "invert_list_to_dict(l: list) | len(set(l)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "d",
      "function": "dict_to_list",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "",
      "transformation_code": "dict_to_list(d: dict) | gather(d, sorted(d.keys()",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "list_set",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "list_set(x) | list(set(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "d",
      "function": "display_dict",
      "default_value": null,
      "usage_pattern": "indexing,method_call",
      "validation_code": "key_color=d | arrow_color=d | value_color=d",
      "transformation_code": "display_dict(d: dict, key_color=default_display_key_color, arrow_color=default_display_arrow_color, value_color=default_display_value_color, clip_width=False, post_processor=identity, key_sorter=sorted, print_it=True, arrow=' --> ') | display_dict({'name': 'Zed', 'age': 39, 'height': 6 * 12 + 2})",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "key_color",
      "function": "display_dict",
      "default_value": "<default_display_key_color>",
      "usage_pattern": "simple_usage",
      "validation_code": "key_color=default_display_key_color",
      "transformation_code": "key_color=default_display_key_color, arrow_color=default_display_arrow_color, value_color=default_display_value_color, clip_width=False, post_processor=identity, key_sorter=sorted, print_it=True, arrow=' --> ') -> None: | display_dict(d: dict, key_color=default_display_key_color, arrow_color=default_display_arrow_color, value_color=default_display_value_color, clip_width=False, post_processor=identity, key_sorter=sorted, print_it=True, arrow=' --> ') | post_processor('\\n'.join((key_color(key)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "arrow_color",
      "function": "display_dict",
      "default_value": "<default_display_arrow_color>",
      "usage_pattern": "simple_usage",
      "validation_code": "arrow_color=default_display_arrow_color",
      "transformation_code": "arrow_color=default_display_arrow_color, value_color=default_display_value_color, clip_width=False, post_processor=identity, key_sorter=sorted, print_it=True, arrow=' --> ') -> None: | display_dict(d: dict, key_color=default_display_key_color, arrow_color=default_display_arrow_color, value_color=default_display_value_color, clip_width=False, post_processor=identity, key_sorter=sorted, print_it=True, arrow=' --> ')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "value_color",
      "function": "display_dict",
      "default_value": "<default_display_value_color>",
      "usage_pattern": "simple_usage",
      "validation_code": "value_color=default_display_value_color",
      "transformation_code": "value_color=default_display_value_color, clip_width=False, post_processor=identity, key_sorter=sorted, print_it=True, arrow=' --> ') -> None: | display_dict(d: dict, key_color=default_display_key_color, arrow_color=default_display_arrow_color, value_color=default_display_value_color, clip_width=False, post_processor=identity, key_sorter=sorted, print_it=True, arrow=' --> ')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "clip_width",
      "function": "display_dict",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "clip_width=False",
      "transformation_code": "clip_width=False, post_processor=identity, key_sorter=sorted, print_it=True, arrow=' --> ') -> None: | display_dict(d: dict, key_color=default_display_key_color, arrow_color=default_display_arrow_color, value_color=default_display_value_color, clip_width=False, post_processor=identity, key_sorter=sorted, print_it=True, arrow=' --> ')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "post_processor",
      "function": "display_dict",
      "default_value": "<identity>",
      "usage_pattern": "simple_usage",
      "validation_code": "post_processor=identity",
      "transformation_code": "post_processor=identity, key_sorter=sorted, print_it=True, arrow=' --> ') -> None: | display_dict(d: dict, key_color=default_display_key_color, arrow_color=default_display_arrow_color, value_color=default_display_value_color, clip_width=False, post_processor=identity, key_sorter=sorted, print_it=True, arrow=' --> ')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "key_sorter",
      "function": "display_dict",
      "default_value": "<sorted>",
      "usage_pattern": "iteration",
      "validation_code": "key_sorter=sorted",
      "transformation_code": "key_sorter=sorted, print_it=True, arrow=' --> ') -> None: | display_dict(d: dict, key_color=default_display_key_color, arrow_color=default_display_arrow_color, value_color=default_display_value_color, clip_width=False, post_processor=identity, key_sorter=sorted, print_it=True, arrow=' --> ')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "print_it",
      "function": "display_dict",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "print_it=True",
      "transformation_code": "print_it=True, arrow=' --> ') -> None: | display_dict(d: dict, key_color=default_display_key_color, arrow_color=default_display_arrow_color, value_color=default_display_value_color, clip_width=False, post_processor=identity, key_sorter=sorted, print_it=True, arrow=' --> ') | return (print if print_it else identity)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "arrow",
      "function": "display_dict",
      "default_value": " --> ",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "arrow=' --> ') -> None: | display_dict(d: dict, key_color=default_display_key_color, arrow_color=default_display_arrow_color, value_color=default_display_value_color, clip_width=False, post_processor=identity, key_sorter=sorted, print_it=True, arrow=' --> ') | arrow_color(arrow)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "l",
      "function": "display_list",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "d=l",
      "transformation_code": "display_list(l: list, key_color=default_display_key_color, arrow_color=default_display_arrow_color, value_color=default_display_value_color, print_it=True) | display_dict(d=list_to_index_dict(l)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "key_color",
      "function": "display_list",
      "default_value": "<default_display_key_color>",
      "usage_pattern": "simple_usage",
      "validation_code": "key_color=default_display_key_color | key_color=key_color",
      "transformation_code": "key_color=default_display_key_color, arrow_color=default_display_arrow_color, value_color=default_display_value_color, print_it=True) -> None: | key_color=key_color, arrow_color=arrow_color, value_color=value_color, print_it=print_it) | display_list(l: list, key_color=default_display_key_color, arrow_color=default_display_arrow_color, value_color=default_display_value_color, print_it=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "arrow_color",
      "function": "display_list",
      "default_value": "<default_display_arrow_color>",
      "usage_pattern": "simple_usage",
      "validation_code": "arrow_color=default_display_arrow_color | arrow_color=arrow_color",
      "transformation_code": "arrow_color=default_display_arrow_color, value_color=default_display_value_color, print_it=True) -> None: | arrow_color=arrow_color, value_color=value_color, print_it=print_it) | display_list(l: list, key_color=default_display_key_color, arrow_color=default_display_arrow_color, value_color=default_display_value_color, print_it=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "value_color",
      "function": "display_list",
      "default_value": "<default_display_value_color>",
      "usage_pattern": "simple_usage",
      "validation_code": "value_color=default_display_value_color | value_color=value_color",
      "transformation_code": "value_color=default_display_value_color, print_it=True) -> None: | value_color=value_color, print_it=print_it) | display_list(l: list, key_color=default_display_key_color, arrow_color=default_display_arrow_color, value_color=default_display_value_color, print_it=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "print_it",
      "function": "display_list",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "print_it=True | print_it=print_it",
      "transformation_code": "print_it=True) -> None: | print_it=print_it) | display_list(l: list, key_color=default_display_key_color, arrow_color=default_display_arrow_color, value_color=default_display_value_color, print_it=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "markdown",
      "function": "display_markdown",
      "default_value": null,
      "usage_pattern": "boolean_condition,method_call",
      "validation_code": "markdown = load_text_file",
      "transformation_code": "markdown = load_text_file(markdown) | display_markdown(markdown: str) | file_exists(markdown)",
      "error_handling": "",
      "documentation": "markdown : str"
    },
    {
      "arg_name": "code",
      "function": "_get_carbon_url",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_get_carbon_url(code) | str(encoded_params)",
      "error_handling": "",
      "documentation": "code : str"
    },
    {
      "arg_name": "code",
      "function": "display_code_cell",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "code = code.rstrip | code_lines = code | escaped_code = code",
      "transformation_code": "code = code.rstrip() | code = code.replace('&', '&amp | display_code_cell(code, *, title='Code Cell', language=None) | display_code_cell(get_source_code(load_image)",
      "error_handling": "",
      "documentation": "code : str"
    },
    {
      "arg_name": "title",
      "function": "display_code_cell",
      "default_value": "Code Cell",
      "usage_pattern": "method_call",
      "validation_code": "",
      "transformation_code": "title='Code Cell', language=None): | title=\"Close\"></button>\\n                        <button class=\"control-button minimize-button\" id=\"minimize-button-{0}\" title=\"Minimize\"></button>\\n                    </div>\\n                    <div class=\"title-text\">{2}</div>\\n                    <button class=\"copy-button\" id=\"copy-button-{0}\">\\n                        <svg class=\"copy-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\\n                            <path d=\"M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm3 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 16H8V7h11v14z\"/>\\n                        </svg>\\n                        Copy\\n                    </button>\\n                    <button class=\"hamburger-menu\" id=\"hamburger-menu-{0}\" title=\"More options\">\\n                        <svg class=\"hamburger-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 14 14\">\\n                            <rect x=\"2\" y=\"3\" width=\"10\" height=\"2\" rx=\"1\"/>\\n                            <rect x=\"2\" y=\"6\" width=\"10\" height=\"2\" rx=\"1\"/>\\n                            <rect x=\"2\" y=\"9\" width=\"10\" height=\"2\" rx=\"1\"/>\\n                        </svg>\\n                    </button>\\n                </div>\\n                <div class=\"secondary-menu\" id=\"secondary-menu-{0}\">\\n                    <button id=\"minimize-all-{0}\">Minimize All</button>\\n                    <button id=\"maximize-all-{0}\">Maximize All</button>\\n                    <button id=\"close-all-{0}\">Close All</button>\\n                </div>\\n                <div class=\"code-cell-content\">\\n                    <div style=\"display:none\">\\n                        <pre><code class=\"python\">{3}</code></pre>\\n                    </div>\\n                    <div class=\"line-numbers-code\">\\n                        {4}\\n                    </div>\\n                </div>\\n            </div>\\n        </div>\\n        ' | display_code_cell(code, *, title='Code Cell', language=None) | fansi('\u250c' + title.center(string_width(code)",
      "error_handling": "",
      "documentation": "title : str"
    },
    {
      "arg_name": "language",
      "function": "display_code_cell",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "language=None | language = language",
      "transformation_code": "language=None): | language = language or 'python3' | display_code_cell(code, *, title='Code Cell', language=None) | with_line_numbers(fansi_pygments(code, language)",
      "error_handling": "",
      "documentation": "language: str"
    },
    {
      "arg_name": "x",
      "function": "_muted_stdout_write",
      "default_value": null,
      "usage_pattern": "length_check,type_check",
      "validation_code": "assert isinstance(x, str) | isinstance(x, str)",
      "transformation_code": "_muted_stdout_write(x: str) | isinstance(x, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "_translate_timezone",
      "default_value": null,
      "usage_pattern": "method_call,type_check",
      "validation_code": "assert isinstance(x, str) | isinstance(x, str) | x = x.upper",
      "transformation_code": "x = x.upper() | _translate_timezone(x) | isinstance(x, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "date",
      "function": "format_date",
      "default_value": null,
      "usage_pattern": "boolean_condition,method_call,type_check",
      "validation_code": "assert isinstance(date, datetime.datetime), 'Input must be a datetime object' | isinstance(date, datetime.datetime) | date = date.astimezone",
      "transformation_code": "date = date.astimezone(target_timezone) | date = '{date_part} at {time_part}'.format(date_part=date_part, time_part=time_part) | format_date(date, timezone=None, *, align=False) | print(format_date(ans)",
      "error_handling": "",
      "documentation": "date()"
    },
    {
      "arg_name": "timezone",
      "function": "format_date",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "timezone=None | timezone = _default_timezone | timezone = pytz.timezone",
      "transformation_code": "timezone=None, *, align=False): | timezone='UTC' | format_date(date, timezone=None, *, align=False) | timezone(_translate_timezone(timezone)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "align",
      "function": "format_date",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "align=False",
      "transformation_code": "align=False): | format_date(date, timezone=None, *, align=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "timezone",
      "function": "format_current_date",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "timezone=None | timezone=timezone",
      "transformation_code": "timezone=None): | timezone=timezone) | format_current_date(timezone=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "decorator",
      "function": "_method_decorator_metaclass",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_method_decorator_metaclass(decorator, docstring=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "docstring",
      "function": "_method_decorator_metaclass",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "docstring=None | output.__doc__ = docstring",
      "transformation_code": "docstring=None): | _method_decorator_metaclass(decorator, docstring=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "form",
      "function": "get_current_timezone",
      "default_value": "human",
      "usage_pattern": "simple_usage",
      "validation_code": "target = form | result = form",
      "transformation_code": "form='human'): | get_current_timezone(*, form='human') | as_form(timezone, form)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "object",
      "function": "rinsp",
      "default_value": null,
      "usage_pattern": "boolean_condition,method_call,length_check,iteration,addition,type_check",
      "validation_code": "isinstance(object, bytes) | isinstance(object, str) | isinstance(object, str)",
      "transformation_code": "object = object | object = object.__class__ | rinsp(object, search_or_show_documentation: bool=False, show_source_code: bool=False, show_summary: bool=False, max_str_lines: int=5, *, fansi=fansi) | rinsp(object, show_source_code=False, max_str_lines:int=5)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "search_or_show_documentation",
      "function": "rinsp",
      "default_value": false,
      "usage_pattern": "boolean_condition,type_check",
      "validation_code": "isinstance(search_or_show_documentation, str) | search_or_show_documentation = False",
      "transformation_code": "search_or_show_documentation = False or show_source_code or show_summary | rinsp(object, search_or_show_documentation: bool=False, show_source_code: bool=False, show_summary: bool=False, max_str_lines: int=5, *, fansi=fansi) | isinstance(search_or_show_documentation, str)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "show_source_code",
      "function": "rinsp",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "show_source_code=False",
      "transformation_code": "show_source_code=False, max_str_lines:int=5)\\n        TYPE: class 'function'\\n        FILE: module '__main__' from '/Users/Ryan/PycharmProjects/RyanBStandards_Python3.5/r.py'\\n        STR: <function rinsp at 0x109eb10d0>\" | rinsp(object, search_or_show_documentation: bool=False, show_source_code: bool=False, show_summary: bool=False, max_str_lines: int=5, *, fansi=fansi) | rinsp(object, show_source_code=False, max_str_lines:int=5)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "show_summary",
      "function": "rinsp",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "",
      "transformation_code": "rinsp(object, search_or_show_documentation: bool=False, show_source_code: bool=False, show_summary: bool=False, max_str_lines: int=5, *, fansi=fansi)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "max_str_lines",
      "function": "rinsp",
      "default_value": 5,
      "usage_pattern": "addition",
      "validation_code": "number_of_lines > max_str_lines",
      "transformation_code": "rinsp(object, search_or_show_documentation: bool=False, show_source_code: bool=False, show_summary: bool=False, max_str_lines: int=5, *, fansi=fansi) | rinsp(object, show_source_code=False, max_str_lines:int=5)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "fansi",
      "function": "rinsp",
      "default_value": "<fansi>",
      "usage_pattern": "simple_usage",
      "validation_code": "fansi=fansi | continuation = fansi | continuation = fansi",
      "transformation_code": "fansi=fansi) -> None: | rinsp(object, search_or_show_documentation: bool=False, show_source_code: bool=False, show_summary: bool=False, max_str_lines: int=5, *, fansi=fansi) | print(fansi(tab + 'FILTERED: ', 'yellow', 'bold')",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "index",
      "function": "_cv_print_cam_props",
      "default_value": 0,
      "usage_pattern": "simple_usage",
      "validation_code": "index=0",
      "transformation_code": "index=0): | _cv_print_cam_props(index=0) | VideoCapture(index)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "webcam_index",
      "function": "load_image_from_webcam",
      "default_value": 0,
      "usage_pattern": "simple_usage",
      "validation_code": "assert success, 'Failed to take a photo with webcam #%i' % webcam_index | assert img is not None, 'Failed to take a photo with webcam #%i' % webcam_index",
      "transformation_code": "load_image_from_webcam(webcam_index: int=0, *, width: int=None, height: int=None, shutup=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "width",
      "function": "load_image_from_webcam",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "width=1920",
      "transformation_code": "width=1920 and height=1080, it fixed the problem, letting it take 1080p pictures | load_image_from_webcam(webcam_index: int=0, *, width: int=None, height: int=None, shutup=False) | set(cv2.CAP_PROP_FRAME_WIDTH, width)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "height",
      "function": "load_image_from_webcam",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "height=1080",
      "transformation_code": "height=1080, it fixed the problem, letting it take 1080p pictures | load_image_from_webcam(webcam_index: int=0, *, width: int=None, height: int=None, shutup=False) | set(cv2.CAP_PROP_FRAME_HEIGHT, height)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "shutup",
      "function": "load_image_from_webcam",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "shutup=False",
      "transformation_code": "shutup=False): | load_image_from_webcam(webcam_index: int=0, *, width: int=None, height: int=None, shutup=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "monitor",
      "function": "load_image_from_screenshot_via_mss",
      "default_value": 0,
      "usage_pattern": "simple_usage",
      "validation_code": "monitor=0",
      "transformation_code": "monitor=0, *, cursor: bool=False): | load_image_from_screenshot_via_mss(monitor=0, *, cursor: bool=False) | grab(sct.monitors[monitor])",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "cursor",
      "function": "load_image_from_screenshot_via_mss",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "cursor=True | with_cursor=cursor",
      "transformation_code": "cursor=True) | cursor=cursor) as sct: | load_image_from_screenshot_via_mss(monitor=0, *, cursor: bool=False) | load_image_from_screenshot_via_mss(cursor=True)",
      "error_handling": "",
      "documentation": "cursor: If true, included the cursor in the image"
    },
    {
      "arg_name": "time_in_seconds",
      "function": "record_mono_audio",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "record_mono_audio(time_in_seconds, samplerate=default_samplerate, stream=None, chunk_size=default_audio_stream_chunk_size) | ceil(time_in_seconds * samplerate / chunk_size)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "samplerate",
      "function": "record_mono_audio",
      "default_value": "<default_samplerate>",
      "usage_pattern": "simple_usage",
      "validation_code": "samplerate=default_samplerate",
      "transformation_code": "samplerate=default_samplerate, stream=None, chunk_size=default_audio_stream_chunk_size): | record_mono_audio(time_in_seconds, samplerate=default_samplerate, stream=None, chunk_size=default_audio_stream_chunk_size) | open(format=pyaudio.paInt16, channels=1, rate=default_samplerate, input=True, frames_per_buffer=default_audio_stream_chunk_size)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "stream",
      "function": "record_mono_audio",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check,method_call",
      "validation_code": "stream=None | stream = pyaudio.PyAudio | stream = default_audio_mono_input_stream",
      "transformation_code": "stream=None, chunk_size=default_audio_stream_chunk_size): | stream = pyaudio.PyAudio().open(format=pyaudio.paInt16, channels=1, rate=default_samplerate, input=True, frames_per_buffer=default_audio_stream_chunk_size) | record_mono_audio(time_in_seconds, samplerate=default_samplerate, stream=None, chunk_size=default_audio_stream_chunk_size) | open(format=pyaudio.paInt16, channels=1, rate=default_samplerate, input=True, frames_per_buffer=default_audio_stream_chunk_size)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "chunk_size",
      "function": "record_mono_audio",
      "default_value": "<default_audio_stream_chunk_size>",
      "usage_pattern": "simple_usage",
      "validation_code": "chunk_size=default_audio_stream_chunk_size | num_frames=chunk_size",
      "transformation_code": "chunk_size=default_audio_stream_chunk_size): | record_mono_audio(time_in_seconds, samplerate=default_samplerate, stream=None, chunk_size=default_audio_stream_chunk_size) | open(format=pyaudio.paInt16, channels=1, rate=default_samplerate, input=True, frames_per_buffer=default_audio_stream_chunk_size)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "message",
      "function": "MIDI_output",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "MIDI_output(message: list) | send_message(message)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "controller_number",
      "function": "MIDI_control",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "MIDI_control(controller_number: int, value: float) | MIDI_output([176, controller_number, int(float_clamp(value, 0, 1)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "value",
      "function": "MIDI_control",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "MIDI_control(controller_number: int, value: float) | MIDI_output([176, controller_number, int(float_clamp(value, 0, 1)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "coarse_controller_number",
      "function": "MIDI_control_precisely",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "MIDI_control_precisely(coarse_controller_number: int, fine_controller_number: int, value: float) | MIDI_output([176, coarse_controller_number, int(value)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "fine_controller_number",
      "function": "MIDI_control_precisely",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "MIDI_control_precisely(coarse_controller_number: int, fine_controller_number: int, value: float) | MIDI_output([176, fine_controller_number, int(value % 1 * 127)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "value",
      "function": "MIDI_control_precisely",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "value = float_clamp",
      "transformation_code": "value = float_clamp(value, 0, 1) | MIDI_control_precisely(coarse_controller_number: int, fine_controller_number: int, value: float) | float_clamp(value, 0, 1)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "controller_number",
      "function": "MIDI_jiggle_control",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "MIDI_jiggle_control(controller_number: int) | MIDI_control(controller_number, 0)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "note",
      "function": "MIDI_note_on",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "MIDI_note_on(note: int, velocity: float=1) | MIDI_output([144, int_clamp(note, 0, 255)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "velocity",
      "function": "MIDI_note_on",
      "default_value": 1,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "MIDI_note_on(note: int, velocity: float=1) | int(velocity * 127)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "note",
      "function": "MIDI_note_off",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "MIDI_note_off(note: int, velocity: float=0) | MIDI_output([128, note, int(velocity * 127)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "velocity",
      "function": "MIDI_note_off",
      "default_value": 0,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "MIDI_note_off(note: int, velocity: float=0) | MIDI_output([128, note, int(velocity * 127)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "\u0394semitones",
      "function": "MIDI_pitch_bend",
      "default_value": null,
      "usage_pattern": "addition",
      "validation_code": "\u0394semitones = float_clamp",
      "transformation_code": "\u0394semitones = float_clamp(\u0394semitones, MIDI_pitch_bend_min, MIDI_pitch_bend_max) | MIDI_pitch_bend(\u0394semitones: float) | float_clamp(\u0394semitones, MIDI_pitch_bend_min, MIDI_pitch_bend_max)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "value",
      "function": "MIDI_breath",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "MIDI_breath(value: float) | MIDI_output([2, int(float_clamp(value, 0, 1)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "\u0192_callback",
      "function": "MIDI_input",
      "default_value": "<print>",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "MIDI_input(\u0192_callback: callable=print) | set_callback(lambda x, y: \u0192_callback(x[0])",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "mycmp",
      "function": "cmp_to_key",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "cmp_to_key(mycmp)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "sign",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "x > zero | x < zero",
      "transformation_code": "sign(x, zero=0)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "zero",
      "function": "sign",
      "default_value": 0,
      "usage_pattern": "simple_usage",
      "validation_code": "zero=0 | x > zero | x < zero",
      "transformation_code": "zero=0): | sign(x, zero=0)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "file_name",
      "function": "load_pickled_value",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "load_pickled_value(file_name: str) | load(open(file_name, 'rb')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "file_name",
      "function": "save_pickled_value",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "save_pickled_value(file_name: str, *variables) | open(file_name, 'wb')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "file_path",
      "function": "string_to_text_file",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "file_path = get_absolute_path",
      "transformation_code": "file_path = get_absolute_path(file_path) | string_to_text_file(file_path: str, string: str) | string_to_text_file(file_path, string)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "string",
      "function": "string_to_text_file",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "string_to_text_file(file_path: str, string: str) | string_to_text_file(file_path, string)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "string",
      "function": "save_text_file",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "save_text_file(string, file_path) | save_text_file(string, text_file)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "file_path",
      "function": "save_text_file",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "save_text_file(string, file_path) | string_to_text_file(file_path, string)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "file_path",
      "function": "text_file_to_string",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "assert file_exists(file_path), 'File %s does not exist' % file_path | file_path = get_absolute_path | file_path = get_absolute_path",
      "transformation_code": "file_path = get_absolute_path(file_path) | file_path = get_absolute_path(file_path) | text_file_to_string(file_path: str, use_cache=False) | text_file_to_string(file_path)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "use_cache",
      "function": "text_file_to_string",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "use_cache=False | use_cache=False",
      "transformation_code": "use_cache=False) -> str: | use_cache=False) | text_file_to_string(file_path: str, use_cache=False) | text_file_to_string(file_path, use_cache=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "file_path",
      "function": "load_file_lines",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "load_file_lines(file_path, use_cache=False) | line_split(text_file_to_string(file_path, use_cache)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "use_cache",
      "function": "load_file_lines",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "use_cache=False",
      "transformation_code": "use_cache=False): | load_file_lines(file_path, use_cache=False) | line_split(text_file_to_string(file_path, use_cache)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "lines",
      "function": "save_file_lines",
      "default_value": null,
      "usage_pattern": "iteration",
      "validation_code": "assert is_iterable(lines)",
      "transformation_code": "lines = [str(x) for x in lines] | save_file_lines(lines, file_path) | is_iterable(lines)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "file_path",
      "function": "save_file_lines",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "save_file_lines(lines, file_path) | string_to_text_file(file_path, string)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "use_cache",
      "function": "load_text_files",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "use_cache=False | use_cache=use_cache",
      "transformation_code": "use_cache=False, strict=True, num_threads=None, show_progress=False, lazy=False): | use_cache=use_cache) | load_text_files(*paths, use_cache=False, strict=True, num_threads=None, show_progress=False, lazy=False) | text_file_to_string(path, use_cache=use_cache)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "strict",
      "function": "load_text_files",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "strict=True | strict=strict",
      "transformation_code": "strict=True, num_threads=None, show_progress=False, lazy=False): | strict=strict, num_threads=num_threads, lazy=lazy) | load_text_files(*paths, use_cache=False, strict=True, num_threads=None, show_progress=False, lazy=False) | load_files(load_file, paths, show_progress=show_progress, strict=strict, num_threads=num_threads, lazy=lazy)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "num_threads",
      "function": "load_text_files",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "num_threads=None | num_threads=num_threads",
      "transformation_code": "num_threads=None, show_progress=False, lazy=False): | num_threads=num_threads, lazy=lazy) | load_text_files(*paths, use_cache=False, strict=True, num_threads=None, show_progress=False, lazy=False) | load_files(load_file, paths, show_progress=show_progress, strict=strict, num_threads=num_threads, lazy=lazy)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "show_progress",
      "function": "load_text_files",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "show_progress=False | show_progress=show_progress",
      "transformation_code": "show_progress=False, lazy=False): | show_progress = 'eta:Loading text files' | load_text_files(*paths, use_cache=False, strict=True, num_threads=None, show_progress=False, lazy=False) | load_files(load_file, paths, show_progress=show_progress, strict=strict, num_threads=num_threads, lazy=lazy)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "lazy",
      "function": "load_text_files",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "lazy=False | lazy=lazy",
      "transformation_code": "lazy=False): | lazy=lazy) | load_text_files(*paths, use_cache=False, strict=True, num_threads=None, show_progress=False, lazy=False) | load_files(load_file, paths, show_progress=show_progress, strict=strict, num_threads=num_threads, lazy=lazy)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "line",
      "function": "append_line_to_file",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "append_line_to_file(line: str, file_path: str) | string_to_text_file(file_path, line)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "file_path",
      "function": "append_line_to_file",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "append_line_to_file(line: str, file_path: str) | file_exists(file_path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "load_json",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "load_json(path, *, use_cache=False) | text_file_to_string(path, use_cache=use_cache)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "use_cache",
      "function": "load_json",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "use_cache=False | use_cache=use_cache",
      "transformation_code": "use_cache=False): | use_cache=use_cache) | load_json(path, *, use_cache=False) | text_file_to_string(path, use_cache=use_cache)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "use_cache",
      "function": "load_jsons",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "use_cache=False | use_cache=use_cache",
      "transformation_code": "use_cache=False, strict=True, num_threads=None, show_progress=False, lazy=False): | use_cache=use_cache) | load_jsons(*paths, use_cache=False, strict=True, num_threads=None, show_progress=False, lazy=False) | load_json(path, use_cache=use_cache)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "strict",
      "function": "load_jsons",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "strict=True | strict=strict",
      "transformation_code": "strict=True, num_threads=None, show_progress=False, lazy=False): | strict=strict, num_threads=num_threads, lazy=lazy) | load_jsons(*paths, use_cache=False, strict=True, num_threads=None, show_progress=False, lazy=False) | load_files(load_file, paths, show_progress=show_progress, strict=strict, num_threads=num_threads, lazy=lazy)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "num_threads",
      "function": "load_jsons",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "num_threads=None | num_threads=num_threads",
      "transformation_code": "num_threads=None, show_progress=False, lazy=False): | num_threads=num_threads, lazy=lazy) | load_jsons(*paths, use_cache=False, strict=True, num_threads=None, show_progress=False, lazy=False) | load_files(load_file, paths, show_progress=show_progress, strict=strict, num_threads=num_threads, lazy=lazy)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "show_progress",
      "function": "load_jsons",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "show_progress=False | show_progress=show_progress",
      "transformation_code": "show_progress=False, lazy=False): | show_progress = 'eta:Loading JSON files' | load_jsons(*paths, use_cache=False, strict=True, num_threads=None, show_progress=False, lazy=False) | load_files(load_file, paths, show_progress=show_progress, strict=strict, num_threads=num_threads, lazy=lazy)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "lazy",
      "function": "load_jsons",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "lazy=False | lazy=lazy",
      "transformation_code": "lazy=False): | lazy=lazy) | load_jsons(*paths, use_cache=False, strict=True, num_threads=None, show_progress=False, lazy=False) | load_files(load_file, paths, show_progress=show_progress, strict=strict, num_threads=num_threads, lazy=lazy)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "data",
      "function": "save_json",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "save_json(data, path, *, pretty=False, default=None) | dumps(data, **kwargs)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "save_json",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "save_json(data, path, *, pretty=False, default=None) | string_to_text_file(path, text)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "pretty",
      "function": "save_json",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "pretty=False",
      "transformation_code": "pretty=False, default=None): | save_json(data, path, *, pretty=False, default=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "default",
      "function": "save_json",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "default=None | default=default",
      "transformation_code": "default=None): | default=default) | save_json(data, path, *, pretty=False, default=None) | dict(default=default)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "file_path",
      "function": "load_tsv",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "load_tsv(file_path, *, show_progress=False, header=0, use_cache=False, sep='\\t', mode='normal', max_rows=None) | handy_hash((file_path, header, max_rows, sep, mode)",
      "error_handling": "",
      "documentation": "file_path (str)"
    },
    {
      "arg_name": "show_progress",
      "function": "load_tsv",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "show_progress=False | show_progress=True",
      "transformation_code": "show_progress=False, header=0, use_cache=False, sep='\\t', mode='normal', max_rows=None): | show_progress=True) | load_tsv(file_path, *, show_progress=False, header=0, use_cache=False, sep='\\t', mode='normal', max_rows=None) | load_tsv('urls_oct6.tsv', header='id size url title', use_cache=True, show_progress=True)",
      "error_handling": "",
      "documentation": "show_progress (bool)"
    },
    {
      "arg_name": "header",
      "function": "load_tsv",
      "default_value": 0,
      "usage_pattern": "method_call,type_check",
      "validation_code": "isinstance(header, str) | isinstance(header, int) | isinstance(header, list)",
      "transformation_code": "header=0, use_cache=False, sep='\\t', mode='normal', max_rows=None): | header='id size url title', use_cache=True, show_progress=True) | load_tsv(file_path, *, show_progress=False, header=0, use_cache=False, sep='\\t', mode='normal', max_rows=None) | load_tsv('urls_oct6.tsv', header='id size url title', use_cache=True, show_progress=True)",
      "error_handling": "",
      "documentation": "header (str, int, list, or None)"
    },
    {
      "arg_name": "use_cache",
      "function": "load_tsv",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "use_cache=False | use_cache=True",
      "transformation_code": "use_cache=False, sep='\\t', mode='normal', max_rows=None): | use_cache=True, show_progress=True) | load_tsv(file_path, *, show_progress=False, header=0, use_cache=False, sep='\\t', mode='normal', max_rows=None) | load_tsv('urls_oct6.tsv', header='id size url title', use_cache=True, show_progress=True)",
      "error_handling": "",
      "documentation": "use_cache: If True, will cache the result so you only have to load from drive once"
    },
    {
      "arg_name": "sep",
      "function": "load_tsv",
      "default_value": "\t",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "sep='\\t', mode='normal', max_rows=None): | load_tsv(file_path, *, show_progress=False, header=0, use_cache=False, sep='\\t', mode='normal', max_rows=None) | handy_hash((file_path, header, max_rows, sep, mode)",
      "error_handling": "",
      "documentation": "sep (str)"
    },
    {
      "arg_name": "mode",
      "function": "load_tsv",
      "default_value": "normal",
      "usage_pattern": "equality_check,boolean_condition",
      "validation_code": "assert mode in 'normal robust'.split()",
      "transformation_code": "mode='normal', max_rows=None): | mode == 'robust': | load_tsv(file_path, *, show_progress=False, header=0, use_cache=False, sep='\\t', mode='normal', max_rows=None) | handy_hash((file_path, header, max_rows, sep, mode)",
      "error_handling": "",
      "documentation": "mode (str)"
    },
    {
      "arg_name": "max_rows",
      "function": "load_tsv",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "max_rows=None | rows_collected >= max_rows",
      "transformation_code": "max_rows=None): | load_tsv(file_path, *, show_progress=False, header=0, use_cache=False, sep='\\t', mode='normal', max_rows=None) | handy_hash((file_path, header, max_rows, sep, mode)",
      "error_handling": "",
      "documentation": "max_rows (int, optional)"
    },
    {
      "arg_name": "file_path",
      "function": "load_parquet",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "load_parquet(file_path, *, show_progress=False, use_cache=False) | handy_hash(file_path)",
      "error_handling": "",
      "documentation": "file_path (str)"
    },
    {
      "arg_name": "show_progress",
      "function": "load_parquet",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "show_progress=False | show_progress=True",
      "transformation_code": "show_progress=False, use_cache=False): | show_progress=True) | load_parquet(file_path, *, show_progress=False, use_cache=False) | load_parquet('data.parquet', use_cache=True, show_progress=True)",
      "error_handling": "",
      "documentation": "show_progress (bool)"
    },
    {
      "arg_name": "use_cache",
      "function": "load_parquet",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "use_cache=False | use_cache=True | use_cache=False",
      "transformation_code": "use_cache=False): | use_cache=True, show_progress=True) | load_parquet(file_path, *, show_progress=False, use_cache=False) | load_parquet('data.parquet', use_cache=True, show_progress=True)",
      "error_handling": "",
      "documentation": "use_cache: If True, will cache the result so you only have to load from drive once"
    },
    {
      "arg_name": "path",
      "function": "load_yaml_file",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert file_exists(path)",
      "transformation_code": "load_yaml_file(path, use_cache=False) | file_exists(path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "use_cache",
      "function": "load_yaml_file",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "use_cache=False | use_cache=use_cache",
      "transformation_code": "use_cache=False): | use_cache=use_cache) | load_yaml_file(path, use_cache=False) | text_file_to_string(path, use_cache=use_cache)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "use_cache",
      "function": "load_yaml_files",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "use_cache=False | use_cache=use_cache",
      "transformation_code": "use_cache=False, strict=True, num_threads=None, show_progress=False, lazy=False): | use_cache=use_cache) | load_yaml_files(*paths, use_cache=False, strict=True, num_threads=None, show_progress=False, lazy=False) | load_yaml_file(path, use_cache=use_cache)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "strict",
      "function": "load_yaml_files",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "strict=True | strict=strict",
      "transformation_code": "strict=True, num_threads=None, show_progress=False, lazy=False): | strict=strict, num_threads=num_threads, lazy=lazy) | load_yaml_files(*paths, use_cache=False, strict=True, num_threads=None, show_progress=False, lazy=False) | load_files(load_file, paths, show_progress=show_progress, strict=strict, num_threads=num_threads, lazy=lazy)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "num_threads",
      "function": "load_yaml_files",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "num_threads=None | num_threads=num_threads",
      "transformation_code": "num_threads=None, show_progress=False, lazy=False): | num_threads=num_threads, lazy=lazy) | load_yaml_files(*paths, use_cache=False, strict=True, num_threads=None, show_progress=False, lazy=False) | load_files(load_file, paths, show_progress=show_progress, strict=strict, num_threads=num_threads, lazy=lazy)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "show_progress",
      "function": "load_yaml_files",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "show_progress=False | show_progress=show_progress",
      "transformation_code": "show_progress=False, lazy=False): | show_progress = 'eta:Loading YAML files' | load_yaml_files(*paths, use_cache=False, strict=True, num_threads=None, show_progress=False, lazy=False) | load_files(load_file, paths, show_progress=show_progress, strict=strict, num_threads=num_threads, lazy=lazy)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "lazy",
      "function": "load_yaml_files",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "lazy=False | lazy=lazy",
      "transformation_code": "lazy=False): | lazy=lazy) | load_yaml_files(*paths, use_cache=False, strict=True, num_threads=None, show_progress=False, lazy=False) | load_files(load_file, paths, show_progress=show_progress, strict=strict, num_threads=num_threads, lazy=lazy)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "string",
      "function": "parse_yaml",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "parse_yaml(string) | safe_load(string)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "src",
      "function": "parse_dyaml",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "parse_dyaml(src) | parse_dyaml_junctions(src)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "load_dyaml_file",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert file_exists(path)",
      "transformation_code": "load_dyaml_file(path: str) | file_exists(path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "touch_file",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "touch_file(path) | get_parent_folder(path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "is_iterable",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "isinstance(x, Iterable)",
      "transformation_code": "is_iterable(x) | isinstance(x, Iterable)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "iterable",
      "function": "deepcopy_multiply",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "deepcopy_multiply(iterable, factor: int) | deepcopy(iterable)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "factor",
      "function": "deepcopy_multiply",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "deepcopy_multiply(iterable, factor: int) | range(factor)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "equality_check",
      "function": "assert_equality",
      "default_value": "<identity>",
      "usage_pattern": "simple_usage",
      "validation_code": "equality_check=identity | base_check = equality_check | arg_check = equality_check",
      "transformation_code": "equality_check=identity): | assert_equality(*args, equality_check=identity)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "list_to_be_accessed",
      "function": "get_nested_value",
      "default_value": null,
      "usage_pattern": "indexing",
      "validation_code": "list_to_be_accessed = list_to_be_accessed",
      "transformation_code": "list_to_be_accessed = list_to_be_accessed[i] | get_nested_value(list_to_be_accessed, *address_int_list, ignore_errors: bool=False)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "ignore_errors",
      "function": "get_nested_value",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "",
      "transformation_code": "get_nested_value(list_to_be_accessed, *address_int_list, ignore_errors: bool=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "obj",
      "function": "get_nested_attr",
      "default_value": null,
      "usage_pattern": "indexing",
      "validation_code": "obj = obj | obj = getattr | obj = obj",
      "transformation_code": "obj = obj[name] | obj = getattr(obj, name) | get_nested_attr(obj, attr) | get_nested_attr(obj, 0)",
      "error_handling": "try_except",
      "documentation": "obj: The object to get the attribute from"
    },
    {
      "arg_name": "attr",
      "function": "get_nested_attr",
      "default_value": null,
      "usage_pattern": "indexing,type_check",
      "validation_code": "assert isinstance(attr, (str, int)), type(attr) | assert not '...' in attr, 'attr has syntax error - it has ... in it, only . and .. are allowed: ' + repr(attr) | isinstance(attr, (str, int)",
      "transformation_code": "attr = str(attr) | get_nested_attr(obj, attr) | notation (e.g., \"attr1.attr2.attr3\")",
      "error_handling": "try_except",
      "documentation": "attr: String with attribute names in dot notation (e.g., \"attr1.attr2.attr3\")"
    },
    {
      "arg_name": "command",
      "function": "shell_command",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "shell_command(command: str, *, stdin: str=None) | run(command, shell=True, capture_output=True, text=True, input=stdin)",
      "error_handling": "",
      "documentation": "command (str)"
    },
    {
      "arg_name": "stdin",
      "function": "shell_command",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "input=stdin",
      "transformation_code": "shell_command(command: str, *, stdin: str=None) | run(command, shell=True, capture_output=True, text=True, input=stdin)",
      "error_handling": "",
      "documentation": "stdin (str)"
    },
    {
      "arg_name": "use_cache",
      "function": "get_system_commands",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "use_cache=False",
      "transformation_code": "use_cache=False): | get_system_commands(*, use_cache=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "command",
      "function": "system_command_exists",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "isinstance(command, str) | than \n        >>> command",
      "transformation_code": "system_command_exists(command, *, use_cache=False) | system_command_exists(command)",
      "error_handling": "",
      "documentation": "command: The system command to check (string)."
    },
    {
      "arg_name": "use_cache",
      "function": "system_command_exists",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "use_cache=False | use_cache=False",
      "transformation_code": "use_cache=False): | use_cache=False): | system_command_exists(command, *, use_cache=False) | Results (1000 iterations, use_cache=False)",
      "error_handling": "",
      "documentation": "use_cache: Whether to use cached results if available (default"
    },
    {
      "arg_name": "path",
      "function": "add_to_env_path",
      "default_value": null,
      "usage_pattern": "boolean_condition,method_call,type_check",
      "validation_code": "isinstance(path, str) | path = os.path.dirname | path = os.environ.get",
      "transformation_code": "path = os.path.dirname(path) | path = os.environ.get('PATH', '') | add_to_env_path(path) | isinstance(path, str)",
      "error_handling": "",
      "documentation": "path (str)"
    },
    {
      "arg_name": "message",
      "function": "printed",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "printed(message, value_to_be_returned=None, end='\\n') | print(str(value_to_be_returned if value_to_be_returned is not None else message)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "value_to_be_returned",
      "function": "printed",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "value_to_be_returned=None",
      "transformation_code": "value_to_be_returned=None, end='\\n'): | printed(message, value_to_be_returned=None, end='\\n') | print(str(value_to_be_returned if value_to_be_returned is not None else message)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "end",
      "function": "printed",
      "default_value": "\n",
      "usage_pattern": "simple_usage",
      "validation_code": "end=end",
      "transformation_code": "end='\\n'): | end=end) | printed(message, value_to_be_returned=None, end='\\n')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "display_dot",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "display_dot(x, y=None, color='red', size=3, shape='o', block=False) | as_points_array([x])",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "y",
      "function": "display_dot",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "y=None",
      "transformation_code": "y=None, color='red', size=3, shape='o', block=False): | display_dot(x, y=None, color='red', size=3, shape='o', block=False) | plot([x], [y], marker=shape, markersize=size, color=color)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "color",
      "function": "display_dot",
      "default_value": "red",
      "usage_pattern": "simple_usage",
      "validation_code": "color=color",
      "transformation_code": "color='red', size=3, shape='o', block=False): | color=color) | display_dot(x, y=None, color='red', size=3, shape='o', block=False) | plot([x], [y], marker=shape, markersize=size, color=color)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "size",
      "function": "display_dot",
      "default_value": 3,
      "usage_pattern": "simple_usage",
      "validation_code": "size=3 | markersize=size",
      "transformation_code": "size=3, shape='o', block=False): | size=size, color=color) | display_dot(x, y=None, color='red', size=3, shape='o', block=False) | plot([x], [y], marker=shape, markersize=size, color=color)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "shape",
      "function": "display_dot",
      "default_value": "o",
      "usage_pattern": "simple_usage",
      "validation_code": "marker=shape",
      "transformation_code": "shape='o', block=False): | display_dot(x, y=None, color='red', size=3, shape='o', block=False) | plot([x], [y], marker=shape, markersize=size, color=color)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "block",
      "function": "display_dot",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "block=False | block=block",
      "transformation_code": "block=False): | block=block) | display_dot(x, y=None, color='red', size=3, shape='o', block=False) | display_update(block=block)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "display_path",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "display_path(path, *, color=None, alpha=1, marker=None, linestyle=None, block=False, **kwargs) | as_points_array(path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "color",
      "function": "display_path",
      "default_value": null,
      "usage_pattern": "none_check",
      "validation_code": "color=None | color=color",
      "transformation_code": "color=None, alpha=1, marker=None, linestyle=None, block=False, **kwargs): | color=color, alpha=alpha, marker=marker, linestyle=linestyle, **kwargs) | display_path(path, *, color=None, alpha=1, marker=None, linestyle=None, block=False, **kwargs) | plot(x, y, color=color, alpha=alpha, marker=marker, linestyle=linestyle, **kwargs)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "alpha",
      "function": "display_path",
      "default_value": 1,
      "usage_pattern": "simple_usage",
      "validation_code": "alpha=1 | alpha=alpha",
      "transformation_code": "alpha=1, marker=None, linestyle=None, block=False, **kwargs): | alpha=alpha, marker=marker, linestyle=linestyle, **kwargs) | display_path(path, *, color=None, alpha=1, marker=None, linestyle=None, block=False, **kwargs) | plot(x, y, color=color, alpha=alpha, marker=marker, linestyle=linestyle, **kwargs)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "marker",
      "function": "display_path",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "marker=None | marker=marker",
      "transformation_code": "marker=None, linestyle=None, block=False, **kwargs): | marker=marker, linestyle=linestyle, **kwargs) | display_path(path, *, color=None, alpha=1, marker=None, linestyle=None, block=False, **kwargs) | plot(x, y, color=color, alpha=alpha, marker=marker, linestyle=linestyle, **kwargs)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "linestyle",
      "function": "display_path",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "linestyle=None | linestyle=linestyle",
      "transformation_code": "linestyle=None, block=False, **kwargs): | linestyle=linestyle, **kwargs) | display_path(path, *, color=None, alpha=1, marker=None, linestyle=None, block=False, **kwargs) | plot(x, y, color=color, alpha=alpha, marker=marker, linestyle=linestyle, **kwargs)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "block",
      "function": "display_path",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "block=False",
      "transformation_code": "block=False, **kwargs): | display_path(path, *, color=None, alpha=1, marker=None, linestyle=None, block=False, **kwargs) | update_display(block)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "text",
      "function": "_translate_offline",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_translate_offline(text, to_language='ru') | translit(text, to_language)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "to_language",
      "function": "_translate_offline",
      "default_value": "ru",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "to_language='ru'): | _translate_offline(text, to_language='ru') | translit(text, to_language)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "text",
      "function": "translate",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "translate(text, dest='en', src='auto') | translate(text, dest, src)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "dest",
      "function": "translate",
      "default_value": "en",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "dest='en', src='auto'): | translate(text, dest='en', src='auto') | translate(text, dest, src)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "src",
      "function": "translate",
      "default_value": "auto",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "src='auto'): | translate(text, dest='en', src='auto') | translate(text, dest, src)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "key",
      "function": "sync_sorted",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check,iteration",
      "validation_code": "assert key is None or callable(key) or (is_iterable(key) and all((callable(x) or x is None for x in key))), 'The given key must be None, a key function, or a list of keys' | key=None | key=identity",
      "transformation_code": "key=None, reversed=False): | key=[None, str, None]) | sync_sorted(*lists_in_descending_sorting_priority, key=None, reversed=False) | sync_sorted([1, 1, 2], ['c', 'a', 'b'], [3, 2, 1], key=[None, str, None])",
      "error_handling": "",
      "documentation": "key (function or list of functions, optional)"
    },
    {
      "arg_name": "reversed",
      "function": "sync_sorted",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "reversed=False | reversed=True | reversed=True",
      "transformation_code": "reversed=False): | reversed=True) | sync_sorted(*lists_in_descending_sorting_priority, key=None, reversed=False) | sync_sorted([1, 1, 2], ['c', 'a', 'b'], reversed=True)",
      "error_handling": "",
      "documentation": "reversed (bool, optional)"
    },
    {
      "arg_name": "x",
      "function": "by_number",
      "default_value": null,
      "usage_pattern": "length_check",
      "validation_code": "",
      "transformation_code": "by_number(x) | return (len(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "sorted_by_number",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "sorted_by_number(x, *, reverse=False) | sorted(x, key=by_number, reverse=reverse)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "reverse",
      "function": "sorted_by_number",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "reverse=False | reverse=reverse",
      "transformation_code": "reverse=False): | reverse=reverse) | sorted_by_number(x, *, reverse=False) | sorted(x, key=by_number, reverse=reverse)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "sorted_by_len",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "sorted_by_len(x, *, reverse=False) | sorted(x, key=len, reverse=reverse)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "reverse",
      "function": "sorted_by_len",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "reverse=False | reverse=reverse",
      "transformation_code": "reverse=False): | reverse=reverse) | sorted_by_len(x, *, reverse=False) | sorted(x, key=len, reverse=reverse)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "sorted_by_attr",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "sorted_by_attr(x, attr, *, key=None, reverse=False) | sorted(x, key=new_key, reverse=reverse)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "attr",
      "function": "sorted_by_attr",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "sorted_by_attr(x, attr, *, key=None, reverse=False) | get_nested_attr(e, attr)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "key",
      "function": "sorted_by_attr",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "key=None | e = key | key=new_key",
      "transformation_code": "key=None, reverse=False): | key=new_key, reverse=reverse) | sorted_by_attr(x, attr, *, key=None, reverse=False) | sorted(x, key=new_key, reverse=reverse)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "reverse",
      "function": "sorted_by_attr",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "reverse=False | reverse=reverse",
      "transformation_code": "reverse=False): | reverse=reverse) | sorted_by_attr(x, attr, *, key=None, reverse=False) | sorted(x, key=new_key, reverse=reverse)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "dict",
      "function": "sorted_dict",
      "default_value": null,
      "usage_pattern": "indexing",
      "validation_code": "",
      "transformation_code": "sorted_dict(dict, *, key=None, reverse=False) | sorted(dict, key=key, reverse=reverse)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "key",
      "function": "sorted_dict",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "key=None | key=key",
      "transformation_code": "key=None, reverse=False): | key=key, reverse=reverse) | sorted_dict(dict, *, key=None, reverse=False) | sorted(dict, key=key, reverse=reverse)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "reverse",
      "function": "sorted_dict",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "reverse=False | reverse=reverse",
      "transformation_code": "reverse=False): | reverse=reverse) | sorted_dict(dict, *, key=None, reverse=False) | sorted(dict, key=key, reverse=reverse)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "string",
      "function": "_string_with_any",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "",
      "transformation_code": "_string_with_any(string, substrings, match_func, return_match=False) | detuple(substrings)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "substrings",
      "function": "_string_with_any",
      "default_value": null,
      "usage_pattern": "iteration,type_check",
      "validation_code": "isinstance(substrings, str) | substrings = detuple",
      "transformation_code": "substrings = detuple(substrings) | substrings = [substrings] | _string_with_any(string, substrings, match_func, return_match=False) | detuple(substrings)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "match_func",
      "function": "_string_with_any",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "",
      "transformation_code": "_string_with_any(string, substrings, match_func, return_match=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "return_match",
      "function": "_string_with_any",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "return_match=False",
      "transformation_code": "return_match=False): | _string_with_any(string, substrings, match_func, return_match=False)",
      "error_handling": "return_none",
      "documentation": ""
    },
    {
      "arg_name": "string",
      "function": "starts_with_any",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "starts_with_any(string, *prefixes, return_match=False) | _string_with_any(string, prefixes, str.startswith, return_match)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "return_match",
      "function": "starts_with_any",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "return_match=False",
      "transformation_code": "return_match=False): | starts_with_any(string, *prefixes, return_match=False) | _string_with_any(string, prefixes, str.startswith, return_match)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "string",
      "function": "ends_with_any",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "ends_with_any(string, *suffixes, return_match=False) | _string_with_any(string, suffixes, str.endswith, return_match)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "return_match",
      "function": "ends_with_any",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "return_match=False",
      "transformation_code": "return_match=False): | ends_with_any(string, *suffixes, return_match=False) | _string_with_any(string, suffixes, str.endswith, return_match)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "y",
      "function": "_contains_func_y",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "y = detuple",
      "transformation_code": "y = detuple(y) | y = [y] | _contains_func_y(y) | detuple(y)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "contains_any",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "assert hasattr(x, '__contains__'), 'x cannot contain anything. type(x)==' + repr(type(x))",
      "transformation_code": "contains_any(x, *y) | contains_any('texture','tex')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "contains_all",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "assert contains_all('texture','t', 'e', 'x') == True | assert contains_all('texture',['t', 'e', 'x']) == True | assert hasattr(x, '__contains__'), 'x cannot contain anything. type(x)==' + repr(type(x))",
      "transformation_code": "contains_all(x, *y) | contains_all('texture','t', 'e', 'x')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "in_any",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "",
      "transformation_code": "in_any(x, *y) | in_any('tex','texture', 'textbook')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "in_all",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "",
      "transformation_code": "in_all(x, *y) | in_all('tex','texture', 'textbook')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "array",
      "function": "contains_sort",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "contains_sort(array, *, key=lambda x: x, contains=lambda x, y: y in x, reverse=False) | sorted(array, key=functools.cmp_to_key(cmp)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "key",
      "function": "contains_sort",
      "default_value": "lambda x: x",
      "usage_pattern": "simple_usage",
      "validation_code": "key=lambda | ka = key | kb = key",
      "transformation_code": "key=lambda x: x, contains=lambda x, y: y in x, reverse=False): | key=functools.cmp_to_key(cmp), reverse=reverse) | contains_sort(array, *, key=lambda x: x, contains=lambda x, y: y in x, reverse=False) | sorted(array, key=functools.cmp_to_key(cmp)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "contains",
      "function": "contains_sort",
      "default_value": "lambda x, y: y in x",
      "usage_pattern": "boolean_condition",
      "validation_code": "contains=lambda",
      "transformation_code": "contains=lambda x, y: y in x, reverse=False): | contains_sort(array, *, key=lambda x: x, contains=lambda x, y: y in x, reverse=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "reverse",
      "function": "contains_sort",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "reverse=False | reverse=reverse",
      "transformation_code": "reverse=False): | reverse=reverse) | contains_sort(array, *, key=lambda x: x, contains=lambda x, y: y in x, reverse=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "full_range",
      "default_value": null,
      "usage_pattern": "boolean_condition,method_call,addition",
      "validation_code": "x=1 | x = x.astype | x = x",
      "transformation_code": "x=1): | x = x.astype(float) | full_range(x, min=0, max=1) | min(x)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "min",
      "function": "full_range",
      "default_value": 0,
      "usage_pattern": "simple_usage",
      "validation_code": "min=0",
      "transformation_code": "min=0, max=1): | full_range(x, min=0, max=1)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "max",
      "function": "full_range",
      "default_value": 1,
      "usage_pattern": "simple_usage",
      "validation_code": "max=1",
      "transformation_code": "max=1): | full_range(x, min=0, max=1)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "\u0192",
      "function": "sine_tone_sampler",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "\u0192=None | \u0192 = \u0192 | \u2188\u03bb = \u0192",
      "transformation_code": "\u0192=None, T=None, samplerate=None): | \u0192 = \u0192 or default_tone_frequency | sine_tone_sampler(\u0192=None, T=None, samplerate=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "T",
      "function": "sine_tone_sampler",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "T=None | T = T",
      "transformation_code": "T=None, samplerate=None): | T = T or default_tone_seconds | sine_tone_sampler(\u0192=None, T=None, samplerate=None) | sin(np.linspace(0, \u03c4 * \u2188\u03bb, int(T * (samplerate or default_samplerate)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "samplerate",
      "function": "sine_tone_sampler",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "samplerate=None | samplerate = samplerate",
      "transformation_code": "samplerate=None): | samplerate = samplerate or default_samplerate | sine_tone_sampler(\u0192=None, T=None, samplerate=None) | sin(np.linspace(0, \u03c4 * \u2188\u03bb, int(T * (samplerate or default_samplerate)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "\u0192",
      "function": "triangle_tone_sampler",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "\u0192=None",
      "transformation_code": "\u0192=None, T=None, samplerate=None): | triangle_tone_sampler(\u0192=None, T=None, samplerate=None) | arcsin(sine_tone_sampler(\u0192, T, samplerate)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "T",
      "function": "triangle_tone_sampler",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "T=None",
      "transformation_code": "T=None, samplerate=None): | triangle_tone_sampler(\u0192=None, T=None, samplerate=None) | arcsin(sine_tone_sampler(\u0192, T, samplerate)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "samplerate",
      "function": "triangle_tone_sampler",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "samplerate=None",
      "transformation_code": "samplerate=None): | triangle_tone_sampler(\u0192=None, T=None, samplerate=None) | arcsin(sine_tone_sampler(\u0192, T, samplerate)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "\u0192",
      "function": "sawtooth_tone_sampler",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "\u0192=None | \u0192 = \u0192 | \u2188\u03bb = \u0192",
      "transformation_code": "\u0192=None, T=None, samplerate=None): | \u0192 = \u0192 or default_tone_frequency | sawtooth_tone_sampler(\u0192=None, T=None, samplerate=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "T",
      "function": "sawtooth_tone_sampler",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "T=None | T = T",
      "transformation_code": "T=None, samplerate=None): | T = T or default_tone_seconds | sawtooth_tone_sampler(\u0192=None, T=None, samplerate=None) | linspace(0, \u2188\u03bb, int(T * (samplerate or default_samplerate)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "samplerate",
      "function": "sawtooth_tone_sampler",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "samplerate=None | samplerate = samplerate",
      "transformation_code": "samplerate=None): | samplerate = samplerate or default_samplerate | sawtooth_tone_sampler(\u0192=None, T=None, samplerate=None) | linspace(0, \u2188\u03bb, int(T * (samplerate or default_samplerate)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "\u0192",
      "function": "square_tone_sampler",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "\u0192=None",
      "transformation_code": "\u0192=None, T=None, samplerate=None): | square_tone_sampler(\u0192=None, T=None, samplerate=None) | sign(sawtooth_tone_sampler(\u0192, T, samplerate)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "T",
      "function": "square_tone_sampler",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "T=None",
      "transformation_code": "T=None, samplerate=None): | square_tone_sampler(\u0192=None, T=None, samplerate=None) | sign(sawtooth_tone_sampler(\u0192, T, samplerate)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "samplerate",
      "function": "square_tone_sampler",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "samplerate=None",
      "transformation_code": "samplerate=None): | square_tone_sampler(\u0192=None, T=None, samplerate=None) | sign(sawtooth_tone_sampler(\u0192, T, samplerate)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "hz",
      "function": "play_tone",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "hz=None",
      "transformation_code": "hz=None, seconds=None, samplerate=None, tone_sampler=None, blocking=False): | play_tone(hz=None, seconds=None, samplerate=None, tone_sampler=None, blocking=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "seconds",
      "function": "play_tone",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "seconds=None",
      "transformation_code": "seconds=None, samplerate=None, tone_sampler=None, blocking=False): | play_tone(hz=None, seconds=None, samplerate=None, tone_sampler=None, blocking=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "samplerate",
      "function": "play_tone",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "samplerate=None",
      "transformation_code": "samplerate=None, tone_sampler=None, blocking=False): | play_tone(hz=None, seconds=None, samplerate=None, tone_sampler=None, blocking=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "tone_sampler",
      "function": "play_tone",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "tone_sampler=None",
      "transformation_code": "tone_sampler=None, blocking=False): | play_tone(hz=None, seconds=None, samplerate=None, tone_sampler=None, blocking=False) | play_sound_from_samples((tone_sampler or default_tone_sampler)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "blocking",
      "function": "play_tone",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "blocking=False | blocking=blocking",
      "transformation_code": "blocking=False): | blocking=blocking) | play_tone(hz=None, seconds=None, samplerate=None, tone_sampler=None, blocking=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "\u2188_semitones_from_A4_aka_440hz",
      "function": "play_semitone",
      "default_value": 0,
      "usage_pattern": "simple_usage",
      "validation_code": "\u2188_semitones_from_A4_aka_440hz=0 | \u2188 = \u2188_semitones_from_A4_aka_440hz",
      "transformation_code": "\u2188_semitones_from_A4_aka_440hz=0, seconds=None, samplerate=None, tone_sampler=None, blocking=False): | play_semitone(\u2188_semitones_from_A4_aka_440hz=0, seconds=None, samplerate=None, tone_sampler=None, blocking=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "seconds",
      "function": "play_semitone",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "seconds=None",
      "transformation_code": "seconds=None, samplerate=None, tone_sampler=None, blocking=False): | play_semitone(\u2188_semitones_from_A4_aka_440hz=0, seconds=None, samplerate=None, tone_sampler=None, blocking=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "samplerate",
      "function": "play_semitone",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "samplerate=None",
      "transformation_code": "samplerate=None, tone_sampler=None, blocking=False): | play_semitone(\u2188_semitones_from_A4_aka_440hz=0, seconds=None, samplerate=None, tone_sampler=None, blocking=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "tone_sampler",
      "function": "play_semitone",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "tone_sampler=None",
      "transformation_code": "tone_sampler=None, blocking=False): | play_semitone(\u2188_semitones_from_A4_aka_440hz=0, seconds=None, samplerate=None, tone_sampler=None, blocking=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "blocking",
      "function": "play_semitone",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "blocking=False",
      "transformation_code": "blocking=False): | play_semitone(\u2188_semitones_from_A4_aka_440hz=0, seconds=None, samplerate=None, tone_sampler=None, blocking=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "\u2188",
      "function": "semitone_to_hz",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "semitone_to_hz(\u2188)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "t",
      "function": "play_chord",
      "default_value": 1,
      "usage_pattern": "simple_usage",
      "validation_code": "t=1 | sampler=t | T=t",
      "transformation_code": "t=1, block=True, sampler=triangle_tone_sampler): | play_chord(*semitones: list, t=1, block=True, sampler=triangle_tone_sampler) | play_sound_from_samples(full_range(min=-1, x=sum((sampler(semitone_to_hz(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "block",
      "function": "play_chord",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "block=True | blocking=block",
      "transformation_code": "block=True, sampler=triangle_tone_sampler): | play_chord(*semitones: list, t=1, block=True, sampler=triangle_tone_sampler)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "sampler",
      "function": "play_chord",
      "default_value": "<triangle_tone_sampler>",
      "usage_pattern": "simple_usage",
      "validation_code": "sampler=triangle_tone_sampler",
      "transformation_code": "sampler=triangle_tone_sampler): | play_chord(*semitones: list, t=1, block=True, sampler=triangle_tone_sampler) | play_sound_from_samples(full_range(min=-1, x=sum((sampler(semitone_to_hz(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "out",
      "function": "mini_editor",
      "default_value": "",
      "usage_pattern": "boolean_condition,indexing,method_call,length_check,type_check",
      "validation_code": "assert isinstance(out, str) | isinstance(out, str) | out_lines = out",
      "transformation_code": "out = out[:cursor_x - 1] + out[cursor_x:] | out = out[:cursor_x] + out[cursor_x + 1:] | mini_editor(out: str='', namespace=() | min(len(out)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "namespace",
      "function": "mini_editor",
      "default_value": "()",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "namespace=(), message=''): | mini_editor(out: str='', namespace=() | print_fansi_colors_in_curses(stdscr, fansi_syntax_highlighting(out, namespace)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "message",
      "function": "mini_editor",
      "default_value": "",
      "usage_pattern": "simple_usage",
      "validation_code": "message=message",
      "transformation_code": "message=''): | message=message or \"Enter text here and then press fn+enter to exit. Supported controls: Arrow keys, backspace, delete, tab, shift+tab, enter\" | print(message, end='', flush=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "c",
      "function": "is_namespaceable",
      "default_value": null,
      "usage_pattern": "equality_check,addition",
      "validation_code": "",
      "transformation_code": "c == '' | is_namespaceable(c: str) | isidentifier(c)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "c",
      "function": "is_literal",
      "default_value": null,
      "usage_pattern": "equality_check,method_call",
      "validation_code": "",
      "transformation_code": "c == ':' or ((is_namespaceable(c) or c.isalnum()) and (not c.lstrip().rstrip() in ['False', 'def', 'if', 'raise', 'None', 'del', 'import', 'return', 'True', 'elif', 'in', 'try', 'and', 'else', 'is', 'while', 'as', 'except', 'lambda', 'with', 'assert', 'finally', 'nonlocal', 'yield', 'break', 'for', 'not', 'class', 'from', 'or', 'continue', 'global', 'pass'])) | is_literal(c: str) | or ((is_namespaceable(c)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "clip_string_width",
      "default_value": null,
      "usage_pattern": "method_call,iteration",
      "validation_code": "",
      "transformation_code": "x='\u2026'): | clip_string_width(x: str, max_width=None, max_wraps_per_line=1, clipped_suffix='\u2026') | join((y[:max_width - len(clipped_suffix)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "max_width",
      "function": "clip_string_width",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "max_width=None",
      "transformation_code": "max_width=None, max_wraps_per_line=1, clipped_suffix='\u2026'): | max_width = (max_width or get_terminal_width()) * max_wraps_per_line | clip_string_width(x: str, max_width=None, max_wraps_per_line=1, clipped_suffix='\u2026') | join((y[:max_width - len(clipped_suffix)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "max_wraps_per_line",
      "function": "clip_string_width",
      "default_value": 1,
      "usage_pattern": "simple_usage",
      "validation_code": "max_wraps_per_line=1",
      "transformation_code": "max_wraps_per_line=1, clipped_suffix='\u2026'): | clip_string_width(x: str, max_width=None, max_wraps_per_line=1, clipped_suffix='\u2026')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "clipped_suffix",
      "function": "clip_string_width",
      "default_value": "\u2026",
      "usage_pattern": "length_check",
      "validation_code": "",
      "transformation_code": "clipped_suffix='\u2026'): | clip_string_width(x: str, max_width=None, max_wraps_per_line=1, clipped_suffix='\u2026') | join((y[:max_width - len(clipped_suffix)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "src_path",
      "function": "properties_to_xml",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "properties_to_xml(src_path, target_path) | open(src_path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "target_path",
      "function": "properties_to_xml",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "properties_to_xml(src_path, target_path) | open(target_path, 'w')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "input",
      "function": "split_including_delimiters",
      "default_value": null,
      "usage_pattern": "method_call,type_check",
      "validation_code": "assert isinstance(input, str), 'input must be a string' | isinstance(input, str) | tokens = input",
      "transformation_code": "split_including_delimiters(input: str, delimiter: str) | len(input.split(delimiter)",
      "error_handling": "",
      "documentation": "input: Can be any string"
    },
    {
      "arg_name": "delimiter",
      "function": "split_including_delimiters",
      "default_value": null,
      "usage_pattern": "boolean_condition,type_check",
      "validation_code": "assert isinstance(delimiter, str), 'delimiter must be a string' | isinstance(delimiter, str)",
      "transformation_code": "split_including_delimiters(input: str, delimiter: str) | len(''.split(delimiter)",
      "error_handling": "",
      "documentation": "delimiter: Can be any string"
    },
    {
      "arg_name": "s",
      "function": "split_letters_from_digits",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "split_letters_from_digits(s: str) | findall('[A-Za-z]+|\\\\d+', s)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "s",
      "function": "split_camel_case",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "s = finditer",
      "transformation_code": "s = finditer('.+?(?:(?<=[a-z])(?=[A-Z])|(?<=[A-Z])(?=[A-Z][a-z])|$)', s) | split_camel_case(s: str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "code",
      "function": "split_python_tokens",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "split_python_tokens(code: str) | list(get_all_token_strings(code)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "clamp",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "clamp(x, min_value, max_value) | min([max([min_value, x])",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "min_value",
      "function": "clamp",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "clamp(x, min_value, max_value) | min([max([min_value, x])",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "max_value",
      "function": "clamp",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "clamp(x, min_value, max_value)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "int_clamp",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "int_clamp(x: int, min_value: int, max_value: int) | clamp(x, min_value, max_value)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "min_value",
      "function": "int_clamp",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "int_clamp(x: int, min_value: int, max_value: int) | clamp(x, min_value, max_value)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "max_value",
      "function": "int_clamp",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "int_clamp(x: int, min_value: int, max_value: int) | clamp(x, min_value, max_value)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "float_clamp",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "float_clamp(x: float, min_value: float, max_value: float) | clamp(x, min_value, max_value)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "min_value",
      "function": "float_clamp",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "float_clamp(x: float, min_value: float, max_value: float) | clamp(x, min_value, max_value)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "max_value",
      "function": "float_clamp",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "float_clamp(x: float, min_value: float, max_value: float) | clamp(x, min_value, max_value)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "exception",
      "function": "pop_exception_traceback",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "exception.__traceback__ = exception",
      "transformation_code": "pop_exception_traceback(exception, n=1) | print_stack_trace(exception)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "n",
      "function": "pop_exception_traceback",
      "default_value": 1,
      "usage_pattern": "simple_usage",
      "validation_code": "n=1 | n <module | n <module",
      "transformation_code": "n=1): | n=1000, only pop 4 levels (trying to more would result in an error) | pop_exception_traceback(exception, n=1) | calls (including the 'exec' that ran the code)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "exception",
      "function": "print_verbose_stack_trace",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "exception=None | exception = get_current_exception",
      "transformation_code": "exception=None): | exception = get_current_exception() | print_verbose_stack_trace(exception=None) | show(exception, file=sys.stdout)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "error",
      "function": "print_stack_trace",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "error = get_current_exception",
      "transformation_code": "error = get_current_exception() | print_stack_trace(error: BaseException=None, full_traceback: bool=True, header='r.print_stack_trace: ERROR: ', print_it=True) | fansi(''.join(format_exception(error.__class__, error, error.__traceback__)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "full_traceback",
      "function": "print_stack_trace",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "",
      "transformation_code": "print_stack_trace(error: BaseException=None, full_traceback: bool=True, header='r.print_stack_trace: ERROR: ', print_it=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "header",
      "function": "print_stack_trace",
      "default_value": "r.print_stack_trace: ERROR: ",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "header='r.print_stack_trace: ERROR: ', print_it=True): | print_stack_trace(error: BaseException=None, full_traceback: bool=True, header='r.print_stack_trace: ERROR: ', print_it=True) | fansi(header, 'red', 'bold')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "print_it",
      "function": "print_stack_trace",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "print_it=True",
      "transformation_code": "print_it=True): | print_stack_trace(error: BaseException=None, full_traceback: bool=True, header='r.print_stack_trace: ERROR: ', print_it=True) | return (print if print_it else identity)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "error",
      "function": "print_highlighted_stack_trace",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "error = get_current_exception",
      "transformation_code": "error = get_current_exception() | print_highlighted_stack_trace(error: BaseException=None) | join(format_exception(error.__class__, error, error.__traceback__)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "error_or_frames_back",
      "function": "print_rich_stack_trace",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check,type_check",
      "validation_code": "isinstance(error_or_frames_back, BaseException) | error_or_frames_back=None | error_or_frames_back = error",
      "transformation_code": "error_or_frames_back=None, *, extra_lines=5, show_locals=False, width=None, print_output=True): | error_or_frames_back = error | print_rich_stack_trace(error_or_frames_back=None, *, extra_lines=5, show_locals=False, width=None, print_output=True) | isinstance(error_or_frames_back, BaseException)",
      "error_handling": "",
      "documentation": "error_or_frames_back: Either an exception to display or an integer representing"
    },
    {
      "arg_name": "extra_lines",
      "function": "print_rich_stack_trace",
      "default_value": 5,
      "usage_pattern": "simple_usage",
      "validation_code": "extra_lines=5 | extra_lines=extra_lines | extra_lines=extra_lines",
      "transformation_code": "extra_lines=5, show_locals=False, width=None, print_output=True): | extra_lines=extra_lines, theme=None, show_locals=show_locals, locals_max_length=LOCALS_MAX_LENGTH, locals_max_string=LOCALS_MAX_STRING) | print_rich_stack_trace(error_or_frames_back=None, *, extra_lines=5, show_locals=False, width=None, print_output=True) | from_exception(exc_type=exc_type, exc_value=error, traceback=traceback, width=width, extra_lines=extra_lines, theme=None, show_locals=show_locals, locals_max_length=LOCALS_MAX_LENGTH, locals_max_string=LOCALS_MAX_STRING)",
      "error_handling": "",
      "documentation": "extra_lines (int)"
    },
    {
      "arg_name": "show_locals",
      "function": "print_rich_stack_trace",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "show_locals=False | show_locals=show_locals | show_locals=show_locals",
      "transformation_code": "show_locals=False, width=None, print_output=True): | show_locals=show_locals, locals_max_length=LOCALS_MAX_LENGTH, locals_max_string=LOCALS_MAX_STRING) | print_rich_stack_trace(error_or_frames_back=None, *, extra_lines=5, show_locals=False, width=None, print_output=True) | from_exception(exc_type=exc_type, exc_value=error, traceback=traceback, width=width, extra_lines=extra_lines, theme=None, show_locals=show_locals, locals_max_length=LOCALS_MAX_LENGTH, locals_max_string=LOCALS_MAX_STRING)",
      "error_handling": "",
      "documentation": "show_locals (bool)"
    },
    {
      "arg_name": "width",
      "function": "print_rich_stack_trace",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "width=None | width = get_terminal_width | width=width",
      "transformation_code": "width=None, print_output=True): | width = get_terminal_width() | print_rich_stack_trace(error_or_frames_back=None, *, extra_lines=5, show_locals=False, width=None, print_output=True) | from_exception(exc_type=exc_type, exc_value=error, traceback=traceback, width=width, extra_lines=extra_lines, theme=None, show_locals=show_locals, locals_max_length=LOCALS_MAX_LENGTH, locals_max_string=LOCALS_MAX_STRING)",
      "error_handling": "",
      "documentation": "width (int, optional)"
    },
    {
      "arg_name": "print_output",
      "function": "print_rich_stack_trace",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "print_output=True",
      "transformation_code": "print_output=True): | print_rich_stack_trace(error_or_frames_back=None, *, extra_lines=5, show_locals=False, width=None, print_output=True)",
      "error_handling": "",
      "documentation": "print_output (bool)"
    },
    {
      "arg_name": "frames_back",
      "function": "get_rich_traceback_string",
      "default_value": 0,
      "usage_pattern": "addition",
      "validation_code": "frames_back=0",
      "transformation_code": "frames_back=0, *, extra_lines=5, show_locals=True, width=None): | get_rich_traceback_string(frames_back=0, *, extra_lines=5, show_locals=True, width=None) | print_rich_stack_trace(frames_back + 1, extra_lines=extra_lines, show_locals=show_locals, width=width, print_output=False)",
      "error_handling": "",
      "documentation": "frames_back (int)"
    },
    {
      "arg_name": "extra_lines",
      "function": "get_rich_traceback_string",
      "default_value": 5,
      "usage_pattern": "simple_usage",
      "validation_code": "extra_lines=5 | extra_lines=extra_lines",
      "transformation_code": "extra_lines=5, show_locals=True, width=None): | extra_lines=extra_lines, show_locals=show_locals, width=width, print_output=False) | get_rich_traceback_string(frames_back=0, *, extra_lines=5, show_locals=True, width=None) | print_rich_stack_trace(frames_back + 1, extra_lines=extra_lines, show_locals=show_locals, width=width, print_output=False)",
      "error_handling": "",
      "documentation": "extra_lines (int)"
    },
    {
      "arg_name": "show_locals",
      "function": "get_rich_traceback_string",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "show_locals=True | show_locals=show_locals",
      "transformation_code": "show_locals=True, width=None): | show_locals=show_locals, width=width, print_output=False) | get_rich_traceback_string(frames_back=0, *, extra_lines=5, show_locals=True, width=None) | print_rich_stack_trace(frames_back + 1, extra_lines=extra_lines, show_locals=show_locals, width=width, print_output=False)",
      "error_handling": "",
      "documentation": "show_locals (bool)"
    },
    {
      "arg_name": "width",
      "function": "get_rich_traceback_string",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "width=None | width=width",
      "transformation_code": "width=None): | width=width, print_output=False) | get_rich_traceback_string(frames_back=0, *, extra_lines=5, show_locals=True, width=None) | print_rich_stack_trace(frames_back + 1, extra_lines=extra_lines, show_locals=show_locals, width=width, print_output=False)",
      "error_handling": "",
      "documentation": "width (int, optional)"
    },
    {
      "arg_name": "exc",
      "function": "_get_stack_trace_string",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "tb = exc",
      "transformation_code": "_get_stack_trace_string(exc) | TracebackException(type(exc)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "mono_audio",
      "function": "audio_stretch",
      "default_value": null,
      "usage_pattern": "length_check",
      "validation_code": "",
      "transformation_code": "audio_stretch(mono_audio, new_number_of_samples) | linterp(mono_audio, x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "new_number_of_samples",
      "function": "audio_stretch",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "audio_stretch(mono_audio, new_number_of_samples)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "cartesian_to_polar",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "cartesian_to_polar(x, y, \u0398_unit=\u03c4) | return (np.hypot(x, y)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "y",
      "function": "cartesian_to_polar",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "cartesian_to_polar(x, y, \u0398_unit=\u03c4) | return (np.hypot(x, y)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "\u0398_unit",
      "function": "cartesian_to_polar",
      "default_value": "<\u03c4>",
      "usage_pattern": "simple_usage",
      "validation_code": "\u0398_unit=\u03c4",
      "transformation_code": "\u0398_unit=\u03c4) -> tuple: | cartesian_to_polar(x, y, \u0398_unit=\u03c4)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "complex",
      "function": "complex_to_polar",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "complex_to_polar(complex, \u0398_unit=\u03c4) | return (np.abs(complex)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "\u0398_unit",
      "function": "complex_to_polar",
      "default_value": "<\u03c4>",
      "usage_pattern": "simple_usage",
      "validation_code": "\u0398_unit=\u03c4",
      "transformation_code": "\u0398_unit=\u03c4) -> tuple: | complex_to_polar(complex, \u0398_unit=\u03c4)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "f",
      "function": "riemann_sum",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "riemann_sum(f, x0, x1, N, left_to_right_sum_ratio=None) | sum((f(x0 + w * (i + c)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x0",
      "function": "riemann_sum",
      "default_value": null,
      "usage_pattern": "addition",
      "validation_code": "",
      "transformation_code": "riemann_sum(f, x0, x1, N, left_to_right_sum_ratio=None) | sum((f(x0 + w * (i + c)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x1",
      "function": "riemann_sum",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "riemann_sum(f, x0, x1, N, left_to_right_sum_ratio=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "N",
      "function": "riemann_sum",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "left_to_right_sum_ratio=N",
      "transformation_code": "riemann_sum(f, x0, x1, N, left_to_right_sum_ratio=None) | range(N)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "left_to_right_sum_ratio",
      "function": "riemann_sum",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "left_to_right_sum_ratio=None | c = left_to_right_sum_ratio",
      "transformation_code": "left_to_right_sum_ratio=None): | riemann_sum(f, x0, x1, N, left_to_right_sum_ratio=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "f",
      "function": "riemann_mean",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "riemann_mean(f, x0, x1, N, left_to_right_sum_ratio=None) | riemann_sum(f, x0, x1, N, left_to_right_sum_ratio)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x0",
      "function": "riemann_mean",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "riemann_mean(f, x0, x1, N, left_to_right_sum_ratio=None) | riemann_sum(f, x0, x1, N, left_to_right_sum_ratio)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x1",
      "function": "riemann_mean",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "riemann_mean(f, x0, x1, N, left_to_right_sum_ratio=None) | riemann_sum(f, x0, x1, N, left_to_right_sum_ratio)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "N",
      "function": "riemann_mean",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "left_to_right_sum_ratio=N",
      "transformation_code": "riemann_mean(f, x0, x1, N, left_to_right_sum_ratio=None) | riemann_sum(f, x0, x1, N, left_to_right_sum_ratio)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "left_to_right_sum_ratio",
      "function": "riemann_mean",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "left_to_right_sum_ratio=None",
      "transformation_code": "left_to_right_sum_ratio=None): | riemann_mean(f, x0, x1, N, left_to_right_sum_ratio=None) | riemann_sum(f, x0, x1, N, left_to_right_sum_ratio)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "cyclic_function",
      "function": "fourier",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "fourier(cyclic_function, freq, cyclic_period=\u03c4, \u2188_riemann_terms=100)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "freq",
      "function": "fourier",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "fourier(cyclic_function, freq, cyclic_period=\u03c4, \u2188_riemann_terms=100) | complex_to_polar(riemann_mean(lambda x: np.exp(freq * \u03c4 * x * 1j)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "cyclic_period",
      "function": "fourier",
      "default_value": "<\u03c4>",
      "usage_pattern": "simple_usage",
      "validation_code": "cyclic_period=\u03c4",
      "transformation_code": "cyclic_period=\u03c4, \u2188_riemann_terms=100): | fourier(cyclic_function, freq, cyclic_period=\u03c4, \u2188_riemann_terms=100) | cyclic_function(x * cyclic_period)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "\u2188_riemann_terms",
      "function": "fourier",
      "default_value": 100,
      "usage_pattern": "simple_usage",
      "validation_code": "\u2188_riemann_terms=100",
      "transformation_code": "\u2188_riemann_terms=100): | fourier(cyclic_function, freq, cyclic_period=\u03c4, \u2188_riemann_terms=100)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "cyclic_vector",
      "function": "discrete_fourier",
      "default_value": null,
      "usage_pattern": "length_check",
      "validation_code": "",
      "transformation_code": "discrete_fourier(cyclic_vector, freq) | fourier(cyclic_function=lambda x: linterp(x, cyclic_vector, cyclic=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "freq",
      "function": "discrete_fourier",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "freq=freq",
      "transformation_code": "freq=freq, cyclic_period=len(cyclic_vector), \u2188_riemann_terms=len(cyclic_vector)) | discrete_fourier(cyclic_vector, freq)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "m",
      "function": "matrix_to_tuples",
      "default_value": null,
      "usage_pattern": "indexing,length_check",
      "validation_code": "",
      "transformation_code": "matrix_to_tuples(m, filter=lambda r, c, val: True) | list_flatten([[(r, c, m[r][c])",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "filter",
      "function": "matrix_to_tuples",
      "default_value": "lambda r, c, val: True",
      "usage_pattern": "boolean_condition",
      "validation_code": "filter=lambda",
      "transformation_code": "filter=lambda r, c, val: True): | matrix_to_tuples(m, filter=lambda r, c, val: True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x0",
      "function": "perpendicular_bisector_function",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "perpendicular_bisector_function(x0, y0, x1, y1)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "y0",
      "function": "perpendicular_bisector_function",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "perpendicular_bisector_function(x0, y0, x1, y1)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x1",
      "function": "perpendicular_bisector_function",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "perpendicular_bisector_function(x0, y0, x1, y1)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "y1",
      "function": "perpendicular_bisector_function",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "perpendicular_bisector_function(x0, y0, x1, y1)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "wave",
      "function": "harmonic_analysis_via_least_squares",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "b = wave",
      "transformation_code": "harmonic_analysis_via_least_squares(wave, harmonics: int)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "harmonics",
      "function": "harmonic_analysis_via_least_squares",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "harmonic_analysis_via_least_squares(wave, harmonics: int) | asmatrix(np.linspace(1, harmonics, harmonics)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "iterable",
      "function": "cluster_by_key",
      "default_value": null,
      "usage_pattern": "iteration",
      "validation_code": "assert is_iterable(iterable)",
      "transformation_code": "cluster_by_key(iterable, key, *, as_dict=False) | is_iterable(iterable)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "key",
      "function": "cluster_by_key",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert callable(key) | k = key",
      "transformation_code": "cluster_by_key(iterable, key, *, as_dict=False) | callable(key)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "as_dict",
      "function": "cluster_by_key",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "as_dict=False",
      "transformation_code": "as_dict=False) -> list: | cluster_by_key(iterable, key, *, as_dict=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "iterable",
      "function": "cluster_by_attr",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "cluster_by_attr(iterable, attr, *, as_dict=False) | cluster_by_key(iterable, lambda x: get_nested_attr(x, attr)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "attr",
      "function": "cluster_by_attr",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "cluster_by_attr(iterable, attr, *, as_dict=False) | cluster_by_key(iterable, lambda x: get_nested_attr(x, attr)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "as_dict",
      "function": "cluster_by_attr",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "as_dict=False | as_dict=as_dict",
      "transformation_code": "as_dict=False) -> list: | as_dict=as_dict) | cluster_by_attr(iterable, attr, *, as_dict=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "iterable",
      "function": "chunk_by_attr",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "chunk_by_attr(iterable, attr, *, as_dict=False) | chunk_by_key(iterable, lambda x: get_nested_attr(x, attr)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "attr",
      "function": "chunk_by_attr",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "chunk_by_attr(iterable, attr, *, as_dict=False) | chunk_by_key(iterable, lambda x: get_nested_attr(x, attr)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "as_dict",
      "function": "chunk_by_attr",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "as_dict=False",
      "transformation_code": "as_dict=False) -> list: | chunk_by_attr(iterable, attr, *, as_dict=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "iterable",
      "function": "chunk_by_key",
      "default_value": null,
      "usage_pattern": "indexing,iteration",
      "validation_code": "assert is_iterable(iterable)",
      "transformation_code": "chunk_by_key(iterable, key=lambda x: x, compare=lambda x, y: x == y) | iterable (iterable)",
      "error_handling": "try_except",
      "documentation": "iterable (iterable)"
    },
    {
      "arg_name": "key",
      "function": "chunk_by_key",
      "default_value": "lambda x: x",
      "usage_pattern": "simple_usage",
      "validation_code": "assert callable(key) | key=lambda | key=str.lower",
      "transformation_code": "key=lambda x: x, compare=lambda x, y: x == y): | key=str.lower)) | chunk_by_key(iterable, key=lambda x: x, compare=lambda x, y: x == y) | list(chunk_by_key('aAAbccdEEefeee')",
      "error_handling": "try_except",
      "documentation": "key (function)"
    },
    {
      "arg_name": "compare",
      "function": "chunk_by_key",
      "default_value": "lambda x, y: x == y",
      "usage_pattern": "simple_usage",
      "validation_code": "assert callable(compare) | compare=lambda | compare=lambda",
      "transformation_code": "compare=lambda x, y: x == y): | compare=lambda x,y: x<y)) | chunk_by_key(iterable, key=lambda x: x, compare=lambda x, y: x == y) | list(chunk_by_key([4,5,6,7,7,8,9,0,3,4,5,6,5,6,7],compare=lambda x,y: x<y)",
      "error_handling": "try_except",
      "documentation": "compare (function)"
    },
    {
      "arg_name": "vec",
      "function": "cluster_filter",
      "default_value": null,
      "usage_pattern": "indexing,iteration",
      "validation_code": "",
      "transformation_code": "cluster_filter(vec, filter=identity) | mask_clusters(vec,filter=identity)",
      "error_handling": "",
      "documentation": "vec:"
    },
    {
      "arg_name": "filter",
      "function": "cluster_filter",
      "default_value": "<identity>",
      "usage_pattern": "boolean_condition",
      "validation_code": "filter=identity | filter=identity",
      "transformation_code": "filter=identity): | filter=identity): | cluster_filter(vec, filter=identity) | mask_clusters(vec,filter=identity)",
      "error_handling": "",
      "documentation": "filter([2,3,5,9,4,6,1,2,3,4],lambda x"
    },
    {
      "arg_name": "value",
      "function": "proportion_to_digits",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "x = value",
      "transformation_code": "proportion_to_digits(value, base=256, number_of_digits=3)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "base",
      "function": "proportion_to_digits",
      "default_value": 256,
      "usage_pattern": "simple_usage",
      "validation_code": "base=256",
      "transformation_code": "base=256, number_of_digits=3): | proportion_to_digits(value, base=256, number_of_digits=3)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "number_of_digits",
      "function": "proportion_to_digits",
      "default_value": 3,
      "usage_pattern": "simple_usage",
      "validation_code": "number_of_digits=3",
      "transformation_code": "number_of_digits=3): | proportion_to_digits(value, base=256, number_of_digits=3)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "digits",
      "function": "digits_to_proportion",
      "default_value": null,
      "usage_pattern": "length_check",
      "validation_code": "",
      "transformation_code": "digits_to_proportion(digits, base=256) | sum(np.asarray(digits)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "base",
      "function": "digits_to_proportion",
      "default_value": 256,
      "usage_pattern": "simple_usage",
      "validation_code": "base=256",
      "transformation_code": "base=256): | digits_to_proportion(digits, base=256)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "float_matrix",
      "function": "encode_float_matrix_to_rgba_byte_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "m = float_matrix",
      "transformation_code": "encode_float_matrix_to_rgba_byte_image(float_matrix)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "decode_float_matrix_from_rgba_byte_image",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "assert is_rgba_image(image) | assert is_byte_image(image)",
      "transformation_code": "decode_float_matrix_from_rgba_byte_image(image) | image (that was created with encode_float_matrix_to_rgba_image)",
      "error_handling": "",
      "documentation": "image (that was created with encode_float_matrix_to_rgba_image) and turns it back into a float image"
    },
    {
      "arg_name": "s",
      "function": "is_int_literal",
      "default_value": null,
      "usage_pattern": "boolean_condition,indexing,method_call",
      "validation_code": "",
      "transformation_code": "is_int_literal(s: str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "s",
      "function": "is_string_literal",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "assert isinstance(s, str) | isinstance(s, str) | s = eval",
      "transformation_code": "s = eval(s) | is_string_literal(s: str) | eval(s)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "s",
      "function": "indentify",
      "default_value": null,
      "usage_pattern": "method_call,iteration",
      "validation_code": "",
      "transformation_code": "indentify(s: str, indent='\\t') | join((indent + x for x in s.split('\\n')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "indent",
      "function": "indentify",
      "default_value": "\t",
      "usage_pattern": "addition,type_check",
      "validation_code": "isinstance(indent, int)",
      "transformation_code": "indent='\\t'): | indent = ' ' * indent | indentify(s: str, indent='\\t') | isinstance(indent, int)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "string",
      "function": "unindent",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "lines = string",
      "transformation_code": "unindent(string, indent=' ')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "indent",
      "function": "unindent",
      "default_value": " ",
      "usage_pattern": "length_check",
      "validation_code": "",
      "transformation_code": "indent=' '): | unindent(string, indent=' ') | count_leading(line, indent)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "s",
      "function": "lrstrip_all_lines",
      "default_value": null,
      "usage_pattern": "method_call,iteration",
      "validation_code": "",
      "transformation_code": "lrstrip_all_lines(s: str) | join([x.lstrip()",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "s",
      "function": "search_replace_simul",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "s = s.replace | s = s.replace",
      "transformation_code": "s = s.replace(a, b) | s = s.replace(a, b) | search_replace_simul(s: str, replacements: dict)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "replacements",
      "function": "search_replace_simul",
      "default_value": null,
      "usage_pattern": "method_call,iteration",
      "validation_code": "l1 = replacements | l2 = replacements",
      "transformation_code": "search_replace_simul(s: str, replacements: dict)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "url",
      "function": "shorten_url",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "url = 'http://tinyurl.com/api-create.php?' + urlencode({'url': url}) | shorten_url(url: str) | urlencode({'url': url})",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "shortened_url",
      "function": "unshorten_url",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert is_valid_url(shortened_url), 'Please input a valid URL!'",
      "transformation_code": "shortened_url = 'https://' + shortened_url | unshorten_url(shortened_url) | is_valid_url(shortened_url)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "gist_url",
      "function": "load_gist",
      "default_value": null,
      "usage_pattern": "method_call,iteration,addition",
      "validation_code": "gist_url = unshorten_url",
      "transformation_code": "gist_url = unshorten_url(gist_url) | gist_url = 'https://gist.githubusercontent.com/raw/' + gist_id | load_gist(gist_url: str) | unshorten_url(gist_url)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "url",
      "function": "shorten_github_url",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert is_valid_url(url)",
      "transformation_code": "url = 'https://' + url | shorten_github_url(url, title=None) | shorten_url(url)",
      "error_handling": "",
      "documentation": "url (such as git.io/labinacube)"
    },
    {
      "arg_name": "title",
      "function": "shorten_github_url",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "title=None",
      "transformation_code": "title=None): | shorten_github_url(url, title=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "content",
      "function": "save_gist",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "save_gist(content: str, *, shorten_url=False, description: str='', filename: str='', token: str=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "shorten_url",
      "function": "save_gist",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "shorten_url=False",
      "transformation_code": "shorten_url=False, description: str='', filename: str='', token: str=None): | save_gist(content: str, *, shorten_url=False, description: str='', filename: str='', token: str=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "description",
      "function": "save_gist",
      "default_value": "",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "save_gist(content: str, *, shorten_url=False, description: str='', filename: str='', token: str=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "filename",
      "function": "save_gist",
      "default_value": "",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "save_gist(content: str, *, shorten_url=False, description: str='', filename: str='', token: str=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "token",
      "function": "save_gist",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "assert token not in json_data, 'You cannot put the github API token anywhere in your gist, or else the API token will be revoked!'",
      "transformation_code": "token = 'g h p _ w d e m 3 K P j U G z N V h 7 G c c M J Y b J b s 6 z U 6 i 0 Y z X s o'.replace(' ', '') | save_gist(content: str, *, shorten_url=False, description: str='', filename: str='', token: str=None) | add_header('Authorization', 'token {}'.format(token)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "paper",
      "function": "get_arxiv_bibtex",
      "default_value": null,
      "usage_pattern": "indexing,method_call",
      "validation_code": "paper = paper.strip | xid = paper | xid = paper",
      "transformation_code": "paper = paper.strip() | get_arxiv_bibtex(paper: str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "n",
      "function": "random_namespace_hash",
      "default_value": 10,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "random_namespace_hash(n: int=10, chars_to_choose_from: str='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "chars_to_choose_from",
      "function": "random_namespace_hash",
      "default_value": "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "random_namespace_hash(n: int=10, chars_to_choose_from: str='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890') | random_element(chars_to_choose_from)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "equation",
      "function": "latex_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "latex_image(equation: str) | formula_as_file(equation, 'temp.png')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "display_image_in_terminal",
      "default_value": null,
      "usage_pattern": "indexing,length_check,addition,type_check",
      "validation_code": "isinstance(image, str) | image=stars | image=image",
      "transformation_code": "image=stars() | image=image+stars() | display_image_in_terminal(image, dither=True, auto_resize=True, bordered=False) | display_image_in_terminal(load_image_from_webcam()",
      "error_handling": "",
      "documentation": "image(np.random.rand(size,size)<density)"
    },
    {
      "arg_name": "dither",
      "function": "display_image_in_terminal",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "dither=True | dither=True | dither=dither",
      "transformation_code": "dither=True, auto_resize=True, bordered=False): | dither=True) | display_image_in_terminal(image, dither=True, auto_resize=True, bordered=False) | as_binary_image(image,dither=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "auto_resize",
      "function": "display_image_in_terminal",
      "default_value": true,
      "usage_pattern": "equality_check",
      "validation_code": "auto_resize=True | auto_resize == True",
      "transformation_code": "auto_resize=True, bordered=False): | auto_resize == True: | display_image_in_terminal(image, dither=True, auto_resize=True, bordered=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "bordered",
      "function": "display_image_in_terminal",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "bordered=False | scene=bordered | bordered=True",
      "transformation_code": "bordered=False): | bordered=True) | display_image_in_terminal(image, dither=True, auto_resize=True, bordered=False) | display_image_in_terminal(image**1,bordered=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "display_image_in_terminal_color",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert is_image(image) | image=load_image_from_webcam | image = load_image",
      "transformation_code": "image=load_image_from_webcam() | image = load_image(image) | display_image_in_terminal_color(image, *, truecolor=True) | display_image_in_terminal_color(image)",
      "error_handling": "",
      "documentation": "image('https"
    },
    {
      "arg_name": "truecolor",
      "function": "display_image_in_terminal_color",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "truecolor=True",
      "transformation_code": "truecolor=True): | display_image_in_terminal_color(image, *, truecolor=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "display_image_in_terminal_imgcat",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "assert is_image(image) | isinstance(image, str) | image = open",
      "transformation_code": "image = open(image) | image = as_rgb_image(image) | display_image_in_terminal_imgcat(image, *, pixels_per_line=24) | display_image_in_terminal_imgcat(cv_resize_image(load_image_from_webcam()",
      "error_handling": "",
      "documentation": "image(load_image_from_webcam(), 0.1))"
    },
    {
      "arg_name": "pixels_per_line",
      "function": "display_image_in_terminal_imgcat",
      "default_value": 24,
      "usage_pattern": "simple_usage",
      "validation_code": "pixels_per_line=24 | pixels_per_line=pixels_per_line",
      "transformation_code": "pixels_per_line=24): | pixels_per_line=pixels_per_line) | display_image_in_terminal_imgcat(image, *, pixels_per_line=24) | imgcat(image, pixels_per_line=pixels_per_line)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "frames",
      "function": "display_video_in_terminal_color",
      "default_value": null,
      "usage_pattern": "length_check",
      "validation_code": "",
      "transformation_code": "display_video_in_terminal_color(frames, *, loop=True, framerate=None, display_image=display_image_in_terminal_color) | enumerate(frames)",
      "error_handling": "",
      "documentation": "frames (list)"
    },
    {
      "arg_name": "loop",
      "function": "display_video_in_terminal_color",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "loop=True",
      "transformation_code": "loop=True, framerate=None, display_image=display_image_in_terminal_color): | display_video_in_terminal_color(frames, *, loop=True, framerate=None, display_image=display_image_in_terminal_color)",
      "error_handling": "",
      "documentation": "loop (bool)"
    },
    {
      "arg_name": "framerate",
      "function": "display_video_in_terminal_color",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "framerate=None | framerate=30",
      "transformation_code": "framerate=None, display_image=display_image_in_terminal_color): | framerate=30) | display_video_in_terminal_color(frames, *, loop=True, framerate=None, display_image=display_image_in_terminal_color)",
      "error_handling": "",
      "documentation": "framerate (int, optional)"
    },
    {
      "arg_name": "display_image",
      "function": "display_video_in_terminal_color",
      "default_value": "<display_image_in_terminal_color>",
      "usage_pattern": "simple_usage",
      "validation_code": "display_image=display_image_in_terminal_color",
      "transformation_code": "display_image=display_image_in_terminal_color): | display_video_in_terminal_color(frames, *, loop=True, framerate=None, display_image=display_image_in_terminal_color)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "auto_canny",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "image = as_numpy_image | image = full_range",
      "transformation_code": "image = as_numpy_image(image, copy=False) | image = full_range(image, 0, 255).astype(np.uint8) | auto_canny(image, sigma=0.33, lower=None, upper=None) | as_numpy_image(image, copy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "sigma",
      "function": "auto_canny",
      "default_value": 0.33,
      "usage_pattern": "simple_usage",
      "validation_code": "sigma=0.33",
      "transformation_code": "sigma=0.33, lower=None, upper=None): | auto_canny(image, sigma=0.33, lower=None, upper=None) | int(max(0, (1.0 - sigma)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "lower",
      "function": "auto_canny",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "lower=None | lower = int",
      "transformation_code": "lower=None, upper=None): | lower = int(max(0, (1.0 - sigma) * v)) if lower is None else lower | auto_canny(image, sigma=0.33, lower=None, upper=None) | Canny(image, lower, upper)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "upper",
      "function": "auto_canny",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "upper=None | upper = int",
      "transformation_code": "upper=None): | upper = int(min(255, (1.0 + sigma) * v)) if upper is None else upper | auto_canny(image, sigma=0.33, lower=None, upper=None) | Canny(image, lower, upper)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "skeletonize",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "skeletonize(image) | _skimage_skeletonize(image)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "_skimage_skeletonize",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "image = as_binary_image",
      "transformation_code": "image = as_binary_image(as_grayscale_image(image)) | _skimage_skeletonize(image) | as_binary_image(as_grayscale_image(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "img",
      "function": "_cv_skeletonize",
      "default_value": null,
      "usage_pattern": "indexing,method_call",
      "validation_code": "img = img.astype | img = img.copy | skel = img",
      "transformation_code": "img = img.astype(np.uint8) | img = img.copy() | _cv_skeletonize(img) | morphologyEx(img, cv2.MORPH_ERODE, kernel)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "get_edge_drawing",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "get_edge_drawing(image) | display_image(horizontally_concatenated_images(frame,can, edg)",
      "error_handling": "",
      "documentation": "image (pixels with high gradient magnitude),"
    },
    {
      "arg_name": "latex",
      "function": "print_latex_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "image = latex",
      "transformation_code": "print_latex_image(latex: str) | latex_image(latex)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "ans",
      "function": "_user_path_ans",
      "default_value": null,
      "usage_pattern": "boolean_condition,indexing,method_call,type_check",
      "validation_code": "isinstance(ans, (list, tuple) | ans = str | ans = get_absolute_path",
      "transformation_code": "ans = /Users/burgert/miniconda3/lib/python3.12/site-packages/rp | ans = ~/miniconda3/lib/python3.12/site-packages/rp | _user_path_ans(ans) | _user_path_ans(ans)",
      "error_handling": "",
      "documentation": "ans(ans)"
    },
    {
      "arg_name": "query",
      "function": "_cdh_back_query",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "assert isinstance(query, str) | isinstance(query, str)",
      "transformation_code": "_cdh_back_query(query) | isinstance(query, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "_add_to_cd_history",
      "default_value": null,
      "usage_pattern": "equality_check,boolean_condition",
      "validation_code": "",
      "transformation_code": "path == '.': | _add_to_cd_history(path: str) | append(path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "_cdh_folder_is_protected",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "",
      "transformation_code": "_cdh_folder_is_protected(x) | any((x.startswith(prefix)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "style",
      "function": "set_prompt_style",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "assert isinstance(repr(style), str) | style = input | style = option",
      "transformation_code": "style = input() | style = option | set_prompt_style(style: str=None) | print('Running rp.set_prompt_style:')",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "l",
      "function": "split_into_sublists",
      "default_value": null,
      "usage_pattern": "length_check,iteration,type_check",
      "validation_code": "isinstance(l, str) | output = l",
      "transformation_code": "split_into_sublists(l, sublist_len: int, *, strict=False, keep_remainder=True, lazy=False) | len(l)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "sublist_len",
      "function": "split_into_sublists",
      "default_value": null,
      "usage_pattern": "equality_check",
      "validation_code": "assert is_number(sublist_len), 'sublist_len should be an integer, but got type ' + repr(type(sublist_len)) | sublist_len != 0 | n = sublist_len",
      "transformation_code": "sublist_len=={1}: strict mode is turned on but the sublist size doesnt divide the list input evenly. len(l)%sublist_len=={2}!=0'.format(len(l), sublist_len, len(l) % sublist_len)) | split_into_sublists(l, sublist_len: int, *, strict=False, keep_remainder=True, lazy=False) | is_number(sublist_len)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "strict",
      "function": "split_into_sublists",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "strict=False",
      "transformation_code": "strict=False, keep_remainder=True, lazy=False): | split_into_sublists(l, sublist_len: int, *, strict=False, keep_remainder=True, lazy=False) | ValueError('strict mode is turned on but the sublist size doesnt divide the list input evenly. remaining elements: {0}'.format(len(sublist)",
      "error_handling": "",
      "documentation": "strict: sublist_len MUST evenly divide len(l)"
    },
    {
      "arg_name": "keep_remainder",
      "function": "split_into_sublists",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "keep_remainder=True",
      "transformation_code": "keep_remainder=True, lazy=False): | split_into_sublists(l, sublist_len: int, *, strict=False, keep_remainder=True, lazy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "lazy",
      "function": "split_into_sublists",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "lazy=False",
      "transformation_code": "lazy=False): | split_into_sublists(l, sublist_len: int, *, strict=False, keep_remainder=True, lazy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "l",
      "function": "split_into_n_sublists",
      "default_value": null,
      "usage_pattern": "indexing,length_check,type_check",
      "validation_code": "isinstance(l, str) | L = l",
      "transformation_code": "split_into_n_sublists(l, n) | ValueError('rp.split_into_n_sublists: n must be greater than 0 but n is ' + str(n)",
      "error_handling": "",
      "documentation": "l (sequence)"
    },
    {
      "arg_name": "n",
      "function": "split_into_n_sublists",
      "default_value": null,
      "usage_pattern": "boolean_condition,addition",
      "validation_code": "n <= 0",
      "transformation_code": "split_into_n_sublists(l, n) | l (sequence)",
      "error_handling": "",
      "documentation": "n (int)"
    },
    {
      "arg_name": "d",
      "function": "split_into_subdicts",
      "default_value": null,
      "usage_pattern": "indexing,length_check",
      "validation_code": "assert not len(d) % subdict_size, 'len(d)==' + str(len(d)) + ' and subdict_size==' + str(subdict_size) + \": strict mode is turned on but the subdict size doesn't divide the dictionary evenly. len(d)%subdict_size==\" + str(len(d) % subdict_size) + '!=0'",
      "transformation_code": "split_into_subdicts(d, subdict_size: int, strict=False, keep_remainder=True) | len(d)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "subdict_size",
      "function": "split_into_subdicts",
      "default_value": null,
      "usage_pattern": "equality_check,type_check",
      "validation_code": "assert isinstance(subdict_size, int), 'subdict_size should be an integer, but got type ' + repr(type(subdict_size)) | assert not len(d) % subdict_size, 'len(d)==' + str(len(d)) + ' and subdict_size==' + str(subdict_size) + \": strict mode is turned on but the subdict size doesn't divide the dictionary evenly. len(d)%subdict_size==\" + str(len(d) % subdict_size) + '!=0' | isinstance(subdict_size, int)",
      "transformation_code": "subdict_size==3: strict mode is turned on but the subdict size doesn't divide the dictionary evenly. len(d)%subdict_size==2!=0 | subdict_size==' + str(subdict_size) + \": strict mode is turned on but the subdict size doesn't divide the dictionary evenly. len(d)%subdict_size==\" + str(len(d) % subdict_size) + '!=0' | split_into_subdicts(d, subdict_size: int, strict=False, keep_remainder=True) | isinstance(subdict_size, int)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "strict",
      "function": "split_into_subdicts",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "assert not len(d) % subdict_size, 'len(d)==' + str(len(d)) + ' and subdict_size==' + str(subdict_size) + \": strict mode is turned on but the subdict size doesn't divide the dictionary evenly. len(d)%subdict_size==\" + str(len(d) % subdict_size) + '!=0' | strict=False | strict=True",
      "transformation_code": "strict=False, keep_remainder=True): | strict=True) | split_into_subdicts(d, subdict_size: int, strict=False, keep_remainder=True) | split_into_subdicts({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}, 3, strict=True)",
      "error_handling": "",
      "documentation": "strict: subdict_size MUST evenly divide len(d)"
    },
    {
      "arg_name": "keep_remainder",
      "function": "split_into_subdicts",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "keep_remainder=True | keep_remainder=False | keep_remainder=keep_remainder",
      "transformation_code": "keep_remainder=True): | keep_remainder=False) | split_into_subdicts(d, subdict_size: int, strict=False, keep_remainder=True) | split_into_subdicts({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}, 3, keep_remainder=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "d",
      "function": "split_into_n_subdicts",
      "default_value": null,
      "usage_pattern": "indexing",
      "validation_code": "",
      "transformation_code": "split_into_n_subdicts(d, n) | d (dict)",
      "error_handling": "",
      "documentation": "d (dict)"
    },
    {
      "arg_name": "n",
      "function": "split_into_n_subdicts",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "n <= 0",
      "transformation_code": "split_into_n_subdicts(d, n) | n (int)",
      "error_handling": "",
      "documentation": "n (int)"
    },
    {
      "arg_name": "iterable",
      "function": "join_with_separator",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "join_with_separator(iterable, separator, *, lazy=False, expand_separator=False) | iterable (iterable)",
      "error_handling": "",
      "documentation": "iterable (iterable)"
    },
    {
      "arg_name": "separator",
      "function": "join_with_separator",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "separator=False | separator=True",
      "transformation_code": "separator=False): | separator=True) | join_with_separator(iterable, separator, *, lazy=False, expand_separator=False) | join_with_separator(['a', 'b', 'c'], '...', expand_separator=True)",
      "error_handling": "",
      "documentation": "separator: The separator to intersperse between elements."
    },
    {
      "arg_name": "lazy",
      "function": "join_with_separator",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "lazy=False | lazy=True",
      "transformation_code": "lazy=False, expand_separator=False): | lazy=True) | join_with_separator(iterable, separator, *, lazy=False, expand_separator=False) | join_with_separator([1, 2, 3, 4, 5], None, lazy=True)",
      "error_handling": "",
      "documentation": "lazy (bool, optional)"
    },
    {
      "arg_name": "expand_separator",
      "function": "join_with_separator",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "expand_separator=False | expand_separator=True",
      "transformation_code": "expand_separator=False): | expand_separator=True) | join_with_separator(iterable, separator, *, lazy=False, expand_separator=False) | join_with_separator(['a', 'b', 'c'], '...', expand_separator=True)",
      "error_handling": "",
      "documentation": "expand_separator (bool, optional)"
    },
    {
      "arg_name": "image",
      "function": "rotate_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "image = as_numpy_image | image = as_rgba_image",
      "transformation_code": "image = as_numpy_image(image, copy=False) | image = as_rgba_image(image, copy=False) | rotate_image(image, angle_in_degrees, interp='bilinear') | 180 (or in the case of a square image, 90, 180, or 270)",
      "error_handling": "",
      "documentation": "image(image_url, use_cache=True))"
    },
    {
      "arg_name": "angle_in_degrees",
      "function": "rotate_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "rotate_image(image, angle_in_degrees, interp='bilinear') | _rotate_rgb_image(x, angle_in_degrees, interp)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "interp",
      "function": "rotate_image",
      "default_value": "bilinear",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "interp='bilinear'): | rotate_image(image, angle_in_degrees, interp='bilinear') | _rotate_rgb_image(x, angle_in_degrees, interp)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "angle",
      "function": "rotate_images",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "angle=range | angle = list | angle_in_degrees=angle",
      "transformation_code": "angle=range(360), show_progress=True), | angle = list(angle) | rotate_images(*images, angle, interp='bilinear', show_progress=False, lazy=False) | display_video(\n        ...     crop_images_to_max_size(\n        ...         rotate_images(image, angle=range(360)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "interp",
      "function": "rotate_images",
      "default_value": "bilinear",
      "usage_pattern": "type_check",
      "validation_code": "isinstance(interp, str) | interp = list | interp=interp",
      "transformation_code": "interp='bilinear', show_progress=False, lazy=False): | interp = list(interp) | rotate_images(*images, angle, interp='bilinear', show_progress=False, lazy=False) | isinstance(interp, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "show_progress",
      "function": "rotate_images",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "show_progress=False | show_progress=True",
      "transformation_code": "show_progress=False, lazy=False): | show_progress=True), | rotate_images(*images, angle, interp='bilinear', show_progress=False, lazy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "lazy",
      "function": "rotate_images",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "lazy=False",
      "transformation_code": "lazy=False): | rotate_images(*images, angle, interp='bilinear', show_progress=False, lazy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "_rotate_rgb_image",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "assert is_image(image) | assert is_rgb_image(image) or is_rgba_image(image) | image = as_numpy_image",
      "transformation_code": "image = as_numpy_image(image, copy=False) | _rotate_rgb_image(image, angle_in_degrees, interp='bilinear') | as_numpy_image(image, copy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "angle_in_degrees",
      "function": "_rotate_rgb_image",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "assert angle_in_degrees % 360 == 90 | assert angle_in_degrees % 360 == 90 | angle = angle_in_degrees",
      "transformation_code": "_rotate_rgb_image(image, angle_in_degrees, interp='bilinear')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "interp",
      "function": "_rotate_rgb_image",
      "default_value": "bilinear",
      "usage_pattern": "simple_usage",
      "validation_code": "assert interp in interp_methods, 'cv_resize_image: Interp must be one of the following: %s' % str(list(interp_methods)) | interp_method = interp | flags=interp",
      "transformation_code": "interp='bilinear'): | _rotate_rgb_image(image, angle_in_degrees, interp='bilinear') | str(list(interp_methods)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "url",
      "function": "open_url_in_web_browser",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "open_url_in_web_browser(url: str) | open(url)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "query",
      "function": "google_search_url",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "query = str",
      "transformation_code": "query = str(query) | google_search_url(query: str) | str(query)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "query",
      "function": "open_google_search_in_web_browser",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "open_google_search_in_web_browser(query: str) | google_search_url(query)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "module",
      "function": "reload_module",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "reload_module(module) | reload(module)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "_print_status",
      "default_value": null,
      "usage_pattern": "length_check",
      "validation_code": "x = str",
      "transformation_code": "x = str(x) | _print_status(x) | str(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "total_n",
      "function": "_eta",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "TOTAL_TO_COMPLETE=total_n",
      "transformation_code": "_eta(total_n, *, min_interval, title) | display_eta(n / total_n, timer()",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "min_interval",
      "function": "_eta",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_eta(total_n, *, min_interval, title)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "title",
      "function": "_eta",
      "default_value": null,
      "usage_pattern": "addition",
      "validation_code": "title = title",
      "transformation_code": "title='test') | title = title + ': ' | _eta(total_n, *, min_interval, title) | eta(2000,title='test')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "module",
      "function": "get_all_submodule_names",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "assert isinstance(module, types.ModuleType), 'This function accepts a module as an input, but you gave it type ' + repr(type(module)) | isinstance(module, types.ModuleType) | prefix = module",
      "transformation_code": "get_all_submodule_names(module) | run (unlike get_all_submodules)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "precedence",
      "function": "merged_dicts",
      "default_value": "last",
      "usage_pattern": "equality_check,boolean_condition",
      "validation_code": "",
      "transformation_code": "precedence='last', mutate=False): | precedence='first')  # Output: {'a': 1, 'b': 2} | merged_dicts(*dicts, precedence='last', mutate=False) | merged_dicts({'a': 1}, {'b': 2}, {'a': 3}, precedence='first')",
      "error_handling": "",
      "documentation": "precedence (str)"
    },
    {
      "arg_name": "mutate",
      "function": "merged_dicts",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "mutate=False | mutate=True",
      "transformation_code": "mutate=False): | mutate=True)  # `dict1` is now {'a': 1, 'b': 2} | merged_dicts(*dicts, precedence='last', mutate=False) | merged_dicts(dict1, {'b': 2}, mutate=True)",
      "error_handling": "",
      "documentation": "mutate (bool)"
    },
    {
      "arg_name": "keys",
      "function": "keys_and_values_to_dict",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "keys_and_values_to_dict(keys, values) | zip(keys,values)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "values",
      "function": "keys_and_values_to_dict",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "keys_and_values_to_dict(keys, values) | zip(keys,values)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "object",
      "function": "get_source_code",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "get_source_code(object) | get_source_code(object)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "object",
      "function": "get_source_file",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "get_source_file(object) | getter(object)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "file_or_object",
      "function": "edit",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "isinstance(file_or_object, str) | object=file_or_object",
      "transformation_code": "edit(file_or_object, editor_command='atom') | isinstance(file_or_object, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "editor_command",
      "function": "edit",
      "default_value": "atom",
      "usage_pattern": "addition",
      "validation_code": "editor_command=editor_command",
      "transformation_code": "editor_command='atom'): | editor_command=editor_command) | edit(file_or_object, editor_command='atom') | system(editor_command + ' ' + shlex.quote(repr(file_or_object)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "modpath",
      "function": "_static_calldefs",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "fpath=modpath",
      "transformation_code": "_static_calldefs(modpath) | dict(static.parse_calldefs(fpath=modpath)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "obj",
      "function": "_get_object_lineno",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "obj = obj.__wrapped__ | lineno = obj | first_line = obj",
      "transformation_code": "obj = obj.__wrapped__ | _get_object_lineno(obj) | hasattr(obj, '__wrapped__')",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "file_or_object",
      "function": "vim",
      "default_value": null,
      "usage_pattern": "none_check,iteration,type_check",
      "validation_code": "isinstance(file_or_object, str) | isinstance(file_or_object, list) | file_or_object=None",
      "transformation_code": "file_or_object=None, line_number=None): | vim(file_or_object=None, line_number=None) | isinstance(file_or_object, str)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "line_number",
      "function": "vim",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "line_number=None | line_number = _get_object_lineno",
      "transformation_code": "line_number=None): | line_number = _get_object_lineno(file_or_object) | vim(file_or_object=None, line_number=None)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "code",
      "function": "is_valid_python_syntax",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "assert isinstance(code, str), 'Code should be a string' | isinstance(code, str)",
      "transformation_code": "is_valid_python_syntax(code, mode='exec') | isinstance(code, str)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "mode",
      "function": "is_valid_python_syntax",
      "default_value": "exec",
      "usage_pattern": "simple_usage",
      "validation_code": "mode=mode",
      "transformation_code": "mode='exec'): | mode=mode) | is_valid_python_syntax(code, mode='exec') | parse(code, mode=mode)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "code",
      "function": "_is_valid_exeval_python_syntax",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_is_valid_exeval_python_syntax(code, mode='exec') | _parse_exeval_code(code)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "mode",
      "function": "_is_valid_exeval_python_syntax",
      "default_value": "exec",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "mode='exec'): | _is_valid_exeval_python_syntax(code, mode='exec')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "code",
      "function": "is_valid_shell_syntax",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "input=code",
      "transformation_code": "is_valid_shell_syntax(code, *, silent=True, command=None) | run([command, '-n'], input=code, text=True, stderr=subprocess.PIPE, check=True)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "silent",
      "function": "is_valid_shell_syntax",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "silent=True",
      "transformation_code": "silent=True, command=None): | is_valid_shell_syntax(code, *, silent=True, command=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "command",
      "function": "is_valid_shell_syntax",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check,type_check",
      "validation_code": "assert isinstance(command, str) | isinstance(command, str) | command=None",
      "transformation_code": "command=None): | command = get_default_shell() | is_valid_shell_syntax(code, *, silent=True, command=None) | isinstance(command, str)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "code",
      "function": "is_valid_sh_syntax",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "is_valid_sh_syntax(code, *, silent=True, command='sh') | is_valid_shell_syntax(code, silent=silent, command=command)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "silent",
      "function": "is_valid_sh_syntax",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "silent=True | silent=False | silent=silent",
      "transformation_code": "silent=True, command='sh'): | silent=False, will print out more information.\"\"\" | is_valid_sh_syntax(code, *, silent=True, command='sh') | is_valid_shell_syntax(code, silent=silent, command=command)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "command",
      "function": "is_valid_sh_syntax",
      "default_value": "sh",
      "usage_pattern": "simple_usage",
      "validation_code": "command=command",
      "transformation_code": "command='sh'): | command=command) | is_valid_sh_syntax(code, *, silent=True, command='sh') | is_valid_shell_syntax(code, silent=silent, command=command)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "code",
      "function": "is_valid_bash_syntax",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "is_valid_bash_syntax(code, *, silent=True, command='bash') | is_valid_shell_syntax(code, silent=silent, command=command)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "silent",
      "function": "is_valid_bash_syntax",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "silent=True | silent=False | silent=silent",
      "transformation_code": "silent=True, command='bash'): | silent=False, will print out more information.\"\"\" | is_valid_bash_syntax(code, *, silent=True, command='bash') | is_valid_shell_syntax(code, silent=silent, command=command)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "command",
      "function": "is_valid_bash_syntax",
      "default_value": "bash",
      "usage_pattern": "simple_usage",
      "validation_code": "command=command",
      "transformation_code": "command='bash'): | command=command) | is_valid_bash_syntax(code, *, silent=True, command='bash') | is_valid_shell_syntax(code, silent=silent, command=command)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "code",
      "function": "is_valid_zsh_syntax",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "is_valid_zsh_syntax(code, *, silent=True, command='zsh') | is_valid_shell_syntax(code, silent=silent, command=command)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "silent",
      "function": "is_valid_zsh_syntax",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "silent=True | silent=False | silent=silent",
      "transformation_code": "silent=True, command='zsh'): | silent=False, will print out more information.\"\"\" | is_valid_zsh_syntax(code, *, silent=True, command='zsh') | is_valid_shell_syntax(code, silent=silent, command=command)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "command",
      "function": "is_valid_zsh_syntax",
      "default_value": "zsh",
      "usage_pattern": "simple_usage",
      "validation_code": "command=command",
      "transformation_code": "command='zsh'): | command=command) | is_valid_zsh_syntax(code, *, silent=True, command='zsh') | is_valid_shell_syntax(code, silent=silent, command=command)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "scope",
      "function": "_ipython_exeval_maker",
      "default_value": "{}",
      "usage_pattern": "simple_usage",
      "validation_code": "user_ns=scope",
      "transformation_code": "scope={}): | _ipython_exeval_maker(scope={}) | Shell(user_ns=scope)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "code",
      "function": "_parse_exeval_code",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "lines = code",
      "transformation_code": "_parse_exeval_code(code: str) | _parse_exeval_code(code_block)",
      "error_handling": "",
      "documentation": "code (str)"
    },
    {
      "arg_name": "code",
      "function": "exeval",
      "default_value": null,
      "usage_pattern": "addition",
      "validation_code": "code <python_expression | code <python_expression | code = exeval",
      "transformation_code": "code = ''' | code = ''' | exeval(code: str, scope=None) | exec(code)",
      "error_handling": "",
      "documentation": "code (str)"
    },
    {
      "arg_name": "scope",
      "function": "exeval",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check,indexing,method_call",
      "validation_code": "scope=None | scope = get_scope | scope = scope.copy",
      "transformation_code": "scope=None): | scope = {'a' : 0} | exeval(code: str, scope=None) | Example (private_scope directive)",
      "error_handling": "",
      "documentation": "scope (dict, optional)"
    },
    {
      "arg_name": "local",
      "function": "_display_pterm_flamechart",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "local=False",
      "transformation_code": "local=False): | _display_pterm_flamechart(local=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "s",
      "function": "_truncate_string_floats",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "s=4",
      "transformation_code": "s=4) -> str: | s = \"time\": 0.001026,\"attributes\": {\"l29952\": 0.001026}, | _truncate_string_floats(s, num_sigfigs=4) | s (str)",
      "error_handling": "",
      "documentation": "s:"
    },
    {
      "arg_name": "num_sigfigs",
      "function": "_truncate_string_floats",
      "default_value": 4,
      "usage_pattern": "simple_usage",
      "validation_code": "num_sigfigs=4",
      "transformation_code": "num_sigfigs=4) -> str: | _truncate_string_floats(s, num_sigfigs=4) | format(num_sigfigs)",
      "error_handling": "",
      "documentation": "num_sigfigs (int)"
    },
    {
      "arg_name": "code",
      "function": "_pterm_exeval",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "code=True",
      "transformation_code": "code=True, color=True, timeline=False, show_all=_PROF_DEEP).replace('\\n\\n', '\\n')[1:-1]) | _pterm_exeval(code, *dicts, exec=exec, eval=eval, tictoc=False, profile=False, line_profile=False, ipython=False) | is_valid_python_syntax(code, mode='eval')",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "exec",
      "function": "_pterm_exeval",
      "default_value": "<exec>",
      "usage_pattern": "simple_usage",
      "validation_code": "exec=exec | exec = eval",
      "transformation_code": "exec=exec, eval=eval, tictoc=False, profile=False, line_profile=False, ipython=False): | exec = eval = _ipython_exeval | _pterm_exeval(code, *dicts, exec=exec, eval=eval, tictoc=False, profile=False, line_profile=False, ipython=False) | run_code(code, 'exec', merged_dict, exec)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "eval",
      "function": "_pterm_exeval",
      "default_value": "<eval>",
      "usage_pattern": "simple_usage",
      "validation_code": "eval=eval | exec = eval",
      "transformation_code": "eval=eval, tictoc=False, profile=False, line_profile=False, ipython=False): | eval = _ipython_exeval | _pterm_exeval(code, *dicts, exec=exec, eval=eval, tictoc=False, profile=False, line_profile=False, ipython=False) | print(\"exeval\")",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "tictoc",
      "function": "_pterm_exeval",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "tictoc=False",
      "transformation_code": "tictoc=False, profile=False, line_profile=False, ipython=False): | _pterm_exeval(code, *dicts, exec=exec, eval=eval, tictoc=False, profile=False, line_profile=False, ipython=False)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "profile",
      "function": "_pterm_exeval",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "profile=False | profile=False | _prev_pterm_profiler = profile",
      "transformation_code": "profile=False, line_profile=False, ipython=False): | _pterm_exeval(code, *dicts, exec=exec, eval=eval, tictoc=False, profile=False, line_profile=False, ipython=False) | fansi_print('Preparing the PROF display (the profiler, toggle with PROF)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "line_profile",
      "function": "_pterm_exeval",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "line_profile=False",
      "transformation_code": "line_profile=False, ipython=False): | _pterm_exeval(code, *dicts, exec=exec, eval=eval, tictoc=False, profile=False, line_profile=False, ipython=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "ipython",
      "function": "_pterm_exeval",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "ipython=False",
      "transformation_code": "ipython=False): | _pterm_exeval(code, *dicts, exec=exec, eval=eval, tictoc=False, profile=False, line_profile=False, ipython=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "line_times",
      "function": "_rp_show_custom_line_profile",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "",
      "transformation_code": "_rp_show_custom_line_profile(line_times, line_hits, start_time, end_time)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "line_hits",
      "function": "_rp_show_custom_line_profile",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "hits = line_hits",
      "transformation_code": "_rp_show_custom_line_profile(line_times, line_hits, start_time, end_time)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "start_time",
      "function": "_rp_show_custom_line_profile",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_rp_show_custom_line_profile(line_times, line_hits, start_time, end_time)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "end_time",
      "function": "_rp_show_custom_line_profile",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "actual_end_time = end_time",
      "transformation_code": "end_time = end_time if end_time is not None else time.time() | _rp_show_custom_line_profile(line_times, line_hits, start_time, end_time)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "f",
      "function": "dec2bin",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "f >= 1 | f > 0 | f < 1",
      "transformation_code": "f = f - ig | dec2bin(f) | int(math.log(float(f)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "run_until_complete",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "run_until_complete(x) | run_until_complete(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "prompt",
      "function": "_multi_line_python_input",
      "default_value": null,
      "usage_pattern": "length_check",
      "validation_code": "",
      "transformation_code": "_multi_line_python_input(prompt) | mli(prompt)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "title",
      "function": "_set_session_title",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "title=None | title = pyin.session_title | title = input_default",
      "transformation_code": "title=None): | title = pyin.session_title | _set_session_title(title=None) | _set_session_title(title)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "ui_theme_name",
      "function": "_set_pterm_theme",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "ui_theme_name=None | ui_theme_name = settings",
      "transformation_code": "ui_theme_name=None, code_theme_name=None): | ui_theme_name = settings['_current_ui_style_name'] | _set_pterm_theme(ui_theme_name=None, code_theme_name=None) | use_ui_colorscheme(ui_theme_name)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "code_theme_name",
      "function": "_set_pterm_theme",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "code_theme_name=None | code_theme_name = settings | r.pyin._current_code_style_name = code_theme_name",
      "transformation_code": "code_theme_name=None): | code_theme_name = settings['_current_code_style_name'] | _set_pterm_theme(ui_theme_name=None, code_theme_name=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "scope",
      "function": "python_input",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "get_globals=scope | get_globals=scope",
      "transformation_code": "python_input(scope, header='', enable_ptpython=True, iPython=False) | tuple(scope()",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "header",
      "function": "python_input",
      "default_value": "",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "header='', enable_ptpython=True, iPython=False): | python_input(scope, header='', enable_ptpython=True, iPython=False) | _multi_line_python_input(header)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "enable_ptpython",
      "function": "python_input",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "enable_ptpython=True",
      "transformation_code": "enable_ptpython=True, iPython=False): | python_input(scope, header='', enable_ptpython=True, iPython=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "iPython",
      "function": "python_input",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "iPython=False | _iPython != iPython | _iPython != iPython",
      "transformation_code": "iPython=False): | iPython = iPython | python_input(scope, header='', enable_ptpython=True, iPython=False)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "history",
      "function": "_dhistory_helper",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_dhistory_helper(history: str) | line_split(history)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "string",
      "function": "with_line_numbers",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "lines = string",
      "transformation_code": "with_line_numbers(string, prefix='%i. ', *, start_from=0, align=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "prefix",
      "function": "with_line_numbers",
      "default_value": "%i. ",
      "usage_pattern": "method_call,addition",
      "validation_code": "",
      "transformation_code": "prefix='%i. ', *, start_from=0, align=False): | with_line_numbers(string, prefix='%i. ', *, start_from=0, align=False) | max(map(len, prefixes)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "start_from",
      "function": "with_line_numbers",
      "default_value": 0,
      "usage_pattern": "simple_usage",
      "validation_code": "start_from=0 | start_from=1",
      "transformation_code": "start_from=0, align=False): | start_from=1) | with_line_numbers(string, prefix='%i. ', *, start_from=0, align=False) | with_line_numbers('a\nb\nc', start_from=1)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "align",
      "function": "with_line_numbers",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "align=False | align=True",
      "transformation_code": "align=False): | align=True)) | with_line_numbers(string, prefix='%i. ', *, start_from=0, align=False) | print(with_line_numbers(poem,align=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "string",
      "function": "number_of_lines",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "",
      "transformation_code": "number_of_lines(string) | len(line_split(string)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "string",
      "function": "number_of_lines_in_terminal",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "number_of_lines_in_terminal(string) | line_split(string)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "filename",
      "function": "number_of_lines_in_file",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "number_of_lines_in_file(filename) | text_file_to_string(filename)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "exception",
      "function": "_all_files_listed_in_exception_traceback",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "error = exception | tb = exception",
      "transformation_code": "_all_files_listed_in_exception_traceback(exception: BaseException) | join(format_exception(error.__class__, error, error.__traceback__)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "read_symlink",
      "default_value": null,
      "usage_pattern": "method_call,type_check",
      "validation_code": "assert isinstance(path, str) | isinstance(path, str) | path = path.rstrip",
      "transformation_code": "path = path.rstrip('/') | path = os.readlink(path) | read_symlink(path: str, *, recursive=False) | isinstance(path, str)",
      "error_handling": "",
      "documentation": "path: Path to the symlink."
    },
    {
      "arg_name": "recursive",
      "function": "read_symlink",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "recursive=False",
      "transformation_code": "recursive=False): | read_symlink(path: str, *, recursive=False)",
      "error_handling": "",
      "documentation": "recursive: If True, will keep resolving symlinks until it hits a non-symlink"
    },
    {
      "arg_name": "symlink_path",
      "function": "make_symlink_absolute",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "make_symlink_absolute(symlink_path, *, recursive=False, physical=True) | read_symlink(symlink_path, recursive=recursive)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "recursive",
      "function": "make_symlink_absolute",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "recursive=False | recursive=recursive",
      "transformation_code": "recursive=False, physical=True): | recursive=recursive) | make_symlink_absolute(symlink_path, *, recursive=False, physical=True) | read_symlink(symlink_path, recursive=recursive)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "physical",
      "function": "make_symlink_absolute",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "physical=True | physical=physical",
      "transformation_code": "physical=True): | physical=physical) | make_symlink_absolute(symlink_path, *, recursive=False, physical=True) | get_absolute_path(destination_path, physical=physical)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "symlink_path",
      "function": "make_symlink_relative",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "make_symlink_relative(symlink_path, *, recursive=False) | read_symlink(symlink_path, recursive=recursive)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "recursive",
      "function": "make_symlink_relative",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "recursive=False | recursive=recursive",
      "transformation_code": "recursive=False): | recursive=recursive) | make_symlink_relative(symlink_path, *, recursive=False) | read_symlink(symlink_path, recursive=recursive)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "recursive",
      "function": "read_symlinks",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "recursive=False",
      "transformation_code": "recursive=False, strict=True, num_threads=None, show_progress=False, lazy=False): | read_symlinks(*symlink_paths, recursive=False, strict=True, num_threads=None, show_progress=False, lazy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "strict",
      "function": "read_symlinks",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "strict=True",
      "transformation_code": "strict=True, num_threads=None, show_progress=False, lazy=False): | read_symlinks(*symlink_paths, recursive=False, strict=True, num_threads=None, show_progress=False, lazy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "num_threads",
      "function": "read_symlinks",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "num_threads=None",
      "transformation_code": "num_threads=None, show_progress=False, lazy=False): | read_symlinks(*symlink_paths, recursive=False, strict=True, num_threads=None, show_progress=False, lazy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "show_progress",
      "function": "read_symlinks",
      "default_value": false,
      "usage_pattern": "equality_check,boolean_condition",
      "validation_code": "show_progress=False | show_progress == True",
      "transformation_code": "show_progress=False, lazy=False): | show_progress == True: | read_symlinks(*symlink_paths, recursive=False, strict=True, num_threads=None, show_progress=False, lazy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "lazy",
      "function": "read_symlinks",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "lazy=False",
      "transformation_code": "lazy=False): | read_symlinks(*symlink_paths, recursive=False, strict=True, num_threads=None, show_progress=False, lazy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "recursive",
      "function": "make_symlinks_relative",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "recursive=False",
      "transformation_code": "recursive=False, strict=True, num_threads=None, show_progress=False, lazy=False): | make_symlinks_relative(*symlink_paths, recursive=False, strict=True, num_threads=None, show_progress=False, lazy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "strict",
      "function": "make_symlinks_relative",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "strict=True",
      "transformation_code": "strict=True, num_threads=None, show_progress=False, lazy=False): | make_symlinks_relative(*symlink_paths, recursive=False, strict=True, num_threads=None, show_progress=False, lazy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "num_threads",
      "function": "make_symlinks_relative",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "num_threads=None",
      "transformation_code": "num_threads=None, show_progress=False, lazy=False): | make_symlinks_relative(*symlink_paths, recursive=False, strict=True, num_threads=None, show_progress=False, lazy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "show_progress",
      "function": "make_symlinks_relative",
      "default_value": false,
      "usage_pattern": "equality_check,boolean_condition",
      "validation_code": "show_progress=False | show_progress == True",
      "transformation_code": "show_progress=False, lazy=False): | show_progress == True: | make_symlinks_relative(*symlink_paths, recursive=False, strict=True, num_threads=None, show_progress=False, lazy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "lazy",
      "function": "make_symlinks_relative",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "lazy=False",
      "transformation_code": "lazy=False): | make_symlinks_relative(*symlink_paths, recursive=False, strict=True, num_threads=None, show_progress=False, lazy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "recursive",
      "function": "make_symlinks_absolute",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "recursive=False",
      "transformation_code": "recursive=False, strict=True, num_threads=None, show_progress=False, lazy=False): | make_symlinks_absolute(*symlink_paths, recursive=False, strict=True, num_threads=None, show_progress=False, lazy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "strict",
      "function": "make_symlinks_absolute",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "strict=True",
      "transformation_code": "strict=True, num_threads=None, show_progress=False, lazy=False): | make_symlinks_absolute(*symlink_paths, recursive=False, strict=True, num_threads=None, show_progress=False, lazy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "num_threads",
      "function": "make_symlinks_absolute",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "num_threads=None",
      "transformation_code": "num_threads=None, show_progress=False, lazy=False): | make_symlinks_absolute(*symlink_paths, recursive=False, strict=True, num_threads=None, show_progress=False, lazy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "show_progress",
      "function": "make_symlinks_absolute",
      "default_value": false,
      "usage_pattern": "equality_check,boolean_condition",
      "validation_code": "show_progress=False | show_progress == True",
      "transformation_code": "show_progress=False, lazy=False): | show_progress == True: | make_symlinks_absolute(*symlink_paths, recursive=False, strict=True, num_threads=None, show_progress=False, lazy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "lazy",
      "function": "make_symlinks_absolute",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "lazy=False",
      "transformation_code": "lazy=False): | make_symlinks_absolute(*symlink_paths, recursive=False, strict=True, num_threads=None, show_progress=False, lazy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "symlink_is_broken",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert is_symlink(path)",
      "transformation_code": "symlink_is_broken(path: str) | is_symlink(path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "original_path",
      "function": "make_hardlink",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert path_exists(original_path), \"Can't create hardlink to %s because that path does not exist!\" % original_path | assert not original_is_folder or is_symbolic_link(original_path), \"Can't create a hardlink to a folder, only to files: \" + original_path",
      "transformation_code": "make_hardlink(original_path, hardlink_path, *, recursive=False) | and (not path_exists(original_path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "hardlink_path",
      "function": "make_hardlink",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert not path_exists(hardlink_path), \"Can't create hardlink at %s because a file already exists there!\" % hardlink_path | hardlink_path = path_join",
      "transformation_code": "hardlink_path = path_join(hardlink_path, get_file_name(original_path)) | make_hardlink(original_path, hardlink_path, *, recursive=False) | path_exists(hardlink_path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "recursive",
      "function": "make_hardlink",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "recursive=False",
      "transformation_code": "recursive=False): | make_hardlink(original_path, hardlink_path, *, recursive=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "symlink_path",
      "function": "replace_symlink_with_hardlink",
      "default_value": null,
      "usage_pattern": "addition,type_check",
      "validation_code": "assert isinstance(symlink_path, str), 'replace_symlink_with_hardlink: Input path must be a string' | assert is_symlink(symlink_path), 'replace_symlink_with_hardlink: Path is not a symlink: ' + symlink_path | assert not is_a_folder(read_path), 'Cannot hardlink to a folder from symlink ' + symlink_path + '   -->   ' + read_path",
      "transformation_code": "replace_symlink_with_hardlink(symlink_path) | isinstance(symlink_path, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "num_threads",
      "function": "replace_symlinks_with_hardlinks",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "num_threads=num_threads",
      "transformation_code": "num_threads=num_threads) | replace_symlinks_with_hardlinks(*symlink_paths, num_threads: int=None, show_progress=False, strict=True, lazy=False) | load_files(replace_symlink_with_hardlink, symlink_paths, lazy=lazy, strict=strict, show_progress=show_progress, num_threads=num_threads)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "show_progress",
      "function": "replace_symlinks_with_hardlinks",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "show_progress=False | show_progress=show_progress",
      "transformation_code": "show_progress=False, strict=True, lazy=False): | show_progress=show_progress, num_threads=num_threads) | replace_symlinks_with_hardlinks(*symlink_paths, num_threads: int=None, show_progress=False, strict=True, lazy=False) | load_files(replace_symlink_with_hardlink, symlink_paths, lazy=lazy, strict=strict, show_progress=show_progress, num_threads=num_threads)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "strict",
      "function": "replace_symlinks_with_hardlinks",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "strict=True | strict=strict",
      "transformation_code": "strict=True, lazy=False): | strict=strict, show_progress=show_progress, num_threads=num_threads) | replace_symlinks_with_hardlinks(*symlink_paths, num_threads: int=None, show_progress=False, strict=True, lazy=False) | load_files(replace_symlink_with_hardlink, symlink_paths, lazy=lazy, strict=strict, show_progress=show_progress, num_threads=num_threads)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "lazy",
      "function": "replace_symlinks_with_hardlinks",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "lazy=False | lazy=lazy",
      "transformation_code": "lazy=False): | lazy=lazy, strict=strict, show_progress=show_progress, num_threads=num_threads) | replace_symlinks_with_hardlinks(*symlink_paths, num_threads: int=None, show_progress=False, strict=True, lazy=False) | load_files(replace_symlink_with_hardlink, symlink_paths, lazy=lazy, strict=strict, show_progress=show_progress, num_threads=num_threads)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "original_path",
      "function": "make_symlink",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert not strict or path_exists(original_path), \"Can't create symlink to %s because that path does not exist!\" % original_path | original_path = get_relative_path",
      "transformation_code": "original_path = get_relative_path(original_path, root=get_parent_folder(symlink_path)) | make_symlink(original_path, symlink_path='.', *, relative=False, replace=False, strict=True) | and (not path_exists(original_path)",
      "error_handling": "",
      "documentation": "original_path: Path to the original file/directory."
    },
    {
      "arg_name": "symlink_path",
      "function": "make_symlink",
      "default_value": ".",
      "usage_pattern": "simple_usage",
      "validation_code": "assert replace or not path_exists(symlink_path), \"Can't create symlink at %s because a file already exists there!\" % symlink_path | symlink_path = path_join",
      "transformation_code": "symlink_path='.', *, relative=False, replace=False, strict=True): | symlink_path = path_join(symlink_path, get_file_name(original_path)) | make_symlink(original_path, symlink_path='.', *, relative=False, replace=False, strict=True) | path_exists(symlink_path)",
      "error_handling": "",
      "documentation": "symlink_path: Path for the symlink (default"
    },
    {
      "arg_name": "relative",
      "function": "make_symlink",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "relative=False",
      "transformation_code": "relative=False, replace=False, strict=True): | make_symlink(original_path, symlink_path='.', *, relative=False, replace=False, strict=True)",
      "error_handling": "",
      "documentation": "relative: Use a relative symlink, correctly pointing to original_path from the symlink_path (default"
    },
    {
      "arg_name": "replace",
      "function": "make_symlink",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "assert replace or not path_exists(symlink_path), \"Can't create symlink at %s because a file already exists there!\" % symlink_path | replace=False",
      "transformation_code": "replace=False, strict=True): | make_symlink(original_path, symlink_path='.', *, relative=False, replace=False, strict=True) | exists (and not replaced)",
      "error_handling": "",
      "documentation": "replace: Replace existing symlink if True (default"
    },
    {
      "arg_name": "strict",
      "function": "make_symlink",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "assert not strict or path_exists(original_path), \"Can't create symlink to %s because that path does not exist!\" % original_path | strict=True",
      "transformation_code": "strict=True): | make_symlink(original_path, symlink_path='.', *, relative=False, replace=False, strict=True) | exist (and strict)",
      "error_handling": "",
      "documentation": "strict: If true, raises an error if the original_path does not exist. (default"
    },
    {
      "arg_name": "path",
      "function": "is_symbolic_link",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "isinstance(path, str)",
      "transformation_code": "is_symbolic_link(path: str) | isinstance(path, str)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "from_path",
      "function": "symlink_move",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert path_exists(from_path), from_path | from_path = get_absolute_path",
      "transformation_code": "from_path = get_absolute_path(from_path) | symlink_move(from_path, to_path, *, relative=False) | get_absolute_path(from_path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "to_path",
      "function": "symlink_move",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "to_path = get_absolute_path | to_path = move_path",
      "transformation_code": "to_path = get_absolute_path(to_path) | to_path = move_path(from_path, to_path) | symlink_move(from_path, to_path, *, relative=False) | get_absolute_path(to_path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "relative",
      "function": "symlink_move",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "relative=False | relative=relative",
      "transformation_code": "relative=False): | relative=relative) | symlink_move(from_path, to_path, *, relative=False) | make_symlink(from_path, to_path, relative=relative)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "file_path",
      "function": "_guess_mimetype",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_guess_mimetype(file_path) | file_exists(file_path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "file_path",
      "function": "is_image_file",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "isinstance(file_path, str)",
      "transformation_code": "is_image_file(file_path) | isinstance(file_path, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "file_path",
      "function": "is_video_file",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "is_video_file(file_path) | _guess_mimetype(file_path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "file_path",
      "function": "is_sound_file",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "is_sound_file(file_path) | _guess_mimetype(file_path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "is_utf8_file",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "is_utf8_file(path) | text_file_to_string(path)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "root",
      "function": "display_file_tree",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "root=None",
      "transformation_code": "root=None, *, all=False, only_directories=False, traverse_symlinks=False): | display_file_tree(root=None, *, all=False, only_directories=False, traverse_symlinks=False)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "all",
      "function": "display_file_tree",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "all=False | extension = all",
      "transformation_code": "all=False, only_directories=False, traverse_symlinks=False): | display_file_tree(root=None, *, all=False, only_directories=False, traverse_symlinks=False) | len(set(all_unhidden_file_extensions)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "only_directories",
      "function": "display_file_tree",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "only_directories=False",
      "transformation_code": "only_directories=False, traverse_symlinks=False): | display_file_tree(root=None, *, all=False, only_directories=False, traverse_symlinks=False)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "traverse_symlinks",
      "function": "display_file_tree",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "traverse_symlinks=False",
      "transformation_code": "traverse_symlinks=False): | display_file_tree(root=None, *, all=False, only_directories=False, traverse_symlinks=False)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "string",
      "function": "_line_numbered_string",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_line_numbered_string(string, foreground='cyan', style='bold', background='blue') | line_split(string)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "foreground",
      "function": "_line_numbered_string",
      "default_value": "cyan",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "foreground='cyan', style='bold', background='blue'): | _line_numbered_string(string, foreground='cyan', style='bold', background='blue')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "style",
      "function": "_line_numbered_string",
      "default_value": "bold",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "style='bold', background='blue'): | _line_numbered_string(string, foreground='cyan', style='bold', background='blue')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "background",
      "function": "_line_numbered_string",
      "default_value": "blue",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "background='blue'): | _line_numbered_string(string, foreground='cyan', style='bold', background='blue')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "exception",
      "function": "_vimore",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_vimore(exception) | _all_files_listed_in_exception_traceback(exception)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "location",
      "function": "_load_text_from_file_or_url",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert False, 'Neither a text file nor a url: ' + repr(location) + '\\nERROR: This is neither a valid url nor a text file' | url = location",
      "transformation_code": "_load_text_from_file_or_url(location) | is_valid_url(location)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "from_path",
      "function": "_mv",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "from_path=None | from_path = input_select_path",
      "transformation_code": "from_path=None, to_dir=None): | from_path = input_select_path() | _mv(from_path=None, to_dir=None) | fansi_print('Please select a destination folder to move %s into' % from_path, 'yellow', 'bold')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "to_dir",
      "function": "_mv",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "to_dir=None | to_dir = input_select_folder",
      "transformation_code": "to_dir=None): | to_dir = input_select_folder() | _mv(from_path=None, to_dir=None) | fansi(to_dir, 'green')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "ans",
      "function": "_absolute_path_ans",
      "default_value": null,
      "usage_pattern": "iteration,type_check",
      "validation_code": "isinstance(ans, str)",
      "transformation_code": "_absolute_path_ans(ans) | isinstance(ans, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "ans",
      "function": "_relative_path_ans",
      "default_value": null,
      "usage_pattern": "boolean_condition,method_call,iteration,type_check",
      "validation_code": "isinstance(ans, str) | ans = os.path.expanduser",
      "transformation_code": "ans = os.path.expanduser(ans) | _relative_path_ans(ans) | isinstance(ans, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "ans",
      "function": "_rma",
      "default_value": null,
      "usage_pattern": "iteration,type_check",
      "validation_code": "isinstance(ans, str) | isinstance(ans, list) | isinstance(ans, list)",
      "transformation_code": "ans = get_absolute_path(ans) | _rma(ans) | isinstance(ans, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "paths",
      "function": "_cpah",
      "default_value": null,
      "usage_pattern": "iteration,type_check",
      "validation_code": "isinstance(paths, str) | isinstance(paths, str) | paths = line_split",
      "transformation_code": "paths = line_split(paths) | paths = [paths] | _cpah(paths, method=None) | isinstance(paths, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "method",
      "function": "_cpah",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "method=None | method = copy_path",
      "transformation_code": "method=None): | method = copy_path | _cpah(paths, method=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "_view_image_via_textual_imageview",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "assert isinstance(image, str) or is_image(image) | assert is_image(image) | isinstance(image, str)",
      "transformation_code": "_view_image_via_textual_imageview(image) | isinstance(image, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "ans",
      "function": "_ISM",
      "default_value": null,
      "usage_pattern": "indexing,type_check",
      "validation_code": "isinstance(ans, dict) | isinstance(ans, str) | ans = dict",
      "transformation_code": "ans = dict(ans) | ans = line_split(ans) | _ISM(ans, *, preview: str=None) | dict(ans)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "preview",
      "function": "_ISM",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "preview=preview | preview=preview | preview=preview",
      "transformation_code": "preview=preview) | preview=preview)) | _ISM(ans, *, preview: str=None) | _filter_dict_via_fzf(ans, preview=preview)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "cmd",
      "function": "_which",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "",
      "transformation_code": "_which(cmd) | which(cmd)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "data",
      "function": "_view_with_pyfx",
      "default_value": null,
      "usage_pattern": "boolean_condition,method_call,type_check",
      "validation_code": "isinstance(data, str) | data = load_json | data = load_yaml_file",
      "transformation_code": "data = load_json(data) | data = load_yaml_file(data) | _view_with_pyfx(data) | isinstance(data, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "json",
      "function": "_view_json_via_jtree",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "assert file_exists(json) | isinstance(json, str)",
      "transformation_code": "_view_json_via_jtree(json) | isinstance(json, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "data",
      "function": "_view_interactive_json",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "isinstance(data, str)",
      "transformation_code": "_view_interactive_json(data) | isinstance(data, str)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "entries",
      "function": "_display_columns",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_display_columns(entries, title=None) | Columns(entries, equal=False, expand=False, title=title)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "title",
      "function": "_display_columns",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "title=None | title=title",
      "transformation_code": "title=None): | title=title) | _display_columns(entries, title=None) | Columns(entries, equal=False, expand=False, title=title)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "history_filename",
      "function": "_input_select_multiple_history_multiline",
      "default_value": "<history_filename>",
      "usage_pattern": "simple_usage",
      "validation_code": "history_filename=history_filename",
      "transformation_code": "history_filename=history_filename, old_code=None): | _input_select_multiple_history_multiline(history_filename=history_filename, old_code=None) | text_file_to_string(history_filename)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "old_code",
      "function": "_input_select_multiple_history_multiline",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "old_code=None | old_code=old_code",
      "transformation_code": "old_code=None): | old_code=old_code) | _input_select_multiple_history_multiline(history_filename=history_filename, old_code=None) | _input_select_multiple_paragraphs(paragraphs, old_code=old_code)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "paragraphs",
      "function": "_input_select_multiple_paragraphs",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "paragraphs = [json.loads('\"' + x + '\"') for x in lines] | _input_select_multiple_paragraphs(paragraphs, old_code=None) | map(json.dumps, paragraphs)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "old_code",
      "function": "_input_select_multiple_paragraphs",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "assert old_code is not None | old_code=None",
      "transformation_code": "old_code=None): | _input_select_multiple_paragraphs(paragraphs, old_code=None) | quote(json.dumps(old_code)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "lss_name",
      "function": "_autocomplete_lss_name",
      "default_value": null,
      "usage_pattern": "indexing",
      "validation_code": "lss_name = lss_name | candidate_0 != lss_name | lss_name = candidate_0",
      "transformation_code": "lss_name = lss_name[len(command_name + ' '):] | lss_name = candidate_0 | _autocomplete_lss_name(lss_name, command_name=None) | fuzzy_string_match(lss_name, ric.current_candidates[0], case_sensitive=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "command_name",
      "function": "_autocomplete_lss_name",
      "default_value": null,
      "usage_pattern": "boolean_condition,addition",
      "validation_code": "command_name=None",
      "transformation_code": "command_name=None): | _autocomplete_lss_name(lss_name, command_name=None) | len(command_name + ' ')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "history_filename",
      "function": "_input_select_multiple_history",
      "default_value": "<history_filename>",
      "usage_pattern": "simple_usage",
      "validation_code": "history_filename=history_filename",
      "transformation_code": "history_filename=history_filename): | _input_select_multiple_history(history_filename=history_filename) | text_file_to_string(history_filename)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "query_path",
      "function": "_pterm_fuzzy_cd",
      "default_value": null,
      "usage_pattern": "boolean_condition,method_call",
      "validation_code": "query_path = os.path.expanduser",
      "transformation_code": "query_path = os.path.expanduser(query_path) | _pterm_fuzzy_cd(query_path, do_cd=False) | is_a_match(query_path, real_path, case_sensitive)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "do_cd",
      "function": "_pterm_fuzzy_cd",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "do_cd=False",
      "transformation_code": "do_cd=False): | _pterm_fuzzy_cd(query_path, do_cd=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "query",
      "function": "_ric_current_candidate_fuzzy_matches",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_ric_current_candidate_fuzzy_matches(query) | fuzzy_string_match(query, can[0], case_sensitive=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "username",
      "function": "get_number_of_github_gists",
      "default_value": "SqrtRyan",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "username='SqrtRyan'): | get_number_of_github_gists(username='SqrtRyan') | load_json('https://api.github.com/users/' + username)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "username",
      "function": "_get_all_github_gists_info",
      "default_value": "SqrtRyan",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "username='SqrtRyan', use_cache=True): | _get_all_github_gists_info(username='SqrtRyan', use_cache=True) | get_number_of_github_gists(username)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "use_cache",
      "function": "_get_all_github_gists_info",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "use_cache=True | do_cache = use_cache | use_cache=do_cache",
      "transformation_code": "use_cache=True): | use_cache=do_cache and 'nocopy') | _get_all_github_gists_info(username='SqrtRyan', use_cache=True) | load_json(page_loc, use_cache=do_cache and 'nocopy')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "max_filesize",
      "function": "_download_rp_gists",
      "default_value": "10mb",
      "usage_pattern": "simple_usage",
      "validation_code": "max_filesize = _FilesizeFormTranslator.as_num_bytes",
      "transformation_code": "max_filesize='10mb'): | max_filesize = _FilesizeFormTranslator.as_num_bytes(max_filesize) | _download_rp_gists(max_filesize='10mb') | as_num_bytes(max_filesize)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "ans",
      "function": "_input_select_rp_gists",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "isinstance(ans, str) | ans=None | old_code=ans",
      "transformation_code": "ans=None): | _input_select_rp_gists(ans=None) | isinstance(ans, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "dir",
      "function": "_pterm_cd",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "dir = os.path.expanduser",
      "transformation_code": "dir = os.path.expanduser(dir) | _pterm_cd(dir, repeat=1) | expanduser(dir)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "repeat",
      "function": "_pterm_cd",
      "default_value": 1,
      "usage_pattern": "simple_usage",
      "validation_code": "repeat=1",
      "transformation_code": "repeat=1): | _pterm_cd(dir, repeat=1) | range(repeat)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "file_or_string",
      "function": "_view_markdown_in_terminal",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "path = file_or_string | path = file_or_string",
      "transformation_code": "_view_markdown_in_terminal(file_or_string) | string_to_text_file(path, file_or_string)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "ans",
      "function": "_get_function_names",
      "default_value": null,
      "usage_pattern": "iteration,type_check",
      "validation_code": "isinstance(ans, str)",
      "transformation_code": "_get_function_names(ans) | isinstance(ans, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "_convert_powerpoint_file",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_convert_powerpoint_file(path, message=None) | process_powerpoint_file(path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "message",
      "function": "_convert_powerpoint_file",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "message=None",
      "transformation_code": "message=None): | _convert_powerpoint_file(path, message=None) | fansi_print(message, 'green', 'bold')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "shortcut",
      "function": "_add_pterm_prefix_shortcut",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "assert isinstance(shortcut, str), shortcut | isinstance(shortcut, str)",
      "transformation_code": "_add_pterm_prefix_shortcut(shortcut: str, replacement: str) | isinstance(shortcut, str)",
      "error_handling": "",
      "documentation": "shortcut('fu','!fileutil')"
    },
    {
      "arg_name": "replacement",
      "function": "_add_pterm_prefix_shortcut",
      "default_value": null,
      "usage_pattern": "length_check,type_check",
      "validation_code": "assert isinstance(replacement, str) or (isinstance(replacement, list) and len(replacement) == 2), replacement | isinstance(replacement, str) | isinstance(replacement, list)",
      "transformation_code": "_add_pterm_prefix_shortcut(shortcut: str, replacement: str) | isinstance(replacement, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "shortcuts",
      "function": "_add_pterm_command_shortcuts",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "shortcuts = shortcuts.splitlines",
      "transformation_code": "shortcuts = shortcuts.splitlines() | _add_pterm_command_shortcuts(shortcuts: str)",
      "error_handling": "",
      "documentation": "shortcuts('''"
    },
    {
      "arg_name": "get_user_input",
      "function": "pseudo_terminal",
      "default_value": "<python_input>",
      "usage_pattern": "simple_usage",
      "validation_code": "get_user_input=python_input | user_message = get_user_input",
      "transformation_code": "get_user_input=python_input, modifier=None, style=None, enable_ptpython=True, eval=eval, exec=exec, rprc='', level_title='', on_return=identity): | pseudo_terminal(*dicts, get_user_input=python_input, modifier=None, style=None, enable_ptpython=True, eval=eval, exec=exec, rprc='', level_title='', on_return=identity)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "modifier",
      "function": "pseudo_terminal",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "modifier=None | modifier = True | modifier = string_to_modifier",
      "transformation_code": "modifier=None, style=None, enable_ptpython=True, eval=eval, exec=exec, rprc='', level_title='', on_return=identity): | modifier = True | pseudo_terminal(*dicts, get_user_input=python_input, modifier=None, style=None, enable_ptpython=True, eval=eval, exec=exec, rprc='', level_title='', on_return=identity) | fansi_print('MOD ON --> use_modifier=True', 'blue')",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "style",
      "function": "pseudo_terminal",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check,method_call",
      "validation_code": "style=None | style = pseudo_terminal_style",
      "transformation_code": "style=None, enable_ptpython=True, eval=eval, exec=exec, rprc='', level_title='', on_return=identity): | style = pseudo_terminal_style() | pseudo_terminal(*dicts, get_user_input=python_input, modifier=None, style=None, enable_ptpython=True, eval=eval, exec=exec, rprc='', level_title='', on_return=identity) | fansi_print(style.message()",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "enable_ptpython",
      "function": "pseudo_terminal",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "enable_ptpython=True | enable_ptpython=enable_ptpython | enable_ptpython = False",
      "transformation_code": "enable_ptpython=True, eval=eval, exec=exec, rprc='', level_title='', on_return=identity): | enable_ptpython=enable_ptpython) | pseudo_terminal(*dicts, get_user_input=python_input, modifier=None, style=None, enable_ptpython=True, eval=eval, exec=exec, rprc='', level_title='', on_return=identity) | fansi_print('PROMPT TOOLKIT ON --> enable_ptpython=True', 'blue')",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "eval",
      "function": "pseudo_terminal",
      "default_value": "<eval>",
      "usage_pattern": "simple_usage",
      "validation_code": "eval=eval | eval = False | eval=eval",
      "transformation_code": "eval=eval, exec=exec, rprc='', level_title='', on_return=identity): | eval = False | pseudo_terminal(*dicts, get_user_input=python_input, modifier=None, style=None, enable_ptpython=True, eval=eval, exec=exec, rprc='', level_title='', on_return=identity) | _pterm_exeval('None', *dicts, exec=exec, eval=eval)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "exec",
      "function": "pseudo_terminal",
      "default_value": "<exec>",
      "usage_pattern": "simple_usage",
      "validation_code": "exec=exec | exec=exec | exec=exec",
      "transformation_code": "exec=exec, rprc='', level_title='', on_return=identity): | exec=exec, eval=eval) | pseudo_terminal(*dicts, get_user_input=python_input, modifier=None, style=None, enable_ptpython=True, eval=eval, exec=exec, rprc='', level_title='', on_return=identity) | _pterm_exeval('None', *dicts, exec=exec, eval=eval)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "rprc",
      "function": "pseudo_terminal",
      "default_value": "",
      "usage_pattern": "simple_usage",
      "validation_code": "user_message = rprc",
      "transformation_code": "rprc='', level_title='', on_return=identity): | pseudo_terminal(*dicts, get_user_input=python_input, modifier=None, style=None, enable_ptpython=True, eval=eval, exec=exec, rprc='', level_title='', on_return=identity) | _pterm_exeval(rprc, *dicts, exec=exec, eval=eval)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "level_title",
      "function": "pseudo_terminal",
      "default_value": "",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "level_title='', on_return=identity): | pseudo_terminal(*dicts, get_user_input=python_input, modifier=None, style=None, enable_ptpython=True, eval=eval, exec=exec, rprc='', level_title='', on_return=identity) | _PtermLevelTitleContext(level_title)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "on_return",
      "function": "pseudo_terminal",
      "default_value": "<identity>",
      "usage_pattern": "simple_usage",
      "validation_code": "on_return=identity",
      "transformation_code": "on_return=identity): | pseudo_terminal(*dicts, get_user_input=python_input, modifier=None, style=None, enable_ptpython=True, eval=eval, exec=exec, rprc='', level_title='', on_return=identity)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "title",
      "function": "set_process_title",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "set_process_title(title) | pip_import('setproctitle')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "string",
      "function": "parenthesizer_automator",
      "default_value": null,
      "usage_pattern": "boolean_condition,method_call,iteration",
      "validation_code": "string != strip_ansi_escapes | string = strip_ansi_escapes",
      "transformation_code": "string = strip_ansi_escapes(string) | parenthesizer_automator(string: str) | strip_ansi_escapes(string)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "frames",
      "function": "save_animated_png",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "frames = as_byte_images",
      "transformation_code": "frames = as_byte_images(frames) | save_animated_png(frames, path=None, *, framerate=None) | as_byte_images(frames)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "save_animated_png",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "path=None | path = get_unique_copy_path | path = with_file_extension",
      "transformation_code": "path=None, *, framerate=None): | path = get_unique_copy_path('video.png') | save_animated_png(frames, path=None, *, framerate=None) | with_file_extension(path, 'png')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "framerate",
      "function": "save_animated_png",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "framerate=None",
      "transformation_code": "framerate=None): | save_animated_png(frames, path=None, *, framerate=None) | int(1000 * (1 / framerate)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "total_disc_bytes",
      "default_value": null,
      "usage_pattern": "method_call,addition",
      "validation_code": "assert False, 'r.get_disc_space ERROR: ' + path + ' is neither a folder nor a file!' | path = os.path.join",
      "transformation_code": "path = os.path.join(folder, item) | total_disc_bytes(path) | get_file_size(path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "file_size",
      "function": "human_readable_file_size",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "file_size < 1024.0",
      "transformation_code": "human_readable_file_size(file_size: int) | int(file_size)",
      "error_handling": "",
      "documentation": "file_size(0)"
    },
    {
      "arg_name": "size_str",
      "function": "string_to_file_size",
      "default_value": null,
      "usage_pattern": "indexing,method_call,length_check,type_check",
      "validation_code": "assert isinstance(size_str, str) | assert len(size_str) > 0 | isinstance(size_str, str)",
      "transformation_code": "size_str = size_str.split() | string_to_file_size(size_str: str) | isinstance(size_str, str)",
      "error_handling": "try_except",
      "documentation": "size_str (str)"
    },
    {
      "arg_name": "path",
      "function": "get_file_size",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "",
      "transformation_code": "get_file_size(path) | getsize(path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "f",
      "function": "num_args",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "spec = f",
      "transformation_code": "num_args(f) | isfunction(f)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "_rich_inspect",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_rich_inspect(x) | inspect(x, all=True, help=True, methods=True, private=True, dunder=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "_rich_print",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_rich_print(x) | print(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "pretty_print",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "",
      "transformation_code": "pretty_print(x, with_lines=False) | _rich_print(x)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "with_lines",
      "function": "pretty_print",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "with_lines=False",
      "transformation_code": "with_lines=False): | pretty_print(x, with_lines=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "repr_kwargs_dict",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "",
      "transformation_code": "x = { | repr_kwargs_dict(x, *, align_equals=True) | print(dict_repr(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "align_equals",
      "function": "repr_kwargs_dict",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "align_equals=True | align_equals=True",
      "transformation_code": "align_equals=True): | align_equals=True) | repr_kwargs_dict(x, *, align_equals=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "string",
      "function": "repr_multiline",
      "default_value": null,
      "usage_pattern": "method_call,addition",
      "validation_code": "string = str | string = string.replace | string = repr_multiline",
      "transformation_code": "string = str(string) | string = '\"\"\"' + string + '\"\"\"' | repr_multiline(string) | str(string)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "sort",
      "function": "repr_vars",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "sort=True | output = sort",
      "transformation_code": "sort=True, frames_back=0): | repr_vars(*vars, sort=True, frames_back=0)",
      "error_handling": "",
      "documentation": "sort (bool, optional)"
    },
    {
      "arg_name": "frames_back",
      "function": "repr_vars",
      "default_value": 0,
      "usage_pattern": "simple_usage",
      "validation_code": "frames_back=0 | frames_back=2",
      "transformation_code": "frames_back=0): | frames_back=2 + frames_back, skip_missing=True) | repr_vars(*vars, sort=True, frames_back=0) | gather_vars(names, frames_back=2 + frames_back, skip_missing=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "has_len",
      "default_value": null,
      "usage_pattern": "length_check",
      "validation_code": "",
      "transformation_code": "has_len(x) | hasattr(x, '__len__')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "code",
      "function": "as_example_comment",
      "default_value": null,
      "usage_pattern": "indexing,method_call,iteration",
      "validation_code": "code=code.strip | code=code.splitlines | code=code.strip",
      "transformation_code": "code=code.strip() | code=code.splitlines() | as_example_comment(code, *, indent=' ' * 8) | print(as_example_comment(\"\"\"def as_example_comment(code,*,indent=' '*8)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "indent",
      "function": "as_example_comment",
      "default_value": "' ' * 8",
      "usage_pattern": "addition",
      "validation_code": "",
      "transformation_code": "indent=' ' * 8): | indent=' '*8): | as_example_comment(code, *, indent=' ' * 8) | print(as_example_comment(\"\"\"def as_example_comment(code,*,indent=' '*8)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "string_transpose",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "l = x",
      "transformation_code": "string_transpose(x, fill=' ')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "fill",
      "function": "string_transpose",
      "default_value": " ",
      "usage_pattern": "length_check,type_check",
      "validation_code": "assert len(fill) == 1 | assert isinstance(fill, str) | isinstance(fill, str)",
      "transformation_code": "fill=' '): | string_transpose(x, fill=' ') | len(fill)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "f",
      "function": "print_to_string",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert callable(f)",
      "transformation_code": "print_to_string(f, *args, **kwargs) | callable(f)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "flush",
      "function": "print_lines",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "flush=False | flush=flush",
      "transformation_code": "flush=False): | flush=flush) | print_lines(*args, flush=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "text_color",
      "function": "fansi_print_lines",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "text_color=None | text_color=text_color",
      "transformation_code": "text_color=None, style=None, background_color=None, underline_color=None, reset=True, link=None, truecolor=None): | text_color=text_color, background_color=background_color, style=style, reset=reset, truecolor=truecolor, link=link, underline_color=underline_color)) | fansi_print_lines(*args, text_color=None, style=None, background_color=None, underline_color=None, reset=True, link=None, truecolor=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "style",
      "function": "fansi_print_lines",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "style=None | style=... | style=style",
      "transformation_code": "style=None, background_color=None, underline_color=None, reset=True, link=None, truecolor=None): | style=...)) | fansi_print_lines(*args, text_color=None, style=None, background_color=None, underline_color=None, reset=True, link=None, truecolor=None) | fansi_print_lines(1,2,3,4,5, style='green')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "background_color",
      "function": "fansi_print_lines",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "background_color=None | background_color=background_color",
      "transformation_code": "background_color=None, underline_color=None, reset=True, link=None, truecolor=None): | background_color=background_color, style=style, reset=reset, truecolor=truecolor, link=link, underline_color=underline_color)) | fansi_print_lines(*args, text_color=None, style=None, background_color=None, underline_color=None, reset=True, link=None, truecolor=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "underline_color",
      "function": "fansi_print_lines",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "underline_color=None | underline_color=underline_color",
      "transformation_code": "underline_color=None, reset=True, link=None, truecolor=None): | underline_color=underline_color)) | fansi_print_lines(*args, text_color=None, style=None, background_color=None, underline_color=None, reset=True, link=None, truecolor=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "reset",
      "function": "fansi_print_lines",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "reset=True | reset=reset",
      "transformation_code": "reset=True, link=None, truecolor=None): | reset=reset, truecolor=truecolor, link=link, underline_color=underline_color)) | fansi_print_lines(*args, text_color=None, style=None, background_color=None, underline_color=None, reset=True, link=None, truecolor=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "link",
      "function": "fansi_print_lines",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "link=None | link=link",
      "transformation_code": "link=None, truecolor=None): | link=link, underline_color=underline_color)) | fansi_print_lines(*args, text_color=None, style=None, background_color=None, underline_color=None, reset=True, link=None, truecolor=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "truecolor",
      "function": "fansi_print_lines",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "truecolor=None | truecolor=truecolor",
      "transformation_code": "truecolor=None): | truecolor=truecolor, link=link, underline_color=underline_color)) | fansi_print_lines(*args, text_color=None, style=None, background_color=None, underline_color=None, reset=True, link=None, truecolor=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "M",
      "function": "reduced_row_echelon_form",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "reduced_row_echelon_form(M) | matrix2numpy(sympy.Matrix(M)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "vector",
      "function": "all_rolls",
      "default_value": null,
      "usage_pattern": "length_check",
      "validation_code": "vector = np.asarray | vector = np.roll",
      "transformation_code": "vector = np.asarray(vector) | vector = np.roll(vector, 1, axis=axis) | all_rolls(vector, axis=None) | asarray(vector)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "axis",
      "function": "all_rolls",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "axis=None | axis=axis",
      "transformation_code": "axis=None): | axis=axis) | all_rolls(vector, axis=None) | roll(vector, 1, axis=axis)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "array",
      "function": "circular_diff",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "circular_diff(array, axis=0) | roll(array, shift=-1, axis=axis)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "axis",
      "function": "circular_diff",
      "default_value": 0,
      "usage_pattern": "simple_usage",
      "validation_code": "axis=0 | axis=axis",
      "transformation_code": "axis=0): | axis=axis) - array | circular_diff(array, axis=0) | roll(array, shift=-1, axis=axis)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "array",
      "function": "circular_quotient",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "circular_quotient(array, axis=0) | roll(array, shift=-1, axis=axis)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "axis",
      "function": "circular_quotient",
      "default_value": 0,
      "usage_pattern": "simple_usage",
      "validation_code": "axis=0 | axis=axis",
      "transformation_code": "axis=0): | axis=axis) / array | circular_quotient(array, axis=0) | roll(array, shift=-1, axis=axis)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "a",
      "function": "circular_convolve",
      "default_value": null,
      "usage_pattern": "length_check,addition",
      "validation_code": "assert len(a.shape) == len(b.shape) == 1, 'Right now, circ_conv requires that both inputs are vectors. This may be generalized in the future to n-d convolutions.' | assert a.shape == b.shape, 'Right now, circ_conv requires that both vectors are the same length. This may change in the future.' | a = np.asarray",
      "transformation_code": "a = np.asarray(a) | circular_convolve(a, b) | asarray(a)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "b",
      "function": "circular_convolve",
      "default_value": null,
      "usage_pattern": "length_check",
      "validation_code": "assert len(a.shape) == len(b.shape) == 1, 'Right now, circ_conv requires that both inputs are vectors. This may be generalized in the future to n-d convolutions.' | assert a.shape == b.shape, 'Right now, circ_conv requires that both vectors are the same length. This may change in the future.' | b = np.asarray",
      "transformation_code": "b = np.asarray(b) | circular_convolve(a, b) | asarray(b)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "a",
      "function": "circular_cross_correlate",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "circular_cross_correlate(a, b) | input (because circular_cross_correlate is associative)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "b",
      "function": "circular_cross_correlate",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "b = circular_cross_correlate | b = ifft",
      "transformation_code": "b = circular_cross_correlate(a,b) | b = ifft(fft(a)*fft(b).conj) | circular_cross_correlate(a, b) | input (because circular_cross_correlate is associative)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "a",
      "function": "circular_auto_correlate",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "circular_auto_correlate(a) | dot(a,a)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "vector",
      "function": "circular_gaussian_blur",
      "default_value": null,
      "usage_pattern": "length_check",
      "validation_code": "assert len(vector.shape) == 1, 'Right now input must be a vector. This may change in the future.' | assert len(kernel) == len(vector), 'Internal logic assertion to circular_gaussian_blur' | vector = np.asarray",
      "transformation_code": "vector = np.asarray(vector) | circular_gaussian_blur(vector, sigma=1) | asarray(vector)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "sigma",
      "function": "circular_gaussian_blur",
      "default_value": 1,
      "usage_pattern": "equality_check,boolean_condition",
      "validation_code": "sigma=1 | sigma == 0 | sigma=sigma",
      "transformation_code": "sigma=1): | sigma == 0: | circular_gaussian_blur(vector, sigma=1)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "circular_extrema_indices",
      "default_value": null,
      "usage_pattern": "equality_check",
      "validation_code": "assert len(x.shape) == 1, 'Currently, only vectors are supported. This may change in the future.' | x = np.asarray | x > r",
      "transformation_code": "x = np.asarray(x) | x == r) | (x == l)).squeeze() | circular_extrema_indices(x) | area (example: circular_extrema_indices([1,2,2,2,3])",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "circ_diff_inverse",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "circ_diff_inverse(x) | cumsum(np.concatenate(([0], x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "n",
      "function": "ncr",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "ncr(n, r) | min(r, n - r)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "r",
      "function": "ncr",
      "default_value": null,
      "usage_pattern": "addition",
      "validation_code": "r = min | numer = r | denom = r",
      "transformation_code": "r = min(r, n - r) | r = reduce(op.mul, xrange(n, n - r, -1), 1) | ncr(n, r) | min(r, n - r)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "pid",
      "function": "get_process_memory",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "pid = get_process_id",
      "transformation_code": "pid = get_process_id() | get_process_memory(pid: int=None) | Process(pid)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "pid",
      "function": "get_process_username",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "",
      "transformation_code": "get_process_username(pid: int=None) | ID (pid)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "pid",
      "function": "get_process_exists",
      "default_value": null,
      "usage_pattern": "equality_check,boolean_condition",
      "validation_code": "pid == os.getpid",
      "transformation_code": "pid == os.getpid(): | get_process_exists(pid: int) | pid_exists(pid)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "pid",
      "function": "get_process_start_date",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "pid=None | pid = get_process_id",
      "transformation_code": "pid=None): | pid = get_process_id() | get_process_start_date(pid=None) | Process(pid)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "pid",
      "function": "kill_process",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "kill_process(pid, signall='SIGKILL') | kill(pid, signall)",
      "error_handling": "",
      "documentation": "pid (int)"
    },
    {
      "arg_name": "signall",
      "function": "kill_process",
      "default_value": "SIGKILL",
      "usage_pattern": "type_check",
      "validation_code": "isinstance(signall, str) | signall = getattr",
      "transformation_code": "signall='SIGKILL'): | signall = getattr(signal, signall) | kill_process(pid, signall='SIGKILL') | isinstance(signall, str)",
      "error_handling": "",
      "documentation": "signall (str or int)"
    },
    {
      "arg_name": "signall",
      "function": "kill_processes",
      "default_value": "SIGKILL",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "signall='SIGKILL', strict=True): | kill_processes(*pids, signall='SIGKILL', strict=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "strict",
      "function": "kill_processes",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "strict=True",
      "transformation_code": "strict=True): | kill_processes(*pids, signall='SIGKILL', strict=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "pattern",
      "function": "search_processes",
      "default_value": null,
      "usage_pattern": "method_call,addition",
      "validation_code": "pattern\n                >>> search_processes | pattern = pattern.lower | match_found = pattern",
      "transformation_code": "pattern = pattern.lower() | search_processes(pattern, *, show_progress=False, whole_arg=False)",
      "error_handling": "try_except",
      "documentation": "pattern: String to search for in process commands"
    },
    {
      "arg_name": "show_progress",
      "function": "search_processes",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "show_progress=False | show_progress = False",
      "transformation_code": "show_progress=False, whole_arg=False): | show_progress = False | search_processes(pattern, *, show_progress=False, whole_arg=False)",
      "error_handling": "try_except",
      "documentation": "show_progress: Whether to show progress information"
    },
    {
      "arg_name": "whole_arg",
      "function": "search_processes",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "whole_arg=False | whole_arg=False | whole_arg=True",
      "transformation_code": "whole_arg=False): | whole_arg=False (default): | search_processes(pattern, *, show_progress=False, whole_arg=False)",
      "error_handling": "try_except",
      "documentation": "whole_arg: If True, only match complete command arguments"
    },
    {
      "arg_name": "string",
      "function": "regex_match",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "regex_match(string, regex) | bool(re.fullmatch(regex, string)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "regex",
      "function": "regex_match",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "regex_match(string, regex) | bool(re.fullmatch(regex, string)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "string",
      "function": "regex_replace",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "regex_replace(string, regex, replacement) | sub(regex, replacement, string)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "regex",
      "function": "regex_replace",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "regex_replace(string, regex, replacement) | sub(regex, replacement, string)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "replacement",
      "function": "regex_replace",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "regex_replace(string, regex, replacement) | sub(regex, replacement, string)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "blinking",
      "function": "set_cursor_to_bar",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "blinking=False",
      "transformation_code": "blinking=False): | set_cursor_to_bar(blinking=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "blinking",
      "function": "set_cursor_to_box",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "blinking=True",
      "transformation_code": "blinking=True): | set_cursor_to_box(blinking=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "blinking",
      "function": "set_cursor_to_underscore",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "blinking=True",
      "transformation_code": "blinking=True): | set_cursor_to_underscore(blinking=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "is_number",
      "default_value": null,
      "usage_pattern": "boolean_condition,type_check",
      "validation_code": "isinstance(x, Number) | isinstance(x, type)",
      "transformation_code": "is_number(x) | isinstance(x, Number)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "iterable",
      "function": "powerset",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "powerset(iterable, reverse=False) | list(iterable)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "reverse",
      "function": "powerset",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "reverse=False | order = reverse",
      "transformation_code": "reverse=False): | powerset(iterable, reverse=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "ans",
      "function": "print_fix",
      "default_value": null,
      "usage_pattern": "indexing,method_call",
      "validation_code": "ans = ans.splitlines | ans = line_join",
      "transformation_code": "ans = ans.splitlines() | ans = line_join(ans) | print_fix(ans) | enumerate(ans)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "string",
      "function": "remove_all_whitespace",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "",
      "transformation_code": "remove_all_whitespace(string) | join(string.split()",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image_or_video",
      "function": "cv_bgr_rgb_swap",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "cv_bgr_rgb_swap(image_or_video, *, copy=True) | asarray(image_or_video)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "copy",
      "function": "cv_bgr_rgb_swap",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "copy=True | copy=True",
      "transformation_code": "copy=True): | copy=True, doesn't mutate the input and instead returns a new array | cv_bgr_rgb_swap(image_or_video, *, copy=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "img",
      "function": "cv_imshow",
      "default_value": null,
      "usage_pattern": "length_check",
      "validation_code": "assert ndim in {2, 3}, 'Cannot display img, because img.shape == ' + str(img.shape) | assert len(img) | img = as_numpy_image",
      "transformation_code": "img = as_numpy_image(img, copy=False) | img = cv_bgr_rgb_swap(img) | cv_imshow(img, label='cvImshow', *, img_is_rgb=True, wait=1, on_mouse_down=None, on_mouse_move=None, on_mouse_up=None, on_key_press=None) | as_numpy_image(img, copy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "label",
      "function": "cv_imshow",
      "default_value": "cvImshow",
      "usage_pattern": "type_check",
      "validation_code": "assert isinstance(label, str), 'cvImshow: Inputted label is not a string: repr(label) == ' + repr(label) | isinstance(label, str)",
      "transformation_code": "label='cvImshow', *, img_is_rgb=True, wait=1, on_mouse_down=None, on_mouse_move=None, on_mouse_up=None, on_key_press=None): | cv_imshow(img, label='cvImshow', *, img_is_rgb=True, wait=1, on_mouse_down=None, on_mouse_move=None, on_mouse_up=None, on_key_press=None) | isinstance(label, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "img_is_rgb",
      "function": "cv_imshow",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "img_is_rgb=True",
      "transformation_code": "img_is_rgb=True, wait=1, on_mouse_down=None, on_mouse_move=None, on_mouse_up=None, on_key_press=None): | cv_imshow(img, label='cvImshow', *, img_is_rgb=True, wait=1, on_mouse_down=None, on_mouse_move=None, on_mouse_up=None, on_key_press=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "wait",
      "function": "cv_imshow",
      "default_value": 1,
      "usage_pattern": "boolean_condition",
      "validation_code": "wait=1",
      "transformation_code": "wait=1, on_mouse_down=None, on_mouse_move=None, on_mouse_up=None, on_key_press=None): | cv_imshow(img, label='cvImshow', *, img_is_rgb=True, wait=1, on_mouse_down=None, on_mouse_move=None, on_mouse_up=None, on_key_press=None) | waitKey(max(1, wait // 2)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "on_mouse_down",
      "function": "cv_imshow",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "on_mouse_down=None",
      "transformation_code": "on_mouse_down=None, on_mouse_move=None, on_mouse_up=None, on_key_press=None): | cv_imshow(img, label='cvImshow', *, img_is_rgb=True, wait=1, on_mouse_down=None, on_mouse_move=None, on_mouse_up=None, on_key_press=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "on_mouse_move",
      "function": "cv_imshow",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "on_mouse_move=None",
      "transformation_code": "on_mouse_move=None, on_mouse_up=None, on_key_press=None): | cv_imshow(img, label='cvImshow', *, img_is_rgb=True, wait=1, on_mouse_down=None, on_mouse_move=None, on_mouse_up=None, on_key_press=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "on_mouse_up",
      "function": "cv_imshow",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "on_mouse_up=None",
      "transformation_code": "on_mouse_up=None, on_key_press=None): | cv_imshow(img, label='cvImshow', *, img_is_rgb=True, wait=1, on_mouse_down=None, on_mouse_move=None, on_mouse_up=None, on_key_press=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "on_key_press",
      "function": "cv_imshow",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "on_key_press=None",
      "transformation_code": "on_key_press=None): | cv_imshow(img, label='cvImshow', *, img_is_rgb=True, wait=1, on_mouse_down=None, on_mouse_move=None, on_mouse_up=None, on_key_press=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "_cv_helper",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "image = image.copy",
      "transformation_code": "image = image.copy() | _cv_helper(*, image, copy, antialias) | return (image, kwargs)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "copy",
      "function": "_cv_helper",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "",
      "transformation_code": "_cv_helper(*, image, copy, antialias)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "antialias",
      "function": "_cv_helper",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "",
      "transformation_code": "_cv_helper(*, image, copy, antialias)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "cv_find_contours",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "image = as_grayscale_image | image = as_byte_image",
      "transformation_code": "image = as_grayscale_image(image) | image = as_byte_image(image) | cv_find_contours(image, *, include_every_pixel=False) | as_grayscale_image(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "include_every_pixel",
      "function": "cv_find_contours",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "include_every_pixel=False",
      "transformation_code": "include_every_pixel=False): | cv_find_contours(image, *, include_every_pixel=False) | findContours(image, cv2.RETR_CCOMP, cv2.CHAIN_APPROX_NONE if include_every_pixel else cv2.CHAIN_APPROX_SIMPLE)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "contour",
      "function": "cv_simplify_contour",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "contour = as_cv_contour | contour = cv2.approxPolyDP | contour = as_points_array",
      "transformation_code": "contour = as_cv_contour(contour * big_number) | contour = cv2.approxPolyDP(contour, epsilon, closed=True) | cv_simplify_contour(contour, epsilon=0.001) | as_cv_contour(contour * big_number)",
      "error_handling": "",
      "documentation": "contour (numpy.ndarray)"
    },
    {
      "arg_name": "epsilon",
      "function": "cv_simplify_contour",
      "default_value": 0.001,
      "usage_pattern": "simple_usage",
      "validation_code": "epsilon=0.001",
      "transformation_code": "epsilon=0.001): | cv_simplify_contour(contour, epsilon=0.001) | approxPolyDP(contour, epsilon, closed=True)",
      "error_handling": "",
      "documentation": "epsilon (float, optional)"
    },
    {
      "arg_name": "contour",
      "function": "cv_distance_to_contour",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "contour = as_cv_contour",
      "transformation_code": "contour = as_cv_contour(contour) | cv_distance_to_contour(contour, x, y) | as_cv_contour(contour)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "cv_distance_to_contour",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "cv_distance_to_contour(contour, x, y) | abs(cv2.pointPolygonTest(contour, (x, y)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "y",
      "function": "cv_distance_to_contour",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "cv_distance_to_contour(contour, x, y) | abs(cv2.pointPolygonTest(contour, (x, y)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "contour",
      "function": "cv_closest_contour_point",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "points = contour",
      "transformation_code": "cv_closest_contour_point(contour, x, y)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "cv_closest_contour_point",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "x = np.argmin",
      "transformation_code": "x = np.argmin(squared_dists) | cv_closest_contour_point(contour, x, y) | tuple(points[index])",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "y",
      "function": "cv_closest_contour_point",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "cv_closest_contour_point(contour, x, y)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "contours",
      "function": "cv_closest_contour",
      "default_value": null,
      "usage_pattern": "length_check",
      "validation_code": "assert len(contours) != 0, 'cv_closest_contour: error: There are no contours to pick from because len(contours)==0'",
      "transformation_code": "cv_closest_contour(contours, x, y) | len(contours)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "cv_closest_contour",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "cv_closest_contour(contours, x, y) | cv_distance_to_contour(contour, x, y)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "y",
      "function": "cv_closest_contour",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "y=distance",
      "transformation_code": "y=distance) | cv_closest_contour(contours, x, y) | cv_distance_to_contour(contour, x, y)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "cv_draw_contours",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "image=image",
      "transformation_code": "image=image, copy=copy, antialias=antialias) | cv_draw_contours(image, contours, color='white', width=1, *, fill=False, antialias=True, copy=True) | _cv_helper(image=image, copy=copy, antialias=antialias)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "contours",
      "function": "cv_draw_contours",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "contours = list",
      "transformation_code": "contours = list(map(as_cv_contour, contours)) | cv_draw_contours(image, contours, color='white', width=1, *, fill=False, antialias=True, copy=True) | list(map(as_cv_contour, contours)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "color",
      "function": "cv_draw_contours",
      "default_value": "white",
      "usage_pattern": "simple_usage",
      "validation_code": "color = as_rgb_float_color | color = float_color_to_byte_color",
      "transformation_code": "color='white', width=1, *, fill=False, antialias=True, copy=True): | color = as_rgb_float_color(color) | cv_draw_contours(image, contours, color='white', width=1, *, fill=False, antialias=True, copy=True) | as_rgb_float_color(color)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "width",
      "function": "cv_draw_contours",
      "default_value": 1,
      "usage_pattern": "simple_usage",
      "validation_code": "width=1",
      "transformation_code": "width=1, *, fill=False, antialias=True, copy=True): | cv_draw_contours(image, contours, color='white', width=1, *, fill=False, antialias=True, copy=True) | drawContours(image, contours, -1, color, width, **kwargs)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "fill",
      "function": "cv_draw_contours",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "fill=False",
      "transformation_code": "fill=False, antialias=True, copy=True): | cv_draw_contours(image, contours, color='white', width=1, *, fill=False, antialias=True, copy=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "antialias",
      "function": "cv_draw_contours",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "antialias=True | antialias=antialias",
      "transformation_code": "antialias=True, copy=True): | antialias=antialias) | cv_draw_contours(image, contours, color='white', width=1, *, fill=False, antialias=True, copy=True) | _cv_helper(image=image, copy=copy, antialias=antialias)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "copy",
      "function": "cv_draw_contours",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "copy=True | copy=copy",
      "transformation_code": "copy=True): | copy=copy, antialias=antialias) | cv_draw_contours(image, contours, color='white', width=1, *, fill=False, antialias=True, copy=True) | _cv_helper(image=image, copy=copy, antialias=antialias)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "cv_draw_contour",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "cv_draw_contour(image, contour, *args, **kwargs) | cv_draw_contours(image, [contour], *args, **kwargs)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "contour",
      "function": "cv_draw_contour",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "cv_draw_contour(image, contour, *args, **kwargs) | cv_draw_contours(image, [contour], *args, **kwargs)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "cv_draw_rectangle",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "image=load_image | image=cv_draw_rectangle | image = as_byte_image",
      "transformation_code": "image=load_image('https://upload.wikimedia.org/wikipedia/en/7/7d/Lenna_%28test_image%29.png') | image=cv_draw_rectangle(image,start_point=random_coords(),end_point=random_coords(),color=random_rgb_byte_color()) | cv_draw_rectangle(image, *, start_point: tuple, end_point: tuple, color='white', thickness=1, copy=True, antialias=True) | load_image('https://upload.wikimedia.org/wikipedia/en/7/7d/Lenna_%28test_image%29.png')",
      "error_handling": "",
      "documentation": "image('https"
    },
    {
      "arg_name": "start_point",
      "function": "cv_draw_rectangle",
      "default_value": null,
      "usage_pattern": "length_check,iteration,type_check",
      "validation_code": "assert isinstance(start_point, tuple) and len(start_point) == 2 | isinstance(start_point, tuple) | start_point=random_coords",
      "transformation_code": "start_point=random_coords(),end_point=random_coords(),color=random_rgb_byte_color()) | start_point = tuple((int(x) for x in start_point)) | cv_draw_rectangle(image, *, start_point: tuple, end_point: tuple, color='white', thickness=1, copy=True, antialias=True) | points (start_point, end_point)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "end_point",
      "function": "cv_draw_rectangle",
      "default_value": null,
      "usage_pattern": "length_check,iteration,type_check",
      "validation_code": "assert isinstance(end_point, tuple) and len(end_point) == 2 | isinstance(end_point, tuple) | end_point=random_coords",
      "transformation_code": "end_point=random_coords(),color=random_rgb_byte_color()) | end_point = tuple((int(x) for x in end_point)) | cv_draw_rectangle(image, *, start_point: tuple, end_point: tuple, color='white', thickness=1, copy=True, antialias=True) | points (start_point, end_point)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "color",
      "function": "cv_draw_rectangle",
      "default_value": "white",
      "usage_pattern": "simple_usage",
      "validation_code": "color=random_rgb_byte_color | color = as_rgb_float_color | color = float_color_to_byte_color",
      "transformation_code": "color='white', thickness=1, copy=True, antialias=True): | color=random_rgb_byte_color()) | cv_draw_rectangle(image, *, start_point: tuple, end_point: tuple, color='white', thickness=1, copy=True, antialias=True) | as_rgb_float_color(color)",
      "error_handling": "",
      "documentation": "color())"
    },
    {
      "arg_name": "thickness",
      "function": "cv_draw_rectangle",
      "default_value": 1,
      "usage_pattern": "simple_usage",
      "validation_code": "thickness=1",
      "transformation_code": "thickness=1, copy=True, antialias=True): | cv_draw_rectangle(image, *, start_point: tuple, end_point: tuple, color='white', thickness=1, copy=True, antialias=True) | rectangle(image, start_point, end_point, color, thickness)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "copy",
      "function": "cv_draw_rectangle",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "copy=True | copy=copy",
      "transformation_code": "copy=True, antialias=True): | copy=copy, antialias=True) | cv_draw_rectangle(image, *, start_point: tuple, end_point: tuple, color='white', thickness=1, copy=True, antialias=True) | _cv_helper(image=image, copy=copy, antialias=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "antialias",
      "function": "cv_draw_rectangle",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "antialias=True | antialias=True",
      "transformation_code": "antialias=True): | antialias=True) | cv_draw_rectangle(image, *, start_point: tuple, end_point: tuple, color='white', thickness=1, copy=True, antialias=True) | _cv_helper(image=image, copy=copy, antialias=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "contour",
      "function": "cv_contour_length",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "contour = as_cv_contour",
      "transformation_code": "contour = as_cv_contour(contour) | cv_contour_length(contour, closed=False) | as_cv_contour(contour)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "closed",
      "function": "cv_contour_length",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "closed=False | closed=closed",
      "transformation_code": "closed=False): | closed=closed) | cv_contour_length(contour, closed=False) | arcLength(contour, closed=closed)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "contour",
      "function": "cv_contour_area",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "contour = as_cv_contour",
      "transformation_code": "contour = as_cv_contour(contour) | cv_contour_area(contour) | as_cv_contour(contour)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "cv_draw_circle",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "image = load_image | image=image | image = cv_draw_circle",
      "transformation_code": "image = load_image( | image=image, copy=copy, antialias=antialias) | cv_draw_circle(image, x, y, radius=5, color='white', rim=0, rim_color='black', *, antialias=True, copy=True) | load_image(\n        ...     \"https://github.com/RyannDaGreat/Diffusion-Illusions/blob/gh-pages/images/emma.png?raw=true\",\n        ...     use_cache=True,\n        ... )",
      "error_handling": "",
      "documentation": "image("
    },
    {
      "arg_name": "x",
      "function": "cv_draw_circle",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "x = random_ints | x = int",
      "transformation_code": "x = random_ints(N, get_image_width(image) - 1) | x = int(x) | cv_draw_circle(image, x, y, radius=5, color='white', rim=0, rim_color='black', *, antialias=True, copy=True) | display_image(cv_draw_circles(image, x, y, radii, colors, rims, rim_colors)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "y",
      "function": "cv_draw_circle",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "y=True | y=False | y = random_ints",
      "transformation_code": "y=True): | y=False, it *might* mutate the original image if the given image is an RGB or RGBA byte image. | cv_draw_circle(image, x, y, radius=5, color='white', rim=0, rim_color='black', *, antialias=True, copy=True) | load_image(\n        ...     \"https://github.com/RyannDaGreat/Diffusion-Illusions/blob/gh-pages/images/emma.png?raw=true\",\n        ...     use_cache=True,\n        ... )",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "radius",
      "function": "cv_draw_circle",
      "default_value": 5,
      "usage_pattern": "addition",
      "validation_code": "radius=5 | radius = max | radius=radius",
      "transformation_code": "radius=5, color='white', rim=0, rim_color='black', *, antialias=True, copy=True): | radius = max(0, radius) | cv_draw_circle(image, x, y, radius=5, color='white', rim=0, rim_color='black', *, antialias=True, copy=True) | max(0, radius)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "color",
      "function": "cv_draw_circle",
      "default_value": "white",
      "usage_pattern": "simple_usage",
      "validation_code": "color=rim_color | color=color | color=color",
      "transformation_code": "color='white', rim=0, rim_color='black', *, antialias=True, copy=True): | color=rim_color, rim=0, copy=False, antialias=antialias) | cv_draw_circle(image, x, y, radius=5, color='white', rim=0, rim_color='black', *, antialias=True, copy=True) | display_image(cv_draw_circles(image, x, y, radii, colors, rims, rim_colors)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "rim",
      "function": "cv_draw_circle",
      "default_value": 0,
      "usage_pattern": "boolean_condition",
      "validation_code": "rim=0 | rim > 0 | color=rim",
      "transformation_code": "rim=0, rim_color='black', *, antialias=True, copy=True): | rim=0, copy=False, antialias=antialias) | cv_draw_circle(image, x, y, radius=5, color='white', rim=0, rim_color='black', *, antialias=True, copy=True) | display_image(cv_draw_circles(image, x, y, radii, colors, rims, rim_colors)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "rim_color",
      "function": "cv_draw_circle",
      "default_value": "black",
      "usage_pattern": "simple_usage",
      "validation_code": "color=rim_color | rim_color=rim_color",
      "transformation_code": "rim_color='black', *, antialias=True, copy=True): | rim_color=rim_color, copy=False, antialias=antialias) | cv_draw_circle(image, x, y, radius=5, color='white', rim=0, rim_color='black', *, antialias=True, copy=True) | display_image(cv_draw_circles(image, x, y, radii, colors, rims, rim_colors)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "antialias",
      "function": "cv_draw_circle",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "antialias=True | antialias=antialias | antialias=antialias",
      "transformation_code": "antialias=True, copy=True): | antialias=antialias) | cv_draw_circle(image, x, y, radius=5, color='white', rim=0, rim_color='black', *, antialias=True, copy=True) | _cv_helper(image=image, copy=copy, antialias=antialias)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "copy",
      "function": "cv_draw_circle",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "copy=True | copy=False | copy=copy",
      "transformation_code": "copy=True): | copy=False, it *might* mutate the original image if the given image is an RGB or RGBA byte image. | cv_draw_circle(image, x, y, radius=5, color='white', rim=0, rim_color='black', *, antialias=True, copy=True) | _cv_helper(image=image, copy=copy, antialias=antialias)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "cv_draw_circles",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "image = load_image | image=image | image = cv_draw_circle",
      "transformation_code": "image = load_image( | image=image, copy=copy, antialias=antialias) | cv_draw_circles(image, x, y, radius=5, color='white', rim=0, rim_color='black', *, antialias=True, show_progress=False, copy=True) | load_image(\n        ...     \"https://github.com/RyannDaGreat/Diffusion-Illusions/blob/gh-pages/images/emma.png?raw=true\",\n        ...     use_cache=True,\n        ... )",
      "error_handling": "",
      "documentation": "image("
    },
    {
      "arg_name": "x",
      "function": "cv_draw_circles",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "x = random_ints | x = list",
      "transformation_code": "x = random_ints(N, get_image_width(image) - 1) | x = list(x) | cv_draw_circles(image, x, y, radius=5, color='white', rim=0, rim_color='black', *, antialias=True, show_progress=False, copy=True) | display_image(cv_draw_circles(image, x, y, radii, colors, rims, rim_colors)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "y",
      "function": "cv_draw_circles",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "y=True | y = random_ints | y = list",
      "transformation_code": "y=True): | y = random_ints(N, get_image_height(image) - 1) | cv_draw_circles(image, x, y, radius=5, color='white', rim=0, rim_color='black', *, antialias=True, show_progress=False, copy=True) | load_image(\n        ...     \"https://github.com/RyannDaGreat/Diffusion-Illusions/blob/gh-pages/images/emma.png?raw=true\",\n        ...     use_cache=True,\n        ... )",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "radius",
      "function": "cv_draw_circles",
      "default_value": 5,
      "usage_pattern": "simple_usage",
      "validation_code": "radius=5 | radius = list",
      "transformation_code": "radius=5, color='white', rim=0, rim_color='black', *, antialias=True, show_progress=False, copy=True): | radius = list(radius) | cv_draw_circles(image, x, y, radius=5, color='white', rim=0, rim_color='black', *, antialias=True, show_progress=False, copy=True) | is_iterable(radius)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "color",
      "function": "cv_draw_circles",
      "default_value": "white",
      "usage_pattern": "simple_usage",
      "validation_code": "color = list | color = list | color=rim_color",
      "transformation_code": "color='white', rim=0, rim_color='black', *, antialias=True, show_progress=False, copy=True): | color = [as_rgba_float_color(color)] | cv_draw_circles(image, x, y, radius=5, color='white', rim=0, rim_color='black', *, antialias=True, show_progress=False, copy=True) | display_image(cv_draw_circles(image, x, y, radii, colors, rims, rim_colors)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "rim",
      "function": "cv_draw_circles",
      "default_value": 0,
      "usage_pattern": "simple_usage",
      "validation_code": "rim=0 | rim = list | rim=rim",
      "transformation_code": "rim=0, rim_color='black', *, antialias=True, show_progress=False, copy=True): | rim = list(rim) | cv_draw_circles(image, x, y, radius=5, color='white', rim=0, rim_color='black', *, antialias=True, show_progress=False, copy=True) | display_image(cv_draw_circles(image, x, y, radii, colors, rims, rim_colors)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "rim_color",
      "function": "cv_draw_circles",
      "default_value": "black",
      "usage_pattern": "simple_usage",
      "validation_code": "rim_color = list | rim_color=rim_color",
      "transformation_code": "rim_color='black', *, antialias=True, show_progress=False, copy=True): | rim_color = [as_rgba_float_color(rim_color)] | cv_draw_circles(image, x, y, radius=5, color='white', rim=0, rim_color='black', *, antialias=True, show_progress=False, copy=True) | display_image(cv_draw_circles(image, x, y, radii, colors, rims, rim_colors)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "antialias",
      "function": "cv_draw_circles",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "antialias=True | antialias = list | antialias=antialias",
      "transformation_code": "antialias=True, show_progress=False, copy=True): | antialias = list(antialias) | cv_draw_circles(image, x, y, radius=5, color='white', rim=0, rim_color='black', *, antialias=True, show_progress=False, copy=True) | is_iterable(antialias)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "show_progress",
      "function": "cv_draw_circles",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "show_progress=False",
      "transformation_code": "show_progress=False, copy=True): | cv_draw_circles(image, x, y, radius=5, color='white', rim=0, rim_color='black', *, antialias=True, show_progress=False, copy=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "copy",
      "function": "cv_draw_circles",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "copy=True | copy=copy | copy=False",
      "transformation_code": "copy=True): | copy=copy, antialias=antialias) | cv_draw_circles(image, x, y, radius=5, color='white', rim=0, rim_color='black', *, antialias=True, show_progress=False, copy=True) | _cv_helper(image=image, copy=copy, antialias=antialias)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "cv_draw_arrow",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "image = load_image | image = np.ones | image=image",
      "transformation_code": "image = load_image( | image = np.ones((400, 600, 3), dtype=np.uint8) * 255  # White background | cv_draw_arrow(image, start_x, start_y, end_x, end_y, thickness=2, color='white', rim=0, rim_color='black', tip_length=0.3, *, antialias=True, copy=True) | load_image(\n        ...     \"https://github.com/RyannDaGreat/Diffusion-Illusions/blob/gh-pages/images/emma.png?raw=true\",\n        ...     use_cache=True,\n        ... )",
      "error_handling": "",
      "documentation": "image("
    },
    {
      "arg_name": "start_x",
      "function": "cv_draw_arrow",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "start_x = random_ints | start_x = np.linspace | end_x = start_x",
      "transformation_code": "start_x = random_ints(N, get_image_width(image) - 1) | start_x = np.linspace(50, 550, N) | cv_draw_arrow(image, start_x, start_y, end_x, end_y, thickness=2, color='white', rim=0, rim_color='black', tip_length=0.3, *, antialias=True, copy=True) | from (start_x, start_y)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "start_y",
      "function": "cv_draw_arrow",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "start_y = random_ints | start_y = np.full | start_y = int",
      "transformation_code": "start_y = random_ints(N, get_image_height(image) - 1) | start_y = np.full(N, 50) | cv_draw_arrow(image, start_x, start_y, end_x, end_y, thickness=2, color='white', rim=0, rim_color='black', tip_length=0.3, *, antialias=True, copy=True) | from (start_x, start_y)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "end_x",
      "function": "cv_draw_arrow",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "end_x = random_ints | end_x = start_x | end_x = int",
      "transformation_code": "end_x = random_ints(N, get_image_width(image) - 1) | end_x = start_x  # Same x coordinates (straight down) | cv_draw_arrow(image, start_x, start_y, end_x, end_y, thickness=2, color='white', rim=0, rim_color='black', tip_length=0.3, *, antialias=True, copy=True) | to (end_x, end_y)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "end_y",
      "function": "cv_draw_arrow",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "end_y = random_ints | end_y = np.full | end_y = int",
      "transformation_code": "end_y = random_ints(N, get_image_height(image) - 1) | end_y = np.full(N, 350) | cv_draw_arrow(image, start_x, start_y, end_x, end_y, thickness=2, color='white', rim=0, rim_color='black', tip_length=0.3, *, antialias=True, copy=True) | to (end_x, end_y)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "thickness",
      "function": "cv_draw_arrow",
      "default_value": 2,
      "usage_pattern": "addition",
      "validation_code": "thickness=2 | thickness = 3 | thickness = max",
      "transformation_code": "thickness=2, color='white', rim=0, rim_color='black', tip_length=0.3, *, antialias=True, copy=True): | thickness = 3 | cv_draw_arrow(image, start_x, start_y, end_x, end_y, thickness=2, color='white', rim=0, rim_color='black', tip_length=0.3, *, antialias=True, copy=True) | display_image(cv_draw_arrows(image, start_x, start_y, end_x, end_y, thicknesses, colors, rims, rim_colors, tip_lengths)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "color",
      "function": "cv_draw_arrow",
      "default_value": "white",
      "usage_pattern": "indexing,length_check",
      "validation_code": "color=rim_color | color=color | color=color",
      "transformation_code": "color='white', rim=0, rim_color='black', tip_length=0.3, *, antialias=True, copy=True): | color=rim_color, rim=0, tip_length=tip_length, copy=False, antialias=antialias) | cv_draw_arrow(image, start_x, start_y, end_x, end_y, thickness=2, color='white', rim=0, rim_color='black', tip_length=0.3, *, antialias=True, copy=True) | display_image(cv_draw_arrows(image, start_x, start_y, end_x, end_y, thicknesses, colors, rims, rim_colors, tip_lengths)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "rim",
      "function": "cv_draw_arrow",
      "default_value": 0,
      "usage_pattern": "boolean_condition",
      "validation_code": "rim=0 | rim > 0 | color=rim",
      "transformation_code": "rim=0, rim_color='black', tip_length=0.3, *, antialias=True, copy=True): | rim=0, tip_length=tip_length, copy=False, antialias=antialias) | cv_draw_arrow(image, start_x, start_y, end_x, end_y, thickness=2, color='white', rim=0, rim_color='black', tip_length=0.3, *, antialias=True, copy=True) | display_image(cv_draw_arrows(image, start_x, start_y, end_x, end_y, thicknesses, colors, rims, rim_colors, tip_lengths)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "rim_color",
      "function": "cv_draw_arrow",
      "default_value": "black",
      "usage_pattern": "simple_usage",
      "validation_code": "color=rim_color | rim_color=rim_color",
      "transformation_code": "rim_color='black', tip_length=0.3, *, antialias=True, copy=True): | rim_color=rim_color, tip_length=tip_length, copy=False, antialias=antialias) | cv_draw_arrow(image, start_x, start_y, end_x, end_y, thickness=2, color='white', rim=0, rim_color='black', tip_length=0.3, *, antialias=True, copy=True) | display_image(cv_draw_arrows(image, start_x, start_y, end_x, end_y, thicknesses, colors, rims, rim_colors, tip_lengths)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "tip_length",
      "function": "cv_draw_arrow",
      "default_value": 0.3,
      "usage_pattern": "simple_usage",
      "validation_code": "tip_length=0.3 | tip_length = 0.5 | tip_length = sqrt",
      "transformation_code": "tip_length=0.3, *, antialias=True, copy=True): | tip_length = 0.5 creates a diamond shape (head takes up half the arrow) | cv_draw_arrow(image, start_x, start_y, end_x, end_y, thickness=2, color='white', rim=0, rim_color='black', tip_length=0.3, *, antialias=True, copy=True) | display_image(cv_draw_arrows(image, start_x, start_y, end_x, end_y, thicknesses, colors, rims, rim_colors, tip_lengths)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "antialias",
      "function": "cv_draw_arrow",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "antialias=True | antialias=antialias | antialias=antialias",
      "transformation_code": "antialias=True, copy=True): | antialias=antialias) | cv_draw_arrow(image, start_x, start_y, end_x, end_y, thickness=2, color='white', rim=0, rim_color='black', tip_length=0.3, *, antialias=True, copy=True) | _cv_helper(image=image, copy=copy, antialias=antialias)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "copy",
      "function": "cv_draw_arrow",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "copy=True | copy=False | copy=copy",
      "transformation_code": "copy=True): | copy=False, it *might* mutate the original image if the given image is an RGB or RGBA byte image. | cv_draw_arrow(image, start_x, start_y, end_x, end_y, thickness=2, color='white', rim=0, rim_color='black', tip_length=0.3, *, antialias=True, copy=True) | _cv_helper(image=image, copy=copy, antialias=antialias)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "cv_draw_arrows",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "image = load_image | image=image | image = cv_draw_arrow",
      "transformation_code": "image = load_image( | image=image, copy=copy, antialias=antialias) | cv_draw_arrows(image, start_x, start_y, end_x, end_y, thickness=2, color='white', rim=0, rim_color='black', tip_length=0.3, *, visible=True, antialias=True, show_progress=False, copy=True) | load_image(\n        ...     \"https://github.com/RyannDaGreat/Diffusion-Illusions/blob/gh-pages/images/emma.png?raw=true\",\n        ...     use_cache=True,\n        ... )",
      "error_handling": "",
      "documentation": "image("
    },
    {
      "arg_name": "start_x",
      "function": "cv_draw_arrows",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "start_x = random_ints | start_x = list",
      "transformation_code": "start_x = random_ints(N, get_image_width(image) - 1) | start_x = list(start_x) | cv_draw_arrows(image, start_x, start_y, end_x, end_y, thickness=2, color='white', rim=0, rim_color='black', tip_length=0.3, *, visible=True, antialias=True, show_progress=False, copy=True) | display_image(cv_draw_arrows(image, start_x, start_y, end_x, end_y, thicknesses, colors, rims, rim_colors, tip_lengths)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "start_y",
      "function": "cv_draw_arrows",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "start_y = random_ints | start_y = list",
      "transformation_code": "start_y = random_ints(N, get_image_height(image) - 1) | start_y = list(start_y) | cv_draw_arrows(image, start_x, start_y, end_x, end_y, thickness=2, color='white', rim=0, rim_color='black', tip_length=0.3, *, visible=True, antialias=True, show_progress=False, copy=True) | display_image(cv_draw_arrows(image, start_x, start_y, end_x, end_y, thicknesses, colors, rims, rim_colors, tip_lengths)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "end_x",
      "function": "cv_draw_arrows",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "end_x = random_ints | end_x = list",
      "transformation_code": "end_x = random_ints(N, get_image_width(image) - 1) | end_x = list(end_x) | cv_draw_arrows(image, start_x, start_y, end_x, end_y, thickness=2, color='white', rim=0, rim_color='black', tip_length=0.3, *, visible=True, antialias=True, show_progress=False, copy=True) | display_image(cv_draw_arrows(image, start_x, start_y, end_x, end_y, thicknesses, colors, rims, rim_colors, tip_lengths)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "end_y",
      "function": "cv_draw_arrows",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "end_y = random_ints | end_y = list",
      "transformation_code": "end_y = random_ints(N, get_image_height(image) - 1) | end_y = list(end_y) | cv_draw_arrows(image, start_x, start_y, end_x, end_y, thickness=2, color='white', rim=0, rim_color='black', tip_length=0.3, *, visible=True, antialias=True, show_progress=False, copy=True) | display_image(cv_draw_arrows(image, start_x, start_y, end_x, end_y, thicknesses, colors, rims, rim_colors, tip_lengths)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "thickness",
      "function": "cv_draw_arrows",
      "default_value": 2,
      "usage_pattern": "simple_usage",
      "validation_code": "thickness=2 | thickness = list",
      "transformation_code": "thickness=2, color='white', rim=0, rim_color='black', tip_length=0.3, *, visible=True, antialias=True, show_progress=False, copy=True): | thickness = list(thickness) | cv_draw_arrows(image, start_x, start_y, end_x, end_y, thickness=2, color='white', rim=0, rim_color='black', tip_length=0.3, *, visible=True, antialias=True, show_progress=False, copy=True) | display_image(cv_draw_arrows(image, start_x, start_y, end_x, end_y, thicknesses, colors, rims, rim_colors, tip_lengths)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "color",
      "function": "cv_draw_arrows",
      "default_value": "white",
      "usage_pattern": "simple_usage",
      "validation_code": "color = list | color = list | color=rim_color",
      "transformation_code": "color='white', rim=0, rim_color='black', tip_length=0.3, *, visible=True, antialias=True, show_progress=False, copy=True): | color = [as_rgba_float_color(color)] | cv_draw_arrows(image, start_x, start_y, end_x, end_y, thickness=2, color='white', rim=0, rim_color='black', tip_length=0.3, *, visible=True, antialias=True, show_progress=False, copy=True) | display_image(cv_draw_arrows(image, start_x, start_y, end_x, end_y, thicknesses, colors, rims, rim_colors, tip_lengths)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "rim",
      "function": "cv_draw_arrows",
      "default_value": 0,
      "usage_pattern": "simple_usage",
      "validation_code": "rim=0 | rim = list | rim=rim",
      "transformation_code": "rim=0, rim_color='black', tip_length=0.3, *, visible=True, antialias=True, show_progress=False, copy=True): | rim = list(rim) | cv_draw_arrows(image, start_x, start_y, end_x, end_y, thickness=2, color='white', rim=0, rim_color='black', tip_length=0.3, *, visible=True, antialias=True, show_progress=False, copy=True) | display_image(cv_draw_arrows(image, start_x, start_y, end_x, end_y, thicknesses, colors, rims, rim_colors, tip_lengths)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "rim_color",
      "function": "cv_draw_arrows",
      "default_value": "black",
      "usage_pattern": "simple_usage",
      "validation_code": "rim_color = list | rim_color=rim_color",
      "transformation_code": "rim_color='black', tip_length=0.3, *, visible=True, antialias=True, show_progress=False, copy=True): | rim_color = [as_rgba_float_color(rim_color)] | cv_draw_arrows(image, start_x, start_y, end_x, end_y, thickness=2, color='white', rim=0, rim_color='black', tip_length=0.3, *, visible=True, antialias=True, show_progress=False, copy=True) | display_image(cv_draw_arrows(image, start_x, start_y, end_x, end_y, thicknesses, colors, rims, rim_colors, tip_lengths)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "tip_length",
      "function": "cv_draw_arrows",
      "default_value": 0.3,
      "usage_pattern": "simple_usage",
      "validation_code": "tip_length=0.3 | tip_length = list | tip_length=tip_length",
      "transformation_code": "tip_length=0.3, *, visible=True, antialias=True, show_progress=False, copy=True): | tip_length = list(tip_length) | cv_draw_arrows(image, start_x, start_y, end_x, end_y, thickness=2, color='white', rim=0, rim_color='black', tip_length=0.3, *, visible=True, antialias=True, show_progress=False, copy=True) | display_image(cv_draw_arrows(image, start_x, start_y, end_x, end_y, thicknesses, colors, rims, rim_colors, tip_lengths)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "visible",
      "function": "cv_draw_arrows",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "visible=True | visible = list",
      "transformation_code": "visible=True, antialias=True, show_progress=False, copy=True): | visible = list(visible) | cv_draw_arrows(image, start_x, start_y, end_x, end_y, thickness=2, color='white', rim=0, rim_color='black', tip_length=0.3, *, visible=True, antialias=True, show_progress=False, copy=True) | is_iterable(visible)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "antialias",
      "function": "cv_draw_arrows",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "antialias=True | antialias = list | antialias=antialias",
      "transformation_code": "antialias=True, show_progress=False, copy=True): | antialias = list(antialias) | cv_draw_arrows(image, start_x, start_y, end_x, end_y, thickness=2, color='white', rim=0, rim_color='black', tip_length=0.3, *, visible=True, antialias=True, show_progress=False, copy=True) | is_iterable(antialias)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "show_progress",
      "function": "cv_draw_arrows",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "show_progress=False",
      "transformation_code": "show_progress=False, copy=True): | cv_draw_arrows(image, start_x, start_y, end_x, end_y, thickness=2, color='white', rim=0, rim_color='black', tip_length=0.3, *, visible=True, antialias=True, show_progress=False, copy=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "copy",
      "function": "cv_draw_arrows",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "copy=True | copy=copy | copy=False",
      "transformation_code": "copy=True): | copy=copy, antialias=antialias) | cv_draw_arrows(image, start_x, start_y, end_x, end_y, thickness=2, color='white', rim=0, rim_color='black', tip_length=0.3, *, visible=True, antialias=True, show_progress=False, copy=True) | _cv_helper(image=image, copy=copy, antialias=antialias)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "y_values",
      "function": "cv_line_graph",
      "default_value": null,
      "usage_pattern": "indexing,length_check",
      "validation_code": "assert len(y_values) == len(x_values), (len(x_values), len(y_values)) | y_values = np.array",
      "transformation_code": "y_values = [math.sin(x + t) for x in np.linspace(0, 2 * math.pi, 100)] | y_values = [y_values[0]] * 2 | cv_line_graph(y_values, x_values=None, *, height=None, width=None, y_min=None, y_max=None, x_min=None, x_max=None, background_color=(1, 1, 1, 0) | len(y_values)",
      "error_handling": "",
      "documentation": "y_values (list or numpy.ndarray)"
    },
    {
      "arg_name": "x_values",
      "function": "cv_line_graph",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check,length_check",
      "validation_code": "assert len(y_values) == len(x_values), (len(x_values), len(y_values)) | x_values=None | x_values = np.linspace",
      "transformation_code": "x_values=None, *, height=None, width=None, y_min=None, y_max=None, x_min=None, x_max=None, background_color=(1, 1, 1, 0), line_color=(0, 0, 0, 1), vertical_bar_x=None, vertical_bar_color=(1, 0, 0, 1), antialias=True, thickness=1, vertical_bar_thickness=None): | x_values = np.linspace(0, 2 * math.pi, 100) | cv_line_graph(y_values, x_values=None, *, height=None, width=None, y_min=None, y_max=None, x_min=None, x_max=None, background_color=(1, 1, 1, 0) | array(x_values, dtype=np.float32)",
      "error_handling": "",
      "documentation": "x_values (list or numpy.ndarray, optional)"
    },
    {
      "arg_name": "height",
      "function": "cv_line_graph",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "height=None | height = int | height=100",
      "transformation_code": "height=None, width=None, y_min=None, y_max=None, x_min=None, x_max=None, background_color=(1, 1, 1, 0), line_color=(0, 0, 0, 1), vertical_bar_x=None, vertical_bar_color=(1, 0, 0, 1), antialias=True, thickness=1, vertical_bar_thickness=None): | height = int(200 + 50 * math.sin(t)) | cv_line_graph(y_values, x_values=None, *, height=None, width=None, y_min=None, y_max=None, x_min=None, x_max=None, background_color=(1, 1, 1, 0) | gather_args_call(cv_line_graph, mouse_xs, height=100, width=500, line_color=(255, 64, 32, 255)",
      "error_handling": "",
      "documentation": "height (int, optional)"
    },
    {
      "arg_name": "width",
      "function": "cv_line_graph",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "width=None | width = int | width=500",
      "transformation_code": "width=None, y_min=None, y_max=None, x_min=None, x_max=None, background_color=(1, 1, 1, 0), line_color=(0, 0, 0, 1), vertical_bar_x=None, vertical_bar_color=(1, 0, 0, 1), antialias=True, thickness=1, vertical_bar_thickness=None): | width = int(400 + 50 * math.cos(t)) | cv_line_graph(y_values, x_values=None, *, height=None, width=None, y_min=None, y_max=None, x_min=None, x_max=None, background_color=(1, 1, 1, 0) | gather_args_call(cv_line_graph, mouse_xs, height=100, width=500, line_color=(255, 64, 32, 255)",
      "error_handling": "",
      "documentation": "width (int, optional)"
    },
    {
      "arg_name": "y_min",
      "function": "cv_line_graph",
      "default_value": null,
      "usage_pattern": "boolean_condition,addition",
      "validation_code": "y_min=None | y_min = min | y_min = y_min",
      "transformation_code": "y_min=None, y_max=None, x_min=None, x_max=None, background_color=(1, 1, 1, 0), line_color=(0, 0, 0, 1), vertical_bar_x=None, vertical_bar_color=(1, 0, 0, 1), antialias=True, thickness=1, vertical_bar_thickness=None): | y_min = min(mouse_xs + mouse_ys) | cv_line_graph(y_values, x_values=None, *, height=None, width=None, y_min=None, y_max=None, x_min=None, x_max=None, background_color=(1, 1, 1, 0) | labeled_image(graph,'Min=%i Max=%i Entries=%i'%(y_min,y_max,len(mouse_xs)",
      "error_handling": "",
      "documentation": "y_min (float, optional)"
    },
    {
      "arg_name": "y_max",
      "function": "cv_line_graph",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "y_max=None | y_max = max | y_max = y_max",
      "transformation_code": "y_max=None, x_min=None, x_max=None, background_color=(1, 1, 1, 0), line_color=(0, 0, 0, 1), vertical_bar_x=None, vertical_bar_color=(1, 0, 0, 1), antialias=True, thickness=1, vertical_bar_thickness=None): | y_max = -1.5, 1.5 | cv_line_graph(y_values, x_values=None, *, height=None, width=None, y_min=None, y_max=None, x_min=None, x_max=None, background_color=(1, 1, 1, 0) | labeled_image(graph,'Min=%i Max=%i Entries=%i'%(y_min,y_max,len(mouse_xs)",
      "error_handling": "",
      "documentation": "y_max (float, optional)"
    },
    {
      "arg_name": "x_min",
      "function": "cv_line_graph",
      "default_value": null,
      "usage_pattern": "boolean_condition,addition",
      "validation_code": "x_min=None | x_min = x_min",
      "transformation_code": "x_min=None, x_max=None, background_color=(1, 1, 1, 0), line_color=(0, 0, 0, 1), vertical_bar_x=None, vertical_bar_color=(1, 0, 0, 1), antialias=True, thickness=1, vertical_bar_thickness=None): | x_min = x_min if x_min is not None else np.min(x_values) | cv_line_graph(y_values, x_values=None, *, height=None, width=None, y_min=None, y_max=None, x_min=None, x_max=None, background_color=(1, 1, 1, 0) | int((vertical_bar_x - x_min)",
      "error_handling": "",
      "documentation": "x_min (float, optional)"
    },
    {
      "arg_name": "x_max",
      "function": "cv_line_graph",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "x_max=None | x_max = 0 | x_max = x_max",
      "transformation_code": "x_max=None, background_color=(1, 1, 1, 0), line_color=(0, 0, 0, 1), vertical_bar_x=None, vertical_bar_color=(1, 0, 0, 1), antialias=True, thickness=1, vertical_bar_thickness=None): | x_max = 0, 2 * math.pi | cv_line_graph(y_values, x_values=None, *, height=None, width=None, y_min=None, y_max=None, x_min=None, x_max=None, background_color=(1, 1, 1, 0)",
      "error_handling": "",
      "documentation": "x_max (float, optional)"
    },
    {
      "arg_name": "background_color",
      "function": "cv_line_graph",
      "default_value": "(1, 1, 1, 0)",
      "usage_pattern": "simple_usage",
      "validation_code": "background_color = float_color_to_byte_color",
      "transformation_code": "background_color=(1, 1, 1, 0), line_color=(0, 0, 0, 1), vertical_bar_x=None, vertical_bar_color=(1, 0, 0, 1), antialias=True, thickness=1, vertical_bar_thickness=None): | background_color = (int(math.sin(t) * 127 + 128), int(math.cos(t) * 127 + 128), 0, int(abs(math.sin(t)) * 255)) | cv_line_graph(y_values, x_values=None, *, height=None, width=None, y_min=None, y_max=None, x_min=None, x_max=None, background_color=(1, 1, 1, 0) | float_color_to_byte_color(as_rgba_float_color(background_color)",
      "error_handling": "",
      "documentation": "background_color (tuple, optional)"
    },
    {
      "arg_name": "line_color",
      "function": "cv_line_graph",
      "default_value": "(0, 0, 0, 1)",
      "usage_pattern": "simple_usage",
      "validation_code": "line_color = float_color_to_byte_color | color=line_color",
      "transformation_code": "line_color=(0, 0, 0, 1), vertical_bar_x=None, vertical_bar_color=(1, 0, 0, 1), antialias=True, thickness=1, vertical_bar_thickness=None): | line_color = (int(math.cos(t) * 127 + 128), int(math.sin(t) * 127 + 128), 0, int(abs(math.cos(t)) * 255)) | gather_args_call(cv_line_graph, mouse_xs, height=100, width=500, line_color=(255, 64, 32, 255) | gather_args_call(cv_line_graph, mouse_ys, height=100, width=500, line_color=(64, 255, 32, 255)",
      "error_handling": "",
      "documentation": "line_color (tuple, optional)"
    },
    {
      "arg_name": "vertical_bar_x",
      "function": "cv_line_graph",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "vertical_bar_x=None | vertical_bar_x = 2",
      "transformation_code": "vertical_bar_x=None, vertical_bar_color=(1, 0, 0, 1), antialias=True, thickness=1, vertical_bar_thickness=None): | vertical_bar_x = 2 * math.pi * (frame % num_frames) / num_frames | int((vertical_bar_x - x_min)",
      "error_handling": "",
      "documentation": "vertical_bar_x (float, optional)"
    },
    {
      "arg_name": "vertical_bar_color",
      "function": "cv_line_graph",
      "default_value": "(1, 0, 0, 1)",
      "usage_pattern": "simple_usage",
      "validation_code": "vertical_bar_color = float_color_to_byte_color | color=vertical_bar_color",
      "transformation_code": "vertical_bar_color=(1, 0, 0, 1), antialias=True, thickness=1, vertical_bar_thickness=None): | vertical_bar_color = (255, 0, 0, int(abs(math.sin(t)) * 255)) | float_color_to_byte_color(as_rgba_float_color(vertical_bar_color)",
      "error_handling": "",
      "documentation": "vertical_bar_color (tuple, optional)"
    },
    {
      "arg_name": "antialias",
      "function": "cv_line_graph",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "antialias=True",
      "transformation_code": "antialias=True, thickness=1, vertical_bar_thickness=None):",
      "error_handling": "",
      "documentation": "antialias (bool, optional)"
    },
    {
      "arg_name": "thickness",
      "function": "cv_line_graph",
      "default_value": 1,
      "usage_pattern": "simple_usage",
      "validation_code": "thickness=1 | thickness=None | thickness = int",
      "transformation_code": "thickness=1, vertical_bar_thickness=None): | thickness = int(2 + math.sin(t))",
      "error_handling": "",
      "documentation": "thickness (int, optional)"
    },
    {
      "arg_name": "vertical_bar_thickness",
      "function": "cv_line_graph",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "vertical_bar_thickness=None | vertical_bar_thickness = int",
      "transformation_code": "vertical_bar_thickness=None): | vertical_bar_thickness = int(4 + math.cos(t))",
      "error_handling": "",
      "documentation": "vertical_bar_thickness (int, optional)"
    },
    {
      "arg_name": "histograms",
      "function": "rgb_histogram_image",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "assert histograms.shape == (3, 256) | histograms = as_rgb_image | histograms = byte_image_histogram",
      "transformation_code": "histograms = as_rgb_image(histograms) | histograms = byte_image_histogram(histograms) | rgb_histogram_image(histograms, *, width=256, height=128, yscale=1, smoothing=0) | is_image(histograms)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "width",
      "function": "rgb_histogram_image",
      "default_value": 256,
      "usage_pattern": "simple_usage",
      "validation_code": "width=256 | width = get_image_width | width=width",
      "transformation_code": "width=256, height=128, yscale=1, smoothing=0): | width = get_image_width(wc) | rgb_histogram_image(histograms, *, width=256, height=128, yscale=1, smoothing=0) | display_image(\n        ...         vertically_concatenated_images(\n        ...             wc, rgb_histogram_image(wc, width=width)",
      "error_handling": "",
      "documentation": "width(wc)"
    },
    {
      "arg_name": "height",
      "function": "rgb_histogram_image",
      "default_value": 128,
      "usage_pattern": "simple_usage",
      "validation_code": "height=128 | height=256 | height=height",
      "transformation_code": "height=128, yscale=1, smoothing=0): | height=256) | rgb_histogram_image(histograms, *, width=256, height=128, yscale=1, smoothing=0) | resize_image_to_fit(wc, height=256)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "yscale",
      "function": "rgb_histogram_image",
      "default_value": 1,
      "usage_pattern": "simple_usage",
      "validation_code": "yscale=1",
      "transformation_code": "yscale=1, smoothing=0): | rgb_histogram_image(histograms, *, width=256, height=128, yscale=1, smoothing=0)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "smoothing",
      "function": "rgb_histogram_image",
      "default_value": 0,
      "usage_pattern": "simple_usage",
      "validation_code": "smoothing=0",
      "transformation_code": "smoothing=0): | rgb_histogram_image(histograms, *, width=256, height=128, yscale=1, smoothing=0) | circ_gauss_blur(rh, smoothing)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "byte_image_histogram",
      "default_value": null,
      "usage_pattern": "indexing",
      "validation_code": "image = as_byte_image | image = image | num_channels = image",
      "transformation_code": "image = as_byte_image(image) | image = image[:, :, None] | byte_image_histogram(image) | as_byte_image(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "cv_apply_affine_to_image",
      "default_value": null,
      "usage_pattern": "iteration",
      "validation_code": "image = np.asarray | output_resolution = image",
      "transformation_code": "image = np.asarray(image) | cv_apply_affine_to_image(image, affine, output_resolution=None) | display_image(cv_apply_affine_to_image(pup,rotation_affine_2d(60/360*tau)",
      "error_handling": "",
      "documentation": "image(cv_apply_affine_to_image(pup,rotation_affine_2d(60/360*tau)))"
    },
    {
      "arg_name": "affine",
      "function": "cv_apply_affine_to_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "affine = np.asarray",
      "transformation_code": "affine = np.asarray(affine) | cv_apply_affine_to_image(image, affine, output_resolution=None) | display_image(cv_apply_affine_to_image(pup,rotation_affine_2d(60/360*tau)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "output_resolution",
      "function": "cv_apply_affine_to_image",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check,length_check,type_check",
      "validation_code": "assert isinstance(output_resolution, tuple) and len(output_resolution) == 2 | isinstance(output_resolution, tuple) | output_resolution=None",
      "transformation_code": "output_resolution=None): | output_resolution = image.shape[:2][::-1] | cv_apply_affine_to_image(image, affine, output_resolution=None) | is_number(output_resolution)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "contours",
      "function": "cv_manually_selected_contours",
      "default_value": null,
      "usage_pattern": "length_check,iteration",
      "validation_code": "assert len(contours) != 0, 'manually_selected_contours: error: There are no contours to pick from because len(contours)==0' | image = contours | contours = dict",
      "transformation_code": "contours = dict() | cv_manually_selected_contours(contours, image=None) | len(contours)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "cv_manually_selected_contours",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check,method_call",
      "validation_code": "image=None | image = contours_to_image | image = as_byte_image",
      "transformation_code": "image=None): | image = contours_to_image(contours, crop=False) | cv_manually_selected_contours(contours, image=None) | as_byte_image(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "contours",
      "function": "cv_manually_selected_contour",
      "default_value": null,
      "usage_pattern": "length_check",
      "validation_code": "assert len(contours) != 0, 'manually_selected_contours: error: There are no contours to pick from because len(contours)==0' | image = contours",
      "transformation_code": "cv_manually_selected_contour(contours, image=None) | len(contours)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "cv_manually_selected_contour",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check,method_call",
      "validation_code": "image=None | image = contours_to_image | image = as_byte_image",
      "transformation_code": "image=None): | image = contours_to_image(contours, crop=False) | cv_manually_selected_contour(contours, image=None) | as_byte_image(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "mask",
      "function": "cv_distance_transform",
      "default_value": null,
      "usage_pattern": "equality_check",
      "validation_code": "assert distances.shape == mask.shape | mask==True | mask==False",
      "transformation_code": "mask==True | mask==False | cv_distance_transform(mask, distance_to='white', metric='l2', algorithm='precise') | as_grayscale_image(mask)",
      "error_handling": "",
      "documentation": "mask: 2D boolean array"
    },
    {
      "arg_name": "distance_to",
      "function": "cv_distance_transform",
      "default_value": "white",
      "usage_pattern": "equality_check,boolean_condition",
      "validation_code": "",
      "transformation_code": "distance_to='white', metric='l2', algorithm='precise'): | distance_to == 'white': | cv_distance_transform(mask, distance_to='white', metric='l2', algorithm='precise') | ValueError('cv_distance_transform: distance_to should be either \"white\" or \"black\" but got %s' % distance_to)",
      "error_handling": "",
      "documentation": "distance_to: What are we returning distances to? Options"
    },
    {
      "arg_name": "metric",
      "function": "cv_distance_transform",
      "default_value": "l2",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "metric='l2', algorithm='precise'): | cv_distance_transform(mask, distance_to='white', metric='l2', algorithm='precise') | distanceTransform(mask, metric_map[metric], mask_map[algorithm])",
      "error_handling": "",
      "documentation": "metric: Distance metric. Options"
    },
    {
      "arg_name": "algorithm",
      "function": "cv_distance_transform",
      "default_value": "precise",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "algorithm='precise'): | cv_distance_transform(mask, distance_to='white', metric='l2', algorithm='precise') | Euclidean (Felzenszwalb algorithm, slowest)",
      "error_handling": "",
      "documentation": "algorithm: Algorithm precision. Options"
    },
    {
      "arg_name": "x",
      "function": "cosine_similarity",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "cosine_similarity(x, y) | sum(normalized(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "y",
      "function": "cosine_similarity",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "cosine_similarity(x, y) | normalized(y)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "contour",
      "function": "fourier_descriptor",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "fourier_descriptor(contour, *, order=10, normalize=True) | abs(np.fft.fft(complex_descriptors(evenly_split_path(np.squeeze(contour)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "order",
      "function": "fourier_descriptor",
      "default_value": 10,
      "usage_pattern": "simple_usage",
      "validation_code": "order=10",
      "transformation_code": "order=10, normalize=True): | fourier_descriptor(contour, *, order=10, normalize=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "normalize",
      "function": "fourier_descriptor",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "normalize=True",
      "transformation_code": "normalize=True): | fourier_descriptor(contour, *, order=10, normalize=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "contour_1",
      "function": "fourier_descriptor_distance",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "fourier_descriptor_distance(contour_1, contour_2, **fourier_descriptor_kwargs) | euclidean_distance(fourier_descriptor(contour_1, **fourier_descriptor_kwargs)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "contour_2",
      "function": "fourier_descriptor_distance",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "fourier_descriptor_distance(contour_1, contour_2, **fourier_descriptor_kwargs) | fourier_descriptor(contour_2, **fourier_descriptor_kwargs)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "contour_1",
      "function": "fourier_descriptor_similarity",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "fourier_descriptor_similarity(contour_1, contour_2, **fourier_descriptor_kwargs) | normalized_dot_product(fourier_descriptor(contour_1, **fourier_descriptor_kwargs)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "contour_2",
      "function": "fourier_descriptor_similarity",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "fourier_descriptor_similarity(contour_1, contour_2, **fourier_descriptor_kwargs) | fourier_descriptor(contour_2, **fourier_descriptor_kwargs)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "a",
      "function": "cv_contour_match",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "",
      "transformation_code": "a = [*n(fourier_descriptor(a)) * 1] | cv_contour_match(a, b, scale_invariant=False) | conv_circ(signal, kernel)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "b",
      "function": "cv_contour_match",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "",
      "transformation_code": "b = [*n(fourier_descriptor(b)) * 1] | cv_contour_match(a, b, scale_invariant=False) | n(fourier_descriptor(b)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "scale_invariant",
      "function": "cv_contour_match",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "scale_invariant=False",
      "transformation_code": "scale_invariant=False): | cv_contour_match(a, b, scale_invariant=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "contour",
      "function": "cv_best_match_contour",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "cv_best_match_contour(contour, contours, **kwargs) | is_iterable(contours)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "contours",
      "function": "cv_best_match_contour",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert is_iterable(contours)",
      "transformation_code": "cv_best_match_contour(contour, contours, **kwargs) | is_iterable(contours)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "contour",
      "function": "cv_best_match_contours",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "cv_best_match_contours(contour, contours, n=None, **kwargs) | is_iterable(contours)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "contours",
      "function": "cv_best_match_contours",
      "default_value": null,
      "usage_pattern": "length_check",
      "validation_code": "assert is_iterable(contours)",
      "transformation_code": "cv_best_match_contours(contour, contours, n=None, **kwargs) | is_iterable(contours)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "n",
      "function": "cv_best_match_contours",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "n=None",
      "transformation_code": "n=None, **kwargs): | cv_best_match_contours(contour, contours, n=None, **kwargs) | is_iterable(contours)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "_cv_morphological_helper",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "image = as_byte_image | original_dtype = image | image = image.copy",
      "transformation_code": "image = as_byte_image(image) | image = image.copy() | _cv_morphological_helper(image, diameter, cv_method, *, copy, circular, iterations) | as_byte_image(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "diameter",
      "function": "_cv_morphological_helper",
      "default_value": null,
      "usage_pattern": "equality_check,boolean_condition",
      "validation_code": "diameter == 0",
      "transformation_code": "diameter == 0: | _cv_morphological_helper(image, diameter, cv_method, *, copy, circular, iterations) | flat_circle_kernel(diameter)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "cv_method",
      "function": "_cv_morphological_helper",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "image = cv_method | image = cv_method",
      "transformation_code": "_cv_morphological_helper(image, diameter, cv_method, *, copy, circular, iterations)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "copy",
      "function": "_cv_morphological_helper",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "",
      "transformation_code": "_cv_morphological_helper(image, diameter, cv_method, *, copy, circular, iterations)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "circular",
      "function": "_cv_morphological_helper",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "",
      "transformation_code": "_cv_morphological_helper(image, diameter, cv_method, *, copy, circular, iterations)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "iterations",
      "function": "_cv_morphological_helper",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "iterations=iterations | iterations=iterations",
      "transformation_code": "iterations=iterations) | iterations=iterations) | _cv_morphological_helper(image, diameter, cv_method, *, copy, circular, iterations) | cv_method(image, kernel, iterations=iterations)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "cv_erode",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "cv_erode(image, diameter=2, *, copy=True, circular=False, iterations=1) | _cv_morphological_helper(image, diameter, cv_method=cv2.erode, copy=copy, circular=circular, iterations=iterations)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "diameter",
      "function": "cv_erode",
      "default_value": 2,
      "usage_pattern": "simple_usage",
      "validation_code": "diameter=2",
      "transformation_code": "diameter=2, *, copy=True, circular=False, iterations=1): | cv_erode(image, diameter=2, *, copy=True, circular=False, iterations=1) | _cv_morphological_helper(image, diameter, cv_method=cv2.erode, copy=copy, circular=circular, iterations=iterations)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "copy",
      "function": "cv_erode",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "copy=True | copy=copy",
      "transformation_code": "copy=True, circular=False, iterations=1): | copy=copy, circular=circular, iterations=iterations) | cv_erode(image, diameter=2, *, copy=True, circular=False, iterations=1) | _cv_morphological_helper(image, diameter, cv_method=cv2.erode, copy=copy, circular=circular, iterations=iterations)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "circular",
      "function": "cv_erode",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "circular=False | circular=circular",
      "transformation_code": "circular=False, iterations=1): | circular=circular, iterations=iterations) | cv_erode(image, diameter=2, *, copy=True, circular=False, iterations=1) | _cv_morphological_helper(image, diameter, cv_method=cv2.erode, copy=copy, circular=circular, iterations=iterations)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "iterations",
      "function": "cv_erode",
      "default_value": 1,
      "usage_pattern": "simple_usage",
      "validation_code": "iterations=1 | iterations=iterations",
      "transformation_code": "iterations=1): | iterations=iterations) | cv_erode(image, diameter=2, *, copy=True, circular=False, iterations=1) | _cv_morphological_helper(image, diameter, cv_method=cv2.erode, copy=copy, circular=circular, iterations=iterations)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "cv_dilate",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "cv_dilate(image, diameter=2, *, copy=True, circular=False, iterations=1) | _cv_morphological_helper(image, diameter, cv_method=cv2.dilate, copy=copy, circular=circular, iterations=iterations)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "diameter",
      "function": "cv_dilate",
      "default_value": 2,
      "usage_pattern": "simple_usage",
      "validation_code": "diameter=2",
      "transformation_code": "diameter=2, *, copy=True, circular=False, iterations=1): | cv_dilate(image, diameter=2, *, copy=True, circular=False, iterations=1) | _cv_morphological_helper(image, diameter, cv_method=cv2.dilate, copy=copy, circular=circular, iterations=iterations)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "copy",
      "function": "cv_dilate",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "copy=True | copy=copy",
      "transformation_code": "copy=True, circular=False, iterations=1): | copy=copy, circular=circular, iterations=iterations) | cv_dilate(image, diameter=2, *, copy=True, circular=False, iterations=1) | _cv_morphological_helper(image, diameter, cv_method=cv2.dilate, copy=copy, circular=circular, iterations=iterations)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "circular",
      "function": "cv_dilate",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "circular=False | circular=circular",
      "transformation_code": "circular=False, iterations=1): | circular=circular, iterations=iterations) | cv_dilate(image, diameter=2, *, copy=True, circular=False, iterations=1) | _cv_morphological_helper(image, diameter, cv_method=cv2.dilate, copy=copy, circular=circular, iterations=iterations)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "iterations",
      "function": "cv_dilate",
      "default_value": 1,
      "usage_pattern": "simple_usage",
      "validation_code": "iterations=1 | iterations=iterations",
      "transformation_code": "iterations=1): | iterations=iterations) | cv_dilate(image, diameter=2, *, copy=True, circular=False, iterations=1) | _cv_morphological_helper(image, diameter, cv_method=cv2.dilate, copy=copy, circular=circular, iterations=iterations)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "cv_gauss_blur",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "300\n            >>>     image | image\n            >>> sigma | image=create_test_image",
      "transformation_code": "image = np.zeros((height, width, 4), dtype=np.uint8) | image=create_test_image() | cv_gauss_blur(image, sigma=1, *, alpha_weighted=False) | line(image, (50, 100)",
      "error_handling": "",
      "documentation": "image()"
    },
    {
      "arg_name": "sigma",
      "function": "cv_gauss_blur",
      "default_value": 1,
      "usage_pattern": "addition",
      "validation_code": "sigma=1 | image\n            >>> sigma | sigma = int",
      "transformation_code": "sigma=1, *, alpha_weighted=False): | sigma=50 | cv_gauss_blur(image, sigma=1, *, alpha_weighted=False) | cv_gauss_blur(test_image,sigma,alpha_weighted=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "alpha_weighted",
      "function": "cv_gauss_blur",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "alpha_weighted=False | alpha_weighted=True | alpha_weighted=False",
      "transformation_code": "alpha_weighted=False): | alpha_weighted=True) | cv_gauss_blur(image, sigma=1, *, alpha_weighted=False) | cv_gauss_blur(test_image,sigma,alpha_weighted=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "is_opaque_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "is_opaque_image(image) | return (as_rgba_image(image)",
      "error_handling": "",
      "documentation": "image(image)==as_rgba_image(as_rgb_image(image))).all()"
    },
    {
      "arg_name": "image",
      "function": "is_transparent_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "is_transparent_image(image) | return (as_rgba_image(image)",
      "error_handling": "",
      "documentation": "image(image)!=as_rgba_image(as_rgb_image(image))).all()"
    },
    {
      "arg_name": "func",
      "function": "_alpha_weighted_rgba_image_func",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "weight = func | color = func",
      "transformation_code": "_alpha_weighted_rgba_image_func(func, image, *args, **kwargs)",
      "error_handling": "",
      "documentation": "func(image, *args, **kwargs) and operates on RGBA images as defined by rp.is_rgba_image]"
    },
    {
      "arg_name": "image",
      "function": "_alpha_weighted_rgba_image_func",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "image = as_float_image | image = as_rgba_image",
      "transformation_code": "image = as_float_image(image, copy=False) | image = as_rgba_image(image, copy=False) | _alpha_weighted_rgba_image_func(func, image, *args, **kwargs) | func(image, *args, **kwargs)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "angle",
      "function": "rotation_matrix",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "theta = angle",
      "transformation_code": "rotation_matrix(angle, out_of=tau)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "out_of",
      "function": "rotation_matrix",
      "default_value": "<tau>",
      "usage_pattern": "simple_usage",
      "validation_code": "out_of=tau",
      "transformation_code": "out_of=tau): | rotation_matrix(angle, out_of=tau)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "loop",
      "function": "loop_direction_2d",
      "default_value": null,
      "usage_pattern": "length_check,addition",
      "validation_code": "assert loop.shape[1] == 2, 'loop_direction_2d is for 2d loops only' | loop = as_points_array",
      "transformation_code": "loop = as_points_array(loop) | loop_direction_2d(loop) | as_points_array(loop)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "loop",
      "function": "is_clockwise",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "is_clockwise(loop) | loop_direction_2d(loop)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "loop",
      "function": "is_counter_clockwise",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "is_counter_clockwise(loop) | loop_direction_2d(loop)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "contour",
      "function": "cv_make_clockwise",
      "default_value": null,
      "usage_pattern": "indexing",
      "validation_code": "",
      "transformation_code": "cv_make_clockwise(contour) | is_clockwise(contour)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "scatter_plot",
      "default_value": null,
      "usage_pattern": "equality_check,length_check",
      "validation_code": "assert y is None, 'scatter_plot: x is a complex vector but y is not None. This is an invalid input combination as the imaginary part of x ARE the y-values' | x=np.linspace | x = as_points_array",
      "transformation_code": "x==[x0,x1,x2...] and y==[y0,y1,y2...] | x=np.linspace(0,tau) | scatter_plot(x, y=None, *, block=False, clear=True, color=None, dot_size=1, ylabel=None, xlabel=None, title=None) | drawing (if it's false, this plot will be drawn over whatever happens to exist there allready)",
      "error_handling": "",
      "documentation": "x(100))"
    },
    {
      "arg_name": "y",
      "function": "scatter_plot",
      "default_value": null,
      "usage_pattern": "equality_check,boolean_condition,none_check",
      "validation_code": "assert y is None, 'scatter_plot: x is a complex vector but y is not None. This is an invalid input combination as the imaginary part of x ARE the y-values' | y=None | x = y",
      "transformation_code": "y=None, *, block=False, clear=True, color=None, dot_size=1, ylabel=None, xlabel=None, title=None): | y==[y0,y1,y2...] | scatter_plot(x, y=None, *, block=False, clear=True, color=None, dot_size=1, ylabel=None, xlabel=None, title=None) | drawing (if it's false, this plot will be drawn over whatever happens to exist there allready)",
      "error_handling": "",
      "documentation": "y:"
    },
    {
      "arg_name": "block",
      "function": "scatter_plot",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "block=False | block=block",
      "transformation_code": "block=False, clear=True, color=None, dot_size=1, ylabel=None, xlabel=None, title=None): | block=block) | scatter_plot(x, y=None, *, block=False, clear=True, color=None, dot_size=1, ylabel=None, xlabel=None, title=None) | closed (blocks the main thread I think)",
      "error_handling": "",
      "documentation": "block: whether to pause the python program and make the plot interactive until closed (blocks the main thread I think)"
    },
    {
      "arg_name": "clear",
      "function": "scatter_plot",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "clear=True",
      "transformation_code": "clear=True, color=None, dot_size=1, ylabel=None, xlabel=None, title=None): | scatter_plot(x, y=None, *, block=False, clear=True, color=None, dot_size=1, ylabel=None, xlabel=None, title=None)",
      "error_handling": "",
      "documentation": "clear: if this is true, wipe the plot clean before drawing (if it's false, this plot will be drawn over whatever happens to exist there allready)"
    },
    {
      "arg_name": "color",
      "function": "scatter_plot",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "color=None | color=color",
      "transformation_code": "color=None, dot_size=1, ylabel=None, xlabel=None, title=None): | color=color) | scatter_plot(x, y=None, *, block=False, clear=True, color=None, dot_size=1, ylabel=None, xlabel=None, title=None) | scatter(x, y, s=dot_size, color=color)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "dot_size",
      "function": "scatter_plot",
      "default_value": 1,
      "usage_pattern": "simple_usage",
      "validation_code": "dot_size=1 | s=dot_size",
      "transformation_code": "dot_size=1, ylabel=None, xlabel=None, title=None): | scatter_plot(x, y=None, *, block=False, clear=True, color=None, dot_size=1, ylabel=None, xlabel=None, title=None) | scatter(x, y, s=dot_size, color=color)",
      "error_handling": "",
      "documentation": "dot_size: how big/thick should the points on the plot be?"
    },
    {
      "arg_name": "ylabel",
      "function": "scatter_plot",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "ylabel=None",
      "transformation_code": "ylabel=None, xlabel=None, title=None): | scatter_plot(x, y=None, *, block=False, clear=True, color=None, dot_size=1, ylabel=None, xlabel=None, title=None) | ylabel(ylabel)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "xlabel",
      "function": "scatter_plot",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "xlabel=None",
      "transformation_code": "xlabel=None, title=None): | scatter_plot(x, y=None, *, block=False, clear=True, color=None, dot_size=1, ylabel=None, xlabel=None, title=None) | xlabel(xlabel)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "title",
      "function": "scatter_plot",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "title=None",
      "transformation_code": "title=None): | scatter_plot(x, y=None, *, block=False, clear=True, color=None, dot_size=1, ylabel=None, xlabel=None, title=None) | title(title)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "string",
      "function": "line_split",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "",
      "transformation_code": "line_split(string)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "matrix",
      "function": "append_uniform_row",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "matrix = np.asarray",
      "transformation_code": "matrix = np.asarray(matrix) | append_uniform_row(matrix, scalar=0) | asarray(matrix)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "scalar",
      "function": "append_uniform_row",
      "default_value": 0,
      "usage_pattern": "simple_usage",
      "validation_code": "scalar=0",
      "transformation_code": "scalar=0): | append_uniform_row(matrix, scalar=0) | row_stack((matrix, scalar * np.ones((1, matrix.shape[1])",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "matrix",
      "function": "append_zeros_row",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "append_zeros_row(matrix) | append_uniform_row(matrix, 0)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "matrix",
      "function": "append_ones_row",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "append_ones_row(matrix) | append_uniform_row(matrix, 1)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "matrix",
      "function": "append_uniform_column",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "matrix = np.asarray",
      "transformation_code": "matrix = np.asarray(matrix) | append_uniform_column(matrix, scalar=0) | asarray(matrix)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "scalar",
      "function": "append_uniform_column",
      "default_value": 0,
      "usage_pattern": "simple_usage",
      "validation_code": "scalar=0",
      "transformation_code": "scalar=0): | append_uniform_column(matrix, scalar=0) | column_stack((matrix, scalar * np.ones((matrix.shape[0], 1)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "matrix",
      "function": "append_zeros_column",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "append_zeros_column(matrix) | append_uniform_column(matrix, 0)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "matrix",
      "function": "append_ones_column",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "append_ones_column(matrix) | append_uniform_column(matrix, 1)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "from_point",
      "function": "squared_euclidean_distance",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "squared_euclidean_distance(from_point, to_point) | as_numpy_array(from_point)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "to_point",
      "function": "squared_euclidean_distance",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "squared_euclidean_distance(from_point, to_point) | float(np.sum(np.abs(as_numpy_array(to_point)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "from_point",
      "function": "euclidean_distance",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "euclidean_distance(from_point, to_point) | squared_euclidean_distance(from_point, to_point)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "to_point",
      "function": "euclidean_distance",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "euclidean_distance(from_point, to_point) | squared_euclidean_distance(from_point, to_point)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "points",
      "function": "differential_euclidean_distances",
      "default_value": null,
      "usage_pattern": "indexing",
      "validation_code": "points = np.asarray | points = np.asarray",
      "transformation_code": "points = np.asarray(points) | points = np.asarray([*points, points[0]]) | differential_euclidean_distances(points, *, include_zero=False, loop=False) | asarray(points)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "include_zero",
      "function": "differential_euclidean_distances",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "include_zero=False",
      "transformation_code": "include_zero=False, loop=False): | differential_euclidean_distances(points, *, include_zero=False, loop=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "loop",
      "function": "differential_euclidean_distances",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "loop=False",
      "transformation_code": "loop=False): | differential_euclidean_distances(points, *, include_zero=False, loop=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "points",
      "function": "cumulative_euclidean_distances",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "cumulative_euclidean_distances(points, *, include_zero=False, loop=False) | cumsum(differential_euclidean_distances(points, include_zero=include_zero, loop=loop)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "include_zero",
      "function": "cumulative_euclidean_distances",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "include_zero=False | include_zero=False | include_zero= True",
      "transformation_code": "include_zero=False, loop=False): | include_zero=False)  ->     [1. 2.] | cumulative_euclidean_distances(points, *, include_zero=False, loop=False) | cumulative_euclidean_distances([[0,1],[0,0],[1,0]],include_zero=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "loop",
      "function": "cumulative_euclidean_distances",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "loop=False | loop=loop",
      "transformation_code": "loop=False): | loop=loop)) | cumulative_euclidean_distances(points, *, include_zero=False, loop=False) | cumsum(differential_euclidean_distances(points, include_zero=include_zero, loop=loop)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "evenly_split_path",
      "default_value": null,
      "usage_pattern": "iteration",
      "validation_code": "path = np.asarray | path = as_points_array | path = path.T",
      "transformation_code": "path = np.asarray(path) | path = as_points_array(path) | evenly_split_path(path, number_of_pieces=100, *, loop=False) | asarray(path)",
      "error_handling": "",
      "documentation": "path([[0,0],[0,1],[1,1],[1,0]],7,loop=False)"
    },
    {
      "arg_name": "number_of_pieces",
      "function": "evenly_split_path",
      "default_value": 100,
      "usage_pattern": "simple_usage",
      "validation_code": "number_of_pieces=100 | num=number_of_pieces",
      "transformation_code": "number_of_pieces=100, *, loop=False): | evenly_split_path(path, number_of_pieces=100, *, loop=False) | linspace(0, total_dist, num=number_of_pieces, endpoint=not loop)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "loop",
      "function": "evenly_split_path",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "loop=False | loop=False | loop=True",
      "transformation_code": "loop=False): | loop=False) | evenly_split_path(path, number_of_pieces=100, *, loop=False) | evenly_split_path([[0,0],[0,1],[1,1],[1,0]],7,loop=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "is_complex_vector",
      "default_value": null,
      "usage_pattern": "length_check",
      "validation_code": "x = np.asarray",
      "transformation_code": "x = np.asarray(x) | is_complex_vector(x) | asarray(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "is_points_array",
      "default_value": null,
      "usage_pattern": "length_check",
      "validation_code": "x = np.asarray",
      "transformation_code": "x = np.asarray(x) | is_points_array(x) | asarray(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "is_cv_contour",
      "default_value": null,
      "usage_pattern": "length_check",
      "validation_code": "x = np.asarray",
      "transformation_code": "x = np.asarray(x) | is_cv_contour(x) | asarray(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "points_array",
      "function": "_points_array_to_complex_vector",
      "default_value": null,
      "usage_pattern": "indexing",
      "validation_code": "assert is_points_array(points_array) | points_array = np.asarray",
      "transformation_code": "points_array = np.asarray(points_array) | _points_array_to_complex_vector(points_array) | asarray(points_array)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "points_array",
      "function": "_points_array_to_cv_contour",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert is_points_array(points_array) | points_array = np.asarray",
      "transformation_code": "points_array = np.asarray(points_array) | _points_array_to_cv_contour(points_array) | asarray(points_array)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "complex_vector",
      "function": "_complex_vector_to_points_array",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert is_complex_vector(complex_vector) | complex_vector = np.asarray",
      "transformation_code": "complex_vector = np.asarray(complex_vector) | _complex_vector_to_points_array(complex_vector) | asarray(complex_vector)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "complex_vector",
      "function": "_complex_vector_to_cv_contour",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert is_complex_vector(complex_vector) | complex_vector = np.asarray",
      "transformation_code": "complex_vector = np.asarray(complex_vector) | _complex_vector_to_cv_contour(complex_vector) | asarray(complex_vector)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "cv_contour",
      "function": "_cv_contour_to_points_array",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "assert is_cv_contour(cv_contour)",
      "transformation_code": "_cv_contour_to_points_array(cv_contour) | is_cv_contour(cv_contour)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "cv_contour",
      "function": "_cv_contour_to_complex_vector",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert is_cv_contour(cv_contour)",
      "transformation_code": "_cv_contour_to_complex_vector(cv_contour) | is_cv_contour(cv_contour)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "as_complex_vector",
      "default_value": null,
      "usage_pattern": "method_call,type_check",
      "validation_code": "assert False, 'Cannot convert 2d path: path=' + repr(path) | isinstance(path, set) | isinstance(path, dict)",
      "transformation_code": "path = list(path) | path=' + repr(path) | as_complex_vector(path) | isinstance(path, set)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "as_points_array",
      "default_value": null,
      "usage_pattern": "method_call,type_check",
      "validation_code": "assert False, 'Cannot convert 2d path: path=' + repr(path) | isinstance(path, set) | isinstance(path, dict)",
      "transformation_code": "path = list(path) | path=' + repr(path) | as_points_array(path) | isinstance(path, set)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "as_cv_contour",
      "default_value": null,
      "usage_pattern": "method_call,type_check",
      "validation_code": "assert False, 'Cannot convert 2d path: path=' + repr(path) | isinstance(path, set) | isinstance(path, dict)",
      "transformation_code": "path = list(path) | path=' + repr(path) | as_cv_contour(path) | isinstance(path, set)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "contours",
      "function": "contours_to_image",
      "default_value": null,
      "usage_pattern": "iteration",
      "validation_code": "img=contours | contours = list | contours = list",
      "transformation_code": "contours = [contour for contour in contours if len(contour) > 1] | contours = list(map(as_points_array, contours)) | contours_to_image(contours, *, scale=1, crop=True, **kwargs) | list(map(as_points_array, contours)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "scale",
      "function": "contours_to_image",
      "default_value": 1,
      "usage_pattern": "simple_usage",
      "validation_code": "scale=1",
      "transformation_code": "scale=1, crop=True, **kwargs): | contours_to_image(contours, *, scale=1, crop=True, **kwargs)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "crop",
      "function": "contours_to_image",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "crop=True",
      "transformation_code": "crop=True, **kwargs): | contours_to_image(contours, *, scale=1, crop=True, **kwargs)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "contour",
      "function": "contour_to_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "contour_to_image(contour, **kwargs) | contours_to_image (just give it one contour instead of a list of contours)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "from_points",
      "function": "squared_distance_matrix",
      "default_value": null,
      "usage_pattern": "indexing",
      "validation_code": "to_points = from_points | from_points = as_points_array | from_points = np.expand_dims",
      "transformation_code": "from_points = as_points_array(from_points) | from_points = np.expand_dims(np.asarray(from_points), 1) | squared_distance_matrix(from_points, to_points=None) | euclidean_distance(from_points[i],to_points[j])",
      "error_handling": "",
      "documentation": "from_points (returning a symmetric matrix)"
    },
    {
      "arg_name": "to_points",
      "function": "squared_distance_matrix",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check,indexing",
      "validation_code": "to_points=None | to_points = from_points | to_points = as_points_array",
      "transformation_code": "to_points=None): | to_points = from_points | squared_distance_matrix(from_points, to_points=None) | euclidean_distance(from_points[i],to_points[j])",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "from_points",
      "function": "distance_matrix",
      "default_value": null,
      "usage_pattern": "indexing",
      "validation_code": "",
      "transformation_code": "distance_matrix(from_points, to_points=None) | euclidean_distance(from_points[i],to_points[j])",
      "error_handling": "",
      "documentation": "from_points (returning a symmetric matrix)"
    },
    {
      "arg_name": "to_points",
      "function": "distance_matrix",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check,indexing",
      "validation_code": "to_points=None",
      "transformation_code": "to_points=None): | distance_matrix(from_points, to_points=None) | euclidean_distance(from_points[i],to_points[j])",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "from_points",
      "function": "closest_points",
      "default_value": null,
      "usage_pattern": "iteration",
      "validation_code": "from_points = np.asarray",
      "transformation_code": "from_points = np.asarray(from_points) | closest_points(from_points, to_points=None, *, return_values=False) | asarray(from_points)",
      "error_handling": "",
      "documentation": "from_points (returning a symmetric matrix)"
    },
    {
      "arg_name": "to_points",
      "function": "closest_points",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check,indexing",
      "validation_code": "to_points=None | to_points = np.asarray",
      "transformation_code": "to_points=None, *, return_values=False): | to_points = np.asarray(to_points) | closest_points(from_points, to_points=None, *, return_values=False) | asarray(to_points)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "return_values",
      "function": "closest_points",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "return_values=False",
      "transformation_code": "return_values=False): | closest_points(from_points, to_points=None, *, return_values=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "from_points",
      "function": "least_squares_euclidean_affine",
      "default_value": null,
      "usage_pattern": "length_check",
      "validation_code": "assert from_points.shape[1] == to_points.shape[1] == 2, 'All points must be two dimensional. from_points and to_points should both have shapes like (N,2), where N is any integer >=2. from_points.shape==' + str(from_points.shape) + ' and to_points.shape==' + str(to_points.shape) | assert len(from_points >= 2) and len(to_points >= 2), 'To fit a euclidean 2d transform (including only translation, rotation and scale), we must have at least two points. However, len(from_points)=' + str(len(from_points)) + ' and len(to_points)=' + str(len(to_points)) | assert len(from_points) == len(to_points), 'You must have the same number of points in both from_points and to_points, or else it doesnt make sense to say theres a 1-to-1 correspondence between the to_points and from_points. len(from_points)=' + str(len(from_points)) + ' and len(to_points)=' + str(len(to_points))",
      "transformation_code": "from_points=np.array([[0,0],[1,0],[0 ,1],[-1,0] ,[0,-1]])      #A plus-shape | from_points = as_complex_vector(from_points) | least_squares_euclidean_affine(from_points, to_points, *, include_correlation=False) | least_squares_euclidean_affine(from_points,to_points)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "to_points",
      "function": "least_squares_euclidean_affine",
      "default_value": null,
      "usage_pattern": "length_check",
      "validation_code": "assert from_points.shape[1] == to_points.shape[1] == 2, 'All points must be two dimensional. from_points and to_points should both have shapes like (N,2), where N is any integer >=2. from_points.shape==' + str(from_points.shape) + ' and to_points.shape==' + str(to_points.shape) | assert len(from_points >= 2) and len(to_points >= 2), 'To fit a euclidean 2d transform (including only translation, rotation and scale), we must have at least two points. However, len(from_points)=' + str(len(from_points)) + ' and len(to_points)=' + str(len(to_points)) | assert len(from_points) == len(to_points), 'You must have the same number of points in both from_points and to_points, or else it doesnt make sense to say theres a 1-to-1 correspondence between the to_points and from_points. len(from_points)=' + str(len(from_points)) + ' and len(to_points)=' + str(len(to_points))",
      "transformation_code": "to_points  =np.array([[0,0],[1.1,0.9],[-1.2,.9],[-.8,-1.1],[1,-1]])+[0,1]#An x-shape shifted up by 1 with a bit of noise | to_points=\n',to_points) | least_squares_euclidean_affine(from_points, to_points, *, include_correlation=False) | least_squares_euclidean_affine(from_points,to_points)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "include_correlation",
      "function": "least_squares_euclidean_affine",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "include_correlation=False | include_correlation=True",
      "transformation_code": "include_correlation=False): | include_correlation=True) | least_squares_euclidean_affine(from_points, to_points, *, include_correlation=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "from_points",
      "function": "least_squares_affine",
      "default_value": null,
      "usage_pattern": "length_check",
      "validation_code": "assert from_points.shape[1] == to_points.shape[1] == 2, 'All points must be two dimensional. from_points and to_points should both have shapes like (N,2), where N is any integer >=2. from_points.shape==' + str(from_points.shape) + ' and to_points.shape==' + str(to_points.shape) | assert len(from_points >= 2) and len(to_points >= 2), 'To fit a euclidean 2d transform (including only translation, rotation and scale), we must have at least two points. However, len(from_points)=' + str(len(from_points)) + ' and len(to_points)=' + str(len(to_points)) | assert len(from_points) == len(to_points), 'You must have the same number of points in both from_points and to_points, or else it doesnt make sense to say theres a 1-to-1 correspondence between the to_points and from_points. len(from_points)=' + str(len(from_points)) + ' and len(to_points)=' + str(len(to_points))",
      "transformation_code": "from_points = np.asarray(from_points) | least_squares_affine(from_points, to_points, *, include_extra=False) | asarray(from_points)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "to_points",
      "function": "least_squares_affine",
      "default_value": null,
      "usage_pattern": "length_check",
      "validation_code": "assert from_points.shape[1] == to_points.shape[1] == 2, 'All points must be two dimensional. from_points and to_points should both have shapes like (N,2), where N is any integer >=2. from_points.shape==' + str(from_points.shape) + ' and to_points.shape==' + str(to_points.shape) | assert len(from_points >= 2) and len(to_points >= 2), 'To fit a euclidean 2d transform (including only translation, rotation and scale), we must have at least two points. However, len(from_points)=' + str(len(from_points)) + ' and len(to_points)=' + str(len(to_points)) | assert len(from_points) == len(to_points), 'You must have the same number of points in both from_points and to_points, or else it doesnt make sense to say theres a 1-to-1 correspondence between the to_points and from_points. len(from_points)=' + str(len(from_points)) + ' and len(to_points)=' + str(len(to_points))",
      "transformation_code": "to_points = np.asarray(to_points) | least_squares_affine(from_points, to_points, *, include_extra=False) | asarray(to_points)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "include_extra",
      "function": "least_squares_affine",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "include_extra=False",
      "transformation_code": "include_extra=False): | least_squares_affine(from_points, to_points, *, include_extra=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "vector",
      "function": "translation_affine",
      "default_value": null,
      "usage_pattern": "length_check",
      "validation_code": "",
      "transformation_code": "translation_affine(vector) | column_stack((np.eye(len(vector)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "angle",
      "function": "rotation_affine_2d",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "rotation_affine_2d(angle, pivot=[0, 0], *, out_of=tau) | column_stack((rotation_matrix(angle, out_of=out_of)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "pivot",
      "function": "rotation_affine_2d",
      "default_value": "[0, 0]",
      "usage_pattern": "indexing",
      "validation_code": "pivot = np.asarray",
      "transformation_code": "pivot=[0, 0], *, out_of=tau): | pivot=[1,1],out_of=360))) | rotation_affine_2d(angle, pivot=[0, 0], *, out_of=tau) | print(apply_affine([[0 ,0]],rotation_affine_2d(180,pivot=[1,1],out_of=360)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "out_of",
      "function": "rotation_affine_2d",
      "default_value": "<tau>",
      "usage_pattern": "simple_usage",
      "validation_code": "out_of=tau | out_of=360 | out_of=360",
      "transformation_code": "out_of=tau): | out_of=360) | rotation_affine_2d(angle, pivot=[0, 0], *, out_of=tau) | rotation_affine_2d(90,out_of=360)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "affine",
      "function": "inverse_affine",
      "default_value": null,
      "usage_pattern": "indexing",
      "validation_code": "affine = append_zeros_row",
      "transformation_code": "affine = append_zeros_row(affine) | inverse_affine(affine) | apply_affine(ans,affine_inverse(A)",
      "error_handling": "",
      "documentation": "affine([[2,4],[5,6],[7,8]],A)"
    },
    {
      "arg_name": "ndim",
      "function": "identity_affine",
      "default_value": 2,
      "usage_pattern": "simple_usage",
      "validation_code": "ndim=2",
      "transformation_code": "ndim=2): | identity_affine(ndim=2) | append_zeros_column(np.eye(ndim)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "points",
      "function": "apply_affine",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert len(points.shape) == 2, 'Points should be a matrix, but points.shape==' + str(points.shape) | assert affine.shape == (ndim, ndim + 1), 'An affine transform matrix for ' + str(ndim) + '-dimensional points should have shape ' + str((ndim, ndim + 1)) + ', but instead affine.shape==' + str(affine.shape) | points = np.asarray",
      "transformation_code": "points = np.asarray(points) | apply_affine(points, affine) | asarray(points)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "affine",
      "function": "apply_affine",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert len(affine.shape) == 2, 'Affine should be a matrix, but affine.shape==' + str(affine.shape) | assert affine.shape == (ndim, ndim + 1), 'An affine transform matrix for ' + str(ndim) + '-dimensional points should have shape ' + str((ndim, ndim + 1)) + ', but instead affine.shape==' + str(affine.shape) | affine = np.asarray",
      "transformation_code": "affine = np.asarray(affine) | apply_affine(points, affine) | asarray(affine)",
      "error_handling": "",
      "documentation": "affine (it's a function in r.py, which can be obtained in a pypi package called 'rp')"
    },
    {
      "arg_name": "from_points",
      "function": "icp_least_squares_euclidean_affine",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "from_points = np.asarray",
      "transformation_code": "from_points = np.asarray(from_points) | icp_least_squares_euclidean_affine(from_points, to_points, max_iter=5, *, include_extra=False) | asarray(from_points)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "to_points",
      "function": "icp_least_squares_euclidean_affine",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "to_points = np.asarray",
      "transformation_code": "to_points = np.asarray(to_points) | icp_least_squares_euclidean_affine(from_points, to_points, max_iter=5, *, include_extra=False) | asarray(to_points)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "max_iter",
      "function": "icp_least_squares_euclidean_affine",
      "default_value": 5,
      "usage_pattern": "simple_usage",
      "validation_code": "assert max_iter >= 0, 'Cannot have a negative number of iterations!' | max_iter=5 | max_iter=_",
      "transformation_code": "max_iter=5, *, include_extra=False): | max_iter=_+1) | icp_least_squares_euclidean_affine(from_points, to_points, max_iter=5, *, include_extra=False) | icp_least_squares_euclidean_affine(a,b,include_extra=True,max_iter=_+1)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "include_extra",
      "function": "icp_least_squares_euclidean_affine",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "assert not include_extra, 'include_extra is not (currently) supported when there are no iterations' | include_extra=False | include_extra=True",
      "transformation_code": "include_extra=False): | include_extra=True,max_iter=_+1) | icp_least_squares_euclidean_affine(from_points, to_points, max_iter=5, *, include_extra=False) | icp_least_squares_euclidean_affine(a,b,include_extra=True,max_iter=_+1)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "affine",
      "function": "is_euclidean_affine_matrix",
      "default_value": null,
      "usage_pattern": "indexing",
      "validation_code": "affine = np.asarray",
      "transformation_code": "affine = np.asarray(affine) | is_euclidean_affine_matrix(affine) | asarray(affine)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "affine",
      "function": "is_affine_matrix",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "affine = np.asarray",
      "transformation_code": "affine = np.asarray(affine) | is_affine_matrix(affine) | asarray(affine)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "affine",
      "function": "euclidean_affine_to_complex_linear_coeffs",
      "default_value": null,
      "usage_pattern": "equality_check,indexing",
      "validation_code": "assert is_euclidean_affine_matrix(affine), 'The given affine is not a euclidean transform. affine==' + repr(affine) | m = affine | b = affine",
      "transformation_code": "affine==' + repr(affine) | euclidean_affine_to_complex_linear_coeffs(affine) | is_euclidean_affine_matrix(affine)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "m",
      "function": "complex_linear_coeffs_to_euclidean_affine",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "complex_linear_coeffs_to_euclidean_affine(m, b) | G(F(m,b)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "b",
      "function": "complex_linear_coeffs_to_euclidean_affine",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "complex_linear_coeffs_to_euclidean_affine(m, b) | G(F(m,b)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "tensor",
      "function": "_torch_tensor_to_bytes_for_hashing",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_torch_tensor_to_bytes_for_hashing(tensor) | save(tensor, buff)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "value",
      "function": "handy_hash",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "",
      "transformation_code": "handy_hash(value) | fallback(value)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "_set_hash",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "assert isinstance(x, set) | isinstance(x, set)",
      "transformation_code": "_set_hash(x) | isinstance(x, set)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "_dict_hash",
      "default_value": null,
      "usage_pattern": "method_call,type_check",
      "validation_code": "assert isinstance(x, dict) | isinstance(x, dict)",
      "transformation_code": "_dict_hash(x, value_hasher=handy_hash) | isinstance(x, dict)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "value_hasher",
      "function": "_dict_hash",
      "default_value": "<handy_hash>",
      "usage_pattern": "simple_usage",
      "validation_code": "value_hasher=handy_hash",
      "transformation_code": "value_hasher=handy_hash): | _dict_hash(x, value_hasher=handy_hash) | add(hash((__secret_number, 'dict_hash_pair', key, value_hasher(value)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "_list_hash",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "assert isinstance(x, list) | isinstance(x, list)",
      "transformation_code": "_list_hash(x, value_hasher=handy_hash) | isinstance(x, list)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "value_hasher",
      "function": "_list_hash",
      "default_value": "<handy_hash>",
      "usage_pattern": "simple_usage",
      "validation_code": "value_hasher=handy_hash",
      "transformation_code": "value_hasher=handy_hash): | _list_hash(x, value_hasher=handy_hash) | hash((__secret_number, '_list_hash', tuple(map(value_hasher, x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "_tuple_hash",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "assert isinstance(x, tuple) | isinstance(x, tuple)",
      "transformation_code": "_tuple_hash(x, value_hasher=handy_hash) | isinstance(x, tuple)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "value_hasher",
      "function": "_tuple_hash",
      "default_value": "<handy_hash>",
      "usage_pattern": "simple_usage",
      "validation_code": "value_hasher=handy_hash",
      "transformation_code": "value_hasher=handy_hash): | _tuple_hash(x, value_hasher=handy_hash) | hash((__secret_number, '_tuple_hash', tuple(map(value_hasher, x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "_slice_hash",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "assert isinstance(x, slice) | isinstance(x, slice)",
      "transformation_code": "_slice_hash(x, value_hasher=handy_hash) | isinstance(x, slice)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "value_hasher",
      "function": "_slice_hash",
      "default_value": "<handy_hash>",
      "usage_pattern": "simple_usage",
      "validation_code": "value_hasher=handy_hash",
      "transformation_code": "value_hasher=handy_hash): | _slice_hash(x, value_hasher=handy_hash) | hash((__secret_number, '_slice_hash', (value_hasher(x.start)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "function",
      "function": "args_hash",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert callable(function), 'Cant hash the inputs of function because function isnt callable and therefore doesnt receive arguments. repr(function)==' + repr(function)",
      "transformation_code": "args_hash(function, *args, **kwargs) | callable(function)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "function",
      "function": "memoized",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert callable(function), \"You can't memoize something that isn't a function (you tried to memoize \" + repr(function) + \", which isn't callable)\" | memoized_function.original_function = function",
      "transformation_code": "function = function | memoized(function) | callable(function)",
      "error_handling": "",
      "documentation": "function (let's call if F), you can create a new function cached(F), and put it in a scope that will run out eventually so that there are no memory leaks."
    },
    {
      "arg_name": "path",
      "function": "_omni_load_animated_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_omni_load_animated_image(path) | load_video(path, show_progress=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "video",
      "function": "_omni_save_animated_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_omni_save_animated_image(video, path) | is_image(video)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "_omni_save_animated_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_omni_save_animated_image(video, path) | save_image(video, path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "_omni_save_default_extension",
      "default_value": null,
      "usage_pattern": "length_check,iteration,type_check",
      "validation_code": "isinstance(x, str) | isinstance(x, list)",
      "transformation_code": "_omni_save_default_extension(x) | is_image(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "_omni_load",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_omni_load(path) | ends_with_any(path, '.json')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "object",
      "function": "_omni_save",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "isinstance(object, str) | isinstance(object, bytes)",
      "transformation_code": "_omni_save(object, path, *, auto_extension=False) | _omni_save_default_extension(object)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "_omni_save",
      "default_value": null,
      "usage_pattern": "addition",
      "validation_code": "",
      "transformation_code": "_omni_save(object, path, *, auto_extension=False) | and (not has_file_extension(path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "auto_extension",
      "function": "_omni_save",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "auto_extension=False",
      "transformation_code": "auto_extension=False): | _omni_save(object, path, *, auto_extension=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "file_cache_call",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "path = get_absolute_path",
      "transformation_code": "path = get_absolute_path(path, physical=False) | file_cache_call(path, func, *args, save=None, load=None, invalid=None, **kwargs) | save(obj, path)",
      "error_handling": "",
      "documentation": "path: Path to the cache file"
    },
    {
      "arg_name": "func",
      "function": "file_cache_call",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "result = func",
      "transformation_code": "file_cache_call(path, func, *args, save=None, load=None, invalid=None, **kwargs) | ValueError(get_current_function_name()",
      "error_handling": "",
      "documentation": "func: Function to call if cache miss"
    },
    {
      "arg_name": "save",
      "function": "file_cache_call",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "save=None | save = save",
      "transformation_code": "save=None, load=None, invalid=None, **kwargs): | save = save or _omni_save | file_cache_call(path, func, *args, save=None, load=None, invalid=None, **kwargs)",
      "error_handling": "",
      "documentation": "save: Function to save result to file"
    },
    {
      "arg_name": "load",
      "function": "file_cache_call",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "load=None | load = load",
      "transformation_code": "load=None, invalid=None, **kwargs): | load = load or _omni_load | file_cache_call(path, func, *args, save=None, load=None, invalid=None, **kwargs)",
      "error_handling": "",
      "documentation": "load: Function to load result from file"
    },
    {
      "arg_name": "invalid",
      "function": "file_cache_call",
      "default_value": null,
      "usage_pattern": "equality_check,boolean_condition,none_check",
      "validation_code": "invalid=None | invalid == True",
      "transformation_code": "invalid=None, **kwargs): | invalid == True: | file_cache_call(path, func, *args, save=None, load=None, invalid=None, **kwargs) | is_number(invalid)",
      "error_handling": "",
      "documentation": "invalid: Chooses whether to invalidate the cache"
    },
    {
      "arg_name": "path",
      "function": "file_cache_wrap",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "path = get_absolute_path | wrapper.cache_path = path",
      "transformation_code": "path = get_absolute_path(path, physical=False) | path = path | file_cache_wrap(path, save=None, load=None) | get_absolute_path(path, physical=False)",
      "error_handling": "",
      "documentation": "path: Path to the cache file"
    },
    {
      "arg_name": "save",
      "function": "file_cache_wrap",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "save=None | save=save | wrapper.save = save",
      "transformation_code": "save=None, load=None): | save=save, load=load) | file_cache_wrap(path, save=None, load=None) | file (default: _omni_save)",
      "error_handling": "",
      "documentation": "save: Function to save result to file (default"
    },
    {
      "arg_name": "load",
      "function": "file_cache_wrap",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "load=None | load=load | wrapper.load = load",
      "transformation_code": "load=None): | load=load) | file_cache_wrap(path, save=None, load=None) | file (default: _omni_load)",
      "error_handling": "",
      "documentation": "load: Function to load result from file (default"
    },
    {
      "arg_name": "source",
      "function": "_get_hash",
      "default_value": null,
      "usage_pattern": "length_check,type_check",
      "validation_code": "isinstance(source, bytes) | isinstance(source, str)",
      "transformation_code": "_get_hash(source, hash_func_name, func_display_name, *, show_progress, format) | isinstance(source, bytes)",
      "error_handling": "",
      "documentation": "source: The data or file path to hash"
    },
    {
      "arg_name": "hash_func_name",
      "function": "_get_hash",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_get_hash(source, hash_func_name, func_display_name, *, show_progress, format) | getattr(hashlib, hash_func_name)",
      "error_handling": "",
      "documentation": "hash_func_name: Name of the hash function to use (e.g., 'md5', 'sha256')"
    },
    {
      "arg_name": "func_display_name",
      "function": "_get_hash",
      "default_value": null,
      "usage_pattern": "addition",
      "validation_code": "",
      "transformation_code": "_get_hash(source, hash_func_name, func_display_name, *, show_progress, format) | TypeError('rp.' + func_display_name + \": Unsupported input type '\" + type(source)",
      "error_handling": "",
      "documentation": "func_display_name: Display name for error messages"
    },
    {
      "arg_name": "show_progress",
      "function": "_get_hash",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "",
      "transformation_code": "_get_hash(source, hash_func_name, func_display_name, *, show_progress, format)",
      "error_handling": "",
      "documentation": "show_progress: Whether to display a progress bar"
    },
    {
      "arg_name": "format",
      "function": "_get_hash",
      "default_value": null,
      "usage_pattern": "equality_check,boolean_condition,addition",
      "validation_code": "",
      "transformation_code": "format == 'int': | format == 'bytes': | _get_hash(source, hash_func_name, func_display_name, *, show_progress, format) | ValueError('rp.' + func_display_name + \": Unsupported format '\" + format + \"'. Options: 'hex', 'int', 'bytes', 'base64'\")",
      "error_handling": "",
      "documentation": "format: Output format of the hash. Options"
    },
    {
      "arg_name": "source",
      "function": "get_md5_hash",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "get_md5_hash(source, format='hex', *, show_progress: bool=False) | _get_hash(source, 'md5', 'get_md5_hash', show_progress=show_progress, format=format)",
      "error_handling": "",
      "documentation": "source:"
    },
    {
      "arg_name": "format",
      "function": "get_md5_hash",
      "default_value": "hex",
      "usage_pattern": "simple_usage",
      "validation_code": "format=format",
      "transformation_code": "format='hex', *, show_progress: bool=False): | format='int') | get_md5_hash(source, format='hex', *, show_progress: bool=False) | get_md5_hash('/path/to/file', format='int')",
      "error_handling": "",
      "documentation": "format: Keyword-only argument that specifies the output format of the hash."
    },
    {
      "arg_name": "show_progress",
      "function": "get_md5_hash",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "show_progress=show_progress",
      "transformation_code": "show_progress=show_progress, format=format) | get_md5_hash(source, format='hex', *, show_progress: bool=False) | _get_hash(source, 'md5', 'get_md5_hash', show_progress=show_progress, format=format)",
      "error_handling": "",
      "documentation": "show_progress: Keyword-only argument that dictates whether to display a progress bar during the hash computation."
    },
    {
      "arg_name": "source",
      "function": "get_sha256_hash",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "get_sha256_hash(source, format='hex', *, show_progress: bool=False) | _get_hash(source, 'sha256', 'get_sha256_hash', show_progress=show_progress, format=format)",
      "error_handling": "",
      "documentation": "source:"
    },
    {
      "arg_name": "format",
      "function": "get_sha256_hash",
      "default_value": "hex",
      "usage_pattern": "simple_usage",
      "validation_code": "format=format",
      "transformation_code": "format='hex', *, show_progress: bool=False): | format='int') | get_sha256_hash(source, format='hex', *, show_progress: bool=False) | get_sha256_hash('/path/to/file', format='int')",
      "error_handling": "",
      "documentation": "format: Keyword-only argument that specifies the output format of the hash."
    },
    {
      "arg_name": "show_progress",
      "function": "get_sha256_hash",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "show_progress=show_progress",
      "transformation_code": "show_progress=show_progress, format=format) | get_sha256_hash(source, format='hex', *, show_progress: bool=False) | _get_hash(source, 'sha256', 'get_sha256_hash', show_progress=show_progress, format=format)",
      "error_handling": "",
      "documentation": "show_progress: Keyword-only argument that dictates whether to display a progress bar during the hash computation."
    },
    {
      "arg_name": "text",
      "function": "_labeled_image_text_to_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_labeled_image_text_to_image(text, align, font) | cv_text_to_image(text, align=align, font=font)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "align",
      "function": "_labeled_image_text_to_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "align=align | align=align",
      "transformation_code": "align=align, font=font) | align=align, font=font, size=100) | _labeled_image_text_to_image(text, align, font) | cv_text_to_image(text, align=align, font=font)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "font",
      "function": "_labeled_image_text_to_image",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check,type_check",
      "validation_code": "assert False, 'labeled_image: font must be a string or an int between 0 and 8' | isinstance(font, int) | isinstance(font, str)",
      "transformation_code": "font = 3 | font=font) | _labeled_image_text_to_image(text, align, font) | isinstance(font, int)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "labeled_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert is_image(image) | image=load_image | image = as_numpy_image",
      "transformation_code": "image=load_image('http://hi-bk.com/wp-content/uploads/2020/08/hibkdog.png',use_cache=True) | image = as_numpy_image(image, copy=False) | labeled_image(image, text: str, size=15, position='top', align='center', text_color=(1, 1, 1, 1) | display_image(labeled_image(image,'hello',10)",
      "error_handling": "",
      "documentation": "image (numpy.ndarray)"
    },
    {
      "arg_name": "text",
      "function": "labeled_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "text=False | text = str | text=text",
      "transformation_code": "text=False, size_by_lines=False, font=None): | text = str(text) | labeled_image(image, text: str, size=15, position='top', align='center', text_color=(1, 1, 1, 1) | as_rgba_float_color(text_color)",
      "error_handling": "",
      "documentation": "text (str)"
    },
    {
      "arg_name": "size",
      "function": "labeled_image",
      "default_value": 15,
      "usage_pattern": "equality_check,boolean_condition,type_check",
      "validation_code": "assert isinstance(size, float) or isinstance(size, int) | assert isinstance(size, int) | isinstance(size, float)",
      "transformation_code": "size=15, position='top', align='center', text_color=(1, 1, 1, 1), background_color=(0, 0, 0, 1), flip_text=False, size_by_lines=False, font=None): | size=30,  # Each label is exactly this tall (in pixels) | labeled_image(image, text: str, size=15, position='top', align='center', text_color=(1, 1, 1, 1) | labeled_images(\n        ...         images,\n        ...         labels,\n        ...         # Some optional kwargs:\n        ...         size=30,  # Each label is exactly this tall (in pixels)",
      "error_handling": "",
      "documentation": "size (float)"
    },
    {
      "arg_name": "position",
      "function": "labeled_image",
      "default_value": "top",
      "usage_pattern": "equality_check,boolean_condition",
      "validation_code": "assert position in ['top', 'bottom', 'left', 'right']",
      "transformation_code": "position='top', align='center', text_color=(1, 1, 1, 1), background_color=(0, 0, 0, 1), flip_text=False, size_by_lines=False, font=None): | position='top')) | labeled_image(image, text: str, size=15, position='top', align='center', text_color=(1, 1, 1, 1) | display_image(labeled_image(image,'hello',.1,position='top')",
      "error_handling": "",
      "documentation": "position (str)"
    },
    {
      "arg_name": "align",
      "function": "labeled_image",
      "default_value": "center",
      "usage_pattern": "simple_usage",
      "validation_code": "assert align in ['left', 'right', 'center'] | align=align | align=align",
      "transformation_code": "align='center', text_color=(1, 1, 1, 1), background_color=(0, 0, 0, 1), flip_text=False, size_by_lines=False, font=None): | align='left')) | labeled_image(image, text: str, size=15, position='top', align='center', text_color=(1, 1, 1, 1) | display_image(labeled_image(image,'hello',.1,align='left')",
      "error_handling": "",
      "documentation": "align (str)"
    },
    {
      "arg_name": "text_color",
      "function": "labeled_image",
      "default_value": "(1, 1, 1, 1)",
      "usage_pattern": "simple_usage",
      "validation_code": "text_color = as_rgba_float_color | text_color=text_color",
      "transformation_code": "text_color=(1, 1, 1, 1), background_color=(0, 0, 0, 1), flip_text=False, size_by_lines=False, font=None): | text_color=\"cyan\", | labeled_image(image, text: str, size=15, position='top', align='center', text_color=(1, 1, 1, 1) | as_rgba_float_color(text_color)",
      "error_handling": "",
      "documentation": "text_color (tuple)"
    },
    {
      "arg_name": "background_color",
      "function": "labeled_image",
      "default_value": "(0, 0, 0, 1)",
      "usage_pattern": "indexing",
      "validation_code": "background_color = as_rgba_float_color | background_color=background_color",
      "transformation_code": "background_color=(0, 0, 0, 1), flip_text=False, size_by_lines=False, font=None): | background_color=\"black\", | as_rgba_float_color(background_color) | labeled_image(image=image, text=text, size=size, position='top', align=align, text_color=text_color, background_color=background_color, flip_text=flip_text, font=font)",
      "error_handling": "",
      "documentation": "background_color (tuple)"
    },
    {
      "arg_name": "flip_text",
      "function": "labeled_image",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "flip_text=False | flip_text=flip_text",
      "transformation_code": "flip_text=False, size_by_lines=False, font=None): | flip_text=flip_text, font=font) | labeled_image(image=image, text=text, size=size, position='top', align=align, text_color=text_color, background_color=background_color, flip_text=flip_text, font=font)",
      "error_handling": "",
      "documentation": "flip_text (bool)"
    },
    {
      "arg_name": "size_by_lines",
      "function": "labeled_image",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "size_by_lines=False | size_by_lines=True | size_by_lines=False",
      "transformation_code": "size_by_lines=False, font=None): | size_by_lines=True, | gather_args_call(labeled_image, overlay, size=height, size_by_lines=False)",
      "error_handling": "",
      "documentation": "size_by_lines (bool)"
    },
    {
      "arg_name": "font",
      "function": "labeled_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "font=None | font=font | font=font",
      "transformation_code": "font=None): | font=font, | etc (get a bit list of available fonts with rp.get_system_fonts() | labeled_image(\n        ...         combined,\n        ...         \"Types of Dogs\nFont = \" + str(font)",
      "error_handling": "",
      "documentation": "font (int, str, optional)"
    },
    {
      "arg_name": "images",
      "function": "_images_are_all_same_size",
      "default_value": null,
      "usage_pattern": "iteration",
      "validation_code": "",
      "transformation_code": "_images_are_all_same_size(images) | is_numpy_array(images)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "images",
      "function": "labeled_images",
      "default_value": null,
      "usage_pattern": "length_check",
      "validation_code": "assert is_iterable(images), type(images) | assert len(images) == len(labels) | images = list",
      "transformation_code": "images = list(images) | labeled_images(images, labels, show_progress=False, lazy=False, *args, **kwargs) | is_iterable(images)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "labels",
      "function": "labeled_images",
      "default_value": null,
      "usage_pattern": "length_check,type_check",
      "validation_code": "assert is_iterable(labels), type(labels) | assert len(images) == len(labels) | isinstance(labels, str)",
      "transformation_code": "labels = [labels] * len(images) | labels = list(labels) | labeled_images(images, labels, show_progress=False, lazy=False, *args, **kwargs) | is_iterable(labels)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "show_progress",
      "function": "labeled_images",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "show_progress=False",
      "transformation_code": "show_progress=False, lazy=False, *args, **kwargs): | labeled_images(images, labels, show_progress=False, lazy=False, *args, **kwargs)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "lazy",
      "function": "labeled_images",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "lazy=False",
      "transformation_code": "lazy=False, *args, **kwargs): | labeled_images(images, labels, show_progress=False, lazy=False, *args, **kwargs)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "videos",
      "function": "labeled_videos",
      "default_value": null,
      "usage_pattern": "length_check",
      "validation_code": "assert is_iterable(videos), type(images) | assert len(videos) == len(labels), (len(videos), len(labels)) | videos = list",
      "transformation_code": "videos = list(videos) | labeled_videos(videos, labels, show_progress=False, lazy=False, lazy_frames=False, *args, **kwargs) | is_iterable(videos)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "labels",
      "function": "labeled_videos",
      "default_value": null,
      "usage_pattern": "length_check,type_check",
      "validation_code": "assert is_iterable(labels), type(labels) | assert len(videos) == len(labels), (len(videos), len(labels)) | isinstance(labels, str)",
      "transformation_code": "labels = [labels] * len(videos) | labels = list(labels) | labeled_videos(videos, labels, show_progress=False, lazy=False, lazy_frames=False, *args, **kwargs) | is_iterable(labels)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "show_progress",
      "function": "labeled_videos",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "show_progress=False",
      "transformation_code": "show_progress=False, lazy=False, lazy_frames=False, *args, **kwargs): | labeled_videos(videos, labels, show_progress=False, lazy=False, lazy_frames=False, *args, **kwargs)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "lazy",
      "function": "labeled_videos",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "lazy=False | lazy=lazy_frames",
      "transformation_code": "lazy=False, lazy_frames=False, *args, **kwargs): | lazy=lazy_frames, **kwargs) for (video, label) in zip(videos, labels)) | labeled_videos(videos, labels, show_progress=False, lazy=False, lazy_frames=False, *args, **kwargs) | labeled_images(video, label, *args, lazy=lazy_frames, **kwargs)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "lazy_frames",
      "function": "labeled_videos",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "lazy_frames=False | lazy=lazy_frames",
      "transformation_code": "lazy_frames=False, *args, **kwargs): | labeled_videos(videos, labels, show_progress=False, lazy=False, lazy_frames=False, *args, **kwargs) | labeled_images(video, label, *args, lazy=lazy_frames, **kwargs)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "char",
      "function": "_cv_char_to_image",
      "default_value": null,
      "usage_pattern": "length_check",
      "validation_code": "assert len(char) == 1, len(char)",
      "transformation_code": "_cv_char_to_image(char: str, width=None, height=None, **kwargs) | len(char)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "width",
      "function": "_cv_char_to_image",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "width=None",
      "transformation_code": "width=None, height=None, **kwargs): | _cv_char_to_image(char: str, width=None, height=None, **kwargs) | crop_image(output, height, width, origin='center')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "height",
      "function": "_cv_char_to_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "height=None",
      "transformation_code": "height=None, **kwargs): | _cv_char_to_image(char: str, width=None, height=None, **kwargs) | crop_image(output, height, width, origin='center')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "text",
      "function": "_cv_text_to_image_monospace",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_cv_text_to_image_monospace(text, **kwargs) | set(text)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "text",
      "function": "cv_text_to_image",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "lines = text",
      "transformation_code": "cv_text_to_image(text, *, scale=2, font=3, thickness=2, color=(255, 255, 255) | append(cv_text_to_image('Hello World! My name is Clara',font=font,scale=scale)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "scale",
      "function": "cv_text_to_image",
      "default_value": 2,
      "usage_pattern": "simple_usage",
      "validation_code": "scale=2 | scale=scale | scale=scale",
      "transformation_code": "scale=2, font=3, thickness=2, color=(255, 255, 255), tight_fit=False, background_color=(0, 0, 0), monospace=False, align='left'): | scale=scale)) | cv_text_to_image(text, *, scale=2, font=3, thickness=2, color=(255, 255, 255) | append(cv_text_to_image('Hello World! My name is Clara',font=font,scale=scale)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "font",
      "function": "cv_text_to_image",
      "default_value": 3,
      "usage_pattern": "simple_usage",
      "validation_code": "font=3 | font=font | font=font",
      "transformation_code": "font=3, thickness=2, color=(255, 255, 255), tight_fit=False, background_color=(0, 0, 0), monospace=False, align='left'): | font=font,scale=scale)) | cv_text_to_image(text, *, scale=2, font=3, thickness=2, color=(255, 255, 255) | DEMO (Shows all fonts)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "thickness",
      "function": "cv_text_to_image",
      "default_value": 2,
      "usage_pattern": "simple_usage",
      "validation_code": "thickness=2 | thickness=thickness | thickness=thickness",
      "transformation_code": "thickness=2, color=(255, 255, 255), tight_fit=False, background_color=(0, 0, 0), monospace=False, align='left'): | thickness=thickness, color=color, tight_fit=tight_fit, background_color=background_color) | cv_text_to_image(text, *, scale=2, font=3, thickness=2, color=(255, 255, 255) | _cv_text_to_image_monospace(text, scale=scale, font=font, thickness=thickness, color=color, tight_fit=tight_fit, background_color=background_color)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "color",
      "function": "cv_text_to_image",
      "default_value": "(255, 255, 255)",
      "usage_pattern": "simple_usage",
      "validation_code": "color=color | color=background_color | color=color",
      "transformation_code": "color=(255, 255, 255), tight_fit=False, background_color=(0, 0, 0), monospace=False, align='left'): | color='red') | cv_text_to_image(text, *, scale=2, font=3, thickness=2, color=(255, 255, 255) | tiled_images(images,length=1,border_color='red')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "tight_fit",
      "function": "cv_text_to_image",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "tight_fit=False | tight_fit=tight_fit | tight_fit=tight_fit",
      "transformation_code": "tight_fit=False, background_color=(0, 0, 0), monospace=False, align='left'): | tight_fit=tight_fit, background_color=background_color) | _cv_text_to_image_monospace(text, scale=scale, font=font, thickness=thickness, color=color, tight_fit=tight_fit, background_color=background_color) | append(_single_line_cv_text_to_image(line, scale=scale, font=font, thickness=thickness, color=color, tight_fit=tight_fit, background_color=background_color)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "background_color",
      "function": "cv_text_to_image",
      "default_value": "(0, 0, 0)",
      "usage_pattern": "simple_usage",
      "validation_code": "background_color=background_color | background_color=background_color",
      "transformation_code": "background_color=(0, 0, 0), monospace=False, align='left'): | background_color=background_color) | _cv_text_to_image_monospace(text, scale=scale, font=font, thickness=thickness, color=color, tight_fit=tight_fit, background_color=background_color) | append(_single_line_cv_text_to_image(line, scale=scale, font=font, thickness=thickness, color=color, tight_fit=tight_fit, background_color=background_color)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "monospace",
      "function": "cv_text_to_image",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "monospace=False",
      "transformation_code": "monospace=False, align='left'):",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "align",
      "function": "cv_text_to_image",
      "default_value": "left",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "align='left'): | align='left')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "text",
      "function": "_single_line_cv_text_to_image",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "assert isinstance(text, str), type(text) | isinstance(text, str)",
      "transformation_code": "_single_line_cv_text_to_image(text, *, scale, font, thickness, color, tight_fit, background_color) | display_image(cv_text_to_image('HELLO WORLD! ')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "scale",
      "function": "_single_line_cv_text_to_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_single_line_cv_text_to_image(text, *, scale, font, thickness, color, tight_fit, background_color) | getTextSize(text, font, scale, thickness)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "font",
      "function": "_single_line_cv_text_to_image",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "assert isinstance(font, int), type(font) | isinstance(font, int)",
      "transformation_code": "_single_line_cv_text_to_image(text, *, scale, font, thickness, color, tight_fit, background_color) | isinstance(font, int)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "thickness",
      "function": "_single_line_cv_text_to_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_single_line_cv_text_to_image(text, *, scale, font, thickness, color, tight_fit, background_color) | getTextSize(text, font, scale, thickness)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "color",
      "function": "_single_line_cv_text_to_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_single_line_cv_text_to_image(text, *, scale, font, thickness, color, tight_fit, background_color)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "tight_fit",
      "function": "_single_line_cv_text_to_image",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "",
      "transformation_code": "_single_line_cv_text_to_image(text, *, scale, font, thickness, color, tight_fit, background_color)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "background_color",
      "function": "_single_line_cv_text_to_image",
      "default_value": null,
      "usage_pattern": "indexing",
      "validation_code": "",
      "transformation_code": "_single_line_cv_text_to_image(text, *, scale, font, thickness, color, tight_fit, background_color)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "text",
      "function": "_slow_pil_text_to_image",
      "default_value": null,
      "usage_pattern": "addition",
      "validation_code": "text = delimiter_text",
      "transformation_code": "text = '   ' + 'QWERTYUIOP{}|ASDFGHJKL:\"ZXCVBNM<>?~!@#$%^&*()_+=-0987654321`qwertyuiop[]\\\\\\' | text = delimiter_text + text + delimiter_text | _slow_pil_text_to_image(text, *, size=12, font='Courier', color=(255, 255, 255, 255) | getbbox(full_text)",
      "error_handling": "",
      "documentation": "TEXT: https"
    },
    {
      "arg_name": "size",
      "function": "_slow_pil_text_to_image",
      "default_value": 12,
      "usage_pattern": "simple_usage",
      "validation_code": "size=12 | size=size",
      "transformation_code": "size=12, font='Courier', color=(255, 255, 255, 255), background_color=(0, 0, 0, 0)): | size=size) | _slow_pil_text_to_image(text, *, size=12, font='Courier', color=(255, 255, 255, 255) | truetype(font, size)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "font",
      "function": "_slow_pil_text_to_image",
      "default_value": "Courier",
      "usage_pattern": "method_call",
      "validation_code": "assert font is not None | font = ImageFont.truetype | font = ImageFont.load_default",
      "transformation_code": "font='Courier', color=(255, 255, 255, 255), background_color=(0, 0, 0, 0)): | font = ImageFont.truetype(font, size) | _slow_pil_text_to_image(text, *, size=12, font='Courier', color=(255, 255, 255, 255) | truetype(font, size)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "color",
      "function": "_slow_pil_text_to_image",
      "default_value": "(255, 255, 255, 255)",
      "usage_pattern": "simple_usage",
      "validation_code": "color=background_color | fill=color",
      "transformation_code": "color=(255, 255, 255, 255), background_color=(0, 0, 0, 0)): | color=background_color) | _slow_pil_text_to_image(text, *, size=12, font='Courier', color=(255, 255, 255, 255)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "background_color",
      "function": "_slow_pil_text_to_image",
      "default_value": "(0, 0, 0, 0)",
      "usage_pattern": "simple_usage",
      "validation_code": "color=background_color",
      "transformation_code": "background_color=(0, 0, 0, 0)):",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "color",
      "function": "as_rgba_float_color",
      "default_value": null,
      "usage_pattern": "boolean_condition,method_call,length_check,iteration,addition,type_check",
      "validation_code": "assert color.shape in [(), (3,), (4,)] | assert isinstance(color, (tuple, list, str)) or is_number(color) | assert len(color) == 4",
      "transformation_code": "color='transparent white', | color = tuple(color) | as_rgba_float_color(color, *, clamp=True) | line_join(unique(list(r._rp_colors)",
      "error_handling": "try_except",
      "documentation": "color(1)"
    },
    {
      "arg_name": "clamp",
      "function": "as_rgba_float_color",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "clamp=True",
      "transformation_code": "clamp=True): | as_rgba_float_color(color, *, clamp=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "color",
      "function": "as_rgb_float_color",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "as_rgb_float_color(color, clamp=True) | as_rgba_float_color(color, clamp=clamp)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "clamp",
      "function": "as_rgb_float_color",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "clamp=True | clamp=clamp",
      "transformation_code": "clamp=True): | clamp=clamp)[:3] | as_rgb_float_color(color, clamp=True) | as_rgba_float_color(color, clamp=clamp)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "colors",
      "function": "as_rgba_float_colors",
      "default_value": null,
      "usage_pattern": "iteration",
      "validation_code": "",
      "transformation_code": "as_rgba_float_colors(colors, clamp=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "clamp",
      "function": "as_rgba_float_colors",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "clamp=True",
      "transformation_code": "clamp=True): | as_rgba_float_colors(colors, clamp=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "colors",
      "function": "as_rgb_float_colors",
      "default_value": null,
      "usage_pattern": "iteration",
      "validation_code": "",
      "transformation_code": "as_rgb_float_colors(colors, clamp=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "clamp",
      "function": "as_rgb_float_colors",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "clamp=True",
      "transformation_code": "clamp=True): | as_rgb_float_colors(colors, clamp=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "font",
      "function": "_get_font_path",
      "default_value": null,
      "usage_pattern": "boolean_condition,indexing,method_call,type_check",
      "validation_code": "isinstance(font, str) | font = download_google_font | font = _ryan_fonts",
      "transformation_code": "font = download_google_font(font[len('G:'):]) | font = _ryan_fonts[font] | _get_font_path(font, strict=False) | isinstance(font, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "strict",
      "function": "_get_font_path",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "strict=False",
      "transformation_code": "strict=False): | _get_font_path(font, strict=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "font",
      "function": "get_font_supported_chars",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "font = '/Users/ryan/Library/Fonts/Ubuntu Mono Nerd Font Complete.ttf' | get_font_supported_chars(font) | get_font_supported_chars(font)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "text",
      "function": "pil_text_to_image",
      "default_value": null,
      "usage_pattern": "method_call,iteration",
      "validation_code": "text = str | text_lines = text",
      "transformation_code": "text = \"Hello World!\" | text = str(text) | pil_text_to_image(text, *, size=64, font=None, align='left', color=(1, 1, 1, 1) | display_alpha_image(\n        ...         with_drop_shadow(\n        ...             pil_text_to_image(\n        ...                 \"Hello World\\\\nClara\\\\n\" + font,\n        ...                 size=120,\n        ...                 font=font,\n        ...                 align=\"center\",\n        ...                 color=color,\n        ...             )",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "size",
      "function": "pil_text_to_image",
      "default_value": 64,
      "usage_pattern": "simple_usage",
      "validation_code": "size=128 | size=64 | size=120",
      "transformation_code": "size=128) | size=64, font=None, align='left', color=(1, 1, 1, 1), background_color=(0, 0, 0, 0)): | lru_cache(maxsize=128) | pil_text_to_image(text, *, size=64, font=None, align='left', color=(1, 1, 1, 1)",
      "error_handling": "",
      "documentation": "size(letters, origin=\"center\")"
    },
    {
      "arg_name": "font",
      "function": "pil_text_to_image",
      "default_value": null,
      "usage_pattern": "none_check,type_check",
      "validation_code": "assert font is None or isinstance(font, str) | isinstance(font, str) | font=None",
      "transformation_code": "font=None, align='left', color=(1, 1, 1, 1), background_color=(0, 0, 0, 0)): | font=font, | pil_text_to_image(text, *, size=64, font=None, align='left', color=(1, 1, 1, 1) | list(r._ryan_fonts)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "align",
      "function": "pil_text_to_image",
      "default_value": "left",
      "usage_pattern": "simple_usage",
      "validation_code": "assert align in ['left', 'right', 'center']",
      "transformation_code": "align='left', color=(1, 1, 1, 1), background_color=(0, 0, 0, 0)): | align=\"center\", | pil_text_to_image(text, *, size=64, font=None, align='left', color=(1, 1, 1, 1) | display_alpha_image(\n        ...         with_drop_shadow(\n        ...             pil_text_to_image(\n        ...                 \"Hello World\\\\nClara\\\\n\" + font,\n        ...                 size=120,\n        ...                 font=font,\n        ...                 align=\"center\",\n        ...                 color=color,\n        ...             )",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "color",
      "function": "pil_text_to_image",
      "default_value": "(1, 1, 1, 1)",
      "usage_pattern": "iteration,addition",
      "validation_code": "color = random_rgb_float_color | color=color | color=tuple",
      "transformation_code": "color=(1, 1, 1, 1), background_color=(0, 0, 0, 0)): | color = random_rgb_float_color() | pil_text_to_image(text, *, size=64, font=None, align='left', color=(1, 1, 1, 1) | display_alpha_image(\n        ...         with_drop_shadow(\n        ...             pil_text_to_image(\n        ...                 \"Hello World\\\\nClara\\\\n\" + font,\n        ...                 size=120,\n        ...                 font=font,\n        ...                 align=\"center\",\n        ...                 color=color,\n        ...             )",
      "error_handling": "",
      "documentation": "color()"
    },
    {
      "arg_name": "background_color",
      "function": "pil_text_to_image",
      "default_value": "(0, 0, 0, 0)",
      "usage_pattern": "simple_usage",
      "validation_code": "background_color = as_rgba_float_color | background_color = np.asarray",
      "transformation_code": "background_color=(0, 0, 0, 0)): | background_color = as_rgba_float_color(background_color) | as_rgba_float_color(background_color) | asarray(list(background_color)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "text",
      "function": "skia_text_to_image",
      "default_value": null,
      "usage_pattern": "addition",
      "validation_code": "text = str",
      "transformation_code": "text = \"Never Gonna Give | text = str(text) | skia_text_to_image(text, *, size=64, font='Futura', width=None, style=None, align=None, color=None, background_color=None, fallback_fonts=None) | fansi_print(text + \"\n\" + style, style)",
      "error_handling": "",
      "documentation": "text (str)"
    },
    {
      "arg_name": "size",
      "function": "skia_text_to_image",
      "default_value": 64,
      "usage_pattern": "simple_usage",
      "validation_code": "size=128 | size=64 | size=32",
      "transformation_code": "size=128) | size=64, font='Futura', width=None, style=None, align=None, color=None, background_color=None, fallback_fonts=None): | lru_cache(maxsize=128) | skia_text_to_image(text, *, size=64, font='Futura', width=None, style=None, align=None, color=None, background_color=None, fallback_fonts=None)",
      "error_handling": "",
      "documentation": "size (int, optional)"
    },
    {
      "arg_name": "font",
      "function": "skia_text_to_image",
      "default_value": "Futura",
      "usage_pattern": "simple_usage",
      "validation_code": "font = _get_font_path",
      "transformation_code": "font='Futura', width=None, style=None, align=None, color=None, background_color=None, fallback_fonts=None): | font=\"Arial\", size=32) | skia_text_to_image(text, *, size=64, font='Futura', width=None, style=None, align=None, color=None, background_color=None, fallback_fonts=None) | skia_text_to_image(\"Multi\nLine\nText\", font=\"Arial\", size=32)",
      "error_handling": "",
      "documentation": "font (str, optional)"
    },
    {
      "arg_name": "width",
      "function": "skia_text_to_image",
      "default_value": null,
      "usage_pattern": "equality_check,boolean_condition,none_check,addition",
      "validation_code": "width=None | width = paragraph.MaxIntrinsicWidth | width = math.ceil",
      "transformation_code": "width=None, style=None, align=None, color=None, background_color=None, fallback_fonts=None): | width = paragraph.MaxIntrinsicWidth | skia_text_to_image(text, *, size=64, font='Futura', width=None, style=None, align=None, color=None, background_color=None, fallback_fonts=None) | layout(width + 1)",
      "error_handling": "",
      "documentation": "width (int, optional)"
    },
    {
      "arg_name": "style",
      "function": "skia_text_to_image",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check,method_call,type_check",
      "validation_code": "assert style <= all_style_options | assert not basic_options & style, 'Should be impossible' | assert not underline_options & style, 'Should be impossible'",
      "transformation_code": "style=None, align=None, color=None, background_color=None, fallback_fonts=None): | style=\"bold center blue on white\") | skia_text_to_image(text, *, size=64, font='Futura', width=None, style=None, align=None, color=None, background_color=None, fallback_fonts=None) | skia_text_to_image(\"Hello World\", style=\"bold center blue on white\")",
      "error_handling": "",
      "documentation": "style (str or set, optional)"
    },
    {
      "arg_name": "align",
      "function": "skia_text_to_image",
      "default_value": null,
      "usage_pattern": "equality_check,boolean_condition,none_check",
      "validation_code": "align=None | _align = align | align = _align.pop",
      "transformation_code": "align=None, color=None, background_color=None, fallback_fonts=None): | align = align_options & _style | skia_text_to_image(text, *, size=64, font='Futura', width=None, style=None, align=None, color=None, background_color=None, fallback_fonts=None) | len(_align)",
      "error_handling": "",
      "documentation": "align (str, optional)"
    },
    {
      "arg_name": "color",
      "function": "skia_text_to_image",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "color=None | color=None | color = _color",
      "transformation_code": "color=None, background_color=None, fallback_fonts=None): | color = _color | skia_text_to_image(text, *, size=64, font='Futura', width=None, style=None, align=None, color=None, background_color=None, fallback_fonts=None) | float_color_to_byte_color(as_rgba_float_color(color)",
      "error_handling": "",
      "documentation": "color (str, optional)"
    },
    {
      "arg_name": "background_color",
      "function": "skia_text_to_image",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "background_color=None | background_color = _background_color | background_color = float_color_to_byte_color",
      "transformation_code": "background_color=None, fallback_fonts=None): | background_color = _background_color | skia_text_to_image(text, *, size=64, font='Futura', width=None, style=None, align=None, color=None, background_color=None, fallback_fonts=None) | float_color_to_byte_color(as_rgba_float_color(background_color)",
      "error_handling": "",
      "documentation": "background_color (str, optional)"
    },
    {
      "arg_name": "fallback_fonts",
      "function": "skia_text_to_image",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "fallback_fonts=None",
      "transformation_code": "fallback_fonts=None): | fallback_fonts = ['Apple Color Emoji', 'Noto Emoji', 'Segoe UI Emoji'] | skia_text_to_image(text, *, size=64, font='Futura', width=None, style=None, align=None, color=None, background_color=None, fallback_fonts=None) | setFontFamilies([font] + fallback_fonts)",
      "error_handling": "",
      "documentation": "fallback_fonts (list, optional)"
    },
    {
      "arg_name": "canvas",
      "function": "skia_stamp_image",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "canvas = rp.as_rgba_image | canvas = np.ascontiguousarray | canvas = canvas.copy",
      "transformation_code": "canvas = rp.as_rgba_image(rp.as_byte_image(canvas, copy=False), copy=False) | canvas = np.ascontiguousarray(canvas) | skia_stamp_image(canvas, sprite, offset=None, *, copy: bool=False, mode: str='blend', sprite_origin=None, canvas_origin=None) | as_rgba_image(rp.as_byte_image(canvas, copy=False)",
      "error_handling": "",
      "documentation": "canvas: Target RGBA uint8 NumPy array to stamp onto."
    },
    {
      "arg_name": "sprite",
      "function": "skia_stamp_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "sprite = rp.as_rgba_image | sprite = np.ascontiguousarray",
      "transformation_code": "sprite = rp.as_rgba_image(rp.as_byte_image(sprite, copy=False), copy=False) | sprite = np.ascontiguousarray(sprite) | skia_stamp_image(canvas, sprite, offset=None, *, copy: bool=False, mode: str='blend', sprite_origin=None, canvas_origin=None) | ascontiguousarray(rp.as_byte_image(rp.as_rgba_image(sprite)",
      "error_handling": "",
      "documentation": "sprite: Source RGBA uint8 NumPy array to stamp. NOTE"
    },
    {
      "arg_name": "offset",
      "function": "skia_stamp_image",
      "default_value": null,
      "usage_pattern": "indexing",
      "validation_code": "offset=None | offset = offset",
      "transformation_code": "offset=None, *, copy: bool=False, mode: str='blend', sprite_origin=None, canvas_origin=None): | offset = offset or (0, 0) | skia_stamp_image(canvas, sprite, offset=None, *, copy: bool=False, mode: str='blend', sprite_origin=None, canvas_origin=None)",
      "error_handling": "",
      "documentation": "offset: (x, y) position to place the sprite. Defaults to (0, 0)."
    },
    {
      "arg_name": "copy",
      "function": "skia_stamp_image",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "copy=False | copy=False | copy=False",
      "transformation_code": "copy=False - but please use the output! The output MIGHT not be mutated, particularly | copy=False will | skia_stamp_image(canvas, sprite, offset=None, *, copy: bool=False, mode: str='blend', sprite_origin=None, canvas_origin=None) | skia_stamp_image(\n        ...                 image,\n        ...                 text_image,\n        ...                 copy=False,\n        ...                 sprite_origin=(x, y)",
      "error_handling": "",
      "documentation": "copy: False by default. If True, a copy of the canvas is made. If False, it might modify the canvas in place."
    },
    {
      "arg_name": "mode",
      "function": "skia_stamp_image",
      "default_value": "blend",
      "usage_pattern": "method_call,addition",
      "validation_code": "mode = SKIA_BLEND_MODES.get",
      "transformation_code": "mode=\"blend\", | mode = SKIA_BLEND_MODES.get(mode.lower()) | skia_stamp_image(canvas, sprite, offset=None, *, copy: bool=False, mode: str='blend', sprite_origin=None, canvas_origin=None) | get(mode.lower()",
      "error_handling": "",
      "documentation": "mode: Blend mode to use. See SKIA_BLEND_MODES for options like 'blend', 'add', 'multiply', etc."
    },
    {
      "arg_name": "sprite_origin",
      "function": "skia_stamp_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "sprite_origin=None",
      "transformation_code": "sprite_origin=None, canvas_origin=None): | sprite_origin=(x, y), | skia_stamp_image(canvas, sprite, offset=None, *, copy: bool=False, mode: str='blend', sprite_origin=None, canvas_origin=None) | skia_stamp_image(\n        ...                 image,\n        ...                 text_image,\n        ...                 copy=False,\n        ...                 sprite_origin=(x, y)",
      "error_handling": "",
      "documentation": "sprite_origin: The anchor point on the sprite. E.g., 'center', 'top-left', or proportional (0.5, 0.5)."
    },
    {
      "arg_name": "canvas_origin",
      "function": "skia_stamp_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "canvas_origin=None | final_x = canvas_origin | final_y = canvas_origin",
      "transformation_code": "canvas_origin=None): | canvas_origin=(1 - x, 1 - y), | skia_stamp_image(canvas, sprite, offset=None, *, copy: bool=False, mode: str='blend', sprite_origin=None, canvas_origin=None) | _parse_origin_to_pixels(canvas_origin, canvas.shape)",
      "error_handling": "",
      "documentation": "canvas_origin: The reference point on the canvas for the offset."
    },
    {
      "arg_name": "font_name",
      "function": "download_google_font",
      "default_value": null,
      "usage_pattern": "boolean_condition,indexing,method_call,addition",
      "validation_code": "assert len(paths) >= 1, 'Failed to retrieve a google font with the name ' + repr(font_name) + ' Please check \\n\\thttps://fonts.google.com/specimen/' + font_name + \"\\nand see if it's a real google font\" | pleasure\n        >>> font_name | font_name = url.split",
      "transformation_code": "font_name = url.split('/')[-1] | font_name = font_name[len('G:'):] | download_google_font(font_name, *, skip_existing=True) | len(font_names)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "skip_existing",
      "function": "download_google_font",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "skip_existing=True",
      "transformation_code": "skip_existing=True): | download_google_font(font_name, *, skip_existing=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "url",
      "function": "download_font",
      "default_value": null,
      "usage_pattern": "boolean_condition,method_call",
      "validation_code": "url = _ryan_fonts",
      "transformation_code": "url = _ryan_fonts[url] | download_font(url, *, skip_existing=True) | download_google_font(url)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "skip_existing",
      "function": "download_font",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "skip_existing=True | skip_existing=skip_existing",
      "transformation_code": "skip_existing=True): | skip_existing=skip_existing) | download_font(url, *, skip_existing=True) | download_url(url, _downloaded_font_dir, skip_existing=skip_existing)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "skip_existing",
      "function": "download_fonts",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "skip_existing=True | skip_existing=skip_existing",
      "transformation_code": "skip_existing=True, show_progress=False, strict=True, num_threads=None, lazy=False): | skip_existing=skip_existing), font_names) | download_fonts(*font_names, skip_existing=True, show_progress=False, strict=True, num_threads=None, lazy=False) | gather_args_call(load_files, lambda font_name: download_font(font_name, skip_existing=skip_existing)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "show_progress",
      "function": "download_fonts",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "show_progress=False",
      "transformation_code": "show_progress=False, strict=True, num_threads=None, lazy=False): | download_fonts(*font_names, skip_existing=True, show_progress=False, strict=True, num_threads=None, lazy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "strict",
      "function": "download_fonts",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "strict=True",
      "transformation_code": "strict=True, num_threads=None, lazy=False): | download_fonts(*font_names, skip_existing=True, show_progress=False, strict=True, num_threads=None, lazy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "num_threads",
      "function": "download_fonts",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "num_threads=None",
      "transformation_code": "num_threads=None, lazy=False): | download_fonts(*font_names, skip_existing=True, show_progress=False, strict=True, num_threads=None, lazy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "lazy",
      "function": "download_fonts",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "lazy=False",
      "transformation_code": "lazy=False): | download_fonts(*font_names, skip_existing=True, show_progress=False, strict=True, num_threads=None, lazy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "skip_existing",
      "function": "download_google_fonts",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "skip_existing=True | skip_existing=skip_existing",
      "transformation_code": "skip_existing=True, show_progress=False, strict=True, num_threads=None, lazy=False): | skip_existing=skip_existing), font_names) | download_google_fonts(*font_names, skip_existing=True, show_progress=False, strict=True, num_threads=None, lazy=False) | gather_args_call(load_files, lambda font_name: download_google_font(font_name, skip_existing=skip_existing)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "show_progress",
      "function": "download_google_fonts",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "show_progress=False",
      "transformation_code": "show_progress=False, strict=True, num_threads=None, lazy=False): | download_google_fonts(*font_names, skip_existing=True, show_progress=False, strict=True, num_threads=None, lazy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "strict",
      "function": "download_google_fonts",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "strict=True",
      "transformation_code": "strict=True, num_threads=None, lazy=False): | download_google_fonts(*font_names, skip_existing=True, show_progress=False, strict=True, num_threads=None, lazy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "num_threads",
      "function": "download_google_fonts",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "num_threads=None",
      "transformation_code": "num_threads=None, lazy=False): | download_google_fonts(*font_names, skip_existing=True, show_progress=False, strict=True, num_threads=None, lazy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "lazy",
      "function": "download_google_fonts",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "lazy=False",
      "transformation_code": "lazy=False): | download_google_fonts(*font_names, skip_existing=True, show_progress=False, strict=True, num_threads=None, lazy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "show_progress",
      "function": "download_all_google_fonts",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "show_progress=True",
      "transformation_code": "show_progress=True): | download_all_google_fonts(*, show_progress=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path_or_url",
      "function": "_get_file_path",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_get_file_path(path_or_url) | is_valid_url(path_or_url)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "file_path",
      "function": "strip_file_extension",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "strip_file_extension(file_path) | splitext(file_path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "file_path",
      "function": "get_file_extension",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "file_path = _get_file_path",
      "transformation_code": "file_path = _get_file_path(file_path) | get_file_extension(file_path) | _get_file_path(file_path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "file_paths",
      "function": "get_file_extensions",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "get_file_extensions(file_paths) | list(map(get_file_extension, file_paths)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "with_file_extension",
      "default_value": null,
      "usage_pattern": "equality_check,addition",
      "validation_code": "assert path==with_file_extension(path,get_file_extension(path)) | assert path==with_file_extension(path,get_file_extension(path)) | assert path==with_file_extension(path,get_file_extension(path))",
      "transformation_code": "path='path'         | path==with_file_extension(path,get_file_extension(path)) | with_file_extension(path: str, extension: str, *, replace=False) | with_file_extension('path/to/doggy','png')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "extension",
      "function": "with_file_extension",
      "default_value": null,
      "usage_pattern": "boolean_condition,indexing,method_call",
      "validation_code": "extension = extension",
      "transformation_code": "extension = extension[1:] | with_file_extension(path: str, extension: str, *, replace=False) | with_file_extension(path,get_file_extension(path)",
      "error_handling": "",
      "documentation": "extension('doggy','')"
    },
    {
      "arg_name": "replace",
      "function": "with_file_extension",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "replace=False | replace=False | replace=True",
      "transformation_code": "replace=False): | replace=False, path won't be changed | with_file_extension(path: str, extension: str, *, replace=False) | with_file_extension('doggy.png','.jpg',replace=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "extension",
      "function": "with_file_extensions",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "assert False, 'Please specify a file extension' | extension = paths",
      "transformation_code": "extension = paths[1] | with_file_extensions(*paths, extension: str=None, replace=False) | with_file_extension(path, extension, replace=replace)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "replace",
      "function": "with_file_extensions",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "replace=False | replace=replace",
      "transformation_code": "replace=False): | replace=replace) for path in paths] | with_file_extensions(*paths, extension: str=None, replace=False) | with_file_extension(path, extension, replace=replace)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "with_file_name",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "assert get_absolute_path(path) == get_absolute_path(path_join(parent_folder, file_name)) | output = path",
      "transformation_code": "with_file_name(path: str, name: str, *, keep_extension=True) | get_parent_folder(path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "name",
      "function": "with_file_name",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "name = get_file_name | name = strip_file_extension | file_name = name",
      "transformation_code": "name = get_file_name(path) | name = strip_file_extension(file_name) | with_file_name(path: str, name: str, *, keep_extension=True) | get_absolute_path(path_join(parent_folder, file_name)",
      "error_handling": "",
      "documentation": "name('some/parent/folder/file.txt','untitled')"
    },
    {
      "arg_name": "keep_extension",
      "function": "with_file_name",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "keep_extension=True | keep_extension=True | keep_extension=True",
      "transformation_code": "keep_extension=True): | keep_extension=True) | with_file_name(path: str, name: str, *, keep_extension=True) | with_file_name('Hello.com','Berty',keep_extension=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "with_folder_name",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "with_folder_name(path: str, name: str) | extension (unlike with_file_name, where if name doesn't have an extension it preserves path's extension)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "name",
      "function": "with_folder_name",
      "default_value": null,
      "usage_pattern": "boolean_condition,addition",
      "validation_code": "",
      "transformation_code": "with_folder_name(path: str, name: str) | extension (unlike with_file_name, where if name doesn't have an extension it preserves path's extension)",
      "error_handling": "",
      "documentation": "name('Hello/world.jpg','power')"
    },
    {
      "arg_name": "path",
      "function": "get_path_name",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "get_path_name(path, include_file_extension=True) | Path(path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "include_file_extension",
      "function": "get_path_name",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "include_file_extension=True",
      "transformation_code": "include_file_extension=True): | get_path_name(path, include_file_extension=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "include_file_extensions",
      "function": "get_path_names",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "include_file_extensions=True",
      "transformation_code": "include_file_extensions=True): | get_path_names(*paths, include_file_extensions=True) | get_path_name(path, include_file_extensions)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "get_relative_path",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "assert isinstance(root, str), 'root must be a string representing the root path to compare the given path against'",
      "transformation_code": "get_relative_path(path, root=None) | relpath(path, root)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "root",
      "function": "get_relative_path",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check,type_check",
      "validation_code": "assert isinstance(root, str), 'root must be a string representing the root path to compare the given path against' | isinstance(root, str) | root=None",
      "transformation_code": "root=None): | root = get_current_directory() | get_relative_path(path, root=None) | isinstance(root, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "root",
      "function": "get_relative_paths",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "root=None | root\n        >>> get_relative_paths | roots = root",
      "transformation_code": "root=None): | root=['A/B/C','D']) | get_relative_paths(*paths, root=None) | get_relative_paths('A/B/C','D/E/F',root=['A/B/C','D'])",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "get_absolute_path",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "path = os.path.expanduser | path = os.path.realpath",
      "transformation_code": "path = os.path.expanduser(path) | path = os.path.realpath(path) | get_absolute_path(path, *, physical=True) | expanduser(path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "physical",
      "function": "get_absolute_path",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "physical=True",
      "transformation_code": "physical=True): | get_absolute_path(path, *, physical=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "paths",
      "function": "_detuple_paths",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "isinstance(paths, str) | paths = detuple | paths = shlex.split",
      "transformation_code": "paths = detuple(paths) | paths = shlex.split(paths) | _detuple_paths(paths) | detuple(paths)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "physical",
      "function": "get_absolute_paths",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "physical=True | physical=physical",
      "transformation_code": "physical=True): | physical=physical) for path in _detuple_paths(paths)] | get_absolute_paths(*paths, physical=True) | get_absolute_path(path, physical=physical)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "file_path",
      "function": "has_file_extension",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "has_file_extension(file_path) | get_file_extension(file_path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "date_modified",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "",
      "transformation_code": "date_modified(path) | getmtime(path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "date_created",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "",
      "transformation_code": "date_created(path) | getctime(path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "date_accessed",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "",
      "transformation_code": "date_accessed(path) | getatime(path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "sort_by",
      "function": "get_all_paths",
      "default_value": "name",
      "usage_pattern": "boolean_condition,method_call",
      "validation_code": "assert type(sort_by) == str, 'sort_by should either be None or be a string, but instead repr(type(sort_by))==' + repr(type(sort_by)) | assert sort_by in sort_by_options, 'get_file_paths: sort_by specifies how to sort the files. Please set sort_by to one of the following strings: ' + ', '.join(map(repr, sorted(sort_by_options))) + '. (You chose repr(sort_by)==' + repr(sort_by) + ' with repr(type(sort_by))==' + repr(type(sort_by)) | sort_by = sort_by.lower",
      "transformation_code": "sort_by='name', file_extension_filter=None, recursive=False, include_files=True, include_folders=True, just_file_names=False, include_file_extensions=True, relative=False, physical=None, ignore_permission_errors=False, include_hidden=True, include_symlinks=True, explore_symlinks=True, folder_placement='first', hidden_placement='last'): | sort_by = sort_by.lower() | get_all_paths(*directory_path, sort_by='name', file_extension_filter=None, recursive=False, include_files=True, include_folders=True, just_file_names=False, include_file_extensions=True, relative=False, physical=None, ignore_permission_errors=False, include_hidden=True, include_symlinks=True, explore_symlinks=True, folder_placement='first', hidden_placement='last') | type(sort_by)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "file_extension_filter",
      "function": "get_all_paths",
      "default_value": null,
      "usage_pattern": "boolean_condition,method_call",
      "validation_code": "assert type(file_extension_filter) == str, 'get_file_paths: For file_extension_filter, right now only space-split whitelists are supported, such as \"png jpg bmp gif\"' | file_extension_filter=None | file_extension_whitelist = file_extension_filter",
      "transformation_code": "file_extension_filter=None, recursive=False, include_files=True, include_folders=True, just_file_names=False, include_file_extensions=True, relative=False, physical=None, ignore_permission_errors=False, include_hidden=True, include_symlinks=True, explore_symlinks=True, folder_placement='first', hidden_placement='last'): | get_all_paths(*directory_path, sort_by='name', file_extension_filter=None, recursive=False, include_files=True, include_folders=True, just_file_names=False, include_file_extensions=True, relative=False, physical=None, ignore_permission_errors=False, include_hidden=True, include_symlinks=True, explore_symlinks=True, folder_placement='first', hidden_placement='last') | type(file_extension_filter)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "recursive",
      "function": "get_all_paths",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "recursive=False",
      "transformation_code": "recursive=False, include_files=True, include_folders=True, just_file_names=False, include_file_extensions=True, relative=False, physical=None, ignore_permission_errors=False, include_hidden=True, include_symlinks=True, explore_symlinks=True, folder_placement='first', hidden_placement='last'): | get_all_paths(*directory_path, sort_by='name', file_extension_filter=None, recursive=False, include_files=True, include_folders=True, just_file_names=False, include_file_extensions=True, relative=False, physical=None, ignore_permission_errors=False, include_hidden=True, include_symlinks=True, explore_symlinks=True, folder_placement='first', hidden_placement='last')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "include_files",
      "function": "get_all_paths",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "include_files=True",
      "transformation_code": "include_files=True, include_folders=True, just_file_names=False, include_file_extensions=True, relative=False, physical=None, ignore_permission_errors=False, include_hidden=True, include_symlinks=True, explore_symlinks=True, folder_placement='first', hidden_placement='last'): | get_all_paths(*directory_path, sort_by='name', file_extension_filter=None, recursive=False, include_files=True, include_folders=True, just_file_names=False, include_file_extensions=True, relative=False, physical=None, ignore_permission_errors=False, include_hidden=True, include_symlinks=True, explore_symlinks=True, folder_placement='first', hidden_placement='last')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "include_folders",
      "function": "get_all_paths",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "include_folders=True",
      "transformation_code": "include_folders=True, just_file_names=False, include_file_extensions=True, relative=False, physical=None, ignore_permission_errors=False, include_hidden=True, include_symlinks=True, explore_symlinks=True, folder_placement='first', hidden_placement='last'): | get_all_paths(*directory_path, sort_by='name', file_extension_filter=None, recursive=False, include_files=True, include_folders=True, just_file_names=False, include_file_extensions=True, relative=False, physical=None, ignore_permission_errors=False, include_hidden=True, include_symlinks=True, explore_symlinks=True, folder_placement='first', hidden_placement='last')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "just_file_names",
      "function": "get_all_paths",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "just_file_names=False",
      "transformation_code": "just_file_names=False, include_file_extensions=True, relative=False, physical=None, ignore_permission_errors=False, include_hidden=True, include_symlinks=True, explore_symlinks=True, folder_placement='first', hidden_placement='last'): | get_all_paths(*directory_path, sort_by='name', file_extension_filter=None, recursive=False, include_files=True, include_folders=True, just_file_names=False, include_file_extensions=True, relative=False, physical=None, ignore_permission_errors=False, include_hidden=True, include_symlinks=True, explore_symlinks=True, folder_placement='first', hidden_placement='last')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "include_file_extensions",
      "function": "get_all_paths",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "include_file_extensions=True",
      "transformation_code": "include_file_extensions=True, relative=False, physical=None, ignore_permission_errors=False, include_hidden=True, include_symlinks=True, explore_symlinks=True, folder_placement='first', hidden_placement='last'): | get_all_paths(*directory_path, sort_by='name', file_extension_filter=None, recursive=False, include_files=True, include_folders=True, just_file_names=False, include_file_extensions=True, relative=False, physical=None, ignore_permission_errors=False, include_hidden=True, include_symlinks=True, explore_symlinks=True, folder_placement='first', hidden_placement='last')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "relative",
      "function": "get_all_paths",
      "default_value": false,
      "usage_pattern": "boolean_condition,type_check",
      "validation_code": "isinstance(relative, str) | relative=False | relative_to = relative",
      "transformation_code": "relative=False, physical=None, ignore_permission_errors=False, include_hidden=True, include_symlinks=True, explore_symlinks=True, folder_placement='first', hidden_placement='last'): | get_all_paths(*directory_path, sort_by='name', file_extension_filter=None, recursive=False, include_files=True, include_folders=True, just_file_names=False, include_file_extensions=True, relative=False, physical=None, ignore_permission_errors=False, include_hidden=True, include_symlinks=True, explore_symlinks=True, folder_placement='first', hidden_placement='last') | isinstance(relative, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "physical",
      "function": "get_all_paths",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "physical=None | physical = not | physical=False",
      "transformation_code": "physical=None, ignore_permission_errors=False, include_hidden=True, include_symlinks=True, explore_symlinks=True, folder_placement='first', hidden_placement='last'): | physical = not relative | get_all_paths(*directory_path, sort_by='name', file_extension_filter=None, recursive=False, include_files=True, include_folders=True, just_file_names=False, include_file_extensions=True, relative=False, physical=None, ignore_permission_errors=False, include_hidden=True, include_symlinks=True, explore_symlinks=True, folder_placement='first', hidden_placement='last') | get_absolute_path(path, physical=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "ignore_permission_errors",
      "function": "get_all_paths",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "ignore_permission_errors=False",
      "transformation_code": "ignore_permission_errors=False, include_hidden=True, include_symlinks=True, explore_symlinks=True, folder_placement='first', hidden_placement='last'): | get_all_paths(*directory_path, sort_by='name', file_extension_filter=None, recursive=False, include_files=True, include_folders=True, just_file_names=False, include_file_extensions=True, relative=False, physical=None, ignore_permission_errors=False, include_hidden=True, include_symlinks=True, explore_symlinks=True, folder_placement='first', hidden_placement='last')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "include_hidden",
      "function": "get_all_paths",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "include_hidden=True",
      "transformation_code": "include_hidden=True, include_symlinks=True, explore_symlinks=True, folder_placement='first', hidden_placement='last'): | get_all_paths(*directory_path, sort_by='name', file_extension_filter=None, recursive=False, include_files=True, include_folders=True, just_file_names=False, include_file_extensions=True, relative=False, physical=None, ignore_permission_errors=False, include_hidden=True, include_symlinks=True, explore_symlinks=True, folder_placement='first', hidden_placement='last')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "include_symlinks",
      "function": "get_all_paths",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "include_symlinks=True",
      "transformation_code": "include_symlinks=True, explore_symlinks=True, folder_placement='first', hidden_placement='last'): | get_all_paths(*directory_path, sort_by='name', file_extension_filter=None, recursive=False, include_files=True, include_folders=True, just_file_names=False, include_file_extensions=True, relative=False, physical=None, ignore_permission_errors=False, include_hidden=True, include_symlinks=True, explore_symlinks=True, folder_placement='first', hidden_placement='last')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "explore_symlinks",
      "function": "get_all_paths",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "explore_symlinks=True",
      "transformation_code": "explore_symlinks=True, folder_placement='first', hidden_placement='last'): | get_all_paths(*directory_path, sort_by='name', file_extension_filter=None, recursive=False, include_files=True, include_folders=True, just_file_names=False, include_file_extensions=True, relative=False, physical=None, ignore_permission_errors=False, include_hidden=True, include_symlinks=True, explore_symlinks=True, folder_placement='first', hidden_placement='last') | and (not explore_symlinks)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "folder_placement",
      "function": "get_all_paths",
      "default_value": "first",
      "usage_pattern": "equality_check,boolean_condition,method_call",
      "validation_code": "assert not folder_placement or folder_placement in ['first', 'last'] | folder_placement = folder_placement.lower",
      "transformation_code": "folder_placement='first', hidden_placement='last'): | folder_placement = folder_placement.lower().strip() | get_all_paths(*directory_path, sort_by='name', file_extension_filter=None, recursive=False, include_files=True, include_folders=True, just_file_names=False, include_file_extensions=True, relative=False, physical=None, ignore_permission_errors=False, include_hidden=True, include_symlinks=True, explore_symlinks=True, folder_placement='first', hidden_placement='last')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "hidden_placement",
      "function": "get_all_paths",
      "default_value": "last",
      "usage_pattern": "equality_check,boolean_condition,method_call",
      "validation_code": "assert not hidden_placement or hidden_placement in ['first', 'last'] | hidden_placement = hidden_placement.lower",
      "transformation_code": "hidden_placement='last'): | hidden_placement = hidden_placement.lower().strip() | get_all_paths(*directory_path, sort_by='name', file_extension_filter=None, recursive=False, include_files=True, include_folders=True, just_file_names=False, include_file_extensions=True, relative=False, physical=None, ignore_permission_errors=False, include_hidden=True, include_symlinks=True, explore_symlinks=True, folder_placement='first', hidden_placement='last')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "folder",
      "function": "get_all_runnable_python_files",
      "default_value": ".",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "folder='.', *, recursive=True, explore_symlinks=False, ignore_permission_errors=True, include_hidden=False, lazy=False): | get_all_runnable_python_files(folder='.', *, recursive=True, explore_symlinks=False, ignore_permission_errors=True, include_hidden=False, lazy=False) | _get_all_paths_fast(include_folders=False, include_files=True, lazy=True, recursive=recursive, ignore_permission_errors=ignore_permission_errors, explore_symlinks=explore_symlinks, include_hidden=include_hidden)",
      "error_handling": "",
      "documentation": "folder (str, optional)"
    },
    {
      "arg_name": "recursive",
      "function": "get_all_runnable_python_files",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "recursive=True | recursive=recursive",
      "transformation_code": "recursive=True, explore_symlinks=False, ignore_permission_errors=True, include_hidden=False, lazy=False): | recursive=recursive, ignore_permission_errors=ignore_permission_errors, explore_symlinks=explore_symlinks, include_hidden=include_hidden) if ends_with_any(x, file_extensions)) | get_all_runnable_python_files(folder='.', *, recursive=True, explore_symlinks=False, ignore_permission_errors=True, include_hidden=False, lazy=False) | _get_all_paths_fast(include_folders=False, include_files=True, lazy=True, recursive=recursive, ignore_permission_errors=ignore_permission_errors, explore_symlinks=explore_symlinks, include_hidden=include_hidden)",
      "error_handling": "",
      "documentation": "recursive (bool, optional)"
    },
    {
      "arg_name": "explore_symlinks",
      "function": "get_all_runnable_python_files",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "explore_symlinks=False | explore_symlinks=explore_symlinks",
      "transformation_code": "explore_symlinks=False, ignore_permission_errors=True, include_hidden=False, lazy=False): | explore_symlinks=explore_symlinks, include_hidden=include_hidden) if ends_with_any(x, file_extensions)) | get_all_runnable_python_files(folder='.', *, recursive=True, explore_symlinks=False, ignore_permission_errors=True, include_hidden=False, lazy=False) | _get_all_paths_fast(include_folders=False, include_files=True, lazy=True, recursive=recursive, ignore_permission_errors=ignore_permission_errors, explore_symlinks=explore_symlinks, include_hidden=include_hidden)",
      "error_handling": "",
      "documentation": "explore_symlinks (bool, optional)"
    },
    {
      "arg_name": "ignore_permission_errors",
      "function": "get_all_runnable_python_files",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "ignore_permission_errors=True | ignore_permission_errors=ignore_permission_errors",
      "transformation_code": "ignore_permission_errors=True, include_hidden=False, lazy=False): | ignore_permission_errors=ignore_permission_errors, explore_symlinks=explore_symlinks, include_hidden=include_hidden) if ends_with_any(x, file_extensions)) | get_all_runnable_python_files(folder='.', *, recursive=True, explore_symlinks=False, ignore_permission_errors=True, include_hidden=False, lazy=False) | _get_all_paths_fast(include_folders=False, include_files=True, lazy=True, recursive=recursive, ignore_permission_errors=ignore_permission_errors, explore_symlinks=explore_symlinks, include_hidden=include_hidden)",
      "error_handling": "",
      "documentation": "ignore_permission_errors (bool, optional)"
    },
    {
      "arg_name": "include_hidden",
      "function": "get_all_runnable_python_files",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "include_hidden=False | include_hidden=include_hidden",
      "transformation_code": "include_hidden=False, lazy=False): | include_hidden=include_hidden) if ends_with_any(x, file_extensions)) | get_all_runnable_python_files(folder='.', *, recursive=True, explore_symlinks=False, ignore_permission_errors=True, include_hidden=False, lazy=False) | _get_all_paths_fast(include_folders=False, include_files=True, lazy=True, recursive=recursive, ignore_permission_errors=ignore_permission_errors, explore_symlinks=explore_symlinks, include_hidden=include_hidden)",
      "error_handling": "",
      "documentation": "include_hidden (bool, optional)"
    },
    {
      "arg_name": "lazy",
      "function": "get_all_runnable_python_files",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "lazy=False | lazy=True",
      "transformation_code": "lazy=False): | lazy=True, recursive=recursive, ignore_permission_errors=ignore_permission_errors, explore_symlinks=explore_symlinks, include_hidden=include_hidden) if ends_with_any(x, file_extensions)) | get_all_runnable_python_files(folder='.', *, recursive=True, explore_symlinks=False, ignore_permission_errors=True, include_hidden=False, lazy=False) | _get_all_paths_fast(include_folders=False, include_files=True, lazy=True, recursive=recursive, ignore_permission_errors=ignore_permission_errors, explore_symlinks=explore_symlinks, include_hidden=include_hidden)",
      "error_handling": "",
      "documentation": "lazy (bool, optional)"
    },
    {
      "arg_name": "folder",
      "function": "get_subfolders",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert folder_exists(folder), 'Folder ' + repr(folder) + ' doesnt exist!'",
      "transformation_code": "get_subfolders(folder, *, relative=False, sort_by=None) | folder_exists(folder)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "relative",
      "function": "get_subfolders",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "relative=False | relative=relative",
      "transformation_code": "relative=False, sort_by=None): | relative=relative, sort_by=sort_by) | get_subfolders(folder, *, relative=False, sort_by=None) | get_all_paths(folder, include_files=False, include_folders=True, recursive=False, relative=relative, sort_by=sort_by)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "sort_by",
      "function": "get_subfolders",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "sort_by=None | sort_by=sort_by",
      "transformation_code": "sort_by=None): | sort_by=sort_by) | get_subfolders(folder, *, relative=False, sort_by=None) | get_all_paths(folder, include_files=False, include_folders=True, recursive=False, relative=relative, sort_by=sort_by)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "folder",
      "function": "_os_listdir_files",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_os_listdir_files(folder) | scandir(folder)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "folder",
      "function": "folder_is_empty",
      "default_value": ".",
      "usage_pattern": "type_check",
      "validation_code": "isinstance(folder, str) | True\n\n        >>> folder",
      "transformation_code": "folder_is_empty(folder: str='.') | folder_is_empty('/path/to/empty/folder')",
      "error_handling": "try_except",
      "documentation": "folder (str)"
    },
    {
      "arg_name": "folder",
      "function": "get_random_file",
      "default_value": null,
      "usage_pattern": "none_check",
      "validation_code": "folder=None | folder=folder",
      "transformation_code": "folder=None): | folder=folder)[0] | get_random_file(folder=None) | get_random_files(quantity=1, folder=folder)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "quantity",
      "function": "get_random_files",
      "default_value": null,
      "usage_pattern": "equality_check,boolean_condition,type_check",
      "validation_code": "assert isinstance(quantity, int) | assert quantity >= 0 | isinstance(quantity, int)",
      "transformation_code": "quantity == 0: | get_random_files(quantity: int, folder=None) | isinstance(quantity, int)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "folder",
      "function": "get_random_files",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check,type_check",
      "validation_code": "assert isinstance(folder, str) or folder is None | assert folder_exists(folder), 'rp.random_file: Folder does not exist: ' + repr(folder) | assert not len(files) == 0, 'rp.random_file: There are no files in ' + repr(folder)",
      "transformation_code": "folder=None): | folder = '.' | get_random_files(quantity: int, folder=None) | isinstance(folder, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "quantity",
      "function": "get_random_folders",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "get_random_folders(quantity: int, root_dir='.', *, include_symlinks=True, include_hidden=True) | random_batch_with_replacement(folders, quantity)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "root_dir",
      "function": "get_random_folders",
      "default_value": ".",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "root_dir='.', *, include_symlinks=True, include_hidden=True): | get_random_folders(quantity: int, root_dir='.', *, include_symlinks=True, include_hidden=True) | gather_args_call(_get_all_paths_fast, root_dir, include_folders=True, include_files=False, include_symlink_folders=include_symlinks)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "include_symlinks",
      "function": "get_random_folders",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "include_symlinks=True | include_symlink_folders=include_symlinks",
      "transformation_code": "include_symlinks=True, include_hidden=True): | get_random_folders(quantity: int, root_dir='.', *, include_symlinks=True, include_hidden=True) | gather_args_call(_get_all_paths_fast, root_dir, include_folders=True, include_files=False, include_symlink_folders=include_symlinks)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "include_hidden",
      "function": "get_random_folders",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "include_hidden=True",
      "transformation_code": "include_hidden=True): | get_random_folders(quantity: int, root_dir='.', *, include_symlinks=True, include_hidden=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "root_dir",
      "function": "get_random_folder",
      "default_value": ".",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "root_dir='.', *, include_symlinks=True, include_hidden=True): | get_random_folder(root_dir='.', *, include_symlinks=True, include_hidden=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "include_symlinks",
      "function": "get_random_folder",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "include_symlinks=True",
      "transformation_code": "include_symlinks=True, include_hidden=True): | get_random_folder(root_dir='.', *, include_symlinks=True, include_hidden=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "include_hidden",
      "function": "get_random_folder",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "include_hidden=True",
      "transformation_code": "include_hidden=True): | get_random_folder(root_dir='.', *, include_symlinks=True, include_hidden=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "pattern",
      "function": "_has_globbing_characters",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_has_globbing_characters(pattern) | bool(re.search('[\\\\*\\\\?\\\\[\\\\]]', pattern)",
      "error_handling": "",
      "documentation": "pattern (str)"
    },
    {
      "arg_name": "check_exists",
      "function": "rp_iglob",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "check_exists=False | check_exists=False",
      "transformation_code": "check_exists=False): | check_exists=False | rp_iglob(*files, check_exists=False) | and (not check_exists)",
      "error_handling": "",
      "documentation": "check_exists (bool)"
    },
    {
      "arg_name": "coefficients",
      "function": "fractional_integral_in_frequency_domain",
      "default_value": null,
      "usage_pattern": "indexing,length_check",
      "validation_code": "assert is_complex_vector(coefficients), 'coefficients should be a complex vector' | coefficients = np.asarray",
      "transformation_code": "coefficients = np.asarray(coefficients, np.complex128) | fractional_integral_in_frequency_domain(coefficients, n=1) | asarray(coefficients, np.complex128)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "n",
      "function": "fractional_integral_in_frequency_domain",
      "default_value": 1,
      "usage_pattern": "addition",
      "validation_code": "n=1 | coefficients = n",
      "transformation_code": "n=1): | fractional_integral_in_frequency_domain(coefficients, n=1) | fft (np.fft.rfft vs np.fft.fft)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "queries",
      "function": "best_flann_dict_matches",
      "default_value": null,
      "usage_pattern": "iteration",
      "validation_code": "",
      "transformation_code": "best_flann_dict_matches(queries, flann_dict, n: int=None, query_to_vector=lambda x: x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "flann_dict",
      "function": "best_flann_dict_matches",
      "default_value": null,
      "usage_pattern": "indexing,length_check,type_check",
      "validation_code": "assert isinstance(flann_dict, FlannDict) | isinstance(flann_dict, FlannDict) | flann_dict=f",
      "transformation_code": "flann_dict=f,n=3,query_to_vector=lambda _:_.x)) | best_flann_dict_matches(queries, flann_dict, n: int=None, query_to_vector=lambda x: x) | isinstance(flann_dict, FlannDict)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "n",
      "function": "best_flann_dict_matches",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "assert n is None or n >= 0 | n=3 | n >= 0",
      "transformation_code": "n=3,query_to_vector=lambda _:_.x)) | n = len(flann_dict) | best_flann_dict_matches(queries, flann_dict, n: int=None, query_to_vector=lambda x: x) | print(closest_flann_matches([test(3+1j)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "query_to_vector",
      "function": "best_flann_dict_matches",
      "default_value": "lambda x: x",
      "usage_pattern": "simple_usage",
      "validation_code": "assert callable(query_to_vector) | query_to_vector=lambda | query_to_vector=lambda",
      "transformation_code": "query_to_vector=lambda x: x): | query_to_vector=lambda _:_.x)) | best_flann_dict_matches(queries, flann_dict, n: int=None, query_to_vector=lambda x: x) | callable(query_to_vector)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "vectors",
      "function": "knn_clusters",
      "default_value": null,
      "usage_pattern": "iteration",
      "validation_code": "assert len(vectors.shape) == 2 | vectors = np.asarray | vectors = set",
      "transformation_code": "vectors = np.asarray(vectors) | vectors = set(map(tuple, vectors)) | knn_clusters(vectors, k=5, spatial_dict=FlannDict) | asarray(vectors)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "k",
      "function": "knn_clusters",
      "default_value": 5,
      "usage_pattern": "simple_usage",
      "validation_code": "assert k >= 1 | k=5 | k=3",
      "transformation_code": "k=5, spatial_dict=FlannDict): | k=3): | knn_clusters(vectors, k=5, spatial_dict=FlannDict) | edge (aka given two vertices a and b, a must be within b's first closest k neighbours AND b must be within a's closest k neighbours to form an edge. This condition is both sufficient and necessary to form an edge.)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "spatial_dict",
      "function": "knn_clusters",
      "default_value": "<FlannDict>",
      "usage_pattern": "indexing",
      "validation_code": "spatial_dict=FlannDict | spatial_dict = spatial_dict",
      "transformation_code": "spatial_dict=FlannDict): | spatial_dict = spatial_dict() | knn_clusters(vectors, k=5, spatial_dict=FlannDict) | set(map(tuple, spatial_dict[vector:k])",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "r_transform",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "path = as_complex_vector | path = circ_diff | path = circ_quot",
      "transformation_code": "path = as_complex_vector(path) | path = circ_diff(path) | r_transform(path) | as_complex_vector(path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "r_transform_inverse",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "path = as_complex_vector | path = circ_diff_inverse | path = np.exp",
      "transformation_code": "path = as_complex_vector(path) | path = circ_diff_inverse(path) | r_transform_inverse(path) | r_transform(r_transform_inverse(r_transform(path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "images",
      "function": "horizontally_concatenated_images",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "horizontally_concatenated_images(images) | column_stack(tuple(images)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "origin",
      "function": "vertically_concatenated_images",
      "default_value": null,
      "usage_pattern": "equality_check,boolean_condition,type_check",
      "validation_code": "assert isinstance(origin, str) | isinstance(origin, str) | origin=None",
      "transformation_code": "origin=None): | origin=origin) | vertically_concatenated_images(*image_list, origin=None) | EXAMPLE (Demo origin)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image_grid",
      "function": "grid_concatenated_images",
      "default_value": null,
      "usage_pattern": "indexing",
      "validation_code": "image_grid = list",
      "transformation_code": "image_grid = list(image_grid) | grid_concatenated_images(image_grid, *, origin=None) | list(image_grid)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "origin",
      "function": "grid_concatenated_images",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "origin=None | origin=origin | origin=origin",
      "transformation_code": "origin=None): | origin=origin) | grid_concatenated_images(image_grid, *, origin=None) | crop_image(image, width=max_image_widths[x], origin=origin)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "images",
      "function": "tiled_images",
      "default_value": null,
      "usage_pattern": "length_check,iteration",
      "validation_code": "images = list | images = split_into_sublists",
      "transformation_code": "images = [x if x is not None else null_image for x in images] | images = [rotate_image(i, 90) for i in images] | tiled_images(images, length=None, border_color=(0.5, 0.5, 0.5, 1) | display_image_in_terminal_color(tiled_images([load_image('https://i.pinimg.com/236x/36/69/39/36693999b6e24b1d06d0ee21c9ae320d--caged-nicolas-cage.jpg')",
      "error_handling": "",
      "documentation": "images([load_image('https"
    },
    {
      "arg_name": "length",
      "function": "tiled_images",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check,type_check",
      "validation_code": "isinstance(length, float) | length=None | length=length",
      "transformation_code": "length=None, border_color=(0.5, 0.5, 0.5, 1), border_thickness=1, transpose=False, origin=None): | length=length, border_color=border_color, border_thickness=border_thickness, transpose=False) | tiled_images(images, length=None, border_color=(0.5, 0.5, 0.5, 1) | tiled_images(images, length=length, border_color=border_color, border_thickness=border_thickness, transpose=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "border_color",
      "function": "tiled_images",
      "default_value": "(0.5, 0.5, 0.5, 1)",
      "usage_pattern": "simple_usage",
      "validation_code": "border_color=border_color | color=border_color | color=border_color",
      "transformation_code": "border_color=(0.5, 0.5, 0.5, 1), border_thickness=1, transpose=False, origin=None): | border_color=border_color, border_thickness=border_thickness, transpose=False) | tiled_images(images, length=None, border_color=(0.5, 0.5, 0.5, 1) | tiled_images(images, length=length, border_color=border_color, border_thickness=border_thickness, transpose=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "border_thickness",
      "function": "tiled_images",
      "default_value": 1,
      "usage_pattern": "boolean_condition",
      "validation_code": "border_thickness=1 | border_thickness=0 | border_thickness=border_thickness",
      "transformation_code": "border_thickness=1, transpose=False, origin=None): | border_thickness=0 can result in large speed boosts right now | tiled_images(images, length=length, border_color=border_color, border_thickness=border_thickness, transpose=False) | bordered_image_solid_color(image, color=border_color, thickness=border_thickness, top=0, left=0)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "transpose",
      "function": "tiled_images",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "transpose=False | transpose=False",
      "transformation_code": "transpose=False, origin=None): | transpose=False) | tiled_images(images, length=length, border_color=border_color, border_thickness=border_thickness, transpose=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "origin",
      "function": "tiled_images",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "origin=None | origin=origin",
      "transformation_code": "origin=None): | origin=origin) | grid_concatenated_images(images, origin=origin)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "videos",
      "function": "tiled_videos",
      "default_value": null,
      "usage_pattern": "indexing,length_check,iteration",
      "validation_code": "videos = trim_videos_to_max_length",
      "transformation_code": "videos = trim_videos_to_max_length(videos, copy=False) | tiled_videos(videos, *, show_progress=False, border_thickness=0, **kwargs) | len(videos)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "show_progress",
      "function": "tiled_videos",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "show_progress=False",
      "transformation_code": "show_progress=False, border_thickness=0, **kwargs): | show_progress = 'eta:rp.' + get_current_function_name() | tiled_videos(videos, *, show_progress=False, border_thickness=0, **kwargs)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "border_thickness",
      "function": "tiled_videos",
      "default_value": 0,
      "usage_pattern": "simple_usage",
      "validation_code": "border_thickness=0 | border_thickness=0 | border_thickness=border_thickness",
      "transformation_code": "border_thickness=0, **kwargs): | border_thickness=0, so that's the default value | tiled_videos(videos, *, show_progress=False, border_thickness=0, **kwargs) | tiled_images(tiles, border_thickness=border_thickness, **kwargs)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "vertically_flipped_image",
      "default_value": null,
      "usage_pattern": "indexing,method_call",
      "validation_code": "",
      "transformation_code": "vertically_flipped_image(image) | is_pil_image(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "horizontally_flipped_image",
      "default_value": null,
      "usage_pattern": "indexing,method_call",
      "validation_code": "",
      "transformation_code": "horizontally_flipped_image(image) | is_pil_image(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "X",
      "function": "least_squares_regression_line_coeffs",
      "default_value": null,
      "usage_pattern": "indexing,length_check,addition",
      "validation_code": "assert len(X) > 0 | assert X.shape == Y.shape | Y = X",
      "transformation_code": "X = np.arange(len(X)) | X = as_numpy_array(X) | least_squares_regression_line_coeffs(X, Y=None, include_correlation=False) | len(X)",
      "error_handling": "",
      "documentation": "X: List of x-values, list of (x, y) pairs, or list of y-values."
    },
    {
      "arg_name": "Y",
      "function": "least_squares_regression_line_coeffs",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "assert X.shape == Y.shape | Y=None | Y = m",
      "transformation_code": "Y=None, include_correlation=False): | Y = m*X + b. | least_squares_regression_line_coeffs(X, Y=None, include_correlation=False) | as_numpy_array(Y)",
      "error_handling": "",
      "documentation": "Y: List of y-values when X is a list of x-values; otherwise, should be None."
    },
    {
      "arg_name": "include_correlation",
      "function": "least_squares_regression_line_coeffs",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "include_correlation=False",
      "transformation_code": "include_correlation=False): | least_squares_regression_line_coeffs(X, Y=None, include_correlation=False)",
      "error_handling": "",
      "documentation": "include_correlation: Boolean flag to include the correlation coefficient in the output."
    },
    {
      "arg_name": "x",
      "function": "magnitude",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "magnitude(x, **kwargs) | sqrt(np.sum(np.abs(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "normalized",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "x = np.asarray",
      "transformation_code": "x = np.asarray(x) | normalized(x, axis=None) | asarray(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "axis",
      "function": "normalized",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "axis=None | axis=axis",
      "transformation_code": "axis=None): | axis=axis, keepdims=True) | normalized(x, axis=None) | magnitude(x, axis=axis, keepdims=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "code",
      "function": "javascript",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "assert isinstance(code, str) | isinstance(code, str)",
      "transformation_code": "javascript(code) | isinstance(code, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "_binary_floyd_steinburg_dithering",
      "default_value": null,
      "usage_pattern": "indexing,method_call",
      "validation_code": "assert is_image(image) | image = as_byte_image | image = dither",
      "transformation_code": "image = as_byte_image(image) | image = dither(image) | _binary_floyd_steinburg_dithering(image) | is_image(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "is_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "image = as_numpy_array",
      "transformation_code": "image = as_numpy_array(image) | is_image(image) | is_torch_tensor(image)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "is_grayscale_image",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "image = as_numpy_array",
      "transformation_code": "image = as_numpy_array(image) | is_grayscale_image(image) | as_numpy_array(image)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "is_rgb_image",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "image = as_numpy_array | shape = image",
      "transformation_code": "image = as_numpy_array(image) | is_rgb_image(image) | as_numpy_array(image)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "is_rgba_image",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "image = as_numpy_array | shape = image",
      "transformation_code": "image = as_numpy_array(image) | is_rgba_image(image) | as_numpy_array(image)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "_grayscale_image_to_grayscale_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_grayscale_image_to_grayscale_image(image) | as_numpy_array(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "_grayscale_image_to_rgb_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_grayscale_image_to_rgb_image(image) | grayscale_to_rgb(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "_grayscale_image_to_rgba_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_grayscale_image_to_rgba_image(image) | _rgb_image_to_rgba_image(_grayscale_image_to_rgb_image(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "_rgb_image_to_grayscale_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_rgb_image_to_grayscale_image(image) | _rgb_to_grayscale(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "_rgb_image_to_rgb_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_rgb_image_to_rgb_image(image) | as_numpy_array(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "_rgb_image_to_rgba_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_rgb_image_to_rgba_image(image) | ones((*image.shape[:2], 1)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "_rgba_image_to_grayscale_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_rgba_image_to_grayscale_image(image) | _rgb_image_to_grayscale_image(_rgba_image_to_rgb_image(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "_rgba_image_to_rgb_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_rgba_image_to_rgb_image(image) | as_numpy_array(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "_rgba_image_to_rgba_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_rgba_image_to_rgba_image(image) | as_numpy_array(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "as_grayscale_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert is_image(image), 'Error: input is not an image as defined by rp.is_image()' | assert False, 'This line should be impossible to reach because is_image(image).'",
      "transformation_code": "as_grayscale_image(image, *, copy=True) | is_image(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "copy",
      "function": "as_grayscale_image",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "copy=True",
      "transformation_code": "copy=True): | as_grayscale_image(image, *, copy=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "as_rgb_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert is_image(image), 'Error: input is not an image as defined by rp.is_image()' | assert False, 'This line should be impossible to reach because is_image(image).'",
      "transformation_code": "as_rgb_image(image, *, copy=True) | is_image(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "copy",
      "function": "as_rgb_image",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "copy=True",
      "transformation_code": "copy=True): | as_rgb_image(image, *, copy=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "as_rgba_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert is_image(image), 'Error: input is not an image as defined by rp.is_image()' | assert False, 'This line should be impossible to reach because is_image(image).'",
      "transformation_code": "as_rgba_image(image, *, copy=True) | is_image(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "copy",
      "function": "as_rgba_image",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "copy=True",
      "transformation_code": "copy=True): | as_rgba_image(image, *, copy=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "is_float_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "image = np.asarray",
      "transformation_code": "image = np.asarray(image) | is_float_image(image) | is_torch_tensor(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "is_byte_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "image = np.asarray",
      "transformation_code": "image = np.asarray(image) | is_byte_image(image) | is_torch_tensor(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "is_binary_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "image = np.asarray",
      "transformation_code": "image = np.asarray(image) | is_binary_image(image) | is_torch_tensor(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "_clamp_float_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert is_float_image(image) | image = np.clip",
      "transformation_code": "image = np.clip(image, 0, 1) | _clamp_float_image(image) | is_float_image(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "_float_image_to_float_image",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "",
      "transformation_code": "_float_image_to_float_image(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "_float_image_to_byte_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_float_image_to_byte_image(image) | return (_clamp_float_image(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "_float_image_to_binary_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_float_image_to_binary_image(image) | round(_clamp_float_image(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "_byte_image_to_float_image",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "",
      "transformation_code": "_byte_image_to_float_image(image) | astype(_float_image_dtype()",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "_byte_image_to_byte_image",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "",
      "transformation_code": "_byte_image_to_byte_image(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "_byte_image_to_binary_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_byte_image_to_binary_image(image) | _float_image_to_binary_image(_byte_image_to_float_image(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "_binary_image_to_float_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_binary_image_to_float_image(image) | asarray(image, dtype=_float_image_dtype()",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "_binary_image_to_byte_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_binary_image_to_byte_image(image) | _float_image_to_byte_image(_binary_image_to_float_image(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "_binary_image_to_binary_image",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "",
      "transformation_code": "_binary_image_to_binary_image(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "as_float_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert is_image(image), 'Error: input is not an image as defined by rp.is_image()'",
      "transformation_code": "as_float_image(image, *, copy=True) | is_image(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "copy",
      "function": "as_float_image",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "copy=True",
      "transformation_code": "copy=True): | as_float_image(image, *, copy=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "as_byte_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert is_image(image), 'Error: input is not an image as defined by rp.is_image()'",
      "transformation_code": "as_byte_image(image, *, copy=True) | is_image(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "copy",
      "function": "as_byte_image",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "copy=True",
      "transformation_code": "copy=True): | as_byte_image(image, *, copy=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "as_binary_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert is_image(image), 'Error: input is not an image as defined by rp.is_image()'",
      "transformation_code": "as_binary_image(image, dither=False, *, copy=True) | display_image(as_binary_image(load_image_from_webcam()",
      "error_handling": "",
      "documentation": "image(as_binary_image(load_image_from_webcam(),dither=True))"
    },
    {
      "arg_name": "dither",
      "function": "as_binary_image",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "dither=False | dither=True",
      "transformation_code": "dither=False, *, copy=True): | dither=True)) | as_binary_image(image, dither=False, *, copy=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "copy",
      "function": "as_binary_image",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "copy=True",
      "transformation_code": "copy=True): | as_binary_image(image, dither=False, *, copy=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "func",
      "function": "_images_conversion",
      "default_value": null,
      "usage_pattern": "equality_check",
      "validation_code": "func == as_float_image | func == as_byte_image | func == as_byte_image",
      "transformation_code": "func == as_float_image: | func == as_byte_image: | _images_conversion(func, images, *, copy_check, copy=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "images",
      "function": "_images_conversion",
      "default_value": null,
      "usage_pattern": "boolean_condition,indexing,method_call,length_check,iteration,addition",
      "validation_code": "assert len(images) | assert len(images.shape) == 4, images.shape | assert len(images.shape) == 4, images.shape",
      "transformation_code": "_images_conversion(func, images, *, copy_check, copy=True) | _is_numpy_array(images)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "copy_check",
      "function": "_images_conversion",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_images_conversion(func, images, *, copy_check, copy=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "copy",
      "function": "_images_conversion",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "copy=True | copy=copy | copy=copy",
      "transformation_code": "copy=True): | copy=copy), copy=copy) for image in images] | _images_conversion(func, images, *, copy_check, copy=True) | func(as_numpy_image(image, copy=copy)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "images",
      "function": "as_float_images",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "as_float_images(images, *, copy=True) | _images_conversion(as_float_image, images, copy=copy, copy_check=is_float_image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "copy",
      "function": "as_float_images",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "copy=True | copy=copy",
      "transformation_code": "copy=True): | copy=copy, copy_check=is_float_image) | as_float_images(images, *, copy=True) | _images_conversion(as_float_image, images, copy=copy, copy_check=is_float_image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "images",
      "function": "as_byte_images",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "as_byte_images(images, *, copy=True) | _images_conversion(as_byte_image, images, copy=copy, copy_check=is_byte_image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "copy",
      "function": "as_byte_images",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "copy=True | copy=copy",
      "transformation_code": "copy=True): | copy=copy, copy_check=is_byte_image) | as_byte_images(images, *, copy=True) | _images_conversion(as_byte_image, images, copy=copy, copy_check=is_byte_image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "images",
      "function": "as_binary_images",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "as_binary_images(images, *, copy=True) | _images_conversion(as_binary_image, images, copy=copy, copy_check=is_binary_image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "copy",
      "function": "as_binary_images",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "copy=True | copy=copy",
      "transformation_code": "copy=True): | copy=copy, copy_check=is_binary_image) | as_binary_images(images, *, copy=True) | _images_conversion(as_binary_image, images, copy=copy, copy_check=is_binary_image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "images",
      "function": "as_rgb_images",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "as_rgb_images(images, *, copy=True) | _images_conversion(as_rgb_image, images, copy=copy, copy_check=is_rgb_image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "copy",
      "function": "as_rgb_images",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "copy=True | copy=copy",
      "transformation_code": "copy=True): | copy=copy, copy_check=is_rgb_image) | as_rgb_images(images, *, copy=True) | _images_conversion(as_rgb_image, images, copy=copy, copy_check=is_rgb_image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "images",
      "function": "as_rgba_images",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "as_rgba_images(images, *, copy=True) | _images_conversion(as_rgba_image, images, copy=copy, copy_check=is_rgba_image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "copy",
      "function": "as_rgba_images",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "copy=True | copy=copy",
      "transformation_code": "copy=True): | copy=copy, copy_check=is_rgba_image) | as_rgba_images(images, *, copy=True) | _images_conversion(as_rgba_image, images, copy=copy, copy_check=is_rgba_image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "images",
      "function": "as_grayscale_images",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "as_grayscale_images(images, *, copy=True) | _images_conversion(as_grayscale_image, images, copy=copy, copy_check=is_grayscale_image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "copy",
      "function": "as_grayscale_images",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "copy=True | copy=copy",
      "transformation_code": "copy=True): | copy=copy, copy_check=is_grayscale_image) | as_grayscale_images(images, *, copy=True) | _images_conversion(as_grayscale_image, images, copy=copy, copy_check=is_grayscale_image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "images",
      "function": "_common_image_channel_converter",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_common_image_channel_converter(images) | any(map(is_rgba_image, images)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "images",
      "function": "_common_image_dtype_converter",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_common_image_dtype_converter(images) | any(map(is_float_image, images)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "images",
      "function": "_common_image_converter",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_common_image_converter(images) | _common_image_dtype_converter(images)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "hashtag",
      "function": "random_hex_color",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "hashtag=True",
      "transformation_code": "hashtag=True): | random_hex_color(hashtag=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "N",
      "function": "random_rgb_byte_colors",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "random_rgb_byte_colors(N) | range(N)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "N",
      "function": "random_rgba_byte_colors",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "random_rgba_byte_colors(N) | range(N)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "N",
      "function": "random_grayscale_byte_colors",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "random_grayscale_byte_colors(N) | range(N)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "N",
      "function": "random_rgb_float_colors",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "random_rgb_float_colors(N) | range(N)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "N",
      "function": "random_rgba_float_colors",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "random_rgba_float_colors(N) | range(N)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "N",
      "function": "random_grayscale_float_colors",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "random_grayscale_float_colors(N) | range(N)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "N",
      "function": "random_rgb_binary_colors",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "random_rgb_binary_colors(N) | range(N)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "N",
      "function": "random_rgba_binary_colors",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "random_rgba_binary_colors(N) | range(N)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "N",
      "function": "random_grayscale_binary_colors",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "random_grayscale_binary_colors(N) | range(N)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "N",
      "function": "random_hex_colors",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "random_hex_colors(N, hashtag=True) | range(N)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "hashtag",
      "function": "random_hex_colors",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "hashtag=True | hashtag=hashtag",
      "transformation_code": "hashtag=True): | hashtag=hashtag) for _ in range(N)] | random_hex_colors(N, hashtag=True) | random_hex_color(hashtag=hashtag)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "color",
      "function": "is_color",
      "default_value": null,
      "usage_pattern": "iteration",
      "validation_code": "",
      "transformation_code": "is_color(color) | is_iterable(color)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "color",
      "function": "is_binary_color",
      "default_value": null,
      "usage_pattern": "iteration",
      "validation_code": "",
      "transformation_code": "is_binary_color(color) | is_iterable(color)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "color",
      "function": "is_byte_color",
      "default_value": null,
      "usage_pattern": "iteration",
      "validation_code": "",
      "transformation_code": "is_byte_color(color) | is_iterable(color)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "color",
      "function": "is_float_color",
      "default_value": null,
      "usage_pattern": "iteration",
      "validation_code": "",
      "transformation_code": "is_float_color(color) | is_iterable(color)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "hex_color",
      "function": "hex_color_to_byte_color",
      "default_value": null,
      "usage_pattern": "indexing,length_check",
      "validation_code": "hex_color = hex_color",
      "transformation_code": "hex_color = hex_color[1:] | hex_color_to_byte_color(hex_color: str) | len(hex_color)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "hex_color",
      "function": "hex_color_to_float_color",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "color = hex_color",
      "transformation_code": "hex_color_to_float_color(hex_color: str) | hex_color_to_byte_color(hex_color)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "byte_color",
      "function": "byte_color_to_hex_color",
      "default_value": null,
      "usage_pattern": "iteration",
      "validation_code": "assert is_byte_color(byte_color)",
      "transformation_code": "byte_color = [int(min(255, max(0, x))) for x in byte_color] | byte_color_to_hex_color(byte_color: tuple, hashtag=True) | is_byte_color(byte_color)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "hashtag",
      "function": "byte_color_to_hex_color",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "hashtag=True",
      "transformation_code": "hashtag=True): | byte_color_to_hex_color(byte_color: tuple, hashtag=True) | return ('#' if hashtag else '')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "byte_color",
      "function": "byte_color_to_float_color",
      "default_value": null,
      "usage_pattern": "iteration",
      "validation_code": "",
      "transformation_code": "byte_color_to_float_color(byte_color) | tuple((x / 255 for x in byte_color)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "float_color",
      "function": "float_color_to_byte_color",
      "default_value": null,
      "usage_pattern": "iteration",
      "validation_code": "",
      "transformation_code": "float_color_to_byte_color(float_color)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "float_color",
      "function": "float_color_to_hex_color",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "float_color_to_hex_color(float_color, hashtag=True) | byte_color_to_hex_color(float_color_to_byte_color(float_color)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "hashtag",
      "function": "float_color_to_hex_color",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "hashtag=True | hashtag=hashtag",
      "transformation_code": "hashtag=True): | hashtag=hashtag) | float_color_to_hex_color(float_color, hashtag=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "name",
      "function": "_get_rp_color",
      "default_value": null,
      "usage_pattern": "boolean_condition,length_check",
      "validation_code": "name = match.group",
      "transformation_code": "name = match.group() | _get_rp_color(name) | compile('|'.join(color_names)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "color_name",
      "function": "color_name_to_float_color",
      "default_value": null,
      "usage_pattern": "method_call,type_check",
      "validation_code": "assert isinstance(color_name, str), type(color_name) | isinstance(color_name, str) | color_name = color_name.strip",
      "transformation_code": "color_name = color_name.strip() | color_name = color_name.lower() | color_name_to_float_color(color_name: str) | isinstance(color_name, str)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "color_name",
      "function": "color_name_to_byte_color",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "color_name_to_byte_color(color_name) | float_color_to_byte_color(color_name_to_float_color(color_name)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "color_name",
      "function": "color_name_to_hex_color",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "color_name_to_hex_color(color_name) | float_color_to_hex_color(color_name_to_float_color(color_name)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "color",
      "function": "get_color_hue",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert is_float_color(color), 'For now, get_color_hue only works with float_colors and returns a float between 0 and 1' | hue = color",
      "transformation_code": "get_color_hue(color) | is_float_color(color)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "color",
      "function": "get_color_saturation",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert is_float_color(color), 'For now, get_color_saturation only works with float_colors and returns a float between 0 and 1' | hue = color",
      "transformation_code": "get_color_saturation(color) | is_float_color(color)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "color",
      "function": "get_color_brightness",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert is_float_color(color), 'For now, get_color_brightness only works with float_colors and returns a float between 0 and 1' | hue = color",
      "transformation_code": "get_color_brightness(color) | is_float_color(color)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "get_image_dimensions",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert is_image(image) or is_torch_image(image), type(image)",
      "transformation_code": "get_image_dimensions(image, *, as_dict=False) | is_image(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "as_dict",
      "function": "get_image_dimensions",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "as_dict=False",
      "transformation_code": "as_dict=False): | get_image_dimensions(image, *, as_dict=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "get_image_height",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "assert is_image(image), type(image)",
      "transformation_code": "get_image_height(image) | is_torch_image(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "get_image_width",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "assert is_image(image), type(image)",
      "transformation_code": "get_image_width(image) | is_torch_image(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "video",
      "function": "get_video_height",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "get_video_height(video) | is_numpy_array(video)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "video",
      "function": "get_video_width",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "get_video_width(video) | is_numpy_array(video)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "include_file_extension",
      "function": "get_notebook_name",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "include_file_extension=False | include_file_extension=True | include_file_extension=include_file_extension",
      "transformation_code": "include_file_extension=False): | include_file_extension=True)  -->           \"notebook.ipynb\" | get_notebook_name(*, include_file_extension=False) | get_notebook_name(include_file_extension=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "height",
      "function": "launch_terminal_in_colab",
      "default_value": "400",
      "usage_pattern": "simple_usage",
      "validation_code": "height = 400",
      "transformation_code": "height='400', fullscreen=False): | height = 400 | launch_terminal_in_colab(height='400', fullscreen=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "fullscreen",
      "function": "launch_terminal_in_colab",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "fullscreen=False",
      "transformation_code": "fullscreen=False): | launch_terminal_in_colab(height='400', fullscreen=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "root",
      "function": "_is_python_exe_root",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_is_python_exe_root(root) | path_join(root, 'python.exe')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "tensor",
      "function": "split_tensor_into_regions",
      "default_value": null,
      "usage_pattern": "indexing,method_call",
      "validation_code": "assert len(counts) <= len(tensor.shape), \"We can't split a tensor of shape \" + str(shape) + ' along ' + str(len(counts)) + ' of its dimensions becuase it only has ' + str(len(shape)) + ' dimensions' | assert isinstance(count, int) and count > 0, 'All arguments to \"counts\" should be positive integers representing how many pieces we should slice the tensor in their respective dimension' | assert not shape[index] % count, 'All counts should evenly divide their respective dimension in the tensor, but ' + str(shape[index]) + '%' + str(count) + '!=0'",
      "transformation_code": "tensor = np.asarray(tensor) | tensor = tensor[slices] | split_tensor_into_regions(tensor, *counts, flat=True, strict=False) | asarray(tensor)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "flat",
      "function": "split_tensor_into_regions",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "flat=True | flat=False | flat=True",
      "transformation_code": "flat=True, strict=False): | flat=False)  ->  \u2039x, y, a//x, b//y, c\u203a  #Think of c as 3, and a and b the width of some RGB image | split_tensor_into_regions(tensor, *counts, flat=True, strict=False) | split_tensor_into_regions(\u2039a,b,c\u203a, x, y, flat=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "strict",
      "function": "split_tensor_into_regions",
      "default_value": false,
      "usage_pattern": "equality_check,boolean_condition",
      "validation_code": "strict=False | strict==True | strict==False",
      "transformation_code": "strict=False): | strict==True, then all of tensor.shape's dimensions must evenly divide counts. Otherwise, if strict==False, tensor will be automatically cropped to accomodate the given *counts | split_tensor_into_regions(tensor, *counts, flat=True, strict=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "indices_tensor",
      "function": "apply_tensor_mapping",
      "default_value": null,
      "usage_pattern": "indexing,method_call",
      "validation_code": "indices_tensor = indices_tensor.astype | indices_shape = indices_tensor | indices_tensor = indices_tensor.astype",
      "transformation_code": "indices_tensor = indices_tensor.astype(int) | indices_tensor = indices_tensor.astype(int) | apply_tensor_mapping(indices_tensor, mapping_tensor) | apply_tensor_mapping_slowly(indices_tensor, mapping_tensor)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "mapping_tensor",
      "function": "apply_tensor_mapping",
      "default_value": null,
      "usage_pattern": "indexing,method_call",
      "validation_code": "mapping_tensor = mapping_tensor.astype | mapping_shape = mapping_tensor | mapping_shape = mapping_tensor",
      "transformation_code": "mapping_tensor = mapping_tensor.astype(int) | apply_tensor_mapping(indices_tensor, mapping_tensor) | apply_tensor_mapping_slowly(indices_tensor, mapping_tensor)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "bordered_image_solid_color",
      "default_value": null,
      "usage_pattern": "indexing",
      "validation_code": "image = as_numpy_image | image = as_rgba_image | image = as_float_image",
      "transformation_code": "image = as_numpy_image(image, copy=False) | image = as_rgba_image(image, copy=False) | bordered_image_solid_color(image, color=(1.0, 1.0, 1.0, 1.0) | display_image(\n        ...         crop_image(\n        ...             bordered_image_solid_color(\n        ...                 uniform_float_color_image(200, 200, (0.25, 0.5, 1, 1)",
      "error_handling": "",
      "documentation": "image("
    },
    {
      "arg_name": "color",
      "function": "bordered_image_solid_color",
      "default_value": "(1.0, 1.0, 1.0, 1.0)",
      "usage_pattern": "length_check",
      "validation_code": "assert len(color) == 4, 'Color must be rgba floats' | color = as_rgba_float_color",
      "transformation_code": "color=(1.0, 1.0, 1.0, 1.0), thickness=1, width=None, height=None, top=None, bottom=None, left=None, right=None): | color = as_rgba_float_color(color) | bordered_image_solid_color(image, color=(1.0, 1.0, 1.0, 1.0) | display_image(\n        ...         crop_image(\n        ...             bordered_image_solid_color(\n        ...                 uniform_float_color_image(200, 200, (0.25, 0.5, 1, 1)",
      "error_handling": "",
      "documentation": "color("
    },
    {
      "arg_name": "thickness",
      "function": "bordered_image_solid_color",
      "default_value": 1,
      "usage_pattern": "simple_usage",
      "validation_code": "thickness=1 | thickness=10 | height=thickness",
      "transformation_code": "thickness=1, width=None, height=None, top=None, bottom=None, left=None, right=None): | thickness=10,",
      "error_handling": "",
      "documentation": "thickness (controls top,bottom,left and right all at once)"
    },
    {
      "arg_name": "width",
      "function": "bordered_image_solid_color",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "width=None | width=400 | width = thickness",
      "transformation_code": "width=None, height=None, top=None, bottom=None, left=None, right=None): | width=400, | values (height overrides top and bottom if they're None and width overrides left and right if they're None) | manually (if these are set, they override anything set by width or height etc)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "height",
      "function": "bordered_image_solid_color",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "height=None | height=thickness | height=400",
      "transformation_code": "height=None, top=None, bottom=None, left=None, right=None): | height=thickness, | values (height overrides top and bottom if they're None and width overrides left and right if they're None) | manually (if these are set, they override anything set by width or height etc)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "top",
      "function": "bordered_image_solid_color",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "top=None | top = height | top < 0",
      "transformation_code": "top=None, bottom=None, left=None, right=None): | top = height if top is None else top | thickness (controls top,bottom,left and right all at once) | values (height overrides top and bottom if they're None and width overrides left and right if they're None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "bottom",
      "function": "bordered_image_solid_color",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "bottom=None | bottom = height | bottom < 0",
      "transformation_code": "bottom=None, left=None, right=None): | bottom = height if bottom is None else bottom | thickness (controls top,bottom,left and right all at once) | values (height overrides top and bottom if they're None and width overrides left and right if they're None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "left",
      "function": "bordered_image_solid_color",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "left=None | left = width | left < 0",
      "transformation_code": "left=None, right=None): | left = width if left is None else left | thickness (controls top,bottom,left and right all at once) | values (height overrides top and bottom if they're None and width overrides left and right if they're None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "right",
      "function": "bordered_image_solid_color",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "right=None | right = width | right < 0",
      "transformation_code": "right=None): | right = width if right is None else right | thickness (controls top,bottom,left and right all at once) | values (height overrides top and bottom if they're None and width overrides left and right if they're None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "color",
      "function": "bordered_images_solid_color",
      "default_value": "(1.0, 1.0, 1.0, 1.0)",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "color=(1.0, 1.0, 1.0, 1.0), thickness=1, width=None, height=None, top=None, bottom=None, left=None, right=None): | bordered_images_solid_color(*images, color=(1.0, 1.0, 1.0, 1.0) | bordered_image_solid_color(x, color, thickness, width, height, top, bottom, left, right)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "thickness",
      "function": "bordered_images_solid_color",
      "default_value": 1,
      "usage_pattern": "simple_usage",
      "validation_code": "thickness=1",
      "transformation_code": "thickness=1, width=None, height=None, top=None, bottom=None, left=None, right=None): | bordered_image_solid_color(x, color, thickness, width, height, top, bottom, left, right)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "width",
      "function": "bordered_images_solid_color",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "width=None",
      "transformation_code": "width=None, height=None, top=None, bottom=None, left=None, right=None): | bordered_image_solid_color(x, color, thickness, width, height, top, bottom, left, right)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "height",
      "function": "bordered_images_solid_color",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "height=None",
      "transformation_code": "height=None, top=None, bottom=None, left=None, right=None): | bordered_image_solid_color(x, color, thickness, width, height, top, bottom, left, right)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "top",
      "function": "bordered_images_solid_color",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "top=None",
      "transformation_code": "top=None, bottom=None, left=None, right=None): | bordered_image_solid_color(x, color, thickness, width, height, top, bottom, left, right)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "bottom",
      "function": "bordered_images_solid_color",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "bottom=None",
      "transformation_code": "bottom=None, left=None, right=None): | bordered_image_solid_color(x, color, thickness, width, height, top, bottom, left, right)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "left",
      "function": "bordered_images_solid_color",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "left=None",
      "transformation_code": "left=None, right=None): | bordered_image_solid_color(x, color, thickness, width, height, top, bottom, left, right)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "right",
      "function": "bordered_images_solid_color",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "right=None",
      "transformation_code": "right=None): | bordered_image_solid_color(x, color, thickness, width, height, top, bottom, left, right)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "tensors",
      "function": "get_principle_components",
      "default_value": null,
      "usage_pattern": "indexing,method_call,length_check",
      "validation_code": "tensors = np.asarray | tensors = len | tensor_shape = tensors",
      "transformation_code": "tensors = np.asarray(tensors) | tensors = len(tensors) | get_principle_components(tensors, number_of_components=None) | components (retaining the shape of the original tensors, to make eigenfaces easy to extract for example)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "number_of_components",
      "function": "get_principle_components",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "assert len(principle_components) == len(eigenvectors) == number_of_components, 'This is an internal assertion that should never fail' | number_of_components=None | number_of_components=20",
      "transformation_code": "number_of_components=None): | number_of_components=20) | get_principle_components(tensors, number_of_components=None) | get_principle_components(faces,number_of_components=20)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "cv_box_blur",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "image = np.zeros | image = create_test_image | image = np.asarray",
      "transformation_code": "image = np.zeros((height, width, 4), dtype=np.uint8) | image = create_test_image() | cv_box_blur(image, diameter=3, width=None, height=None, *, alpha_weighted=False) | line(image, (50, 100)",
      "error_handling": "",
      "documentation": "image()"
    },
    {
      "arg_name": "diameter",
      "function": "cv_box_blur",
      "default_value": 3,
      "usage_pattern": "simple_usage",
      "validation_code": "diameter=3 | diameter=diameter | width = diameter",
      "transformation_code": "diameter=3, width=None, height=None, *, alpha_weighted=False): | diameter=diameter, width=width, height=height, alpha_weighted=False) | cv_box_blur(image, diameter=3, width=None, height=None, *, alpha_weighted=False) | _alpha_weighted_rgba_image_func(cv_box_blur, image, diameter=diameter, width=width, height=height, alpha_weighted=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "width",
      "function": "cv_box_blur",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "assert width >= 0 and height >= 0 | width=None | height = width",
      "transformation_code": "width=None, height=None, *, alpha_weighted=False): | width = 300 | cv_box_blur(image, diameter=3, width=None, height=None, *, alpha_weighted=False) | zeros((height, width, 4)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "height",
      "function": "cv_box_blur",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "assert width >= 0 and height >= 0 | height=None | height = width",
      "transformation_code": "height=None, *, alpha_weighted=False): | height = width = 300 | cv_box_blur(image, diameter=3, width=None, height=None, *, alpha_weighted=False) | zeros((height, width, 4)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "alpha_weighted",
      "function": "cv_box_blur",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "alpha_weighted=False | alpha_weighted=True | alpha_weighted=False",
      "transformation_code": "alpha_weighted=False): | alpha_weighted=True) | cv_box_blur(image, diameter=3, width=None, height=None, *, alpha_weighted=False) | cv_box_blur(test_image, sigma, alpha_weighted=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "string",
      "function": "_highlighted_query_results",
      "default_value": null,
      "usage_pattern": "indexing,method_call",
      "validation_code": "i = string | s = string",
      "transformation_code": "_highlighted_query_results(string, query) | fansi(string[i:j], 'green', 'bold')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "query",
      "function": "_highlighted_query_results",
      "default_value": null,
      "usage_pattern": "method_call,length_check",
      "validation_code": "",
      "transformation_code": "_highlighted_query_results(string, query) | print(_highlighted_query_results('Hello, world wORld hello woRld!','world')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "root",
      "function": "_rinsp_search_helper",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "root=root",
      "transformation_code": "root=root, depth=depth, path=[]): | _rinsp_search_helper(root, query, depth=10) | keys(root)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "query",
      "function": "_rinsp_search_helper",
      "default_value": null,
      "usage_pattern": "method_call,type_check",
      "validation_code": "assert isinstance(query, str) | isinstance(query, str)",
      "transformation_code": "_rinsp_search_helper(root, query, depth=10) | isinstance(query, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "depth",
      "function": "_rinsp_search_helper",
      "default_value": 10,
      "usage_pattern": "simple_usage",
      "validation_code": "depth=10 | depth=depth",
      "transformation_code": "depth=10): | depth=depth, path=[]): | _rinsp_search_helper(root, query, depth=10) | helper(root=root, depth=depth, path=[])",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "root",
      "function": "rinsp_search",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "rinsp_search(root, query, depth=10) | _rinsp_search_helper(root, query, depth)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "query",
      "function": "rinsp_search",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "rinsp_search(root, query, depth=10) | _rinsp_search_helper(root, query, depth)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "depth",
      "function": "rinsp_search",
      "default_value": 10,
      "usage_pattern": "simple_usage",
      "validation_code": "depth=10",
      "transformation_code": "depth=10): | rinsp_search(root, query, depth=10) | _rinsp_search_helper(root, query, depth)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "as_numpy_array",
      "default_value": null,
      "usage_pattern": "method_call,iteration,type_check",
      "validation_code": "assert False, 'as_numpy_array: Error: Could not convert x into a numpy array. type(x)=' + repr(type(x)) + ' and x=' + repr(x) | isinstance(x, list) | x = x.float",
      "transformation_code": "x = x.float() | x=' + repr(x) | as_numpy_array(x) | asarray(x)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "question",
      "function": "input_conditional",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "assert isinstance(question, str), 'The \"question\" should be a string' | isinstance(question, str)",
      "transformation_code": "input_conditional(question, condition=lambda answer: True, on_fail=lambda answer: print('Please try again. Invalid input: ' + repr(answer) | isinstance(question, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "condition",
      "function": "input_conditional",
      "default_value": "lambda answer: True",
      "usage_pattern": "boolean_condition",
      "validation_code": "assert callable(condition), '\"condition\" should be a boolean function of the users input' | condition=lambda",
      "transformation_code": "condition=lambda answer: True, on_fail=lambda answer: print('Please try again. Invalid input: ' + repr(answer)), prompt=' > '): | input_conditional(question, condition=lambda answer: True, on_fail=lambda answer: print('Please try again. Invalid input: ' + repr(answer) | callable(condition)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "on_fail",
      "function": "input_conditional",
      "default_value": "lambda answer: print('Please try again. Invalid input: ' + repr(answer))",
      "usage_pattern": "simple_usage",
      "validation_code": "assert callable(on_fail), '\"on_fail\" should be a void function of the users input' | on_fail=lambda",
      "transformation_code": "on_fail=lambda answer: print('Please try again. Invalid input: ' + repr(answer)), prompt=' > '): | input_conditional(question, condition=lambda answer: True, on_fail=lambda answer: print('Please try again. Invalid input: ' + repr(answer) | callable(on_fail)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "prompt",
      "function": "input_conditional",
      "default_value": " > ",
      "usage_pattern": "type_check",
      "validation_code": "assert isinstance(prompt, str), 'The \"prompt\" should be a string' | isinstance(prompt, str)",
      "transformation_code": "prompt=' > '): | isinstance(prompt, str) | input(prompt)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "question",
      "function": "input_yes_no",
      "default_value": null,
      "usage_pattern": "addition",
      "validation_code": "",
      "transformation_code": "input_yes_no(question) | startswith(input_conditional(question + '\\nPlease enter yes or no.', lambda x: x.lower()",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "minimum",
      "function": "input_integer",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check,type_check",
      "validation_code": "assert isinstance(minimum, int) | isinstance(minimum, int) | minimum=None",
      "transformation_code": "minimum=None, maximum=None): | input_integer(minimum=None, maximum=None) | isinstance(minimum, int)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "maximum",
      "function": "input_integer",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check,type_check",
      "validation_code": "assert isinstance(maximum, int) | isinstance(maximum, int) | maximum=None",
      "transformation_code": "maximum=None): | input_integer(minimum=None, maximum=None) | isinstance(maximum, int)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "prompt",
      "function": "input_default",
      "default_value": "",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "prompt='', default=''): | input_default(prompt='', default='') | input(prompt)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "default",
      "function": "input_default",
      "default_value": "",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "default=''): | input_default(prompt='', default='') | set_startup_hook(lambda : readline.insert_text(default)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "question",
      "function": "input_select",
      "default_value": "Please select an option:",
      "usage_pattern": "addition",
      "validation_code": "options = question | question = True | question = True",
      "transformation_code": "question='Please select an option:', options=[], stringify=repr, reverse=False): | question = True | input_select(question='Please select an option:', options=[], stringify=repr, reverse=False) | line_join(question_option_lines)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "options",
      "function": "input_select",
      "default_value": "[]",
      "usage_pattern": "indexing,method_call,length_check,iteration,type_check",
      "validation_code": "assert len(options), 'input_select: Invalid input: Cannot select from 0 options.' | isinstance(options, set) | options = list",
      "transformation_code": "options=[], stringify=repr, reverse=False): | options=['Hello','Goodbye','Bonjour'])' | input_select(question='Please select an option:', options=[], stringify=repr, reverse=False) | input_select_option(options=['Hello','Goodbye','Bonjour'])",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "stringify",
      "function": "input_select",
      "default_value": "<repr>",
      "usage_pattern": "simple_usage",
      "validation_code": "stringify=repr",
      "transformation_code": "stringify=repr, reverse=False): | input_select(question='Please select an option:', options=[], stringify=repr, reverse=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "reverse",
      "function": "input_select",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "reverse=False",
      "transformation_code": "reverse=False): | input_select(question='Please select an option:', options=[], stringify=repr, reverse=False)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "question",
      "function": "input_select_multiple",
      "default_value": "Please select any number of options:",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "question='Please select any number of options:', options=[], stringify=repr, reverse=True): | input_select_multiple(question='Please select any number of options:', options=[], stringify=repr, reverse=True) | input_select(question, options=[None] + selected + unselected, stringify=_stringify, reverse=reverse)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "options",
      "function": "input_select_multiple",
      "default_value": "[]",
      "usage_pattern": "indexing,length_check",
      "validation_code": "",
      "transformation_code": "options=[], stringify=repr, reverse=True): | options=[None] + selected + unselected, stringify=_stringify, reverse=reverse) | input_select_multiple(question='Please select any number of options:', options=[], stringify=repr, reverse=True) | list(range(len(options)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "stringify",
      "function": "input_select_multiple",
      "default_value": "<repr>",
      "usage_pattern": "simple_usage",
      "validation_code": "stringify=repr | output = stringify | stringify=_stringify",
      "transformation_code": "stringify=repr, reverse=True): | stringify=_stringify, reverse=reverse) | input_select_multiple(question='Please select any number of options:', options=[], stringify=repr, reverse=True) | input_select(question, options=[None] + selected + unselected, stringify=_stringify, reverse=reverse)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "reverse",
      "function": "input_select_multiple",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "reverse=True | reverse=reverse",
      "transformation_code": "reverse=True): | reverse=reverse) | input_select_multiple(question='Please select any number of options:', options=[], stringify=repr, reverse=True) | input_select(question, options=[None] + selected + unselected, stringify=_stringify, reverse=reverse)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "url_or_id",
      "function": "get_youtube_video_url",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "url = url_or_id",
      "transformation_code": "get_youtube_video_url(url_or_id)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "url",
      "function": "_is_youtube_video_url",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "",
      "transformation_code": "_is_youtube_video_url(url) | is_valid_url(url)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "url_or_id",
      "function": "get_youtube_video_transcript",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "assert isinstance(url_or_id, str), type(url_or_id) | isinstance(url_or_id, str)",
      "transformation_code": "get_youtube_video_transcript(url_or_id: str) | isinstance(url_or_id, str)",
      "error_handling": "",
      "documentation": "url_or_id (str)"
    },
    {
      "arg_name": "url_or_id",
      "function": "download_youtube_video",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "download_youtube_video(url_or_id: str, path=None, *, need_video=True, need_audio=True, max_resolution=None, min_resolution=None, resolution_preference=max, skip_existing=False, show_progress=True, overwrite=False, filetype='mp4') | get_youtube_video_url(url_or_id)",
      "error_handling": "",
      "documentation": "url_or_id (str)"
    },
    {
      "arg_name": "path",
      "function": "download_youtube_video",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "assert get_file_extension(path) == filetype | path=None | path = get_youtube_video_title",
      "transformation_code": "path=None, *, need_video=True, need_audio=True, max_resolution=None, min_resolution=None, resolution_preference=max, skip_existing=False, show_progress=True, overwrite=False, filetype='mp4'): | path = get_youtube_video_title(url) | download_youtube_video(url_or_id: str, path=None, *, need_video=True, need_audio=True, max_resolution=None, min_resolution=None, resolution_preference=max, skip_existing=False, show_progress=True, overwrite=False, filetype='mp4') | with_file_extension(path, filetype)",
      "error_handling": "",
      "documentation": "path (str, optional)"
    },
    {
      "arg_name": "need_video",
      "function": "download_youtube_video",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "assert need_video or need_audio, 'Cannot have no audio and no video' | assert ys is not None, 'Could not find a youtube video that satisfied the given contsraints (url=%s, need_audio=%s, need_video=%s, max_resolution=%s, min_resolution=%s, filetype=%s). Try relaxing a contstraint, such as not requiring audio, not requiring video or using a different filetype etc.' % (repr(url), need_audio, need_video, max_resolution, min_resolution, repr(filetype)) + '\\nAvailable Options:\\n' + '\\n'.join(('    ' + str(x) for x in yt.streams)) | need_video=True",
      "transformation_code": "need_video=True, need_audio=True, max_resolution=None, min_resolution=None, resolution_preference=max, skip_existing=False, show_progress=True, overwrite=False, filetype='mp4'): | need_video=True, show_progress=False) | download_youtube_video(url_or_id: str, path=None, *, need_video=True, need_audio=True, max_resolution=None, min_resolution=None, resolution_preference=max, skip_existing=False, show_progress=True, overwrite=False, filetype='mp4') | download_youtube_video(\"https://www.youtube.com/watch?v=jvipPYFebWc\", need_audio=True, need_video=True, show_progress=False)",
      "error_handling": "",
      "documentation": "need_video (bool, optional)"
    },
    {
      "arg_name": "need_audio",
      "function": "download_youtube_video",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "assert need_video or need_audio, 'Cannot have no audio and no video' | assert ys is not None, 'Could not find a youtube video that satisfied the given contsraints (url=%s, need_audio=%s, need_video=%s, max_resolution=%s, min_resolution=%s, filetype=%s). Try relaxing a contstraint, such as not requiring audio, not requiring video or using a different filetype etc.' % (repr(url), need_audio, need_video, max_resolution, min_resolution, repr(filetype)) + '\\nAvailable Options:\\n' + '\\n'.join(('    ' + str(x) for x in yt.streams)) | need_audio=True",
      "transformation_code": "need_audio=True, max_resolution=None, min_resolution=None, resolution_preference=max, skip_existing=False, show_progress=True, overwrite=False, filetype='mp4'): | need_audio=True, need_video=True, show_progress=False) | download_youtube_video(url_or_id: str, path=None, *, need_video=True, need_audio=True, max_resolution=None, min_resolution=None, resolution_preference=max, skip_existing=False, show_progress=True, overwrite=False, filetype='mp4') | download_youtube_video(\"https://www.youtube.com/watch?v=jvipPYFebWc\", need_audio=True, need_video=True, show_progress=False)",
      "error_handling": "",
      "documentation": "need_audio (bool, optional)"
    },
    {
      "arg_name": "max_resolution",
      "function": "download_youtube_video",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "assert len(resolutions), 'No resolutions fit between given min_resolution=%s and max_resolution=%s. Available resolutions for %s are: %s' % (min_resolution, max_resolution, url, original_resolutions) | assert ys is not None, 'Could not find a youtube video that satisfied the given contsraints (url=%s, need_audio=%s, need_video=%s, max_resolution=%s, min_resolution=%s, filetype=%s). Try relaxing a contstraint, such as not requiring audio, not requiring video or using a different filetype etc.' % (repr(url), need_audio, need_video, max_resolution, min_resolution, repr(filetype)) + '\\nAvailable Options:\\n' + '\\n'.join(('    ' + str(x) for x in yt.streams)) | max_resolution=None",
      "transformation_code": "max_resolution=None, min_resolution=None, resolution_preference=max, skip_existing=False, show_progress=True, overwrite=False, filetype='mp4'): | max_resolution=%s. Available resolutions for %s are: %s' % (min_resolution, max_resolution, url, original_resolutions) | download_youtube_video(url_or_id: str, path=None, *, need_video=True, need_audio=True, max_resolution=None, min_resolution=None, resolution_preference=max, skip_existing=False, show_progress=True, overwrite=False, filetype='mp4') | contsraints (url=%s, need_audio=%s, need_video=%s, max_resolution=%s, min_resolution=%s, filetype=%s)",
      "error_handling": "",
      "documentation": "max_resolution (int, optional)"
    },
    {
      "arg_name": "min_resolution",
      "function": "download_youtube_video",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "assert len(resolutions), 'No resolutions fit between given min_resolution=%s and max_resolution=%s. Available resolutions for %s are: %s' % (min_resolution, max_resolution, url, original_resolutions) | assert ys is not None, 'Could not find a youtube video that satisfied the given contsraints (url=%s, need_audio=%s, need_video=%s, max_resolution=%s, min_resolution=%s, filetype=%s). Try relaxing a contstraint, such as not requiring audio, not requiring video or using a different filetype etc.' % (repr(url), need_audio, need_video, max_resolution, min_resolution, repr(filetype)) + '\\nAvailable Options:\\n' + '\\n'.join(('    ' + str(x) for x in yt.streams)) | min_resolution=None",
      "transformation_code": "min_resolution=None, resolution_preference=max, skip_existing=False, show_progress=True, overwrite=False, filetype='mp4'): | min_resolution=%s and max_resolution=%s. Available resolutions for %s are: %s' % (min_resolution, max_resolution, url, original_resolutions) | download_youtube_video(url_or_id: str, path=None, *, need_video=True, need_audio=True, max_resolution=None, min_resolution=None, resolution_preference=max, skip_existing=False, show_progress=True, overwrite=False, filetype='mp4') | contsraints (url=%s, need_audio=%s, need_video=%s, max_resolution=%s, min_resolution=%s, filetype=%s)",
      "error_handling": "",
      "documentation": "min_resolution (int, optional)"
    },
    {
      "arg_name": "resolution_preference",
      "function": "download_youtube_video",
      "default_value": "<max>",
      "usage_pattern": "simple_usage",
      "validation_code": "resolution_preference=max | preferred_resolution = resolution_preference",
      "transformation_code": "resolution_preference=max, skip_existing=False, show_progress=True, overwrite=False, filetype='mp4'): | download_youtube_video(url_or_id: str, path=None, *, need_video=True, need_audio=True, max_resolution=None, min_resolution=None, resolution_preference=max, skip_existing=False, show_progress=True, overwrite=False, filetype='mp4')",
      "error_handling": "",
      "documentation": "resolution_preference (callable, optional)"
    },
    {
      "arg_name": "skip_existing",
      "function": "download_youtube_video",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "skip_existing=False",
      "transformation_code": "skip_existing=False, show_progress=True, overwrite=False, filetype='mp4'): | download_youtube_video(url_or_id: str, path=None, *, need_video=True, need_audio=True, max_resolution=None, min_resolution=None, resolution_preference=max, skip_existing=False, show_progress=True, overwrite=False, filetype='mp4')",
      "error_handling": "",
      "documentation": "skip_existing (bool, optional)"
    },
    {
      "arg_name": "show_progress",
      "function": "download_youtube_video",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "show_progress=True | show_progress=False | show_progress=False",
      "transformation_code": "show_progress=True, overwrite=False, filetype='mp4'): | show_progress=False) | download_youtube_video(url_or_id: str, path=None, *, need_video=True, need_audio=True, max_resolution=None, min_resolution=None, resolution_preference=max, skip_existing=False, show_progress=True, overwrite=False, filetype='mp4') | download_youtube_video(\"https://www.youtube.com/watch?v=jvipPYFebWc\", need_audio=True, need_video=True, show_progress=False)",
      "error_handling": "",
      "documentation": "show_progress (bool, optional)"
    },
    {
      "arg_name": "overwrite",
      "function": "download_youtube_video",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "overwrite=False",
      "transformation_code": "overwrite=False, filetype='mp4'): | download_youtube_video(url_or_id: str, path=None, *, need_video=True, need_audio=True, max_resolution=None, min_resolution=None, resolution_preference=max, skip_existing=False, show_progress=True, overwrite=False, filetype='mp4')",
      "error_handling": "",
      "documentation": "overwrite (bool, optional)"
    },
    {
      "arg_name": "filetype",
      "function": "download_youtube_video",
      "default_value": "mp4",
      "usage_pattern": "simple_usage",
      "validation_code": "assert filetype in ['mp4', 'webm'], 'filetype=' + str(filetype) + ' but should be either \"mp4\" or \"webm\"' | assert get_file_extension(path) == filetype | assert ys is not None, 'Could not find a youtube video that satisfied the given contsraints (url=%s, need_audio=%s, need_video=%s, max_resolution=%s, min_resolution=%s, filetype=%s). Try relaxing a contstraint, such as not requiring audio, not requiring video or using a different filetype etc.' % (repr(url), need_audio, need_video, max_resolution, min_resolution, repr(filetype)) + '\\nAvailable Options:\\n' + '\\n'.join(('    ' + str(x) for x in yt.streams))",
      "transformation_code": "filetype='mp4'): | filetype=' + str(filetype) + ' but should be either \"mp4\" or \"webm\"' | download_youtube_video(url_or_id: str, path=None, *, need_video=True, need_audio=True, max_resolution=None, min_resolution=None, resolution_preference=max, skip_existing=False, show_progress=True, overwrite=False, filetype='mp4') | str(filetype)",
      "error_handling": "",
      "documentation": "filetype (str, optional)"
    },
    {
      "arg_name": "url",
      "function": "_get_youtube_video_data_via_embeddify",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "assert isinstance(url, str), 'Need url string, but got type ' + str(type(url)) | assert is_valid_url(url), 'Not a valid url: ' + repr(url) | isinstance(url, str)",
      "transformation_code": "_get_youtube_video_data_via_embeddify(url) | isinstance(url, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "url_or_id",
      "function": "get_youtube_video_title",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "get_youtube_video_title(url_or_id) | get_youtube_video_url(url_or_id)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "url_or_id",
      "function": "get_youtube_video_thumbnail",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "get_youtube_video_thumbnail(url_or_id, *, use_cache=False, output='image') | get_youtube_video_url(url_or_id)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "use_cache",
      "function": "get_youtube_video_thumbnail",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "use_cache=False | use_cache=False | use_cache=use_cache",
      "transformation_code": "use_cache=False, output='image'): | use_cache=False) | get_youtube_video_thumbnail(url_or_id, *, use_cache=False, output='image') | get_youtube_video_thumbnail(video_url, use_cache=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "output",
      "function": "get_youtube_video_thumbnail",
      "default_value": "image",
      "usage_pattern": "type_check",
      "validation_code": "assert isinstance(output, str), 'get_youtube_video_thumbnail: output arg should be a string but got type ' + str(type(output)) | assert output in ['image', 'url'], 'get_youtube_video_thumbnail: output arg should be either \"url\" or \"image\" but it was ' + str(output) | isinstance(output, str)",
      "transformation_code": "output='image'): | get_youtube_video_thumbnail(url_or_id, *, use_cache=False, output='image') | isinstance(output, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "_moviepy_VideoFileClip",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_moviepy_VideoFileClip(path, *args, **kwargs) | VideoFileClip(path, *args, **kwargs)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "_get_video_file_duration_via_moviepy",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_get_video_file_duration_via_moviepy(path) | _moviepy_VideoFileClip(path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "get_video_file_duration",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "path = get_absolute_path",
      "transformation_code": "path = get_absolute_path(path) | get_video_file_duration(path, use_cache=True) | get_absolute_path(path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "use_cache",
      "function": "get_video_file_duration",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "use_cache=True",
      "transformation_code": "use_cache=True): | get_video_file_duration(path, use_cache=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "_get_video_file_framerate_via_moviepy",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "path = get_absolute_path",
      "transformation_code": "path = get_absolute_path(path) | _get_video_file_framerate_via_moviepy(path, use_cache=True) | get_absolute_path(path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "use_cache",
      "function": "_get_video_file_framerate_via_moviepy",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "use_cache=True",
      "transformation_code": "use_cache=True): | _get_video_file_framerate_via_moviepy(path, use_cache=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "_get_video_file_framerate_via_ffprobe",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "path = get_absolute_path",
      "transformation_code": "path = get_absolute_path(path) | _get_video_file_framerate_via_ffprobe(path, use_cache=True) | get_absolute_path(path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "use_cache",
      "function": "_get_video_file_framerate_via_ffprobe",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "use_cache=True",
      "transformation_code": "use_cache=True): | _get_video_file_framerate_via_ffprobe(path, use_cache=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "get_video_file_framerate",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "get_video_file_framerate(path, use_cache=True) | _get_video_file_framerate_via_moviepy(path, use_cache)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "use_cache",
      "function": "get_video_file_framerate",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "use_cache=True",
      "transformation_code": "use_cache=True): | get_video_file_framerate(path, use_cache=True) | _get_video_file_framerate_via_moviepy(path, use_cache)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "location",
      "function": "_load_video_stream",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_load_video_stream(location, start_frame=0) | _MaybeTemporarilyDownloadVideo(location)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "start_frame",
      "function": "_load_video_stream",
      "default_value": 0,
      "usage_pattern": "boolean_condition",
      "validation_code": "start_frame=0",
      "transformation_code": "start_frame=0): | _load_video_stream(location, start_frame=0) | set(cv2.CAP_PROP_POS_FRAMES, start_frame)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "load_video_stream",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "assert isinstance(path, str), 'rp.load_video_stream: path must be a string, got {}'.format(type(path).__name__) | isinstance(path, str)",
      "transformation_code": "load_video_stream(path, *, start_frame=0, with_length=True, frame_transform=None) | isinstance(path, str)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "start_frame",
      "function": "load_video_stream",
      "default_value": 0,
      "usage_pattern": "type_check",
      "validation_code": "assert isinstance(start_frame, int) and start_frame >= 0, 'rp.load_video_stream: start_frame must be a non-negative integer, got {}'.format(start_frame) | isinstance(start_frame, int) | start_frame=0",
      "transformation_code": "start_frame=0, with_length=True, frame_transform=None): | start_frame=start_frame) | load_video_stream(path, *, start_frame=0, with_length=True, frame_transform=None) | isinstance(start_frame, int)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "with_length",
      "function": "load_video_stream",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "with_length=True",
      "transformation_code": "with_length=True, frame_transform=None): | load_video_stream(path, *, start_frame=0, with_length=True, frame_transform=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "frame_transform",
      "function": "load_video_stream",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "frame_transform=None",
      "transformation_code": "frame_transform=None): | load_video_stream(path, *, start_frame=0, with_length=True, frame_transform=None) | map(frame_transform, frame_iterator)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "start_frame",
      "function": "load_video_streams",
      "default_value": 0,
      "usage_pattern": "indexing,length_check",
      "validation_code": "assert len(start_frame) == len(paths), 'Must specify start_frame for each video' | start_frame=0 | start_frame=start_frame",
      "transformation_code": "start_frame=0, with_length=True, frame_transform=None, transpose=False, show_progress=True, num_threads=0, strict=True, lazy=False, buffer_limit=None): | start_frame = [start_frame] * len(paths) | load_video_streams(*paths, start_frame=0, with_length=True, frame_transform=None, transpose=False, show_progress=True, num_threads=0, strict=True, lazy=False, buffer_limit=None) | is_iterable(start_frame)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "with_length",
      "function": "load_video_streams",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "with_length=True | with_length=with_length",
      "transformation_code": "with_length=True, frame_transform=None, transpose=False, show_progress=True, num_threads=0, strict=True, lazy=False, buffer_limit=None): | with_length=with_length, frame_transform=frame_transform) | load_video_streams(*paths, start_frame=0, with_length=True, frame_transform=None, transpose=False, show_progress=True, num_threads=0, strict=True, lazy=False, buffer_limit=None) | load_video_stream(paths[i], start_frame=start_frame[i], with_length=with_length, frame_transform=frame_transform)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "frame_transform",
      "function": "load_video_streams",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "frame_transform=None | frame_transform=frame_transform",
      "transformation_code": "frame_transform=None, transpose=False, show_progress=True, num_threads=0, strict=True, lazy=False, buffer_limit=None): | frame_transform=frame_transform) | load_video_streams(*paths, start_frame=0, with_length=True, frame_transform=None, transpose=False, show_progress=True, num_threads=0, strict=True, lazy=False, buffer_limit=None) | load_video_stream(paths[i], start_frame=start_frame[i], with_length=with_length, frame_transform=frame_transform)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "transpose",
      "function": "load_video_streams",
      "default_value": false,
      "usage_pattern": "equality_check,boolean_condition",
      "validation_code": "transpose=False | transpose==True",
      "transformation_code": "transpose=False, show_progress=True, num_threads=0, strict=True, lazy=False, buffer_limit=None): | transpose==True, returns a single iterator that returns tuples of frames \"\"\" | load_video_streams(*paths, start_frame=0, with_length=True, frame_transform=None, transpose=False, show_progress=True, num_threads=0, strict=True, lazy=False, buffer_limit=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "show_progress",
      "function": "load_video_streams",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "show_progress=True",
      "transformation_code": "show_progress=True, num_threads=0, strict=True, lazy=False, buffer_limit=None): | load_video_streams(*paths, start_frame=0, with_length=True, frame_transform=None, transpose=False, show_progress=True, num_threads=0, strict=True, lazy=False, buffer_limit=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "num_threads",
      "function": "load_video_streams",
      "default_value": 0,
      "usage_pattern": "simple_usage",
      "validation_code": "num_threads=0",
      "transformation_code": "num_threads=0, strict=True, lazy=False, buffer_limit=None): | load_video_streams(*paths, start_frame=0, with_length=True, frame_transform=None, transpose=False, show_progress=True, num_threads=0, strict=True, lazy=False, buffer_limit=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "strict",
      "function": "load_video_streams",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "strict=True",
      "transformation_code": "strict=True, lazy=False, buffer_limit=None): | load_video_streams(*paths, start_frame=0, with_length=True, frame_transform=None, transpose=False, show_progress=True, num_threads=0, strict=True, lazy=False, buffer_limit=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "lazy",
      "function": "load_video_streams",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "lazy=False",
      "transformation_code": "lazy=False, buffer_limit=None): | load_video_streams(*paths, start_frame=0, with_length=True, frame_transform=None, transpose=False, show_progress=True, num_threads=0, strict=True, lazy=False, buffer_limit=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "buffer_limit",
      "function": "load_video_streams",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "buffer_limit=None",
      "transformation_code": "buffer_limit=None): | load_video_streams(*paths, start_frame=0, with_length=True, frame_transform=None, transpose=False, show_progress=True, num_threads=0, strict=True, lazy=False, buffer_limit=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "load_video",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "assert isinstance(path, str), 'rp.load_video: path must be a string, got {}'.format(type(path).__name__) | isinstance(path, str) | path = get_absolute_path",
      "transformation_code": "path=' + repr(path) + ': ' | path = get_absolute_path(path) | load_video(path, *, start_frame=0, length=None, show_progress=True, use_cache=False, frame_transform=None) | load_video(\"path/to/video.mp4\")",
      "error_handling": "",
      "documentation": "path (str)"
    },
    {
      "arg_name": "start_frame",
      "function": "load_video",
      "default_value": 0,
      "usage_pattern": "type_check",
      "validation_code": "assert isinstance(start_frame, int) and start_frame >= 0, 'rp.load_video: start_frame must be a non-negative integer, got {}'.format(start_frame) | isinstance(start_frame, int) | start_frame=0",
      "transformation_code": "start_frame=0, length=None, show_progress=True, use_cache=False, frame_transform=None): | start_frame=100, length=50) | load_video(path, *, start_frame=0, length=None, show_progress=True, use_cache=False, frame_transform=None) | load_video(\"path/to/video.mp4\", start_frame=100, length=50)",
      "error_handling": "",
      "documentation": "start_frame (int, optional)"
    },
    {
      "arg_name": "length",
      "function": "load_video",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check,type_check",
      "validation_code": "assert length is None or (isinstance(length, int) and length >= 0), 'rp.load_video: length must be None or a non-negative integer, got {}'.format(length) | isinstance(length, int) | length=None",
      "transformation_code": "length=None, show_progress=True, use_cache=False, frame_transform=None): | length=50) | load_video(path, *, start_frame=0, length=None, show_progress=True, use_cache=False, frame_transform=None) | load_video(\"path/to/video.mp4\", start_frame=100, length=50)",
      "error_handling": "",
      "documentation": "length (int, optional)"
    },
    {
      "arg_name": "show_progress",
      "function": "load_video",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "show_progress=True | with_length=show_progress",
      "transformation_code": "show_progress=True, use_cache=False, frame_transform=None): | load_video(path, *, start_frame=0, length=None, show_progress=True, use_cache=False, frame_transform=None) | load_video_stream(path, start_frame=start_frame, with_length=show_progress, frame_transform=frame_transform)",
      "error_handling": "",
      "documentation": "show_progress (bool, optional)"
    },
    {
      "arg_name": "use_cache",
      "function": "load_video",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "use_cache=False",
      "transformation_code": "use_cache=False, frame_transform=None): | load_video(path, *, start_frame=0, length=None, show_progress=True, use_cache=False, frame_transform=None)",
      "error_handling": "",
      "documentation": "use_cache (which would actually make it faster, if applicable)"
    },
    {
      "arg_name": "frame_transform",
      "function": "load_video",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "frame_transform=None | frame_transform=frame_transform",
      "transformation_code": "frame_transform=None): | frame_transform=frame_transform) | load_video(path, *, start_frame=0, length=None, show_progress=True, use_cache=False, frame_transform=None) | load_video_stream(path, start_frame=start_frame, with_length=show_progress, frame_transform=frame_transform)",
      "error_handling": "",
      "documentation": "frame_transform (callable, optional)"
    },
    {
      "arg_name": "start_frame",
      "function": "load_videos",
      "default_value": 0,
      "usage_pattern": "simple_usage",
      "validation_code": "start_frame=0 | start_frame=start_frame",
      "transformation_code": "start_frame=0, length=None, frame_transform=None, show_progress=True, use_cache=False, num_threads=None, strict=True, lazy=False, buffer_limit=None): | start_frame=start_frame, length=length, show_progress=False, use_cache=use_cache, frame_transform=frame_transform) | load_videos(*paths, start_frame=0, length=None, frame_transform=None, show_progress=True, use_cache=False, num_threads=None, strict=True, lazy=False, buffer_limit=None) | load_video(path, start_frame=start_frame, length=length, show_progress=False, use_cache=use_cache, frame_transform=frame_transform)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "length",
      "function": "load_videos",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "length=None | length=length",
      "transformation_code": "length=None, frame_transform=None, show_progress=True, use_cache=False, num_threads=None, strict=True, lazy=False, buffer_limit=None): | length=length, show_progress=False, use_cache=use_cache, frame_transform=frame_transform) | load_videos(*paths, start_frame=0, length=None, frame_transform=None, show_progress=True, use_cache=False, num_threads=None, strict=True, lazy=False, buffer_limit=None) | load_video(path, start_frame=start_frame, length=length, show_progress=False, use_cache=use_cache, frame_transform=frame_transform)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "frame_transform",
      "function": "load_videos",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "frame_transform=None | frame_transform=frame_transform",
      "transformation_code": "frame_transform=None, show_progress=True, use_cache=False, num_threads=None, strict=True, lazy=False, buffer_limit=None): | frame_transform=frame_transform) | load_videos(*paths, start_frame=0, length=None, frame_transform=None, show_progress=True, use_cache=False, num_threads=None, strict=True, lazy=False, buffer_limit=None) | load_video(path, start_frame=start_frame, length=length, show_progress=False, use_cache=use_cache, frame_transform=frame_transform)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "show_progress",
      "function": "load_videos",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "show_progress=True | show_progress=False",
      "transformation_code": "show_progress=True, use_cache=False, num_threads=None, strict=True, lazy=False, buffer_limit=None): | show_progress = 'eta:rp.load_videos' | load_videos(*paths, start_frame=0, length=None, frame_transform=None, show_progress=True, use_cache=False, num_threads=None, strict=True, lazy=False, buffer_limit=None) | load_video(path, start_frame=start_frame, length=length, show_progress=False, use_cache=use_cache, frame_transform=frame_transform)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "use_cache",
      "function": "load_videos",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "use_cache=False | use_cache=use_cache",
      "transformation_code": "use_cache=False, num_threads=None, strict=True, lazy=False, buffer_limit=None): | use_cache=use_cache, frame_transform=frame_transform) | load_videos(*paths, start_frame=0, length=None, frame_transform=None, show_progress=True, use_cache=False, num_threads=None, strict=True, lazy=False, buffer_limit=None) | load_video(path, start_frame=start_frame, length=length, show_progress=False, use_cache=use_cache, frame_transform=frame_transform)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "num_threads",
      "function": "load_videos",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "num_threads=None",
      "transformation_code": "num_threads=None, strict=True, lazy=False, buffer_limit=None): | load_videos(*paths, start_frame=0, length=None, frame_transform=None, show_progress=True, use_cache=False, num_threads=None, strict=True, lazy=False, buffer_limit=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "strict",
      "function": "load_videos",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "strict=True",
      "transformation_code": "strict=True, lazy=False, buffer_limit=None): | load_videos(*paths, start_frame=0, length=None, frame_transform=None, show_progress=True, use_cache=False, num_threads=None, strict=True, lazy=False, buffer_limit=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "lazy",
      "function": "load_videos",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "lazy=False",
      "transformation_code": "lazy=False, buffer_limit=None): | load_videos(*paths, start_frame=0, length=None, frame_transform=None, show_progress=True, use_cache=False, num_threads=None, strict=True, lazy=False, buffer_limit=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "buffer_limit",
      "function": "load_videos",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "buffer_limit=None",
      "transformation_code": "buffer_limit=None): | load_videos(*paths, start_frame=0, length=None, frame_transform=None, show_progress=True, use_cache=False, num_threads=None, strict=True, lazy=False, buffer_limit=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "frames",
      "function": "save_video_avi",
      "default_value": null,
      "usage_pattern": "indexing,iteration",
      "validation_code": "frames = as_numpy_array",
      "transformation_code": "frames = as_numpy_array(frames) | save_video_avi(frames, path: str=None, framerate: int=30) | as_numpy_array(frames)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "save_video_avi",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check,addition",
      "validation_code": "path = _get_default_video_path | path = rp.get_absolute_path",
      "transformation_code": "path = _get_default_video_path('avi') | path = rp.get_absolute_path(path) | save_video_avi(frames, path: str=None, framerate: int=30) | has_file_extension(path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "framerate",
      "function": "save_video_avi",
      "default_value": 30,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "save_video_avi(frames, path: str=None, framerate: int=30)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "extension",
      "function": "_get_default_video_path",
      "default_value": "mp4",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "extension='mp4'): | _get_default_video_path(extension='mp4') | get_unique_copy_path('video.' + extension)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "video_bitrate",
      "function": "_as_video_bitrate",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "video_bitrate = _named_video_bitrates",
      "transformation_code": "video_bitrate = _named_video_bitrates[video_bitrate] | _as_video_bitrate(video_bitrate: str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "video_quality",
      "function": "_as_video_quality",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "video_quality = _named_video_qualities | video_quality > 100 | video_quality = 100",
      "transformation_code": "video_quality = _named_video_qualities[video_quality] | video_quality = 100 | _as_video_quality(video_quality: str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "video",
      "function": "_cv_save_video_mp4",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "video = as_rgb_images | video = as_byte_images | video = as_numpy_array",
      "transformation_code": "video = as_rgb_images(video) | video = as_byte_images(video) | _cv_save_video_mp4(video, path, *, framerate, show_progress, quality) | as_rgb_images(video)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "_cv_save_video_mp4",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "path = get_unique_copy_path | path = with_file_extension",
      "transformation_code": "path = get_unique_copy_path('video.mp4') | path = with_file_extension(path, 'mp4') | _cv_save_video_mp4(video, path, *, framerate, show_progress, quality) | has_file_extension(path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "framerate",
      "function": "_cv_save_video_mp4",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_cv_save_video_mp4(video, path, *, framerate, show_progress, quality) | VideoWriter(path, fourcc, framerate, (w, h)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "show_progress",
      "function": "_cv_save_video_mp4",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "",
      "transformation_code": "_cv_save_video_mp4(video, path, *, framerate, show_progress, quality)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "quality",
      "function": "_cv_save_video_mp4",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "quality = _as_video_quality",
      "transformation_code": "quality = _as_video_quality(quality) | _cv_save_video_mp4(video, path, *, framerate, show_progress, quality) | _as_video_quality(quality)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "backend",
      "function": "set_save_video_mp4_default_backend",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert backend in ('ffmpeg', 'cv2'), backend | _save_video_mp4_default_backend = backend",
      "transformation_code": "backend = backend | set_save_video_mp4_default_backend(backend)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "frames",
      "function": "save_video_mp4",
      "default_value": null,
      "usage_pattern": "iteration,type_check",
      "validation_code": "assert not isinstance(frames, str), 'The first argument should be the sequence of video frames, not the path!' | isinstance(frames, str) | isinstance(frames, str)",
      "transformation_code": "frames = get_all_image_files(frames, sort_by='number') | frames = glob.glob(frames) | save_video_mp4(frames, path=None, framerate=60, *, video_bitrate='high', height=None, width=None, show_progress=True, backend=None) | isinstance(frames, str)",
      "error_handling": "",
      "documentation": "frames: a list of images as defined by rp.is_image(). Saves an .mp4 file at the path"
    },
    {
      "arg_name": "path",
      "function": "save_video_mp4",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert not isinstance(frames, str), 'The first argument should be the sequence of video frames, not the path!' | path=None",
      "transformation_code": "path=None, framerate=60, *, video_bitrate='high', height=None, width=None, show_progress=True, backend=None): | save_video_mp4(frames, path=None, framerate=60, *, video_bitrate='high', height=None, width=None, show_progress=True, backend=None) | _cv_save_video_mp4(frames, path, framerate=framerate, show_progress=show_progress, quality=video_bitrate)",
      "error_handling": "",
      "documentation": "path: the path to save the video to. Defaults to 'video.mp4'"
    },
    {
      "arg_name": "framerate",
      "function": "save_video_mp4",
      "default_value": 60,
      "usage_pattern": "simple_usage",
      "validation_code": "framerate=60 | framerate=framerate",
      "transformation_code": "framerate=60, *, video_bitrate='high', height=None, width=None, show_progress=True, backend=None): | framerate=framerate, show_progress=show_progress, quality=video_bitrate) | save_video_mp4(frames, path=None, framerate=60, *, video_bitrate='high', height=None, width=None, show_progress=True, backend=None) | _cv_save_video_mp4(frames, path, framerate=framerate, show_progress=show_progress, quality=video_bitrate)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "video_bitrate",
      "function": "save_video_mp4",
      "default_value": "high",
      "usage_pattern": "simple_usage",
      "validation_code": "quality=video_bitrate | video_bitrate=video_bitrate",
      "transformation_code": "video_bitrate='high', height=None, width=None, show_progress=True, backend=None): | video_bitrate=video_bitrate, height=height, width=width, show_progress=show_progress) | save_video_mp4(frames, path=None, framerate=60, *, video_bitrate='high', height=None, width=None, show_progress=True, backend=None) | _cv_save_video_mp4(frames, path, framerate=framerate, show_progress=show_progress, quality=video_bitrate)",
      "error_handling": "",
      "documentation": "video_bitrate: controls the quality of the output. If your backend is opencv, this parameter has no effect!"
    },
    {
      "arg_name": "height",
      "function": "save_video_mp4",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "height=None | effect!\n    height | height = None",
      "transformation_code": "height=None, width=None, show_progress=True, backend=None): | height = None if height is None else height | save_video_mp4(frames, path=None, framerate=60, *, video_bitrate='high', height=None, width=None, show_progress=True, backend=None) | VideoWriterMP4(path, framerate, video_bitrate=video_bitrate, height=height, width=width, show_progress=show_progress)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "width",
      "function": "save_video_mp4",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "width=None | width = None | width = max_width",
      "transformation_code": "width=None, show_progress=True, backend=None): | width = None if width is None else width | save_video_mp4(frames, path=None, framerate=60, *, video_bitrate='high', height=None, width=None, show_progress=True, backend=None) | VideoWriterMP4(path, framerate, video_bitrate=video_bitrate, height=height, width=width, show_progress=show_progress)",
      "error_handling": "",
      "documentation": "width: If frames have various sizes, and are given as a generator, use this to set the height and width or else it will use the first frame's height and width"
    },
    {
      "arg_name": "show_progress",
      "function": "save_video_mp4",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "show_progress=True | show_progress=show_progress | show_progress=show_progress",
      "transformation_code": "show_progress=True, backend=None): | show_progress=show_progress, quality=video_bitrate) | save_video_mp4(frames, path=None, framerate=60, *, video_bitrate='high', height=None, width=None, show_progress=True, backend=None) | _cv_save_video_mp4(frames, path, framerate=framerate, show_progress=show_progress, quality=video_bitrate)",
      "error_handling": "",
      "documentation": "show_progress: Whether to show the saving progress"
    },
    {
      "arg_name": "backend",
      "function": "save_video_mp4",
      "default_value": null,
      "usage_pattern": "equality_check,boolean_condition,none_check",
      "validation_code": "assert backend in ('ffmpeg', 'cv2'), backend | backend=None | backend = _save_video_mp4_default_backend",
      "transformation_code": "backend=None): | backend = _save_video_mp4_default_backend | save_video_mp4(frames, path=None, framerate=60, *, video_bitrate='high', height=None, width=None, show_progress=True, backend=None) | RuntimeError(\"save_video_mp4: Can't use backend=='ffmpeg' because ffmpeg is not installed. Consider setting backend=='cv2' instead? Or, if you can't change this argument, you can try running rp.r.set_save_video_mp4_default_backend('cv2')",
      "error_handling": "",
      "documentation": "backend: Defaults to 'ffmpeg'. Can also be 'cv2' if you can't install 'ffmpeg' for some reason"
    },
    {
      "arg_name": "video",
      "function": "save_video_gif_via_pil",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "assert is_video_file(video) or ends_with_any(video, '.gif', '.png') | isinstance(video, str) | video = load_video_stream",
      "transformation_code": "video = load_video_stream(video) | save_video_gif_via_pil(video, path=None, *, framerate=30) | isinstance(video, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "save_video_gif_via_pil",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "path=None | path = get_unique_copy_path | path = with_file_extension",
      "transformation_code": "path=None, *, framerate=30): | path = get_unique_copy_path('video.gif') | save_video_gif_via_pil(video, path=None, *, framerate=30) | with_file_extension(path, 'gif')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "framerate",
      "function": "save_video_gif_via_pil",
      "default_value": 30,
      "usage_pattern": "simple_usage",
      "validation_code": "framerate=30",
      "transformation_code": "framerate=30): | save_video_gif_via_pil(video, path=None, *, framerate=30) | round(1 / framerate * 1000)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "video_path",
      "function": "convert_to_gif_via_ffmpeg",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "assert isinstance(video_path, str), type(video_path) | assert number_of_lines(video_path) == 1, number_of_lines(video_path) | assert path_exists(video_path), 'r._convert_to_gif_via_ffmpeg: Input file does not exist: ' + str(video_path)[:1000]",
      "transformation_code": "convert_to_gif_via_ffmpeg(video_path, output_path=None, *, framerate=None, custom_palette=True, show_progress=True) | isinstance(video_path, str)",
      "error_handling": "",
      "documentation": "video_path (str)"
    },
    {
      "arg_name": "output_path",
      "function": "convert_to_gif_via_ffmpeg",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "output_path=None | output_path = with_file_extension | output_path = get_unique_copy_path",
      "transformation_code": "output_path=None, *, framerate=None, custom_palette=True, show_progress=True): | output_path = with_file_extension(video_path, 'gif', replace=True) | convert_to_gif_via_ffmpeg(video_path, output_path=None, *, framerate=None, custom_palette=True, show_progress=True) | get_unique_copy_path(output_path)",
      "error_handling": "",
      "documentation": "output_path (str, optional)"
    },
    {
      "arg_name": "framerate",
      "function": "convert_to_gif_via_ffmpeg",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check,type_check",
      "validation_code": "assert framerate is None or (isinstance(framerate, int) and framerate >= 1), framerate | isinstance(framerate, int) | framerate=None",
      "transformation_code": "framerate=None, custom_palette=True, show_progress=True): | framerate=12) | convert_to_gif_via_ffmpeg(video_path, output_path=None, *, framerate=None, custom_palette=True, show_progress=True) | or (isinstance(framerate, int)",
      "error_handling": "",
      "documentation": "framerate (int, optional)"
    },
    {
      "arg_name": "custom_palette",
      "function": "convert_to_gif_via_ffmpeg",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "custom_palette=True | custom_palette=False | custom_palette=False",
      "transformation_code": "custom_palette=True, show_progress=True): | custom_palette=False, the colors will be worse but it will be sometimes more than 2x smaller. | convert_to_gif_via_ffmpeg(video_path, output_path=None, *, framerate=None, custom_palette=True, show_progress=True) | print(convert_to_gif_via_ffmpeg(video_file,'doggy_without_custom_palette.gif',custom_palette=False)",
      "error_handling": "",
      "documentation": "custom_palette (bool, optional)"
    },
    {
      "arg_name": "show_progress",
      "function": "convert_to_gif_via_ffmpeg",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "show_progress=True",
      "transformation_code": "show_progress=True): | convert_to_gif_via_ffmpeg(video_path, output_path=None, *, framerate=None, custom_palette=True, show_progress=True)",
      "error_handling": "",
      "documentation": "show_progress (bool, optional)"
    },
    {
      "arg_name": "video_paths",
      "function": "convert_to_gifs_via_ffmpeg",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "video_paths = rp_glob",
      "transformation_code": "video_paths = rp_glob(video_paths) | convert_to_gifs_via_ffmpeg(video_paths, output_paths=None, *, framerate=None, custom_palette=True, show_progress=True, num_threads=None) | convert_to_gif_via_ffmpeg(video_path=bundle.video_paths, output_path=bundle.output_paths, framerate=bundle.framerate, custom_palette=custom_palette, show_progress=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "output_paths",
      "function": "convert_to_gifs_via_ffmpeg",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "output_paths=None",
      "transformation_code": "output_paths=None, *, framerate=None, custom_palette=True, show_progress=True, num_threads=None): | convert_to_gifs_via_ffmpeg(video_paths, output_paths=None, *, framerate=None, custom_palette=True, show_progress=True, num_threads=None) | convert_to_gif_via_ffmpeg(video_path=bundle.video_paths, output_path=bundle.output_paths, framerate=bundle.framerate, custom_palette=custom_palette, show_progress=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "framerate",
      "function": "convert_to_gifs_via_ffmpeg",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "framerate=None | framerate=bundle.framerate",
      "transformation_code": "framerate=None, custom_palette=True, show_progress=True, num_threads=None): | framerate=bundle.framerate, custom_palette=custom_palette, show_progress=False) | convert_to_gifs_via_ffmpeg(video_paths, output_paths=None, *, framerate=None, custom_palette=True, show_progress=True, num_threads=None) | convert_to_gif_via_ffmpeg(video_path=bundle.video_paths, output_path=bundle.output_paths, framerate=bundle.framerate, custom_palette=custom_palette, show_progress=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "custom_palette",
      "function": "convert_to_gifs_via_ffmpeg",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "custom_palette=True | custom_palette=custom_palette",
      "transformation_code": "custom_palette=True, show_progress=True, num_threads=None): | custom_palette=custom_palette, show_progress=False) | convert_to_gifs_via_ffmpeg(video_paths, output_paths=None, *, framerate=None, custom_palette=True, show_progress=True, num_threads=None) | convert_to_gif_via_ffmpeg(video_path=bundle.video_paths, output_path=bundle.output_paths, framerate=bundle.framerate, custom_palette=custom_palette, show_progress=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "show_progress",
      "function": "convert_to_gifs_via_ffmpeg",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "show_progress=True | show_progress=False | show_progress=show_progress",
      "transformation_code": "show_progress=True, num_threads=None): | show_progress=False) | convert_to_gifs_via_ffmpeg(video_paths, output_paths=None, *, framerate=None, custom_palette=True, show_progress=True, num_threads=None) | convert_to_gif_via_ffmpeg(video_path=bundle.video_paths, output_path=bundle.output_paths, framerate=bundle.framerate, custom_palette=custom_palette, show_progress=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "num_threads",
      "function": "convert_to_gifs_via_ffmpeg",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "num_threads=None | num_threads=num_threads",
      "transformation_code": "num_threads=None): | num_threads=num_threads) | convert_to_gifs_via_ffmpeg(video_paths, output_paths=None, *, framerate=None, custom_palette=True, show_progress=True, num_threads=None) | load_files(run, bundles, show_progress=show_progress, num_threads=num_threads)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "video",
      "function": "save_video",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "save_video(video, path, framerate) | save_video_webp(video, path, quality=quality, framerate=framerate)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "save_video",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "save_video(video, path, framerate) | save_video_webp(video, path, quality=quality, framerate=framerate)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "framerate",
      "function": "save_video",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "framerate=framerate",
      "transformation_code": "framerate=framerate) | save_video(video, path, framerate) | save_video_webp(video, path, quality=quality, framerate=framerate)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "video",
      "function": "encode_video_to_bytes",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "encode_video_to_bytes(video, filetype: str='.avi', framerate=30) | save_video(video, video_file, framerate=framerate)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "filetype",
      "function": "encode_video_to_bytes",
      "default_value": ".avi",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "encode_video_to_bytes(video, filetype: str='.avi', framerate=30) | temporary_file_path(filetype)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "framerate",
      "function": "encode_video_to_bytes",
      "default_value": 30,
      "usage_pattern": "simple_usage",
      "validation_code": "framerate=30 | framerate=framerate",
      "transformation_code": "framerate=30): | framerate=framerate) | encode_video_to_bytes(video, filetype: str='.avi', framerate=30) | save_video(video, video_file, framerate=framerate)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "encoded_video",
      "function": "decode_video_from_bytes",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "decode_video_from_bytes(encoded_video: bytes, filetype: str='.avi') | bytes_to_file(encoded_video, video_file)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "filetype",
      "function": "decode_video_from_bytes",
      "default_value": ".avi",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "decode_video_from_bytes(encoded_video: bytes, filetype: str='.avi') | temporary_file_path(filetype)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "video_path",
      "function": "add_audio_to_video_file",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "add_audio_to_video_file(video_path, audio_path, output_path=None) | get_unique_copy_path(with_file_name(video_path, with_file_extension(get_file_name(video_path, include_file_extension=False)",
      "error_handling": "",
      "documentation": "video_path (str)"
    },
    {
      "arg_name": "audio_path",
      "function": "add_audio_to_video_file",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "add_audio_to_video_file(video_path, audio_path, output_path=None) | fansi_print(audio_path, 'yellow')",
      "error_handling": "",
      "documentation": "audio_path (str)"
    },
    {
      "arg_name": "output_path",
      "function": "add_audio_to_video_file",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "output_path=None | output_path = get_unique_copy_path",
      "transformation_code": "output_path=None): | output_path = get_unique_copy_path(with_file_name(video_path, with_file_extension(get_file_name(video_path, include_file_extension=False) + '_with_audio', get_file_extension(video_path)))) | add_audio_to_video_file(video_path, audio_path, output_path=None) | fansi_print(output_path, 'yellow')",
      "error_handling": "try_except",
      "documentation": "output_path (str)"
    },
    {
      "arg_name": "video_path",
      "function": "change_video_file_framerate",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "change_video_file_framerate(video_path, new_framerate, output_path=None) | get_unique_copy_path(with_file_name(video_path, with_file_extension(get_file_name(video_path, include_file_extension=False)",
      "error_handling": "",
      "documentation": "video_path (str)"
    },
    {
      "arg_name": "new_framerate",
      "function": "change_video_file_framerate",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "change_video_file_framerate(video_path, new_framerate, output_path=None) | str(new_framerate)",
      "error_handling": "",
      "documentation": "new_framerate (float)"
    },
    {
      "arg_name": "output_path",
      "function": "change_video_file_framerate",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "output_path=None | output_path = get_unique_copy_path",
      "transformation_code": "output_path=None): | output_path = get_unique_copy_path(with_file_name(video_path, with_file_extension(get_file_name(video_path, include_file_extension=False) + '_' + str(new_framerate) + '_fps', get_file_extension(video_path)))) | change_video_file_framerate(video_path, new_framerate, output_path=None) | fansi_print('Video framerate changed successfully: ' + output_path, 'green')",
      "error_handling": "try_except",
      "documentation": "output_path (str)"
    },
    {
      "arg_name": "video_paths",
      "function": "change_video_file_framerates",
      "default_value": null,
      "usage_pattern": "iteration",
      "validation_code": "",
      "transformation_code": "change_video_file_framerates(video_paths, new_framerate)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "new_framerate",
      "function": "change_video_file_framerates",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "change_video_file_framerates(video_paths, new_framerate) | change_video_file_framerate(video_path, new_framerate)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "output_file",
      "function": "concat_mp4_files",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "output_file=None | output_file = with_file_name | output_file = rp.get_unique_copy_path",
      "transformation_code": "output_file=None): | output_file = with_file_name(input_files[0], 'concatenated_videos.mp4') | concat_mp4_files(*input_files, output_file=None) | get_unique_copy_path(output_file)",
      "error_handling": "try_except",
      "documentation": "output_file (str)"
    },
    {
      "arg_name": "path",
      "function": "directory_exists",
      "default_value": null,
      "usage_pattern": "method_call,type_check",
      "validation_code": "isinstance(path, str)",
      "transformation_code": "directory_exists(path) | isinstance(path, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "is_empty_folder",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "isinstance(path, str)",
      "transformation_code": "is_empty_folder(path: str) | isinstance(path, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "file_exists",
      "default_value": null,
      "usage_pattern": "method_call,type_check",
      "validation_code": "isinstance(path, str)",
      "transformation_code": "file_exists(path) | isinstance(path, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "path_exists",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "isinstance(path, str)",
      "transformation_code": "path_exists(path) | isinstance(path, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "rename_path",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "path = with_file_name | path = os.path.join",
      "transformation_code": "path = with_file_name(path, new_name, keep_extension=keep_extension) | path = os.path.join(get_path_parent(path), new_name) | rename_path(path, new_name, *, keep_extension=False) | has_file_extension(path)",
      "error_handling": "",
      "documentation": "path(\"apple/bananna/cherry.jpg\",\"coconut.png\")"
    },
    {
      "arg_name": "new_name",
      "function": "rename_path",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "rename_path(path, new_name, *, keep_extension=False) | with_file_name(path, new_name, keep_extension=keep_extension)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "keep_extension",
      "function": "rename_path",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "keep_extension=False | keep_extension=keep_extension",
      "transformation_code": "keep_extension=False): | keep_extension=keep_extension) | rename_path(path, new_name, *, keep_extension=False) | with_file_name(path, new_name, keep_extension=keep_extension)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "from_path",
      "function": "move_path",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "move_path(from_path, to_path) | path_join(to_path, get_file_name(from_path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "to_path",
      "function": "move_path",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "new_path = to_path",
      "transformation_code": "move_path(from_path, to_path) | make_parent_directory(to_path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path_a",
      "function": "swap_paths",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "path_a = get_unique_copy_path",
      "transformation_code": "path_a = get_unique_copy_path(path_a, suffix=temp_suffix) | swap_paths(path_a, path_b) | get_unique_copy_path(path_a, suffix=temp_suffix)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "path_b",
      "function": "swap_paths",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "path_b = get_unique_copy_path",
      "transformation_code": "path_b = get_unique_copy_path(path_b, suffix=temp_suffix) | swap_paths(path_a, path_b) | get_unique_copy_path(path_b, suffix=temp_suffix)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "delete_file",
      "default_value": null,
      "usage_pattern": "method_call,addition",
      "validation_code": "assert os.path.exists(path), \"r.delete_file: There is no file to delete. The path you specified, '\" + path + \"', does not exist!\" | assert file_exists(path), 'r.delete_file: The path you selected exists, but is not a file: %s' % path",
      "transformation_code": "delete_file(path, *, permanent=True, strict=True) | read_symlink(path)",
      "error_handling": "",
      "documentation": "path (str)"
    },
    {
      "arg_name": "permanent",
      "function": "delete_file",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "permanent=True | permanent=True | permanent=False",
      "transformation_code": "permanent=True, strict=True): | permanent=True, becuase when it's not it can cause your hard-drive to fill up without you expecting it (you don't normally expect to keep files when calling a function called delete file, which doesn't actually free your hard-drive when permanent=False) | delete_file(path, *, permanent=True, strict=True) | it (you don't normally expect to keep files when calling a function called delete file, which doesn't actually free your hard-drive when permanent=False)",
      "error_handling": "",
      "documentation": "permanent (bool, optional)"
    },
    {
      "arg_name": "strict",
      "function": "delete_file",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "strict=True",
      "transformation_code": "strict=True): | delete_file(path, *, permanent=True, strict=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "delete_folder",
      "default_value": null,
      "usage_pattern": "method_call,addition",
      "validation_code": "assert os.path.exists(path), \"r.delete_folder: There is no folder to delete. The path you specified, '\" + path + \"', does not exist!\" | assert folder_exists(path), 'r.delete_folder: The path you selected exists, but is not a folder: %s' % path | assert is_empty_folder(path), 'delete_folder: Cannot delete folder because its not empty and recursive==False. Folder: ' + repr(path)",
      "transformation_code": "delete_folder(path, *, recursive=True, permanent=True) | exists(path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "recursive",
      "function": "delete_folder",
      "default_value": true,
      "usage_pattern": "equality_check",
      "validation_code": "assert is_empty_folder(path), 'delete_folder: Cannot delete folder because its not empty and recursive==False. Folder: ' + repr(path) | recursive=True | recursive==False.",
      "transformation_code": "recursive=True, permanent=True): | recursive==False. Folder: ' + repr(path) | delete_folder(path, *, recursive=True, permanent=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "permanent",
      "function": "delete_folder",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "permanent=True | permanent=True | permanent=False",
      "transformation_code": "permanent=True): | permanent=True, becuase when it's not it can cause your hard-drive to fill up without you expecting it (you don't normally expect to keep files when calling a function called delete file, which doesn't actually free your hard-drive when permanent=False) | delete_folder(path, *, recursive=True, permanent=True) | it (you don't normally expect to keep files when calling a function called delete file, which doesn't actually free your hard-drive when permanent=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "delete_symlink",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert is_symlink(path)",
      "transformation_code": "delete_symlink(path) | is_symlink(path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "delete_path",
      "default_value": null,
      "usage_pattern": "method_call,addition",
      "validation_code": "assert os.path.exists(path), \"r.delete_path: There is no folder or file to delete. The path you specified, '\" + path + \"', does not exist!\" | assert False, 'This should be impossible...it appears that path %s exists but is neither a file nor a folder.' % path",
      "transformation_code": "delete_path(path, *, permanent=True) | exists(path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "permanent",
      "function": "delete_path",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "permanent=True | permanent=True | permanent=False",
      "transformation_code": "permanent=True): | permanent=True, becuase when it's not it can cause your hard-drive to fill up without you expecting it (you don't normally expect to keep files when calling a function called delete file, which doesn't actually free your hard-drive when permanent=False) | delete_path(path, *, permanent=True) | it (you don't normally expect to keep files when calling a function called delete file, which doesn't actually free your hard-drive when permanent=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "permanent",
      "function": "_delete_paths_helper",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "permanent=True | permanent=permanent",
      "transformation_code": "permanent=True, delete_function=delete_path, strict, show_progress): | permanent=permanent) | _delete_paths_helper(*paths, permanent=True, delete_function=delete_path, strict, show_progress) | delete_function(path, permanent=permanent)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "delete_function",
      "function": "_delete_paths_helper",
      "default_value": "<delete_path>",
      "usage_pattern": "simple_usage",
      "validation_code": "delete_function=delete_path",
      "transformation_code": "delete_function=delete_path, strict, show_progress): | _delete_paths_helper(*paths, permanent=True, delete_function=delete_path, strict, show_progress)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "strict",
      "function": "_delete_paths_helper",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "strict=strict",
      "transformation_code": "strict=strict, show_progress=show_progress) | _delete_paths_helper(*paths, permanent=True, delete_function=delete_path, strict, show_progress) | load_files(delfunc, paths, strict=strict, show_progress=show_progress)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "show_progress",
      "function": "_delete_paths_helper",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "show_progress = show_progress | show_progress=show_progress",
      "transformation_code": "show_progress = show_progress and 'eta:Deleting Paths' | show_progress=show_progress) | _delete_paths_helper(*paths, permanent=True, delete_function=delete_path, strict, show_progress) | load_files(delfunc, paths, strict=strict, show_progress=show_progress)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "permanent",
      "function": "delete_paths",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "permanent=True | permanent=permanent",
      "transformation_code": "permanent=True, strict=True, show_progress=False): | permanent=permanent, delete_function=delete_path, strict=strict, show_progress=show_progress) | delete_paths(*paths, permanent=True, strict=True, show_progress=False) | _delete_paths_helper(*paths, permanent=permanent, delete_function=delete_path, strict=strict, show_progress=show_progress)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "strict",
      "function": "delete_paths",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "strict=True | strict=strict",
      "transformation_code": "strict=True, show_progress=False): | strict=strict, show_progress=show_progress) | delete_paths(*paths, permanent=True, strict=True, show_progress=False) | _delete_paths_helper(*paths, permanent=permanent, delete_function=delete_path, strict=strict, show_progress=show_progress)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "show_progress",
      "function": "delete_paths",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "show_progress=False | show_progress=show_progress",
      "transformation_code": "show_progress=False): | show_progress=show_progress) | delete_paths(*paths, permanent=True, strict=True, show_progress=False) | _delete_paths_helper(*paths, permanent=permanent, delete_function=delete_path, strict=strict, show_progress=show_progress)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "permanent",
      "function": "delete_files",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "permanent=True | permanent=permanent",
      "transformation_code": "permanent=True, strict=True, show_progress=False): | permanent=permanent, delete_function=delete_file, strict=strict, show_progress=show_progress) | delete_files(*paths, permanent=True, strict=True, show_progress=False) | _delete_paths_helper(*paths, permanent=permanent, delete_function=delete_file, strict=strict, show_progress=show_progress)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "strict",
      "function": "delete_files",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "strict=True | strict=strict",
      "transformation_code": "strict=True, show_progress=False): | strict=strict, show_progress=show_progress) | delete_files(*paths, permanent=True, strict=True, show_progress=False) | _delete_paths_helper(*paths, permanent=permanent, delete_function=delete_file, strict=strict, show_progress=show_progress)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "show_progress",
      "function": "delete_files",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "show_progress=False | show_progress=show_progress",
      "transformation_code": "show_progress=False): | show_progress=show_progress) | delete_files(*paths, permanent=True, strict=True, show_progress=False) | _delete_paths_helper(*paths, permanent=permanent, delete_function=delete_file, strict=strict, show_progress=show_progress)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "permanent",
      "function": "delete_folders",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "permanent=True | permanent=permanent",
      "transformation_code": "permanent=True, strict=True, show_progress=False): | permanent=permanent, delete_function=delete_folders, strict=strict, show_progress=show_progress) | delete_folders(*paths, permanent=True, strict=True, show_progress=False) | _delete_paths_helper(*paths, permanent=permanent, delete_function=delete_folders, strict=strict, show_progress=show_progress)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "strict",
      "function": "delete_folders",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "strict=True | strict=strict",
      "transformation_code": "strict=True, show_progress=False): | strict=strict, show_progress=show_progress) | delete_folders(*paths, permanent=True, strict=True, show_progress=False) | _delete_paths_helper(*paths, permanent=permanent, delete_function=delete_folders, strict=strict, show_progress=show_progress)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "show_progress",
      "function": "delete_folders",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "show_progress=False | show_progress=show_progress",
      "transformation_code": "show_progress=False): | show_progress=show_progress) | delete_folders(*paths, permanent=True, strict=True, show_progress=False) | _delete_paths_helper(*paths, permanent=permanent, delete_function=delete_folders, strict=strict, show_progress=show_progress)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "from_path",
      "function": "copy_path",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert path_exists(from_path), 'Cannot copy from from_path=' + repr(from_path) + ' because that path does not exist'",
      "transformation_code": "from_path=' + repr(from_path) + ' because that path does not exist' | copy_path(from_path, to_path, *, extract=False) | path_exists(from_path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "to_path",
      "function": "copy_path",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "copy_path(from_path, to_path, *, extract=False) | copy_directory(from_path, to_path, extract=extract)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "extract",
      "function": "copy_path",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "extract=False | extract=extract",
      "transformation_code": "extract=False): | extract=extract) | copy_path(from_path, to_path, *, extract=False) | copy_directory(from_path, to_path, extract=extract)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "from_path",
      "function": "copy_to_folder",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "copy_to_folder(from_path, to_path) | path_join(to_path, get_path_name(from_path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "to_path",
      "function": "copy_to_folder",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert is_a_folder(to_path), 'to_path must be a folder, but ' + repr(to_path) + ' either does not exist or is not a folder'",
      "transformation_code": "copy_to_folder(from_path, to_path) | is_a_folder(to_path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "from_path",
      "function": "copy_directory",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert path_exists(from_path), 'rp.copy_directory error: Cant copy from path ' + repr(from_path) + ' because that path does not exist' | assert is_a_directory(from_path), 'rp.copy_directory error: from_path=' + repr(from_path) + ' is not a directory, and this function is specifically meant to copy directories.' | assert not file_exists(to_path), 'rp.copy_directory error: Cant copy a directory into a file. from_path=' + repr(from_path) + ' is a directory and to_path=' + repr(to_path) + ' is a file.'",
      "transformation_code": "from_path=' + repr(from_path) + ' is not a directory, and this function is specifically meant to copy directories.' | from_path=' + repr(from_path) + ' is a directory and to_path=' + repr(to_path) + ' is a file.' | copy_directory(from_path, to_path, *, extract=False, follow_symlinks=False) | path_exists(from_path)",
      "error_handling": "",
      "documentation": "from_path (str)"
    },
    {
      "arg_name": "to_path",
      "function": "copy_directory",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert not file_exists(to_path), 'rp.copy_directory error: Cant copy a directory into a file. from_path=' + repr(from_path) + ' is a directory and to_path=' + repr(to_path) + ' is a file.' | assert not folder_exists(to_path), 'rp.copy_directory error: Will not overwrite existing folder (extract is False). from_path=' + repr(from_path) + ' is a directory and to_path=' + repr(to_path) + ' is also already a directory.' | assert not file_exists(to_path), 'rp.copy_directory error: Cant copy a directory into a file. from_path=' + repr(from_path) + ' is a directory and to_path=' + repr(to_path) + ' is a file.'",
      "transformation_code": "to_path = path_join(to_path, get_directory_name(from_path)) | to_path=' + repr(to_path) + ' is a file.' | copy_directory(from_path, to_path, *, extract=False, follow_symlinks=False) | is_a_folder(to_path)",
      "error_handling": "",
      "documentation": "to_path (str)"
    },
    {
      "arg_name": "extract",
      "function": "copy_directory",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "assert not folder_exists(to_path), 'rp.copy_directory error: Will not overwrite existing folder (extract is False). from_path=' + repr(from_path) + ' is a directory and to_path=' + repr(to_path) + ' is also already a directory.' | extract=False",
      "transformation_code": "extract=False, follow_symlinks=False): | copy_directory(from_path, to_path, *, extract=False, follow_symlinks=False) | folder (extract is False)",
      "error_handling": "",
      "documentation": "extract (bool, optional)"
    },
    {
      "arg_name": "follow_symlinks",
      "function": "copy_directory",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "follow_symlinks=False | symlinks=follow_symlinks",
      "transformation_code": "follow_symlinks=False): | copy_directory(from_path, to_path, *, extract=False, follow_symlinks=False) | copytree(from_path, to_path, symlinks=follow_symlinks, dirs_exist_ok=True)",
      "error_handling": "",
      "documentation": "follow_symlinks (bool, optional)"
    },
    {
      "arg_name": "from_path",
      "function": "copy_file",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert file_exists(from_path), 'copy_file copies a file from from_path to to_path, but from_path=' + repr(from_path) + ' is not a file'",
      "transformation_code": "from_path=' + repr(from_path) + ' is not a file' | copy_file(from_path, to_path) | file_exists(from_path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "to_path",
      "function": "copy_file",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert file_exists(from_path), 'copy_file copies a file from from_path to to_path, but from_path=' + repr(from_path) + ' is not a file' | to_path = path_join",
      "transformation_code": "to_path = path_join(to_path, get_file_name(from_path)) | copy_file(from_path, to_path) | is_a_directory(to_path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "from_paths",
      "function": "copy_paths",
      "default_value": null,
      "usage_pattern": "length_check,iteration",
      "validation_code": "assert len(set(to_paths)) == len(set(from_paths)), 'Must be a 1-to-1 mapping from sources to destinations' | assert len(to_paths) == len(from_paths), 'Must be a 1-to-1 mapping from sources to destinations' | from_paths = rp_glob",
      "transformation_code": "from_paths = rp_glob(from_paths) | copy_paths(from_paths, to_paths, *, extract=False, skip_existing=False, follow_symlinks=False, num_threads: int=None, show_progress=False, strict=True, lazy=False) | rp_glob(from_paths)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "to_paths",
      "function": "copy_paths",
      "default_value": null,
      "usage_pattern": "length_check,iteration,type_check",
      "validation_code": "assert is_a_folder(to_paths) | assert len(set(to_paths)) == len(set(from_paths)), 'Must be a 1-to-1 mapping from sources to destinations' | assert is_iterable(to_paths)",
      "transformation_code": "to_paths = [path_join(to_paths, get_path_name(path)) for path in from_paths] | copy_paths(from_paths, to_paths, *, extract=False, skip_existing=False, follow_symlinks=False, num_threads: int=None, show_progress=False, strict=True, lazy=False) | isinstance(to_paths, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "extract",
      "function": "copy_paths",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "extract=False | extract=extract",
      "transformation_code": "extract=False, skip_existing=False, follow_symlinks=False, num_threads: int=None, show_progress=False, strict=True, lazy=False): | extract=extract) | copy_paths(from_paths, to_paths, *, extract=False, skip_existing=False, follow_symlinks=False, num_threads: int=None, show_progress=False, strict=True, lazy=False) | copy_path(from_path, to_path, extract=extract)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "skip_existing",
      "function": "copy_paths",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "skip_existing=False",
      "transformation_code": "skip_existing=False, follow_symlinks=False, num_threads: int=None, show_progress=False, strict=True, lazy=False): | copy_paths(from_paths, to_paths, *, extract=False, skip_existing=False, follow_symlinks=False, num_threads: int=None, show_progress=False, strict=True, lazy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "follow_symlinks",
      "function": "copy_paths",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "follow_symlinks=False",
      "transformation_code": "follow_symlinks=False, num_threads: int=None, show_progress=False, strict=True, lazy=False): | copy_paths(from_paths, to_paths, *, extract=False, skip_existing=False, follow_symlinks=False, num_threads: int=None, show_progress=False, strict=True, lazy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "num_threads",
      "function": "copy_paths",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "num_threads=num_threads",
      "transformation_code": "num_threads=num_threads, show_progress=show_progress, strict=strict, lazy=lazy) | copy_paths(from_paths, to_paths, *, extract=False, skip_existing=False, follow_symlinks=False, num_threads: int=None, show_progress=False, strict=True, lazy=False) | load_files(do_copy, pairs, num_threads=num_threads, show_progress=show_progress, strict=strict, lazy=lazy)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "show_progress",
      "function": "copy_paths",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "show_progress=False | show_progress=show_progress",
      "transformation_code": "show_progress=False, strict=True, lazy=False): | show_progress = 'eta:Copying paths' | copy_paths(from_paths, to_paths, *, extract=False, skip_existing=False, follow_symlinks=False, num_threads: int=None, show_progress=False, strict=True, lazy=False) | load_files(do_copy, pairs, num_threads=num_threads, show_progress=show_progress, strict=strict, lazy=lazy)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "strict",
      "function": "copy_paths",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "strict=True | strict=strict",
      "transformation_code": "strict=True, lazy=False): | strict=strict, lazy=lazy) | copy_paths(from_paths, to_paths, *, extract=False, skip_existing=False, follow_symlinks=False, num_threads: int=None, show_progress=False, strict=True, lazy=False) | load_files(do_copy, pairs, num_threads=num_threads, show_progress=show_progress, strict=strict, lazy=lazy)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "lazy",
      "function": "copy_paths",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "lazy=False | lazy=lazy",
      "transformation_code": "lazy=False): | lazy=lazy) | copy_paths(from_paths, to_paths, *, extract=False, skip_existing=False, follow_symlinks=False, num_threads: int=None, show_progress=False, strict=True, lazy=False) | load_files(do_copy, pairs, num_threads=num_threads, show_progress=show_progress, strict=strict, lazy=lazy)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path_or_url",
      "function": "get_path_parent",
      "default_value": null,
      "usage_pattern": "indexing",
      "validation_code": "path_or_url = get_path_parent | suffix = path_or_url",
      "transformation_code": "path_or_url = get_path_parent(path_or_url) | get_path_parent(path_or_url: str, levels=1) | get_path_parent(path_or_url)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "levels",
      "function": "get_path_parent",
      "default_value": 1,
      "usage_pattern": "equality_check,boolean_condition",
      "validation_code": "assert levels >= 0 | levels=1 | levels >= 0",
      "transformation_code": "levels=1): | levels == 0: | get_path_parent(path_or_url: str, levels=1) | range(levels)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "levels",
      "function": "get_paths_parents",
      "default_value": 1,
      "usage_pattern": "simple_usage",
      "validation_code": "levels=1",
      "transformation_code": "levels=1): | get_paths_parents(*paths_or_urls, levels=1) | get_path_parent(path, levels)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "make_directory",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert cursor.is_dir(), 'make_directory: failed to make directory at path ' + repr(path) + ' because ' + repr(cursor) + ' is the path of an existing file that is not a directory'",
      "transformation_code": "make_directory(path) | directory_exists(path)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "make_parent_directory",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "make_parent_directory(path) | make_directory(get_parent_directory(path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "take_directory",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "path = make_directory",
      "transformation_code": "path = make_directory(path) | take_directory(path) | make_directory(path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "directory",
      "function": "delete_all_paths_in_directory",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert directory_exists(directory)",
      "transformation_code": "delete_all_paths_in_directory(directory, *, permanent=True, include_files=True, include_folders=True, recursive=False) | directory_exists(directory)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "permanent",
      "function": "delete_all_paths_in_directory",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "permanent=True | permanent=permanent",
      "transformation_code": "permanent=True, include_files=True, include_folders=True, recursive=False): | permanent=permanent) | delete_all_paths_in_directory(directory, *, permanent=True, include_files=True, include_folders=True, recursive=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "include_files",
      "function": "delete_all_paths_in_directory",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "include_files=True | include_files=include_files",
      "transformation_code": "include_files=True, include_folders=True, recursive=False): | include_files=include_files), permanent=permanent) | delete_all_paths_in_directory(directory, *, permanent=True, include_files=True, include_folders=True, recursive=False) | delete_paths(get_all_paths(directory, include_folders=include_folders, include_files=include_files)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "include_folders",
      "function": "delete_all_paths_in_directory",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "include_folders=True | include_folders=include_folders",
      "transformation_code": "include_folders=True, recursive=False): | include_folders=include_folders, include_files=include_files), permanent=permanent) | delete_all_paths_in_directory(directory, *, permanent=True, include_files=True, include_folders=True, recursive=False) | delete_paths(get_all_paths(directory, include_folders=include_folders, include_files=include_files)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "recursive",
      "function": "delete_all_paths_in_directory",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "recursive=False",
      "transformation_code": "recursive=False): | delete_all_paths_in_directory(directory, *, permanent=True, include_files=True, include_folders=True, recursive=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "directory",
      "function": "delete_all_files_in_directory",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert directory_exists(directory), 'No such directory exists: ' + repr(directory)",
      "transformation_code": "delete_all_files_in_directory(directory, *, recursive=False, permanent=True) | directory_exists(directory)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "recursive",
      "function": "delete_all_files_in_directory",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "recursive=False | recursive=recursive",
      "transformation_code": "recursive=False, permanent=True): | recursive=recursive, include_folders=False, include_files=True) | delete_all_files_in_directory(directory, *, recursive=False, permanent=True) | delete_all_paths_in_directory(directory, permanent=permanent, recursive=recursive, include_folders=False, include_files=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "permanent",
      "function": "delete_all_files_in_directory",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "permanent=True | permanent=permanent",
      "transformation_code": "permanent=True): | permanent=permanent, recursive=recursive, include_folders=False, include_files=True) | delete_all_files_in_directory(directory, *, recursive=False, permanent=True) | delete_all_paths_in_directory(directory, permanent=permanent, recursive=recursive, include_folders=False, include_files=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "show_progress",
      "function": "path_join",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "show_progress=False",
      "transformation_code": "show_progress=False, lazy=False): | path_join(*paths, show_progress=False, lazy=False) | print('rp.path_join: show_progress disabled because not all path factors have lengths and eta needs a length right now (Jun 10 2025)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "lazy",
      "function": "path_join",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "lazy=False",
      "transformation_code": "lazy=False): | path_join(*paths, show_progress=False, lazy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "path_split",
      "default_value": null,
      "usage_pattern": "boolean_condition,indexing,method_call,type_check",
      "validation_code": "assert isinstance(path, str) | isinstance(path, str) | 21bd83bc0315\n        >>> path",
      "transformation_code": "path_split(path) | starts_with_any(path, _url_prefixes)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "get_unique_copy_path",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "assert isinstance(path, str), type(path) | isinstance(path, str) | new_path = path",
      "transformation_code": "path = path_join(folder, new_file) | path = path | get_unique_copy_path(path: str, *, suffix: str='_copy%i') | isinstance(path, str)",
      "error_handling": "",
      "documentation": "path : str"
    },
    {
      "arg_name": "suffix",
      "function": "get_unique_copy_path",
      "default_value": "_copy%i",
      "usage_pattern": "type_check",
      "validation_code": "assert isinstance(suffix, str), type(suffix) | isinstance(suffix, str) | new_suffix = suffix",
      "transformation_code": "suffix = suffix % unguessable_int | suffix = new_suffix.replace(str(unguessable_int), '') | get_unique_copy_path(path: str, *, suffix: str='_copy%i') | isinstance(suffix, str)",
      "error_handling": "try_except",
      "documentation": "suffix : str, optional"
    },
    {
      "arg_name": "video_path",
      "function": "get_cutscene_frame_numbers",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "video_path=download_youtube_video | video_path = get_absolute_path",
      "transformation_code": "video_path=download_youtube_video('https://www.youtube.com/watch?v=K5qACexzwOI') | video_path = get_absolute_path(video_path) | get_cutscene_frame_numbers(video_path, *, use_cache=False) | get_cutscene_frame_numbers(video_path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "use_cache",
      "function": "get_cutscene_frame_numbers",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "use_cache=False",
      "transformation_code": "use_cache=False): | get_cutscene_frame_numbers(video_path, *, use_cache=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "video",
      "function": "remove_duplicate_frames",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "video = eta",
      "transformation_code": "video = eta(video, title='rp.remove_duplicate_frames') | remove_duplicate_frames(video, *, lazy=False, show_progress=False, as_indices=False) | enumerate(iter(video)",
      "error_handling": "try_except",
      "documentation": "video: np.ndarray of shape (T, H, W, C) or generator of frames"
    },
    {
      "arg_name": "lazy",
      "function": "remove_duplicate_frames",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "lazy=False | lazy=True | lazy=False",
      "transformation_code": "lazy=False, show_progress=False, as_indices=False): | lazy=True) | remove_duplicate_frames(video, *, lazy=False, show_progress=False, as_indices=False) | frames (if lazy=True)",
      "error_handling": "",
      "documentation": "lazy: bool, if True, returns a generator yielding frames one by one,"
    },
    {
      "arg_name": "show_progress",
      "function": "remove_duplicate_frames",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "show_progress=False",
      "transformation_code": "show_progress=False, as_indices=False): | remove_duplicate_frames(video, *, lazy=False, show_progress=False, as_indices=False)",
      "error_handling": "",
      "documentation": "show_progress: If True, will show the ETA for calculation"
    },
    {
      "arg_name": "as_indices",
      "function": "remove_duplicate_frames",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "as_indices=False",
      "transformation_code": "as_indices=False): | remove_duplicate_frames(video, *, lazy=False, show_progress=False, as_indices=False)",
      "error_handling": "",
      "documentation": "as_indices: If True, returns a series of integers indicating the frame numbers"
    },
    {
      "arg_name": "message",
      "function": "send_text_message",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "message = client.messages.create | body=message",
      "transformation_code": "message = client.messages.create(body=message, from_='+' + str(from_number), to='+' + number) | send_text_message(message, number) | create(body=message, from_='+' + str(from_number)",
      "error_handling": "",
      "documentation": "message('Hello, World!',15436781234)"
    },
    {
      "arg_name": "number",
      "function": "send_text_message",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "number = str",
      "transformation_code": "number = '16313052383' | number = str(number) | send_text_message(message, number) | str(number)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "shift_image",
      "default_value": null,
      "usage_pattern": "indexing",
      "validation_code": "assert is_image(image) | image=load_image | image=cv_resize_image",
      "transformation_code": "image=load_image('https://upload.wikimedia.org/wikipedia/en/7/7d/Lenna_%28test_image%29.png') | image=cv_resize_image(image,(128,128)) | shift_image(image, x=0, y=0, *, allow_growth=True) | cv_resize_image(crop_image_zeros(load_image('https://www.freeiconspng.com/download/49400')",
      "error_handling": "",
      "documentation": "image(crop_image_zeros(load_image('https"
    },
    {
      "arg_name": "x",
      "function": "shift_image",
      "default_value": 0,
      "usage_pattern": "boolean_condition",
      "validation_code": "x=0 | x=random_int | x=random_int",
      "transformation_code": "x=0, y=0, *, allow_growth=True): | x=random_int(-sticker_width,background_width+sticker_width) | shift_image(image, x=0, y=0, *, allow_growth=True) | load_image('https://i.natgeofe.com/n/c9107b46-78b1-4394-988d-53927646c72b/1095_3x2.jpg')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "y",
      "function": "shift_image",
      "default_value": 0,
      "usage_pattern": "simple_usage",
      "validation_code": "y=0 | y=random_int | y=random_int",
      "transformation_code": "y=0, *, allow_growth=True): | y=random_int(-sticker_height,background_height+sticker_height) | shift_image(image, x=0, y=0, *, allow_growth=True) | shift_image(sticker,shift_x,shift_y)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "allow_growth",
      "function": "shift_image",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "allow_growth=True | allow_growth=False",
      "transformation_code": "allow_growth=True): | allow_growth=False) | shift_image(image, x=0, y=0, *, allow_growth=True) | shift_image(s,x,y,allow_growth=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "roll_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "image = load_image | image=resize_image_to_fit | image=as_float_image",
      "transformation_code": "image = load_image('https://images.unsplash.com/photo-1507146426996-ef05306b995a?fm=jpg&q=60&w=3000&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8Mnx8cHVwcHl8ZW58MHx8MHx8fDA%3D',use_cache=True) | image=resize_image_to_fit(image,512,512) | roll_image(image, dx=0, dy=0, interp='nearest') | load_image('https://images.unsplash.com/photo-1507146426996-ef05306b995a?fm=jpg&q=60&w=3000&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8Mnx8cHVwcHl8ZW58MHx8MHx8fDA%3D',use_cache=True)",
      "error_handling": "",
      "documentation": "image : numpy.ndarray"
    },
    {
      "arg_name": "dx",
      "function": "roll_image",
      "default_value": 0,
      "usage_pattern": "simple_usage",
      "validation_code": "dx=0 | dx = radius | dx=x",
      "transformation_code": "dx=0, dy=0, interp='nearest'): | dx = radius * np.cos(t) | roll_image(image, dx=0, dy=0, interp='nearest') | zip(dx, dy)",
      "error_handling": "",
      "documentation": "dx : float"
    },
    {
      "arg_name": "dy",
      "function": "roll_image",
      "default_value": 0,
      "usage_pattern": "simple_usage",
      "validation_code": "dy=0 | dy = radius | dy=y",
      "transformation_code": "dy=0, interp='nearest'): | dy = radius * np.sin(t) | roll_image(image, dx=0, dy=0, interp='nearest') | zip(dx, dy)",
      "error_handling": "",
      "documentation": "dy : float"
    },
    {
      "arg_name": "interp",
      "function": "roll_image",
      "default_value": "nearest",
      "usage_pattern": "equality_check,boolean_condition",
      "validation_code": "interp=interp",
      "transformation_code": "interp='nearest'): | interp='bilinear') | roll_image(image, dx=0, dy=0, interp='nearest') | roll_image(image, dx=x, dy=y, interp='bilinear')",
      "error_handling": "",
      "documentation": "interp : str, optional"
    },
    {
      "arg_name": "image",
      "function": "crop_image",
      "default_value": null,
      "usage_pattern": "indexing,addition",
      "validation_code": "assert is_image(image) | assert (image_height, image_width) == image.shape[:2] | image = as_numpy_image",
      "transformation_code": "image = as_numpy_image(image, copy=copy) | crop_image(image, height: int=None, width: int=None, origin=None, copy=False) | untouched\n        (This means you can crop an image only by height, for example, without having to manually specify its width)",
      "error_handling": "",
      "documentation": "image('https"
    },
    {
      "arg_name": "height",
      "function": "crop_image",
      "default_value": null,
      "usage_pattern": "equality_check,boolean_condition,none_check,addition",
      "validation_code": "assert height >= 0 and width >= 0, \"Images can't have a negative height or width\" | height = get_image_height | height = image_height",
      "transformation_code": "height = get_image_height(image) | height = image_height | crop_image(image, height: int=None, width: int=None, origin=None, copy=False) | untouched\n        (This means you can crop an image only by height, for example, without having to manually specify its width)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "width",
      "function": "crop_image",
      "default_value": null,
      "usage_pattern": "equality_check,boolean_condition,none_check,addition",
      "validation_code": "assert height >= 0 and width >= 0, \"Images can't have a negative height or width\" | width = get_image_width | width = image_width",
      "transformation_code": "width = get_image_width(image) | width = image_width | crop_image(image, height: int=None, width: int=None, origin=None, copy=False) | untouched\n        (This means you can crop an image only by height, for example, without having to manually specify its width)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "origin",
      "function": "crop_image",
      "default_value": null,
      "usage_pattern": "equality_check,boolean_condition,none_check",
      "validation_code": "assert origin in origins, 'Invalid origin: %s. Please select from %s' % (repr(origin), repr(origins)) | origin=None",
      "transformation_code": "origin=None, copy=False): | origin = 'top left' | crop_image(image, height: int=None, width: int=None, origin=None, copy=False) | repr(origin)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "copy",
      "function": "crop_image",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "copy=False | copy=copy",
      "transformation_code": "copy=False): | copy=copy) | crop_image(image, height: int=None, width: int=None, origin=None, copy=False) | as_numpy_image(image, copy=copy)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "images",
      "function": "crop_images",
      "default_value": null,
      "usage_pattern": "length_check,iteration",
      "validation_code": "",
      "transformation_code": "crop_images(images, height: int=None, width: int=None, origin='top left', *, show_progress=False, lazy=False) | eta(output, 'rp.crop_images', length=len(images)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "height",
      "function": "crop_images",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "height=height",
      "transformation_code": "height=height, width=width, origin=origin) for image in images) | crop_images(images, height: int=None, width: int=None, origin='top left', *, show_progress=False, lazy=False) | crop_image(image, height=height, width=width, origin=origin)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "width",
      "function": "crop_images",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "width=width",
      "transformation_code": "width=width, origin=origin) for image in images) | crop_images(images, height: int=None, width: int=None, origin='top left', *, show_progress=False, lazy=False) | crop_image(image, height=height, width=width, origin=origin)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "origin",
      "function": "crop_images",
      "default_value": "top left",
      "usage_pattern": "simple_usage",
      "validation_code": "origin=origin",
      "transformation_code": "origin='top left', *, show_progress=False, lazy=False): | origin=origin) for image in images) | crop_images(images, height: int=None, width: int=None, origin='top left', *, show_progress=False, lazy=False) | crop_image(image, height=height, width=width, origin=origin)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "show_progress",
      "function": "crop_images",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "show_progress=False",
      "transformation_code": "show_progress=False, lazy=False): | crop_images(images, height: int=None, width: int=None, origin='top left', *, show_progress=False, lazy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "lazy",
      "function": "crop_images",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "lazy=False",
      "transformation_code": "lazy=False): | crop_images(images, height: int=None, width: int=None, origin='top left', *, show_progress=False, lazy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "videos",
      "function": "crop_videos",
      "default_value": null,
      "usage_pattern": "iteration",
      "validation_code": "",
      "transformation_code": "crop_videos(videos, height: int=None, width: int=None, origin='top left', *, show_progress=False, lazy=False, lazy_frames=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "height",
      "function": "crop_videos",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "height=height",
      "transformation_code": "height=height, width=width, origin=origin, lazy=lazy_frames) for video in videos) | crop_videos(videos, height: int=None, width: int=None, origin='top left', *, show_progress=False, lazy=False, lazy_frames=False) | crop_images(video, height=height, width=width, origin=origin, lazy=lazy_frames)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "width",
      "function": "crop_videos",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "width=width",
      "transformation_code": "width=width, origin=origin, lazy=lazy_frames) for video in videos) | crop_videos(videos, height: int=None, width: int=None, origin='top left', *, show_progress=False, lazy=False, lazy_frames=False) | crop_images(video, height=height, width=width, origin=origin, lazy=lazy_frames)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "origin",
      "function": "crop_videos",
      "default_value": "top left",
      "usage_pattern": "simple_usage",
      "validation_code": "origin=origin",
      "transformation_code": "origin='top left', *, show_progress=False, lazy=False, lazy_frames=False): | origin=origin, lazy=lazy_frames) for video in videos) | crop_videos(videos, height: int=None, width: int=None, origin='top left', *, show_progress=False, lazy=False, lazy_frames=False) | crop_images(video, height=height, width=width, origin=origin, lazy=lazy_frames)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "show_progress",
      "function": "crop_videos",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "show_progress=False",
      "transformation_code": "show_progress=False, lazy=False, lazy_frames=False): | crop_videos(videos, height: int=None, width: int=None, origin='top left', *, show_progress=False, lazy=False, lazy_frames=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "lazy",
      "function": "crop_videos",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "lazy=False | lazy=lazy_frames",
      "transformation_code": "lazy=False, lazy_frames=False): | lazy=lazy_frames) for video in videos) | crop_videos(videos, height: int=None, width: int=None, origin='top left', *, show_progress=False, lazy=False, lazy_frames=False) | crop_images(video, height=height, width=width, origin=origin, lazy=lazy_frames)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "lazy_frames",
      "function": "crop_videos",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "lazy_frames=False | lazy=lazy_frames",
      "transformation_code": "lazy_frames=False): | crop_videos(videos, height: int=None, width: int=None, origin='top left', *, show_progress=False, lazy=False, lazy_frames=False) | crop_images(video, height=height, width=width, origin=origin, lazy=lazy_frames)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "videos",
      "function": "crop_videos_to_min_size",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "crop_videos_to_min_size(videos, origin='top left', *, show_progress=False, lazy=False, lazy_frames=False) | get_min_video_dimensions(videos)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "origin",
      "function": "crop_videos_to_min_size",
      "default_value": "top left",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "origin='top left', *, show_progress=False, lazy=False, lazy_frames=False): | crop_videos_to_min_size(videos, origin='top left', *, show_progress=False, lazy=False, lazy_frames=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "show_progress",
      "function": "crop_videos_to_min_size",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "show_progress=False",
      "transformation_code": "show_progress=False, lazy=False, lazy_frames=False): | crop_videos_to_min_size(videos, origin='top left', *, show_progress=False, lazy=False, lazy_frames=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "lazy",
      "function": "crop_videos_to_min_size",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "lazy=False",
      "transformation_code": "lazy=False, lazy_frames=False): | crop_videos_to_min_size(videos, origin='top left', *, show_progress=False, lazy=False, lazy_frames=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "lazy_frames",
      "function": "crop_videos_to_min_size",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "lazy_frames=False",
      "transformation_code": "lazy_frames=False): | crop_videos_to_min_size(videos, origin='top left', *, show_progress=False, lazy=False, lazy_frames=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "videos",
      "function": "crop_videos_to_max_size",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "crop_videos_to_max_size(videos, origin='top left', *, show_progress=False, lazy=False, lazy_frames=False) | get_max_video_dimensions(videos)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "origin",
      "function": "crop_videos_to_max_size",
      "default_value": "top left",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "origin='top left', *, show_progress=False, lazy=False, lazy_frames=False): | crop_videos_to_max_size(videos, origin='top left', *, show_progress=False, lazy=False, lazy_frames=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "show_progress",
      "function": "crop_videos_to_max_size",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "show_progress=False",
      "transformation_code": "show_progress=False, lazy=False, lazy_frames=False): | crop_videos_to_max_size(videos, origin='top left', *, show_progress=False, lazy=False, lazy_frames=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "lazy",
      "function": "crop_videos_to_max_size",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "lazy=False",
      "transformation_code": "lazy=False, lazy_frames=False): | crop_videos_to_max_size(videos, origin='top left', *, show_progress=False, lazy=False, lazy_frames=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "lazy_frames",
      "function": "crop_videos_to_max_size",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "lazy_frames=False",
      "transformation_code": "lazy_frames=False): | crop_videos_to_max_size(videos, origin='top left', *, show_progress=False, lazy=False, lazy_frames=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "crop_image_zeros",
      "default_value": null,
      "usage_pattern": "indexing",
      "validation_code": "assert output in 'image bounds'.split(), 'output is a string indicating what the output type is - it can be either image or bounds but you gave type ' + str(type(output)) + ' ' + str(output) | assert is_image(image), 'Error: input is not an image as defined by rp.is_image()' | assert False, 'crop_image_zeros cannot handle this image type and this function needs to be updated'",
      "transformation_code": "image = np.array([[0, 0, 0, 0], | image = crop_image_zeros(image, output='image') | crop_image_zeros(image, *, output='image') | crop_image_zeros(image, output='image')",
      "error_handling": "",
      "documentation": "image : ndarray"
    },
    {
      "arg_name": "output",
      "function": "crop_image_zeros",
      "default_value": "image",
      "usage_pattern": "equality_check,boolean_condition",
      "validation_code": "assert output in 'image bounds'.split(), 'output is a string indicating what the output type is - it can be either image or bounds but you gave type ' + str(type(output)) + ' ' + str(output)",
      "transformation_code": "output='image'): | output='image') | crop_image_zeros(image, *, output='image') | crop_image_zeros(image, output='image')",
      "error_handling": "",
      "documentation": "output : str, optional"
    },
    {
      "arg_name": "contour",
      "function": "cv_contour_to_segment",
      "default_value": null,
      "usage_pattern": "boolean_condition,method_call,length_check",
      "validation_code": "contour = as_complex_vector",
      "transformation_code": "contour = as_complex_vector(contour) | cv_contour_to_segment(contour) | self (AKA the reverse of the contour)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "points",
      "function": "whiten_points_covariance",
      "default_value": null,
      "usage_pattern": "indexing",
      "validation_code": "assert len(points.shape) == 2, 'Input should be a matrix, aka a list of points. But your input has shape ' + str(points.shape) | points=np.random.randn | points=apply_affine",
      "transformation_code": "points=np.random.randn(1000,2) | points=apply_affine(points,rotation_affine_2d(70))#Rotate the stretched distrubition | whiten_points_covariance(points) | apply_affine(points,rotation_affine_2d(70)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "string",
      "function": "visible_string_ljust",
      "default_value": null,
      "usage_pattern": "addition",
      "validation_code": "",
      "transformation_code": "visible_string_ljust(string, width, fillchar=' ') | max(0, width - visible_string_length(string)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "width",
      "function": "visible_string_ljust",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "width = max",
      "transformation_code": "width = max(0, width - visible_string_length(string)) | visible_string_ljust(string, width, fillchar=' ') | max(0, width - visible_string_length(string)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "fillchar",
      "function": "visible_string_ljust",
      "default_value": " ",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "fillchar=' '): | visible_string_ljust(string, width, fillchar=' ')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "string",
      "function": "visible_string_rjust",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "visible_string_rjust(string, width, fillchar=' ') | max(0, width - visible_string_length(string)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "width",
      "function": "visible_string_rjust",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "width = max",
      "transformation_code": "width = max(0, width - visible_string_length(string)) | visible_string_rjust(string, width, fillchar=' ') | max(0, width - visible_string_length(string)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "fillchar",
      "function": "visible_string_rjust",
      "default_value": " ",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "fillchar=' '): | visible_string_rjust(string, width, fillchar=' ')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "string",
      "function": "visible_string_center",
      "default_value": null,
      "usage_pattern": "addition",
      "validation_code": "",
      "transformation_code": "visible_string_center(string, width, fillchar=' ') | max(0, width - visible_string_length(string)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "width",
      "function": "visible_string_center",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "width = max",
      "transformation_code": "width = max(0, width - visible_string_length(string)) | visible_string_center(string, width, fillchar=' ') | max(0, width - visible_string_length(string)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "fillchar",
      "function": "visible_string_center",
      "default_value": " ",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "fillchar=' '): | visible_string_center(string, width, fillchar=' ')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "string",
      "function": "make_string_rectangular",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert len(fillchar) == 1, 'fillchar should be a length 1 string, but got fillchar=' + repr(fillchar) | width = string",
      "transformation_code": "make_string_rectangular(string, align='left', fillchar=' ') | line_split(string)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "align",
      "function": "make_string_rectangular",
      "default_value": "left",
      "usage_pattern": "simple_usage",
      "validation_code": "assert align in align_methods, 'String alignment must be left, right or center, but got align=' + repr(align) | align_method = align",
      "transformation_code": "align='left', fillchar=' '): | align=' + repr(align) | make_string_rectangular(string, align='left', fillchar=' ') | repr(align)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "fillchar",
      "function": "make_string_rectangular",
      "default_value": " ",
      "usage_pattern": "length_check",
      "validation_code": "assert len(fillchar) == 1, 'fillchar should be a length 1 string, but got fillchar=' + repr(fillchar)",
      "transformation_code": "fillchar=' '): | fillchar='-') | make_string_rectangular(string, align='left', fillchar=' ') | make_string_rectangular(s,'right',fillchar='-')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "string",
      "function": "string_is_rectangular",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "max_line_length = string",
      "transformation_code": "string_is_rectangular(string) | line_split(string)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "rectangularize",
      "function": "horizontally_concatenated_strings",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "rectangularize=False | rectangularize=False | rectangularize=True",
      "transformation_code": "rectangularize=False, fillchar=' '): | rectangularize=False) | horizontally_concatenated_strings(*strings, rectangularize=False, fillchar=' ') | horizontally_concatenated_strings('Why\nHello\nThere!','My\nName\nIs\nBob','Pleased\nTo\nMeet\nYou!',rectangularize=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "fillchar",
      "function": "horizontally_concatenated_strings",
      "default_value": " ",
      "usage_pattern": "simple_usage",
      "validation_code": "fillchar=fillchar",
      "transformation_code": "fillchar=' '): | fillchar=fillchar)) | horizontally_concatenated_strings(*strings, rectangularize=False, fillchar=' ')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "string",
      "function": "wrap_string_to_width",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "wrap_string_to_width(string, width) | line_split(string)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "width",
      "function": "wrap_string_to_width",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert width >= 0, 'Cannot have negative width' | width >= 0",
      "transformation_code": "wrap_string_to_width(string, width) | split_into_sublists(line, width, strict=False, keep_remainder=True)",
      "error_handling": "",
      "documentation": "width('Hello"
    },
    {
      "arg_name": "string",
      "function": "bordered_string",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "bordered_string(string, *, weight=1, width=None, height=None, left=None, right=None, bottom=None, top=None, fill=' ', width_fill=None, height_fill=None, left_fill=None, right_fill=None, bottom_fill=None, top_fill=None, bottom_right_fill=None, bottom_left_fill=None, top_right_fill=None, top_left_fill=None) | print(bordered_string('Hello\nWorld!',width_fill='\u2502',height_fill='\u2500',top_right_fill='\u2510',top_left_fill='\u250c',bottom_left_fill='\u2514',bottom_right_fill='\u2518')",
      "error_handling": "",
      "documentation": "string('Hello"
    },
    {
      "arg_name": "weight",
      "function": "bordered_string",
      "default_value": 1,
      "usage_pattern": "simple_usage",
      "validation_code": "weight=1 | weight=3 | weight=3",
      "transformation_code": "weight=1, width=None, height=None, left=None, right=None, bottom=None, top=None, fill=' ', width_fill=None, height_fill=None, left_fill=None, right_fill=None, bottom_fill=None, top_fill=None, bottom_right_fill=None, bottom_left_fill=None, top_right_fill=None, top_left_fill=None): | weight=3) | bordered_string(string, *, weight=1, width=None, height=None, left=None, right=None, bottom=None, top=None, fill=' ', width_fill=None, height_fill=None, left_fill=None, right_fill=None, bottom_fill=None, top_fill=None, bottom_right_fill=None, bottom_left_fill=None, top_right_fill=None, top_left_fill=None) | bordered_string('Hello\nWorld!',fill='-',weight=3)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "width",
      "function": "bordered_string",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "width=None | width = weight | left = width",
      "transformation_code": "width=None, height=None, left=None, right=None, bottom=None, top=None, fill=' ', width_fill=None, height_fill=None, left_fill=None, right_fill=None, bottom_fill=None, top_fill=None, bottom_right_fill=None, bottom_left_fill=None, top_right_fill=None, top_left_fill=None): | width = weight if width is None else width | bordered_string(string, *, weight=1, width=None, height=None, left=None, right=None, bottom=None, top=None, fill=' ', width_fill=None, height_fill=None, left_fill=None, right_fill=None, bottom_fill=None, top_fill=None, bottom_right_fill=None, bottom_left_fill=None, top_right_fill=None, top_left_fill=None) | print(bordered_string('Hello\nWorld!',width_fill='\u2502',height_fill='\u2500',top_right_fill='\u2510',top_left_fill='\u250c',bottom_left_fill='\u2514',bottom_right_fill='\u2518')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "height",
      "function": "bordered_string",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "height=None | height = weight | top = height",
      "transformation_code": "height=None, left=None, right=None, bottom=None, top=None, fill=' ', width_fill=None, height_fill=None, left_fill=None, right_fill=None, bottom_fill=None, top_fill=None, bottom_right_fill=None, bottom_left_fill=None, top_right_fill=None, top_left_fill=None): | height = weight if height is None else height | bordered_string(string, *, weight=1, width=None, height=None, left=None, right=None, bottom=None, top=None, fill=' ', width_fill=None, height_fill=None, left_fill=None, right_fill=None, bottom_fill=None, top_fill=None, bottom_right_fill=None, bottom_left_fill=None, top_right_fill=None, top_left_fill=None) | print(bordered_string('Hello\nWorld!',width_fill='\u2502',height_fill='\u2500',top_right_fill='\u2510',top_left_fill='\u250c',bottom_left_fill='\u2514',bottom_right_fill='\u2518')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "left",
      "function": "bordered_string",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check,addition",
      "validation_code": "left=None | left = width",
      "transformation_code": "left=None, right=None, bottom=None, top=None, fill=' ', width_fill=None, height_fill=None, left_fill=None, right_fill=None, bottom_fill=None, top_fill=None, bottom_right_fill=None, bottom_left_fill=None, top_right_fill=None, top_left_fill=None): | left = width if left is None else left | bordered_string(string, *, weight=1, width=None, height=None, left=None, right=None, bottom=None, top=None, fill=' ', width_fill=None, height_fill=None, left_fill=None, right_fill=None, bottom_fill=None, top_fill=None, bottom_right_fill=None, bottom_left_fill=None, top_right_fill=None, top_left_fill=None) | print(bordered_string('Hello\nWorld!',width_fill='\u2502',height_fill='\u2500',top_right_fill='\u2510',top_left_fill='\u250c',bottom_left_fill='\u2514',bottom_right_fill='\u2518')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "right",
      "function": "bordered_string",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "right=None | right=3 | right=1",
      "transformation_code": "right=None, bottom=None, top=None, fill=' ', width_fill=None, height_fill=None, left_fill=None, right_fill=None, bottom_fill=None, top_fill=None, bottom_right_fill=None, bottom_left_fill=None, top_right_fill=None, top_left_fill=None): | right=3) | bordered_string(string, *, weight=1, width=None, height=None, left=None, right=None, bottom=None, top=None, fill=' ', width_fill=None, height_fill=None, left_fill=None, right_fill=None, bottom_fill=None, top_fill=None, bottom_right_fill=None, bottom_left_fill=None, top_right_fill=None, top_left_fill=None) | bordered_string('Hello\nWorld!',fill='-',weight=3,right=3)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "bottom",
      "function": "bordered_string",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "bottom=None | bottom = height | bottom_right_fill = bottom",
      "transformation_code": "bottom=None, top=None, fill=' ', width_fill=None, height_fill=None, left_fill=None, right_fill=None, bottom_fill=None, top_fill=None, bottom_right_fill=None, bottom_left_fill=None, top_right_fill=None, top_left_fill=None): | bottom = height if bottom is None else bottom | bordered_string(string, *, weight=1, width=None, height=None, left=None, right=None, bottom=None, top=None, fill=' ', width_fill=None, height_fill=None, left_fill=None, right_fill=None, bottom_fill=None, top_fill=None, bottom_right_fill=None, bottom_left_fill=None, top_right_fill=None, top_left_fill=None) | bordered_string('Hello\nWorld!',fill='-',bottom_fill='+',weight=3,right=1)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "top",
      "function": "bordered_string",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check,addition",
      "validation_code": "top=None | top=0 | top = height",
      "transformation_code": "top=None, fill=' ', width_fill=None, height_fill=None, left_fill=None, right_fill=None, bottom_fill=None, top_fill=None, bottom_right_fill=None, bottom_left_fill=None, top_right_fill=None, top_left_fill=None): | top=0) | bordered_string(string, *, weight=1, width=None, height=None, left=None, right=None, bottom=None, top=None, fill=' ', width_fill=None, height_fill=None, left_fill=None, right_fill=None, bottom_fill=None, top_fill=None, bottom_right_fill=None, bottom_left_fill=None, top_right_fill=None, top_left_fill=None) | bordered_string('Hello\nWorld!',fill='-',weight=3,top=0)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "fill",
      "function": "bordered_string",
      "default_value": " ",
      "usage_pattern": "simple_usage",
      "validation_code": "fill=None | fill=None | fill=None",
      "transformation_code": "fill=' ', width_fill=None, height_fill=None, left_fill=None, right_fill=None, bottom_fill=None, top_fill=None, bottom_right_fill=None, bottom_left_fill=None, top_right_fill=None, top_left_fill=None): | fill='-',weight=3) | bordered_string(string, *, weight=1, width=None, height=None, left=None, right=None, bottom=None, top=None, fill=' ', width_fill=None, height_fill=None, left_fill=None, right_fill=None, bottom_fill=None, top_fill=None, bottom_right_fill=None, bottom_left_fill=None, top_right_fill=None, top_left_fill=None) | bordered_string('Hello\nWorld!',fill='-',weight=3)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "width_fill",
      "function": "bordered_string",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "width_fill=None | width_fill = fill | left_fill = width_fill",
      "transformation_code": "width_fill=None, height_fill=None, left_fill=None, right_fill=None, bottom_fill=None, top_fill=None, bottom_right_fill=None, bottom_left_fill=None, top_right_fill=None, top_left_fill=None): | width_fill='\u2502',height_fill='\u2500',top_right_fill='\u2510',top_left_fill='\u250c',bottom_left_fill='\u2514',bottom_right_fill='\u2518')) | bordered_string(string, *, weight=1, width=None, height=None, left=None, right=None, bottom=None, top=None, fill=' ', width_fill=None, height_fill=None, left_fill=None, right_fill=None, bottom_fill=None, top_fill=None, bottom_right_fill=None, bottom_left_fill=None, top_right_fill=None, top_left_fill=None) | print(bordered_string('Hello\nWorld!',width_fill='\u2502',height_fill='\u2500',top_right_fill='\u2510',top_left_fill='\u250c',bottom_left_fill='\u2514',bottom_right_fill='\u2518')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "height_fill",
      "function": "bordered_string",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "height_fill=None | height_fill = fill | top_fill = height_fill",
      "transformation_code": "height_fill=None, left_fill=None, right_fill=None, bottom_fill=None, top_fill=None, bottom_right_fill=None, bottom_left_fill=None, top_right_fill=None, top_left_fill=None): | height_fill='\u2500',top_right_fill='\u2510',top_left_fill='\u250c',bottom_left_fill='\u2514',bottom_right_fill='\u2518')) | bordered_string(string, *, weight=1, width=None, height=None, left=None, right=None, bottom=None, top=None, fill=' ', width_fill=None, height_fill=None, left_fill=None, right_fill=None, bottom_fill=None, top_fill=None, bottom_right_fill=None, bottom_left_fill=None, top_right_fill=None, top_left_fill=None) | print(bordered_string('Hello\nWorld!',width_fill='\u2502',height_fill='\u2500',top_right_fill='\u2510',top_left_fill='\u250c',bottom_left_fill='\u2514',bottom_right_fill='\u2518')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "left_fill",
      "function": "bordered_string",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "left_fill=None | left_fill=None | left_fill=None",
      "transformation_code": "left_fill=None, right_fill=None, bottom_fill=None, top_fill=None, bottom_right_fill=None, bottom_left_fill=None, top_right_fill=None, top_left_fill=None): | left_fill='\u250c',bottom_left_fill='\u2514',bottom_right_fill='\u2518')) | bordered_string(string, *, weight=1, width=None, height=None, left=None, right=None, bottom=None, top=None, fill=' ', width_fill=None, height_fill=None, left_fill=None, right_fill=None, bottom_fill=None, top_fill=None, bottom_right_fill=None, bottom_left_fill=None, top_right_fill=None, top_left_fill=None) | print(bordered_string('Hello\nWorld!',width_fill='\u2502',height_fill='\u2500',top_right_fill='\u2510',top_left_fill='\u250c',bottom_left_fill='\u2514',bottom_right_fill='\u2518')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "right_fill",
      "function": "bordered_string",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "right_fill=None | right_fill=None | right_fill=None",
      "transformation_code": "right_fill=None, bottom_fill=None, top_fill=None, bottom_right_fill=None, bottom_left_fill=None, top_right_fill=None, top_left_fill=None): | right_fill='O') | bordered_string(string, *, weight=1, width=None, height=None, left=None, right=None, bottom=None, top=None, fill=' ', width_fill=None, height_fill=None, left_fill=None, right_fill=None, bottom_fill=None, top_fill=None, bottom_right_fill=None, bottom_left_fill=None, top_right_fill=None, top_left_fill=None) | bordered_string('Hello\nWorld!',fill='-',bottom_fill='+',weight=3,right=1,bottom_right_fill='O')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "bottom_fill",
      "function": "bordered_string",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "bottom_fill=None | bottom_fill = height_fill",
      "transformation_code": "bottom_fill=None, top_fill=None, bottom_right_fill=None, bottom_left_fill=None, top_right_fill=None, top_left_fill=None): | bottom_fill='+',weight=3,right=1) | bordered_string(string, *, weight=1, width=None, height=None, left=None, right=None, bottom=None, top=None, fill=' ', width_fill=None, height_fill=None, left_fill=None, right_fill=None, bottom_fill=None, top_fill=None, bottom_right_fill=None, bottom_left_fill=None, top_right_fill=None, top_left_fill=None) | bordered_string('Hello\nWorld!',fill='-',bottom_fill='+',weight=3,right=1)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "top_fill",
      "function": "bordered_string",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "top_fill=None | top_fill = height_fill",
      "transformation_code": "top_fill=None, bottom_right_fill=None, bottom_left_fill=None, top_right_fill=None, top_left_fill=None): | top_fill = height_fill if top_fill is None else top_fill | bordered_string(string, *, weight=1, width=None, height=None, left=None, right=None, bottom=None, top=None, fill=' ', width_fill=None, height_fill=None, left_fill=None, right_fill=None, bottom_fill=None, top_fill=None, bottom_right_fill=None, bottom_left_fill=None, top_right_fill=None, top_left_fill=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "bottom_right_fill",
      "function": "bordered_string",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "bottom_right_fill=None | bottom_right_fill = bottom_right_fill",
      "transformation_code": "bottom_right_fill=None, bottom_left_fill=None, top_right_fill=None, top_left_fill=None): | bottom_right_fill='O') | bordered_string(string, *, weight=1, width=None, height=None, left=None, right=None, bottom=None, top=None, fill=' ', width_fill=None, height_fill=None, left_fill=None, right_fill=None, bottom_fill=None, top_fill=None, bottom_right_fill=None, bottom_left_fill=None, top_right_fill=None, top_left_fill=None) | bordered_string('Hello\nWorld!',fill='-',bottom_fill='+',weight=3,right=1,bottom_right_fill='O')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "bottom_left_fill",
      "function": "bordered_string",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "bottom_left_fill=None | bottom_left_fill = bottom_left_fill",
      "transformation_code": "bottom_left_fill=None, top_right_fill=None, top_left_fill=None): | bottom_left_fill='\u2514',bottom_right_fill='\u2518')) | bordered_string(string, *, weight=1, width=None, height=None, left=None, right=None, bottom=None, top=None, fill=' ', width_fill=None, height_fill=None, left_fill=None, right_fill=None, bottom_fill=None, top_fill=None, bottom_right_fill=None, bottom_left_fill=None, top_right_fill=None, top_left_fill=None) | print(bordered_string('Hello\nWorld!',width_fill='\u2502',height_fill='\u2500',top_right_fill='\u2510',top_left_fill='\u250c',bottom_left_fill='\u2514',bottom_right_fill='\u2518')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "top_right_fill",
      "function": "bordered_string",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "top_right_fill=None | top_right_fill = top_right_fill",
      "transformation_code": "top_right_fill=None, top_left_fill=None): | top_right_fill='\u2510',top_left_fill='\u250c',bottom_left_fill='\u2514',bottom_right_fill='\u2518')) | bordered_string(string, *, weight=1, width=None, height=None, left=None, right=None, bottom=None, top=None, fill=' ', width_fill=None, height_fill=None, left_fill=None, right_fill=None, bottom_fill=None, top_fill=None, bottom_right_fill=None, bottom_left_fill=None, top_right_fill=None, top_left_fill=None) | print(bordered_string('Hello\nWorld!',width_fill='\u2502',height_fill='\u2500',top_right_fill='\u2510',top_left_fill='\u250c',bottom_left_fill='\u2514',bottom_right_fill='\u2518')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "top_left_fill",
      "function": "bordered_string",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "top_left_fill=None | top_left_fill = top_left_fill",
      "transformation_code": "top_left_fill=None): | top_left_fill='\u250c',bottom_left_fill='\u2514',bottom_right_fill='\u2518')) | bordered_string(string, *, weight=1, width=None, height=None, left=None, right=None, bottom=None, top=None, fill=' ', width_fill=None, height_fill=None, left_fill=None, right_fill=None, bottom_fill=None, top_fill=None, bottom_right_fill=None, bottom_left_fill=None, top_right_fill=None, top_left_fill=None) | print(bordered_string('Hello\nWorld!',width_fill='\u2502',height_fill='\u2500',top_right_fill='\u2510',top_left_fill='\u250c',bottom_left_fill='\u2514',bottom_right_fill='\u2518')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "string",
      "function": "simple_boxed_string",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "simple_boxed_string(string, align='center', chars='\u2502\u2500\u2510\u250c\u2514\u2518') | print(simple_boxed_string(s,'center')",
      "error_handling": "",
      "documentation": "string(s,'center'))"
    },
    {
      "arg_name": "align",
      "function": "simple_boxed_string",
      "default_value": "center",
      "usage_pattern": "simple_usage",
      "validation_code": "align=align",
      "transformation_code": "align='center', chars='\u2502\u2500\u2510\u250c\u2514\u2518'): | align=align), width_fill=chars[0], height_fill=chars[1], top_right_fill=chars[2], top_left_fill=chars[3], bottom_left_fill=chars[4], bottom_right_fill=chars[5]) | simple_boxed_string(string, align='center', chars='\u2502\u2500\u2510\u250c\u2514\u2518') | bordered_string(make_string_rectangular(string, align=align)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "chars",
      "function": "simple_boxed_string",
      "default_value": "\u2502\u2500\u2510\u250c\u2514\u2518",
      "usage_pattern": "indexing",
      "validation_code": "width_fill=chars | height_fill=chars | top_right_fill=chars",
      "transformation_code": "chars='\u2502\u2500\u2510\u250c\u2514\u2518'): | simple_boxed_string(string, align='center', chars='\u2502\u2500\u2510\u250c\u2514\u2518')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "string",
      "function": "strip_ansi_escapes",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "strip_ansi_escapes(string) | sub('', string)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "string",
      "function": "visible_string_length",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "string = strip_ansi_escapes | out = string",
      "transformation_code": "string = strip_ansi_escapes(string) | visible_string_length(string) | strip_ansi_escapes(string)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "string",
      "function": "string_width",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "string_width(string) | max(map(visible_string_length, line_split(string)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "string",
      "function": "string_height",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "string_height(string) | number_of_lines(string)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "string",
      "function": "_pad_string_height",
      "default_value": null,
      "usage_pattern": "addition,type_check",
      "validation_code": "isinstance(string, str)",
      "transformation_code": "_pad_string_height(string, height, origin=None) | isinstance(string, str)",
      "error_handling": "",
      "documentation": "string (str)"
    },
    {
      "arg_name": "height",
      "function": "_pad_string_height",
      "default_value": null,
      "usage_pattern": "addition,type_check",
      "validation_code": "isinstance(height, int) | height < 0 | top_pad = height",
      "transformation_code": "_pad_string_height(string, height, origin=None) | isinstance(height, int)",
      "error_handling": "",
      "documentation": "height (int)"
    },
    {
      "arg_name": "origin",
      "function": "_pad_string_height",
      "default_value": null,
      "usage_pattern": "equality_check,boolean_condition",
      "validation_code": "origin=None",
      "transformation_code": "origin=None): | origin == 'top': | _pad_string_height(string, height, origin=None)",
      "error_handling": "",
      "documentation": "origin (str, optional)"
    },
    {
      "arg_name": "origin",
      "function": "pad_to_same_number_of_lines",
      "default_value": "top",
      "usage_pattern": "boolean_condition",
      "validation_code": "origin=origin | origin=top | origin=center",
      "transformation_code": "origin='top'): | origin='+origin,'-'*10) | pad_to_same_number_of_lines(*strings, origin='top') | print(\"-\" * 10,'origin='+origin,'-'*10)",
      "error_handling": "",
      "documentation": "origin (str, optional)"
    },
    {
      "arg_name": "string",
      "function": "pad_string_to_dims",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert string_width(string) <= width | assert string_height(string) <= height",
      "transformation_code": "pad_string_to_dims(string, *, height, width, fill=' ') | string_width(string)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "height",
      "function": "pad_string_to_dims",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert string_height(string) <= height | delta_height = height",
      "transformation_code": "height = height - string_height(string) | pad_string_to_dims(string, *, height, width, fill=' ')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "width",
      "function": "pad_string_to_dims",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert string_width(string) <= width | delta_width = width",
      "transformation_code": "width = width - string_width(string) | pad_string_to_dims(string, *, height, width, fill=' ')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "fill",
      "function": "pad_string_to_dims",
      "default_value": " ",
      "usage_pattern": "simple_usage",
      "validation_code": "fill=fill",
      "transformation_code": "fill=' '): | fill=fill, left=left, right=right, top=top, bottom=bottom) | pad_string_to_dims(string, *, height, width, fill=' ') | bordered_string(string, fill=fill, left=left, right=right, top=top, bottom=bottom)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "string_from",
      "function": "edit_distance",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "edit_distance(string_from, string_to)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "string_to",
      "function": "edit_distance",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "edit_distance(string_from, string_to)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "edit_image_in_terminal",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "assert isinstance(image, str) or is_image(image) | assert is_image_file(image) | isinstance(image, str)",
      "transformation_code": "image = load_image(image) | image = resize_image_to_fit(image, 512, 512, allow_growth=False) | edit_image_in_terminal(image) | isinstance(image, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "noun",
      "function": "is_plural_noun",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "is_plural_noun(noun) | is_singular_noun(noun)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "noun",
      "function": "is_singular_noun",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "is_singular_noun(noun) | singular_noun(noun)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "singular_word",
      "function": "is_singular_noun_of",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "",
      "transformation_code": "is_singular_noun_of(singular_word, plural_word) | compare_nouns(singular_word, plural_word)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "plural_word",
      "function": "is_singular_noun_of",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "is_singular_noun_of(singular_word, plural_word) | compare_nouns(singular_word, plural_word)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "plural_word",
      "function": "is_plural_noun_of",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "",
      "transformation_code": "is_plural_noun_of(plural_word, singular_word) | compare_nouns(plural_word, singular_word)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "singular_word",
      "function": "is_plural_noun_of",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "is_plural_noun_of(plural_word, singular_word) | compare_nouns(plural_word, singular_word)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "noun",
      "function": "plural_noun",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "plural_noun(noun, force=False) | is_plural_noun(noun)",
      "error_handling": "",
      "documentation": "noun(\"house\")              -> \"houses\""
    },
    {
      "arg_name": "force",
      "function": "plural_noun",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "force=False | force=False | force=True",
      "transformation_code": "force=False): | force=False) -> \"houses\" | plural_noun(noun, force=False) | plural_noun(\"houses\",force=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "noun",
      "function": "singular_noun",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "singular_noun(noun) | singular_noun(noun)",
      "error_handling": "",
      "documentation": "noun('houses')            -> 'house'"
    },
    {
      "arg_name": "number",
      "function": "number_to_words",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "number_to_words(number) | number (can be an integer, negative, or even floating point. But can NOT be a complex number right now, because it will mess that up)",
      "error_handling": "",
      "documentation": "number (can be an integer, negative, or even floating point. But can NOT be a complex number right now, because it will mess that up)"
    },
    {
      "arg_name": "string",
      "function": "words_to_number",
      "default_value": null,
      "usage_pattern": "boolean_condition,indexing,method_call,type_check",
      "validation_code": "assert isinstance(string, str), 'word2number error: please input a string. You gave me a ' + repr(type(string)) | assert string.count(' over ') == 1, 'word2number error: Cant have a fraction with two denominators, but was given ' + repr(string) | assert string.count('point ') == 1, \"word2number error: Cant have more than one decimal point in a number but string said 'point' twice in \" + repr(string)",
      "transformation_code": "string = string.strip() | string = string.replace('minus ', '-') | words_to_number(string) | isinstance(string, str)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "word",
      "function": "_get_parts_of_speech_via_nltk",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_get_parts_of_speech_via_nltk(word) | synsets(word)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "word",
      "function": "is_a_verb",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "is_a_verb(word: str) | _get_parts_of_speech_via_nltk(word)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "word",
      "function": "is_an_adjective",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "is_an_adjective(word: str) | _get_parts_of_speech_via_nltk(word)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "word",
      "function": "is_a_noun",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "is_a_noun(word: str) | _get_parts_of_speech_via_nltk(word)",
      "error_handling": "",
      "documentation": "word('poop')==True"
    },
    {
      "arg_name": "word",
      "function": "is_an_english_word",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "",
      "transformation_code": "is_an_english_word(word)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "text",
      "function": "split_sentences",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "assert isinstance(text, str) | isinstance(text, str)",
      "transformation_code": "text = \"Hello! This is an example of splitting sentences. How are you doing today?\" | split_sentences(text, language='english') | split_sentences(text)",
      "error_handling": "",
      "documentation": "text (str)"
    },
    {
      "arg_name": "language",
      "function": "split_sentences",
      "default_value": "english",
      "usage_pattern": "simple_usage",
      "validation_code": "assert language in _get_punkt_languages(), 'Language %s is not supported. Please choose from: %s' % (language, _get_punkt_languages())",
      "transformation_code": "language='english'): | split_sentences(text, language='english') | print(rp.r._get_punkt_languages()",
      "error_handling": "",
      "documentation": "language (str)"
    },
    {
      "arg_name": "string",
      "function": "_string_pager_via_pypager",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "string = str | text=string",
      "transformation_code": "string = str(string) | _string_pager_via_pypager(string) | str(string)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "string",
      "function": "_string_pager_via_click",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_string_pager_via_click(string) | echo_via_pager(string)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "string",
      "function": "_string_pager_via_less",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "",
      "transformation_code": "_string_pager_via_less(string) | communicate(string.encode('utf-8')",
      "error_handling": "try_except",
      "documentation": "string: The string to pipe into less."
    },
    {
      "arg_name": "string",
      "function": "string_pager",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "string = str",
      "transformation_code": "string = str(string) | string_pager(string) | str(string)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "duration",
      "function": "record_mouse_positions",
      "default_value": 1,
      "usage_pattern": "simple_usage",
      "validation_code": "assert duration >= 0 | duration=1 | duration >= 0",
      "transformation_code": "duration=1, rate=60): | record_mouse_positions(duration=1, rate=60) | for (duration)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "rate",
      "function": "record_mouse_positions",
      "default_value": 60,
      "usage_pattern": "simple_usage",
      "validation_code": "assert rate > 0 | rate=60 | rate > 0",
      "transformation_code": "rate=60): | record_mouse_positions(duration=1, rate=60) | taking (rate)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "positions",
      "function": "playback_mouse_positions",
      "default_value": null,
      "usage_pattern": "iteration",
      "validation_code": "assert is_iterable(positions)",
      "transformation_code": "playback_mouse_positions(positions, rate=60) | playback_mouse_positions(record_mouse_positions(10)",
      "error_handling": "",
      "documentation": "positions(record_mouse_positions(10)) #Move the mouse around for 10 seconds, then watch it play back again"
    },
    {
      "arg_name": "rate",
      "function": "playback_mouse_positions",
      "default_value": 60,
      "usage_pattern": "simple_usage",
      "validation_code": "assert rate > 0 | rate=60 | rate > 0",
      "transformation_code": "rate=60): | playback_mouse_positions(positions, rate=60) | at (rate)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "n",
      "function": "unicode_loading_bar",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert is_number(n), 'Input assumption' | assert n >= 0, 'Input assumption' | x=n",
      "transformation_code": "n = int(n) | n = max(0, n) | unicode_loading_bar(n, chars='\u258f\u258e\u258d\u258c\u258b\u258a\u2589\u2588') | print(end='\\r'+unicode_loading_bar(_)",
      "error_handling": "",
      "documentation": "n(x)"
    },
    {
      "arg_name": "chars",
      "function": "unicode_loading_bar",
      "default_value": "\u258f\u258e\u258d\u258c\u258b\u258a\u2589\u2588",
      "usage_pattern": "indexing,length_check,type_check",
      "validation_code": "assert isinstance(chars, str), 'Input assumption' | assert len(chars) >= 1, 'Input assumption' | isinstance(chars, str)",
      "transformation_code": "chars='\u258f\u258e\u258d\u258c\u258b\u258a\u2589\u2588'): | unicode_loading_bar(n, chars='\u258f\u258e\u258d\u258c\u258b\u258a\u2589\u2588') | isinstance(chars, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "values",
      "function": "get_box_char_bar_graph",
      "default_value": null,
      "usage_pattern": "length_check,iteration",
      "validation_code": "",
      "transformation_code": "values = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1] | values = [amplitude * math.sin(2 * math.pi * frequency * x / num_points + phase) for x in range(num_points)] | get_box_char_bar_graph(values, min_val=None, max_val=None, num_lines=1) | print(get_box_char_bar_graph(values, num_lines=1)",
      "error_handling": "",
      "documentation": "values (list)"
    },
    {
      "arg_name": "min_val",
      "function": "get_box_char_bar_graph",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "min_val=None | min_val = min | value <= min_val",
      "transformation_code": "min_val=None, max_val=None, num_lines=1): | min_val=-1, max_val=1, num_lines=num_lines) | get_box_char_bar_graph(values, min_val=None, max_val=None, num_lines=1) | get_box_char_bar_graph(values, min_val=-1, max_val=1, num_lines=num_lines)",
      "error_handling": "",
      "documentation": "min_val (float, optional)"
    },
    {
      "arg_name": "max_val",
      "function": "get_box_char_bar_graph",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "max_val=None | max_val=1 | max_val = max",
      "transformation_code": "max_val=None, num_lines=1): | max_val=1, num_lines=num_lines) | get_box_char_bar_graph(values, min_val=None, max_val=None, num_lines=1) | get_box_char_bar_graph(values, min_val=-1, max_val=1, num_lines=num_lines)",
      "error_handling": "",
      "documentation": "max_val (float, optional)"
    },
    {
      "arg_name": "num_lines",
      "function": "get_box_char_bar_graph",
      "default_value": 1,
      "usage_pattern": "simple_usage",
      "validation_code": "num_lines=1 | num_lines=1 | num_lines=num_lines",
      "transformation_code": "num_lines=1): | num_lines=1)) | get_box_char_bar_graph(values, min_val=None, max_val=None, num_lines=1) | print(get_box_char_bar_graph(values, num_lines=1)",
      "error_handling": "",
      "documentation": "num_lines (int, optional)"
    },
    {
      "arg_name": "frames_back",
      "function": "get_scope",
      "default_value": 0,
      "usage_pattern": "type_check",
      "validation_code": "assert isinstance(frames_back, int), 'frames_back must be an integer (fractions dont make any sense | assert frames_back >= 0, 'frames_back cannot be negative' | isinstance(frames_back, int)",
      "transformation_code": "frames_back=0): | get_scope(frames_back=0) | isinstance(frames_back, int)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "frames_back",
      "function": "_get_visible_scope",
      "default_value": 0,
      "usage_pattern": "type_check",
      "validation_code": "assert isinstance(frames_back, int), 'frames_back must be an integer' | assert frames_back >= 0, 'frames_back cannot be negative' | isinstance(frames_back, int)",
      "transformation_code": "frames_back=0): | _get_visible_scope(frames_back=0) | isinstance(frames_back, int)",
      "error_handling": "",
      "documentation": "frames_back (int)"
    },
    {
      "arg_name": "use_cache",
      "function": "get_all_importable_module_names",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "use_cache=True",
      "transformation_code": "use_cache=True): | get_all_importable_module_names(use_cache=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "module_name",
      "function": "get_module_path_from_name",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "get_module_path_from_name(module_name) | find_spec(module_name)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "module",
      "function": "get_module_path",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "assert inspect.ismodule(module), 'get_module_path error:\\xa0The input you gave is not a module type. You gave input of type ' + repr(type(module)) | isinstance(module, str) | isinstance(module, str)",
      "transformation_code": "module = module.__module__ | module = type(module).__module__ | get_module_path(module) | isinstance(module, str)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "object",
      "function": "is_a_module",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "is_a_module(object) | type(object)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "datetime_obj",
      "function": "date_to_epoch_seconds",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "delta = datetime_obj",
      "transformation_code": "date_to_epoch_seconds(datetime_obj)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "datetime_obj",
      "function": "date_to_epoch_millis",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "date_to_epoch_millis(datetime_obj) | int(date_to_epoch_seconds(datetime_obj)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "epoch_seconds",
      "function": "epoch_seconds_to_date",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "seconds=epoch_seconds",
      "transformation_code": "epoch_seconds_to_date(epoch_seconds: float) | timedelta(seconds=epoch_seconds)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "epoch_millis",
      "function": "epoch_millis_to_date",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "epoch_seconds = epoch_millis",
      "transformation_code": "epoch_millis_to_date(epoch_millis: int)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "string",
      "function": "string_to_date",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "string_to_date(string) | print(string_to_date('monday, aug 15th 2015 at 8:40 pm')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "open_file_with_default_application",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "open_file_with_default_application(path) | call(('open', path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "norm_cdf",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "norm_cdf(x, mean=0, std=1)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "mean",
      "function": "norm_cdf",
      "default_value": 0,
      "usage_pattern": "simple_usage",
      "validation_code": "mean=0",
      "transformation_code": "mean=0, std=1): | norm_cdf(x, mean=0, std=1)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "std",
      "function": "norm_cdf",
      "default_value": 1,
      "usage_pattern": "simple_usage",
      "validation_code": "std=1",
      "transformation_code": "std=1): | norm_cdf(x, mean=0, std=1)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "norm_pdf",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "norm_pdf(x, mean=0, std=1)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "mean",
      "function": "norm_pdf",
      "default_value": 0,
      "usage_pattern": "simple_usage",
      "validation_code": "mean=0",
      "transformation_code": "mean=0, std=1): | norm_pdf(x, mean=0, std=1)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "std",
      "function": "norm_pdf",
      "default_value": 1,
      "usage_pattern": "simple_usage",
      "validation_code": "std=1",
      "transformation_code": "std=1): | norm_pdf(x, mean=0, std=1)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "p",
      "function": "inverse_norm_cdf",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "inverse_norm_cdf(p, mean=0, std=1) | function (given a probability, find the x-value that made it)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "mean",
      "function": "inverse_norm_cdf",
      "default_value": 0,
      "usage_pattern": "simple_usage",
      "validation_code": "mean=0",
      "transformation_code": "mean=0, std=1): | inverse_norm_cdf(p, mean=0, std=1)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "std",
      "function": "inverse_norm_cdf",
      "default_value": 1,
      "usage_pattern": "addition",
      "validation_code": "std=1",
      "transformation_code": "std=1): | inverse_norm_cdf(p, mean=0, std=1)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "s3url",
      "function": "s3_list_objects",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "s3_list_objects(s3url, *, recursive=True, include_metadata=False, lazy=False, show_progress=False) | urlparse(s3url)",
      "error_handling": "",
      "documentation": "s3url (str)"
    },
    {
      "arg_name": "recursive",
      "function": "s3_list_objects",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "recursive=True",
      "transformation_code": "recursive=True, include_metadata=False, lazy=False, show_progress=False): | s3_list_objects(s3url, *, recursive=True, include_metadata=False, lazy=False, show_progress=False) | prefix (for common prefixes if not recursive)",
      "error_handling": "",
      "documentation": "recursive (bool)"
    },
    {
      "arg_name": "include_metadata",
      "function": "s3_list_objects",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "include_metadata=False | include_metadata=False | include_metadata=True",
      "transformation_code": "include_metadata=False, lazy=False, show_progress=False): | include_metadata=False: | s3_list_objects(s3url, *, recursive=True, include_metadata=False, lazy=False, show_progress=False)",
      "error_handling": "",
      "documentation": "include_metadata (bool)"
    },
    {
      "arg_name": "lazy",
      "function": "s3_list_objects",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "lazy=False | lazy=True | lazy=True",
      "transformation_code": "lazy=False, show_progress=False): | lazy=True and include_metadata=False: | s3_list_objects(s3url, *, recursive=True, include_metadata=False, lazy=False, show_progress=False)",
      "error_handling": "",
      "documentation": "lazy (bool)"
    },
    {
      "arg_name": "show_progress",
      "function": "s3_list_objects",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "show_progress=False | show_progress=True",
      "transformation_code": "show_progress=False): | show_progress=True, each object key or prefix will be printed as it's yielded, | s3_list_objects(s3url, *, recursive=True, include_metadata=False, lazy=False, show_progress=False)",
      "error_handling": "",
      "documentation": "show_progress (bool)"
    },
    {
      "arg_name": "url",
      "function": "is_s3_url",
      "default_value": null,
      "usage_pattern": "method_call,type_check",
      "validation_code": "isinstance(url, str)",
      "transformation_code": "is_s3_url(url) | isinstance(url, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "url",
      "function": "is_gs_url",
      "default_value": null,
      "usage_pattern": "method_call,type_check",
      "validation_code": "isinstance(url, str)",
      "transformation_code": "is_gs_url(url) | isinstance(url, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "url",
      "function": "download_url",
      "default_value": null,
      "usage_pattern": "method_call,type_check",
      "validation_code": "assert isinstance(url, str), 'url should be a string, but got type ' + repr(type(url)) | isinstance(url, str)",
      "transformation_code": "download_url(url, path=None, *, skip_existing=False, show_progress=False, timeout=None) | open_file_with_default_application(download_url('https://i.imgur.com/qSmVyCo.jpg')",
      "error_handling": "try_except",
      "documentation": "url('https"
    },
    {
      "arg_name": "path",
      "function": "download_url",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check,type_check",
      "validation_code": "assert path is None or isinstance(path, str), 'path should be either None or a string, but got type ' + repr(type(path)) | isinstance(path, str) | path=None",
      "transformation_code": "path=None, *, skip_existing=False, show_progress=False, timeout=None): | path = path_join(root, get_file_name(url)) | download_url(url, path=None, *, skip_existing=False, show_progress=False, timeout=None) | isinstance(path, str)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "skip_existing",
      "function": "download_url",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "skip_existing=False | skip_existing=skip_existing",
      "transformation_code": "skip_existing=False, show_progress=False, timeout=None): | skip_existing=skip_existing, show_progress=show_progress, timeout=timeout) | download_url(url, path=None, *, skip_existing=False, show_progress=False, timeout=None) | download_youtube_video(url, path, skip_existing=skip_existing, show_progress=show_progress, timeout=timeout)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "show_progress",
      "function": "download_url",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "show_progress=False | show_progress=show_progress",
      "transformation_code": "show_progress=False, timeout=None): | show_progress=show_progress, timeout=timeout) | download_url(url, path=None, *, skip_existing=False, show_progress=False, timeout=None) | download_youtube_video(url, path, skip_existing=skip_existing, show_progress=show_progress, timeout=timeout)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "timeout",
      "function": "download_url",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check,type_check",
      "validation_code": "assert timeout is None or isinstance(timeout, (int, float)), 'timeout should be a number or None, but got type ' + repr(type(timeout)) | isinstance(timeout, (int, float) | timeout=None",
      "transformation_code": "timeout=None): | timeout=timeout) | download_url(url, path=None, *, skip_existing=False, show_progress=False, timeout=None) | isinstance(timeout, (int, float)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "url_to_path",
      "function": "download_urls",
      "default_value": "lambda url: get_file_name(url)",
      "usage_pattern": "simple_usage",
      "validation_code": "url_to_path=lambda | path=url_to_path",
      "transformation_code": "url_to_path=lambda url: get_file_name(url), skip_existing=False, strict=True, num_threads=None, show_progress=False, buffer_limit=None, lazy=False, timeout=None): | download_urls(*urls, url_to_path=lambda url: get_file_name(url) | download_url(url=url, path=url_to_path(url)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "skip_existing",
      "function": "download_urls",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "skip_existing=False | skip_existing=skip_existing",
      "transformation_code": "skip_existing=False, strict=True, num_threads=None, show_progress=False, buffer_limit=None, lazy=False, timeout=None): | skip_existing=skip_existing, timeout=timeout)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "strict",
      "function": "download_urls",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "strict=True | strict=strict",
      "transformation_code": "strict=True, num_threads=None, show_progress=False, buffer_limit=None, lazy=False, timeout=None): | strict=strict, num_threads=num_threads, lazy=lazy, buffer_limit=buffer_limit) | load_files(load_file, urls, show_progress=show_progress, strict=strict, num_threads=num_threads, lazy=lazy, buffer_limit=buffer_limit)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "num_threads",
      "function": "download_urls",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "num_threads=None | num_threads=num_threads",
      "transformation_code": "num_threads=None, show_progress=False, buffer_limit=None, lazy=False, timeout=None): | num_threads=num_threads, lazy=lazy, buffer_limit=buffer_limit) | load_files(load_file, urls, show_progress=show_progress, strict=strict, num_threads=num_threads, lazy=lazy, buffer_limit=buffer_limit)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "show_progress",
      "function": "download_urls",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "show_progress=False | show_progress=show_progress",
      "transformation_code": "show_progress=False, buffer_limit=None, lazy=False, timeout=None): | show_progress = 'eta:Downloading URLs' | load_files(load_file, urls, show_progress=show_progress, strict=strict, num_threads=num_threads, lazy=lazy, buffer_limit=buffer_limit)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "buffer_limit",
      "function": "download_urls",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "buffer_limit=None | buffer_limit=buffer_limit",
      "transformation_code": "buffer_limit=None, lazy=False, timeout=None): | buffer_limit=buffer_limit) | load_files(load_file, urls, show_progress=show_progress, strict=strict, num_threads=num_threads, lazy=lazy, buffer_limit=buffer_limit)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "lazy",
      "function": "download_urls",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "lazy=False | lazy=lazy",
      "transformation_code": "lazy=False, timeout=None): | lazy=lazy, buffer_limit=buffer_limit) | load_files(load_file, urls, show_progress=show_progress, strict=strict, num_threads=num_threads, lazy=lazy, buffer_limit=buffer_limit)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "timeout",
      "function": "download_urls",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "timeout=None | timeout=timeout",
      "transformation_code": "timeout=None): | timeout=timeout)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "url",
      "function": "download_url_to_cache",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "assert isinstance(url, str) | isinstance(url, str)",
      "transformation_code": "url=%s is neither a valid url nor an existing path' % url) | download_url_to_cache(url, cache_dir=None, skip_existing=True, hash_func=None, show_progress=False, timeout=None) | isinstance(url, str)",
      "error_handling": "",
      "documentation": "url (str)"
    },
    {
      "arg_name": "cache_dir",
      "function": "download_url_to_cache",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "cache_dir=None | cache_dir=cache_dir",
      "transformation_code": "cache_dir=None, skip_existing=True, hash_func=None, show_progress=False, timeout=None): | cache_dir=cache_dir, hash_func=hash_func) | download_url_to_cache(url, cache_dir=None, skip_existing=True, hash_func=None, show_progress=False, timeout=None) | get_cache_file_path(url, cache_dir=cache_dir, hash_func=hash_func)",
      "error_handling": "",
      "documentation": "cache_dir (str, optional)"
    },
    {
      "arg_name": "skip_existing",
      "function": "download_url_to_cache",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "skip_existing=True | skip_existing=skip_existing",
      "transformation_code": "skip_existing=True, hash_func=None, show_progress=False, timeout=None): | skip_existing=skip_existing, show_progress=show_progress, timeout=timeout) | download_url_to_cache(url, cache_dir=None, skip_existing=True, hash_func=None, show_progress=False, timeout=None) | download_url(url, cache_path, skip_existing=skip_existing, show_progress=show_progress, timeout=timeout)",
      "error_handling": "",
      "documentation": "skip_existing (bool)"
    },
    {
      "arg_name": "hash_func",
      "function": "download_url_to_cache",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "hash_func=None | hash_func=hash_func",
      "transformation_code": "hash_func=None, show_progress=False, timeout=None): | hash_func=hash_func) | download_url_to_cache(url, cache_dir=None, skip_existing=True, hash_func=None, show_progress=False, timeout=None) | get_cache_file_path(url, cache_dir=cache_dir, hash_func=hash_func)",
      "error_handling": "",
      "documentation": "hash_func (func, optional)"
    },
    {
      "arg_name": "show_progress",
      "function": "download_url_to_cache",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "show_progress=False | show_progress=show_progress",
      "transformation_code": "show_progress=False, timeout=None): | show_progress=show_progress, timeout=timeout) | download_url_to_cache(url, cache_dir=None, skip_existing=True, hash_func=None, show_progress=False, timeout=None) | download_url(url, cache_path, skip_existing=skip_existing, show_progress=show_progress, timeout=timeout)",
      "error_handling": "",
      "documentation": "show_progress (bool, optional)"
    },
    {
      "arg_name": "timeout",
      "function": "download_url_to_cache",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "timeout=None | timeout=timeout",
      "transformation_code": "timeout=None): | timeout=timeout) | download_url_to_cache(url, cache_dir=None, skip_existing=True, hash_func=None, show_progress=False, timeout=None) | download_url(url, cache_path, skip_existing=skip_existing, show_progress=show_progress, timeout=timeout)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "cache_dir",
      "function": "download_urls_to_cache",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "cache_dir=None | cache_dir=cache_dir",
      "transformation_code": "cache_dir=None, skip_existing=True, hash_func=None, lazy=False, num_threads=None, buffer_limit=None, strict=True, show_progress=False, timeout=None): | cache_dir=cache_dir, skip_existing=skip_existing, hash_func=hash_func, timeout=timeout) | download_urls_to_cache(*urls, cache_dir=None, skip_existing=True, hash_func=None, lazy=False, num_threads=None, buffer_limit=None, strict=True, show_progress=False, timeout=None) | download_url_to_cache(url, cache_dir=cache_dir, skip_existing=skip_existing, hash_func=hash_func, timeout=timeout)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "skip_existing",
      "function": "download_urls_to_cache",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "skip_existing=True | skip_existing=skip_existing",
      "transformation_code": "skip_existing=True, hash_func=None, lazy=False, num_threads=None, buffer_limit=None, strict=True, show_progress=False, timeout=None): | skip_existing=skip_existing, hash_func=hash_func, timeout=timeout) | download_urls_to_cache(*urls, cache_dir=None, skip_existing=True, hash_func=None, lazy=False, num_threads=None, buffer_limit=None, strict=True, show_progress=False, timeout=None) | download_url_to_cache(url, cache_dir=cache_dir, skip_existing=skip_existing, hash_func=hash_func, timeout=timeout)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "hash_func",
      "function": "download_urls_to_cache",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "hash_func=None | hash_func=hash_func",
      "transformation_code": "hash_func=None, lazy=False, num_threads=None, buffer_limit=None, strict=True, show_progress=False, timeout=None): | hash_func=hash_func, timeout=timeout) | download_urls_to_cache(*urls, cache_dir=None, skip_existing=True, hash_func=None, lazy=False, num_threads=None, buffer_limit=None, strict=True, show_progress=False, timeout=None) | download_url_to_cache(url, cache_dir=cache_dir, skip_existing=skip_existing, hash_func=hash_func, timeout=timeout)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "lazy",
      "function": "download_urls_to_cache",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "lazy=False | lazy=lazy",
      "transformation_code": "lazy=False, num_threads=None, buffer_limit=None, strict=True, show_progress=False, timeout=None): | lazy=lazy, buffer_limit=buffer_limit, show_progress=show_progress, strict=strict) | download_urls_to_cache(*urls, cache_dir=None, skip_existing=True, hash_func=None, lazy=False, num_threads=None, buffer_limit=None, strict=True, show_progress=False, timeout=None) | load_files(download, urls, lazy=lazy, buffer_limit=buffer_limit, show_progress=show_progress, strict=strict)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "num_threads",
      "function": "download_urls_to_cache",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "num_threads=None",
      "transformation_code": "num_threads=None, buffer_limit=None, strict=True, show_progress=False, timeout=None): | download_urls_to_cache(*urls, cache_dir=None, skip_existing=True, hash_func=None, lazy=False, num_threads=None, buffer_limit=None, strict=True, show_progress=False, timeout=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "buffer_limit",
      "function": "download_urls_to_cache",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "buffer_limit=None | buffer_limit=buffer_limit",
      "transformation_code": "buffer_limit=None, strict=True, show_progress=False, timeout=None): | buffer_limit=buffer_limit, show_progress=show_progress, strict=strict) | download_urls_to_cache(*urls, cache_dir=None, skip_existing=True, hash_func=None, lazy=False, num_threads=None, buffer_limit=None, strict=True, show_progress=False, timeout=None) | load_files(download, urls, lazy=lazy, buffer_limit=buffer_limit, show_progress=show_progress, strict=strict)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "strict",
      "function": "download_urls_to_cache",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "strict=True | strict=strict",
      "transformation_code": "strict=True, show_progress=False, timeout=None): | strict=strict) | download_urls_to_cache(*urls, cache_dir=None, skip_existing=True, hash_func=None, lazy=False, num_threads=None, buffer_limit=None, strict=True, show_progress=False, timeout=None) | load_files(download, urls, lazy=lazy, buffer_limit=buffer_limit, show_progress=show_progress, strict=strict)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "show_progress",
      "function": "download_urls_to_cache",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "show_progress=False | show_progress=show_progress",
      "transformation_code": "show_progress=False, timeout=None): | show_progress = 'eta:rp.download_urls_to_cache' | download_urls_to_cache(*urls, cache_dir=None, skip_existing=True, hash_func=None, lazy=False, num_threads=None, buffer_limit=None, strict=True, show_progress=False, timeout=None) | load_files(download, urls, lazy=lazy, buffer_limit=buffer_limit, show_progress=show_progress, strict=strict)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "timeout",
      "function": "download_urls_to_cache",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "timeout=None | timeout=timeout",
      "transformation_code": "timeout=None): | timeout=timeout) | download_urls_to_cache(*urls, cache_dir=None, skip_existing=True, hash_func=None, lazy=False, num_threads=None, buffer_limit=None, strict=True, show_progress=False, timeout=None) | download_url_to_cache(url, cache_dir=cache_dir, skip_existing=skip_existing, hash_func=hash_func, timeout=timeout)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "url",
      "function": "get_cache_file_path",
      "default_value": null,
      "usage_pattern": "method_call,type_check",
      "validation_code": "isinstance(url, str) | isinstance(url, str)",
      "transformation_code": "get_cache_file_path(url, *, cache_dir=None, file_extension=None, hash_func=None) | load_image(download_url_to_cache('https://picsum.photos/seed/picsum/536/354')",
      "error_handling": "",
      "documentation": "url (str or any)"
    },
    {
      "arg_name": "cache_dir",
      "function": "get_cache_file_path",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check,type_check",
      "validation_code": "assert cache_dir is None or isinstance(cache_dir, str) | assert isinstance(cache_dir, str), type(cache_dir) | isinstance(cache_dir, str)",
      "transformation_code": "cache_dir=None, file_extension=None, hash_func=None): | cache_dir=\"/tmp\", file_extension=\".txt\") | get_cache_file_path(url, *, cache_dir=None, file_extension=None, hash_func=None) | get_cache_file_path(\"example_data\", cache_dir=\"/tmp\", file_extension=\".txt\")",
      "error_handling": "",
      "documentation": "cache_dir (str, optional)"
    },
    {
      "arg_name": "file_extension",
      "function": "get_cache_file_path",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check,type_check",
      "validation_code": "assert file_extension is None or isinstance(file_extension, str) | assert isinstance(file_extension, str) | isinstance(file_extension, str)",
      "transformation_code": "file_extension=None, hash_func=None): | file_extension=\".txt\") | get_cache_file_path(url, *, cache_dir=None, file_extension=None, hash_func=None) | get_cache_file_path(\"example_data\", cache_dir=\"/tmp\", file_extension=\".txt\")",
      "error_handling": "",
      "documentation": "file_extension (str, optional)"
    },
    {
      "arg_name": "hash_func",
      "function": "get_cache_file_path",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "hash_func=None | hash_func=get_file_name | hash_func=get_parent_folder",
      "transformation_code": "hash_func=None): | hash_func=get_file_name)) | get_cache_file_path(url, *, cache_dir=None, file_extension=None, hash_func=None) | Examples (hash_func)",
      "error_handling": "",
      "documentation": "hash_func (callable, optional)"
    },
    {
      "arg_name": "urls",
      "function": "get_cache_file_paths",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "get_cache_file_paths(urls, *, cache_dir=None, file_extension=None, hash_func=None, lazy=False, show_progress=False) | load_files(func, urls, lazy=lazy, num_threads=0, show_progress=show_progress)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "cache_dir",
      "function": "get_cache_file_paths",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "cache_dir=None",
      "transformation_code": "cache_dir=None, file_extension=None, hash_func=None, lazy=False, show_progress=False): | get_cache_file_paths(urls, *, cache_dir=None, file_extension=None, hash_func=None, lazy=False, show_progress=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "file_extension",
      "function": "get_cache_file_paths",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "file_extension=None",
      "transformation_code": "file_extension=None, hash_func=None, lazy=False, show_progress=False): | get_cache_file_paths(urls, *, cache_dir=None, file_extension=None, hash_func=None, lazy=False, show_progress=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "hash_func",
      "function": "get_cache_file_paths",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "hash_func=None",
      "transformation_code": "hash_func=None, lazy=False, show_progress=False): | get_cache_file_paths(urls, *, cache_dir=None, file_extension=None, hash_func=None, lazy=False, show_progress=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "lazy",
      "function": "get_cache_file_paths",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "lazy=False | lazy=lazy",
      "transformation_code": "lazy=False, show_progress=False): | lazy=lazy, num_threads=0, show_progress=show_progress) | get_cache_file_paths(urls, *, cache_dir=None, file_extension=None, hash_func=None, lazy=False, show_progress=False) | load_files(func, urls, lazy=lazy, num_threads=0, show_progress=show_progress)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "show_progress",
      "function": "get_cache_file_paths",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "show_progress=False | show_progress=show_progress",
      "transformation_code": "show_progress=False): | show_progress = 'eta:' + get_current_function_name() | get_cache_file_paths(urls, *, cache_dir=None, file_extension=None, hash_func=None, lazy=False, show_progress=False) | load_files(func, urls, lazy=lazy, num_threads=0, show_progress=show_progress)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "level",
      "function": "debug",
      "default_value": 0,
      "usage_pattern": "simple_usage",
      "validation_code": "level=0 | level=1",
      "transformation_code": "level=0): | level=1 + level) | debug(level=0) | set_trace_shallow(level=1 + level)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "_tensorify",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "x = as_numpy_array",
      "transformation_code": "x = as_numpy_array(x) | _tensorify(x) | is_torch_tensor(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "matrix",
      "function": "is_a_matrix",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "matrix = _tensorify",
      "transformation_code": "matrix = _tensorify(matrix) | is_a_matrix(matrix) | _tensorify(matrix)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "matrix",
      "function": "is_a_square_matrix",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "matrix = _tensorify",
      "transformation_code": "matrix = _tensorify(matrix) | is_a_square_matrix(matrix) | _tensorify(matrix)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "matrix",
      "function": "square_matrix_size",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert is_a_square_matrix(matrix) | matrix = _tensorify",
      "transformation_code": "matrix = _tensorify(matrix) | square_matrix_size(matrix) | _tensorify(matrix)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "number",
      "function": "prime_factors",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "assert number >= 1, 'number must be a positive integer' | assert int(number) == number, 'number must be a positive integer' | number >= 1",
      "transformation_code": "number = number | prime_factors(number) | int(number)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "percent",
      "function": "set_os_volume",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert is_number(percent), 'Volume percent should be a number, but got type ' + repr(type(percent)) | assert 0 <= percent <= 100, 'Volume percent should be between 0 and 100, but got volume = ' + repr(percent) | 0 <= percent",
      "transformation_code": "set_os_volume(percent) | is_number(percent)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "string",
      "function": "fuzzy_string_match",
      "default_value": null,
      "usage_pattern": "method_call,iteration",
      "validation_code": "string = string.lower",
      "transformation_code": "string = string.lower() | fuzzy_string_match(string, target, *, case_sensitive=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "target",
      "function": "fuzzy_string_match",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "target = target.lower",
      "transformation_code": "target = target.lower() | fuzzy_string_match(string, target, *, case_sensitive=True) | bool(re.fullmatch(pattern, target)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "case_sensitive",
      "function": "fuzzy_string_match",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "case_sensitive=True",
      "transformation_code": "case_sensitive=True): | fuzzy_string_match(string, target, *, case_sensitive=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "word",
      "function": "get_english_synonyms_via_nltk",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "synsets = word",
      "transformation_code": "get_english_synonyms_via_nltk(word) | synsets(word)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "query",
      "function": "_datamuse_words_request",
      "default_value": null,
      "usage_pattern": "addition",
      "validation_code": "",
      "transformation_code": "_datamuse_words_request(query, word) | get('https://api.datamuse.com/words?' + query + '=' + word)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "word",
      "function": "_datamuse_words_request",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_datamuse_words_request(query, word) | get('https://api.datamuse.com/words?' + query + '=' + word)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "word",
      "function": "get_english_synonyms_via_datamuse",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "get_english_synonyms_via_datamuse(word) | _datamuse_words_request('rel_syn', word)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "word",
      "function": "get_english_related_words_via_datamuse",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "get_english_related_words_via_datamuse(word) | _datamuse_words_request('ml', word)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "word",
      "function": "get_english_antonyms_via_datamuse",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "get_english_antonyms_via_datamuse(word) | _datamuse_words_request('rel_ant', word)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "word",
      "function": "get_english_rhymes_via_datamuse",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "get_english_rhymes_via_datamuse(word) | _datamuse_words_request('rel_rhy', word)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "word",
      "function": "get_english_synonyms",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "get_english_synonyms(word) | get_english_synonyms_via_datamuse(word)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "n",
      "function": "fibonacci",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "assert n >= 0 | n >= 0 | n < 71",
      "transformation_code": "fibonacci(n) | round((\u03c6 ** n - \u03c6 ** (-n)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "n",
      "function": "inverse_fibonacci",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "n=70",
      "transformation_code": "n=70, similar to how def fibonacci(n) was made (split into two cases) | inverse_fibonacci(n) | inverse_fibonacci(fibonacci(3415)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "graham_scan",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "graham_scan(path) | as_complex_vector(path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "points",
      "function": "convex_hull",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "convex_hull(points) | graham_scan(points)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "point",
      "function": "_point_on_edge",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_point_on_edge(point, edge) | as_complex_vector([point])",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "edge",
      "function": "_point_on_edge",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_point_on_edge(point, edge) | loop_direction_2d([point, *edge])",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "edge_a",
      "function": "_edges_intersect",
      "default_value": null,
      "usage_pattern": "equality_check,indexing",
      "validation_code": "assert len(edge_a == 2) | edge_a = as_complex_vector | edge_a == 2",
      "transformation_code": "edge_a = as_complex_vector(edge_a) | edge_a == 2) | _edges_intersect(edge_a, edge_b) | as_complex_vector(edge_a)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "edge_b",
      "function": "_edges_intersect",
      "default_value": null,
      "usage_pattern": "equality_check,indexing",
      "validation_code": "assert len(edge_b == 2) | edge_b = as_complex_vector | edge_b == 2",
      "transformation_code": "edge_b = as_complex_vector(edge_b) | edge_b == 2) | _edges_intersect(edge_a, edge_b) | as_complex_vector(edge_b)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path_a",
      "function": "paths_intersect",
      "default_value": null,
      "usage_pattern": "indexing,length_check",
      "validation_code": "path_a = as_complex_vector",
      "transformation_code": "path_a = as_complex_vector(path_a) | path_a = [path_a[0]] * 2 | paths_intersect(path_a, path_b) | as_complex_vector(path_a)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path_b",
      "function": "paths_intersect",
      "default_value": null,
      "usage_pattern": "indexing,length_check",
      "validation_code": "path_b = as_complex_vector",
      "transformation_code": "path_b = as_complex_vector(path_b) | path_b = [path_b[0]] * 2 | paths_intersect(path_a, path_b) | as_complex_vector(path_b)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "edge_a",
      "function": "_edge_intersection_positions",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "edge_a = as_complex_vector",
      "transformation_code": "edge_a = as_complex_vector(edge_a) | _edge_intersection_positions(edge_a, edge_b) | as_complex_vector(edge_a)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "edge_b",
      "function": "_edge_intersection_positions",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "edge_b = as_complex_vector",
      "transformation_code": "edge_b = as_complex_vector(edge_b) | _edge_intersection_positions(edge_a, edge_b) | as_complex_vector(edge_b)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path_a",
      "function": "path_intersections",
      "default_value": null,
      "usage_pattern": "indexing",
      "validation_code": "path_a = as_points_array",
      "transformation_code": "path_a = as_points_array(path_a) | path_intersections(path_a, path_b) | as_points_array(path_a)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path_b",
      "function": "path_intersections",
      "default_value": null,
      "usage_pattern": "indexing",
      "validation_code": "path_b = as_points_array",
      "transformation_code": "path_b = as_points_array(path_b) | path_intersections(path_a, path_b) | as_points_array(path_b)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "path_intersects_point",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "path_intersects_point(path, point) | paths_intersect([point], path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "point",
      "function": "path_intersects_point",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "path_intersects_point(path, point) | paths_intersect([point], path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "func",
      "function": "reduce_wrap",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "reduce_wrap(func) | wraps(func)",
      "error_handling": "",
      "documentation": "func: A function that takes exactly two arguments and returns a result"
    },
    {
      "arg_name": "a",
      "function": "longest_common_prefix",
      "default_value": null,
      "usage_pattern": "boolean_condition,indexing,length_check",
      "validation_code": "assert a[:s] == b[:s] | a = len",
      "transformation_code": "a = len(a) | longest_common_prefix(a, b) | tuples (and possibly other datatypes, but not numpy arrays)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "b",
      "function": "longest_common_prefix",
      "default_value": null,
      "usage_pattern": "indexing,length_check",
      "validation_code": "assert a[:s] == b[:s] | b = len",
      "transformation_code": "b = len(b) | longest_common_prefix(a, b) | tuples (and possibly other datatypes, but not numpy arrays)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "a",
      "function": "longest_common_suffix",
      "default_value": null,
      "usage_pattern": "indexing,type_check",
      "validation_code": "isinstance(a, str)",
      "transformation_code": "longest_common_suffix(a, b) | longest_common_suffix('12345abcd','876323abcd')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "b",
      "function": "longest_common_suffix",
      "default_value": null,
      "usage_pattern": "indexing,type_check",
      "validation_code": "isinstance(b, str)",
      "transformation_code": "longest_common_suffix(a, b) | longest_common_suffix('12345abcd','876323abcd')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "a",
      "function": "longest_common_substring",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "longest_common_substring(a, b) | lcs_string_idx(a, b)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "b",
      "function": "longest_common_substring",
      "default_value": null,
      "usage_pattern": "indexing",
      "validation_code": "",
      "transformation_code": "longest_common_substring(a, b) | lcs_string_idx(a, b)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "handle_keyboard_interrupt",
      "function": "input_keypress",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "handle_keyboard_interrupt=False",
      "transformation_code": "handle_keyboard_interrupt=False): | input_keypress(handle_keyboard_interrupt=False) | and (not handle_keyboard_interrupt)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "root",
      "function": "input_select_path",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "assert root is None or is_a_folder(root) | root=None | root = get_current_directory",
      "transformation_code": "root=None, *, sort_by='name', reverse=True, message: str=None, include_folders=True, include_files=True, file_extension_filter: str=None) -> str: | root = get_current_directory() | input_select_path(root=None, *, sort_by='name', reverse=True, message: str=None, include_folders=True, include_files=True, file_extension_filter: str=None) | is_a_folder(root)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "sort_by",
      "function": "input_select_path",
      "default_value": "name",
      "usage_pattern": "simple_usage",
      "validation_code": "sort_by=sort_by | sort_by=sort_by | sort_by=sort_by",
      "transformation_code": "sort_by='name', reverse=True, message: str=None, include_folders=True, include_files=True, file_extension_filter: str=None) -> str: | sort_by=sort_by, include_files=False, include_folders=True) | input_select_path(root=None, *, sort_by='name', reverse=True, message: str=None, include_folders=True, include_files=True, file_extension_filter: str=None) | get_all_paths(root, sort_by=sort_by, include_files=False, include_folders=True)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "reverse",
      "function": "input_select_path",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "reverse=True | reverse=reverse | reverse=reverse",
      "transformation_code": "reverse=True, message: str=None, include_folders=True, include_files=True, file_extension_filter: str=None) -> str: | reverse=reverse) | input_select_path(root=None, *, sort_by='name', reverse=True, message: str=None, include_folders=True, include_files=True, file_extension_filter: str=None) | input_select(header, options=paths, stringify=format_path, reverse=reverse)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "message",
      "function": "input_select_path",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "message=message",
      "transformation_code": "message=message, include_files=include_files, include_folders=include_folders, file_extension_filter=file_extension_filter) | input_select_path(root=None, *, sort_by='name', reverse=True, message: str=None, include_folders=True, include_files=True, file_extension_filter: str=None) | append(message)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "include_folders",
      "function": "input_select_path",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "assert include_files or include_folders, \"Both include_files and include_folders are False, which means the user can't select anything!\" | include_folders=True | include_folders=True",
      "transformation_code": "include_folders=True, include_files=True, file_extension_filter: str=None) -> str: | include_folders=True, allows the user to select a folder | input_select_path(root=None, *, sort_by='name', reverse=True, message: str=None, include_folders=True, include_files=True, file_extension_filter: str=None) | get_all_paths(root, sort_by=sort_by, include_files=False, include_folders=True)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "include_files",
      "function": "input_select_path",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "assert include_files or include_folders, \"Both include_files and include_folders are False, which means the user can't select anything!\" | include_files=True | include_files=True",
      "transformation_code": "include_files=True, file_extension_filter: str=None) -> str: | include_files=True, allows the user to select a file | input_select_path(root=None, *, sort_by='name', reverse=True, message: str=None, include_folders=True, include_files=True, file_extension_filter: str=None) | get_all_paths(root, sort_by=sort_by, include_files=False, include_folders=True)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "file_extension_filter",
      "function": "input_select_path",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "file_extension_filter=file_extension_filter",
      "transformation_code": "file_extension_filter=file_extension_filter) | input_select_path(root=None, *, sort_by='name', reverse=True, message: str=None, include_folders=True, include_files=True, file_extension_filter: str=None) | input_select_path(selected, sort_by=sort_by, reverse=reverse, message=message, include_files=include_files, include_folders=include_folders, file_extension_filter=file_extension_filter)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "root",
      "function": "input_select_folder",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "root=None | root=root",
      "transformation_code": "root=None, sort_by='name', reverse=True, message=None, file_extension_filter=None) -> str: | root=root, sort_by=sort_by, reverse=reverse, include_folders=True, include_files=False, message=message, file_extension_filter=file_extension_filter) | input_select_folder(root=None, sort_by='name', reverse=True, message=None, file_extension_filter=None) | input_select_path(root=root, sort_by=sort_by, reverse=reverse, include_folders=True, include_files=False, message=message, file_extension_filter=file_extension_filter)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "sort_by",
      "function": "input_select_folder",
      "default_value": "name",
      "usage_pattern": "simple_usage",
      "validation_code": "sort_by=sort_by",
      "transformation_code": "sort_by='name', reverse=True, message=None, file_extension_filter=None) -> str: | sort_by=sort_by, reverse=reverse, include_folders=True, include_files=False, message=message, file_extension_filter=file_extension_filter) | input_select_folder(root=None, sort_by='name', reverse=True, message=None, file_extension_filter=None) | input_select_path(root=root, sort_by=sort_by, reverse=reverse, include_folders=True, include_files=False, message=message, file_extension_filter=file_extension_filter)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "reverse",
      "function": "input_select_folder",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "reverse=True | reverse=reverse",
      "transformation_code": "reverse=True, message=None, file_extension_filter=None) -> str: | reverse=reverse, include_folders=True, include_files=False, message=message, file_extension_filter=file_extension_filter) | input_select_folder(root=None, sort_by='name', reverse=True, message=None, file_extension_filter=None) | input_select_path(root=root, sort_by=sort_by, reverse=reverse, include_folders=True, include_files=False, message=message, file_extension_filter=file_extension_filter)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "message",
      "function": "input_select_folder",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "message=None | message=message",
      "transformation_code": "message=None, file_extension_filter=None) -> str: | message=message, file_extension_filter=file_extension_filter) | input_select_folder(root=None, sort_by='name', reverse=True, message=None, file_extension_filter=None) | input_select_path(root=root, sort_by=sort_by, reverse=reverse, include_folders=True, include_files=False, message=message, file_extension_filter=file_extension_filter)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "file_extension_filter",
      "function": "input_select_folder",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "file_extension_filter=None | file_extension_filter=file_extension_filter",
      "transformation_code": "file_extension_filter=None) -> str: | file_extension_filter=file_extension_filter) | input_select_folder(root=None, sort_by='name', reverse=True, message=None, file_extension_filter=None) | input_select_path(root=root, sort_by=sort_by, reverse=reverse, include_folders=True, include_files=False, message=message, file_extension_filter=file_extension_filter)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "root",
      "function": "input_select_file",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "root=None | root=root",
      "transformation_code": "root=None, sort_by='name', reverse=True, message=None, file_extension_filter=None) -> str: | root=root, sort_by=sort_by, reverse=reverse, include_folders=False, include_files=True, message=message, file_extension_filter=file_extension_filter) | input_select_file(root=None, sort_by='name', reverse=True, message=None, file_extension_filter=None) | input_select_path(root=root, sort_by=sort_by, reverse=reverse, include_folders=False, include_files=True, message=message, file_extension_filter=file_extension_filter)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "sort_by",
      "function": "input_select_file",
      "default_value": "name",
      "usage_pattern": "simple_usage",
      "validation_code": "sort_by=sort_by",
      "transformation_code": "sort_by='name', reverse=True, message=None, file_extension_filter=None) -> str: | sort_by=sort_by, reverse=reverse, include_folders=False, include_files=True, message=message, file_extension_filter=file_extension_filter) | input_select_file(root=None, sort_by='name', reverse=True, message=None, file_extension_filter=None) | input_select_path(root=root, sort_by=sort_by, reverse=reverse, include_folders=False, include_files=True, message=message, file_extension_filter=file_extension_filter)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "reverse",
      "function": "input_select_file",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "reverse=True | reverse=reverse",
      "transformation_code": "reverse=True, message=None, file_extension_filter=None) -> str: | reverse=reverse, include_folders=False, include_files=True, message=message, file_extension_filter=file_extension_filter) | input_select_file(root=None, sort_by='name', reverse=True, message=None, file_extension_filter=None) | input_select_path(root=root, sort_by=sort_by, reverse=reverse, include_folders=False, include_files=True, message=message, file_extension_filter=file_extension_filter)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "message",
      "function": "input_select_file",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "message=None | message=message",
      "transformation_code": "message=None, file_extension_filter=None) -> str: | message=message, file_extension_filter=file_extension_filter) | input_select_file(root=None, sort_by='name', reverse=True, message=None, file_extension_filter=None) | input_select_path(root=root, sort_by=sort_by, reverse=reverse, include_folders=False, include_files=True, message=message, file_extension_filter=file_extension_filter)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "file_extension_filter",
      "function": "input_select_file",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "file_extension_filter=None | file_extension_filter=file_extension_filter",
      "transformation_code": "file_extension_filter=None) -> str: | file_extension_filter=file_extension_filter) | input_select_file(root=None, sort_by='name', reverse=True, message=None, file_extension_filter=None) | input_select_path(root=root, sort_by=sort_by, reverse=reverse, include_folders=False, include_files=True, message=message, file_extension_filter=file_extension_filter)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "file_extension",
      "function": "temporary_file_path",
      "default_value": "",
      "usage_pattern": "boolean_condition,method_call",
      "validation_code": "",
      "transformation_code": "file_extension = '.' + file_extension | temporary_file_path(file_extension: str='')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "code",
      "function": "python_2_to_3",
      "default_value": null,
      "usage_pattern": "method_call,type_check",
      "validation_code": "assert isinstance(code, str), 'code should be a string but got type ' + repr(type(code)) | isinstance(code, str) | input=code",
      "transformation_code": "python_2_to_3(code: str) | isinstance(code, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "code",
      "function": "strip_python_docstrings",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "code = strip_docstrings",
      "transformation_code": "code = '''def foo(): | code = strip_docstrings(code) | strip_python_docstrings(code: str) | strip_docstrings(code)",
      "error_handling": "",
      "documentation": "code: A string of Python code."
    },
    {
      "arg_name": "code",
      "function": "strip_python_comments",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "strip_python_comments(code: str) | join((token for token in split_python_tokens(code)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "string",
      "function": "strip_trailing_whitespace",
      "default_value": null,
      "usage_pattern": "method_call,iteration",
      "validation_code": "",
      "transformation_code": "strip_trailing_whitespace(string)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "string",
      "function": "delete_empty_lines",
      "default_value": null,
      "usage_pattern": "method_call,iteration",
      "validation_code": "",
      "transformation_code": "delete_empty_lines(string, strip_whitespace=False) | join([line for line in string.splitlines()",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "strip_whitespace",
      "function": "delete_empty_lines",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "strip_whitespace=False",
      "transformation_code": "strip_whitespace=False): | delete_empty_lines(string, strip_whitespace=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "string",
      "function": "propagate_whitespace",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "lines = string",
      "transformation_code": "propagate_whitespace(string)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "package",
      "function": "_vim_pip_install",
      "default_value": null,
      "usage_pattern": "equality_check",
      "validation_code": "",
      "transformation_code": "package=='ropevim' \"\"\" | _vim_pip_install(package)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "confirm",
      "function": "_set_ryan_vimrc",
      "default_value": false,
      "usage_pattern": "equality_check",
      "validation_code": "confirm=False",
      "transformation_code": "confirm=False): | confirm == 'NO' and (not confirm or input_yes_no(\"Would you like to add Ryan Burgert's vim settings to your ~/.vimrc?\")): | _set_ryan_vimrc(confirm=False) | and (not confirm or input_yes_no(\"Would you like to add Ryan Burgert's vim settings to your ~/.vimrc?\")",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "code",
      "function": "_sort_imports_via_isort",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_sort_imports_via_isort(code) | code(code)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "code",
      "function": "clean_imports_via_unimport",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "source=code | source=code",
      "transformation_code": "code = \"import numpy | clean_imports_via_unimport(code: str) | print(code)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "title",
      "function": "_run_sys_command",
      "default_value": "SYS COMMAND",
      "usage_pattern": "addition",
      "validation_code": "",
      "transformation_code": "title='SYS COMMAND'): | _run_sys_command(*command, title='SYS COMMAND') | fansi(title + ': ', 'bold green')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "name",
      "function": "_ensure_installed",
      "default_value": null,
      "usage_pattern": "addition,type_check",
      "validation_code": "assert isinstance(name, str) | isinstance(name, str)",
      "transformation_code": "_ensure_installed(name: str, *, windows=None, mac=None, linux=None, force=False) | isinstance(name, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "windows",
      "function": "_ensure_installed",
      "default_value": null,
      "usage_pattern": "none_check,type_check",
      "validation_code": "assert isinstance(windows, str) or windows is None | isinstance(windows, str) | windows=None",
      "transformation_code": "windows=None, mac=None, linux=None, force=False): | _ensure_installed(name: str, *, windows=None, mac=None, linux=None, force=False) | isinstance(windows, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "mac",
      "function": "_ensure_installed",
      "default_value": null,
      "usage_pattern": "none_check,type_check",
      "validation_code": "assert isinstance(mac, str) or mac is None | isinstance(mac, str) | mac=None",
      "transformation_code": "mac=None, linux=None, force=False): | _ensure_installed(name: str, *, windows=None, mac=None, linux=None, force=False) | isinstance(mac, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "linux",
      "function": "_ensure_installed",
      "default_value": null,
      "usage_pattern": "none_check,type_check",
      "validation_code": "assert isinstance(linux, str) or linux is None | isinstance(linux, str) | linux=None",
      "transformation_code": "linux=None, force=False): | _ensure_installed(name: str, *, windows=None, mac=None, linux=None, force=False) | isinstance(linux, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "force",
      "function": "_ensure_installed",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "force=False",
      "transformation_code": "force=False): | _ensure_installed(name: str, *, windows=None, mac=None, linux=None, force=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "_brew_install",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_brew_install(x) | quote(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "force",
      "function": "_install_ollama",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "force=False | force=force",
      "transformation_code": "force=False): | force=force) | _install_ollama(force=False) | _ensure_installed('ollama', mac='brew install ollama', linux='curl -fsSL https://ollama.com/install.sh | sh', windows='winget install --id=Ollama.Ollama', force=force)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "force",
      "function": "_install_lazygit",
      "default_value": false,
      "usage_pattern": "equality_check",
      "validation_code": "force=False | force==False.",
      "transformation_code": "force=False): | force==False.') | _install_lazygit(force=False) | and (not force)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "code",
      "function": "_run_ai_cli_coder",
      "default_value": null,
      "usage_pattern": "boolean_condition,method_call,type_check",
      "validation_code": "isinstance(code, str) | code = get_parent_directory | code = get_source_code",
      "transformation_code": "code = get_parent_directory(code) | code = get_source_code(code) | _run_ai_cli_coder(code, command='claude') | coder (such as gemini-cli or claudecode)",
      "error_handling": "try_except",
      "documentation": "code: A file path, directory path, or string containing code to edit"
    },
    {
      "arg_name": "command",
      "function": "_run_ai_cli_coder",
      "default_value": "claude",
      "usage_pattern": "method_call",
      "validation_code": "",
      "transformation_code": "command='claude'): | _run_ai_cli_coder(code, command='claude') | _run_sys_command(command)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "code",
      "function": "_run_claude_code",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_run_claude_code(code) | _run_ai_cli_coder(code, 'claude')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "code",
      "function": "_run_gemini_cli",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_run_gemini_cli(code) | _run_ai_cli_coder(code, 'gemini')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "port",
      "function": "_run_filebrowser",
      "default_value": 8080,
      "usage_pattern": "simple_usage",
      "validation_code": "port=8080 | port = get_next_free_port",
      "transformation_code": "port=8080, root='.'): | port = get_next_free_port(port) | _run_filebrowser(port=8080, root='.') | get_next_free_port(port)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "root",
      "function": "_run_filebrowser",
      "default_value": ".",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "root='.'): | _run_filebrowser(port=8080, root='.') | quote(root)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "port",
      "function": "get_port_is_taken",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "assert isinstance(port, int) | isinstance(port, int)",
      "transformation_code": "get_port_is_taken(port: int) | isinstance(port, int)",
      "error_handling": "try_except",
      "documentation": "port (int)"
    },
    {
      "arg_name": "port",
      "function": "get_next_free_port",
      "default_value": null,
      "usage_pattern": "boolean_condition,addition,type_check",
      "validation_code": "assert isinstance(port, int) | isinstance(port, int) | port=8080",
      "transformation_code": "port=8080 and port 8080 is taken, it tries port 8081. | port = get_next_free_port(port) | get_next_free_port(port, n=0) | get_next_free_port(port)",
      "error_handling": "",
      "documentation": "port (int)"
    },
    {
      "arg_name": "n",
      "function": "get_next_free_port",
      "default_value": 0,
      "usage_pattern": "boolean_condition",
      "validation_code": "n=0 | n=1 | n=2",
      "transformation_code": "n=0): | n=1, returns the second free port found | get_next_free_port(port, n=0) | port (int)",
      "error_handling": "",
      "documentation": "n (int)"
    },
    {
      "arg_name": "lazy",
      "function": "get_all_taken_ports",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "lazy=False | lazy=lazy",
      "transformation_code": "lazy=False, num_threads=None, show_progress=False, use_cache=False): | lazy=lazy, num_threads=None, show_progress=show_progress) | get_all_taken_ports(*, lazy=False, num_threads=None, show_progress=False, use_cache=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "num_threads",
      "function": "get_all_taken_ports",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "num_threads=None | num_threads=None",
      "transformation_code": "num_threads=None, show_progress=False, use_cache=False): | num_threads=None, show_progress=show_progress) | get_all_taken_ports(*, lazy=False, num_threads=None, show_progress=False, use_cache=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "show_progress",
      "function": "get_all_taken_ports",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "show_progress=False | show_progress=show_progress",
      "transformation_code": "show_progress=False, use_cache=False): | show_progress = 'eta:' + get_current_function_name() | get_all_taken_ports(*, lazy=False, num_threads=None, show_progress=False, use_cache=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "use_cache",
      "function": "get_all_taken_ports",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "use_cache=False",
      "transformation_code": "use_cache=False): | get_all_taken_ports(*, lazy=False, num_threads=None, show_progress=False, use_cache=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "port",
      "function": "get_process_using_port",
      "default_value": null,
      "usage_pattern": "equality_check,type_check",
      "validation_code": "assert get_port_is_taken(port) | isinstance(port, int) | 8080\n        >>> port",
      "transformation_code": "port = 8080 | port = 9999 | get_process_using_port(port: int, *, strict=True) | get_port_is_taken(port)",
      "error_handling": "try_except",
      "documentation": "port: The port number."
    },
    {
      "arg_name": "strict",
      "function": "get_process_using_port",
      "default_value": true,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "strict=True | strict=True | strict=None",
      "transformation_code": "strict=True): | strict=True (default) | get_process_using_port(port: int, *, strict=True) | get_process_using_port(port, strict=None)",
      "error_handling": "",
      "documentation": "strict: If True, raise RuntimeError if no process is found."
    },
    {
      "arg_name": "data",
      "function": "compress_bytes",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "compress_bytes(data: bytes) | compress(data)",
      "error_handling": "",
      "documentation": "data: The input bytes to compress"
    },
    {
      "arg_name": "compressed_data",
      "function": "decompress_bytes",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "decompress_bytes(compressed_data: bytes) | decompress(compressed_data)",
      "error_handling": "",
      "documentation": "compressed_data: The compressed bytes to decompress"
    },
    {
      "arg_name": "x",
      "function": "can_convert_object_to_bytes",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "can_convert_object_to_bytes(x: object) | pickles(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "_dill_dumps",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_dill_dumps(x) | dumps(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "object_to_bytes",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "object_to_bytes(x: object) | _dill_dumps(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "object_to_base64",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "object_to_base64(x) | bytes_to_base64(object_to_bytes(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "base64_to_object",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "base64_to_object(x) | bytes_to_object(base64_to_bytes(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "bytes_to_object",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "bytes_to_object(x: bytes) | loads(decompress_bytes(x)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "data",
      "function": "encode_bytes_to_image",
      "default_value": null,
      "usage_pattern": "length_check",
      "validation_code": "padded_data = data",
      "transformation_code": "data = data_with_length + b'\\x00' * (total_bytes_needed - total_len) | encode_bytes_to_image(data: bytes) | len(data)",
      "error_handling": "",
      "documentation": "data (bytes)"
    },
    {
      "arg_name": "image",
      "function": "decode_image_to_bytes",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "flattened = image",
      "transformation_code": "decode_image_to_bytes(image)",
      "error_handling": "",
      "documentation": "image (numpy.ndarray)"
    },
    {
      "arg_name": "data",
      "function": "_web_copy",
      "default_value": null,
      "usage_pattern": "length_check,type_check",
      "validation_code": "assert isinstance(data, bytes) | isinstance(data, bytes) | data = _WebCopyProgressTracker",
      "transformation_code": "data = _WebCopyProgressTracker(data, display_progress) | data = new_data | _web_copy(data: object, *, show_progress=False) | isinstance(data, bytes)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "show_progress",
      "function": "_web_copy",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "show_progress=False",
      "transformation_code": "show_progress=False) -> None: | _web_copy(data: object, *, show_progress=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "data",
      "function": "web_copy",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "web_copy(data: object, *, show_progress=False) | _web_copy(object_to_bytes(data)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "show_progress",
      "function": "web_copy",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "show_progress=False | show_progress=show_progress",
      "transformation_code": "show_progress=False) -> None: | show_progress=show_progress) | web_copy(data: object, *, show_progress=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "string",
      "function": "tmux_copy",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "assert isinstance(string, str), 'You can only copy a string to the tmux clipboard' | isinstance(string, str)",
      "transformation_code": "tmux_copy(string: str) | isinstance(string, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "data",
      "function": "local_copy",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "local_copy(data: object) | write(object_to_bytes(data)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "command",
      "function": "_run_tmux_command",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_run_tmux_command(command) | run(command, text=True, capture_output=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "filter_condition",
      "function": "_tmux_close_windows",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "",
      "transformation_code": "_tmux_close_windows(filter_condition)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "session",
      "function": "_get_all_tmux_clients",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_get_all_tmux_clients(session) | _run_tmux_command(['tmux', 'list-clients', '-t', session, '-F', '#{client_tty}'])",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "name",
      "function": "tmux_get_unique_session_name",
      "default_value": "",
      "usage_pattern": "addition",
      "validation_code": "candidate_name = name | candidate_name = name",
      "transformation_code": "name=''): | name = name | tmux_get_unique_session_name(name='') | bool(name)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "session_name",
      "function": "tmux_session_exists",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "assert isinstance(session_name, str), 'Session name must be a string.' | isinstance(session_name, str)",
      "transformation_code": "tmux_session_exists(session_name) | isinstance(session_name, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "session_name",
      "function": "tmux_kill_session",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "assert isinstance(session_name, str), 'Session name must be a string.' | isinstance(session_name, str)",
      "transformation_code": "tmux_kill_session(session_name, strict=False) | isinstance(session_name, str)",
      "error_handling": "",
      "documentation": "session_name (str)"
    },
    {
      "arg_name": "strict",
      "function": "tmux_kill_session",
      "default_value": false,
      "usage_pattern": "equality_check",
      "validation_code": "strict=False | strict==True",
      "transformation_code": "strict=False): | strict==True | tmux_kill_session(session_name, strict=False)",
      "error_handling": "",
      "documentation": "strict (bool, optional)"
    },
    {
      "arg_name": "strict",
      "function": "tmux_kill_sessions",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "strict=False",
      "transformation_code": "strict=False): | tmux_kill_sessions(*session_names, strict=False) | ValueError('rp.tmux_kill_sessions: Is strict and session %s doesnt exist' % repr(name)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "keystrokes",
      "function": "tmux_type_in_all_panes",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "tmux_type_in_all_panes(keystrokes: str, *, session: str=None, window: str=None)",
      "error_handling": "",
      "documentation": "keystrokes (str)"
    },
    {
      "arg_name": "session",
      "function": "tmux_type_in_all_panes",
      "default_value": null,
      "usage_pattern": "boolean_condition,addition",
      "validation_code": "target = session | target = session",
      "transformation_code": "tmux_type_in_all_panes(keystrokes: str, *, session: str=None, window: str=None) | ID (defaults to the current session)",
      "error_handling": "",
      "documentation": "session (str, optional)"
    },
    {
      "arg_name": "window",
      "function": "tmux_type_in_all_panes",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "tmux_type_in_all_panes(keystrokes: str, *, session: str=None, window: str=None) | session (defaults to the current window)",
      "error_handling": "",
      "documentation": "window (str, optional)"
    },
    {
      "arg_name": "session",
      "function": "_tmux_reset_all_panes",
      "default_value": null,
      "usage_pattern": "boolean_condition,addition",
      "validation_code": "target = session | target = session",
      "transformation_code": "_tmux_reset_all_panes(*, session: str=None, window: str=None) | ID (defaults to the current session)",
      "error_handling": "",
      "documentation": "session (str, optional)"
    },
    {
      "arg_name": "window",
      "function": "_tmux_reset_all_panes",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_tmux_reset_all_panes(*, session: str=None, window: str=None) | session (defaults to the current window)",
      "error_handling": "",
      "documentation": "window (str, optional)"
    },
    {
      "arg_name": "windows",
      "function": "tmuxp_create_session_yaml",
      "default_value": null,
      "usage_pattern": "method_call,iteration,type_check",
      "validation_code": "assert isinstance(windows, (str, list, dict)) | assert isinstance(windows, dict), 'Internal assertion' | assert all((isinstance(k, str) for k in windows.keys())), 'All window names must be strings'",
      "transformation_code": "windows = [windows] | windows = {str(i): e for (i, e) in enumerate(windows)} | tmuxp_create_session_yaml(windows, *, session_name=None, command_before=None) | windows (or a dict of windows, if you want control over the window names)",
      "error_handling": "",
      "documentation": "windows (or a dict of windows, if you want control over the window names)."
    },
    {
      "arg_name": "session_name",
      "function": "tmuxp_create_session_yaml",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check,type_check",
      "validation_code": "assert isinstance(session_name, str) or session_name is None | isinstance(session_name, str) | session_name=None",
      "transformation_code": "session_name=None, command_before=None): | session_name='my_session')) | tmuxp_create_session_yaml(windows, *, session_name=None, command_before=None) | print(tmuxp_create_session_yaml('echo 123',session_name='my_session')",
      "error_handling": "",
      "documentation": "session_name: '0'"
    },
    {
      "arg_name": "command_before",
      "function": "tmuxp_create_session_yaml",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check,type_check",
      "validation_code": "assert isinstance(command_before, (str, list)) or command_before is None | isinstance(command_before, (str, list) | command_before=None",
      "transformation_code": "command_before=None): | command_before=\"cd ~\")) | tmuxp_create_session_yaml(windows, *, session_name=None, command_before=None) | print(tmuxp_create_session_yaml([[['echo 1','echo 2','echo 3'],'echo 4','echo 5'],'echo 6'], command_before=\"cd ~\")",
      "error_handling": "",
      "documentation": "command_before: cd ~"
    },
    {
      "arg_name": "session_yaml",
      "function": "tmuxp_launch_session_from_yaml",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "assert isinstance(session_yaml, str), 'input should be a yaml string' | isinstance(session_yaml, str) | session_path = session_yaml",
      "transformation_code": "session_yaml = load_text_file(session_path) | tmuxp_launch_session_from_yaml(session_yaml, *, attach=False) | parse_yaml(session_yaml)",
      "error_handling": "",
      "documentation": "session_yaml("
    },
    {
      "arg_name": "attach",
      "function": "tmuxp_launch_session_from_yaml",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "attach=False | attach=True",
      "transformation_code": "attach=False): | attach=True, | tmuxp_launch_session_from_yaml(session_yaml, *, attach=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "notebook_path",
      "function": "_extract_code_cells_from_ipynb",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "notebook_path=None | notebook_path = input_select_file | notebook_path = os.path.expanduser",
      "transformation_code": "notebook_path=None): | notebook_path = input_select_file(file_extension_filter='ipynb') | _extract_code_cells_from_ipynb(notebook_path=None) | expanduser(notebook_path)",
      "error_handling": "",
      "documentation": "notebook_path (str, optional)"
    },
    {
      "arg_name": "notebook_path",
      "function": "exec_ipynb",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "exec_ipynb(notebook_path: str, *, scope=None, show_code=True) | _extract_code_cells_from_ipynb(notebook_path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "scope",
      "function": "exec_ipynb",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "scope=None | scope = get_scope",
      "transformation_code": "scope=None, show_code=True): | scope = get_scope(1) | exec_ipynb(notebook_path: str, *, scope=None, show_code=True) | TemporarilySetItem(scope, dict(_announce_cell=_announce_cell)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "show_code",
      "function": "exec_ipynb",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "show_code=True",
      "transformation_code": "show_code=True): | exec_ipynb(notebook_path: str, *, scope=None, show_code=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "notebook_path",
      "function": "extract_code_from_ipynb",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "notebook_path=None",
      "transformation_code": "notebook_path=None): | extract_code_from_ipynb(notebook_path=None) | _extract_code_cells_from_ipynb(notebook_path)",
      "error_handling": "",
      "documentation": "notebook_path (str, optional)"
    },
    {
      "arg_name": "email",
      "function": "_get_facebook_client",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_get_facebook_client(email, password) | Client(email, password)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "password",
      "function": "_get_facebook_client",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_get_facebook_client(email, password) | Client(email, password)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "message",
      "function": "send_facebook_message",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "m = message",
      "transformation_code": "send_facebook_message(message: str=None, my_email: str=None, my_password: str=None) | input_select(\"Please select the user you'd like to message: \", users, stringify=lambda x: x.name)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "my_email",
      "function": "send_facebook_message",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "e = my_email",
      "transformation_code": "send_facebook_message(message: str=None, my_email: str=None, my_password: str=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "my_password",
      "function": "send_facebook_message",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "p = my_password",
      "transformation_code": "send_facebook_message(message: str=None, my_email: str=None, my_password: str=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "my_email",
      "function": "get_all_facebook_messages",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "e = my_email",
      "transformation_code": "get_all_facebook_messages(my_email: str=None, my_password: str=None, my_name: str=None, max_number_of_messages: int=9999)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "my_password",
      "function": "get_all_facebook_messages",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "p = my_password",
      "transformation_code": "get_all_facebook_messages(my_email: str=None, my_password: str=None, my_name: str=None, max_number_of_messages: int=9999)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "my_name",
      "function": "get_all_facebook_messages",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "my_name = input",
      "transformation_code": "my_name = input('Please enter your name: ') | get_all_facebook_messages(my_email: str=None, my_password: str=None, my_name: str=None, max_number_of_messages: int=9999)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "max_number_of_messages",
      "function": "get_all_facebook_messages",
      "default_value": 9999,
      "usage_pattern": "simple_usage",
      "validation_code": "limit=max_number_of_messages",
      "transformation_code": "get_all_facebook_messages(my_email: str=None, my_password: str=None, my_name: str=None, max_number_of_messages: int=9999) | fetchThreadMessages(user_id, limit=max_number_of_messages)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "module",
      "function": "explore_torch_module",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "explore_torch_module(module) | explore_module(module)",
      "error_handling": "try_except",
      "documentation": "module(pipe.unet)"
    },
    {
      "arg_name": "module",
      "function": "record_torch_module_forward_stats",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "module! Records",
      "transformation_code": "record_torch_module_forward_stats(module) | record_module_forward_stats(module)",
      "error_handling": "",
      "documentation": "module(pipe)"
    },
    {
      "arg_name": "model",
      "function": "visualize_pytorch_model",
      "default_value": null,
      "usage_pattern": "method_call,type_check",
      "validation_code": "assert isinstance(model, torch.nn.Module) | isinstance(model, torch.nn.Module) | model = torchvision.models.vgg16",
      "transformation_code": "model = torchvision.models.vgg16() | model = model.cpu() | visualize_pytorch_model(model, *, input_shape=None, example_input=None, supress_warnings=True) | input_shape (particularly useful for networks that don't take torch.Tensor in their forward model)",
      "error_handling": "",
      "documentation": "model: should be some neural network model created in pytorch"
    },
    {
      "arg_name": "input_shape",
      "function": "visualize_pytorch_model",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "assert example_input is None or input_shape is None, 'Please only specify one, not both: either input_shape or example_input should be None' | input_shape=None",
      "transformation_code": "input_shape=None, example_input=None, supress_warnings=True): | input_shape = [1, *input_shape] | visualize_pytorch_model(model, *, input_shape=None, example_input=None, supress_warnings=True) | zeros(input_shape)",
      "error_handling": "",
      "documentation": "input_shape: should be the shape of a single input. For example, if MNIST is the input, input_shape should be [28, 28]."
    },
    {
      "arg_name": "example_input",
      "function": "visualize_pytorch_model",
      "default_value": null,
      "usage_pattern": "none_check",
      "validation_code": "assert example_input is None or input_shape is None, 'Please only specify one, not both: either input_shape or example_input should be None' | example_input=None | model_input = example_input",
      "transformation_code": "example_input=None, supress_warnings=True): | visualize_pytorch_model(model, *, input_shape=None, example_input=None, supress_warnings=True)",
      "error_handling": "",
      "documentation": "example_input: an alternative to using input_shape (particularly useful for networks that don't take torch.Tensor in their forward model)"
    },
    {
      "arg_name": "supress_warnings",
      "function": "visualize_pytorch_model",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "supress_warnings=True",
      "transformation_code": "supress_warnings=True): | visualize_pytorch_model(model, *, input_shape=None, example_input=None, supress_warnings=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "shape",
      "function": "get_sinusoidal_positional_encodings",
      "default_value": null,
      "usage_pattern": "equality_check,indexing,length_check,iteration,type_check",
      "validation_code": "assert result.shape == (*shape, sum(channels)) | assert position_encoding.shape == (shape, channels) | assert position_encoding.shape == (shape, channels)",
      "transformation_code": "shape=4, channels=4, scale=100) | shape=256, channels=128) | get_sinusoidal_positional_encodings(shape, channels, scale=10000.0) | be (shape, channels)",
      "error_handling": "",
      "documentation": "shape: int or list/tuple of ints"
    },
    {
      "arg_name": "channels",
      "function": "get_sinusoidal_positional_encodings",
      "default_value": null,
      "usage_pattern": "boolean_condition,iteration,addition,type_check",
      "validation_code": "assert result.shape == (*shape, sum(channels)) | assert position_encoding.shape == (shape, channels) | assert position_encoding.shape == (shape, channels)",
      "transformation_code": "channels=4, scale=100) | channels=128) | get_sinusoidal_positional_encodings(shape, channels, scale=10000.0) | be (shape, channels)",
      "error_handling": "",
      "documentation": "channels: int or list/tuple of ints"
    },
    {
      "arg_name": "scale",
      "function": "get_sinusoidal_positional_encodings",
      "default_value": 10000.0,
      "usage_pattern": "simple_usage",
      "validation_code": "scale=10000.0 | scale=100 | scale=10000",
      "transformation_code": "scale=10000.0): | scale=100) | get_sinusoidal_positional_encodings(shape, channels, scale=10000.0) | get_sinusoidal_positional_encodings(shape=4, channels=4, scale=100)",
      "error_handling": "",
      "documentation": "scale: float or list/tuple of floats, optional"
    },
    {
      "arg_name": "color",
      "function": "inverted_color",
      "default_value": null,
      "usage_pattern": "indexing,method_call,length_check,iteration,type_check",
      "validation_code": "isinstance(color, str) | hashtag = color | color = color",
      "transformation_code": "color = color[1:] | inverted_color(color) | is_binary_color(color)",
      "error_handling": "",
      "documentation": "color('#00FF00')      --->  #FF00FF               #If given color is in hex form, keep the hashtag"
    },
    {
      "arg_name": "image",
      "function": "inverted_image",
      "default_value": null,
      "usage_pattern": "indexing,method_call",
      "validation_code": "assert is_image(image) | image = image.copy | image = 255",
      "transformation_code": "image = image.copy() | image = 255 - image | inverted_image(image, invert_alpha=False) | is_image(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "invert_alpha",
      "function": "inverted_image",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "invert_alpha=False",
      "transformation_code": "invert_alpha=False): | inverted_image(image, invert_alpha=False) | and (not invert_alpha)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "images",
      "function": "inverted_images",
      "default_value": null,
      "usage_pattern": "iteration",
      "validation_code": "",
      "transformation_code": "inverted_images(images, invert_alpha=False) | is_numpy_array(images)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "invert_alpha",
      "function": "inverted_images",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "invert_alpha=False",
      "transformation_code": "invert_alpha=False): | inverted_images(images, invert_alpha=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "src_folder",
      "function": "make_zip_file_from_folder",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check,addition",
      "validation_code": "assert is_a_folder(src_folder) | src_folder = input_select_folder | new_path = src_folder",
      "transformation_code": "src_folder = input_select_folder() | make_zip_file_from_folder(src_folder: str=None, dst_zip_file: str=None) | is_a_folder(src_folder)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "dst_zip_file",
      "function": "make_zip_file_from_folder",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "dst_zip_file = new_path",
      "transformation_code": "dst_zip_file = new_path | make_zip_file_from_folder(src_folder: str=None, dst_zip_file: str=None) | move_file(tmp_path, dst_zip_file)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "zip_file_path",
      "function": "extract_zip_file",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "assert isinstance(zip_file_path, str) | isinstance(zip_file_path, str)",
      "transformation_code": "extract_zip_file(zip_file_path, folder_path=None, *, treat_as=None, show_progress=False) | strip_file_extension(zip_file_path)",
      "error_handling": "",
      "documentation": "zip_file_path (str)"
    },
    {
      "arg_name": "folder_path",
      "function": "extract_zip_file",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check,type_check",
      "validation_code": "assert isinstance(folder_path, str) | assert folder_exists(folder_path) | isinstance(folder_path, str)",
      "transformation_code": "folder_path=None, *, treat_as=None, show_progress=False): | folder_path = strip_file_extension(zip_file_path) | extract_zip_file(zip_file_path, folder_path=None, *, treat_as=None, show_progress=False) | isinstance(folder_path, str)",
      "error_handling": "",
      "documentation": "folder_path (str, optional)"
    },
    {
      "arg_name": "treat_as",
      "function": "extract_zip_file",
      "default_value": null,
      "usage_pattern": "equality_check",
      "validation_code": "assert treat_as in [None, 'zip', 'tar'], 'Currently treat_as only supports .zip and .tar files' | treat_as=None",
      "transformation_code": "treat_as=None, show_progress=False): | treat_as == 'zip': | extract_zip_file(zip_file_path, folder_path=None, *, treat_as=None, show_progress=False)",
      "error_handling": "",
      "documentation": "treat_as (str, optional)"
    },
    {
      "arg_name": "show_progress",
      "function": "extract_zip_file",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "show_progress=False",
      "transformation_code": "show_progress=False): | extract_zip_file(zip_file_path, folder_path=None, *, treat_as=None, show_progress=False)",
      "error_handling": "",
      "documentation": "show_progress (bool, optional)"
    },
    {
      "arg_name": "archive_path",
      "function": "_extract_archive_via_pyunpack",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_extract_archive_via_pyunpack(archive_path, folder_path) | get_file_extension(archive_path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "folder_path",
      "function": "_extract_archive_via_pyunpack",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_extract_archive_via_pyunpack(archive_path, folder_path) | extractall(folder_path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "folder",
      "function": "_maybe_unbury_folder",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "folder = paths",
      "transformation_code": "folder = paths[0] | _maybe_unbury_folder(folder) | get_all_paths(folder)",
      "error_handling": "",
      "documentation": "folder (str)"
    },
    {
      "arg_name": "bump_map",
      "function": "get_normal_map",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert is_image(bump_map) | bump_map = as_grayscale_image | bump_map = np.expand_dims",
      "transformation_code": "bump_map = as_grayscale_image(as_float_image(bump_map)) | bump_map = np.expand_dims(bump_map, 2) | get_normal_map(bump_map) | is_image(bump_map)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "sobel_edges",
      "default_value": null,
      "usage_pattern": "indexing",
      "validation_code": "assert is_image(image) | image = as_float_image | image = np.expand_dims",
      "transformation_code": "image = as_float_image(image) | image = np.expand_dims(image, 2) | sobel_edges(image) | load_image('https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcSwzqzyaeWqxfQiCnOqpnd1V27Wr8MOaZtfGQ&usqp=CAU')",
      "error_handling": "",
      "documentation": "image('https"
    },
    {
      "arg_name": "verbose",
      "function": "currently_running_desktop",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "verbose=False",
      "transformation_code": "verbose=False): | currently_running_desktop(*, verbose=False)",
      "error_handling": "",
      "documentation": "verbose (bool)"
    },
    {
      "arg_name": "string",
      "function": "_maybe_display_string_in_pager",
      "default_value": null,
      "usage_pattern": "length_check",
      "validation_code": "string = _line_numbered_string | string = fansi",
      "transformation_code": "string = _line_numbered_string(string) if with_line_numbers else string | string = fansi(\"There were %i lines with %i characters in the output, which would print out for many (%i) lines in your terminal. So, we're displaying them with rp.string_pager. Press 'q' to exit, -S to toggle line wrapping, and use arrow keys to navigate (or press 'h' for more help)\" % (number_of_lines(string), len(string), number_of_lines_in_terminal(string)), 'blue', 'bold') + '\\n' + display_string | _maybe_display_string_in_pager(string, with_line_numbers=True) | number_of_lines_in_terminal(string)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "with_line_numbers",
      "function": "_maybe_display_string_in_pager",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "with_line_numbers=True",
      "transformation_code": "with_line_numbers=True): | _maybe_display_string_in_pager(string, with_line_numbers=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "query",
      "function": "_fd",
      "default_value": null,
      "usage_pattern": "boolean_condition,method_call,length_check",
      "validation_code": "query = query.lower",
      "transformation_code": "query = query.lower() | _fd(query, select=False, silent=False) | highlighted(string, query)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "select",
      "function": "_fd",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "select=False",
      "transformation_code": "select=False, silent=False): | _fd(query, select=False, silent=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "silent",
      "function": "_fd",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "silent=False",
      "transformation_code": "silent=False): | _fd(query, select=False, silent=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image_file_path",
      "function": "get_image_file_dimensions",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert file_exists(image_file_path)",
      "transformation_code": "get_image_file_dimensions(image_file_path: str) | get_image_file_dimensions(image_file_path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "get_video_file_shape",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "path = get_absolute_path",
      "transformation_code": "path = get_absolute_path(path) | get_video_file_shape(path, use_cache=True) | load_video(path)",
      "error_handling": "",
      "documentation": "path (str)"
    },
    {
      "arg_name": "use_cache",
      "function": "get_video_file_shape",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "use_cache=True",
      "transformation_code": "use_cache=True): | get_video_file_shape(path, use_cache=True)",
      "error_handling": "",
      "documentation": "use_cache (bool)"
    },
    {
      "arg_name": "path",
      "function": "get_video_file_num_frames",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "get_video_file_num_frames(path, use_cache=True) | get_video_file_shape(path, use_cache)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "use_cache",
      "function": "get_video_file_num_frames",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "use_cache=True",
      "transformation_code": "use_cache=True): | get_video_file_num_frames(path, use_cache=True) | get_video_file_shape(path, use_cache)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "get_video_file_height",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "get_video_file_height(path, use_cache=True) | get_video_file_shape(path, use_cache)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "use_cache",
      "function": "get_video_file_height",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "use_cache=True",
      "transformation_code": "use_cache=True): | get_video_file_height(path, use_cache=True) | get_video_file_shape(path, use_cache)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "get_video_file_width",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "get_video_file_width(path, use_cache=True) | get_video_file_shape(path, use_cache)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "use_cache",
      "function": "get_video_file_width",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "use_cache=True",
      "transformation_code": "use_cache=True): | get_video_file_width(path, use_cache=True) | get_video_file_shape(path, use_cache)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "hsv_image",
      "function": "_hsv_to_rgb_via_numpy",
      "default_value": null,
      "usage_pattern": "indexing",
      "validation_code": "dtype=hsv_image",
      "transformation_code": "_hsv_to_rgb_via_numpy(hsv_image) | empty(hsv_image.shape, dtype=hsv_image.dtype)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "hsv_image",
      "function": "_hsv_to_rgb_via_numba",
      "default_value": null,
      "usage_pattern": "indexing",
      "validation_code": "dtype=hsv_image",
      "transformation_code": "_hsv_to_rgb_via_numba(hsv_image) | empty(hsv_image.shape, dtype=hsv_image.dtype)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "rgb_image",
      "function": "_rgb_to_hsv_via_numpy",
      "default_value": null,
      "usage_pattern": "indexing",
      "validation_code": "",
      "transformation_code": "_rgb_to_hsv_via_numpy(rgb_image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "rgb_image",
      "function": "_rgb_to_hsv_via_numba",
      "default_value": null,
      "usage_pattern": "indexing",
      "validation_code": "",
      "transformation_code": "_rgb_to_hsv_via_numba(rgb_image) | range(rgb_image.shape[0])",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "hsv_image",
      "function": "hsv_to_rgb",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert is_image(hsv_image) | hsv_image = as_rgb_image",
      "transformation_code": "hsv_image = as_rgb_image(as_float_image(hsv_image)) | hsv_to_rgb(hsv_image) | is_image(hsv_image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "rgb_image",
      "function": "rgb_to_hsv",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert is_image(rgb_image) | rgb_image = as_rgb_image",
      "transformation_code": "rgb_image = as_rgb_image(as_float_image(rgb_image)) | rgb_to_hsv(rgb_image) | is_image(rgb_image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "get_image_hue",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert is_image(image)",
      "transformation_code": "get_image_hue(image) | is_image(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "get_image_saturation",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert is_image(image)",
      "transformation_code": "get_image_saturation(image) | is_image(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "get_image_value",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert is_image(image)",
      "transformation_code": "get_image_value(image) | is_image(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "get_image_red",
      "default_value": null,
      "usage_pattern": "indexing",
      "validation_code": "image = as_numpy_image | image = as_rgb_image",
      "transformation_code": "image = as_numpy_image(image, copy=False) | image = as_rgb_image(image) | get_image_red(image) | as_numpy_image(image, copy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "get_image_green",
      "default_value": null,
      "usage_pattern": "indexing",
      "validation_code": "image = as_numpy_image | image = as_rgb_image",
      "transformation_code": "image = as_numpy_image(image, copy=False) | image = as_rgb_image(image) | get_image_green(image) | as_numpy_image(image, copy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "get_image_blue",
      "default_value": null,
      "usage_pattern": "indexing",
      "validation_code": "image = as_numpy_image | image = as_rgb_image",
      "transformation_code": "image = as_numpy_image(image, copy=False) | image = as_rgb_image(image) | get_image_blue(image) | as_numpy_image(image, copy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "_with_image_channel",
      "default_value": null,
      "usage_pattern": "indexing,addition",
      "validation_code": "assert is_image(image) | assert get_image_dimensions(image) == get_image_dimensions(color_img_or_value), 'Images must be the same size' | image = as_rgb_image",
      "transformation_code": "image = as_rgb_image(image) | image = as_float_image(image) | _with_image_channel(image, color_img_or_value, channel_idx) | is_image(image)",
      "error_handling": "",
      "documentation": "image: The main image"
    },
    {
      "arg_name": "color_img_or_value",
      "function": "_with_image_channel",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert is_image(color_img_or_value) or is_number(color_img_or_value) | assert get_image_dimensions(image) == get_image_dimensions(color_img_or_value), 'Images must be the same size' | color_image = color_img_or_value",
      "transformation_code": "_with_image_channel(image, color_img_or_value, channel_idx) | is_image(color_img_or_value)",
      "error_handling": "",
      "documentation": "color_img_or_value: Either an image of the color or a single numeric value."
    },
    {
      "arg_name": "channel_idx",
      "function": "_with_image_channel",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_with_image_channel(image, color_img_or_value, channel_idx)",
      "error_handling": "",
      "documentation": "channel_idx: The channel index (0 for red, 1 for green, 2 for blue)"
    },
    {
      "arg_name": "image",
      "function": "with_image_red",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "with_image_red(image, red) | _with_image_channel(image, red, 0)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "red",
      "function": "with_image_red",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "with_image_red(image, red) | _with_image_channel(image, red, 0)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "with_image_green",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "with_image_green(image, green) | _with_image_channel(image, green, 1)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "green",
      "function": "with_image_green",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "with_image_green(image, green) | _with_image_channel(image, green, 1)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "with_image_blue",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "with_image_blue(image, blue) | _with_image_channel(image, blue, 2)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "blue",
      "function": "with_image_blue",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "with_image_blue(image, blue) | _with_image_channel(image, blue, 2)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "with_image_hue",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "image = as_rgb_image | image = as_float_image",
      "transformation_code": "image = as_rgb_image(image) | image = as_float_image(image) | with_image_hue(image, hue) | extract_alpha_channel(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "hue",
      "function": "with_image_hue",
      "default_value": null,
      "usage_pattern": "indexing",
      "validation_code": "value = hue | hue = as_grayscale_image | hue = as_grayscale_image",
      "transformation_code": "hue = as_grayscale_image(image) | hue = as_grayscale_image(hue) | with_image_hue(image, hue) | is_number(hue)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "shift_image_hue",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "shift_image_hue(image, shift) | display_image(\n        >>>     shift_image_hue(\n        >>>         resize_image_to_fit(load_image_from_webcam()",
      "error_handling": "",
      "documentation": "image("
    },
    {
      "arg_name": "shift",
      "function": "shift_image_hue",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "shift_image_hue(image, shift) | display_image(\n        >>>     shift_image_hue(\n        >>>         resize_image_to_fit(load_image_from_webcam()",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "with_image_saturation",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "image = as_rgb_image | image = as_float_image",
      "transformation_code": "image = as_rgb_image(image) | image = as_float_image(image) | with_image_saturation(image, saturation) | extract_alpha_channel(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "saturation",
      "function": "with_image_saturation",
      "default_value": null,
      "usage_pattern": "indexing",
      "validation_code": "value = saturation | saturation = as_grayscale_image | saturation = as_grayscale_image",
      "transformation_code": "saturation = as_grayscale_image(image) | saturation = as_grayscale_image(saturation) | with_image_saturation(image, saturation) | is_number(saturation)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "with_image_brightness",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "image = as_rgb_image | image = as_float_image",
      "transformation_code": "image = as_rgb_image(image) | image = as_float_image(image) | with_image_brightness(image, brightness) | extract_alpha_channel(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "brightness",
      "function": "with_image_brightness",
      "default_value": null,
      "usage_pattern": "indexing",
      "validation_code": "value = brightness | brightness = as_grayscale_image | brightness = as_grayscale_image",
      "transformation_code": "brightness = as_grayscale_image(image) | brightness = as_grayscale_image(brightness) | with_image_brightness(image, brightness) | is_number(brightness)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "apply_colormap_to_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "image=load_image | image = as_numpy_image | image = as_rgb_image",
      "transformation_code": "image=load_image('https://www.gaytimes.co.uk/wp-content/uploads/2018/05/Kim-Petras-Thom-Kerr-header.jpg') | image = as_numpy_image(image) | apply_colormap_to_image(image, colormap_name='viridis') | display_image(apply_colormap_to_image(image,style)",
      "error_handling": "",
      "documentation": "image('https"
    },
    {
      "arg_name": "colormap_name",
      "function": "apply_colormap_to_image",
      "default_value": "viridis",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "colormap_name='viridis'): | apply_colormap_to_image(image, colormap_name='viridis') | applyColorMap(image, cmapy.cmap(colormap_name)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "text",
      "function": "zalgo_text",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "assert isinstance(text, str) | isinstance(text, str)",
      "transformation_code": "zalgo_text(text: str, amount: int=1) | isinstance(text, str)",
      "error_handling": "",
      "documentation": "text('Hello World',0) == 'Hello World'"
    },
    {
      "arg_name": "amount",
      "function": "zalgo_text",
      "default_value": 1,
      "usage_pattern": "equality_check,boolean_condition,addition,type_check",
      "validation_code": "assert isinstance(amount, int) | assert amount >= 0 | isinstance(amount, int)",
      "transformation_code": "amount == 0: | zalgo_text(text: str, amount: int=1) | isinstance(amount, int)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "text",
      "function": "big_ascii_text",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "text!\n    EXAMPLE | text = art.text2art",
      "transformation_code": "text = art.text2art(text, font) | big_ascii_text(text: str, *, font='standard') | text2art(text, font)",
      "error_handling": "",
      "documentation": "text('Hello World!')"
    },
    {
      "arg_name": "font",
      "function": "big_ascii_text",
      "default_value": "standard",
      "usage_pattern": "simple_usage",
      "validation_code": "assert font in art.FONT_NAMES, 'Please choose from the following fonts:' + '\\n' + repr(art.FONT_NAMES)",
      "transformation_code": "font='standard'): | big_ascii_text(text: str, *, font='standard') | text2art(text, font)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "data",
      "function": "bytes_to_file",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "assert isinstance(data, bytes), 'Expected bytes, got ' + str(type(data)) | isinstance(data, bytes)",
      "transformation_code": "bytes_to_file(data: bytes, path: str=None) | isinstance(data, bytes)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "bytes_to_file",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "path = temporary_file_path",
      "transformation_code": "path = temporary_file_path() | bytes_to_file(data: bytes, path: str=None) | open(path, 'wb')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "file_to_bytes",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "file_to_bytes(path: str, use_cache=False) | is_valid_url(path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "use_cache",
      "function": "file_to_bytes",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "use_cache=False",
      "transformation_code": "use_cache=False): | file_to_bytes(path: str, use_cache=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "file_to_base64",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "file_to_base64(path: str, use_cache=False) | bytes_to_base64(file_to_bytes(path, use_cache)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "use_cache",
      "function": "file_to_base64",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "use_cache=False",
      "transformation_code": "use_cache=False): | file_to_base64(path: str, use_cache=False) | bytes_to_base64(file_to_bytes(path, use_cache)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "file_to_object",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "file_to_object(path: str, use_cache=False) | bytes_to_object(file_to_bytes(path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "use_cache",
      "function": "file_to_object",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "use_cache=False",
      "transformation_code": "use_cache=False): | file_to_object(path: str, use_cache=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "object",
      "function": "object_to_file",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "object_to_file(object, path: str) | bytes_to_file(object_to_bytes(object)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "object_to_file",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "object_to_file(object, path: str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "bytestring",
      "function": "bytes_to_base64",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "bytes_to_base64(bytestring: bytes) | b64encode(bytestring)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "base64_string",
      "function": "base64_to_bytes",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "base64_to_bytes(base64_string: str) | b64decode(base64_string)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "bytestring",
      "function": "bytes_to_base16",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "bytes_to_base16(bytestring: bytes) | hexlify(bytestring)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "base16_string",
      "function": "base16_to_bytes",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "base16_to_bytes(base16_string: str) | unhexlify(base16_string)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "func",
      "function": "func_call_to_shell_command",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "func=func",
      "transformation_code": "func=func, args=args, kwargs=kwargs) | func_call_to_shell_command(func, *args, **kwargs) | dict(func=func, args=args, kwargs=kwargs)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "base64_string",
      "function": "_call_from_base64_string",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_call_from_base64_string(base64_string) | bytes_to_object(base64_to_bytes(base64_string)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "url",
      "function": "curl",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "curl(url: str) | request('GET', url)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "url",
      "function": "curl_bytes",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "assert isinstance(url, str) | isinstance(url, str)",
      "transformation_code": "curl_bytes(url) | display_image(decode_image_from_bytes(curl_bytes('https://fileinfo.com/img/ss/xl/jpg_44-2.jpg')",
      "error_handling": "",
      "documentation": "url (str)"
    },
    {
      "arg_name": "image",
      "function": "cv_image_filter",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert is_image(image), 'Input must be an image as defined by rp.is_image' | assert is_image(kernel), 'The kernel must also be an image as defined by rp.is_image' | image = _prepare_cv_image",
      "transformation_code": "image = _prepare_cv_image(image) | cv_image_filter(image, kernel) | load_image('https://mcusercontent.com/1f7db88dcefeafdd417098188/images/78188951-5329-4a51-8808-f68231d17609.png')",
      "error_handling": "",
      "documentation": "image('https"
    },
    {
      "arg_name": "kernel",
      "function": "cv_image_filter",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "assert is_image(kernel), 'The kernel must also be an image as defined by rp.is_image' | kernel=gaussian_kernel | kernel=resize_image",
      "transformation_code": "kernel=gaussian_kernel(40,40) | kernel=resize_image(kernel,(80,5)) | cv_image_filter(image, kernel) | resize_image(kernel,(80,5)",
      "error_handling": "",
      "documentation": "kernel(40,40)"
    },
    {
      "arg_name": "dim",
      "function": "random_rotation_matrix",
      "default_value": 3,
      "usage_pattern": "simple_usage",
      "validation_code": "dim=3",
      "transformation_code": "dim=3): | random_rotation_matrix(dim=3) | eye(dim)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "words",
      "function": "wordcloud_image",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "isinstance(words, str) | words = line_split | words = shuffled",
      "transformation_code": "words = '\\n'.join(words) | words = line_split(words) | wordcloud_image(words, width=512, height=512, colormap='viridis', **kwargs) | isinstance(words, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "width",
      "function": "wordcloud_image",
      "default_value": 512,
      "usage_pattern": "simple_usage",
      "validation_code": "width=512 | width=width",
      "transformation_code": "width=512, height=512, colormap='viridis', **kwargs): | width=width, height=height, collocations=False, colormap=colormap, **kwargs) | wordcloud_image(words, width=512, height=512, colormap='viridis', **kwargs) | WordCloud(width=width, height=height, collocations=False, colormap=colormap, **kwargs)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "height",
      "function": "wordcloud_image",
      "default_value": 512,
      "usage_pattern": "simple_usage",
      "validation_code": "height=512 | height=height",
      "transformation_code": "height=512, colormap='viridis', **kwargs): | height=height, collocations=False, colormap=colormap, **kwargs) | wordcloud_image(words, width=512, height=512, colormap='viridis', **kwargs) | WordCloud(width=width, height=height, collocations=False, colormap=colormap, **kwargs)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "colormap",
      "function": "wordcloud_image",
      "default_value": "viridis",
      "usage_pattern": "simple_usage",
      "validation_code": "colormap=colormap",
      "transformation_code": "colormap='viridis', **kwargs): | colormap=colormap, **kwargs) | wordcloud_image(words, width=512, height=512, colormap='viridis', **kwargs) | WordCloud(width=width, height=height, collocations=False, colormap=colormap, **kwargs)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "dataframe",
      "function": "display_pandas_correlation_heatmap",
      "default_value": null,
      "usage_pattern": "method_call,type_check",
      "validation_code": "assert isinstance(dataframe, pd.DataFrame) | isinstance(dataframe, pd.DataFrame) | dataframe=pip_import",
      "transformation_code": "dataframe=pip_import('pandas').read_csv('https://raw.githubusercontent.com/mwaskom/seaborn-data/master/titanic.csv')) | display_pandas_correlation_heatmap(dataframe, *, title=None, show_numbers=False, method='pearson', block=False) | display_pandas_correlation_heatmap(show_numbers=True,dataframe=pip_import('pandas')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "title",
      "function": "display_pandas_correlation_heatmap",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "title=None",
      "transformation_code": "title=None, show_numbers=False, method='pearson', block=False): | display_pandas_correlation_heatmap(dataframe, *, title=None, show_numbers=False, method='pearson', block=False) | title(title)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "show_numbers",
      "function": "display_pandas_correlation_heatmap",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "show_numbers=False | show_numbers=True | annot=show_numbers",
      "transformation_code": "show_numbers=False, method='pearson', block=False): | show_numbers=True,dataframe=pip_import('pandas').read_csv('https://raw.githubusercontent.com/mwaskom/seaborn-data/master/titanic.csv')) | display_pandas_correlation_heatmap(dataframe, *, title=None, show_numbers=False, method='pearson', block=False) | display_pandas_correlation_heatmap(show_numbers=True,dataframe=pip_import('pandas')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "method",
      "function": "display_pandas_correlation_heatmap",
      "default_value": "pearson",
      "usage_pattern": "simple_usage",
      "validation_code": "method=method",
      "transformation_code": "method='pearson', block=False): | method=method) | display_pandas_correlation_heatmap(dataframe, *, title=None, show_numbers=False, method='pearson', block=False) | corr(method=method)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "block",
      "function": "display_pandas_correlation_heatmap",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "block=False | block=block",
      "transformation_code": "block=False): | block=block) | display_pandas_correlation_heatmap(dataframe, *, title=None, show_numbers=False, method='pearson', block=False) | update_display(block=block)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "data",
      "function": "view_table",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "isinstance(data, str)",
      "transformation_code": "view_table(data) | view(data)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "target",
      "function": "launch_visidata",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "isinstance(target, str)",
      "transformation_code": "launch_visidata(target) | isinstance(target, str)",
      "error_handling": "",
      "documentation": "target (str or data object)"
    },
    {
      "arg_name": "entry",
      "function": "_write_to_pterm_hist",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "assert isinstance(entry, str) | isinstance(entry, str)",
      "transformation_code": "_write_to_pterm_hist(entry) | isinstance(entry, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "_prepare_cv_image",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "assert is_image(image) | image = as_numpy_image | image = image.astype",
      "transformation_code": "image = as_numpy_image(image) | image = image.astype(_float_image_dtype()) | _prepare_cv_image(image) | is_image(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "cv_resize_image",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "assert is_image(image) | image = pil_text_to_image | image = as_byte_image",
      "transformation_code": "image = pil_text_to_image( | image = as_byte_image(image) | cv_resize_image(image, size, interp='auto', *, alpha_weighted=False, copy=True) | display_image(\n        ...     vertically_concatenated_images(\n        ...                                 cv_resize_image(text_image, 0.25                      )",
      "error_handling": "",
      "documentation": "image (which uses scipy), except this uses OpenCV and is much faster"
    },
    {
      "arg_name": "size",
      "function": "cv_resize_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "size=256",
      "transformation_code": "size=256, color=(1, 0, 0, 1), background_color=(0, 0, 1, 0) | cv_resize_image(image, size, interp='auto', *, alpha_weighted=False, copy=True) | pil_text_to_image(\n        ...     \"Hello World\", size=256, color=(1, 0, 0, 1)",
      "error_handling": "",
      "documentation": "size (scalar or (h,w) tuple)"
    },
    {
      "arg_name": "interp",
      "function": "cv_resize_image",
      "default_value": "auto",
      "usage_pattern": "equality_check,boolean_condition",
      "validation_code": "assert interp in interp_methods, 'cv_resize_image: Interp must be one of the following: %s' % str(list(interp_methods)) | interp_method = interp | interpolation=interp",
      "transformation_code": "interp='auto', *, alpha_weighted=False, copy=True): | interp == 'pyrdown': | cv_resize_image(image, size, interp='auto', *, alpha_weighted=False, copy=True) | _alpha_weighted_rgba_image_func(cv_resize_image, image, size, interp)",
      "error_handling": "",
      "documentation": "interp (str) options"
    },
    {
      "arg_name": "alpha_weighted",
      "function": "cv_resize_image",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "alpha_weighted=False | alpha_weighted=True | alpha_weighted=True",
      "transformation_code": "alpha_weighted=False, copy=True): | alpha_weighted=True | cv_resize_image(image, size, interp='auto', *, alpha_weighted=False, copy=True) | with_alpha_checkerboard(cv_resize_image(text_image, 0.25, alpha_weighted=True )",
      "error_handling": "",
      "documentation": "alpha_weighted (bool)"
    },
    {
      "arg_name": "copy",
      "function": "cv_resize_image",
      "default_value": true,
      "usage_pattern": "equality_check,boolean_condition",
      "validation_code": "copy=True | copy==False",
      "transformation_code": "copy=True): | copy==False, and the size doesn't change the image, just returns the original image as is without copying it | cv_resize_image(image, size, interp='auto', *, alpha_weighted=False, copy=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "size",
      "function": "_size_to_height_width",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert size >= 0, 'Cannot resize an image by a negative factor' | size >= 0",
      "transformation_code": "_size_to_height_width(size, in_height, in_width) | is_number(size)",
      "error_handling": "",
      "documentation": "size (either a scalar or (height, width) tuple"
    },
    {
      "arg_name": "in_height",
      "function": "_size_to_height_width",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "height = in_height",
      "transformation_code": "_size_to_height_width(size, in_height, in_width) | ceil(in_height * size)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "in_width",
      "function": "_size_to_height_width",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "width = in_width",
      "transformation_code": "_size_to_height_width(size, in_height, in_width) | ceil(in_width * size)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "size",
      "function": "cv_resize_images",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "cv_resize_images(*images, size, interp='auto', alpha_weighted=False, show_progress=False, copy=True, lazy=False) | cv_resize_image(image, size, interp, copy=copy)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "interp",
      "function": "cv_resize_images",
      "default_value": "auto",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "interp='auto', alpha_weighted=False, show_progress=False, copy=True, lazy=False): | cv_resize_images(*images, size, interp='auto', alpha_weighted=False, show_progress=False, copy=True, lazy=False) | cv_resize_image(image, size, interp, copy=copy)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "alpha_weighted",
      "function": "cv_resize_images",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "alpha_weighted=False",
      "transformation_code": "alpha_weighted=False, show_progress=False, copy=True, lazy=False): | cv_resize_images(*images, size, interp='auto', alpha_weighted=False, show_progress=False, copy=True, lazy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "show_progress",
      "function": "cv_resize_images",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "show_progress=False",
      "transformation_code": "show_progress=False, copy=True, lazy=False): | cv_resize_images(*images, size, interp='auto', alpha_weighted=False, show_progress=False, copy=True, lazy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "copy",
      "function": "cv_resize_images",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "copy=True | copy=copy",
      "transformation_code": "copy=True, lazy=False): | copy=copy) for image in images) | cv_resize_images(*images, size, interp='auto', alpha_weighted=False, show_progress=False, copy=True, lazy=False) | cv_resize_image(image, size, interp, copy=copy)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "lazy",
      "function": "cv_resize_images",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "lazy=False",
      "transformation_code": "lazy=False): | cv_resize_images(*images, size, interp='auto', alpha_weighted=False, show_progress=False, copy=True, lazy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "size",
      "function": "resize_videos",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "size=size",
      "transformation_code": "size=size, interp=interp, alpha_weighted=alpha_weighted, show_progress=False, lazy=lazy_frames) for video in videos) | resize_videos(*videos, size, interp='auto', alpha_weighted=False, show_progress=False, lazy=False, lazy_frames=False) | resize_images(video, size=size, interp=interp, alpha_weighted=alpha_weighted, show_progress=False, lazy=lazy_frames)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "interp",
      "function": "resize_videos",
      "default_value": "auto",
      "usage_pattern": "simple_usage",
      "validation_code": "interp=interp",
      "transformation_code": "interp='auto', alpha_weighted=False, show_progress=False, lazy=False, lazy_frames=False): | interp=interp, alpha_weighted=alpha_weighted, show_progress=False, lazy=lazy_frames) for video in videos) | resize_videos(*videos, size, interp='auto', alpha_weighted=False, show_progress=False, lazy=False, lazy_frames=False) | resize_images(video, size=size, interp=interp, alpha_weighted=alpha_weighted, show_progress=False, lazy=lazy_frames)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "alpha_weighted",
      "function": "resize_videos",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "alpha_weighted=False | alpha_weighted=alpha_weighted",
      "transformation_code": "alpha_weighted=False, show_progress=False, lazy=False, lazy_frames=False): | alpha_weighted=alpha_weighted, show_progress=False, lazy=lazy_frames) for video in videos) | resize_videos(*videos, size, interp='auto', alpha_weighted=False, show_progress=False, lazy=False, lazy_frames=False) | resize_images(video, size=size, interp=interp, alpha_weighted=alpha_weighted, show_progress=False, lazy=lazy_frames)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "show_progress",
      "function": "resize_videos",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "show_progress=False | show_progress=False",
      "transformation_code": "show_progress=False, lazy=False, lazy_frames=False): | show_progress=False, lazy=lazy_frames) for video in videos) | resize_videos(*videos, size, interp='auto', alpha_weighted=False, show_progress=False, lazy=False, lazy_frames=False) | resize_images(video, size=size, interp=interp, alpha_weighted=alpha_weighted, show_progress=False, lazy=lazy_frames)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "lazy",
      "function": "resize_videos",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "lazy=False | lazy=lazy_frames",
      "transformation_code": "lazy=False, lazy_frames=False): | lazy=lazy_frames) for video in videos) | resize_videos(*videos, size, interp='auto', alpha_weighted=False, show_progress=False, lazy=False, lazy_frames=False) | resize_images(video, size=size, interp=interp, alpha_weighted=alpha_weighted, show_progress=False, lazy=lazy_frames)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "lazy_frames",
      "function": "resize_videos",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "lazy_frames=False | lazy=lazy_frames",
      "transformation_code": "lazy_frames=False): | resize_videos(*videos, size, interp='auto', alpha_weighted=False, show_progress=False, lazy=False, lazy_frames=False) | resize_images(video, size=size, interp=interp, alpha_weighted=alpha_weighted, show_progress=False, lazy=lazy_frames)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "skia_resize_image",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "assert image.ndim == 3 | assert image.shape[2] == 4 | assert image.dtype == np.uint8",
      "transformation_code": "image = cv_resize_image(co, (new_height, new_width), interp='auto') | image = resized_image = cv_resize_image(co, (new_height, new_width), interp='pyrdown') | skia_resize_image(image, size, interp='auto') | shift_image_hue(resized_image,len(interp)",
      "error_handling": "",
      "documentation": "image:"
    },
    {
      "arg_name": "size",
      "function": "skia_resize_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "size=32",
      "transformation_code": "size=32) | skia_resize_image(image, size, interp='auto') | get_checkerboard_image(RES*FACTOR,RES*FACTOR,tile_size=32)",
      "error_handling": "",
      "documentation": "size: A tuple (height, width) for the target size, or a scalar"
    },
    {
      "arg_name": "interp",
      "function": "skia_resize_image",
      "default_value": "auto",
      "usage_pattern": "equality_check,boolean_condition,length_check",
      "validation_code": "",
      "transformation_code": "interp='auto'): | interp='auto') | skia_resize_image(image, size, interp='auto') | shift_image_hue(resized_image,len(interp)",
      "error_handling": "",
      "documentation": "interp: Interpolation mode. Can be 'nearest', 'linear', 'cubic',"
    },
    {
      "arg_name": "image",
      "function": "torch_resize_image",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "assert rp.r.is_torch_image(image) | assert out.shape == (image.shape[0], height, width) | image = load_image",
      "transformation_code": "image = load_image('https://avatars.githubusercontent.com/u/17944835?v=4&size=64') | image=as_torch_image(image) | torch_resize_image(image, size, interp='auto', *, copy=True) | as_torch_image(image)",
      "error_handling": "",
      "documentation": "image('https"
    },
    {
      "arg_name": "size",
      "function": "torch_resize_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "size=64",
      "transformation_code": "size=64') | size=(height, width), mode=interp), '1 c h w -> c h w') | torch_resize_image(image, size, interp='auto', *, copy=True) | load_image('https://avatars.githubusercontent.com/u/17944835?v=4&size=64')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "interp",
      "function": "torch_resize_image",
      "default_value": "auto",
      "usage_pattern": "equality_check,boolean_condition",
      "validation_code": "assert interp in interp_methods, 'torch_resize_image: Interp must be one of the following: %s' % str(list(interp_methods)) | mode=interp",
      "transformation_code": "interp='auto', *, copy=True): | interp == 'auto': | torch_resize_image(image, size, interp='auto', *, copy=True) | str(list(interp_methods)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "copy",
      "function": "torch_resize_image",
      "default_value": true,
      "usage_pattern": "equality_check,boolean_condition",
      "validation_code": "copy=True | copy==False",
      "transformation_code": "copy=True): | copy==False, and the size doesn't change the image, just returns the original image as is without copying it | torch_resize_image(image, size, interp='auto', *, copy=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "size",
      "function": "torch_resize_images",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "torch_resize_images(*images, size, interp='auto', copy=True) | gather_args_call(torch_resize_image, x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "interp",
      "function": "torch_resize_images",
      "default_value": "auto",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "interp='auto', copy=True): | torch_resize_images(*images, size, interp='auto', copy=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "copy",
      "function": "torch_resize_images",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "copy=True",
      "transformation_code": "copy=True): | torch_resize_images(*images, size, interp='auto', copy=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "torch_remap_image",
      "default_value": null,
      "usage_pattern": "equality_check,indexing",
      "validation_code": "assert (image==new_image).all() | assert rp.r.is_torch_image(image), 'image must be a torch tensor with shape [C, H, W]' | assert image.device == x.device == y.device, 'all inputs must be on the same device'",
      "transformation_code": "image = as_torch_image( | image = torch.rand(real_image.shape) | torch_remap_image(image, x, y, *, relative=False, interp='bilinear', add_alpha_mask=False, use_cached_meshgrid=False) | as_torch_image(\n        ...         rp.cv_resize_image(\n        ...             load_image(\n        ...                 \"https://i.natgeofe.com/n/4f5aaece-3300-41a4-b2a8-ed2708a0a27c/domestic-dog_thumb_square.jpg\"\n        ...             )",
      "error_handling": "",
      "documentation": "image()"
    },
    {
      "arg_name": "x",
      "function": "torch_remap_image",
      "default_value": null,
      "usage_pattern": "addition",
      "validation_code": "assert is_torch_tensor(x) and is_a_matrix(x), 'x must be a torch tensor with shape [H_out, W_out]' | assert x.shape == y.shape, 'x and y must have the same shape, but got x.shape={} and y.shape={}'.format(x.shape, y.shape) | assert image.device == x.device == y.device, 'all inputs must be on the same device'",
      "transformation_code": "x = torch.meshgrid(torch.arange(h), torch.arange(w)) | x = wave_amp * torch.cos(dist_from_center * wave_freq + angle_from_center + wave_offset) | torch_remap_image(image, x, y, *, relative=False, interp='bilinear', add_alpha_mask=False, use_cached_meshgrid=False) | deltas (dx and dy)",
      "error_handling": "",
      "documentation": "x (torch.Tensor)"
    },
    {
      "arg_name": "y",
      "function": "torch_remap_image",
      "default_value": null,
      "usage_pattern": "addition",
      "validation_code": "assert is_torch_tensor(y) and is_a_matrix(y), 'y must be a torch tensor with shape [H_out, W_out]' | assert x.shape == y.shape, 'x and y must have the same shape, but got x.shape={} and y.shape={}'.format(x.shape, y.shape) | assert image.device == x.device == y.device, 'all inputs must be on the same device'",
      "transformation_code": "y = w // 2, h // 2 | y = wave_amp * torch.sin(dist_from_center * wave_freq + angle_from_center + wave_offset) | torch_remap_image(image, x, y, *, relative=False, interp='bilinear', add_alpha_mask=False, use_cached_meshgrid=False) | deltas (dx and dy)",
      "error_handling": "",
      "documentation": "y (torch.Tensor)"
    },
    {
      "arg_name": "relative",
      "function": "torch_remap_image",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "assert in_height == out_height, 'For relative warping, input and output heights must match, but got in_height={} and out_height={}'.format(in_height, out_height) | assert in_width == out_width, 'For relative warping, input and output widths must match, but got in_width={} and out_width={}'.format(in_width, out_width) | relative=False",
      "transformation_code": "relative=False, interp='bilinear', add_alpha_mask=False, use_cached_meshgrid=False): | relative=True, it will warp the image - treating x and y like dx and dy. | torch_remap_image(image, x, y, *, relative=False, interp='bilinear', add_alpha_mask=False, use_cached_meshgrid=False) | torch_remap_image(real_image, dx, dy, relative=True, interp='bilinear', add_alpha_mask=True)",
      "error_handling": "",
      "documentation": "relative (bool, optional)"
    },
    {
      "arg_name": "interp",
      "function": "torch_remap_image",
      "default_value": "bilinear",
      "usage_pattern": "simple_usage",
      "validation_code": "assert interp in interp_methods, 'torch_remap_image: interp must be one of the following: {}'.format(list(interp_methods)) | interp_mode = interp | mode=interp",
      "transformation_code": "interp='bilinear', add_alpha_mask=False, use_cached_meshgrid=False): | interp='bilinear', add_alpha_mask=True)     | torch_remap_image(image, x, y, *, relative=False, interp='bilinear', add_alpha_mask=False, use_cached_meshgrid=False) | torch_remap_image(real_image, dx, dy, relative=True, interp='bilinear', add_alpha_mask=True)",
      "error_handling": "",
      "documentation": "interp (str, optional)"
    },
    {
      "arg_name": "add_alpha_mask",
      "function": "torch_remap_image",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "add_alpha_mask=False | add_alpha_mask=True | add_alpha_mask=False",
      "transformation_code": "add_alpha_mask=False, use_cached_meshgrid=False): | add_alpha_mask=True, an additional alpha channel full of 1's will be concatenated to the input image tensor. | torch_remap_image(image, x, y, *, relative=False, interp='bilinear', add_alpha_mask=False, use_cached_meshgrid=False) | torch_remap_image(real_image, dx, dy, relative=True, interp='bilinear', add_alpha_mask=True)",
      "error_handling": "",
      "documentation": "add_alpha_mask (bool, optional)"
    },
    {
      "arg_name": "use_cached_meshgrid",
      "function": "torch_remap_image",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "use_cached_meshgrid=False",
      "transformation_code": "use_cached_meshgrid=False): | torch_remap_image(image, x, y, *, relative=False, interp='bilinear', add_alpha_mask=False, use_cached_meshgrid=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "apply_uv_map",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert not is_grayscale_image(image), 'A grayscale UV map is pretty dang useless. You sure you didnt make a mistake?' | assert not is_binary_image(image), 'A binary UV map is pretty dang useless. You sure you didnt make a mistake?' | assert not is_grayscale_image(image), 'A grayscale UV map is pretty dang useless. You sure you didnt make a mistake?'",
      "transformation_code": "image = load_image( | image = cv_resize_image(image, 0.5) | apply_uv_map(image, uv_map, *, uv_form='xy', interp='bilinear', relative=False) | cv_resize_image(image, 0.5)",
      "error_handling": "",
      "documentation": "image (since this is what we would normally backprop through if it is torch)"
    },
    {
      "arg_name": "uv_map",
      "function": "apply_uv_map",
      "default_value": null,
      "usage_pattern": "indexing",
      "validation_code": "assert uv_map.ndim == 3, 'rp.apply_uv_map: uv_map, if torch tensor, should be in CHW form if a torch tensor. Given ' + str(uv_map.shape) | assert False, 'rp.apply_uv_map: Invalid uv_map of type ' + str(type(uv_map)) + '  | assert image.ndim == 3, 'rp.apply_uv_map: image, if torch tensor, should be in CHW form if a torch tensor. Given ' + str(uv_map.shape)",
      "transformation_code": "uv_map = load_image( | uv_map=as_torch_image(as_float_image(uv_map)) | apply_uv_map(image, uv_map, *, uv_form='xy', interp='bilinear', relative=False) | load_image(\n        ...     \"https://github.com/RyannDaGreat/Images/blob/master/test_images/parker_puzzle_uv_map.png?raw=true\",\n        ...     use_cache=True,\n        ... )",
      "error_handling": "",
      "documentation": "uv_map(image, uv_map),"
    },
    {
      "arg_name": "uv_form",
      "function": "apply_uv_map",
      "default_value": "xy",
      "usage_pattern": "method_call",
      "validation_code": "assert uv_form in ['xy', 'yx'], 'rp.apply_uv_map: uv_form should be either \"xy\" or \"yx\", but is ' + repr(uv_form) | xi = uv_form | yi = uv_form",
      "transformation_code": "uv_form='xy', interp='bilinear', relative=False): | apply_uv_map(image, uv_map, *, uv_form='xy', interp='bilinear', relative=False) | repr(uv_form)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "interp",
      "function": "apply_uv_map",
      "default_value": "bilinear",
      "usage_pattern": "simple_usage",
      "validation_code": "interp=interp | interp=interp",
      "transformation_code": "interp='bilinear', relative=False): | interp=interp, relative=relative) | apply_uv_map(image, uv_map, *, uv_form='xy', interp='bilinear', relative=False) | cv_remap_image(image, x, y, interp=interp, relative=relative)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "relative",
      "function": "apply_uv_map",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "relative=False | relative=relative | relative=relative",
      "transformation_code": "relative=False): | relative=relative) | apply_uv_map(image, uv_map, *, uv_form='xy', interp='bilinear', relative=False) | cv_remap_image(image, x, y, interp=interp, relative=relative)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "height",
      "function": "get_identity_uv_map",
      "default_value": 256,
      "usage_pattern": "simple_usage",
      "validation_code": "height=256",
      "transformation_code": "height=256, width=256, uv_form='xy'): | get_identity_uv_map(height=256, width=256, uv_form='xy') | zeros((height, width, 3)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "width",
      "function": "get_identity_uv_map",
      "default_value": 256,
      "usage_pattern": "simple_usage",
      "validation_code": "width=256",
      "transformation_code": "width=256, uv_form='xy'): | get_identity_uv_map(height=256, width=256, uv_form='xy') | zeros((height, width, 3)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "uv_form",
      "function": "get_identity_uv_map",
      "default_value": "xy",
      "usage_pattern": "method_call",
      "validation_code": "assert uv_form in ['xy', 'yx'], 'rp.get_identity_uv_map: uv_form should be either \"xy\" or \"yx\", but is ' + repr(uv_form) | uv_form=f | uv_form=xy",
      "transformation_code": "uv_form='xy'): | uv_form=f) for f in \"xy yx\".split()], | get_identity_uv_map(height=256, width=256, uv_form='xy') | display_image(\n        ...     with_alpha_checkerboard(\n        ...         with_drop_shadow(\n        ...             tiled_images(\n        ...                 labeled_images(\n        ...                     [get_identity_uv_map(uv_form=f)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "return_dims",
      "function": "validate_tensor_shapes",
      "default_value": null,
      "usage_pattern": "boolean_condition,method_call,type_check",
      "validation_code": "assert isinstance(return_dims, str), type(return_dims) | isinstance(return_dims, str) | return_dims=None",
      "transformation_code": "return_dims=None, *, verbose=False, **kwargs): | return_dims = return_dims.split() | validate_tensor_shapes(return_dims=None, *, verbose=False, **kwargs) | isinstance(return_dims, str)",
      "error_handling": "",
      "documentation": "return_dims: String of space-separated dimension names to return (e.g., \"H W\")."
    },
    {
      "arg_name": "verbose",
      "function": "validate_tensor_shapes",
      "default_value": false,
      "usage_pattern": "type_check",
      "validation_code": "isinstance(verbose, str) | verbose=False",
      "transformation_code": "verbose=False, **kwargs): | verbose='bold white random green', | validate_tensor_shapes(return_dims=None, *, verbose=False, **kwargs) | validate_shapes(\n            ...     video ='torch: PT PH PW RGB',\n            ...     mask  ='torch: PT PH PW',\n            ...     tracks='numpy: PT N XY',\n            ...     track_colors='N LC',\n            ...     dotted_latent='LT LC LH LW',\n            ...     verbose='bold white random green',\n            ...     XY = 2, #Keeping XY to show that X and Y are the ordering\n            ...     XY = 3,\n            ... )",
      "error_handling": "",
      "documentation": "verbose: Boolean, if True suppresses shape information printing (default"
    },
    {
      "arg_name": "x",
      "function": "_ceil",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "",
      "transformation_code": "_ceil(x) | is_numpy_array(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "_floor",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "",
      "transformation_code": "_floor(x) | is_numpy_array(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "_round",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "",
      "transformation_code": "_round(x) | is_numpy_array(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "_sin",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_sin(x) | is_numpy_array(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "_cos",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_cos(x) | is_numpy_array(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "_tan",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_tan(x) | is_numpy_array(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "_exp",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_exp(x) | is_numpy_array(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "_log",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_log(x) | is_numpy_array(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "_log10",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_log10(x) | is_numpy_array(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "_sqrt",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_sqrt(x) | is_numpy_array(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "_abs",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_abs(x) | is_numpy_array(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "_pow",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_pow(x, y) | is_numpy_array(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "y",
      "function": "_pow",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_pow(x, y) | power(x, y)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "_fft",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_fft(x) | is_numpy_array(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "_ifft",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_ifft(x) | is_numpy_array(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "_tanh",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_tanh(x) | is_numpy_array(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "_sigmoid",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_sigmoid(x) | is_numpy_array(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "_relu",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_relu(x) | is_numpy_array(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "_softmax",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "x = np.exp",
      "transformation_code": "x = np.exp(x - np.max(x, axis=dim, keepdims=True)) | _softmax(x, dim=-1) | is_numpy_array(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "dim",
      "function": "_softmax",
      "default_value": "-1",
      "usage_pattern": "simple_usage",
      "validation_code": "axis=dim | axis=dim | dim=dim",
      "transformation_code": "dim=-1): | dim=dim) | _softmax(x, dim=-1) | exp(x - np.max(x, axis=dim, keepdims=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "_log2",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_log2(x) | is_numpy_array(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "_asin",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_asin(x) | is_numpy_array(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "_acos",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_acos(x) | is_numpy_array(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "_atan",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_atan(x) | is_numpy_array(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "_clip",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_clip(x, min_val, max_val) | is_numpy_array(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "min_val",
      "function": "_clip",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_clip(x, min_val, max_val) | clip(x, min_val, max_val)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "max_val",
      "function": "_clip",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_clip(x, min_val, max_val) | clip(x, min_val, max_val)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "_nan_to_num",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_nan_to_num(x) | is_numpy_array(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "_clamp",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_clamp(x, min_val, max_val) | _clip(x, min_val, max_val)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "min_val",
      "function": "_clamp",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_clamp(x, min_val, max_val) | _clip(x, min_val, max_val)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "max_val",
      "function": "_clamp",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_clamp(x, min_val, max_val) | _clip(x, min_val, max_val)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "y",
      "function": "_atan2",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_atan2(y, x) | is_numpy_array(y)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "_atan2",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_atan2(y, x) | arctan2(y, x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "_sinh",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_sinh(x) | is_numpy_array(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "_cosh",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_cosh(x) | is_numpy_array(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "_sign",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "x < 0 | x > 0",
      "transformation_code": "_sign(x) | is_numpy_array(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "_degrees",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_degrees(x) | is_numpy_array(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "_radians",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_radians(x) | is_numpy_array(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "_create_array_like",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert False, type(x) | device = x",
      "transformation_code": "_create_array_like(x, *, func_name, shape=None, dtype=None) | is_torch_tensor(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "func_name",
      "function": "_create_array_like",
      "default_value": null,
      "usage_pattern": "equality_check,boolean_condition",
      "validation_code": "",
      "transformation_code": "func_name == 'zeros': | func_name == 'ones': | _create_array_like(x, *, func_name, shape=None, dtype=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "shape",
      "function": "_create_array_like",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "shape=None | target_shape = shape",
      "transformation_code": "shape=None, dtype=None): | shape = shape if shape is not None else x.shape | _create_array_like(x, *, func_name, shape=None, dtype=None) | zeros(target_shape, dtype=target_dtype, device=device)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "dtype",
      "function": "_create_array_like",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "dtype=None | target_dtype = dtype | dtype=target_dtype",
      "transformation_code": "dtype=None): | dtype = dtype if dtype is not None else x.dtype | _create_array_like(x, *, func_name, shape=None, dtype=None) | zeros(target_shape, dtype=target_dtype, device=device)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "_zeros_like",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_zeros_like(x, *, shape=None, dtype=None) | _create_array_like(x, func_name='zeros', shape=shape, dtype=dtype)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "shape",
      "function": "_zeros_like",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "shape=None | shape=shape",
      "transformation_code": "shape=None, dtype=None): | shape=shape, dtype=dtype) | _zeros_like(x, *, shape=None, dtype=None) | _create_array_like(x, func_name='zeros', shape=shape, dtype=dtype)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "dtype",
      "function": "_zeros_like",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "dtype=None | dtype=dtype",
      "transformation_code": "dtype=None): | dtype=dtype) | _zeros_like(x, *, shape=None, dtype=None) | _create_array_like(x, func_name='zeros', shape=shape, dtype=dtype)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "_ones_like",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_ones_like(x, *, shape=None, dtype=None) | _create_array_like(x, func_name='ones', shape=shape, dtype=dtype)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "shape",
      "function": "_ones_like",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "shape=None | shape=shape",
      "transformation_code": "shape=None, dtype=None): | shape=shape, dtype=dtype) | _ones_like(x, *, shape=None, dtype=None) | _create_array_like(x, func_name='ones', shape=shape, dtype=dtype)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "dtype",
      "function": "_ones_like",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "dtype=None | dtype=dtype",
      "transformation_code": "dtype=None): | dtype=dtype) | _ones_like(x, *, shape=None, dtype=None) | _create_array_like(x, func_name='ones', shape=shape, dtype=dtype)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "_randn_like",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_randn_like(x, *, shape=None, dtype=None) | _create_array_like(x, func_name='randn', shape=shape, dtype=dtype)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "shape",
      "function": "_randn_like",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "shape=None | shape=shape",
      "transformation_code": "shape=None, dtype=None): | shape=shape, dtype=dtype) | _randn_like(x, *, shape=None, dtype=None) | _create_array_like(x, func_name='randn', shape=shape, dtype=dtype)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "dtype",
      "function": "_randn_like",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "dtype=None | dtype=dtype",
      "transformation_code": "dtype=None): | dtype=dtype) | _randn_like(x, *, shape=None, dtype=None) | _create_array_like(x, func_name='randn', shape=shape, dtype=dtype)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "_rand_like",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_rand_like(x, *, shape=None, dtype=None) | _create_array_like(x, func_name='rand', shape=shape, dtype=dtype)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "shape",
      "function": "_rand_like",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "shape=None | shape=shape",
      "transformation_code": "shape=None, dtype=None): | shape=shape, dtype=dtype) | _rand_like(x, *, shape=None, dtype=None) | _create_array_like(x, func_name='rand', shape=shape, dtype=dtype)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "dtype",
      "function": "_rand_like",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "dtype=None | dtype=dtype",
      "transformation_code": "dtype=None): | dtype=dtype) | _rand_like(x, *, shape=None, dtype=None) | _create_array_like(x, func_name='rand', shape=shape, dtype=dtype)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "_maximum",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_maximum(x, y) | is_numpy_array(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "y",
      "function": "_maximum",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_maximum(x, y) | maximum(x, y)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "_minimum",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_minimum(x, y) | is_numpy_array(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "y",
      "function": "_minimum",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_minimum(x, y) | minimum(x, y)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "_max",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_max(x, dim=None, keepdim=False) | is_numpy_array(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "dim",
      "function": "_max",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "dim=None | dim=False | axis=dim",
      "transformation_code": "dim=None, keepdim=False): | dim=dim, keepdim=keepdim) | _max(x, dim=None, keepdim=False) | max(x, axis=dim, keepdims=keepdim)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "keepdim",
      "function": "_max",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "keepdim=False | keepdims=keepdim | keepdim=keepdim",
      "transformation_code": "keepdim=False): | keepdim=keepdim) | _max(x, dim=None, keepdim=False) | max(x, axis=dim, keepdims=keepdim)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "_min",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_min(x, dim=None, keepdim=False) | is_numpy_array(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "dim",
      "function": "_min",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "dim=None | dim=False | axis=dim",
      "transformation_code": "dim=None, keepdim=False): | dim=dim, keepdim=keepdim) | _min(x, dim=None, keepdim=False) | min(x, axis=dim, keepdims=keepdim)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "keepdim",
      "function": "_min",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "keepdim=False | keepdims=keepdim | keepdim=keepdim",
      "transformation_code": "keepdim=False): | keepdim=keepdim) | _min(x, dim=None, keepdim=False) | min(x, axis=dim, keepdims=keepdim)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "_sum",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_sum(x, dim=None, keepdim=False) | is_numpy_array(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "dim",
      "function": "_sum",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "dim=None | dim=False | axis=dim",
      "transformation_code": "dim=None, keepdim=False): | dim=dim, keepdim=keepdim) | _sum(x, dim=None, keepdim=False) | sum(x, axis=dim, keepdims=keepdim)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "keepdim",
      "function": "_sum",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "keepdim=False | keepdims=keepdim | keepdim=keepdim",
      "transformation_code": "keepdim=False): | keepdim=keepdim) | _sum(x, dim=None, keepdim=False) | sum(x, axis=dim, keepdims=keepdim)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "_mean",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_mean(x, dim=None, keepdim=False) | is_numpy_array(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "dim",
      "function": "_mean",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "dim=None | dim=False | axis=dim",
      "transformation_code": "dim=None, keepdim=False): | dim=dim, keepdim=keepdim) | _mean(x, dim=None, keepdim=False) | mean(x, axis=dim, keepdims=keepdim)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "keepdim",
      "function": "_mean",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "keepdim=False | keepdims=keepdim | keepdim=keepdim",
      "transformation_code": "keepdim=False): | keepdim=keepdim) | _mean(x, dim=None, keepdim=False) | mean(x, axis=dim, keepdims=keepdim)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "_copy_tensor",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "",
      "transformation_code": "_copy_tensor(x) | is_numpy_array(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "get_bilinear_weights",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert x.shape == y.shape, 'x and y must have the same shape' | assert X.shape == (4, *shape), 'Expected X.shape == (4, *x.shape), but got {}'.format(X.shape) | assert W.shape == (4, *shape), 'Expected W.shape == (4, *x.shape), but got {}'.format(W.shape)",
      "transformation_code": "x = x % 1 | x = 1 - Rx | get_bilinear_weights(x, y) | of (x, y)",
      "error_handling": "",
      "documentation": "x (torch.Tensor or numpy.ndarray)"
    },
    {
      "arg_name": "y",
      "function": "get_bilinear_weights",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert x.shape == y.shape, 'x and y must have the same shape' | assert Y.shape == (4, *shape), 'Expected Y.shape == (4, *y.shape), but got {}'.format(Y.shape) | x.shape == y",
      "transformation_code": "y = y % 1 | y = 1 - Ry | get_bilinear_weights(x, y) | of (x, y)",
      "error_handling": "",
      "documentation": "y (torch.Tensor or numpy.ndarray)"
    },
    {
      "arg_name": "image",
      "function": "torch_scatter_add_image",
      "default_value": null,
      "usage_pattern": "indexing",
      "validation_code": "assert rp.r.is_torch_image(image), 'image must be a torch tensor with shape [C, H, W], but got image with type {}'.format(type(image)) | assert image.device == x.device == y.device, 'all inputs must be on the same device, but got image.device={}, x.device={}, and y.device={}'.format(image.device, x.device, y.device) | assert y.shape == x.shape == (in_height, in_width), 'x and y should have the same height and width as the input image, aka {} but x.shape=={} and y.shape=={}'.format((in_height, in_width), x.shape, y.shape)",
      "transformation_code": "image=as_torch_image(load_image(url)) | image = torch_scatter_add_image( | torch_scatter_add_image(image, x, y, *, relative=False, interp='floor', height=None, width=None, prepend_ones=False) | EXAMPLE (image warping)",
      "error_handling": "",
      "documentation": "image (torch.Tensor)"
    },
    {
      "arg_name": "x",
      "function": "torch_scatter_add_image",
      "default_value": null,
      "usage_pattern": "method_call,addition",
      "validation_code": "assert is_torch_tensor(x) and is_a_matrix(x), 'x must be a torch matrix, but got x with type {} and shape {}'.format(type(x), x.shape) | assert x.shape == y.shape, 'x and y must have the same shape, but got x.shape={} and y.shape={}'.format(x.shape, y.shape) | assert image.device == x.device == y.device, 'all inputs must be on the same device, but got image.device={}, x.device={}, and y.device={}'.format(image.device, x.device, y.device)",
      "transformation_code": "x = torch.meshgrid(torch.arange(image.shape[1]), torch.arange(image.shape[2])) | x = x.float() | torch_scatter_add_image(image, x, y, *, relative=False, interp='floor', height=None, width=None, prepend_ones=False) | deltas (dx and dy)",
      "error_handling": "",
      "documentation": "x (torch.Tensor)"
    },
    {
      "arg_name": "y",
      "function": "torch_scatter_add_image",
      "default_value": null,
      "usage_pattern": "method_call,addition",
      "validation_code": "assert is_torch_tensor(y) and is_a_matrix(y), 'y must be a torch matrix, but got y with type {} and shape {}'.format(type(y), y.shape) | assert x.shape == y.shape, 'x and y must have the same shape, but got x.shape={} and y.shape={}'.format(x.shape, y.shape) | assert image.device == x.device == y.device, 'all inputs must be on the same device, but got image.device={}, x.device={}, and y.device={}'.format(image.device, x.device, y.device)",
      "transformation_code": "y = y.float() | y = wave_amp * torch.sin(wave_freq * (x - y) + frame * wave_speed) | torch_scatter_add_image(image, x, y, *, relative=False, interp='floor', height=None, width=None, prepend_ones=False) | deltas (dx and dy)",
      "error_handling": "",
      "documentation": "y (torch.Tensor)"
    },
    {
      "arg_name": "relative",
      "function": "torch_scatter_add_image",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "assert in_height == out_height, 'For relative scatter adding, input and output heights must match, but got in_height={} and out_height={}'.format(in_height, out_height) | assert in_width == out_width, 'For relative scatter adding, input and output widths must match, but got in_width={} and out_width={}'.format(in_width, out_width) | relative=False",
      "transformation_code": "relative=False, interp='floor', height=None, width=None, prepend_ones=False): | relative=True, it will treat x and y as deltas (dx and dy) and perform relative scatter adding. | torch_scatter_add_image(image, x, y, *, relative=False, interp='floor', height=None, width=None, prepend_ones=False) | torch_scatter_add_image(\n        ...                 image,\n        ...                 dx,\n        ...                 dy,\n        ...                 relative=True,\n        ...                 interp=interp,\n        ...                 prepend_ones=True\n        ...             )",
      "error_handling": "",
      "documentation": "relative (bool, optional)"
    },
    {
      "arg_name": "interp",
      "function": "torch_scatter_add_image",
      "default_value": "floor",
      "usage_pattern": "equality_check,boolean_condition",
      "validation_code": "assert interp in ['floor', 'ceil', 'round', 'bilinear'], \"interp must be one of 'floor', 'ceil', 'round', or 'bilinear', but got {}\".format(interp) | assert interp == 'floor' | interp=interp",
      "transformation_code": "interp='floor', height=None, width=None, prepend_ones=False): | interp=interp, | torch_scatter_add_image(image, x, y, *, relative=False, interp='floor', height=None, width=None, prepend_ones=False) | demo_torch_scatter_add_image(interp,normalize=False,)",
      "error_handling": "",
      "documentation": "interp (str, optional)"
    },
    {
      "arg_name": "height",
      "function": "torch_scatter_add_image",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check,type_check",
      "validation_code": "assert height is None or (isinstance(height, int) and height > 0), 'height must be a positive integer or None, but got {}'.format(height) | assert y.shape == x.shape == (in_height, in_width), 'x and y should have the same height and width as the input image, aka {} but x.shape=={} and y.shape=={}'.format((in_height, in_width), x.shape, y.shape) | isinstance(height, int)",
      "transformation_code": "height=None, width=None, prepend_ones=False): | height=256,width=256) | torch_scatter_add_image(image, x, y, *, relative=False, interp='floor', height=None, width=None, prepend_ones=False) | resize_image_to_fit(image,height=256,width=256)",
      "error_handling": "",
      "documentation": "height (int, optional)"
    },
    {
      "arg_name": "width",
      "function": "torch_scatter_add_image",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check,type_check",
      "validation_code": "assert width is None or (isinstance(width, int) and width > 0), 'width must be a positive integer or None, but got {}'.format(width) | assert y.shape == x.shape == (in_height, in_width), 'x and y should have the same height and width as the input image, aka {} but x.shape=={} and y.shape=={}'.format((in_height, in_width), x.shape, y.shape) | isinstance(width, int)",
      "transformation_code": "width=None, prepend_ones=False): | width=256) | torch_scatter_add_image(image, x, y, *, relative=False, interp='floor', height=None, width=None, prepend_ones=False) | resize_image_to_fit(image,height=256,width=256)",
      "error_handling": "",
      "documentation": "width (int, optional)"
    },
    {
      "arg_name": "prepend_ones",
      "function": "torch_scatter_add_image",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "prepend_ones=False | prepend_ones=True | prepend_ones=True",
      "transformation_code": "prepend_ones=False): | prepend_ones=True | torch_scatter_add_image(image, x, y, *, relative=False, interp='floor', height=None, width=None, prepend_ones=False) | torch_scatter_add_image(\n        ...                 image,\n        ...                 dx,\n        ...                 dy,\n        ...                 relative=True,\n        ...                 interp=interp,\n        ...                 prepend_ones=True\n        ...             )",
      "error_handling": "",
      "documentation": "prepend_ones (bool, optional)"
    },
    {
      "arg_name": "reduce",
      "function": "accumulate_flows",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "reduce=True | reduce=False",
      "transformation_code": "reduce=True, reverse=False): | reduce=False) | accumulate_flows(*flows, reduce=True, reverse=False) | accumulate_flows(flows, reduce=False)",
      "error_handling": "",
      "documentation": "reduce : bool, optional"
    },
    {
      "arg_name": "reverse",
      "function": "accumulate_flows",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "reverse=False | reverse=True | reverse=True",
      "transformation_code": "reverse=False): | reverse=True) ==== -accumulate_flows(-flows[::-1]) | accumulate_flows(*flows, reduce=True, reverse=False) | accumulate_flows(flows, reverse=True)",
      "error_handling": "",
      "documentation": "reverse : bool, optional"
    },
    {
      "arg_name": "image",
      "function": "resize_image_to_hold",
      "default_value": null,
      "usage_pattern": "addition",
      "validation_code": "assert rp.is_image(image) | assert height or width, 'If allow_shrink is True, at least one dimension must be nonzero. Scaling an image to a factor of 0 is not allowed.' | image = as_numpy_image",
      "transformation_code": "image = as_numpy_image(image, copy=False) | resize_image_to_hold(image, height: int=None, width: int=None, interp='auto', *, allow_shrink=True, alpha_weighted=False) | is_image(image)",
      "error_handling": "",
      "documentation": "image: The input image to be resized."
    },
    {
      "arg_name": "height",
      "function": "resize_image_to_hold",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "assert resize_image_to_hold(im, height=100 ,width=None,allow_shrink=True ).shape == ( 100,  150, 3)  | assert resize_image_to_hold(im, height=100 ,width=100 ,allow_shrink=True ).shape == ( 100,  150, 3) | assert resize_image_to_hold(im, height=None,width=100 ,allow_shrink=True ).shape == (  67,  100, 3)",
      "transformation_code": "height=200,width=300,color=(0,0,0)) | height=100 ,width=None,allow_shrink=True ).shape == ( 100,  150, 3)  | resize_image_to_hold(image, height: int=None, width: int=None, interp='auto', *, allow_shrink=True, alpha_weighted=False) | uniform_float_color_image(height=200,width=300,color=(0,0,0)",
      "error_handling": "",
      "documentation": "height: The height of the bounding box (default is None)."
    },
    {
      "arg_name": "width",
      "function": "resize_image_to_hold",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "assert resize_image_to_hold(im, height=100 ,width=None,allow_shrink=True ).shape == ( 100,  150, 3)  | assert resize_image_to_hold(im, height=100 ,width=100 ,allow_shrink=True ).shape == ( 100,  150, 3) | assert resize_image_to_hold(im, height=None,width=100 ,allow_shrink=True ).shape == (  67,  100, 3)",
      "transformation_code": "width=300,color=(0,0,0)) | width=None,allow_shrink=True ).shape == ( 100,  150, 3)  | resize_image_to_hold(image, height: int=None, width: int=None, interp='auto', *, allow_shrink=True, alpha_weighted=False) | uniform_float_color_image(height=200,width=300,color=(0,0,0)",
      "error_handling": "",
      "documentation": "width: The width of the bounding box (default is None)."
    },
    {
      "arg_name": "interp",
      "function": "resize_image_to_hold",
      "default_value": "auto",
      "usage_pattern": "simple_usage",
      "validation_code": "interp=interp",
      "transformation_code": "interp='auto', *, allow_shrink=True, alpha_weighted=False): | interp=interp, alpha_weighted=alpha_weighted) | resize_image_to_hold(image, height: int=None, width: int=None, interp='auto', *, allow_shrink=True, alpha_weighted=False) | cv_resize_image(image, scale, interp=interp, alpha_weighted=alpha_weighted)",
      "error_handling": "",
      "documentation": "interp: Interpolation method to be used while resizing (default is 'auto')."
    },
    {
      "arg_name": "allow_shrink",
      "function": "resize_image_to_hold",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "assert resize_image_to_hold(im, height=100 ,width=None,allow_shrink=True ).shape == ( 100,  150, 3)  | assert resize_image_to_hold(im, height=100 ,width=100 ,allow_shrink=True ).shape == ( 100,  150, 3) | assert resize_image_to_hold(im, height=None,width=100 ,allow_shrink=True ).shape == (  67,  100, 3)",
      "transformation_code": "allow_shrink=True, alpha_weighted=False): | allow_shrink=True ).shape == ( 100,  150, 3)  | resize_image_to_hold(image, height: int=None, width: int=None, interp='auto', *, allow_shrink=True, alpha_weighted=False) | resize_image_to_hold(im, height=100 ,width=None,allow_shrink=True )",
      "error_handling": "",
      "documentation": "allow_shrink: A boolean flag that determines if the image can be shrunk (default is True)."
    },
    {
      "arg_name": "alpha_weighted",
      "function": "resize_image_to_hold",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "alpha_weighted=False | alpha_weighted=alpha_weighted",
      "transformation_code": "alpha_weighted=False): | alpha_weighted=alpha_weighted) | resize_image_to_hold(image, height: int=None, width: int=None, interp='auto', *, allow_shrink=True, alpha_weighted=False) | cv_resize_image(image, scale, interp=interp, alpha_weighted=alpha_weighted)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "resize_image_to_fit",
      "default_value": null,
      "usage_pattern": "addition",
      "validation_code": "assert rp.is_image(image) | image = as_numpy_image | height < image",
      "transformation_code": "image = as_numpy_image(image, copy=False) | resize_image_to_fit(image, height: int=None, width: int=None, interp='auto', *, allow_growth=True, alpha_weighted=False) | is_image(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "height",
      "function": "resize_image_to_fit",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "assert height is not None or width is not None | height = 999999 | height < image_height",
      "transformation_code": "height = 999999 | resize_image_to_fit(image, height: int=None, width: int=None, interp='auto', *, allow_growth=True, alpha_weighted=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "width",
      "function": "resize_image_to_fit",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "assert height is not None or width is not None | width = 999999 | width < image_width",
      "transformation_code": "width = 999999 | resize_image_to_fit(image, height: int=None, width: int=None, interp='auto', *, allow_growth=True, alpha_weighted=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "interp",
      "function": "resize_image_to_fit",
      "default_value": "auto",
      "usage_pattern": "simple_usage",
      "validation_code": "interp=interp",
      "transformation_code": "interp='auto', *, allow_growth=True, alpha_weighted=False): | interp=interp, alpha_weighted=alpha_weighted) | resize_image_to_fit(image, height: int=None, width: int=None, interp='auto', *, allow_growth=True, alpha_weighted=False) | cv_resize_image(image, scale, interp=interp, alpha_weighted=alpha_weighted)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "allow_growth",
      "function": "resize_image_to_fit",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "allow_growth=True",
      "transformation_code": "allow_growth=True, alpha_weighted=False): | resize_image_to_fit(image, height: int=None, width: int=None, interp='auto', *, allow_growth=True, alpha_weighted=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "alpha_weighted",
      "function": "resize_image_to_fit",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "alpha_weighted=False | alpha_weighted=alpha_weighted",
      "transformation_code": "alpha_weighted=False): | alpha_weighted=alpha_weighted) | resize_image_to_fit(image, height: int=None, width: int=None, interp='auto', *, allow_growth=True, alpha_weighted=False) | cv_resize_image(image, scale, interp=interp, alpha_weighted=alpha_weighted)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "height",
      "function": "resize_images_to_hold",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "resize_images_to_hold(*images, height: int=None, width: int=None, interp='auto', allow_shrink=True, alpha_weighted=False, show_progress=False, lazy=False) | resize_image_to_hold(x, height, width, interp=interp, allow_shrink=allow_shrink, alpha_weighted=alpha_weighted)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "width",
      "function": "resize_images_to_hold",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "resize_images_to_hold(*images, height: int=None, width: int=None, interp='auto', allow_shrink=True, alpha_weighted=False, show_progress=False, lazy=False) | resize_image_to_hold(x, height, width, interp=interp, allow_shrink=allow_shrink, alpha_weighted=alpha_weighted)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "interp",
      "function": "resize_images_to_hold",
      "default_value": "auto",
      "usage_pattern": "simple_usage",
      "validation_code": "interp=interp",
      "transformation_code": "interp='auto', allow_shrink=True, alpha_weighted=False, show_progress=False, lazy=False): | interp=interp, allow_shrink=allow_shrink, alpha_weighted=alpha_weighted) for x in images) | resize_images_to_hold(*images, height: int=None, width: int=None, interp='auto', allow_shrink=True, alpha_weighted=False, show_progress=False, lazy=False) | resize_image_to_hold(x, height, width, interp=interp, allow_shrink=allow_shrink, alpha_weighted=alpha_weighted)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "allow_shrink",
      "function": "resize_images_to_hold",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "allow_shrink=True | allow_shrink=allow_shrink",
      "transformation_code": "allow_shrink=True, alpha_weighted=False, show_progress=False, lazy=False): | allow_shrink=allow_shrink, alpha_weighted=alpha_weighted) for x in images) | resize_images_to_hold(*images, height: int=None, width: int=None, interp='auto', allow_shrink=True, alpha_weighted=False, show_progress=False, lazy=False) | resize_image_to_hold(x, height, width, interp=interp, allow_shrink=allow_shrink, alpha_weighted=alpha_weighted)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "alpha_weighted",
      "function": "resize_images_to_hold",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "alpha_weighted=False | alpha_weighted=alpha_weighted",
      "transformation_code": "alpha_weighted=False, show_progress=False, lazy=False): | alpha_weighted=alpha_weighted) for x in images) | resize_images_to_hold(*images, height: int=None, width: int=None, interp='auto', allow_shrink=True, alpha_weighted=False, show_progress=False, lazy=False) | resize_image_to_hold(x, height, width, interp=interp, allow_shrink=allow_shrink, alpha_weighted=alpha_weighted)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "show_progress",
      "function": "resize_images_to_hold",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "show_progress=False",
      "transformation_code": "show_progress=False, lazy=False): | resize_images_to_hold(*images, height: int=None, width: int=None, interp='auto', allow_shrink=True, alpha_weighted=False, show_progress=False, lazy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "lazy",
      "function": "resize_images_to_hold",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "lazy=False",
      "transformation_code": "lazy=False): | resize_images_to_hold(*images, height: int=None, width: int=None, interp='auto', allow_shrink=True, alpha_weighted=False, show_progress=False, lazy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "height",
      "function": "resize_images_to_fit",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "resize_images_to_fit(*images, height: int=None, width: int=None, interp='auto', allow_growth=True, alpha_weighted=False, show_progress=False, lazy=False) | resize_image_to_fit(x, height, width, interp=interp, allow_growth=allow_growth, alpha_weighted=alpha_weighted)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "width",
      "function": "resize_images_to_fit",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "resize_images_to_fit(*images, height: int=None, width: int=None, interp='auto', allow_growth=True, alpha_weighted=False, show_progress=False, lazy=False) | resize_image_to_fit(x, height, width, interp=interp, allow_growth=allow_growth, alpha_weighted=alpha_weighted)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "interp",
      "function": "resize_images_to_fit",
      "default_value": "auto",
      "usage_pattern": "simple_usage",
      "validation_code": "interp=interp",
      "transformation_code": "interp='auto', allow_growth=True, alpha_weighted=False, show_progress=False, lazy=False): | interp=interp, allow_growth=allow_growth, alpha_weighted=alpha_weighted) for x in images) | resize_images_to_fit(*images, height: int=None, width: int=None, interp='auto', allow_growth=True, alpha_weighted=False, show_progress=False, lazy=False) | resize_image_to_fit(x, height, width, interp=interp, allow_growth=allow_growth, alpha_weighted=alpha_weighted)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "allow_growth",
      "function": "resize_images_to_fit",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "allow_growth=True | allow_growth=allow_growth",
      "transformation_code": "allow_growth=True, alpha_weighted=False, show_progress=False, lazy=False): | allow_growth=allow_growth, alpha_weighted=alpha_weighted) for x in images) | resize_images_to_fit(*images, height: int=None, width: int=None, interp='auto', allow_growth=True, alpha_weighted=False, show_progress=False, lazy=False) | resize_image_to_fit(x, height, width, interp=interp, allow_growth=allow_growth, alpha_weighted=alpha_weighted)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "alpha_weighted",
      "function": "resize_images_to_fit",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "alpha_weighted=False | alpha_weighted=alpha_weighted",
      "transformation_code": "alpha_weighted=False, show_progress=False, lazy=False): | alpha_weighted=alpha_weighted) for x in images) | resize_images_to_fit(*images, height: int=None, width: int=None, interp='auto', allow_growth=True, alpha_weighted=False, show_progress=False, lazy=False) | resize_image_to_fit(x, height, width, interp=interp, allow_growth=allow_growth, alpha_weighted=alpha_weighted)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "show_progress",
      "function": "resize_images_to_fit",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "show_progress=False",
      "transformation_code": "show_progress=False, lazy=False): | resize_images_to_fit(*images, height: int=None, width: int=None, interp='auto', allow_growth=True, alpha_weighted=False, show_progress=False, lazy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "lazy",
      "function": "resize_images_to_fit",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "lazy=False",
      "transformation_code": "lazy=False): | resize_images_to_fit(*images, height: int=None, width: int=None, interp='auto', allow_growth=True, alpha_weighted=False, show_progress=False, lazy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "video",
      "function": "resize_video_to_hold",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "resize_video_to_hold(video, height: int=None, width: int=None, interp='auto', *, allow_shrink=True, alpha_weighted=False, show_progress=False, lazy=False) | gather_args_call(resize_images_to_hold, video)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "height",
      "function": "resize_video_to_hold",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "resize_video_to_hold(video, height: int=None, width: int=None, interp='auto', *, allow_shrink=True, alpha_weighted=False, show_progress=False, lazy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "width",
      "function": "resize_video_to_hold",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "resize_video_to_hold(video, height: int=None, width: int=None, interp='auto', *, allow_shrink=True, alpha_weighted=False, show_progress=False, lazy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "interp",
      "function": "resize_video_to_hold",
      "default_value": "auto",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "interp='auto', *, allow_shrink=True, alpha_weighted=False, show_progress=False, lazy=False): | resize_video_to_hold(video, height: int=None, width: int=None, interp='auto', *, allow_shrink=True, alpha_weighted=False, show_progress=False, lazy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "allow_shrink",
      "function": "resize_video_to_hold",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "allow_shrink=True",
      "transformation_code": "allow_shrink=True, alpha_weighted=False, show_progress=False, lazy=False): | resize_video_to_hold(video, height: int=None, width: int=None, interp='auto', *, allow_shrink=True, alpha_weighted=False, show_progress=False, lazy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "alpha_weighted",
      "function": "resize_video_to_hold",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "alpha_weighted=False",
      "transformation_code": "alpha_weighted=False, show_progress=False, lazy=False): | resize_video_to_hold(video, height: int=None, width: int=None, interp='auto', *, allow_shrink=True, alpha_weighted=False, show_progress=False, lazy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "show_progress",
      "function": "resize_video_to_hold",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "show_progress=False",
      "transformation_code": "show_progress=False, lazy=False): | resize_video_to_hold(video, height: int=None, width: int=None, interp='auto', *, allow_shrink=True, alpha_weighted=False, show_progress=False, lazy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "lazy",
      "function": "resize_video_to_hold",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "lazy=False",
      "transformation_code": "lazy=False): | resize_video_to_hold(video, height: int=None, width: int=None, interp='auto', *, allow_shrink=True, alpha_weighted=False, show_progress=False, lazy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "video",
      "function": "resize_video_to_fit",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "resize_video_to_fit(video, height: int=None, width: int=None, interp='auto', *, allow_growth=True, alpha_weighted=False, show_progress=False, lazy=False) | gather_args_call(resize_images_to_fit, video)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "height",
      "function": "resize_video_to_fit",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "resize_video_to_fit(video, height: int=None, width: int=None, interp='auto', *, allow_growth=True, alpha_weighted=False, show_progress=False, lazy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "width",
      "function": "resize_video_to_fit",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "resize_video_to_fit(video, height: int=None, width: int=None, interp='auto', *, allow_growth=True, alpha_weighted=False, show_progress=False, lazy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "interp",
      "function": "resize_video_to_fit",
      "default_value": "auto",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "interp='auto', *, allow_growth=True, alpha_weighted=False, show_progress=False, lazy=False): | resize_video_to_fit(video, height: int=None, width: int=None, interp='auto', *, allow_growth=True, alpha_weighted=False, show_progress=False, lazy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "allow_growth",
      "function": "resize_video_to_fit",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "allow_growth=True",
      "transformation_code": "allow_growth=True, alpha_weighted=False, show_progress=False, lazy=False): | resize_video_to_fit(video, height: int=None, width: int=None, interp='auto', *, allow_growth=True, alpha_weighted=False, show_progress=False, lazy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "alpha_weighted",
      "function": "resize_video_to_fit",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "alpha_weighted=False",
      "transformation_code": "alpha_weighted=False, show_progress=False, lazy=False): | resize_video_to_fit(video, height: int=None, width: int=None, interp='auto', *, allow_growth=True, alpha_weighted=False, show_progress=False, lazy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "show_progress",
      "function": "resize_video_to_fit",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "show_progress=False",
      "transformation_code": "show_progress=False, lazy=False): | resize_video_to_fit(video, height: int=None, width: int=None, interp='auto', *, allow_growth=True, alpha_weighted=False, show_progress=False, lazy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "lazy",
      "function": "resize_video_to_fit",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "lazy=False",
      "transformation_code": "lazy=False): | resize_video_to_fit(video, height: int=None, width: int=None, interp='auto', *, allow_growth=True, alpha_weighted=False, show_progress=False, lazy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "height",
      "function": "resize_videos_to_fit",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "resize_videos_to_fit(*videos, height: int=None, width: int=None, interp='auto', allow_growth=True, alpha_weighted=False, show_progress=False, lazy=False, lazy_frames=False) | resize_video_to_fit(x, height, width, interp=interp, allow_growth=allow_growth, alpha_weighted=alpha_weighted, lazy=lazy_frames)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "width",
      "function": "resize_videos_to_fit",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "resize_videos_to_fit(*videos, height: int=None, width: int=None, interp='auto', allow_growth=True, alpha_weighted=False, show_progress=False, lazy=False, lazy_frames=False) | resize_video_to_fit(x, height, width, interp=interp, allow_growth=allow_growth, alpha_weighted=alpha_weighted, lazy=lazy_frames)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "interp",
      "function": "resize_videos_to_fit",
      "default_value": "auto",
      "usage_pattern": "simple_usage",
      "validation_code": "interp=interp",
      "transformation_code": "interp='auto', allow_growth=True, alpha_weighted=False, show_progress=False, lazy=False, lazy_frames=False): | interp=interp, allow_growth=allow_growth, alpha_weighted=alpha_weighted, lazy=lazy_frames) for x in videos) | resize_videos_to_fit(*videos, height: int=None, width: int=None, interp='auto', allow_growth=True, alpha_weighted=False, show_progress=False, lazy=False, lazy_frames=False) | resize_video_to_fit(x, height, width, interp=interp, allow_growth=allow_growth, alpha_weighted=alpha_weighted, lazy=lazy_frames)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "allow_growth",
      "function": "resize_videos_to_fit",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "allow_growth=True | allow_growth=allow_growth",
      "transformation_code": "allow_growth=True, alpha_weighted=False, show_progress=False, lazy=False, lazy_frames=False): | allow_growth=allow_growth, alpha_weighted=alpha_weighted, lazy=lazy_frames) for x in videos) | resize_videos_to_fit(*videos, height: int=None, width: int=None, interp='auto', allow_growth=True, alpha_weighted=False, show_progress=False, lazy=False, lazy_frames=False) | resize_video_to_fit(x, height, width, interp=interp, allow_growth=allow_growth, alpha_weighted=alpha_weighted, lazy=lazy_frames)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "alpha_weighted",
      "function": "resize_videos_to_fit",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "alpha_weighted=False | alpha_weighted=alpha_weighted",
      "transformation_code": "alpha_weighted=False, show_progress=False, lazy=False, lazy_frames=False): | alpha_weighted=alpha_weighted, lazy=lazy_frames) for x in videos) | resize_videos_to_fit(*videos, height: int=None, width: int=None, interp='auto', allow_growth=True, alpha_weighted=False, show_progress=False, lazy=False, lazy_frames=False) | resize_video_to_fit(x, height, width, interp=interp, allow_growth=allow_growth, alpha_weighted=alpha_weighted, lazy=lazy_frames)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "show_progress",
      "function": "resize_videos_to_fit",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "show_progress=False",
      "transformation_code": "show_progress=False, lazy=False, lazy_frames=False): | resize_videos_to_fit(*videos, height: int=None, width: int=None, interp='auto', allow_growth=True, alpha_weighted=False, show_progress=False, lazy=False, lazy_frames=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "lazy",
      "function": "resize_videos_to_fit",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "lazy=False | lazy=lazy_frames",
      "transformation_code": "lazy=False, lazy_frames=False): | lazy=lazy_frames) for x in videos) | resize_videos_to_fit(*videos, height: int=None, width: int=None, interp='auto', allow_growth=True, alpha_weighted=False, show_progress=False, lazy=False, lazy_frames=False) | resize_video_to_fit(x, height, width, interp=interp, allow_growth=allow_growth, alpha_weighted=alpha_weighted, lazy=lazy_frames)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "lazy_frames",
      "function": "resize_videos_to_fit",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "lazy_frames=False | lazy=lazy_frames",
      "transformation_code": "lazy_frames=False): | resize_videos_to_fit(*videos, height: int=None, width: int=None, interp='auto', allow_growth=True, alpha_weighted=False, show_progress=False, lazy=False, lazy_frames=False) | resize_video_to_fit(x, height, width, interp=interp, allow_growth=allow_growth, alpha_weighted=alpha_weighted, lazy=lazy_frames)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "height",
      "function": "resize_videos_to_hold",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "resize_videos_to_hold(*videos, height: int=None, width: int=None, interp='auto', allow_shrink=True, alpha_weighted=False, show_progress=False, lazy=False, lazy_frames=False) | resize_video_to_hold(x, height, width, interp=interp, allow_shrink=allow_shrink, alpha_weighted=alpha_weighted, lazy=lazy_frames)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "width",
      "function": "resize_videos_to_hold",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "resize_videos_to_hold(*videos, height: int=None, width: int=None, interp='auto', allow_shrink=True, alpha_weighted=False, show_progress=False, lazy=False, lazy_frames=False) | resize_video_to_hold(x, height, width, interp=interp, allow_shrink=allow_shrink, alpha_weighted=alpha_weighted, lazy=lazy_frames)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "interp",
      "function": "resize_videos_to_hold",
      "default_value": "auto",
      "usage_pattern": "simple_usage",
      "validation_code": "interp=interp",
      "transformation_code": "interp='auto', allow_shrink=True, alpha_weighted=False, show_progress=False, lazy=False, lazy_frames=False): | interp=interp, allow_shrink=allow_shrink, alpha_weighted=alpha_weighted, lazy=lazy_frames) for x in videos) | resize_videos_to_hold(*videos, height: int=None, width: int=None, interp='auto', allow_shrink=True, alpha_weighted=False, show_progress=False, lazy=False, lazy_frames=False) | resize_video_to_hold(x, height, width, interp=interp, allow_shrink=allow_shrink, alpha_weighted=alpha_weighted, lazy=lazy_frames)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "allow_shrink",
      "function": "resize_videos_to_hold",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "allow_shrink=True | allow_shrink=allow_shrink",
      "transformation_code": "allow_shrink=True, alpha_weighted=False, show_progress=False, lazy=False, lazy_frames=False): | allow_shrink=allow_shrink, alpha_weighted=alpha_weighted, lazy=lazy_frames) for x in videos) | resize_videos_to_hold(*videos, height: int=None, width: int=None, interp='auto', allow_shrink=True, alpha_weighted=False, show_progress=False, lazy=False, lazy_frames=False) | resize_video_to_hold(x, height, width, interp=interp, allow_shrink=allow_shrink, alpha_weighted=alpha_weighted, lazy=lazy_frames)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "alpha_weighted",
      "function": "resize_videos_to_hold",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "alpha_weighted=False | alpha_weighted=alpha_weighted",
      "transformation_code": "alpha_weighted=False, show_progress=False, lazy=False, lazy_frames=False): | alpha_weighted=alpha_weighted, lazy=lazy_frames) for x in videos) | resize_videos_to_hold(*videos, height: int=None, width: int=None, interp='auto', allow_shrink=True, alpha_weighted=False, show_progress=False, lazy=False, lazy_frames=False) | resize_video_to_hold(x, height, width, interp=interp, allow_shrink=allow_shrink, alpha_weighted=alpha_weighted, lazy=lazy_frames)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "show_progress",
      "function": "resize_videos_to_hold",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "show_progress=False",
      "transformation_code": "show_progress=False, lazy=False, lazy_frames=False): | resize_videos_to_hold(*videos, height: int=None, width: int=None, interp='auto', allow_shrink=True, alpha_weighted=False, show_progress=False, lazy=False, lazy_frames=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "lazy",
      "function": "resize_videos_to_hold",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "lazy=False | lazy=lazy_frames",
      "transformation_code": "lazy=False, lazy_frames=False): | lazy=lazy_frames) for x in videos) | resize_videos_to_hold(*videos, height: int=None, width: int=None, interp='auto', allow_shrink=True, alpha_weighted=False, show_progress=False, lazy=False, lazy_frames=False) | resize_video_to_hold(x, height, width, interp=interp, allow_shrink=allow_shrink, alpha_weighted=alpha_weighted, lazy=lazy_frames)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "lazy_frames",
      "function": "resize_videos_to_hold",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "lazy_frames=False | lazy=lazy_frames",
      "transformation_code": "lazy_frames=False): | resize_videos_to_hold(*videos, height: int=None, width: int=None, interp='auto', allow_shrink=True, alpha_weighted=False, show_progress=False, lazy=False, lazy_frames=False) | resize_video_to_hold(x, height, width, interp=interp, allow_shrink=allow_shrink, alpha_weighted=alpha_weighted, lazy=lazy_frames)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "interp",
      "function": "resize_images_to_max_size",
      "default_value": "bilinear",
      "usage_pattern": "simple_usage",
      "validation_code": "interp=interp",
      "transformation_code": "interp='bilinear', alpha_weighted=False): | interp=interp, alpha_weighted=alpha_weighted) | resize_images_to_max_size(*images, interp='bilinear', alpha_weighted=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "alpha_weighted",
      "function": "resize_images_to_max_size",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "alpha_weighted=False | alpha_weighted=alpha_weighted",
      "transformation_code": "alpha_weighted=False): | alpha_weighted=alpha_weighted) | resize_images_to_max_size(*images, interp='bilinear', alpha_weighted=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "interp",
      "function": "resize_images_to_min_size",
      "default_value": "bilinear",
      "usage_pattern": "simple_usage",
      "validation_code": "interp=interp",
      "transformation_code": "interp='bilinear', alpha_weighted=False): | interp=interp, alpha_weighted=alpha_weighted) | resize_images_to_min_size(*images, interp='bilinear', alpha_weighted=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "alpha_weighted",
      "function": "resize_images_to_min_size",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "alpha_weighted=False | alpha_weighted=alpha_weighted",
      "transformation_code": "alpha_weighted=False): | alpha_weighted=alpha_weighted) | resize_images_to_min_size(*images, interp='bilinear', alpha_weighted=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "interp",
      "function": "resize_videos_to_min_size",
      "default_value": "auto",
      "usage_pattern": "simple_usage",
      "validation_code": "interp=interp",
      "transformation_code": "interp='auto'): | interp=interp) | resize_videos_to_min_size(*videos, interp='auto')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "interp",
      "function": "resize_videos_to_max_size",
      "default_value": "auto",
      "usage_pattern": "simple_usage",
      "validation_code": "interp=interp",
      "transformation_code": "interp='auto'): | interp=interp) | resize_videos_to_max_size(*videos, interp='auto')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "iterable",
      "function": "_iterfzf",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "iterable = map",
      "transformation_code": "iterable = map(sanitize_string, iterable) | _iterfzf(iterable, *args, **kwargs) | map(sanitize_string, iterable)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "cv_inpaint_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert is_rgba_image(image), 'cv_inpaint_image: Warning: no mask was given, and the input image doesnt have transparency - which means nothing will be inpainted. If making this an error is an issue this might be downgraded to a warning or removed, but right now I assume youve likely made a mistake. Are you sure you didnt mean to pass in an RGBA image or give a mask?' | assert is_image(image) and is_image(mask) | assert get_image_dimensions(mask) == get_image_dimensions(image), 'mask and image must have same height and width'",
      "transformation_code": "image=load_image('https://upload.wikimedia.org/wikipedia/en/7/7d/Lenna_%28test_image%29.png') | image = as_byte_image(image) | cv_inpaint_image(image, mask=None, radius=3, *, algorithm: str='TELEA', invert_mask=False) | load_image('https://upload.wikimedia.org/wikipedia/en/7/7d/Lenna_%28test_image%29.png')",
      "error_handling": "",
      "documentation": "image: The input image to be inpainted, expected to be in RGB format with byte values."
    },
    {
      "arg_name": "mask",
      "function": "cv_inpaint_image",
      "default_value": null,
      "usage_pattern": "equality_check,boolean_condition,none_check,indexing",
      "validation_code": "assert is_rgba_image(image), 'cv_inpaint_image: Warning: no mask was given, and the input image doesnt have transparency - which means nothing will be inpainted. If making this an error is an issue this might be downgraded to a warning or removed, but right now I assume youve likely made a mistake. Are you sure you didnt mean to pass in an RGBA image or give a mask?' | assert is_image(image) and is_image(mask) | assert get_image_dimensions(mask) == get_image_dimensions(image), 'mask and image must have same height and width'",
      "transformation_code": "mask=None, radius=3, *, algorithm: str='TELEA', invert_mask=False): | mask=np.zeros_like(image).astype(bool) | cv_inpaint_image(image, mask=None, radius=3, *, algorithm: str='TELEA', invert_mask=False) | used (rounded to a binary mask)",
      "error_handling": "",
      "documentation": "mask: A binary mask indicating the regions to inpaint. Must be the same size as `image`."
    },
    {
      "arg_name": "radius",
      "function": "cv_inpaint_image",
      "default_value": 3,
      "usage_pattern": "type_check",
      "validation_code": "assert isinstance(radius, int) and radius >= 1 | isinstance(radius, int) | radius=3",
      "transformation_code": "radius=3, *, algorithm: str='TELEA', invert_mask=False): | cv_inpaint_image(image, mask=None, radius=3, *, algorithm: str='TELEA', invert_mask=False) | isinstance(radius, int)",
      "error_handling": "",
      "documentation": "radius: The radius of a circular neighborhood of each point to inpaint. Defines how far the inpainting method"
    },
    {
      "arg_name": "algorithm",
      "function": "cv_inpaint_image",
      "default_value": "TELEA",
      "usage_pattern": "simple_usage",
      "validation_code": "assert algorithm in algorithms, repr(algorithm) + ' is not in ' + repr(list(algorithms)) | algorithm = algorithms | flags=algorithm",
      "transformation_code": "algorithm = algorithms[algorithm] | cv_inpaint_image(image, mask=None, radius=3, *, algorithm: str='TELEA', invert_mask=False) | repr(algorithm)",
      "error_handling": "",
      "documentation": "algorithm: The inpainting method to use. Can be \"TELEA\" or \"NS\". Default is \"TELEA\"."
    },
    {
      "arg_name": "invert_mask",
      "function": "cv_inpaint_image",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "invert_mask=False",
      "transformation_code": "invert_mask=False): | cv_inpaint_image(image, mask=None, radius=3, *, algorithm: str='TELEA', invert_mask=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "cv_floodfill_mask",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert is_image(image) | assert get_image_dimensions(mask) == get_image_dimensions(image) | image = load_image",
      "transformation_code": "image = load_image(\"https://wallpapers.com/images/hd/girl-aesthetic-looking-up-the-sky-l7l5dq0nsmnq8j70.jpg\") | image = as_rgb_image(image) | cv_floodfill_mask(image, position: tuple, tolerance: int=32, *, bridge_diagonals=False) | load_image(\"https://wallpapers.com/images/hd/girl-aesthetic-looking-up-the-sky-l7l5dq0nsmnq8j70.jpg\")",
      "error_handling": "",
      "documentation": "image(\"https"
    },
    {
      "arg_name": "position",
      "function": "cv_floodfill_mask",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "position=(0, 0), tolerance=10) | cv_floodfill_mask(image, position: tuple, tolerance: int=32, *, bridge_diagonals=False) | cv2_floodfill_mask(image, position=(0, 0)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "tolerance",
      "function": "cv_floodfill_mask",
      "default_value": 32,
      "usage_pattern": "simple_usage",
      "validation_code": "tolerance=10",
      "transformation_code": "tolerance=10) | tolerance = (tolerance, tolerance, tolerance) | cv_floodfill_mask(image, position: tuple, tolerance: int=32, *, bridge_diagonals=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "bridge_diagonals",
      "function": "cv_floodfill_mask",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "bridge_diagonals=False",
      "transformation_code": "bridge_diagonals=False): | cv_floodfill_mask(image, position: tuple, tolerance: int=32, *, bridge_diagonals=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "get_path_inode",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "get_path_inode(path: str) | get_path_inode('/path/to/file')",
      "error_handling": "try_except",
      "documentation": "path (str)"
    },
    {
      "arg_name": "x",
      "function": "_is_dir_entry",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_is_dir_entry(x) | type(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "root_dir",
      "function": "_get_all_paths_fast",
      "default_value": ".",
      "usage_pattern": "simple_usage",
      "validation_code": "root_dir = _PathInfo",
      "transformation_code": "root_dir='.', *, lazy=False, recursive=False, include_files=True, include_folders=True, include_symlink_files=None, include_symlink_folders=None, explore_symlinks=True, include_hidden=True, ignore_permission_errors=False, traversal='breadth_first'): | root_dir = _PathInfo(root_dir) | _get_all_paths_fast(root_dir='.', *, lazy=False, recursive=False, include_files=True, include_folders=True, include_symlink_files=None, include_symlink_folders=None, explore_symlinks=True, include_hidden=True, ignore_permission_errors=False, traversal='breadth_first') | _PathInfo(root_dir)",
      "error_handling": "",
      "documentation": "root_dir (str)"
    },
    {
      "arg_name": "lazy",
      "function": "_get_all_paths_fast",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "lazy=False",
      "transformation_code": "lazy=False, recursive=False, include_files=True, include_folders=True, include_symlink_files=None, include_symlink_folders=None, explore_symlinks=True, include_hidden=True, ignore_permission_errors=False, traversal='breadth_first'): | _get_all_paths_fast(root_dir='.', *, lazy=False, recursive=False, include_files=True, include_folders=True, include_symlink_files=None, include_symlink_folders=None, explore_symlinks=True, include_hidden=True, ignore_permission_errors=False, traversal='breadth_first')",
      "error_handling": "",
      "documentation": "lazy (bool)"
    },
    {
      "arg_name": "recursive",
      "function": "_get_all_paths_fast",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "recursive=False",
      "transformation_code": "recursive=False, include_files=True, include_folders=True, include_symlink_files=None, include_symlink_folders=None, explore_symlinks=True, include_hidden=True, ignore_permission_errors=False, traversal='breadth_first'): | _get_all_paths_fast(root_dir='.', *, lazy=False, recursive=False, include_files=True, include_folders=True, include_symlink_files=None, include_symlink_folders=None, explore_symlinks=True, include_hidden=True, ignore_permission_errors=False, traversal='breadth_first')",
      "error_handling": "",
      "documentation": "recursive (bool)"
    },
    {
      "arg_name": "include_files",
      "function": "_get_all_paths_fast",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "include_files=True | include_symlink_files = include_files",
      "transformation_code": "include_files=True, include_folders=True, include_symlink_files=None, include_symlink_folders=None, explore_symlinks=True, include_hidden=True, ignore_permission_errors=False, traversal='breadth_first'): | _get_all_paths_fast(root_dir='.', *, lazy=False, recursive=False, include_files=True, include_folders=True, include_symlink_files=None, include_symlink_folders=None, explore_symlinks=True, include_hidden=True, ignore_permission_errors=False, traversal='breadth_first') | or (include_files and x.is_file and (not x.is_symlink)",
      "error_handling": "",
      "documentation": "include_files (bool)"
    },
    {
      "arg_name": "include_folders",
      "function": "_get_all_paths_fast",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "include_folders=True | include_symlink_folders = include_folders",
      "transformation_code": "include_folders=True, include_symlink_files=None, include_symlink_folders=None, explore_symlinks=True, include_hidden=True, ignore_permission_errors=False, traversal='breadth_first'): | _get_all_paths_fast(root_dir='.', *, lazy=False, recursive=False, include_files=True, include_folders=True, include_symlink_files=None, include_symlink_folders=None, explore_symlinks=True, include_hidden=True, ignore_permission_errors=False, traversal='breadth_first') | and (include_folders and x.is_folder and (not x.is_symlink)",
      "error_handling": "",
      "documentation": "include_folders (bool)"
    },
    {
      "arg_name": "include_symlink_files",
      "function": "_get_all_paths_fast",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "include_symlink_files=None | include_symlink_files = include_files",
      "transformation_code": "include_symlink_files=None, include_symlink_folders=None, explore_symlinks=True, include_hidden=True, ignore_permission_errors=False, traversal='breadth_first'): | include_symlink_files = include_files if include_symlink_files is None else include_symlink_files | _get_all_paths_fast(root_dir='.', *, lazy=False, recursive=False, include_files=True, include_folders=True, include_symlink_files=None, include_symlink_folders=None, explore_symlinks=True, include_hidden=True, ignore_permission_errors=False, traversal='breadth_first') | or (include_symlink_files and x.is_file and x.is_symlink)",
      "error_handling": "",
      "documentation": "include_symlink_files (bool or None)"
    },
    {
      "arg_name": "include_symlink_folders",
      "function": "_get_all_paths_fast",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "include_symlink_folders=None | include_symlink_folders = include_folders",
      "transformation_code": "include_symlink_folders=None, explore_symlinks=True, include_hidden=True, ignore_permission_errors=False, traversal='breadth_first'): | include_symlink_folders = include_folders if include_symlink_folders is None else include_symlink_folders | _get_all_paths_fast(root_dir='.', *, lazy=False, recursive=False, include_files=True, include_folders=True, include_symlink_files=None, include_symlink_folders=None, explore_symlinks=True, include_hidden=True, ignore_permission_errors=False, traversal='breadth_first') | or (include_symlink_folders and x.is_folder and x.is_symlink)",
      "error_handling": "",
      "documentation": "include_symlink_folders (bool or None)"
    },
    {
      "arg_name": "explore_symlinks",
      "function": "_get_all_paths_fast",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "explore_symlinks=True",
      "transformation_code": "explore_symlinks=True, include_hidden=True, ignore_permission_errors=False, traversal='breadth_first'): | _get_all_paths_fast(root_dir='.', *, lazy=False, recursive=False, include_files=True, include_folders=True, include_symlink_files=None, include_symlink_folders=None, explore_symlinks=True, include_hidden=True, ignore_permission_errors=False, traversal='breadth_first') | and (explore_symlinks or not x.is_symlink)",
      "error_handling": "",
      "documentation": "explore_symlinks (bool)"
    },
    {
      "arg_name": "include_hidden",
      "function": "_get_all_paths_fast",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "include_hidden=True",
      "transformation_code": "include_hidden=True, ignore_permission_errors=False, traversal='breadth_first'): | _get_all_paths_fast(root_dir='.', *, lazy=False, recursive=False, include_files=True, include_folders=True, include_symlink_files=None, include_symlink_folders=None, explore_symlinks=True, include_hidden=True, ignore_permission_errors=False, traversal='breadth_first') | return (include_hidden or not is_hidden)",
      "error_handling": "",
      "documentation": "include_hidden (bool)"
    },
    {
      "arg_name": "ignore_permission_errors",
      "function": "_get_all_paths_fast",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "ignore_permission_errors=False",
      "transformation_code": "ignore_permission_errors=False, traversal='breadth_first'): | _get_all_paths_fast(root_dir='.', *, lazy=False, recursive=False, include_files=True, include_folders=True, include_symlink_files=None, include_symlink_folders=None, explore_symlinks=True, include_hidden=True, ignore_permission_errors=False, traversal='breadth_first')",
      "error_handling": "",
      "documentation": "ignore_permission_errors (bool)"
    },
    {
      "arg_name": "traversal",
      "function": "_get_all_paths_fast",
      "default_value": "breadth_first",
      "usage_pattern": "equality_check,boolean_condition",
      "validation_code": "assert traversal in ['depth_first', 'breadth_first']",
      "transformation_code": "traversal='breadth_first'): | traversal == 'depth_first' else 'popleft') | _get_all_paths_fast(root_dir='.', *, lazy=False, recursive=False, include_files=True, include_folders=True, include_symlink_files=None, include_symlink_folders=None, explore_symlinks=True, include_hidden=True, ignore_permission_errors=False, traversal='breadth_first') | getattr(to_explore, 'pop' if traversal == 'depth_first' else 'popleft')",
      "error_handling": "",
      "documentation": "traversal (str)"
    },
    {
      "arg_name": "root",
      "function": "breadth_first_path_iterator",
      "default_value": ".",
      "usage_pattern": "simple_usage",
      "validation_code": "root_dir=root",
      "transformation_code": "root='.'): | breadth_first_path_iterator(root='.') | _get_all_paths_fast(root_dir=root, recursive=True, traversal='breadth_first', lazy=True, ignore_permission_errors=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "text",
      "function": "gpt3",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "gpt3(text: str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "code",
      "function": "deepgenx",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "deepgenx(code: str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "key",
      "function": "_get_openai_api_key",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "key=None",
      "transformation_code": "key=None): | _get_openai_api_key(key=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "message",
      "function": "_run_openai_llm",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_run_openai_llm(message, model, api_key=None) | create(messages=[{'role': 'user', 'content': message}], model='gpt-4o')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "model",
      "function": "_run_openai_llm",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "model='gpt-4o') | _run_openai_llm(message, model, api_key=None) | create(messages=[{'role': 'user', 'content': message}], model='gpt-4o')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "api_key",
      "function": "_run_openai_llm",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "api_key=None | api_key = _get_openai_api_key | api_key=api_key",
      "transformation_code": "api_key=None): | api_key = _get_openai_api_key(api_key) | _run_openai_llm(message, model, api_key=None) | _get_openai_api_key(api_key)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "message",
      "function": "run_llm_api",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "assert isinstance(message, str), type(message) | isinstance(message, str)",
      "transformation_code": "run_llm_api(message, model='gpt-4o-mini', api_key=None) | isinstance(message, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "model",
      "function": "run_llm_api",
      "default_value": "gpt-4o-mini",
      "usage_pattern": "boolean_condition,type_check",
      "validation_code": "assert isinstance(model, str), type(model) | isinstance(model, str)",
      "transformation_code": "model='gpt-4o-mini', api_key=None): | run_llm_api(message, model='gpt-4o-mini', api_key=None) | isinstance(model, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "api_key",
      "function": "run_llm_api",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "api_key=None",
      "transformation_code": "api_key=None): | run_llm_api(message, model='gpt-4o-mini', api_key=None) | _run_openai_llm(message, model, api_key)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "code",
      "function": "minify_python_code",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "minify_python_code(code: str) | minify(code)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "image_to_text",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "image = as_rgb_image | image = as_byte_image | text = image",
      "transformation_code": "image = as_rgb_image(image) | image = as_byte_image(image) | image_to_text(image) | print(image_to_text(load_image('http)",
      "error_handling": "",
      "documentation": "image('http)"
    },
    {
      "arg_name": "image",
      "function": "cv_equalize_histogram",
      "default_value": null,
      "usage_pattern": "indexing",
      "validation_code": "assert is_image(image) | assert is_rgba_image(image) | image = as_byte_image",
      "transformation_code": "image = as_byte_image(image) | cv_equalize_histogram(image, by_value=True) | load_image('https://www.cdc.gov/healthypets/images/pets/cute-dog-headshot.jpg')",
      "error_handling": "",
      "documentation": "image('https"
    },
    {
      "arg_name": "by_value",
      "function": "cv_equalize_histogram",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "by_value=True",
      "transformation_code": "by_value=True): | cv_equalize_histogram(image, by_value=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "r",
      "function": "compose_rgb_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert is_grayscale_image(r), 'Each channel must be a matrix, not a tensor' | assert r.shape == g.shape == b.shape, 'All channels must have the same shape' | r = as_grayscale_image",
      "transformation_code": "r = as_grayscale_image(r) | r = as_float_image(r) | compose_rgb_image(r, g, b) | as_grayscale_image(r)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "g",
      "function": "compose_rgb_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert is_grayscale_image(g), 'Each channel must be a matrix, not a tensor' | assert r.shape == g.shape == b.shape, 'All channels must have the same shape' | g = as_grayscale_image",
      "transformation_code": "g = as_grayscale_image(g) | g = as_float_image(g) | compose_rgb_image(r, g, b) | as_grayscale_image(g)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "b",
      "function": "compose_rgb_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert is_grayscale_image(b), 'Each channel must be a matrix, not a tensor' | assert r.shape == g.shape == b.shape, 'All channels must have the same shape' | b = as_grayscale_image",
      "transformation_code": "b = as_grayscale_image(b) | b = as_float_image(b) | compose_rgb_image(r, g, b) | as_grayscale_image(b)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "r",
      "function": "compose_rgba_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert is_grayscale_image(r), 'Each channel must be a matrix, not a tensor' | assert r.shape == g.shape == b.shape == a.shape, 'All channels must have the same shape' | r = as_grayscale_image",
      "transformation_code": "r = as_grayscale_image(r) | r = as_float_image(r) | compose_rgba_image(r, g, b, a) | as_grayscale_image(r)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "g",
      "function": "compose_rgba_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert is_grayscale_image(g), 'Each channel must be a matrix, not a tensor' | assert r.shape == g.shape == b.shape == a.shape, 'All channels must have the same shape' | g = as_grayscale_image",
      "transformation_code": "g = as_grayscale_image(g) | g = as_float_image(g) | compose_rgba_image(r, g, b, a) | as_grayscale_image(g)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "b",
      "function": "compose_rgba_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert is_grayscale_image(b), 'Each channel must be a matrix, not a tensor' | assert r.shape == g.shape == b.shape == a.shape, 'All channels must have the same shape' | b = as_grayscale_image",
      "transformation_code": "b = as_grayscale_image(b) | b = as_float_image(b) | compose_rgba_image(r, g, b, a) | as_grayscale_image(b)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "a",
      "function": "compose_rgba_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert is_grayscale_image(r), 'Each channel must be a matrix, not a tensor' | assert is_grayscale_image(g), 'Each channel must be a matrix, not a tensor' | assert is_grayscale_image(b), 'Each channel must be a matrix, not a tensor'",
      "transformation_code": "a = as_grayscale_image(a) | a = as_float_image(a) | compose_rgba_image(r, g, b, a) | as_grayscale_image(a)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "extract_image_channels",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert is_rgb_image(image) or is_rgba_image(image)",
      "transformation_code": "extract_image_channels(image) | extract_image_channels(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "extract_alpha_channel",
      "default_value": null,
      "usage_pattern": "indexing",
      "validation_code": "image = as_rgba_image",
      "transformation_code": "image = as_rgba_image(image) | extract_alpha_channel(image) | as_rgba_image(image)",
      "error_handling": "",
      "documentation": "image (i.e. numpy matrix)"
    },
    {
      "arg_name": "function",
      "function": "apply_image_function_per_channel",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert callable(function), type(function)",
      "transformation_code": "apply_image_function_per_channel(function, image, *args, **kwargs) | callable(function)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "apply_image_function_per_channel",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert is_image(image)",
      "transformation_code": "apply_image_function_per_channel(function, image, *args, **kwargs) | is_image(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "with_alpha_channel",
      "default_value": null,
      "usage_pattern": "indexing,method_call",
      "validation_code": "assert is_image(image) | assert get_image_dimensions(image) == get_image_dimensions(alpha) | image = as_rgba_image",
      "transformation_code": "image = as_rgba_image(image, copy=False) | image = as_float_image(image, copy=False) | with_alpha_channel(image, alpha, copy=True) | uniform_float_color_image(*get_image_dimensions(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "alpha",
      "function": "with_alpha_channel",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert is_image(alpha) | assert get_image_dimensions(image) == get_image_dimensions(alpha) | alpha = uniform_float_color_image",
      "transformation_code": "alpha = uniform_float_color_image(*get_image_dimensions(image), alpha) | alpha = as_grayscale_image(alpha, copy=False) | with_alpha_channel(image, alpha, copy=True) | is_number(alpha)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "copy",
      "function": "with_alpha_channel",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "copy=True | copy=False | copy=False",
      "transformation_code": "copy=True): | copy=False | with_alpha_channel(image, alpha, copy=True) | as_grayscale_image(alpha, copy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "with_image_rgb",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "with_image_rgb(image, rgb, copy=True) | with_image_alpha(rgb, get_image_alpha(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "rgb",
      "function": "with_image_rgb",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "with_image_rgb(image, rgb, copy=True) | with_image_alpha(rgb, get_image_alpha(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "copy",
      "function": "with_image_rgb",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "copy=True | copy=copy",
      "transformation_code": "copy=True): | copy=copy) | with_image_rgb(image, rgb, copy=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "before",
      "function": "_string_diff_helper",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "before = load_text_file",
      "transformation_code": "before = load_text_file(before) | _string_diff_helper(before: str, after: str, command: str) | is_utf8_file(before)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "after",
      "function": "_string_diff_helper",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "after = load_text_file",
      "transformation_code": "after = load_text_file(after) | _string_diff_helper(before: str, after: str, command: str) | is_utf8_file(after)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "command",
      "function": "_string_diff_helper",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_string_diff_helper(before: str, after: str, command: str) | system(command)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "before",
      "function": "dunk_string_diff",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "dunk_string_diff(before: str, after: str) | _string_diff_helper(before, after, 'git diff | dunk')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "after",
      "function": "dunk_string_diff",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "dunk_string_diff(before: str, after: str) | _string_diff_helper(before, after, 'git diff | dunk')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "before",
      "function": "view_string_diff",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "view_string_diff(before: str, after: str) | _string_diff_helper(before, after, 'ydiff -s temp.py')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "after",
      "function": "view_string_diff",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "view_string_diff(before: str, after: str) | _string_diff_helper(before, after, 'ydiff -s temp.py')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "before",
      "function": "vim_string_diff",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "vim_string_diff(before: str, after: str) | string_to_text_file('before.py', before)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "after",
      "function": "vim_string_diff",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "vim_string_diff(before: str, after: str) | string_to_text_file('after.py', after)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "string",
      "function": "vim_copy",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "lines = string | original_lines = string",
      "transformation_code": "vim_copy(string: str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "folder_path",
      "function": "zip_folder_to_bytes",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert path_exists(folder_path), 'zip_folder_to_bytes error: Path does not exist: ' + str(folder_path) | assert is_a_folder(folder_path), 'zip_folder_to_bytes error: Path exists but is not a folder: ' + str(folder_path)",
      "transformation_code": "zip_folder_to_bytes(folder_path: str) | path_exists(folder_path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "web_paste_path",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "path=None | path=path",
      "transformation_code": "path=None, *, ask_to_replace=True): | path=path) | web_paste_path(path=None, *, ask_to_replace=True) | gather_args_call(_paste_path_from_bundle, data, path=path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "ask_to_replace",
      "function": "web_paste_path",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "ask_to_replace=True",
      "transformation_code": "ask_to_replace=True): | web_paste_path(path=None, *, ask_to_replace=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "data",
      "function": "_paste_path_from_bundle",
      "default_value": null,
      "usage_pattern": "boolean_condition,type_check",
      "validation_code": "assert isinstance(data, _BundledPath) | isinstance(data, _BundledPath)",
      "transformation_code": "_paste_path_from_bundle(data, path=None, *, ask_to_replace=True) | isinstance(data, _BundledPath)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "_paste_path_from_bundle",
      "default_value": null,
      "usage_pattern": "equality_check,boolean_condition,none_check",
      "validation_code": "assert path is not None | assert not is_a_file(path), 'Path already exists as a file | path=None",
      "transformation_code": "path=None, *, ask_to_replace=True): | path == '.' and data.is_folder: | _paste_path_from_bundle(data, path=None, *, ask_to_replace=True) | Exception('web_paste_path error: web_paste data was not created via web_copy_path')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "ask_to_replace",
      "function": "_paste_path_from_bundle",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "ask_to_replace=True",
      "transformation_code": "ask_to_replace=True): | _paste_path_from_bundle(data, path=None, *, ask_to_replace=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "web_copy_path",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "path = get_module_path",
      "transformation_code": "path = get_module_path(path) | web_copy_path(path: str=None, *, show_progress=False) | is_a_module(path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "show_progress",
      "function": "web_copy_path",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "show_progress=False | show_progress=show_progress",
      "transformation_code": "show_progress=False): | show_progress=show_progress) | web_copy_path(path: str=None, *, show_progress=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "_copy_path_to_bundle",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "assert path_exists(path), 'Path does not exist: ' + str(path) | path = input_select_path | path = get_relative_path",
      "transformation_code": "path = input_select_path(message='Select a file or folder for web_copy_path:') | path = get_relative_path(path) | _copy_path_to_bundle(path: str=None) | input_select_path(message='Select a file or folder for web_copy_path:')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "address",
      "function": "ip_to_mac_address",
      "default_value": null,
      "usage_pattern": "equality_check,boolean_condition",
      "validation_code": "address == get_my_local_ip_address | ip=address",
      "transformation_code": "address == get_my_local_ip_address(): | ip_to_mac_address(address) | get_mac_address(ip=address)",
      "error_handling": "",
      "documentation": "address(x) for x in get_all_local_ip_addresses()]"
    },
    {
      "arg_name": "address",
      "function": "ip_to_host_name",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "ip_to_host_name(address: str) | gethostbyaddr(address)",
      "error_handling": "try_except",
      "documentation": "address()"
    },
    {
      "arg_name": "address",
      "function": "get_mac_address_vendor",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "get_mac_address_vendor(address: str) | lookup(address)",
      "error_handling": "",
      "documentation": "address()"
    },
    {
      "arg_name": "actions",
      "function": "PynputCasette",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "actions=None",
      "transformation_code": "actions=None): | PynputCasette(actions=None) | PynputCasette(actions)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "query",
      "function": "find_and_replace_text_files",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "isinstance(query, str)",
      "transformation_code": "query = %s' % repr(query)) | find_and_replace_text_files(query, replacement, paths='.', interactive=False) | isinstance(query, str)",
      "error_handling": "",
      "documentation": "query (str)"
    },
    {
      "arg_name": "replacement",
      "function": "find_and_replace_text_files",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "isinstance(replacement, str)",
      "transformation_code": "replacement = %s' % repr(replacement)) | find_and_replace_text_files(query, replacement, paths='.', interactive=False) | isinstance(replacement, str)",
      "error_handling": "",
      "documentation": "replacement (str)"
    },
    {
      "arg_name": "paths",
      "function": "find_and_replace_text_files",
      "default_value": ".",
      "usage_pattern": "iteration,type_check",
      "validation_code": "isinstance(paths, str) | isinstance(paths, str)",
      "transformation_code": "paths='.', interactive=False): | paths = [paths] | find_and_replace_text_files(query, replacement, paths='.', interactive=False) | not (isinstance(paths, str)",
      "error_handling": "",
      "documentation": "paths (str or list of str)"
    },
    {
      "arg_name": "interactive",
      "function": "find_and_replace_text_files",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "assert interactive | interactive=False",
      "transformation_code": "interactive=False): | find_and_replace_text_files(query, replacement, paths='.', interactive=False) | print('Running rp.find_and_replace_text_files interactively with')",
      "error_handling": "try_except",
      "documentation": "interactive (bool)"
    },
    {
      "arg_name": "files",
      "function": "_fart",
      "default_value": ".",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "files='.'): | _fart(files='.') | find_and_replace_text_files(query, replacement, files, interactive=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "module",
      "function": "import_all_submodules",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check,type_check",
      "validation_code": "assert is_a_module(module) or isinstance(module, str), 'import_all_submodules: the \"module\" parameter should be either a string or a module, but got type ' + repr(type(module)) | assert module_exists(module), \"Module doesn't exist: \" + repr(module) | isinstance(module, str)",
      "transformation_code": "module = __import__(module) | module = try_import(submodule_name) | import_all_submodules(module, *, recursive=True, strict=False, verbose=False) | is_a_module(module)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "recursive",
      "function": "import_all_submodules",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "recursive=True",
      "transformation_code": "recursive=True, strict=False, verbose=False): | import_all_submodules(module, *, recursive=True, strict=False, verbose=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "strict",
      "function": "import_all_submodules",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "strict=False",
      "transformation_code": "strict=False, verbose=False): | import_all_submodules(module, *, recursive=True, strict=False, verbose=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "verbose",
      "function": "import_all_submodules",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "verbose=False | verbose=True",
      "transformation_code": "verbose=False): | verbose=True) | import_all_submodules(module, *, recursive=True, strict=False, verbose=False) | import_all_submodules('sklearn',verbose=True)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "url",
      "function": "dns_lookup",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "dns_lookup(url: str) | gethostbyname(url)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "extensions",
      "function": "_fzf_multi_grep",
      "default_value": "",
      "usage_pattern": "boolean_condition,method_call",
      "validation_code": "extensions = extensions.split",
      "transformation_code": "extensions='', print_instructions=True, text_files=None, single_line=False): | extensions = extensions.split() | _fzf_multi_grep(extensions='', print_instructions=True, text_files=None, single_line=False) | and (not ends_with_any(path, extensions)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "print_instructions",
      "function": "_fzf_multi_grep",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "print_instructions=True",
      "transformation_code": "print_instructions=True, text_files=None, single_line=False): | _fzf_multi_grep(extensions='', print_instructions=True, text_files=None, single_line=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "text_files",
      "function": "_fzf_multi_grep",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "text_files=None",
      "transformation_code": "text_files=None, single_line=False): | _fzf_multi_grep(extensions='', print_instructions=True, text_files=None, single_line=False) | imap_unordered(load_annotated_lines, text_files_walk()",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "single_line",
      "function": "_fzf_multi_grep",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "single_line=False",
      "transformation_code": "single_line=False): | _fzf_multi_grep(extensions='', print_instructions=True, text_files=None, single_line=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "unwarped_perspective_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "image=load_image_from_webcam | image=unwarped_perspective_image | image = as_byte_image",
      "transformation_code": "image=load_image_from_webcam() | image=unwarped_perspective_image(image,corners) | unwarped_perspective_image(image, from_points, to_points=None, height: int=None, width: int=None) | detect_apriltags(image)",
      "error_handling": "",
      "documentation": "image(image,corners)"
    },
    {
      "arg_name": "from_points",
      "function": "unwarped_perspective_image",
      "default_value": null,
      "usage_pattern": "length_check",
      "validation_code": "assert len(from_points) == 4, 'unwarped_perspective_image needs four from_points, but got ' + str(len(from_points)) | from_points = as_points_array",
      "transformation_code": "from_points = as_points_array(from_points).astype(np.float32) | unwarped_perspective_image(image, from_points, to_points=None, height: int=None, width: int=None) | as_points_array(from_points)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "to_points",
      "function": "unwarped_perspective_image",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check,length_check",
      "validation_code": "assert len(to_points) == 4, 'unwarped_perspective_image needs four to_points, but got ' + str(len(to_points)) | to_points=None | to_points = as_points_array",
      "transformation_code": "to_points=None, height: int=None, width: int=None): | to_points = [[0, 0], [width, 0], [width, height], [0, height]] | unwarped_perspective_image(image, from_points, to_points=None, height: int=None, width: int=None) | as_points_array(to_points)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "height",
      "function": "unwarped_perspective_image",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "height = get_image_height",
      "transformation_code": "height = get_image_height(image) | unwarped_perspective_image(image, from_points, to_points=None, height: int=None, width: int=None) | warpPerspective(image, M, (width, height)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "width",
      "function": "unwarped_perspective_image",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "width = get_image_width",
      "transformation_code": "width = get_image_width(image) | unwarped_perspective_image(image, from_points, to_points=None, height: int=None, width: int=None) | warpPerspective(image, M, (width, height)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "contour",
      "function": "unwarped_perspective_contour",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "contour_reshaped = contour",
      "transformation_code": "unwarped_perspective_contour(contour, from_points, to_points=None, *, height: int=None, width: int=None) | transform (points array, complex vector, or cv_contour)",
      "error_handling": "",
      "documentation": "contour: Points to transform (points array, complex vector, or cv_contour)."
    },
    {
      "arg_name": "from_points",
      "function": "unwarped_perspective_contour",
      "default_value": null,
      "usage_pattern": "length_check",
      "validation_code": "assert len(from_points) == 4, 'unwarped_perspective_contour needs four from_points, but got ' + str(len(from_points)) | from_points = as_points_array",
      "transformation_code": "from_points = as_points_array(from_points).astype(np.float32) | unwarped_perspective_contour(contour, from_points, to_points=None, *, height: int=None, width: int=None) | as_points_array(from_points)",
      "error_handling": "",
      "documentation": "from_points: Source quadrangle points (clockwise from top-left)."
    },
    {
      "arg_name": "to_points",
      "function": "unwarped_perspective_contour",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check,length_check",
      "validation_code": "assert height is not None and width is not None, 'unwarped_perspective_contour: You must specify either to_points or both width and height, but all three were None' | assert height is None and width is None, 'unwarped_perspective_contour: Both to_points AND height/width were specified - please only give to_points or height/width' | assert len(to_points) == 4, 'unwarped_perspective_contour needs four to_points, but got ' + str(len(to_points))",
      "transformation_code": "to_points=None, *, height: int=None, width: int=None): | to_points = [[0, 0], [width, 0], [width, height], [0, height]] | unwarped_perspective_contour(contour, from_points, to_points=None, *, height: int=None, width: int=None) | as_points_array(to_points)",
      "error_handling": "",
      "documentation": "to_points: Target quadrangle points. If None, uses default rectangle."
    },
    {
      "arg_name": "height",
      "function": "unwarped_perspective_contour",
      "default_value": null,
      "usage_pattern": "none_check",
      "validation_code": "assert height is not None and width is not None, 'unwarped_perspective_contour: You must specify either to_points or both width and height, but all three were None' | assert height is None and width is None, 'unwarped_perspective_contour: Both to_points AND height/width were specified - please only give to_points or height/width' | height=height",
      "transformation_code": "height=height, width=width) | unwarped_perspective_contour(contour, from_points, to_points=None, *, height: int=None, width: int=None) | unwarped_perspective_contour(dot_points, warp_quad, height=height, width=width)",
      "error_handling": "",
      "documentation": "height: Output height for default to_points calculation."
    },
    {
      "arg_name": "width",
      "function": "unwarped_perspective_contour",
      "default_value": null,
      "usage_pattern": "none_check",
      "validation_code": "assert height is not None and width is not None, 'unwarped_perspective_contour: You must specify either to_points or both width and height, but all three were None' | assert height is None and width is None, 'unwarped_perspective_contour: Both to_points AND height/width were specified - please only give to_points or height/width' | width = get_image_dimensions",
      "transformation_code": "width = get_image_dimensions(image) | width=width) | unwarped_perspective_contour(contour, from_points, to_points=None, *, height: int=None, width: int=None) | unwarped_perspective_contour(dot_points, warp_quad, height=height, width=width)",
      "error_handling": "",
      "documentation": "width: Output width for default to_points calculation."
    },
    {
      "arg_name": "autoyes",
      "function": "_pip_import_depth_pro",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "autoyes=False",
      "transformation_code": "autoyes=False): | _pip_import_depth_pro(autoyes=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "device",
      "function": "_get_depth_pro_model",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "device=None",
      "transformation_code": "device=None): | device=%s...' % repr(device), 'green', 'bold', new_line=False) | _get_depth_pro_model(device=None) | fansi_print('rp: Loading ml_depth_pro model to device=%s...' % repr(device)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "run_depth_pro",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "assert is_image(image) | isinstance(image, str) | device = image",
      "transformation_code": "image = as_numpy_image(image) | image = load_image(image) | run_depth_pro(image, *, focal_length=None, device=None) | is_torch_image(image)",
      "error_handling": "",
      "documentation": "image (str, PIL.Image, torch.Tensor)"
    },
    {
      "arg_name": "focal_length",
      "function": "run_depth_pro",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "focal_length=None | focal_length = prediction | focal_length = float",
      "transformation_code": "focal_length=None, device=None): | focal_length = prediction['focallength_px'] | run_depth_pro(image, *, focal_length=None, device=None) | float(focal_length)",
      "error_handling": "",
      "documentation": "focal_length (float, optional)"
    },
    {
      "arg_name": "device",
      "function": "run_depth_pro",
      "default_value": null,
      "usage_pattern": "none_check",
      "validation_code": "device=None | device = image.device",
      "transformation_code": "device=None): | device = image.device | run_depth_pro(image, *, focal_length=None, device=None) | _get_depth_pro_model(device)",
      "error_handling": "",
      "documentation": "device (str, optional)"
    },
    {
      "arg_name": "device",
      "function": "_get_cotracker_model",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "device=None",
      "transformation_code": "device=None, dtype=None): | _get_cotracker_model(device=None, dtype=None) | to(device)",
      "error_handling": "",
      "documentation": "device: The torch device to load the model onto. If None, uses current device."
    },
    {
      "arg_name": "dtype",
      "function": "_get_cotracker_model",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "dtype=None",
      "transformation_code": "dtype=None): | _get_cotracker_model(device=None, dtype=None) | to(dtype)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "video",
      "function": "run_cotracker",
      "default_value": null,
      "usage_pattern": "indexing,method_call,length_check,type_check",
      "validation_code": "assert video.ndim == 4, video.ndim | isinstance(video, str) | isinstance(video, torch.Tensor)",
      "transformation_code": "video = load_video( | video = [] | run_cotracker(video, *, device=None, queries=None, segm_mask=None, grid_size=0, grid_query_frame=0, backward_tracking=False) | run_cotracker(\n        ...     video, \n        ...     device=\"cuda\", \n        ...     grid_size=10, # Track 10x10 grid of points\n        ... )",
      "error_handling": "",
      "documentation": "video: Input video as either a file path, numpy array, or torch tensor."
    },
    {
      "arg_name": "device",
      "function": "run_cotracker",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "device=None | device = video.device | device = rp.select_torch_device",
      "transformation_code": "device=None, queries=None, segm_mask=None, grid_size=0, grid_query_frame=0, backward_tracking=False): | device=\"cuda\",  | run_cotracker(video, *, device=None, queries=None, segm_mask=None, grid_size=0, grid_query_frame=0, backward_tracking=False) | run_cotracker(\n        ...     video, \n        ...     device=\"cuda\", \n        ...     grid_size=10, # Track 10x10 grid of points\n        ... )",
      "error_handling": "",
      "documentation": "device: Torch device to run inference on, defaulting to video.device else rp.select_torch_device()"
    },
    {
      "arg_name": "queries",
      "function": "run_cotracker",
      "default_value": null,
      "usage_pattern": "boolean_condition,method_call",
      "validation_code": "queries=None | queries=None | queries = as_numpy_array",
      "transformation_code": "queries=None, segm_mask=None, grid_size=0, grid_query_frame=0, backward_tracking=False): | queries=None to compute dense tracks from grid_query_frame | run_cotracker(video, *, device=None, queries=None, segm_mask=None, grid_size=0, grid_query_frame=0, backward_tracking=False) | is_torch_tensor(queries)",
      "error_handling": "",
      "documentation": "queries: Query points of shape (N, 3) in format (t, x, y) for frame index"
    },
    {
      "arg_name": "segm_mask",
      "function": "run_cotracker",
      "default_value": null,
      "usage_pattern": "boolean_condition,method_call",
      "validation_code": "segm_mask=None | segm_mask = segm_mask.to | segm_mask=segm_mask",
      "transformation_code": "segm_mask=None, grid_size=0, grid_query_frame=0, backward_tracking=False): | segm_mask = segm_mask.to(device) | run_cotracker(video, *, device=None, queries=None, segm_mask=None, grid_size=0, grid_query_frame=0, backward_tracking=False) | cotracker(video, queries=queries, segm_mask=segm_mask, grid_size=grid_size, grid_query_frame=grid_query_frame, backward_tracking=backward_tracking)",
      "error_handling": "",
      "documentation": "segm_mask: Segmentation mask of shape (H, W). Can be used with grid_size"
    },
    {
      "arg_name": "grid_size",
      "function": "run_cotracker",
      "default_value": 0,
      "usage_pattern": "simple_usage",
      "validation_code": "grid_size=0 | grid_size > 0 | grid_size=10",
      "transformation_code": "grid_size=0, grid_query_frame=0, backward_tracking=False): | grid_size=10, # Track 10x10 grid of points | run_cotracker(video, *, device=None, queries=None, segm_mask=None, grid_size=0, grid_query_frame=0, backward_tracking=False) | run_cotracker(\n        ...     video, \n        ...     device=\"cuda\", \n        ...     grid_size=10, # Track 10x10 grid of points\n        ... )",
      "error_handling": "",
      "documentation": "grid_size: Size M for an N=M\u00d7M grid of tracking points on a frame. Set >0 to use"
    },
    {
      "arg_name": "grid_query_frame",
      "function": "run_cotracker",
      "default_value": 0,
      "usage_pattern": "simple_usage",
      "validation_code": "grid_query_frame=0 | grid_query_frame=grid_query_frame",
      "transformation_code": "grid_query_frame=0, backward_tracking=False): | grid_query_frame=grid_query_frame, backward_tracking=backward_tracking) | run_cotracker(video, *, device=None, queries=None, segm_mask=None, grid_size=0, grid_query_frame=0, backward_tracking=False) | cotracker(video, queries=queries, segm_mask=segm_mask, grid_size=grid_size, grid_query_frame=grid_query_frame, backward_tracking=backward_tracking)",
      "error_handling": "",
      "documentation": "grid_query_frame: Frame index to start tracking from (default"
    },
    {
      "arg_name": "backward_tracking",
      "function": "run_cotracker",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "backward_tracking=False | backward_tracking=backward_tracking",
      "transformation_code": "backward_tracking=False): | backward_tracking=backward_tracking) | run_cotracker(video, *, device=None, queries=None, segm_mask=None, grid_size=0, grid_query_frame=0, backward_tracking=False) | cotracker(video, queries=queries, segm_mask=segm_mask, grid_size=grid_size, grid_query_frame=grid_query_frame, backward_tracking=backward_tracking)",
      "error_handling": "",
      "documentation": "backward_tracking: Reverses the video and tracks points in reverse"
    },
    {
      "arg_name": "video",
      "function": "run_tapnet",
      "default_value": null,
      "usage_pattern": "indexing,length_check",
      "validation_code": "video = rp.load_video | frame = video",
      "transformation_code": "video = rp.load_video( | video = [] | run_tapnet(video, *, device=None, queries=None, grid_size=None, grid_query_frame=0, model='tapnext', model_dir=None) | run_tapnet(\n        ...     video,\n        ...     device=\"cuda\",\n        ...     grid_size=10,  # Track 10x10 grid of points\n        ...     model='tapnext',\n        ... )",
      "error_handling": "",
      "documentation": "video: Input video as either a file path string like './video.mp4', glob of image files like '/path/to/*frames.png',"
    },
    {
      "arg_name": "device",
      "function": "run_tapnet",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "device=None | device=device",
      "transformation_code": "device=None, queries=None, grid_size=None, grid_query_frame=0, model='tapnext', model_dir=None): | device=\"cuda\", | run_tapnet(video, *, device=None, queries=None, grid_size=None, grid_query_frame=0, model='tapnext', model_dir=None) | run_tapnet(\n        ...     video,\n        ...     device=\"cuda\",\n        ...     grid_size=10,  # Track 10x10 grid of points\n        ...     model='tapnext',\n        ... )",
      "error_handling": "",
      "documentation": "device: Torch device to run inference on, defaults to cuda if available"
    },
    {
      "arg_name": "queries",
      "function": "run_tapnet",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "queries=None | queries=queries",
      "transformation_code": "queries=None, grid_size=None, grid_query_frame=0, model='tapnext', model_dir=None): | queries=queries, grid_size=grid_size, grid_query_frame=grid_query_frame, model=model, model_dir=model_dir) | run_tapnet(video, *, device=None, queries=None, grid_size=None, grid_query_frame=0, model='tapnext', model_dir=None) | func(video, device=device, queries=queries, grid_size=grid_size, grid_query_frame=grid_query_frame, model=model, model_dir=model_dir)",
      "error_handling": "",
      "documentation": "queries: Query points of shape (N, 3) in format (t, y, x) for frame index"
    },
    {
      "arg_name": "grid_size",
      "function": "run_tapnet",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "grid_size=None | grid_size > 0 | grid_size=20",
      "transformation_code": "grid_size=None, grid_query_frame=0, model='tapnext', model_dir=None): | grid_size=20 if no queries provided | run_tapnet(video, *, device=None, queries=None, grid_size=None, grid_query_frame=0, model='tapnext', model_dir=None) | run_tapnet(\n        ...     video,\n        ...     device=\"cuda\",\n        ...     grid_size=10,  # Track 10x10 grid of points\n        ...     model='tapnext',\n        ... )",
      "error_handling": "",
      "documentation": "grid_size: Size M for an N=M\u00d7M grid of tracking points on a frame. Must be provided"
    },
    {
      "arg_name": "grid_query_frame",
      "function": "run_tapnet",
      "default_value": 0,
      "usage_pattern": "simple_usage",
      "validation_code": "grid_query_frame=0 | grid_query_frame=grid_query_frame",
      "transformation_code": "grid_query_frame=0, model='tapnext', model_dir=None): | grid_query_frame=grid_query_frame, model=model, model_dir=model_dir) | run_tapnet(video, *, device=None, queries=None, grid_size=None, grid_query_frame=0, model='tapnext', model_dir=None) | func(video, device=device, queries=queries, grid_size=grid_size, grid_query_frame=grid_query_frame, model=model, model_dir=model_dir)",
      "error_handling": "",
      "documentation": "grid_query_frame: Frame index(es) to start tracking from. Can be int or iterable"
    },
    {
      "arg_name": "model",
      "function": "run_tapnet",
      "default_value": "tapnext",
      "usage_pattern": "simple_usage",
      "validation_code": "model_dir=model | model=model | model_dir=model",
      "transformation_code": "model='tapnext', model_dir=None): | model='tapnext', | run_tapnet(video, *, device=None, queries=None, grid_size=None, grid_query_frame=0, model='tapnext', model_dir=None) | run_tapnet(\n        ...     video,\n        ...     device=\"cuda\",\n        ...     grid_size=10,  # Track 10x10 grid of points\n        ...     model='tapnext',\n        ... )",
      "error_handling": "",
      "documentation": "model: Which model to use"
    },
    {
      "arg_name": "model_dir",
      "function": "run_tapnet",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "model_dir=None | model_dir=model_dir | model_dir=model_dir",
      "transformation_code": "model_dir=None): | model_dir=model_dir) | run_tapnet(video, *, device=None, queries=None, grid_size=None, grid_query_frame=0, model='tapnext', model_dir=None) | _ensure_tapnet_installed(model, model_dir=model_dir)",
      "error_handling": "",
      "documentation": "model_dir: Directory to cache downloaded models (default"
    },
    {
      "arg_name": "model_dir",
      "function": "_ensure_tapnet_installed",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "model_dir=None",
      "transformation_code": "model_dir=None): | _ensure_tapnet_installed(*models, model_dir=None) | get_tapnet_model(model_name, model_dir, download_only=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image_from",
      "function": "get_optical_flow_via_pyflow",
      "default_value": null,
      "usage_pattern": "indexing",
      "validation_code": "assert rp.is_image(image_from) | assert rp.get_image_dimensions(image_from) == rp.get_image_dimensions(image_to) | image_from = as_rgb_image",
      "transformation_code": "image_from = as_rgb_image(image_from) | image_from = as_rgb_image(image_to) | get_optical_flow_via_pyflow(image_from, image_to) | is_image(image_from)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image_to",
      "function": "get_optical_flow_via_pyflow",
      "default_value": null,
      "usage_pattern": "indexing",
      "validation_code": "assert rp.is_image(image_to) | assert rp.get_image_dimensions(image_from) == rp.get_image_dimensions(image_to) | image_to = rp.as_rgb_image",
      "transformation_code": "image_to = rp.as_rgb_image(rp.as_float_image(image_to)) | image_to = image_to[:, :, :1] | get_optical_flow_via_pyflow(image_from, image_to) | is_image(image_to)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "frame_a",
      "function": "cv_optical_flow",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert frame_a.shape == frame_b.shape | frame_a = get_frame | prev_frame = frame_a",
      "transformation_code": "frame_a = get_frame() | frame_a = frame_b | cv_optical_flow(frame_a, frame_b, algorithm='DenseRLOF') | randn_like(as_torch_image(frame_a)",
      "error_handling": "",
      "documentation": "frame_a (np.ndarray, PIL.Image)"
    },
    {
      "arg_name": "frame_b",
      "function": "cv_optical_flow",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert frame_a.shape == frame_b.shape | frame_b = get_frame | frame_b = frame_b",
      "transformation_code": "frame_b = get_frame() | frame_b = frame_b, frame_a | cv_optical_flow(frame_a, frame_b, algorithm='DenseRLOF') | cv_optical_flow(frame_b, frame_a, algorithm=\"DenseRLOF\")",
      "error_handling": "",
      "documentation": "frame_b (np.ndarray, PIL.Image)"
    },
    {
      "arg_name": "algorithm",
      "function": "cv_optical_flow",
      "default_value": "DenseRLOF",
      "usage_pattern": "equality_check,boolean_condition",
      "validation_code": "flow = algorithm | flow = algorithm",
      "transformation_code": "algorithm='DenseRLOF'): | algorithm=\"DenseRLOF\") #Best, Slowest | cv_optical_flow(frame_a, frame_b, algorithm='DenseRLOF') | cv_optical_flow(frame_b, frame_a, algorithm=\"DenseRLOF\")",
      "error_handling": "",
      "documentation": "algorithm (str)"
    },
    {
      "arg_name": "video",
      "function": "calculate_flows",
      "default_value": null,
      "usage_pattern": "length_check",
      "validation_code": "assert has_len(video), 'Cannot show progress because video doesnt have a length, type(video)=' + str(type(video))",
      "transformation_code": "calculate_flows(video, flow_func=cv_optical_flow, *, show_progress=False, lazy=False) | len(video)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "flow_func",
      "function": "calculate_flows",
      "default_value": "<cv_optical_flow>",
      "usage_pattern": "simple_usage",
      "validation_code": "flow_func=cv_optical_flow | flow = flow_func",
      "transformation_code": "flow_func=cv_optical_flow, *, show_progress=False, lazy=False): | calculate_flows(video, flow_func=cv_optical_flow, *, show_progress=False, lazy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "show_progress",
      "function": "calculate_flows",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "show_progress=False",
      "transformation_code": "show_progress=False, lazy=False): | calculate_flows(video, flow_func=cv_optical_flow, *, show_progress=False, lazy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "lazy",
      "function": "calculate_flows",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "lazy=False",
      "transformation_code": "lazy=False): | calculate_flows(video, flow_func=cv_optical_flow, *, show_progress=False, lazy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "dx",
      "function": "optical_flow_to_image",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "assert rp.is_a_matrix(dx), 'dx must be a matrix' | assert rp.is_float_image(dx), 'dx must be a float image' | assert dx.shape == dy.shape, 'dx and dy must have the same shape'",
      "transformation_code": "dx = as_numpy_array(dx) | dx = dx.astype(float) | optical_flow_to_image(dx, dy, *, mode='saturation', sensitivity=None) | is_a_matrix(dx)",
      "error_handling": "",
      "documentation": "dx (numpy.ndarray matrix)"
    },
    {
      "arg_name": "dy",
      "function": "optical_flow_to_image",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "assert rp.is_a_matrix(dy), 'dy must be a matrix' | assert rp.is_float_image(dy), 'dy must be a float image' | assert dx.shape == dy.shape, 'dx and dy must have the same shape'",
      "transformation_code": "dy = as_numpy_array(dy) | dy = dy.astype(float) | optical_flow_to_image(dx, dy, *, mode='saturation', sensitivity=None) | is_a_matrix(dy)",
      "error_handling": "",
      "documentation": "dy (numpy.ndarray matrix)"
    },
    {
      "arg_name": "mode",
      "function": "optical_flow_to_image",
      "default_value": "saturation",
      "usage_pattern": "simple_usage",
      "validation_code": "assert mode in ['saturation', 'brightness'], \"mode must be either 'saturation' or 'brightness'\"",
      "transformation_code": "mode='saturation', sensitivity=None): | mode = 'saturation' | optical_flow_to_image(dx, dy, *, mode='saturation', sensitivity=None)",
      "error_handling": "",
      "documentation": "mode (str, optional)"
    },
    {
      "arg_name": "sensitivity",
      "function": "optical_flow_to_image",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "assert False, sensitivity | sensitivity=None | sensitivity=1",
      "transformation_code": "sensitivity=None): | sensitivity=1/5) | optical_flow_to_image(dx, dy, *, mode='saturation', sensitivity=None) | visualizing\n           (If you expect a max magnitude of 5 for example, you should set sensitivity=1/5)",
      "error_handling": "",
      "documentation": "sensitivity (float, optional)"
    },
    {
      "arg_name": "dx",
      "function": "optical_flow_to_arrow_grid",
      "default_value": null,
      "usage_pattern": "indexing,type_check",
      "validation_code": "assert isinstance(dx, np.ndarray) and isinstance(dy, np.ndarray), 'dx and dy must be numpy arrays' | assert dx.shape == dy.shape, 'dx and dy must have the same shape' | isinstance(dx, np.ndarray)",
      "transformation_code": "optical_flow_to_arrow_grid(dx, dy, *, step=16, color=(0, 1, 0) | isinstance(dx, np.ndarray)",
      "error_handling": "",
      "documentation": "dx (numpy.ndarray)"
    },
    {
      "arg_name": "dy",
      "function": "optical_flow_to_arrow_grid",
      "default_value": null,
      "usage_pattern": "indexing,type_check",
      "validation_code": "assert isinstance(dx, np.ndarray) and isinstance(dy, np.ndarray), 'dx and dy must be numpy arrays' | assert dx.shape == dy.shape, 'dx and dy must have the same shape' | isinstance(dy, np.ndarray)",
      "transformation_code": "optical_flow_to_arrow_grid(dx, dy, *, step=16, color=(0, 1, 0) | isinstance(dy, np.ndarray)",
      "error_handling": "",
      "documentation": "dy (numpy.ndarray)"
    },
    {
      "arg_name": "step",
      "function": "optical_flow_to_arrow_grid",
      "default_value": 16,
      "usage_pattern": "simple_usage",
      "validation_code": "step=16 | step=32",
      "transformation_code": "step=16, color=(0, 1, 0), background=None): | step=32, color=\"black\", background=optical_flow_to_image(*x,sensitivity=.1) | optical_flow_to_arrow_grid(dx, dy, *, step=16, color=(0, 1, 0) | display_image(\n        ...         optical_flow_to_arrow_grid(\n        ...             *x * 3, step=32, color=\"black\", background=optical_flow_to_image(*x,sensitivity=.1)",
      "error_handling": "",
      "documentation": "step (int, optional)"
    },
    {
      "arg_name": "color",
      "function": "optical_flow_to_arrow_grid",
      "default_value": "(0, 1, 0)",
      "usage_pattern": "simple_usage",
      "validation_code": "assert background.ndim == 3 and background.shape[2] == 3, 'Background must be a color image (HWC format)' | color = as_rgb_float_color | color = float_color_to_byte_color",
      "transformation_code": "color=(0, 1, 0), background=None): | color=\"black\", background=optical_flow_to_image(*x,sensitivity=.1) | optical_flow_to_arrow_grid(dx, dy, *, step=16, color=(0, 1, 0) | display_image(\n        ...         optical_flow_to_arrow_grid(\n        ...             *x * 3, step=32, color=\"black\", background=optical_flow_to_image(*x,sensitivity=.1)",
      "error_handling": "",
      "documentation": "color (tuple, optional)"
    },
    {
      "arg_name": "background",
      "function": "optical_flow_to_arrow_grid",
      "default_value": null,
      "usage_pattern": "boolean_condition,method_call,type_check",
      "validation_code": "assert isinstance(background, np.ndarray), 'Background must be a numpy array' | assert background.ndim == 3 and background.shape[2] == 3, 'Background must be a color image (HWC format)' | isinstance(background, np.ndarray)",
      "transformation_code": "background=None): | background=image) | draw_flow_grid(*flow,background=image) | display_image(\n        ...         optical_flow_to_arrow_grid(\n        ...             *x * 3, step=32, color=\"black\", background=optical_flow_to_image(*x,sensitivity=.1)",
      "error_handling": "",
      "documentation": "background (numpy.ndarray, optional)"
    },
    {
      "arg_name": "image",
      "function": "cv_remap_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert in_height == out_height, 'rp.cv_remap_image: If using relative=True, the UV map must be the same shape as the input image' | assert in_width == out_width, 'rp.cv_remap_image: If using relative=True, the UV map must be the same shape as the input image' | image = as_byte_image",
      "transformation_code": "image = as_byte_image(image) | cv_remap_image(image, x, y, *, relative=False, interp='bilinear') | is_binary_image(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "cv_remap_image",
      "default_value": null,
      "usage_pattern": "method_call,addition",
      "validation_code": "assert rp.is_a_matrix(x), 'x must be a matrix' | assert rp.get_image_dimensions(x) == rp.get_image_dimensions(y) | x = x.astype",
      "transformation_code": "x = x.astype(np.float32) | cv_remap_image(image, x, y, *, relative=False, interp='bilinear') | is_a_matrix(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "y",
      "function": "cv_remap_image",
      "default_value": null,
      "usage_pattern": "method_call,addition",
      "validation_code": "assert rp.is_a_matrix(y), 'y must be a matrix' | assert rp.get_image_dimensions(x) == rp.get_image_dimensions(y) | y = y.astype",
      "transformation_code": "y = y.astype(np.float32) | cv_remap_image(image, x, y, *, relative=False, interp='bilinear') | is_a_matrix(y)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "relative",
      "function": "cv_remap_image",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "assert in_height == out_height, 'rp.cv_remap_image: If using relative=True, the UV map must be the same shape as the input image' | assert in_width == out_width, 'rp.cv_remap_image: If using relative=True, the UV map must be the same shape as the input image' | relative=False",
      "transformation_code": "relative=False, interp='bilinear'): | relative=True, it will warp image - treating x and y like dx and dy | cv_remap_image(image, x, y, *, relative=False, interp='bilinear')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "interp",
      "function": "cv_remap_image",
      "default_value": "bilinear",
      "usage_pattern": "simple_usage",
      "validation_code": "assert interp in interp_methods, 'rp.cv_remap_image: interp=%s is not valid. Please choose from %s' % (interp, list(interp_methods)) | interp_method = interp",
      "transformation_code": "interp='bilinear'): | interp=%s is not valid. Please choose from %s' % (interp, list(interp_methods)) | cv_remap_image(image, x, y, *, relative=False, interp='bilinear') | list(interp_methods)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "detect_apriltags",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "image=load_image_from_webcam | image=unwarped_perspective_image | image = as_grayscale_image",
      "transformation_code": "image=load_image_from_webcam() | image=unwarped_perspective_image(image,r.corners) | detect_apriltags(image, family: str='tag36h11') | detect_apriltags(image)",
      "error_handling": "",
      "documentation": "image(image,r.corners)"
    },
    {
      "arg_name": "family",
      "function": "detect_apriltags",
      "default_value": "tag36h11",
      "usage_pattern": "method_call",
      "validation_code": "assert family in supported_families, 'detect_apriltags only supports the following apriltag families' + str(supported_families) | family = family.lower | families=family",
      "transformation_code": "family = family.lower() | detect_apriltags(image, family: str='tag36h11') | _get_apriltag_detector(families=family)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "value",
      "function": "get_apriltag_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "get_apriltag_image(value: int, family: str='tag36h11', size=1) | generate(value, scale=1)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "family",
      "function": "get_apriltag_image",
      "default_value": "tag36h11",
      "usage_pattern": "boolean_condition,type_check",
      "validation_code": "assert isinstance(family, str) | isinstance(family, str)",
      "transformation_code": "get_apriltag_image(value: int, family: str='tag36h11', size=1) | isinstance(family, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "size",
      "function": "get_apriltag_image",
      "default_value": 1,
      "usage_pattern": "simple_usage",
      "validation_code": "size=1 | size=size",
      "transformation_code": "size=1): | size=size, interp='nearest') | get_apriltag_image(value: int, family: str='tag36h11', size=1) | cv_resize_image(tag, size=size, interp='nearest')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "family",
      "function": "get_apriltag_images",
      "default_value": "tag36h11",
      "usage_pattern": "simple_usage",
      "validation_code": "family=family",
      "transformation_code": "family=family, size=size) for v in values] | get_apriltag_images(*values, family: str='tag36h11', size=1) | get_apriltag_image(value=v, family=family, size=size)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "size",
      "function": "get_apriltag_images",
      "default_value": 1,
      "usage_pattern": "simple_usage",
      "validation_code": "size=1 | size=size",
      "transformation_code": "size=1): | size=size) for v in values] | get_apriltag_images(*values, family: str='tag36h11', size=1) | get_apriltag_image(value=v, family=family, size=size)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "root",
      "function": "_display_filetype_size_histogram",
      "default_value": ".",
      "usage_pattern": "simple_usage",
      "validation_code": "assert is_a_folder(root)",
      "transformation_code": "root='.'): | _display_filetype_size_histogram(root='.') | is_a_folder(root)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "paths",
      "function": "_nbca",
      "default_value": null,
      "usage_pattern": "iteration,type_check",
      "validation_code": "isinstance(paths, str) | paths = line_split",
      "transformation_code": "paths = line_split(paths) | _nbca(paths, auto_yes=False, parallel=False) | isinstance(paths, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "auto_yes",
      "function": "_nbca",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "auto_yes=False | auto_yes=auto_yes",
      "transformation_code": "auto_yes=False, parallel=False): | auto_yes=auto_yes) | _nbca(paths, auto_yes=False, parallel=False) | clear_jupyter_notebook_outputs(x, auto_yes=auto_yes)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "parallel",
      "function": "_nbca",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "parallel=False",
      "transformation_code": "parallel=False): | _nbca(paths, auto_yes=False, parallel=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "clear_jupyter_notebook_outputs",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check,addition",
      "validation_code": "assert get_file_extension(path) == 'ipynb', 'clear_jupyter_notebook_outputs: You must select a .ipynb file' | path = input_select_file | path = get_absolute_path",
      "transformation_code": "path = input_select_file(file_extension_filter='ipynb') | path = get_absolute_path(path) | clear_jupyter_notebook_outputs(path: str=None, auto_yes=False) | get_absolute_path(path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "auto_yes",
      "function": "clear_jupyter_notebook_outputs",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "auto_yes=False",
      "transformation_code": "auto_yes=False): | clear_jupyter_notebook_outputs(path: str=None, auto_yes=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "values",
      "function": "line_graph_via_bokeh",
      "default_value": null,
      "usage_pattern": "method_call,type_check",
      "validation_code": "isinstance(values, dict) | y = values",
      "transformation_code": "line_graph_via_bokeh(values, *, xlabel: str=None, ylabel: str=None, title: str=None, logx: float=None, logy: float=None, height: float=400, width: float=None) | isinstance(values, dict)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "xlabel",
      "function": "line_graph_via_bokeh",
      "default_value": null,
      "usage_pattern": "boolean_condition,type_check",
      "validation_code": "assert isinstance(xlabel, str) | isinstance(xlabel, str)",
      "transformation_code": "xlabel='Cows',ylabel='Time') | xlabel='Cows',ylabel='Time') | line_graph_via_bokeh(values, *, xlabel: str=None, ylabel: str=None, title: str=None, logx: float=None, logy: float=None, height: float=400, width: float=None) | isinstance(xlabel, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "ylabel",
      "function": "line_graph_via_bokeh",
      "default_value": null,
      "usage_pattern": "boolean_condition,type_check",
      "validation_code": "assert isinstance(ylabel, str) | isinstance(ylabel, str)",
      "transformation_code": "ylabel='Time') | ylabel='Time') | line_graph_via_bokeh(values, *, xlabel: str=None, ylabel: str=None, title: str=None, logx: float=None, logy: float=None, height: float=400, width: float=None) | isinstance(ylabel, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "title",
      "function": "line_graph_via_bokeh",
      "default_value": null,
      "usage_pattern": "boolean_condition,type_check",
      "validation_code": "assert isinstance(title, str) | isinstance(title, str)",
      "transformation_code": "title='New Jersey',xlabel='Cows',ylabel='Time') | title='New Jersey',xlabel='Cows',ylabel='Time') | line_graph_via_bokeh(values, *, xlabel: str=None, ylabel: str=None, title: str=None, logx: float=None, logy: float=None, height: float=400, width: float=None) | isinstance(title, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "logx",
      "function": "line_graph_via_bokeh",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "logx=False | logx=True | logx=True",
      "transformation_code": "logx=False) | logx=True,title='New Jersey',xlabel='Cows',ylabel='Time') | line_graph_via_bokeh(values, *, xlabel: str=None, ylabel: str=None, title: str=None, logx: float=None, logy: float=None, height: float=400, width: float=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "logy",
      "function": "line_graph_via_bokeh",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "logy=True | logy=True | logy=True",
      "transformation_code": "logy=True,logx=False) | logy=True,logx=True,title='New Jersey',xlabel='Cows',ylabel='Time') | line_graph_via_bokeh(values, *, xlabel: str=None, ylabel: str=None, title: str=None, logx: float=None, logy: float=None, height: float=400, width: float=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "height",
      "function": "line_graph_via_bokeh",
      "default_value": 400,
      "usage_pattern": "boolean_condition",
      "validation_code": "height=400",
      "transformation_code": "height=400,width=400) | line_graph_via_bokeh(values, *, xlabel: str=None, ylabel: str=None, title: str=None, logx: float=None, logy: float=None, height: float=400, width: float=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "width",
      "function": "line_graph_via_bokeh",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "width=400 | width=2 | width=2",
      "transformation_code": "width=400) | width=2, color='#007FFF') | line_graph_via_bokeh(values, *, xlabel: str=None, ylabel: str=None, title: str=None, logx: float=None, logy: float=None, height: float=400, width: float=None) | line(x, y, line_width=2, color='#007FFF')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "values",
      "function": "histogram_via_bokeh",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "histogram_via_bokeh(values, bins: int=50, *, xlabel: str=None, ylabel: str=None, title: str=None, logx: float=None, logy: float=None, height: float=400, width: float=None) | histogram(values, bins=bins)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "bins",
      "function": "histogram_via_bokeh",
      "default_value": 50,
      "usage_pattern": "simple_usage",
      "validation_code": "bins=50 | bins=20 | bins=bins",
      "transformation_code": "bins=50, height=400, width=400) | bins=20, xlabel='Value', ylabel='Frequency', title='Random Integers Histogram') | histogram_via_bokeh(values, bins: int=50, *, xlabel: str=None, ylabel: str=None, title: str=None, logx: float=None, logy: float=None, height: float=400, width: float=None) | histogram(values, bins=bins)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "xlabel",
      "function": "histogram_via_bokeh",
      "default_value": null,
      "usage_pattern": "boolean_condition,type_check",
      "validation_code": "assert isinstance(xlabel, str) | isinstance(xlabel, str)",
      "transformation_code": "xlabel='Value', ylabel='Frequency', title='Random Integers Histogram') | histogram_via_bokeh(values, bins: int=50, *, xlabel: str=None, ylabel: str=None, title: str=None, logx: float=None, logy: float=None, height: float=400, width: float=None) | isinstance(xlabel, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "ylabel",
      "function": "histogram_via_bokeh",
      "default_value": null,
      "usage_pattern": "boolean_condition,type_check",
      "validation_code": "assert isinstance(ylabel, str) | isinstance(ylabel, str)",
      "transformation_code": "ylabel='Frequency', title='Random Integers Histogram') | histogram_via_bokeh(values, bins: int=50, *, xlabel: str=None, ylabel: str=None, title: str=None, logx: float=None, logy: float=None, height: float=400, width: float=None) | isinstance(ylabel, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "title",
      "function": "histogram_via_bokeh",
      "default_value": null,
      "usage_pattern": "boolean_condition,type_check",
      "validation_code": "assert isinstance(title, str) | isinstance(title, str)",
      "transformation_code": "title='Random Integers Histogram') | histogram_via_bokeh(values, bins: int=50, *, xlabel: str=None, ylabel: str=None, title: str=None, logx: float=None, logy: float=None, height: float=400, width: float=None) | isinstance(title, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "logx",
      "function": "histogram_via_bokeh",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "",
      "transformation_code": "histogram_via_bokeh(values, bins: int=50, *, xlabel: str=None, ylabel: str=None, title: str=None, logx: float=None, logy: float=None, height: float=400, width: float=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "logy",
      "function": "histogram_via_bokeh",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "",
      "transformation_code": "histogram_via_bokeh(values, bins: int=50, *, xlabel: str=None, ylabel: str=None, title: str=None, logx: float=None, logy: float=None, height: float=400, width: float=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "height",
      "function": "histogram_via_bokeh",
      "default_value": 400,
      "usage_pattern": "boolean_condition",
      "validation_code": "height=400",
      "transformation_code": "height=400, width=400) | histogram_via_bokeh(values, bins: int=50, *, xlabel: str=None, ylabel: str=None, title: str=None, logx: float=None, logy: float=None, height: float=400, width: float=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "width",
      "function": "histogram_via_bokeh",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "width=400",
      "transformation_code": "width=400) | histogram_via_bokeh(values, bins: int=50, *, xlabel: str=None, ylabel: str=None, title: str=None, logx: float=None, logy: float=None, height: float=400, width: float=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "get_git_branch",
      "default_value": ".",
      "usage_pattern": "simple_usage",
      "validation_code": "path = get_git_repo_root | cwd=path",
      "transformation_code": "path='.') -> str: | path = get_git_repo_root(path) | get_git_branch(path='.') | get_git_repo_root(path)",
      "error_handling": "try_except",
      "documentation": "path (str)"
    },
    {
      "arg_name": "path",
      "function": "get_git_is_dirty",
      "default_value": ".",
      "usage_pattern": "simple_usage",
      "validation_code": "path = get_git_repo_root | cwd=path",
      "transformation_code": "path='.') -> bool: | path = get_git_repo_root(path) | get_git_is_dirty(path='.') | get_git_repo_root(path)",
      "error_handling": "try_except",
      "documentation": "path (str)"
    },
    {
      "arg_name": "repo",
      "function": "get_git_remote_url",
      "default_value": ".",
      "usage_pattern": "simple_usage",
      "validation_code": "assert folder_exists(repo) | assert False, 'Is not a git repo: ' + str(repo) | repo = is_a_git_repo",
      "transformation_code": "repo='.'): | repo = is_a_git_repo(repo) | get_git_remote_url(repo='.') | folder_exists(repo)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "folder",
      "function": "get_current_git_hash",
      "default_value": ".",
      "usage_pattern": "simple_usage",
      "validation_code": "assert folder_exists(folder) | assert is_a_git_repo(folder), 'Not in a git repo'",
      "transformation_code": "folder='.'): | get_current_git_hash(folder='.') | folder_exists(folder)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "folder",
      "function": "get_git_commit_message",
      "default_value": ".",
      "usage_pattern": "simple_usage",
      "validation_code": "assert folder_exists(folder) | assert is_a_git_repo(folder), 'Not in a git repo'",
      "transformation_code": "folder='.'): | get_git_commit_message(folder='.') | folder_exists(folder)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "get_git_commit_date",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "get_git_commit_date(path: str) | get_git_repo_root(path)",
      "error_handling": "",
      "documentation": "path: The path to the Git repository."
    },
    {
      "arg_name": "path",
      "function": "is_a_git_repo",
      "default_value": ".",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "path='.', use_cache=False): | is_a_git_repo(path='.', use_cache=False) | Repo(path, search_parent_directories=True)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "use_cache",
      "function": "is_a_git_repo",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "use_cache=False",
      "transformation_code": "use_cache=False): | is_a_git_repo(path='.', use_cache=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "get_git_repo_root",
      "default_value": ".",
      "usage_pattern": "simple_usage",
      "validation_code": "assert output, 'Is not a git repo: ' + str(path)",
      "transformation_code": "path='.', use_cache=False): | get_git_repo_root(path='.', use_cache=False) | path (the .git path)",
      "error_handling": "",
      "documentation": "path (the .git path). If it's not a git repo, it throws an error."
    },
    {
      "arg_name": "use_cache",
      "function": "get_git_repo_root",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "use_cache=False",
      "transformation_code": "use_cache=False): | get_git_repo_root(path='.', use_cache=False) | is_a_git_repo(path, use_cache)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "url",
      "function": "_distill_github_url",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "parsed = url",
      "transformation_code": "_distill_github_url(url) | urlparse(url)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "url",
      "function": "_get_repo_name_from_url",
      "default_value": null,
      "usage_pattern": "boolean_condition,indexing,method_call",
      "validation_code": "assert is_valid_url(url) | url = _distill_github_url | url = url.strip",
      "transformation_code": "url = _distill_github_url(url) | url = url.strip() | _get_repo_name_from_url(url) | _distill_github_url(url)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "url",
      "function": "git_clone",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "url = _distill_github_url",
      "transformation_code": "url = _distill_github_url(url) | git_clone(url, path=None, *, depth=None, branch=None, single_branch=False, show_progress=False) | _distill_github_url(url)",
      "error_handling": "",
      "documentation": "url: URL of the Git repository to clone"
    },
    {
      "arg_name": "path",
      "function": "git_clone",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "path=None | path = _get_repo_name_from_url | path = get_absolute_path",
      "transformation_code": "path=None, *, depth=None, branch=None, single_branch=False, show_progress=False): | path = _get_repo_name_from_url(url) | git_clone(url, path=None, *, depth=None, branch=None, single_branch=False, show_progress=False) | get_absolute_path(path)",
      "error_handling": "",
      "documentation": "path: Local path to clone into (defaults to repo name)"
    },
    {
      "arg_name": "depth",
      "function": "git_clone",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "depth=None",
      "transformation_code": "depth=None, branch=None, single_branch=False, show_progress=False): | git_clone(url, path=None, *, depth=None, branch=None, single_branch=False, show_progress=False) | str(depth)",
      "error_handling": "",
      "documentation": "depth: Create a shallow clone with history truncated to the specified number of commits"
    },
    {
      "arg_name": "branch",
      "function": "git_clone",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "branch=None | branch=False",
      "transformation_code": "branch=None, single_branch=False, show_progress=False): | git_clone(url, path=None, *, depth=None, branch=None, single_branch=False, show_progress=False) | quote(branch)",
      "error_handling": "",
      "documentation": "branch: Clone a specific branch instead of the default (usually master/main)"
    },
    {
      "arg_name": "single_branch",
      "function": "git_clone",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "single_branch=False",
      "transformation_code": "single_branch=False, show_progress=False): | git_clone(url, path=None, *, depth=None, branch=None, single_branch=False, show_progress=False)",
      "error_handling": "",
      "documentation": "single_branch: Clone only the specified branch, not all branches"
    },
    {
      "arg_name": "show_progress",
      "function": "git_clone",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "show_progress=False",
      "transformation_code": "show_progress=False): | git_clone(url, path=None, *, depth=None, branch=None, single_branch=False, show_progress=False)",
      "error_handling": "",
      "documentation": "show_progress: Print the git clone command before executing"
    },
    {
      "arg_name": "path",
      "function": "git_pull",
      "default_value": ".",
      "usage_pattern": "simple_usage",
      "validation_code": "path = get_absolute_path",
      "transformation_code": "path='.', *, branch=None, show_progress=False): | path = get_absolute_path(path) | git_pull(path='.', *, branch=None, show_progress=False) | get_absolute_path(path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "branch",
      "function": "git_pull",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "branch=None",
      "transformation_code": "branch=None, show_progress=False): | git_pull(path='.', *, branch=None, show_progress=False) | quote(branch)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "show_progress",
      "function": "git_pull",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "show_progress=False",
      "transformation_code": "show_progress=False): | git_pull(path='.', *, branch=None, show_progress=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "folder",
      "function": "get_git_info",
      "default_value": ".",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "folder='.'): | get_git_info(folder='.') | Repo(folder)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "file_path",
      "function": "get_git_date_modified",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "file_path = 'path/to/your/file' | get_git_date_modified(file_path) | print(get_git_date_modified(file_path)",
      "error_handling": "try_except",
      "documentation": "file_path (str)"
    },
    {
      "arg_name": "code",
      "function": "_autoformat_python_code_via_black",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_autoformat_python_code_via_black(code: str) | format_str(code, mode=black.Mode(line_length=1000)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "python_code_snippet",
      "function": "autoformat_python_via_black_macchiato",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "autoformat_python_via_black_macchiato(python_code_snippet: str, max_line_length=None) | StringIO(python_code_snippet)",
      "error_handling": "",
      "documentation": "python_code_snippet (str)"
    },
    {
      "arg_name": "max_line_length",
      "function": "autoformat_python_via_black_macchiato",
      "default_value": null,
      "usage_pattern": "boolean_condition,type_check",
      "validation_code": "assert isinstance(max_line_length, int) | isinstance(max_line_length, int) | max_line_length=None",
      "transformation_code": "max_line_length=None) -> str: | autoformat_python_via_black_macchiato(python_code_snippet: str, max_line_length=None) | isinstance(max_line_length, int)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "code",
      "function": "autoformat_html_via_bs4",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "code = soup.prettify",
      "transformation_code": "code = soup.prettify() | autoformat_html_via_bs4(code: str) | BeautifulSoup(code, 'html.parser')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "code",
      "function": "add_trailing_commas",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "add_trailing_commas(code: str) | _fix_src(code)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "data",
      "function": "autoformat_json",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "isinstance(data, str) | data = json.loads",
      "transformation_code": "data = json.loads(data) | autoformat_json(data, indent=4) | isinstance(data, str)",
      "error_handling": "try_except",
      "documentation": "data (str, object)"
    },
    {
      "arg_name": "indent",
      "function": "autoformat_json",
      "default_value": 4,
      "usage_pattern": "simple_usage",
      "validation_code": "indent=4 | indent=indent",
      "transformation_code": "indent=4): | indent=indent) | autoformat_json(data, indent=4) | dumps(data, indent=indent)",
      "error_handling": "try_except",
      "documentation": "indent (int or str, optional)"
    },
    {
      "arg_name": "images",
      "function": "as_numpy_images",
      "default_value": null,
      "usage_pattern": "method_call,iteration,type_check",
      "validation_code": "assert isinstance(images, torch.Tensor) | assert len(images.shape) == 4, 'Should be 4d tensor: (batch size, num channels, height, width)' | isinstance(images, torch.Tensor)",
      "transformation_code": "images = as_numpy_array(images) | images = images.transpose(0, 2, 3, 1) | as_numpy_images(images, copy=True) | _is_numpy_array(images)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "copy",
      "function": "as_numpy_images",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "copy=True | copy=copy",
      "transformation_code": "copy=True): | copy=copy) for x in images] | as_numpy_images(images, copy=True) | as_numpy_image(x, copy=copy)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "as_pil_image",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "assert is_image(image), 'as_pil_image: Input is not an image as defined by rp.is_image' | assert is_image(image), image.shape | image = as_numpy_image",
      "transformation_code": "image = as_numpy_image(image) | image = as_byte_image(image) | as_pil_image(image) | is_image(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "images",
      "function": "as_pil_images",
      "default_value": null,
      "usage_pattern": "iteration",
      "validation_code": "",
      "transformation_code": "as_pil_images(images)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "as_numpy_image",
      "default_value": null,
      "usage_pattern": "indexing,method_call,type_check",
      "validation_code": "assert False, 'Unsupported image type: ' + str(type(image)) | isinstance(image, np.ndarray)",
      "transformation_code": "as_numpy_image(image, *, copy=True) | isinstance(image, np.ndarray)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "copy",
      "function": "as_numpy_image",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "copy=True",
      "transformation_code": "copy=True): | as_numpy_image(image, *, copy=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "video",
      "function": "as_numpy_video",
      "default_value": null,
      "usage_pattern": "iteration",
      "validation_code": "",
      "transformation_code": "as_numpy_video(video) | is_numpy_array(video)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "videos",
      "function": "as_numpy_videos",
      "default_value": null,
      "usage_pattern": "iteration",
      "validation_code": "",
      "transformation_code": "as_numpy_videos(videos) | is_numpy_array(videos)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "videos",
      "function": "as_torch_videos",
      "default_value": null,
      "usage_pattern": "iteration",
      "validation_code": "videos = torch.stack",
      "transformation_code": "videos = [gather_args_call(as_torch_video, video) for video in videos] | videos = torch.stack(videos) | as_torch_videos(videos, *, device=None, dtype=None, copy=False) | len(set((x.shape for x in videos)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "device",
      "function": "as_torch_videos",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "device=None",
      "transformation_code": "device=None, dtype=None, copy=False): | as_torch_videos(videos, *, device=None, dtype=None, copy=False) | len(set((x.device for x in videos)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "dtype",
      "function": "as_torch_videos",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "dtype=None",
      "transformation_code": "dtype=None, copy=False): | as_torch_videos(videos, *, device=None, dtype=None, copy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "copy",
      "function": "as_torch_videos",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "copy=False",
      "transformation_code": "copy=False): | as_torch_videos(videos, *, device=None, dtype=None, copy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "images",
      "function": "as_torch_images",
      "default_value": null,
      "usage_pattern": "method_call,iteration",
      "validation_code": "assert len(images.shape) != 3, 'Grayscale images are not yet supported' | images = images | images = as_numpy_array",
      "transformation_code": "images = images / 255 | images = [as_float_image(x) for x in images] | as_torch_images(images, *, device=None, dtype=None, copy=False) | _is_numpy_array(images)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "device",
      "function": "as_torch_images",
      "default_value": null,
      "usage_pattern": "equality_check,boolean_condition",
      "validation_code": "device=None | device=device",
      "transformation_code": "device=None, dtype=None, copy=False): | device == 'mps' and dtype in [None, torch.float64]: | as_torch_images(images, *, device=None, dtype=None, copy=False) | tensor(images, device=device, dtype=dtype)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "dtype",
      "function": "as_torch_images",
      "default_value": null,
      "usage_pattern": "equality_check",
      "validation_code": "dtype=None | dtype == np.uint8 | dtype = torch.float32",
      "transformation_code": "dtype=None, copy=False): | dtype == np.uint8: | as_torch_images(images, *, device=None, dtype=None, copy=False) | tensor(images, device=device, dtype=dtype)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "copy",
      "function": "as_torch_images",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "copy=False",
      "transformation_code": "copy=False): | as_torch_images(images, *, device=None, dtype=None, copy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "as_torch_image",
      "default_value": null,
      "usage_pattern": "indexing,method_call,type_check",
      "validation_code": "assert False, 'Unsupported image type: ' + str(type(image)) | isinstance(image, np.ndarray)",
      "transformation_code": "as_torch_image(image, *, device=None, dtype=None, copy=False) | is_torch_tensor(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "device",
      "function": "as_torch_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "device=None",
      "transformation_code": "device=None, dtype=None, copy=False): | as_torch_image(image, *, device=None, dtype=None, copy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "dtype",
      "function": "as_torch_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "dtype=None",
      "transformation_code": "dtype=None, copy=False): | as_torch_image(image, *, device=None, dtype=None, copy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "copy",
      "function": "as_torch_image",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "copy=False | copy=False",
      "transformation_code": "copy=False): | copy=False)) | as_torch_image(image, *, device=None, dtype=None, copy=False) | gather_args_call(as_numpy_image(image, copy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "load_safetensors",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "load_safetensors(path, device='cpu', *, show_progress=False, verbose=False, use_cache=False, keys_only=False, metadata=False) | handy_hash([path, device, keys_only, metadata])",
      "error_handling": "",
      "documentation": "path (str)"
    },
    {
      "arg_name": "device",
      "function": "load_safetensors",
      "default_value": "cpu",
      "usage_pattern": "simple_usage",
      "validation_code": "device=device",
      "transformation_code": "device='cpu', *, show_progress=False, verbose=False, use_cache=False, keys_only=False, metadata=False): | device=device) as f: | load_safetensors(path, device='cpu', *, show_progress=False, verbose=False, use_cache=False, keys_only=False, metadata=False) | handy_hash([path, device, keys_only, metadata])",
      "error_handling": "",
      "documentation": "device (str, optional)"
    },
    {
      "arg_name": "show_progress",
      "function": "load_safetensors",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "show_progress=False",
      "transformation_code": "show_progress=False, verbose=False, use_cache=False, keys_only=False, metadata=False): | load_safetensors(path, device='cpu', *, show_progress=False, verbose=False, use_cache=False, keys_only=False, metadata=False)",
      "error_handling": "",
      "documentation": "show_progress (bool, optional)"
    },
    {
      "arg_name": "verbose",
      "function": "load_safetensors",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "verbose=False",
      "transformation_code": "verbose=False, use_cache=False, keys_only=False, metadata=False): | load_safetensors(path, device='cpu', *, show_progress=False, verbose=False, use_cache=False, keys_only=False, metadata=False)",
      "error_handling": "",
      "documentation": "verbose (bool, optional)"
    },
    {
      "arg_name": "use_cache",
      "function": "load_safetensors",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "use_cache=False | use_cache=False",
      "transformation_code": "use_cache=False, keys_only=False, metadata=False): | use_cache=False) | load_safetensors(path, device='cpu', *, show_progress=False, verbose=False, use_cache=False, keys_only=False, metadata=False) | gather_args_recursive_call(use_cache=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "keys_only",
      "function": "load_safetensors",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "keys_only=False | keys_only=True | keys_only=False",
      "transformation_code": "keys_only=False, metadata=False): | keys_only=True) | load_safetensors(path, device='cpu', *, show_progress=False, verbose=False, use_cache=False, keys_only=False, metadata=False) | load_safetensors('*.safetensors', keys_only=True)",
      "error_handling": "",
      "documentation": "keys_only (bool)"
    },
    {
      "arg_name": "metadata",
      "function": "load_safetensors",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "metadata=False | metadata=True",
      "transformation_code": "metadata=False): | metadata=True) for subpath in subpaths]) | load_safetensors(path, device='cpu', *, show_progress=False, verbose=False, use_cache=False, keys_only=False, metadata=False) | returns (regular output, metadata)",
      "error_handling": "",
      "documentation": "metadata (bool)"
    },
    {
      "arg_name": "tensors",
      "function": "save_safetensors",
      "default_value": null,
      "usage_pattern": "method_call,length_check",
      "validation_code": "tensors = dict",
      "transformation_code": "tensors = {\"weight\": torch.randn(3, 4), \"bias\": torch.randn(4)} | tensors = dict(tensors) | save_safetensors(tensors, path, metadata=None, *, verbose=False) | save_safetensors(tensors, \"model.safetensors\")",
      "error_handling": "",
      "documentation": "tensors (dict or easydict)"
    },
    {
      "arg_name": "path",
      "function": "save_safetensors",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "save_safetensors(tensors, path, metadata=None, *, verbose=False) | make_parent_directory(path)",
      "error_handling": "",
      "documentation": "path (str)"
    },
    {
      "arg_name": "metadata",
      "function": "save_safetensors",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "metadata=None",
      "transformation_code": "metadata=None, *, verbose=False): | save_safetensors(tensors, path, metadata=None, *, verbose=False) | save_file(tensors, path, metadata)",
      "error_handling": "",
      "documentation": "metadata (dict, optional)"
    },
    {
      "arg_name": "verbose",
      "function": "save_safetensors",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "verbose=False",
      "transformation_code": "verbose=False): | save_safetensors(tensors, path, metadata=None, *, verbose=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "n",
      "function": "select_torch_device",
      "default_value": 0,
      "usage_pattern": "simple_usage",
      "validation_code": "n=0 | n >= number | n=0",
      "transformation_code": "n=0, *, silent=False, prefer_used=False, reserve=False): | n=0, you will get 'cuda:1'. | select_torch_device(n=0, *, silent=False, prefer_used=False, reserve=False) | MPS (Metal Performance Shaders)",
      "error_handling": "",
      "documentation": "n (int, optional)"
    },
    {
      "arg_name": "silent",
      "function": "select_torch_device",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "silent=False | silent=silent | silent=True",
      "transformation_code": "silent=False, prefer_used=False, reserve=False): | silent=silent, prefer_used=prefer_used, reserve=False) | select_torch_device(n=0, *, silent=False, prefer_used=False, reserve=False) | select_torch_device(n=n, silent=silent, prefer_used=prefer_used, reserve=False)",
      "error_handling": "",
      "documentation": "silent (bool, optional)"
    },
    {
      "arg_name": "prefer_used",
      "function": "select_torch_device",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "prefer_used=False | prefer_used=prefer_used",
      "transformation_code": "prefer_used=False, reserve=False): | prefer_used=prefer_used, reserve=False) | select_torch_device(n=0, *, silent=False, prefer_used=False, reserve=False) | select_torch_device(n=n, silent=silent, prefer_used=prefer_used, reserve=False)",
      "error_handling": "",
      "documentation": "prefer_used (bool, optional)"
    },
    {
      "arg_name": "reserve",
      "function": "select_torch_device",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "reserve=False | reserve=True | reserve=False",
      "transformation_code": "reserve=False): | reserve=True) | select_torch_device(n=0, *, silent=False, prefer_used=False, reserve=False) | Example (reserve)",
      "error_handling": "",
      "documentation": "reserve (bool, optional)"
    },
    {
      "arg_name": "device",
      "function": "_torch_device_to_index",
      "default_value": null,
      "usage_pattern": "method_call,type_check",
      "validation_code": "isinstance(device, int) | isinstance(device, str)",
      "transformation_code": "_torch_device_to_index(device) | device (str, int, torch.device)",
      "error_handling": "try_except",
      "documentation": "device(3), or int(3)."
    },
    {
      "arg_name": "gpu_id",
      "function": "_waste_gpu",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_waste_gpu(gpu_id) | get_free_vram(gpu_id)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "code",
      "function": "run_removestar",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "code = gather_args_call | code = qualify_imports",
      "transformation_code": "code='''from rp import * | code = gather_args_call(run_removestar, qualify=False) | run_removestar(code: str, max_line_length=100, quiet=False, qualify=False) | display_code_cell(run_removestar(code,qualify=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "max_line_length",
      "function": "run_removestar",
      "default_value": 100,
      "usage_pattern": "simple_usage",
      "validation_code": "max_line_length=100 | max_line_length=max_line_length",
      "transformation_code": "max_line_length=100, quiet=False, qualify=False): | max_line_length=max_line_length, quiet=True) | run_removestar(code: str, max_line_length=100, quiet=False, qualify=False) | fix_code(code, file='filename is irrelevant', max_line_length=max_line_length, quiet=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "quiet",
      "function": "run_removestar",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "quiet=False | quiet=True",
      "transformation_code": "quiet=False, qualify=False): | quiet=True) | run_removestar(code: str, max_line_length=100, quiet=False, qualify=False) | fix_code(code, file='filename is irrelevant', max_line_length=max_line_length, quiet=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "qualify",
      "function": "run_removestar",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "qualify=False | qualify=False | qualify=True",
      "transformation_code": "qualify=False): | qualify=False),title='Without Qualify') | run_removestar(code: str, max_line_length=100, quiet=False, qualify=False) | display_code_cell(run_removestar(code,qualify=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "code",
      "function": "qualify_imports",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "code = _qualify_imports",
      "transformation_code": "code = ''' | code = _qualify_imports(code, module_name) | qualify_imports(code, *module_names) | display_code_cell(code)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "code",
      "function": "_qualify_imports",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_qualify_imports(code, *module_names) | parse_module(code)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "code",
      "function": "get_star_modules",
      "default_value": null,
      "usage_pattern": "method_call,iteration",
      "validation_code": "code = code.splitlines",
      "transformation_code": "code = code.splitlines() | code = [x for x in code if x.startswith('from ') and x.endswith('import *')] | get_star_modules(code) | sorted(set(code)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "code",
      "function": "remove_fstrings",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "remove_fstrings(code) | convert_string(code)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "code",
      "function": "refactor_flynt",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "refactor_flynt(code: str, *, aggressive: bool=False, multiline: bool=True, len_limit: int=None, percent: bool=True, format: bool=True, concat: bool=False, join: bool=False) | fstringify_code(code, state)",
      "error_handling": "",
      "documentation": "code: Python source code to refactor"
    },
    {
      "arg_name": "aggressive",
      "function": "refactor_flynt",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "aggressive=aggressive",
      "transformation_code": "aggressive=aggressive, multiline=multiline, len_limit=len_limit, transform_percent=percent, transform_format=format, transform_concat=concat, transform_join=join) | refactor_flynt(code: str, *, aggressive: bool=False, multiline: bool=True, len_limit: int=None, percent: bool=True, format: bool=True, concat: bool=False, join: bool=False) | State(quiet=True, dry_run=False, stdout=False, aggressive=aggressive, multiline=multiline, len_limit=len_limit, transform_percent=percent, transform_format=format, transform_concat=concat, transform_join=join)",
      "error_handling": "",
      "documentation": "aggressive: Use aggressive mode for transformations"
    },
    {
      "arg_name": "multiline",
      "function": "refactor_flynt",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "multiline=multiline",
      "transformation_code": "multiline=multiline, len_limit=len_limit, transform_percent=percent, transform_format=format, transform_concat=concat, transform_join=join) | refactor_flynt(code: str, *, aggressive: bool=False, multiline: bool=True, len_limit: int=None, percent: bool=True, format: bool=True, concat: bool=False, join: bool=False) | State(quiet=True, dry_run=False, stdout=False, aggressive=aggressive, multiline=multiline, len_limit=len_limit, transform_percent=percent, transform_format=format, transform_concat=concat, transform_join=join)",
      "error_handling": "",
      "documentation": "multiline: Allow multiline f-strings"
    },
    {
      "arg_name": "len_limit",
      "function": "refactor_flynt",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "len_limit=len_limit",
      "transformation_code": "len_limit=len_limit, transform_percent=percent, transform_format=format, transform_concat=concat, transform_join=join) | refactor_flynt(code: str, *, aggressive: bool=False, multiline: bool=True, len_limit: int=None, percent: bool=True, format: bool=True, concat: bool=False, join: bool=False) | State(quiet=True, dry_run=False, stdout=False, aggressive=aggressive, multiline=multiline, len_limit=len_limit, transform_percent=percent, transform_format=format, transform_concat=concat, transform_join=join)",
      "error_handling": "",
      "documentation": "len_limit: Length limit for f-strings (None for no limit)"
    },
    {
      "arg_name": "percent",
      "function": "refactor_flynt",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "transform_percent=percent",
      "transformation_code": "percent=percent, transform_format=format, transform_concat=concat, transform_join=join) | refactor_flynt(code: str, *, aggressive: bool=False, multiline: bool=True, len_limit: int=None, percent: bool=True, format: bool=True, concat: bool=False, join: bool=False) | State(quiet=True, dry_run=False, stdout=False, aggressive=aggressive, multiline=multiline, len_limit=len_limit, transform_percent=percent, transform_format=format, transform_concat=concat, transform_join=join)",
      "error_handling": "",
      "documentation": "percent: Transform %-style formatting to f-strings"
    },
    {
      "arg_name": "format",
      "function": "refactor_flynt",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "transform_format=format",
      "transformation_code": "format=format, transform_concat=concat, transform_join=join) | refactor_flynt(code: str, *, aggressive: bool=False, multiline: bool=True, len_limit: int=None, percent: bool=True, format: bool=True, concat: bool=False, join: bool=False) | State(quiet=True, dry_run=False, stdout=False, aggressive=aggressive, multiline=multiline, len_limit=len_limit, transform_percent=percent, transform_format=format, transform_concat=concat, transform_join=join)",
      "error_handling": "",
      "documentation": "format: Transform .format() calls to f-strings"
    },
    {
      "arg_name": "concat",
      "function": "refactor_flynt",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "transform_concat=concat",
      "transformation_code": "concat=concat, transform_join=join) | refactor_flynt(code: str, *, aggressive: bool=False, multiline: bool=True, len_limit: int=None, percent: bool=True, format: bool=True, concat: bool=False, join: bool=False) | State(quiet=True, dry_run=False, stdout=False, aggressive=aggressive, multiline=multiline, len_limit=len_limit, transform_percent=percent, transform_format=format, transform_concat=concat, transform_join=join)",
      "error_handling": "",
      "documentation": "concat: Transform string concatenations to f-strings"
    },
    {
      "arg_name": "join",
      "function": "refactor_flynt",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "transform_join=join",
      "transformation_code": "join=join) | refactor_flynt(code: str, *, aggressive: bool=False, multiline: bool=True, len_limit: int=None, percent: bool=True, format: bool=True, concat: bool=False, join: bool=False) | State(quiet=True, dry_run=False, stdout=False, aggressive=aggressive, multiline=multiline, len_limit=len_limit, transform_percent=percent, transform_format=format, transform_concat=concat, transform_join=join)",
      "error_handling": "",
      "documentation": "join: Transform static string joins to f-strings"
    },
    {
      "arg_name": "file_name",
      "function": "file_line_iterator",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "file_line_iterator(file_name, *, with_len=False, reverse=False) | number_of_lines_in_file(file_name)",
      "error_handling": "",
      "documentation": "file_name (str)"
    },
    {
      "arg_name": "with_len",
      "function": "file_line_iterator",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "with_len=False",
      "transformation_code": "with_len=False, reverse=False): | file_line_iterator(file_name, *, with_len=False, reverse=False)",
      "error_handling": "",
      "documentation": "with_len (bool, optional)"
    },
    {
      "arg_name": "reverse",
      "function": "file_line_iterator",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "assert line_join(file_line_iterator(file)) == line_join(list(file_line_iterator(file,reverse=True))[::-1]) | reverse=False | reverse=True",
      "transformation_code": "reverse=False): | reverse=True))[::-1]) | file_line_iterator(file_name, *, with_len=False, reverse=False) | line_join(list(file_line_iterator(file,reverse=True)",
      "error_handling": "",
      "documentation": "reverse (bool, optional)"
    },
    {
      "arg_name": "file_name",
      "function": "_file_line_gen",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_file_line_gen(file_name) | open(file_name, 'r')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "file_name",
      "function": "_reverse_file_line_gen",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_reverse_file_line_gen(file_name) | open(file_name, 'rb')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "filetypes",
      "function": "get_system_fonts",
      "default_value": "ttf ttc otf",
      "usage_pattern": "method_call",
      "validation_code": "extensions_list = filetypes",
      "transformation_code": "filetypes='ttf ttc otf'): | get_system_fonts(filetypes='ttf ttc otf')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "array",
      "function": "resize_list",
      "default_value": null,
      "usage_pattern": "indexing,length_check",
      "validation_code": "",
      "transformation_code": "resize_list(array: list, length: int) | len(array)",
      "error_handling": "",
      "documentation": "array (list)"
    },
    {
      "arg_name": "length",
      "function": "resize_list",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "assert isinstance(length, int), 'Length must be an integer, but got %s instead' % repr(type(length)) | assert length >= 0, 'Length must be a non-negative integer, but got %i instead' % length | isinstance(length, int)",
      "transformation_code": "resize_list(array: list, length: int) | isinstance(length, int)",
      "error_handling": "",
      "documentation": "length (int)"
    },
    {
      "arg_name": "length",
      "function": "resize_lists",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "resize_lists(*arrays: list, length: int) | resize_list(array, length)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "array",
      "function": "resize_list_to_fit",
      "default_value": null,
      "usage_pattern": "length_check",
      "validation_code": "",
      "transformation_code": "resize_list_to_fit(array: list, max_length: int) | len(array)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "max_length",
      "function": "resize_list_to_fit",
      "default_value": null,
      "usage_pattern": "equality_check",
      "validation_code": "max_length==5 | max_length==10 | max_length = len",
      "transformation_code": "max_length==5 | max_length==10 | resize_list_to_fit(array: list, max_length: int) | resize_list(array, max_length)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "arrays",
      "function": "resize_lists_to_fit",
      "default_value": null,
      "usage_pattern": "iteration",
      "validation_code": "",
      "transformation_code": "resize_lists_to_fit(arrays: list, max_length: int)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "max_length",
      "function": "resize_lists_to_fit",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "resize_lists_to_fit(arrays: list, max_length: int) | resize_list_to_fit(x, max_length)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "list_of_lists",
      "function": "list_transpose",
      "default_value": null,
      "usage_pattern": "method_call,length_check",
      "validation_code": "assert len(set(map(len, list_of_lists))) == 1, 'Right now list_transpose only handles rectangular list_of_lists. This functionality may be added in the future.'",
      "transformation_code": "list_transpose(list_of_lists: list) | len(list_of_lists)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "dic",
      "function": "dict_transpose",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "",
      "transformation_code": "dict_transpose(dic) | dic (dict)",
      "error_handling": "",
      "documentation": "dic (dict)"
    },
    {
      "arg_name": "data",
      "function": "list_dict_transpose",
      "default_value": null,
      "usage_pattern": "indexing,length_check",
      "validation_code": "assert all((len(data[key]) == length for key in keys)), 'Right now all contained lists must be same length' | assert all((set(data[i]) == keys for i in range(length))), 'Right now all contained lists must be same length'",
      "transformation_code": "list_dict_transpose(data) | list_dict_transpose(data1)",
      "error_handling": "",
      "documentation": "data (dict or list)"
    },
    {
      "arg_name": "strict",
      "function": "broadcast_lists",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "strict=True",
      "transformation_code": "strict=True): | broadcast_lists(*lists, strict=True)",
      "error_handling": "",
      "documentation": "strict (bool)"
    },
    {
      "arg_name": "d",
      "function": "dict_walk",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert should_traverse(current_dict), 'rp.dict_walk: Input type %s is not one of the travesable types %s' % (type(d), types) | current_dict = d",
      "transformation_code": "dict_walk(d) | path (a tuple of keys \n    leading to the item)",
      "error_handling": "",
      "documentation": "d (dict)"
    },
    {
      "arg_name": "target",
      "function": "monkey_patch",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "monkey_patch(target, name=None) | setattr(target, name or func.__name__, func)",
      "error_handling": "",
      "documentation": "target: The object to which the method should be added."
    },
    {
      "arg_name": "name",
      "function": "monkey_patch",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "name=None",
      "transformation_code": "name=None): | monkey_patch(target, name=None) | setattr(target, name or func.__name__, func)",
      "error_handling": "",
      "documentation": "name: (optional) The name of the method. If not provided, the name of the function being decorated will be used."
    },
    {
      "arg_name": "code",
      "function": "_inline_rp_code",
      "default_value": null,
      "usage_pattern": "method_call,addition",
      "validation_code": "assert is_valid_python_syntax(code) | lines = code | code = _removestar",
      "transformation_code": "code = ''' | code = 'from %s import *\\n' % module + code | _inline_rp_code(code) | extract_imports(code: str)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "gpu_id",
      "function": "_get_gpu_memory_info",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_get_gpu_memory_info(gpu_id) | _get_gpu_handle(gpu_id)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "gpu_id",
      "function": "_get_gpu_handle",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_get_gpu_handle(gpu_id) | nvmlDeviceGetHandleByIndex(gpu_id)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "gpu_id",
      "function": "get_gpu_uuid",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "gpu_id=None | gpu_id=i",
      "transformation_code": "gpu_id=None): | gpu_id=i) for i in get_all_gpu_ids()] | get_gpu_uuid(gpu_id=None) | get_gpu_uuid(gpu_id=i)",
      "error_handling": "",
      "documentation": "gpu_id (int, optional)"
    },
    {
      "arg_name": "pid",
      "function": "get_gpu_ids_used_by_process",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "pid=None | pid = get_process_id",
      "transformation_code": "pid=None): | pid = get_process_id() | get_gpu_ids_used_by_process(pid=None) | get_gpu_ids_used_by_process(pid)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "gpu_id",
      "function": "get_gpu_pids",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check,type_check",
      "validation_code": "assert isinstance(gpu_id, int) | isinstance(gpu_id, int) | gpu_id=None",
      "transformation_code": "gpu_id=None, *, existing_only=True): | gpu_id=i) for i in get_all_gpu_ids()] | get_gpu_pids(gpu_id=None, *, existing_only=True) | get_gpu_pids(gpu_id=i)",
      "error_handling": "",
      "documentation": "gpu_id (int)"
    },
    {
      "arg_name": "existing_only",
      "function": "get_gpu_pids",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "existing_only=True",
      "transformation_code": "existing_only=True): | get_gpu_pids(gpu_id=None, *, existing_only=True)",
      "error_handling": "",
      "documentation": "existing_only (bool)"
    },
    {
      "arg_name": "gpu_id",
      "function": "get_free_vram",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "gpu_id=None | gpu_id=i",
      "transformation_code": "gpu_id=None): | gpu_id=i) for i in get_all_gpu_ids()] | get_free_vram(gpu_id=None) | get_free_vram(gpu_id=i)",
      "error_handling": "",
      "documentation": "gpu_id (int, optional)"
    },
    {
      "arg_name": "gpu_id",
      "function": "get_total_vram",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "gpu_id=None | gpu_id=i",
      "transformation_code": "gpu_id=None): | gpu_id=i) for i in get_all_gpu_ids()] | get_total_vram(gpu_id=None) | get_total_vram(gpu_id=i)",
      "error_handling": "",
      "documentation": "gpu_id (int, optional)"
    },
    {
      "arg_name": "gpu_id",
      "function": "get_used_vram",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "gpu_id=None | gpu_id=i",
      "transformation_code": "gpu_id=None, pid=None): | gpu_id=i, pid=pid) for i in get_all_gpu_ids()] | get_used_vram(gpu_id=None, pid=None) | get_used_vram(gpu_id=i, pid=pid)",
      "error_handling": "",
      "documentation": "gpu_id (int, optional)"
    },
    {
      "arg_name": "pid",
      "function": "get_used_vram",
      "default_value": null,
      "usage_pattern": "equality_check,boolean_condition,none_check",
      "validation_code": "pid=None | pid=12345 | pid=pid",
      "transformation_code": "pid=None): | pid=12345) | get_used_vram(gpu_id=None, pid=None) | get_used_vram(pid=12345)",
      "error_handling": "",
      "documentation": "pid (int, optional)"
    },
    {
      "arg_name": "n",
      "function": "get_gpu_with_most_free_vram",
      "default_value": 0,
      "usage_pattern": "simple_usage",
      "validation_code": "n=0",
      "transformation_code": "n=0, choices=None): | get_gpu_with_most_free_vram(n=0, choices=None) | n (int, optional)",
      "error_handling": "",
      "documentation": "n (int, optional)"
    },
    {
      "arg_name": "choices",
      "function": "get_gpu_with_most_free_vram",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "choices=None | choices = get_all_gpu_ids",
      "transformation_code": "choices=None): | choices=[0, 1, 3]) | get_gpu_with_most_free_vram(n=0, choices=None) | get_gpu_with_most_free_vram(choices=[0, 1, 3])",
      "error_handling": "",
      "documentation": "choices (list, optional)"
    },
    {
      "arg_name": "gpu_id",
      "function": "get_gpu_name",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "gpu_id=None | gpu_id=i",
      "transformation_code": "gpu_id=None): | gpu_id=i) for i in get_all_gpu_ids()] | get_gpu_name(gpu_id=None) | get_gpu_name(gpu_id=i)",
      "error_handling": "",
      "documentation": "gpu_id (int, optional)"
    },
    {
      "arg_name": "gpu_id",
      "function": "get_vram_used_by_current_process",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "gpu_id=None | gpu_id=gpu_id",
      "transformation_code": "gpu_id=None): | gpu_id=gpu_id, pid=current_pid) | get_vram_used_by_current_process(gpu_id=None) | get_used_vram(gpu_id=gpu_id, pid=current_pid)",
      "error_handling": "",
      "documentation": "gpu_id (int, optional)"
    },
    {
      "arg_name": "gpu_id",
      "function": "get_gpu_temperature",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "gpu_id=None | gpu_id=i",
      "transformation_code": "gpu_id=None): | gpu_id=i) for i in get_all_gpu_ids()] | get_gpu_temperature(gpu_id=None) | get_gpu_temperature(gpu_id=i)",
      "error_handling": "",
      "documentation": "gpu_id (int, optional)"
    },
    {
      "arg_name": "gpu_id",
      "function": "get_gpu_utilization",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "gpu_id=None | gpu_id=i",
      "transformation_code": "gpu_id=None): | gpu_id=i) for i in get_all_gpu_ids()] | get_gpu_utilization(gpu_id=None) | get_gpu_utilization(gpu_id=i)",
      "error_handling": "",
      "documentation": "gpu_id (int, optional)"
    },
    {
      "arg_name": "include_processes",
      "function": "print_gpu_summary",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "include_processes=True",
      "transformation_code": "include_processes=True, include_temperature=True, include_percent_vram=True, include_utilization=True, silent=False): | print_gpu_summary(include_processes=True, include_temperature=True, include_percent_vram=True, include_utilization=True, silent=False)",
      "error_handling": "",
      "documentation": "include_processes (bool, optional)"
    },
    {
      "arg_name": "include_temperature",
      "function": "print_gpu_summary",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "include_temperature=True",
      "transformation_code": "include_temperature=True, include_percent_vram=True, include_utilization=True, silent=False): | print_gpu_summary(include_processes=True, include_temperature=True, include_percent_vram=True, include_utilization=True, silent=False)",
      "error_handling": "",
      "documentation": "include_temperature (bool, optional)"
    },
    {
      "arg_name": "include_percent_vram",
      "function": "print_gpu_summary",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "include_percent_vram=True",
      "transformation_code": "include_percent_vram=True, include_utilization=True, silent=False): | print_gpu_summary(include_processes=True, include_temperature=True, include_percent_vram=True, include_utilization=True, silent=False)",
      "error_handling": "",
      "documentation": "include_percent_vram (bool, optional)"
    },
    {
      "arg_name": "include_utilization",
      "function": "print_gpu_summary",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "include_utilization=True",
      "transformation_code": "include_utilization=True, silent=False): | print_gpu_summary(include_processes=True, include_temperature=True, include_percent_vram=True, include_utilization=True, silent=False)",
      "error_handling": "",
      "documentation": "include_utilization (bool, optional)"
    },
    {
      "arg_name": "silent",
      "function": "print_gpu_summary",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "silent=False",
      "transformation_code": "silent=False): | print_gpu_summary(include_processes=True, include_temperature=True, include_percent_vram=True, include_utilization=True, silent=False)",
      "error_handling": "",
      "documentation": "silent (bool, optional)"
    },
    {
      "arg_name": "pid",
      "function": "print_process_info",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "pid = process.ppid",
      "transformation_code": "pid = process.ppid() | print_process_info(pid) | Process(pid)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "s",
      "function": "type_string_with_keyboard",
      "default_value": null,
      "usage_pattern": "iteration",
      "validation_code": "",
      "transformation_code": "type_string_with_keyboard(s, time_per_stroke=1 / 30) | press(Key.esc)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "time_per_stroke",
      "function": "type_string_with_keyboard",
      "default_value": "1 / 30",
      "usage_pattern": "simple_usage",
      "validation_code": "time_per_stroke=1",
      "transformation_code": "time_per_stroke=1 / 30): | type_string_with_keyboard(s, time_per_stroke=1 / 30) | sleep(time_per_stroke)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "key_points",
      "function": "delaunay_interpolation_weights",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert key_points.ndim == 2 | assert key_points.shape[1] == query_points.shape[1] | assert vertices.shape == weights.shape == (len(query_points), key_points.shape[1] + 1)",
      "transformation_code": "key_points = as_numpy_array(key_points) | delaunay_interpolation_weights(key_points, query_points) | as_numpy_array(key_points)",
      "error_handling": "",
      "documentation": "key_points (np.array)"
    },
    {
      "arg_name": "query_points",
      "function": "delaunay_interpolation_weights",
      "default_value": null,
      "usage_pattern": "boolean_condition,length_check",
      "validation_code": "assert query_points.ndim == 2 | assert key_points.shape[1] == query_points.shape[1] | assert vertices.shape == weights.shape == (len(query_points), key_points.shape[1] + 1)",
      "transformation_code": "query_points = as_numpy_array(query_points) | query_points = [query_points] | delaunay_interpolation_weights(key_points, query_points) | as_numpy_array(query_points)",
      "error_handling": "",
      "documentation": "query_points (np.array)"
    },
    {
      "arg_name": "path",
      "function": "get_total_disk_space",
      "default_value": "/",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "path='/'): | get_total_disk_space(path='/') | disk_usage(path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "get_used_disk_space",
      "default_value": "/",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "path='/'): | get_used_disk_space(path='/') | disk_usage(path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "get_free_disk_space",
      "default_value": "/",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "path='/'): | get_free_disk_space(path='/') | disk_usage(path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "pip_args",
      "function": "pip_install",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "assert isinstance(pip_args, str), 'pip_args must be a string like \"numpy --upgrade\" or \"rp --upgrade --no-cache --user\" etc' | isinstance(pip_args, str)",
      "transformation_code": "pip_install(pip_args: str, *, backend=None) | isinstance(pip_args, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "backend",
      "function": "pip_install",
      "default_value": null,
      "usage_pattern": "equality_check,boolean_condition,none_check",
      "validation_code": "assert backend in ['pip', 'uv'] | backend=None | backend = _pip_install_default_backend",
      "transformation_code": "backend=None): | backend = _pip_install_default_backend | pip_install(pip_args: str, *, backend=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "module_name",
      "function": "module_exists",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "module_exists(module_name) | find_module(module_name)",
      "error_handling": "try_except",
      "documentation": "module_name (str)"
    },
    {
      "arg_name": "packages",
      "function": "pip_install_multiple",
      "default_value": null,
      "usage_pattern": "iteration,type_check",
      "validation_code": "assert is_iterable(packages) | assert all((isinstance(x, str) for x in packages)) | isinstance(packages, str)",
      "transformation_code": "packages = text_file_to_string(packages) | packages = line_split(packages) | pip_install_multiple(packages, shotgun=True, quiet=False) | isinstance(packages, str)",
      "error_handling": "",
      "documentation": "packages (str or list)"
    },
    {
      "arg_name": "shotgun",
      "function": "pip_install_multiple",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "shotgun=True",
      "transformation_code": "shotgun=True, quiet=False): | pip_install_multiple(packages, shotgun=True, quiet=False)",
      "error_handling": "",
      "documentation": "shotgun (bool)"
    },
    {
      "arg_name": "quiet",
      "function": "pip_install_multiple",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "quiet=False",
      "transformation_code": "quiet=False): | pip_install_multiple(packages, shotgun=True, quiet=False)",
      "error_handling": "",
      "documentation": "quiet (bool)"
    },
    {
      "arg_name": "module_name",
      "function": "pip_import",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "assert isinstance(module_name, str), 'pip_import: error: module_name must be a string, but got type ' + repr(type(module_name)) | assert module_exists(module_name), \"pip_import: error: Internal assertion failed (rp thought we successfully installed your package, but perhaps it didnt actually work, or maybe this package isn't compatiable with this version of python. Right now I dont know how to detect this).\" | isinstance(module_name, str)",
      "transformation_code": "pip_import(module_name, package_name=None, *, auto_yes=False) | isinstance(module_name, str)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "package_name",
      "function": "pip_import",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "package_name=None | package_name = module_name | package_name = known_pypi_module_package_names",
      "transformation_code": "package_name=None, *, auto_yes=False): | package_name = module_name | pip_import(module_name, package_name=None, *, auto_yes=False) | repr(package_name)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "auto_yes",
      "function": "pip_import",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "auto_yes=False",
      "transformation_code": "auto_yes=False): | pip_import(module_name, package_name=None, *, auto_yes=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "module_name",
      "function": "_import_module",
      "default_value": null,
      "usage_pattern": "addition",
      "validation_code": "",
      "transformation_code": "_import_module(module_name) | exeval(line_join('%return module', 'import ' + module_name + ' as module')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "repo",
      "function": "git_import",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "assert isinstance(repo, str) | isinstance(repo, str) | module_name = repo",
      "transformation_code": "repo=' + repr(repo), 'red', 'bold') | git_import(repo, token=None, *, pull=False) | isinstance(repo, str)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "token",
      "function": "git_import",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check,type_check",
      "validation_code": "assert token is None or isinstance(token, str) | isinstance(token, str) | token=None",
      "transformation_code": "token=None, *, pull=False): | token = _rp_git_token | git_import(repo, token=None, *, pull=False) | isinstance(token, str)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "pull",
      "function": "git_import",
      "default_value": false,
      "usage_pattern": "boolean_condition,type_check",
      "validation_code": "isinstance(pull, str) | pull=False | pull = get_git_commit_date",
      "transformation_code": "pull=False): | pull='Tue May 13, 2025 at 12:20:50AM EDT') | git_import(repo, token=None, *, pull=False) | git_import('CommonSource',pull='Tue May 13, 2025 at 12:20:50AM EDT')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "file",
      "function": "check_pip_requirements",
      "default_value": "requirements.txt",
      "usage_pattern": "simple_usage",
      "validation_code": "assert file_exists(file), 'check_pip_requirements: requirements file not found: ' + str(file)",
      "transformation_code": "file='requirements.txt', silent=False): | check_pip_requirements(file='requirements.txt', silent=False) | file_exists(file)",
      "error_handling": "",
      "documentation": "file (str, optional)"
    },
    {
      "arg_name": "silent",
      "function": "check_pip_requirements",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "silent=False | silent=True",
      "transformation_code": "silent=False): | silent=True)) | check_pip_requirements(file='requirements.txt', silent=False) | strip_ansi_escapes(check_pip_requirements(\"requirements.txt\", silent=True)",
      "error_handling": "",
      "documentation": "silent (bool, optional)"
    },
    {
      "arg_name": "array",
      "function": "fuzzy_match",
      "default_value": null,
      "usage_pattern": "length_check,iteration",
      "validation_code": "",
      "transformation_code": "fuzzy_match(array, target, equals=lambda x, y: x == y) | len(array)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "target",
      "function": "fuzzy_match",
      "default_value": null,
      "usage_pattern": "length_check",
      "validation_code": "",
      "transformation_code": "fuzzy_match(array, target, equals=lambda x, y: x == y) | len(target)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "equals",
      "function": "fuzzy_match",
      "default_value": "lambda x, y: x == y",
      "usage_pattern": "boolean_condition",
      "validation_code": "equals=lambda",
      "transformation_code": "equals=lambda x, y: x == y): | fuzzy_match(array, target, equals=lambda x, y: x == y)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "collection",
      "function": "get_only",
      "default_value": null,
      "usage_pattern": "length_check",
      "validation_code": "assert len(collection) == 1, 'Expected length of 1'",
      "transformation_code": "get_only(collection) | len(collection)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "port",
      "function": "killport",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "killport(port: int, strict=True) | ValueError('rp.killport: No processes using port %i' % port)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "strict",
      "function": "killport",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "strict=True",
      "transformation_code": "strict=True): | killport(port: int, strict=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "clear_redo_on_do",
      "function": "__init__",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "clear_redo_on_do=True | self.clear_redo_on_do = clear_redo_on_do",
      "transformation_code": "clear_redo_on_do=True): | clear_redo_on_do = clear_redo_on_do | __init__(self, clear_redo_on_do=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "width",
      "default_value": null,
      "usage_pattern": "length_check",
      "validation_code": "",
      "transformation_code": "width(image) | len(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "height",
      "default_value": null,
      "usage_pattern": "indexing",
      "validation_code": "",
      "transformation_code": "height(image) | len(image[0])",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "_load_file",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_load_file(path) | load_file(path)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "iterable",
      "function": "skip_filter",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "skip_filter(iterable) | filter(lambda x: x is not SKIP, iterable)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "index",
      "function": "__getitem__",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "__getitem__(self, index)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "_save_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_save_image(image, path) | str(handy_hash(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "_save_image",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "path = str | path = save_image | path = maybe_path",
      "transformation_code": "path = str(handy_hash(image)) + '.png' | path = save_image(image, path) | _save_image(image, path) | path_exists(path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "input_file",
      "function": "_convert_image",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_convert_image(input_file) | convert_image_file(input_file, new_extension, output_folder, skip_overwrite=skip_overwrite, image_transform=image_transform, name_transform=name_transform, load_image=load_image, save_image=save_image, delete_original=delete_original)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "size",
      "function": "read",
      "default_value": "-1",
      "usage_pattern": "equality_check,boolean_condition",
      "validation_code": "size = len",
      "transformation_code": "size=-1): | size == -1: | read(self, size=-1)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "video",
      "function": "loop_wrapper",
      "default_value": null,
      "usage_pattern": "indexing,length_check,iteration",
      "validation_code": "",
      "transformation_code": "loop_wrapper(video) | hasattr(video, '__getitem__')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "content",
      "function": "_convert_content",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "",
      "transformation_code": "_convert_content(content) | is_image(content)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "content_grid",
      "function": "_convert_content_grid",
      "default_value": null,
      "usage_pattern": "iteration",
      "validation_code": "",
      "transformation_code": "_convert_content_grid(content_grid)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "converted_content",
      "function": "_update",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "self._converted_content = converted_content",
      "transformation_code": "converted_content = converted_content | _update(self, converted_content) | update_display(self._converted_content, display_id=self._display_id)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "display",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "display(image) | old_display(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "bytes_count",
      "function": "update",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "update(self, bytes_count)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "content_grid",
      "function": "grid_update",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "grid_update(self, content_grid) | _update(self._convert_content_grid(content_grid)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "content_row",
      "function": "row_update",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "row_update(self, content_row) | grid_update([content_row])",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "zoom_crop_origin",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "scaled_image = image | image = cv_resize_image | image = scales",
      "transformation_code": "image = image | image = cv_resize_image(image, scale, interp='nearest') | zoom_crop_origin(image) | cv_resize_image(image, scale, interp='nearest')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "values",
      "function": "plot",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "plot(values) | plot(values, **kwargs)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "function",
      "function": "handler",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "handler(function, event_data: matplotlib.backend_bases.MouseEvent)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "event_data",
      "function": "handler",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "handler(function, event_data: matplotlib.backend_bases.MouseEvent)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "frame",
      "function": "is_comprehension",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "name = frame",
      "transformation_code": "is_comprehension(frame)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "variables",
      "function": "maybe_add_varkw",
      "default_value": null,
      "usage_pattern": "indexing",
      "validation_code": "varkw_variables = variables | variables = dict",
      "transformation_code": "variables = variables[varkw] | variables = dict(varkw_variables) | maybe_add_varkw(variables: dict) | dict(varkw_variables)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "variables",
      "function": "maybe_replace_varargs",
      "default_value": null,
      "usage_pattern": "indexing",
      "validation_code": "",
      "transformation_code": "maybe_replace_varargs(variables: dict) | tuple(variables[varargs])",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "func",
      "function": "decorator",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "decorator(func) | wraps(func)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "item",
      "function": "format_string",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "item = str",
      "transformation_code": "item = str(item) | format_string(item) | str(item)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "value",
      "function": "get_form",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "get_form(cls, value) | is_form(value, form)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "value",
      "function": "as_form",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "as_form(cls, value, form) | get_form(value)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "form",
      "function": "as_form",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "form = cls.get_form | from_form == form",
      "transformation_code": "form = cls.get_form(value) | form == form: | as_form(cls, value, form) | getattr(cls, from_form + '_to_' + form)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "value",
      "function": "is_form",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "is_form(cls, value, form)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "form",
      "function": "is_form",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "is_form(cls, value, form) | getattr(cls, 'is_' + form)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "tz",
      "function": "human_to_iana",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "human_to_iana(cls, tz)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "tz",
      "function": "iana_to_tzinfo",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "iana_to_tzinfo(cls, tz) | pip_import('pytz')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "tz",
      "function": "iana_to_human",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "iana_to_human(cls, tz)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "tz",
      "function": "tzinfo_to_iana",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "tzinfo_to_iana(cls, tz)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "tz",
      "function": "human_to_tzinfo",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "human_to_tzinfo(cls, tz) | iana_to_tzinfo(cls.human_to_iana(tz)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "tz",
      "function": "tzinfo_to_human",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "tzinfo_to_human(cls, tz) | iana_to_human(cls.tzinfo_to_iana(tz)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "tz",
      "function": "is_iana",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "isinstance(tz, str)",
      "transformation_code": "is_iana(cls, tz) | isinstance(tz, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "size",
      "function": "is_human",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "isinstance(size, str)",
      "transformation_code": "is_human(cls, size) | isinstance(size, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "tz",
      "function": "is_tzinfo",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "isinstance(tz, datetime.tzinfo)",
      "transformation_code": "is_tzinfo(cls, tz) | isinstance(tz, datetime.tzinfo)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "size",
      "function": "human_to_num_bytes",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "human_to_num_bytes(cls, size) | string_to_file_size(size)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "size",
      "function": "num_bytes_to_human",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "num_bytes_to_human(cls, size) | human_readable_file_size(size)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "size",
      "function": "is_num_bytes",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "isinstance(size, int)",
      "transformation_code": "is_num_bytes(cls, size) | isinstance(size, int)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "end",
      "function": "print",
      "default_value": "\n",
      "usage_pattern": "simple_usage",
      "validation_code": "end=out",
      "transformation_code": "end='\\n', flush=False): | end=out, flush=flush) | print(*x, end='\\n', flush=False) | _builtin_print(end=out, flush=flush)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "flush",
      "function": "print",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "flush=False | flush=flush",
      "transformation_code": "flush=False): | flush=flush) | print(*x, end='\\n', flush=False) | _builtin_print(end=out, flush=flush)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "linerino",
      "default_value": null,
      "usage_pattern": "indexing,method_call,length_check",
      "validation_code": "number_of_lines = x | new_x = x",
      "transformation_code": "x = '\\n'.join(x.split('\\n')[:max_str_lines]) | x = x[:max_string_length] | linerino(x, prefix_length=0) | max(0, max_str_lines * get_terminal_width()",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "prefix_length",
      "function": "linerino",
      "default_value": 0,
      "usage_pattern": "simple_usage",
      "validation_code": "prefix_length=0",
      "transformation_code": "prefix_length=0): | linerino(x, prefix_length=0)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "parent_class_names",
      "default_value": null,
      "usage_pattern": "iteration,type_check",
      "validation_code": "isinstance(x, type) | x = type",
      "transformation_code": "x = type(x) | parent_class_names(x, exclude={'object'}) | isinstance(x, type)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "exclude",
      "function": "parent_class_names",
      "default_value": "{'object'}",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "exclude={'object'}): | parent_class_names(x, exclude={'object'})",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "class_object",
      "function": "get_full_class_name",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "get_full_class_name(class_object) | repr(class_object)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "object",
      "function": "get_parent_hierarchy",
      "default_value": null,
      "usage_pattern": "iteration,type_check",
      "validation_code": "isinstance(object, type) | object = object.__class__",
      "transformation_code": "object = object.__class__ | get_parent_hierarchy(object) | isinstance(object, type)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "hierarchy",
      "function": "format_parent_hierarchy",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "format_parent_hierarchy(hierarchy: dict, spaces=len('   ANCESTRY: ') | pformat(hierarchy)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "spaces",
      "function": "format_parent_hierarchy",
      "default_value": "len('   ANCESTRY: ')",
      "usage_pattern": "addition",
      "validation_code": "spaces=len",
      "transformation_code": "spaces=len('   ANCESTRY: ')): | format_parent_hierarchy(hierarchy: dict, spaces=len('   ANCESTRY: ')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "is_dictlike",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "is_dictlike(x) | issubclass(type(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "errortext",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "errortext(x) | fansi(x, 'red', 'underlined')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "cap",
      "function": "list_cap_props",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "val = cap",
      "transformation_code": "list_cap_props(cap)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "filename",
      "function": "take_photo",
      "default_value": "photo.jpg",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "filename='photo.jpg', quality=0.8): | take_photo(filename='photo.jpg', quality=0.8) | open(filename, 'wb')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "quality",
      "function": "take_photo",
      "default_value": 0.8,
      "usage_pattern": "simple_usage",
      "validation_code": "quality=0.8",
      "transformation_code": "quality=0.8): | take_photo(filename='photo.jpg', quality=0.8) | display(HTML(VIDEO_HTML % quality)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "junction",
      "function": "handle_key_colons",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "handle_key_colons(junction)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "junctions",
      "function": "split_colon_keys",
      "default_value": null,
      "usage_pattern": "iteration",
      "validation_code": "",
      "transformation_code": "split_colon_keys(junctions)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "src",
      "function": "parse_dyaml_junctions",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "parse_dyaml_junctions(src) | load(src, PreserveDuplicatesLoader)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "junctions",
      "function": "expand_comma_keys",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "assert isinstance(junctions, JunctionList) | isinstance(junctions, JunctionList)",
      "transformation_code": "expand_comma_keys(junctions) | isinstance(junctions, JunctionList)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "junctions",
      "function": "apply_deltas_from_junctions",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "apply_deltas_from_junctions(junctions: JunctionList, recipient: dict)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "recipient",
      "function": "apply_deltas_from_junctions",
      "default_value": null,
      "usage_pattern": "indexing,method_call",
      "validation_code": "",
      "transformation_code": "apply_deltas_from_junctions(junctions: JunctionList, recipient: dict) | apply_deltas_from_junctions(value, recipient.setdefault(key, {})",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "junctions",
      "function": "junctions_to_dict",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "junctions_to_dict(junctions: JunctionList) | apply_deltas_from_junctions(junctions, {})",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "sorting_key",
      "default_value": null,
      "usage_pattern": "indexing,length_check",
      "validation_code": "",
      "transformation_code": "sorting_key(x) | range(len(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "e",
      "function": "new_key",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "e = get_nested_attr | e = key",
      "transformation_code": "e = get_nested_attr(e, attr) | e = key(e) | new_key(e) | get_nested_attr(e, attr)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "a",
      "function": "cmp",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "a = key | a > kb | a < kb",
      "transformation_code": "a = key(a) | cmp(a, b) | contains(b, a)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "b",
      "function": "cmp",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "b = key",
      "transformation_code": "b = key(b) | cmp(a, b) | contains(b, a)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "stdscr",
      "function": "main",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "ch = stdscr | ch = stdscr",
      "transformation_code": "main(stdscr) | config(stdscr)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "string",
      "function": "get_all_pygments_tokens",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "get_all_pygments_tokens(string: str, pygments_lexer: Lexer=Python3Lexer() | get_tokens_unprocessed(string)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "pygments_lexer",
      "function": "get_all_pygments_tokens",
      "default_value": "Python3Lexer()",
      "usage_pattern": "method_call",
      "validation_code": "",
      "transformation_code": "get_all_pygments_tokens(string: str, pygments_lexer: Lexer=Python3Lexer()",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "string",
      "function": "get_all_token_strings",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "get_all_token_strings(string: str) | get_all_pygments_tokens(string)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "linear_function",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "linear_function(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "line",
      "function": "count_leading",
      "default_value": null,
      "usage_pattern": "method_call,length_check",
      "validation_code": "",
      "transformation_code": "count_leading(line, char) | len(line)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "char",
      "function": "count_leading",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "count_leading(line, char) | len(line.lstrip(char)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "formula",
      "function": "formula_as_file",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "formula_as_file(formula, file, negate=False) | get('http://latex.codecogs.com/png.latex?\\\\dpi{300} \\\\huge %s' % formula)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "file",
      "function": "formula_as_file",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "tfile = file",
      "transformation_code": "file = file | file = 'tmp.png' | formula_as_file(formula, file, negate=False) | open(tfile, 'wb')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "negate",
      "function": "formula_as_file",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "negate=False",
      "transformation_code": "negate=False): | formula_as_file(formula, file, negate=False) | system('convert tmp.png -channel RGB -negate -colorspace rgb %s' % file)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "timg",
      "function": "_helper",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "timg_renderer = timg",
      "transformation_code": "_helper(timg) | render(timg.METHODS[method]['class'])",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "line",
      "function": "matches",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "matches(line) | get_path_name(line)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "cli",
      "function": "in_tokens",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "in_tokens(self, cli)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "string",
      "function": "fansi_progress",
      "default_value": null,
      "usage_pattern": "indexing,method_call,length_check",
      "validation_code": "string = string.expandtabs",
      "transformation_code": "string = string.expandtabs() | fansi_progress(string, proportion) | round(len(string)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "proportion",
      "function": "fansi_progress",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "fansi_progress(string, proportion)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "proportion_completed",
      "function": "display_eta",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "done = proportion_completed | proportion_completed <= 0",
      "transformation_code": "display_eta(proportion_completed, time_elapsed_in_seconds, TOTAL_TO_COMPLETE, COMPLETED_SO_FAR)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "time_elapsed_in_seconds",
      "function": "display_eta",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "seconds=time_elapsed_in_seconds",
      "transformation_code": "display_eta(proportion_completed, time_elapsed_in_seconds, TOTAL_TO_COMPLETE, COMPLETED_SO_FAR) | timedelta(seconds=time_elapsed_in_seconds)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "TOTAL_TO_COMPLETE",
      "function": "display_eta",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "display_eta(proportion_completed, time_elapsed_in_seconds, TOTAL_TO_COMPLETE, COMPLETED_SO_FAR) | str(TOTAL_TO_COMPLETE)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "COMPLETED_SO_FAR",
      "function": "display_eta",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "display_eta(proportion_completed, time_elapsed_in_seconds, TOTAL_TO_COMPLETE, COMPLETED_SO_FAR) | str(COMPLETED_SO_FAR)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "n",
      "function": "out",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "COMPLETED_SO_FAR=n",
      "transformation_code": "out(n) | display_eta(n / total_n, timer()",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "n",
      "function": "__call__",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "__call__(self, n) | display_eta(n)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "code",
      "function": "ipython_exeval",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "ipython_exeval(code, _ignored_1, _ignored_2) | run_cell(code)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "_ignored_1",
      "function": "ipython_exeval",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "ipython_exeval(code, _ignored_1, _ignored_2)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "_ignored_2",
      "function": "ipython_exeval",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "ipython_exeval(code, _ignored_1, _ignored_2)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "directive_line",
      "function": "parse",
      "default_value": null,
      "usage_pattern": "equality_check,boolean_condition,method_call,type_check",
      "validation_code": "assert isinstance(directive_line, str) | isinstance(directive_line, str)",
      "transformation_code": "directive_line == 'private_scope': | parse(directive_line) | isinstance(directive_line, str)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "other",
      "function": "__eq__",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "__eq__(self, other) | mycmp(self.obj, other.obj)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "match",
      "function": "replace",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "",
      "transformation_code": "replace(match) | float(match.group(0)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "p",
      "function": "mli",
      "default_value": null,
      "usage_pattern": "addition",
      "validation_code": "",
      "transformation_code": "mli(p) | input(p if not ol else '')",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "d",
      "function": "_load_pyin_settings_from_dict",
      "default_value": null,
      "usage_pattern": "indexing",
      "validation_code": "pyin.true_color = d",
      "transformation_code": "_load_pyin_settings_from_dict(d) | use_ui_colorscheme(d['_current_ui_style_name'])",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "code",
      "function": "get_all_function_names",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "get_all_function_names(code: str) | line_split(lrstrip_all_lines(code)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "code",
      "function": "_get_function_name",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_get_function_name(code) | get_all_function_names(code)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "line",
      "function": "process_line",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "line = int",
      "transformation_code": "line = int(tokens[10]) | process_line(line) | split_python_tokens(line)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "line",
      "function": "print_line",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "print_line(line) | append(line)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "get_stats_string",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "get_stats_string(path) | is_a_folder(path)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "child",
      "function": "highlight_child",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "highlight_child(child, absolute) | fansi(child, 'blue', 'bold')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "absolute",
      "function": "highlight_child",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "highlight_child(child, absolute) | is_a_folder(absolute)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "localized_path",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "",
      "transformation_code": "localized_path(path) | get_relative_path(path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "bundle",
      "function": "run",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "video_path=bundle | output_path=bundle | framerate=bundle",
      "transformation_code": "run(bundle) | convert_to_gif_via_ffmpeg(video_path=bundle.video_paths, output_path=bundle.output_paths, framerate=bundle.framerate, custom_palette=custom_palette, show_progress=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "run_lambda",
      "function": "run_and_read_all",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "run_and_read_all(run_lambda, command)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "command",
      "function": "run_and_read_all",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "run_and_read_all(run_lambda, command) | run_lambda(command)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "run_lambda",
      "function": "run_and_parse_first_match",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "run_and_parse_first_match(run_lambda, command, regex)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "command",
      "function": "run_and_parse_first_match",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "run_and_parse_first_match(run_lambda, command, regex) | run_lambda(command)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "regex",
      "function": "run_and_parse_first_match",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "run_and_parse_first_match(run_lambda, command, regex) | search(regex, out)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "run_lambda",
      "function": "get_nvidia_driver_version",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "get_nvidia_driver_version(run_lambda) | run_and_parse_first_match(run_lambda, cmd, 'com[.]nvidia[.]CUDA [(](.*?)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "run_lambda",
      "function": "get_gpu_info",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "get_gpu_info(run_lambda)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "run_lambda",
      "function": "get_running_cuda_version",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "get_running_cuda_version(run_lambda) | run_and_parse_first_match(run_lambda, 'nvcc --version', 'release .+ V(.*)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "run_lambda",
      "function": "get_cudnn_version",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "get_cudnn_version(run_lambda)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "run_lambda",
      "function": "get_mac_version",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "get_mac_version(run_lambda) | run_and_parse_first_match(run_lambda, 'sw_vers -productVersion', '(.*)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "run_lambda",
      "function": "get_windows_version",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "get_windows_version(run_lambda) | run_and_read_all(run_lambda, '{} os get Caption | {} /v Caption'.format(wmic_cmd, findstr_cmd)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "run_lambda",
      "function": "get_lsb_version",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "get_lsb_version(run_lambda) | run_and_parse_first_match(run_lambda, 'lsb_release -a', 'Description:\\\\t(.*)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "run_lambda",
      "function": "check_release_file",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "check_release_file(run_lambda) | run_and_parse_first_match(run_lambda, 'cat /etc/*-release', 'PRETTY_NAME=\"(.*)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "run_lambda",
      "function": "get_os",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "get_os(run_lambda) | get_windows_version(run_lambda)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "function",
      "function": "squelch",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "squelch(function, run_lambda)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "run_lambda",
      "function": "squelch",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "squelch(function, run_lambda) | function(run_lambda)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "show_progress",
      "function": "refresh",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "show_progress=False | show_progress=show_progress",
      "transformation_code": "show_progress=False): | show_progress=show_progress) | refresh(show_progress=False) | load_files(_which, keys, show_progress=show_progress)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "paragraph",
      "function": "process_paragraph",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "lines = paragraph",
      "transformation_code": "process_paragraph(paragraph)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "query_path",
      "function": "is_a_match",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "is_a_match(query_path, real_path, case_sensitive) | get_path_name(query_path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "real_path",
      "function": "is_a_match",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "is_a_match(query_path, real_path, case_sensitive) | get_path_name(real_path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "case_sensitive",
      "function": "is_a_match",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "case_sensitive=case_sensitive",
      "transformation_code": "case_sensitive=case_sensitive) | is_a_match(query_path, real_path, case_sensitive) | fuzzy_string_match(query_name, real_name, case_sensitive=case_sensitive)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "names",
      "function": "joined_names",
      "default_value": null,
      "usage_pattern": "length_check",
      "validation_code": "names = sorted",
      "transformation_code": "names = sorted(names) | joined_names(names) | sorted(names)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "page_index",
      "function": "load_page",
      "default_value": null,
      "usage_pattern": "addition",
      "validation_code": "is_last_page = page_index",
      "transformation_code": "load_page(page_index) | format(username, entries_per_page, page_index + 1)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "_parenthesizer_automator",
      "default_value": null,
      "usage_pattern": "equality_check,boolean_condition,method_call",
      "validation_code": "x == y",
      "transformation_code": "x == y: | _parenthesizer_automator(x: str) | join(('(' if x in '([{' else ')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "signum",
      "function": "timeout_handler",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "timeout_handler(signum, frame)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "frame",
      "function": "timeout_handler",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "timeout_handler(signum, frame)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "folder",
      "function": "get_folder_size",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "get_folder_size(folder) | get_file_size(folder)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "units_dict",
      "function": "postprocess",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "",
      "transformation_code": "postprocess(units_dict)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "unit",
      "function": "normalize_unit",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "normalized_unit = unit",
      "transformation_code": "unit = unit.lower().rstrip('s') | normalize_unit(unit: str) | ValueError('Unknown or invalid unit: ' + repr(unit)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "s",
      "function": "pretty_lines",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "s = string_transpose | l = s",
      "transformation_code": "s = string_transpose(string_transpose(s)) | pretty_lines(s) | string_transpose(string_transpose(s)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "patch",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "patch(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "reverse",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "reverse(x) | roll(np.flip(x, axis=0)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "event",
      "function": "mouse_callback",
      "default_value": null,
      "usage_pattern": "equality_check,boolean_condition",
      "validation_code": "event == cv2.EVENT_LBUTTONDOWN | event == cv2.EVENT_MOUSEMOVE | event == cv2.EVENT_LBUTTONUP",
      "transformation_code": "event == cv2.EVENT_LBUTTONDOWN and on_mouse_down: | event == cv2.EVENT_MOUSEMOVE and on_mouse_move: | mouse_callback(event, x, y, flags, param)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "mouse_callback",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "x=x | x=x | x=x",
      "transformation_code": "x=x, y=y) | x=x, y=y) | mouse_callback(event, x, y, flags, param) | on_mouse_down(x=x, y=y)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "y",
      "function": "mouse_callback",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "y=y | y=y | y=y",
      "transformation_code": "y=y) | y=y) | mouse_callback(event, x, y, flags, param) | on_mouse_down(x=x, y=y)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "flags",
      "function": "mouse_callback",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "mouse_callback(event, x, y, flags, param)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "param",
      "function": "mouse_callback",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "mouse_callback(event, x, y, flags, param)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "contour",
      "function": "distance",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "distance(contour) | cv_distance_to_contour(contour, x, y)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "on_mouse_move",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "mouse_x = x",
      "transformation_code": "x = x | on_mouse_move(x, y) | cv_closest_contour(contours, mouse_x, mouse_y)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "y",
      "function": "on_mouse_move",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "mouse_y = y",
      "transformation_code": "y = y | on_mouse_move(x, y) | cv_closest_contour(contours, mouse_x, mouse_y)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "on_mouse_down",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "on_mouse_down(x, y)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "y",
      "function": "on_mouse_down",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "y = id",
      "transformation_code": "y = id(mouse_contour) | on_mouse_down(x, y)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "key",
      "function": "on_key_press",
      "default_value": null,
      "usage_pattern": "equality_check,boolean_condition",
      "validation_code": "",
      "transformation_code": "key == 'b': | key == '\\n': | on_key_press(key)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "points",
      "function": "complex_descriptors",
      "default_value": null,
      "usage_pattern": "indexing",
      "validation_code": "assert points.shape[1] == 2 | points = np.asarray | points = points",
      "transformation_code": "points = np.asarray(points, np.complex128) | points = points[:, 0] + points[:, 1] * 1j | complex_descriptors(points, approach='mean') | asarray(points, np.complex128)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "approach",
      "function": "complex_descriptors",
      "default_value": "mean",
      "usage_pattern": "equality_check,boolean_condition",
      "validation_code": "assert approach in 'mean', 'delta'",
      "transformation_code": "approach='mean'): | approach == 'delta': | complex_descriptors(points, approach='mean')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "signal",
      "function": "conv_circ",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "conv_circ(signal, kernel) | ifft(np.fft.fft(signal)",
      "error_handling": "",
      "documentation": "signal: real 1D array"
    },
    {
      "arg_name": "kernel",
      "function": "conv_circ",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "conv_circ(signal, kernel) | fft(kernel)",
      "error_handling": "",
      "documentation": "kernel: real 1D array"
    },
    {
      "arg_name": "points",
      "function": "complex_descriptor",
      "default_value": null,
      "usage_pattern": "indexing",
      "validation_code": "assert points.shape[1] == 2 | points = np.asarray | points = points",
      "transformation_code": "points = np.asarray(points, np.complex128) | points = points[:, 0] + points[:, 1] * 1j | complex_descriptor(points, approach='mean') | asarray(points, np.complex128)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "approach",
      "function": "complex_descriptor",
      "default_value": "mean",
      "usage_pattern": "equality_check,boolean_condition",
      "validation_code": "assert approach in 'mean', 'delta'",
      "transformation_code": "approach='mean'): | approach == 'delta': | complex_descriptor(points, approach='mean')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "from_points",
      "function": "ryan_match",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "ryan_match(from_points, to_points) | complex_descriptor(from_points)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "to_points",
      "function": "ryan_match",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "ryan_match(from_points, to_points) | complex_descriptor(to_points)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "points",
      "function": "point_cloud_angle",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "points = np.matrix",
      "transformation_code": "points = np.matrix([x, y]) | point_cloud_angle(points) | zip(*points)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "item",
      "function": "__setitem__",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "__setitem__(self, item, value) | add(item)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "value",
      "function": "__setitem__",
      "default_value": null,
      "usage_pattern": "boolean_condition,type_check",
      "validation_code": "isinstance(value, (bool, int)",
      "transformation_code": "__setitem__(self, item, value) | isinstance(value, (bool, int)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "key",
      "function": "__delitem__",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "__delitem__(self, key) | __delitem__(self, HandyHashable(key)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "key",
      "function": "__contains__",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "__contains__(self, key)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "value",
      "function": "fallback",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "fallback(value) | id(value)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "instance",
      "function": "__get__",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "__get__(self, instance, owner)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "owner",
      "function": "__get__",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "__get__(self, instance, owner) | getter(owner)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "name",
      "function": "__new__",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "__new__(cls, name, bases, class_dict) | for (attr_name, attr_value)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "bases",
      "function": "__new__",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "__new__(cls, name, bases, class_dict) | __new__(cls, name, bases, new_class_dict)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "class_dict",
      "function": "__new__",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "",
      "transformation_code": "class_dict = {} | __new__(cls, name, bases, class_dict) | __new__(cls, name, bases, new_class_dict)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "origin",
      "function": "_parse_origin_to_pixels",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check,indexing,method_call,type_check",
      "validation_code": "isinstance(origin, str)",
      "transformation_code": "_parse_origin_to_pixels(origin, shape) | isinstance(origin, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "shape",
      "function": "_parse_origin_to_pixels",
      "default_value": null,
      "usage_pattern": "indexing",
      "validation_code": "",
      "transformation_code": "_parse_origin_to_pixels(origin, shape)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "content",
      "function": "get_urls",
      "default_value": null,
      "usage_pattern": "boolean_condition,indexing,length_check",
      "validation_code": "",
      "transformation_code": "get_urls(content) | range(len(content)",
      "error_handling": "",
      "documentation": "content (string)"
    },
    {
      "arg_name": "urls",
      "function": "fetch_data",
      "default_value": null,
      "usage_pattern": "length_check",
      "validation_code": "",
      "transformation_code": "fetch_data(urls) | enumerate(urls)",
      "error_handling": "",
      "documentation": "urls (list)"
    },
    {
      "arg_name": "root",
      "function": "get",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "get(root, key) | getattr(root, key)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "key",
      "function": "get",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "get(root, key) | getattr(root, key)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "directory_path",
      "function": "recursion_helper",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "assert isinstance(directory_path, str), 'This is an internal assertion that should never fail. If this assertion does fail, get_all_paths has a bug.' | assert directory_exists(directory_path), 'get_file_paths error: ' + repr(directory_path) + ' is not a directory' | isinstance(directory_path, str)",
      "transformation_code": "recursion_helper(directory_path) | isinstance(directory_path, str)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "is_hidden",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "is_hidden(path) | get_file_name(path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "code",
      "function": "_has_if_name_main",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_has_if_name_main(code) | finditer(pattern, code, re.IGNORECASE | re.MULTILINE)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "key",
      "function": "_keyify",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "assert key.shape == self._key_shape, \"FlannDict: error: you can't use inconsistently-shaped keys -- how are we supposed to compare them? key.shape==\" + repr(key.shape) + ' but self._key_shape==' + repr(self._key_shape) | assert not np.iscomplexobj(key), \"FlannDict: error: you can' use complex keys with this FlannDict. Please create another with 'complex_keys' set to True in the constructor.\" | key = np.asarray",
      "transformation_code": "key = np.asarray(key) | key = np.concatenate(([key.real], [key.imag])) | _keyify(self, key) | asarray(key)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "vector",
      "function": "neighbors",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "neighbors(vector) | set(map(tuple, spatial_dict[vector:k])",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "v",
      "function": "minmax",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "v > 255 | v = 255 | v < 0",
      "transformation_code": "v = 255 | v = 0 | minmax(v)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "inMat",
      "function": "dithering_gray",
      "default_value": null,
      "usage_pattern": "indexing",
      "validation_code": "h = inMat | w = inMat | old_p = inMat",
      "transformation_code": "dithering_gray(inMat, samplingF=1) | minmax(inMat[y, x + 1] + quant_error_p * 7 / 16.0)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "samplingF",
      "function": "dithering_gray",
      "default_value": 1,
      "usage_pattern": "simple_usage",
      "validation_code": "samplingF=1",
      "transformation_code": "samplingF=1): | dithering_gray(inMat, samplingF=1) | round(samplingF * old_p / 255.0)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "converter",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "converter(image, copy=True) | channel_converter(dtype_converter(image, copy=copy)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "copy",
      "function": "converter",
      "default_value": true,
      "usage_pattern": "simple_usage",
      "validation_code": "copy=True | copy=copy | copy=copy",
      "transformation_code": "copy=True): | copy=copy), copy=copy) | converter(image, copy=True) | channel_converter(dtype_converter(image, copy=copy)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "color_a",
      "function": "blend_colors",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "color_a = color_a",
      "transformation_code": "color_a = color_a() | blend_colors(color_a, color_b) | callable(color_a)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "color_b",
      "function": "blend_colors",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "color_b = color_b",
      "transformation_code": "color_b = color_b() | blend_colors(color_a, color_b) | callable(color_b)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "_get_html",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "image = rp.encode_image_to_base64",
      "transformation_code": "image = rp.encode_image_to_base64(image) | _get_html(self, image) | encode_image_to_base64(image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "n",
      "function": "f",
      "default_value": null,
      "usage_pattern": "addition",
      "validation_code": "",
      "transformation_code": "f(n, m) | list(range(2 * n + m)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "m",
      "function": "f",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "f(n, m) | list(range(2 * n + m)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "name",
      "function": "match",
      "default_value": null,
      "usage_pattern": "method_call,type_check",
      "validation_code": "assert isinstance(name, str) | isinstance(name, str)",
      "transformation_code": "match(name) | isinstance(name, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "root",
      "function": "keys",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "keys(root) | update(dir(root)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "string",
      "function": "is_valid_integer_string",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "is_valid_integer_string(string) | int(string)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "string",
      "function": "on_fail",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "on_fail(string) | is_valid_integer_string(string)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "user_input",
      "function": "condition",
      "default_value": null,
      "usage_pattern": "boolean_condition,method_call",
      "validation_code": "",
      "transformation_code": "condition(user_input) | int(user_input)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "query",
      "function": "display_query_options",
      "default_value": null,
      "usage_pattern": "boolean_condition,method_call",
      "validation_code": "",
      "transformation_code": "display_query_options(query) | _highlighted_query_results(option, query)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "option",
      "function": "_stringify",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "",
      "transformation_code": "_stringify(option) | stringify(options[option])",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "load",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "load(path) | load_video(path, start_frame=start_frame, length=length, show_progress=False, use_cache=use_cache, frame_transform=frame_transform)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "frame",
      "function": "write_frame",
      "default_value": null,
      "usage_pattern": "method_call,type_check",
      "validation_code": "assert is_image(frame) or isinstance(frame, str) | isinstance(frame, str) | isinstance(frame, str)",
      "transformation_code": "frame = load_image(frame) | frame = rp.crop_image(frame, self.height, self.width, copy=False) | write_frame(self, frame) | is_image(frame)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "frame",
      "function": "load_frame",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "isinstance(frame, str)",
      "transformation_code": "load_frame(frame) | isinstance(frame, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "delfunc",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "delfunc(path) | delete_function(path, permanent=permanent)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "pair",
      "function": "do_copy",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "do_copy(pair)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "is_non_str_iterable",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "isinstance(x, str)",
      "transformation_code": "is_non_str_iterable(x) | is_iterable(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "name",
      "function": "apply_suffix_to_name",
      "default_value": null,
      "usage_pattern": "addition",
      "validation_code": "",
      "transformation_code": "apply_suffix_to_name(name, suffix, num_copies)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "suffix",
      "function": "apply_suffix_to_name",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "new_suffix = suffix | suffix = new_suffix.replace | new_suffix = suffix",
      "transformation_code": "suffix = suffix % unguessable_int | suffix = new_suffix.replace(str(unguessable_int), '') | apply_suffix_to_name(name, suffix, num_copies)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "num_copies",
      "function": "apply_suffix_to_name",
      "default_value": null,
      "usage_pattern": "equality_check,boolean_condition",
      "validation_code": "assert num_copies >= 0 | num_copies >= 0 | num_copies == 0",
      "transformation_code": "num_copies == 0: | apply_suffix_to_name(name, suffix, num_copies)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "apply_suffix_to_path",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "new_path = path",
      "transformation_code": "path = path_join(folder, new_file) | apply_suffix_to_path(path, suffix, num_copies) | get_parent_folder(path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "suffix",
      "function": "apply_suffix_to_path",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "apply_suffix_to_path(path, suffix, num_copies) | apply_suffix_to_name(name, suffix, num_copies)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "num_copies",
      "function": "apply_suffix_to_path",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "apply_suffix_to_path(path, suffix, num_copies) | apply_suffix_to_name(name, suffix, num_copies)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "frame",
      "function": "preprocess_frame",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "frame = as_byte_image | frame = cv2.cvtColor | frame = resize_image_to_fit",
      "transformation_code": "frame = as_byte_image(frame) | frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY) | preprocess_frame(frame) | as_byte_image(frame)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "frame_a",
      "function": "sim_score",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "sim_score(frame_a, frame_b) | ssim(frame_a, frame_b, full=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "frame_b",
      "function": "sim_score",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "sim_score(frame_a, frame_b) | ssim(frame_a, frame_b, full=True)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "signum",
      "function": "handle_timeout",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "handle_timeout(self, signum, frame)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "frame",
      "function": "handle_timeout",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "handle_timeout(self, signum, frame)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "iterator",
      "function": "printed_generator",
      "default_value": null,
      "usage_pattern": "iteration",
      "validation_code": "",
      "transformation_code": "printed_generator(iterator)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "url",
      "function": "download",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "download(url) | download_url_to_cache(url, cache_dir=cache_dir, skip_existing=skip_existing, hash_func=hash_func, timeout=timeout)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "format_path",
      "default_value": null,
      "usage_pattern": "equality_check,boolean_condition,none_check",
      "validation_code": "path == parent | path = get_folder_name | path = get_file_name",
      "transformation_code": "path == parent: | path = '..' | format_path(path: str) | is_a_folder(path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "option",
      "function": "option_to_string",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "isinstance(option, str)",
      "transformation_code": "option_to_string(option) | isinstance(option, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "is_listlike",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "isinstance(x, (list, tuple)",
      "transformation_code": "is_listlike(x) | isinstance(x, (list, tuple)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "command",
      "function": "process_command",
      "default_value": null,
      "usage_pattern": "indexing,method_call,length_check,type_check",
      "validation_code": "assert is_iterable(command) | isinstance(command, str) | isinstance(command, str)",
      "transformation_code": "command = [] | command = command.splitlines() | process_command(command) | isinstance(command, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "a",
      "function": "format",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "a = str | o = a",
      "transformation_code": "a = str(a) | format(a, t) | str(a)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "t",
      "function": "format",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "t = str",
      "transformation_code": "t = str(t) | format(a, t) | str(t)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "string",
      "function": "highlighted",
      "default_value": null,
      "usage_pattern": "indexing,method_call",
      "validation_code": "i = string | s = string",
      "transformation_code": "highlighted(string, query) | fansi(string[i:j], 'green', 'bold')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "query",
      "function": "highlighted",
      "default_value": null,
      "usage_pattern": "method_call,length_check",
      "validation_code": "",
      "transformation_code": "highlighted(string, query) | find(query.lower()",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "image",
      "function": "_as_skia_image",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "assert image.ndim == 3 | assert image.shape[2] == 4 | assert image.dtype == np.uint8",
      "transformation_code": "image = as_numpy_image(image, copy=False) | image = as_rgba_image(image, copy=False) | _as_skia_image(image) | isinstance(image, skia.Image)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "interp",
      "function": "_get_skia_sampling",
      "default_value": null,
      "usage_pattern": "equality_check,boolean_condition",
      "validation_code": "",
      "transformation_code": "interp == 'nearest': | interp == 'area' or interp == 'auto': | _get_skia_sampling(interp: str, mipmap: bool=False) | ValueError('Unsupported interpolation mode: {0}'.format(repr(interp)",
      "error_handling": "",
      "documentation": "interp: Interpolation mode. Can be 'nearest', 'linear', 'cubic',"
    },
    {
      "arg_name": "mipmap",
      "function": "_get_skia_sampling",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "",
      "transformation_code": "_get_skia_sampling(interp: str, mipmap: bool=False) | SamplingOptions(filter_mode, mipmap_mode)",
      "error_handling": "",
      "documentation": "mipmap: Whether to enable mipmapping for high-quality downscaling."
    },
    {
      "arg_name": "shape",
      "function": "format_shape",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "format_shape(shape) | join(map(str, shape)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "name",
      "function": "run_test",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "run_test(name, func, should_raise=False) | print('\\n{}\\nTEST: {}\\n{}'.format('=' * 80, name, '-' * 80)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "func",
      "function": "run_test",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "result = func",
      "transformation_code": "run_test(name, func, should_raise=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "should_raise",
      "function": "run_test",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "should_raise=False",
      "transformation_code": "should_raise=False): | run_test(name, func, should_raise=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "string",
      "function": "sanitize_string",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "",
      "transformation_code": "sanitize_string(string)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "should_include",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "is_hidden = x",
      "transformation_code": "should_include(x: _PathInfo) | and (include_folders and x.is_folder and (not x.is_symlink)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "should_explore",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "should_explore(x: _PathInfo) | and (explore_symlinks or not x.is_symlink)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "postprocess_path",
      "default_value": null,
      "usage_pattern": "boolean_condition,indexing,method_call",
      "validation_code": "x = x.path | x = x",
      "transformation_code": "x = x.path | x = x[2:] | postprocess_path(x: _PathInfo)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "explore",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "explore(x: _PathInfo) | add(x)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "stdscr",
      "function": "config",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "",
      "transformation_code": "config(stdscr)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "stdscr",
      "function": "rain_forever",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "rain_forever(stdscr, pool) | rain_once(stdscr, x, begin, end)",
      "error_handling": "",
      "documentation": "stdscr: curses's screen object"
    },
    {
      "arg_name": "pool",
      "function": "rain_forever",
      "default_value": null,
      "usage_pattern": "boolean_condition,method_call",
      "validation_code": "",
      "transformation_code": "rain_forever(stdscr, pool) | choice(pool)",
      "error_handling": "",
      "documentation": "pool: a list of int"
    },
    {
      "arg_name": "stdscr",
      "function": "rain_once",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "rain_once(stdscr, x, begin, end, last_char=None) | animate_rain(stdscr, x, begin, end, max_length, speed, last_char)",
      "error_handling": "",
      "documentation": "stdscr: curses's screen object"
    },
    {
      "arg_name": "x",
      "function": "rain_once",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "rain_once(stdscr, x, begin, end, last_char=None) | animate_rain(stdscr, x, begin, end, max_length, speed, last_char)",
      "error_handling": "",
      "documentation": "x: the column of this rain on the screen"
    },
    {
      "arg_name": "begin",
      "function": "rain_once",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "rain_once(stdscr, x, begin, end, last_char=None) | animate_rain(stdscr, x, begin, end, max_length, speed, last_char)",
      "error_handling": "",
      "documentation": "begin: the line to begin"
    },
    {
      "arg_name": "end",
      "function": "rain_once",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "rain_once(stdscr, x, begin, end, last_char=None) | animate_rain(stdscr, x, begin, end, max_length, speed, last_char)",
      "error_handling": "",
      "documentation": "end\n:param stdscr"
    },
    {
      "arg_name": "last_char",
      "function": "rain_once",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "last_char=None",
      "transformation_code": "last_char=None): | rain_once(stdscr, x, begin, end, last_char=None) | animate_rain(stdscr, x, begin, end, max_length, speed, last_char)",
      "error_handling": "",
      "documentation": "last_char: the last character to show"
    },
    {
      "arg_name": "stdscr",
      "function": "animate_rain",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "",
      "transformation_code": "animate_rain(stdscr, x, begin, end, max_length, speed=FALLING_SPEED, last_char=None)",
      "error_handling": "",
      "documentation": "stdscr: curses's screen object"
    },
    {
      "arg_name": "x",
      "function": "animate_rain",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "animate_rain(stdscr, x, begin, end, max_length, speed=FALLING_SPEED, last_char=None) | addstr(head, x, random_char()",
      "error_handling": "",
      "documentation": "x: the column of this rain on the screen"
    },
    {
      "arg_name": "begin",
      "function": "animate_rain",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "middle < begin | middle = begin | tail < begin",
      "transformation_code": "animate_rain(stdscr, x, begin, end, max_length, speed=FALLING_SPEED, last_char=None) | range(max(begin, tail - speed)",
      "error_handling": "",
      "documentation": "begin: the line to begin"
    },
    {
      "arg_name": "end",
      "function": "animate_rain",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "head < end | tail < end",
      "transformation_code": "animate_rain(stdscr, x, begin, end, max_length, speed=FALLING_SPEED, last_char=None) | range(tail, min(head, end)",
      "error_handling": "",
      "documentation": "end: the line to end"
    },
    {
      "arg_name": "max_length",
      "function": "animate_rain",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "animate_rain(stdscr, x, begin, end, max_length, speed=FALLING_SPEED, last_char=None)",
      "error_handling": "",
      "documentation": "max_length: the length of this rain"
    },
    {
      "arg_name": "speed",
      "function": "animate_rain",
      "default_value": "<FALLING_SPEED>",
      "usage_pattern": "simple_usage",
      "validation_code": "speed=FALLING_SPEED",
      "transformation_code": "speed=FALLING_SPEED, last_char=None): | animate_rain(stdscr, x, begin, end, max_length, speed=FALLING_SPEED, last_char=None) | range(max(begin, tail - speed)",
      "error_handling": "",
      "documentation": "speed: how fast a rain should fall (the number of lines it jumps each animation frame)"
    },
    {
      "arg_name": "last_char",
      "function": "animate_rain",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "last_char=None",
      "transformation_code": "last_char=None): | animate_rain(stdscr, x, begin, end, max_length, speed=FALLING_SPEED, last_char=None) | addstr(end - 1, x, last_char, curses.color_pair(0)",
      "error_handling": "",
      "documentation": "last_char: the last character to show"
    },
    {
      "arg_name": "rains",
      "function": "add_rain",
      "default_value": null,
      "usage_pattern": "method_call,length_check",
      "validation_code": "",
      "transformation_code": "add_rain(rains, stdscr, pool) | len(rains)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "stdscr",
      "function": "add_rain",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "add_rain(rains, stdscr, pool) | append(rain_forever(stdscr, pool)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "pool",
      "function": "add_rain",
      "default_value": null,
      "usage_pattern": "length_check",
      "validation_code": "",
      "transformation_code": "add_rain(rains, stdscr, pool) | len(pool)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "string",
      "function": "is_valid_int",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "is_valid_int(string) | int(string)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "line",
      "function": "is_valid_line",
      "default_value": null,
      "usage_pattern": "indexing,method_call",
      "validation_code": "original_line = line | line = line.strip | line = line",
      "transformation_code": "line = line | line = line.strip() | is_valid_line(line) | all(map(is_valid_int, line[:7])",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "line",
      "function": "get_lines",
      "default_value": null,
      "usage_pattern": "indexing,method_call",
      "validation_code": "line = line.strip | line = line.split | line = line",
      "transformation_code": "line = line.strip() | line = line.split(',') | get_lines(line) | join(line)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "line",
      "function": "get_timestamp",
      "default_value": null,
      "usage_pattern": "indexing,method_call",
      "validation_code": "line = line.split | timestamp = line",
      "transformation_code": "line = line.split(',') | get_timestamp(line)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "line",
      "function": "strip_braces",
      "default_value": null,
      "usage_pattern": "boolean_condition,indexing,method_call",
      "validation_code": "line = line | line = line | line = line",
      "transformation_code": "line = line[2:] | line = line[::-1] | strip_braces(line)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "request_replace",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "request_replace(path) | input_yes_no(fansi('Replace ' + get_file_name(path)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "job_q",
      "function": "pinger",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "ip = job_q",
      "transformation_code": "pinger(job_q, results_q)",
      "error_handling": "",
      "documentation": "job_q:"
    },
    {
      "arg_name": "results_q",
      "function": "pinger",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "",
      "transformation_code": "pinger(job_q, results_q)",
      "error_handling": "try_except",
      "documentation": "results_q:"
    },
    {
      "arg_name": "pool_size",
      "function": "map_network",
      "default_value": 255,
      "usage_pattern": "simple_usage",
      "validation_code": "pool_size=255",
      "transformation_code": "pool_size=255): | map_network(pool_size=255) | range(pool_size)",
      "error_handling": "",
      "documentation": "pool_size: amount of parallel ping processes"
    },
    {
      "arg_name": "module_name",
      "function": "autoimportable_module",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "autoimportable_module(module_name) | getattr(pip_import(module_name)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "file",
      "function": "old_and_new_text",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "old_and_new_text(file) | text_file_to_string(file)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "file",
      "function": "file_will_change",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "file_will_change(file) | old_and_new_text(file)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "module_name",
      "function": "try_import",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "module_info = module_name",
      "transformation_code": "try_import(module_name) | import_module(module_name)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "file",
      "function": "push",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert path_exists(file)",
      "transformation_code": "push(self, file) | path_exists(file)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "root",
      "function": "files_walk",
      "default_value": ".",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "root='.'): | files_walk(root='.') | breadth_first_path_iterator(root)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "file",
      "function": "load_text",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "load_text(file) | text_file_to_string(file, use_cache=False)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "file",
      "function": "load_annotated_lines",
      "default_value": null,
      "usage_pattern": "addition",
      "validation_code": "",
      "transformation_code": "load_annotated_lines(file) | load_text(file)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "should_read",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "should_read(path) | and (not ends_with_any(path, extensions)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "do_path",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "",
      "transformation_code": "do_path(x) | file_exists(x)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "key",
      "function": "add",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "add(self, key)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "item",
      "function": "discard",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "discard(self, item) | discard(item)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "key",
      "function": "__getattr__",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert key in self._data, key",
      "transformation_code": "__getattr__(self, key: str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "name",
      "function": "__delattr__",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "__delattr__(self, name)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "name",
      "function": "__setattr__",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "__setattr__(self, name, value) | __getattribute__(self, name)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "value",
      "function": "__setattr__",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "__setattr__(self, name, value)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "value",
      "function": "should_traverse",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "should_traverse(value) | any((issubclass(type(value)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "directory",
      "function": "walk",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "walk(self, directory, prefix='') | is_a_folder(directory)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "prefix",
      "function": "walk",
      "default_value": "",
      "usage_pattern": "addition",
      "validation_code": "",
      "transformation_code": "prefix=''): | walk(self, directory, prefix='') | print_line(prefix + '\u2514\u2500\u2500 ' + entry)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "func",
      "function": "patcher",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "patcher(func) | setattr(target, name or func.__name__, func)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "code",
      "function": "extract_imports",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "code = ''' | extract_imports(code: str) | extract_imports(code)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "code",
      "function": "remove_first_import_line",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "assert is_valid_python_syntax(code) | lines = code",
      "transformation_code": "remove_first_import_line(code) | is_valid_python_syntax(code)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "module",
      "function": "get_code",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "get_code(module, name) | getattr(__import__(module)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "name",
      "function": "get_code",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "get_code(module, name)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "code",
      "function": "unarpy",
      "default_value": null,
      "usage_pattern": "addition",
      "validation_code": "code = _removestar | code = code | code = remove_first_import_line",
      "transformation_code": "code = 'from %s import *\\n' % module + code | code = _removestar(code) | unarpy(code) | _removestar(code)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "pids",
      "function": "filter_pids_exist",
      "default_value": null,
      "usage_pattern": "iteration",
      "validation_code": "",
      "transformation_code": "filter_pids_exist(pids)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "used_vram",
      "function": "none_to_zero",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check,type_check",
      "validation_code": "assert isinstance(used_vram, int) | isinstance(used_vram, int)",
      "transformation_code": "none_to_zero(used_vram) | isinstance(used_vram, int)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "package",
      "function": "fix_package",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "package = package.strip",
      "transformation_code": "package = package.strip().split()[-1] | fix_package(package) | len(package.strip()",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "key",
      "function": "delete",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "delete(self, key)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "s",
      "function": "is_builtin",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "",
      "transformation_code": "is_builtin(s) | hasattr(builtins, s)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "lines",
      "function": "combine_range",
      "default_value": null,
      "usage_pattern": "indexing",
      "validation_code": "",
      "transformation_code": "combine_range(lines, start, end) | return (lines[srow - 1][scol:ecol], end)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "start",
      "function": "combine_range",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "combine_range(lines, start, end)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "end",
      "function": "combine_range",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "combine_range(lines, start, end) | return (lines[srow - 1][scol:ecol], end)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "source",
      "function": "analyze_python",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "lines = source",
      "transformation_code": "analyze_python(source)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "classified_text",
      "function": "ansi_highlight",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "ansi_highlight(classified_text, colors=default_ansi) | chain([[None, '\\n', 0]], wrapped_line_tokens(classified_text, max_width=max_width)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "colors",
      "function": "ansi_highlight",
      "default_value": "<default_ansi>",
      "usage_pattern": "method_call",
      "validation_code": "colors=default_ansi",
      "transformation_code": "colors=default_ansi): | ansi_highlight(classified_text, colors=default_ansi)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "action",
      "function": "progress_func",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "progress_func(action)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "savefile",
      "function": "save",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "save(self, savefile) | open(savefile, 'wb')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "fp",
      "function": "write_to_fp",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "",
      "transformation_code": "write_to_fp(self, fp)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "text",
      "function": "_tokenize",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_tokenize(self, text, max_size) | split(pattern, text)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "max_size",
      "function": "_tokenize",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_tokenize(self, text, max_size) | _minimize(p, ' ', max_size)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "thestring",
      "function": "_minimize",
      "default_value": null,
      "usage_pattern": "indexing,method_call,length_check",
      "validation_code": "idx = thestring",
      "transformation_code": "_minimize(self, thestring, delim, max_size) | len(thestring)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "delim",
      "function": "_minimize",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_minimize(self, thestring, delim, max_size) | rfind(delim, 0, max_size)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "max_size",
      "function": "_minimize",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_minimize(self, thestring, delim, max_size) | rfind(delim, 0, max_size)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "item",
      "function": "convert_grid_item",
      "default_value": null,
      "usage_pattern": "none_check",
      "validation_code": "item = _image_to_html",
      "transformation_code": "item = _image_to_html(item) | item = '' | convert_grid_item(item) | is_image(item)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "frame",
      "function": "trace_func",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "",
      "transformation_code": "trace_func(frame, event, arg) | update(frame.f_locals)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "event",
      "function": "trace_func",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "trace_func(frame, event, arg)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "arg",
      "function": "trace_func",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "trace_func(frame, event, arg)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "d",
      "function": "sorty",
      "default_value": null,
      "usage_pattern": "iteration",
      "validation_code": "",
      "transformation_code": "sorty(d) | sorted([x for x in d if x.startswith('__')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "title",
      "function": "append_stat",
      "default_value": null,
      "usage_pattern": "addition",
      "validation_code": "",
      "transformation_code": "append_stat(title, stat='') | append(col(title + ':')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "stat",
      "function": "append_stat",
      "default_value": "",
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "stat=''): | append_stat(title, stat='') | str(stat)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "to_str",
      "default_value": null,
      "usage_pattern": "boolean_condition,none_check",
      "validation_code": "out = x",
      "transformation_code": "x = '' | to_str(x) | str(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "other",
      "function": "__lt__",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "__lt__(self, other) | mycmp(self.obj, other.obj)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "other",
      "function": "__gt__",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "__gt__(self, other) | mycmp(self.obj, other.obj)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "other",
      "function": "__le__",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "__le__(self, other) | mycmp(self.obj, other.obj)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "other",
      "function": "__ge__",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "__ge__(self, other) | mycmp(self.obj, other.obj)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "other",
      "function": "__ne__",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "__ne__(self, other) | mycmp(self.obj, other.obj)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "loader",
      "function": "map_constructor",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "key = loader | value = loader",
      "transformation_code": "map_constructor(loader, node)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "node",
      "function": "map_constructor",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "map_constructor(loader, node) | for (key_node, value_node)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "interface",
      "function": "getmac",
      "default_value": null,
      "usage_pattern": "addition",
      "validation_code": "",
      "transformation_code": "getmac(interface) | open('/sys/class/net/' + interface + '/address')",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "window",
      "function": "addstr_wordwrap",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "",
      "transformation_code": "addstr_wordwrap(window, s, mode=0)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "s",
      "function": "addstr_wordwrap",
      "default_value": null,
      "usage_pattern": "length_check",
      "validation_code": "",
      "transformation_code": "addstr_wordwrap(window, s, mode=0) | given\n            (e.g. curses.A_BOLD)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "mode",
      "function": "addstr_wordwrap",
      "default_value": 0,
      "usage_pattern": "simple_usage",
      "validation_code": "mode=0",
      "transformation_code": "mode=0): | addstr_wordwrap(window, s, mode=0) | addstr(s, mode)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "s",
      "function": "words_and_spaces",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "",
      "transformation_code": "words_and_spaces(s) | words_and_spaces('spam eggs ham')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "fd",
      "function": "ioctl_GWINSZ",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "ioctl_GWINSZ(fd) | unpack('hh', fcntl.ioctl(fd, termios.TIOCGWINSZ, '1234')",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "frame",
      "function": "trace_lines",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "filename = frame | lineno = frame",
      "transformation_code": "trace_lines(frame, event, arg)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "event",
      "function": "trace_lines",
      "default_value": null,
      "usage_pattern": "equality_check,boolean_condition",
      "validation_code": "",
      "transformation_code": "event == 'call' and filename.startswith('<rp-input-'): | event == 'return' and filename.startswith('<rp-input-'): | trace_lines(frame, event, arg)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "arg",
      "function": "trace_lines",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "trace_lines(frame, event, arg)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "file",
      "function": "is_hidden_file",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "is_hidden_file(file) | get_file_name(file)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "absolute",
      "function": "register",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "register(self, absolute) | isdir(absolute)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "change",
      "function": "level_label",
      "default_value": 0,
      "usage_pattern": "simple_usage",
      "validation_code": "change=0",
      "transformation_code": "change=0): | level_label(change=0) | str(rp.r_iterm_comm.pseudo_terminal_level + change)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "p",
      "default_value": null,
      "usage_pattern": "equality_check,boolean_condition,method_call",
      "validation_code": "x == y",
      "transformation_code": "x == y: | p(x, r=True) | list(l(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "r",
      "function": "p",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "r=True",
      "transformation_code": "r=True): | p(x, r=True) | and ('(' not in y or ')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "input_str",
      "function": "split_numbers_and_letters",
      "default_value": null,
      "usage_pattern": "indexing",
      "validation_code": "letter_part = input_str",
      "transformation_code": "split_numbers_and_letters(input_str: str)",
      "error_handling": "",
      "documentation": "input_str (str)"
    },
    {
      "arg_name": "img",
      "function": "heightify",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "img = as_numpy_image | dtype=img",
      "transformation_code": "img = as_numpy_image(img, copy=False) | heightify(img) | as_numpy_image(img, copy=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "cell_num",
      "function": "_announce_cell",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "_announce_cell(cell_num) | display_code_cell(cells[cell_num], title=' ' + get_file_name(notebook_path, include_file_extension=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "i",
      "function": "get_color",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "get_color(i)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "module",
      "function": "get_full_module_name",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "isinstance(module, cst.Attribute) | isinstance(module, cst.Name) | module = module.value",
      "transformation_code": "module = module.value | get_full_module_name(self, module) | isinstance(module, cst.Attribute)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "original_node",
      "function": "leave_ImportFrom",
      "default_value": null,
      "usage_pattern": "boolean_condition,iteration",
      "validation_code": "name=original_node | name=original_node",
      "transformation_code": "leave_ImportFrom(self, original_node, updated_node) | get_full_module_name(original_node.module)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "updated_node",
      "function": "leave_ImportFrom",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "leave_ImportFrom(self, original_node, updated_node)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "original_node",
      "function": "leave_Call",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "leave_Call(self, original_node, updated_node)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "updated_node",
      "function": "leave_Call",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "func_name = updated_node",
      "transformation_code": "leave_Call(self, original_node, updated_node) | isinstance(updated_node.func, cst.Name)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "original_node",
      "function": "leave_Name",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "",
      "transformation_code": "leave_Name(self, original_node, updated_node)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "updated_node",
      "function": "leave_Name",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "leave_Name(self, original_node, updated_node)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "name",
      "function": "_is_likely_module_function",
      "default_value": null,
      "usage_pattern": "length_check",
      "validation_code": "",
      "transformation_code": "_is_likely_module_function(self, name) | len(name)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "tokens",
      "function": "wrapped_line_tokens",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "tokens = split_including_delimiters | tokens = subtokens",
      "transformation_code": "tokens = split_including_delimiters(text, '\\n') | tokens = subtokens[::-1] | wrapped_line_tokens(tokens, max_width)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "max_width",
      "function": "wrapped_line_tokens",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert max_width >= line_length | max_width >= line_length | index = max_width",
      "transformation_code": "wrapped_line_tokens(tokens, max_width)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "strip",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "",
      "transformation_code": "strip(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "attr",
      "function": "color",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "attr = eval",
      "transformation_code": "attr = eval('_rinsp_temp_object.' + attr) | color(attr) | eval('_rinsp_temp_object.' + attr)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "is_module",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "isinstance(x, types.ModuleType)",
      "transformation_code": "is_module(x) | isinstance(x, types.ModuleType)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "item",
      "function": "format_signature",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "assert callable(item) | sig = item",
      "transformation_code": "format_signature(item) | callable(item)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "string",
      "function": "indentify_all_but_first_line",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "indentify_all_but_first_line(string, indent) | line_split(string)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "indent",
      "function": "indentify_all_but_first_line",
      "default_value": null,
      "usage_pattern": "addition",
      "validation_code": "",
      "transformation_code": "indentify_all_but_first_line(string, indent)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "stdscr",
      "function": "print_fansi_colors_in_curses",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "print_fansi_colors_in_curses(stdscr, s: str) | addstr_wordwrap(stdscr, s[0], text_color)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "s",
      "function": "print_fansi_colors_in_curses",
      "default_value": null,
      "usage_pattern": "boolean_condition,indexing,method_call",
      "validation_code": "s = s | i = s | ss = s",
      "transformation_code": "s = s[1:] | s = s[:i].split(' | print_fansi_colors_in_curses(stdscr, s: str) | addstr_wordwrap(stdscr, s[0], text_color)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "color1",
      "function": "blend_rgb",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "blend_rgb(color1, color2, alpha)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "color2",
      "function": "blend_rgb",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "blend_rgb(color1, color2, alpha)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "alpha",
      "function": "blend_rgb",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "blend_rgb(color1, color2, alpha) | return ((1 - alpha)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "d",
      "function": "dictify",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "isinstance(d, dict)",
      "transformation_code": "dictify(d) | isinstance(d, dict)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "d",
      "function": "dupdate",
      "default_value": null,
      "usage_pattern": "indexing",
      "validation_code": "",
      "transformation_code": "dupdate(d, key, default=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "key",
      "function": "dupdate",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "",
      "transformation_code": "dupdate(d, key, default=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "default",
      "function": "dupdate",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "default=None",
      "transformation_code": "default=None): | dupdate(d, key, default=None)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "a",
      "function": "equal",
      "default_value": null,
      "usage_pattern": "equality_check,boolean_condition,type_check",
      "validation_code": "isinstance(a, np.ndarray) | isinstance(a, np.ndarray) | isinstance(a, np.ndarray)",
      "transformation_code": "a == b) | a == b: | equal(a, b) | handy_hash(a)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "b",
      "function": "equal",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "isinstance(b, np.ndarray) | isinstance(b, np.ndarray) | isinstance(b, np.ndarray)",
      "transformation_code": "equal(a, b) | handy_hash(b)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "d",
      "function": "deep_dark_dict_copy",
      "default_value": null,
      "usage_pattern": "indexing,iteration",
      "validation_code": "q = d",
      "transformation_code": "deep_dark_dict_copy(d) | isinstance(d[k], types.ModuleType)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "snapshot",
      "function": "set_snapshot",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "set_snapshot(snapshot) | zip(snapshot, dicts)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "val",
      "function": "set_ans",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "ric.ans = val",
      "transformation_code": "set_ans(val, save_history=True, snapshot=True, force_green=False) | append(val)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "save_history",
      "function": "set_ans",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "save_history=True",
      "transformation_code": "save_history=True, snapshot=True, force_green=False): | set_ans(val, save_history=True, snapshot=True, force_green=False) | fansi_print('ans = ' + val_str, ('green' if save_history or force_green else 'yellow')",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "snapshot",
      "function": "set_ans",
      "default_value": true,
      "usage_pattern": "boolean_condition",
      "validation_code": "snapshot=True",
      "transformation_code": "snapshot=True, force_green=False): | set_ans(val, save_history=True, snapshot=True, force_green=False)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "force_green",
      "function": "set_ans",
      "default_value": false,
      "usage_pattern": "simple_usage",
      "validation_code": "force_green=False",
      "transformation_code": "force_green=False): | set_ans(val, save_history=True, snapshot=True, force_green=False) | fansi_print('ans = ' + val_str, ('green' if save_history or force_green else 'yellow')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "eval_for_rinsp",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "eval_for_rinsp(x, *args) | eval(x, *args)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "return_as_string_instead_of_printing",
      "function": "print_history",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "return_as_string_instead_of_printing=False",
      "transformation_code": "return_as_string_instead_of_printing=False): | print_history(return_as_string_instead_of_printing=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "E",
      "function": "show_error",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "error = E",
      "transformation_code": "show_error(E) | do_if_new(E)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "value",
      "function": "pterm_pretty_print",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "isinstance(value, str) | isinstance(value, str) | isinstance(value, str)",
      "transformation_code": "value = load_image(value) | pterm_pretty_print(value, *args, **kwargs) | _display_pterm_image(value)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "add_to_successful_command_history",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "add_to_successful_command_history(x) | _write_to_pterm_hist(x)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "pair",
      "function": "join_command",
      "default_value": null,
      "usage_pattern": "indexing",
      "validation_code": "",
      "transformation_code": "join_command(pair) | join(pair[1:])",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "key",
      "function": "__getattribute__",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "__getattribute__(self, key)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "path",
      "function": "filter_by_extension",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "",
      "transformation_code": "filter_by_extension(path) | any((path.lower()",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "ram",
      "function": "ram_to_string",
      "default_value": null,
      "usage_pattern": "boolean_condition",
      "validation_code": "ram > 0",
      "transformation_code": "ram_to_string(ram: int) | human_readable_file_size(ram)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "line_number",
      "function": "line_number_prefix_generator",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "line_number_prefix_generator(line_number)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "code",
      "function": "autoformat_python_via_black",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "autoformat_python_via_black(code: str) | format_str(code, mode=black.Mode()",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "value",
      "function": "do",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "do(self, value) | append(value)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "value",
      "function": "do_if_new",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "do_if_new(self, value) | do(value)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "string",
      "function": "fansify",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "fansify(string, *args) | line_split(string)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "value",
      "function": "_display_pterm_image",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "isinstance(value, str) | value = load_image",
      "transformation_code": "value = load_image(value) | _display_pterm_image(value) | isinstance(value, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "cmd",
      "function": "evaluable_part",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "cmd = cmd.rstrip",
      "transformation_code": "cmd = cmd.rstrip().split('\\n')[-1] | evaluable_part(cmd: str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "try_eval",
      "default_value": null,
      "usage_pattern": "equality_check,boolean_condition,method_call",
      "validation_code": "x == rp.r_iterm_comm.try_eval_mem_text | rp.r_iterm_comm.try_eval_mem_text = x | x = x.split",
      "transformation_code": "x == rp.r_iterm_comm.try_eval_mem_text: | x = x.split('RETURN')[1].lstrip() | try_eval(x, true=False) | exec(x.split('RETURN')",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "true",
      "function": "try_eval",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "true=False",
      "transformation_code": "true=False): | try_eval(x, true=False) | isinstance(true_value, str)",
      "error_handling": "try_except",
      "documentation": ""
    },
    {
      "arg_name": "strings_input",
      "function": "columnify_strings",
      "default_value": null,
      "usage_pattern": "method_call,type_check",
      "validation_code": "assert isinstance(strings_input, str) | isinstance(strings_input, str) | strings_input = strings_input.strip",
      "transformation_code": "strings_input = strings_input.strip() | strings_input = strings_input.replace('\\n\\n\\n', '\\n\\n') | columnify_strings(strings_input) | isinstance(strings_input, str)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "string",
      "function": "string_to_modifier",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "",
      "transformation_code": "string_to_modifier(string)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "string",
      "function": "repr_string_to_modifier",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "",
      "transformation_code": "repr_string_to_modifier(string)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "text",
      "function": "cyan",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "cyan(text) | fansi(text, 'cyan')",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "code",
      "function": "print_code",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "s = code",
      "transformation_code": "print_code(code, highlight=False, line_numbers=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "highlight",
      "function": "print_code",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "highlight=False",
      "transformation_code": "highlight=False, line_numbers=False): | print_code(code, highlight=False, line_numbers=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "line_numbers",
      "function": "print_code",
      "default_value": false,
      "usage_pattern": "boolean_condition",
      "validation_code": "line_numbers=False | line_numbers=False",
      "transformation_code": "line_numbers=False): | line_numbers=False) | print_code(code, highlight=False, line_numbers=False)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "x",
      "function": "file_size_key",
      "default_value": null,
      "usage_pattern": "simple_usage",
      "validation_code": "",
      "transformation_code": "file_size_key(x) | is_a_file(x)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "string",
      "function": "number_of_leading_spaces",
      "default_value": null,
      "usage_pattern": "iteration",
      "validation_code": "",
      "transformation_code": "number_of_leading_spaces(string)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "entry",
      "function": "breakify",
      "default_value": null,
      "usage_pattern": "method_call",
      "validation_code": "l = entry",
      "transformation_code": "breakify(entry)",
      "error_handling": "",
      "documentation": ""
    },
    {
      "arg_name": "error",
      "function": "get_name_from_name_error",
      "default_value": null,
      "usage_pattern": "type_check",
      "validation_code": "assert isinstance(error, NameError) | isinstance(error, NameError) | ans = error",
      "transformation_code": "get_name_from_name_error(error: NameError) | isinstance(error, NameError)",
      "error_handling": "",
      "documentation": ""
    }
  ],
  "common_patterns": {
    "simple_usage": 2047,
    "boolean_condition": 764,
    "type_check": 298,
    "method_call": 279,
    "none_check": 218,
    "indexing": 176,
    "length_check": 157,
    "equality_check": 132,
    "addition": 121,
    "iteration": 115
  },
  "validation_patterns": {
    "type_check": 298,
    "range_check": 2233,
    "assertion": 568
  },
  "error_handling_patterns": {
    "try_except": 267,
    "conditional_raise": 3,
    "return_none": 4
  }
}
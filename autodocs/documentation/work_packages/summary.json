{
  "total_packages": 1128,
  "total_functions": 2042,
  "estimated_total_hours": 1531.5,
  "packages_by_priority": [
    {
      "package_id": 1,
      "functions": [
        "pip_import",
        "print",
        "fansi_print",
        "add",
        "delete_file",
        "as_easydict",
        "rinsp",
        "_get_pynput_mouse_controller"
      ],
      "total_functions": 8,
      "estimated_hours": 6.0,
      "priority_score": 3745,
      "context": {
        "pip_import": {
          "function_name": "pip_import",
          "calls": [
            "module_exists",
            "add",
            "input_yes_no",
            "print",
            "fansi_print",
            "pip_install",
            "pip_import",
            "offer_to_blacklist",
            "connected_to_internet",
            "running_in_google_colab"
          ],
          "called_by": [
            "list_dict_transpose",
            "_get_depth_pro_model",
            "get_process_using_port",
            "_cv_initialize_cameras",
            "_datamuse_words_request",
            "block",
            "_view_markdown_in_terminal",
            "get_process_username",
            "_init_pillow_heif",
            "send_facebook_message",
            "load_yaml_file",
            "cv_inpaint_image",
            "clean_imports_via_unimport",
            "unwarped_perspective_image",
            "get_process_start_date",
            "get_git_remote_url",
            "_disable_insecure_request_warning",
            "_autoformat_python_code_via_black",
            "load_image_from_url",
            "print_process_info",
            "_load_images_via_pdf2image",
            "get_mac_address_vendor",
            "_copy_image_to_clipboard_via_pyjpgclipboard",
            "play_sound_from_samples",
            "strip_python_docstrings",
            "launch_xonsh",
            "cv_draw_contours",
            "tmuxp_launch_session_from_yaml",
            "decode_bytes_to_image",
            "_web_copy",
            "dunk_string_diff",
            "_cv_helper",
            "_binary_floyd_steinburg_dithering",
            "_launch_ranger",
            "save_openexr_image",
            "view_string_diff",
            "get_monitor_resolution",
            "delete_file",
            "_load_text_from_file_or_url",
            "_get_jupyter_output_widget",
            "reduced_row_echelon_form",
            "_get_inflect_engine",
            "as_pil_image",
            "save_animated_png",
            "get_my_public_ip_address",
            "laplacian_blend",
            "apply_colormap_to_image",
            "_convert_content_grid",
            "download_youtube_video",
            "get_all_facebook_messages",
            "print_verbose_stack_trace",
            "display_pandas_correlation_heatmap",
            "get_cutscene_frame_numbers",
            "cv_remap_image",
            "get_bilinear_weights",
            "_display_columns",
            "cv_draw_rectangle",
            "_cv_save_video_mp4",
            "split_python_tokens",
            "line_graph_via_plotille",
            "mouse_middle_press",
            "_pterm_exeval",
            "_get_all_notebook_sessions_via_ipybname",
            "temporary_numpy_random_seed",
            "cv_contour_match",
            "_load_image_from_file_via_imageio",
            "_load_video_stream",
            "s3_list_objects",
            "_encode_image_to_bytes",
            "_get_javascript_runtime",
            "is_valid_openexr_file",
            "get_image_file_dimensions",
            "_display_downloadable_image_in_notebook_via_ipython",
            "edit_image_in_terminal",
            "whiten_points_covariance",
            "_view_image_via_textual_imageview",
            "words_to_number",
            "skia_stamp_image",
            "torch_scatter_add_image",
            "torch_resize_image",
            "download_url",
            "delete_folder",
            "color_name_to_float_color",
            "skia_resize_image",
            "_get_kernel_to_pid_mapping",
            "cv_equalize_histogram",
            "_string_pager_via_click",
            "_get_apriltag_detector",
            "cv_simplify_contour",
            "get_video_file_framerate",
            "autoformat_html_via_bs4",
            "clear_jupyter_notebook_outputs",
            "load_parquet",
            "add_ipython_kernel",
            "autoformat_python_via_black",
            "__getattribute__",
            "cv_distance_to_contour",
            "fansi_pygments",
            "_ipython_exeval_maker",
            "get_notebook_path",
            "_rich_print",
            "_display_image_slideshow_animated",
            "_get_skia_sampling",
            "run_depth_pro",
            "_get_hash",
            "_static_calldefs",
            "torch_remap_image",
            "get_pdf_num_pages",
            "_make_sure_nltk_has_wordnet_installed",
            "play_sound_file_via_pygame",
            "_sort_imports_via_isort",
            "load_tsv",
            "print_rich_stack_trace",
            "_fzf_multi_grep",
            "cv_line_graph",
            "display_qr_code_in_terminal",
            "get_used_ram",
            "load_image_from_screenshot_via_mss",
            "save_image_avif",
            "_load_pdf_as_text_via_pdfminer",
            "_get_punkt_languages",
            "print_notebook_gpu_summary",
            "_get_openexr_image_dimensions",
            "bar_graph",
            "cv_find_contours",
            "get_youtube_video_transcript",
            "launch_visidata",
            "can_convert_object_to_bytes",
            "select_torch_device",
            "get_process_memory",
            "in_tokens",
            "curl",
            "get_cloud_provider",
            "autoimportable_module",
            "load_animated_gif",
            "remove_duplicate_frames",
            "_ensure_tapnet_installed",
            "cv_distance_transform",
            "display_markdown",
            "parse_dyaml_junctions",
            "save_image",
            "prime_factors",
            "visualize_pytorch_model",
            "is_a_git_repo",
            "display_image",
            "load_image_from_clipboard",
            "_rich_inspect",
            "_single_line_cv_text_to_image",
            "_initialize_bokeh",
            "save_safetensors",
            "display_image_in_terminal",
            "_display_video_via_mediapy",
            "mouse_right_press",
            "display_polygon",
            "sobel_edges",
            "norm_pdf",
            "input_select_serial_device_id",
            "xy_torch_matrices",
            "as_easydict",
            "mouse_left_release",
            "_load_image_from_file_via_opencv",
            "load_gist",
            "cv_box_blur",
            "load_safetensors",
            "display_clear",
            "get_apriltag_image",
            "get_number_of_monitors",
            "_view_json_via_jtree",
            "ip_to_mac_address",
            "histogram_in_terminal",
            "save_video_avi",
            "_torch_device_to_index",
            "cv_gauss_blur",
            "as_numpy_video",
            "record_mono_audio",
            "line_graph",
            "tmux_kill_session",
            "check_pip_requirements",
            "save_image_to_imgur",
            "_as_skia_image",
            "_install_ollama",
            "cv_contour_length",
            "curl_bytes",
            "display_image_in_terminal_color",
            "shorten_github_url",
            "gather_vars",
            "display_cv_color_histogram",
            "_iterfzf",
            "_pip_import_pyflow",
            "string_to_date",
            "_moviepy_VideoFileClip",
            "_filter_dict_via_fzf",
            "text_to_speech_via_google",
            "_load_image_from_screenshot_via_pyscreenshot",
            "cv_resize_image",
            "load_wav_file",
            "rinsp",
            "_get_parts_of_speech_via_nltk",
            "norm_cdf",
            "scatter_plot",
            "print_gpu_summary",
            "_skimage_skeletonize",
            "get_process_exists",
            "display_update",
            "cv_imshow",
            "auto_canny",
            "load_image_from_webcam",
            "bundle_vars",
            "cv_draw_circle",
            "_display_image_in_notebook_via_ipyplot",
            "get_free_ram",
            "iana_to_tzinfo",
            "translate",
            "get_git_commit_message",
            "_resize_image_via_skimage",
            "_get_facebook_client",
            "send_text_message",
            "get_process_cwd",
            "fansi_pygments_demo",
            "cv_contour_area",
            "_slow_pil_text_to_image",
            "MIDI_output",
            "_init_nvml",
            "image_to_text",
            "get_current_git_hash",
            "big_ascii_text",
            "run_removestar",
            "display_image_in_terminal_imgcat",
            "PynputCasette",
            "cv_closest_contour_point",
            "python_2_to_3",
            "load_openexr_image",
            "_copy_image_to_clipboard_via_copykitten",
            "cv_optical_flow",
            "get_english_synonyms_via_nltk",
            "get_principle_components",
            "format_date",
            "zalgo_text",
            "bytes_to_object",
            "cv_draw_arrow",
            "unwarped_perspective_contour",
            "view_table",
            "get_total_ram",
            "format_signature",
            "get_video_file_shape",
            "get_all_pids_and_their_commands",
            "mouse_right_release",
            "_get_byte_to_binary_grayscale_image_floyd_steinburg_dithering_function",
            "get_normal_map",
            "_string_pager_via_pypager",
            "get_my_mac_address",
            "_cv_skeletonize",
            "optical_flow_to_arrow_grid",
            "_qualify_imports",
            "parse_yaml",
            "type_string_with_keyboard",
            "mouse_left_click",
            "get_openexr_channels",
            "wordcloud_image",
            "_dill_dumps",
            "mouse_right_click",
            "as_numpy_videos",
            "mouse_middle_click",
            "_load_image_from_file_via_PIL",
            "split_sentences",
            "cv_apply_affine_to_image",
            "display_website_in_terminal",
            "pseudo_terminal",
            "delaunay_interpolation_weights",
            "minify_python_code",
            "cv_erode",
            "play_sound_file",
            "save_image_jxl",
            "_nltk_wordnet_is_installed",
            "_run_openai_llm",
            "skia_text_to_image",
            "cv_floodfill_mask",
            "_extract_archive_via_pyunpack",
            "longest_common_substring",
            "pip_import",
            "cv_dilate",
            "_get_youtube_video_data_via_embeddify",
            "_set_ryan_vimrc",
            "_get_pynput_mouse_controller",
            "cv_closest_contour",
            "set_process_title",
            "mouse_middle_release",
            "get_font_supported_chars",
            "clf",
            "_ensure_punkt_downloaded",
            "_translate_offline",
            "get_process_title",
            "web_paste",
            "get_plt",
            "add_trailing_commas",
            "mouse_left_press",
            "load_mp3_file",
            "autoformat_python_via_black_macchiato",
            "set_os_volume",
            "tmux_get_all_session_names",
            "_ensure_git_installed",
            "inverse_norm_cdf",
            "_rotate_rgb_image",
            "get_git_info",
            "optical_flow_to_image",
            "get_git_commit_date",
            "MIDI_input",
            "_load_files",
            "save_wav",
            "run_cotracker"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "input_yes_no",
            "record_mono_audio",
            "list_dict_transpose",
            "line_graph",
            "tmux_kill_session",
            "check_pip_requirements",
            "_get_depth_pro_model",
            "save_image_to_imgur",
            "_as_skia_image",
            "_install_ollama",
            "get_process_using_port",
            "cv_contour_length",
            "_cv_initialize_cameras",
            "_datamuse_words_request",
            "curl_bytes",
            "block",
            "display_image_in_terminal_color",
            "_view_markdown_in_terminal",
            "get_process_username",
            "shorten_github_url",
            "_init_pillow_heif",
            "send_facebook_message",
            "gather_vars",
            "display_cv_color_histogram",
            "_iterfzf",
            "load_yaml_file",
            "_pip_import_pyflow",
            "string_to_date",
            "_moviepy_VideoFileClip",
            "cv_inpaint_image",
            "clean_imports_via_unimport",
            "unwarped_perspective_image",
            "_filter_dict_via_fzf",
            "get_process_start_date",
            "text_to_speech_via_google",
            "_load_image_from_screenshot_via_pyscreenshot",
            "cv_resize_image",
            "get_git_remote_url",
            "_disable_insecure_request_warning",
            "load_wav_file",
            "_autoformat_python_code_via_black",
            "rinsp",
            "_get_parts_of_speech_via_nltk",
            "load_image_from_url",
            "print_process_info",
            "_load_images_via_pdf2image",
            "get_mac_address_vendor",
            "norm_cdf",
            "scatter_plot",
            "_copy_image_to_clipboard_via_pyjpgclipboard",
            "play_sound_from_samples",
            "print_gpu_summary",
            "strip_python_docstrings",
            "_skimage_skeletonize",
            "get_process_exists",
            "display_update",
            "launch_xonsh",
            "cv_draw_contours",
            "cv_imshow",
            "tmuxp_launch_session_from_yaml",
            "decode_bytes_to_image",
            "_web_copy",
            "dunk_string_diff",
            "auto_canny",
            "_cv_helper",
            "load_image_from_webcam",
            "_binary_floyd_steinburg_dithering",
            "_launch_ranger",
            "bundle_vars",
            "save_openexr_image",
            "view_string_diff",
            "get_monitor_resolution",
            "delete_file",
            "_load_text_from_file_or_url",
            "_get_jupyter_output_widget",
            "cv_draw_circle",
            "reduced_row_echelon_form",
            "_get_inflect_engine",
            "as_pil_image",
            "_display_image_in_notebook_via_ipyplot",
            "save_animated_png",
            "get_free_ram",
            "iana_to_tzinfo",
            "get_my_public_ip_address",
            "translate",
            "laplacian_blend",
            "apply_colormap_to_image",
            "_convert_content_grid",
            "get_git_commit_message",
            "download_youtube_video",
            "get_all_facebook_messages",
            "_resize_image_via_skimage",
            "_get_facebook_client",
            "print_verbose_stack_trace",
            "send_text_message",
            "display_pandas_correlation_heatmap",
            "get_process_cwd",
            "get_cutscene_frame_numbers",
            "fansi_pygments_demo",
            "cv_remap_image",
            "cv_contour_area",
            "_slow_pil_text_to_image",
            "get_bilinear_weights",
            "MIDI_output",
            "_display_columns",
            "cv_draw_rectangle",
            "_cv_save_video_mp4",
            "_init_nvml",
            "split_python_tokens",
            "line_graph_via_plotille",
            "image_to_text",
            "get_current_git_hash",
            "mouse_middle_press",
            "_pterm_exeval",
            "_get_all_notebook_sessions_via_ipybname",
            "big_ascii_text",
            "run_removestar",
            "temporary_numpy_random_seed",
            "display_image_in_terminal_imgcat",
            "cv_contour_match",
            "_load_image_from_file_via_imageio",
            "_load_video_stream",
            "s3_list_objects",
            "_encode_image_to_bytes",
            "PynputCasette",
            "_get_javascript_runtime",
            "is_valid_openexr_file",
            "get_image_file_dimensions",
            "_display_downloadable_image_in_notebook_via_ipython",
            "edit_image_in_terminal",
            "cv_closest_contour_point",
            "pip_install",
            "python_2_to_3",
            "whiten_points_covariance",
            "load_openexr_image",
            "_view_image_via_textual_imageview",
            "words_to_number",
            "_copy_image_to_clipboard_via_copykitten",
            "cv_optical_flow",
            "module_exists",
            "skia_stamp_image",
            "get_english_synonyms_via_nltk",
            "get_principle_components",
            "torch_scatter_add_image",
            "format_date",
            "torch_resize_image",
            "download_url",
            "delete_folder",
            "zalgo_text",
            "bytes_to_object",
            "cv_draw_arrow",
            "unwarped_perspective_contour",
            "color_name_to_float_color",
            "view_table",
            "skia_resize_image",
            "get_total_ram",
            "format_signature",
            "get_video_file_shape",
            "get_all_pids_and_their_commands",
            "mouse_right_release",
            "_get_byte_to_binary_grayscale_image_floyd_steinburg_dithering_function",
            "get_normal_map",
            "_string_pager_via_pypager",
            "get_my_mac_address",
            "_get_kernel_to_pid_mapping",
            "cv_equalize_histogram",
            "_string_pager_via_click",
            "_get_apriltag_detector",
            "_cv_skeletonize",
            "optical_flow_to_arrow_grid",
            "cv_simplify_contour",
            "running_in_google_colab",
            "_qualify_imports",
            "get_video_file_framerate",
            "autoformat_html_via_bs4",
            "clear_jupyter_notebook_outputs",
            "load_parquet",
            "parse_yaml",
            "add_ipython_kernel",
            "autoformat_python_via_black",
            "__getattribute__",
            "cv_distance_to_contour",
            "type_string_with_keyboard",
            "fansi_pygments",
            "mouse_left_click",
            "get_openexr_channels",
            "_ipython_exeval_maker",
            "wordcloud_image",
            "_dill_dumps",
            "mouse_right_click",
            "as_numpy_videos",
            "get_notebook_path",
            "_rich_print",
            "_display_image_slideshow_animated",
            "mouse_middle_click",
            "_get_skia_sampling",
            "connected_to_internet",
            "run_depth_pro",
            "_get_hash",
            "_load_image_from_file_via_PIL",
            "_static_calldefs",
            "split_sentences",
            "torch_remap_image",
            "get_pdf_num_pages",
            "cv_apply_affine_to_image",
            "_make_sure_nltk_has_wordnet_installed",
            "play_sound_file_via_pygame",
            "_sort_imports_via_isort",
            "load_tsv",
            "display_website_in_terminal",
            "print_rich_stack_trace",
            "_fzf_multi_grep",
            "cv_line_graph",
            "pseudo_terminal",
            "display_qr_code_in_terminal",
            "get_used_ram",
            "delaunay_interpolation_weights",
            "load_image_from_screenshot_via_mss",
            "save_image_avif",
            "_load_pdf_as_text_via_pdfminer",
            "_get_punkt_languages",
            "print_notebook_gpu_summary",
            "minify_python_code",
            "cv_erode",
            "_get_openexr_image_dimensions",
            "bar_graph",
            "cv_find_contours",
            "print",
            "get_youtube_video_transcript",
            "play_sound_file",
            "save_image_jxl",
            "_nltk_wordnet_is_installed",
            "launch_visidata",
            "can_convert_object_to_bytes",
            "select_torch_device",
            "_run_openai_llm",
            "skia_text_to_image",
            "cv_floodfill_mask",
            "get_process_memory",
            "in_tokens",
            "curl",
            "get_cloud_provider",
            "_extract_archive_via_pyunpack",
            "autoimportable_module",
            "load_animated_gif",
            "remove_duplicate_frames",
            "longest_common_substring",
            "_ensure_tapnet_installed",
            "cv_distance_transform",
            "pip_import",
            "display_markdown",
            "parse_dyaml_junctions",
            "save_image",
            "prime_factors",
            "visualize_pytorch_model",
            "is_a_git_repo",
            "display_image",
            "fansi_print",
            "cv_dilate",
            "load_image_from_clipboard",
            "_rich_inspect",
            "_get_youtube_video_data_via_embeddify",
            "_set_ryan_vimrc",
            "_get_pynput_mouse_controller",
            "cv_closest_contour",
            "set_process_title",
            "_single_line_cv_text_to_image",
            "mouse_middle_release",
            "get_font_supported_chars",
            "clf",
            "_initialize_bokeh",
            "save_safetensors",
            "_ensure_punkt_downloaded",
            "display_image_in_terminal",
            "_display_video_via_mediapy",
            "mouse_right_press",
            "_translate_offline",
            "display_polygon",
            "sobel_edges",
            "norm_pdf",
            "input_select_serial_device_id",
            "get_process_title",
            "web_paste",
            "get_plt",
            "xy_torch_matrices",
            "as_easydict",
            "add_trailing_commas",
            "mouse_left_release",
            "mouse_left_press",
            "_load_image_from_file_via_opencv",
            "load_mp3_file",
            "autoformat_python_via_black_macchiato",
            "set_os_volume",
            "tmux_get_all_session_names",
            "_ensure_git_installed",
            "inverse_norm_cdf",
            "offer_to_blacklist",
            "load_gist",
            "cv_box_blur",
            "_rotate_rgb_image",
            "add",
            "load_safetensors",
            "get_git_info",
            "display_clear",
            "get_apriltag_image",
            "as_numpy_video",
            "get_number_of_monitors",
            "_view_json_via_jtree",
            "ip_to_mac_address",
            "optical_flow_to_image",
            "get_git_commit_date",
            "histogram_in_terminal",
            "MIDI_input",
            "save_video_avi",
            "_torch_device_to_index",
            "_load_files",
            "save_wav",
            "cv_gauss_blur",
            "run_cotracker"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        },
        "print": {
          "function_name": "print",
          "calls": [],
          "called_by": [
            "killport",
            "save_gist",
            "ring_terminal_bell",
            "save_images",
            "write_to_fp",
            "tmux_kill_session",
            "check_pip_requirements",
            "kill_process",
            "swap_paths",
            "on_fail",
            "is_valid_shell_syntax",
            "_run_ai_cli_coder",
            "set_cursor_to_bar",
            "input_select",
            "print_fansi_reference_table",
            "add_ipython_kernel",
            "shorten_github_url",
            "mini_editor",
            "pip_install_multiple",
            "input_conditional",
            "_run_filebrowser",
            "_terminal_move_cursor_to_bottom_left",
            "display_help",
            "text_to_speech_via_google",
            "_rich_print",
            "select_git_commit",
            "rinsp",
            "_disable_terminal_mouse_reporting",
            "print_code",
            "print_process_info",
            "_multi_line_python_input",
            "_legacy_fansi",
            "resize_videos",
            "_test_validate_tensor_shapes",
            "printed",
            "_terminal_move_cursor_to_bottom_and_new_line",
            "print_gpu_summary",
            "_mv",
            "print_rich_stack_trace",
            "mli",
            "_set_ryan_rprc",
            "pseudo_terminal",
            "cv_imshow",
            "_cv_print_cam_props",
            "do_path",
            "_install_lazygit",
            "input_integer",
            "print_notebook_gpu_summary",
            "search_processes",
            "launch_terminal_in_colab",
            "select_torch_device",
            "_fd",
            "currently_running_desktop",
            "add_to_successful_command_history",
            "download_google_font",
            "test_parse_dyaml_junctions",
            "git_clone",
            "_set_ryan_tmux_conf",
            "download_youtube_video",
            "get_all_facebook_messages",
            "display_file_tree",
            "print_lines",
            "pip_import",
            "set_snapshot",
            "fansi_pygments_demo",
            "display_markdown",
            "MIDI_output",
            "input_select_path",
            "_display_columns",
            "fansi_print_lines",
            "cv_resize_images",
            "print_highlighted_stack_trace",
            "_ensure_filebrowser_installed",
            "fansi_print",
            "list_cap_props",
            "input_option",
            "_set_ryan_vimrc",
            "_run_sys_command",
            "line_graph_via_plotille",
            "set_cursor_to_underscore",
            "_display_filetype_size_histogram",
            "_pterm_exeval",
            "_set_session_title",
            "fansi",
            "display_query_options",
            "save_safetensors",
            "fetch_data",
            "_fix_CERTIFICATE_VERIFY_FAILED_errors",
            "_terminal_move_cursor_to_top_left",
            "display_image_in_terminal",
            "s3_list_objects",
            "pretty_print",
            "convert_to_gif_via_ffmpeg",
            "print_all_git_paths",
            "print_history",
            "path_join",
            "clear_terminal_screen",
            "rinsp_search",
            "load_video",
            "_pterm_cd",
            "_rp_show_custom_line_profile",
            "make_zip_file_from_folder",
            "_rma",
            "_fdt_for_command_line",
            "validate_tensor_shapes",
            "ptoc",
            "_pterm_fuzzy_cd",
            "play_sound_file_via_afplay",
            "offer_to_blacklist",
            "printed_generator",
            "set_ans",
            "_set_ryan_xonshrc",
            "load_safetensors",
            "_print_status",
            "run_test",
            "_nbca",
            "display_code_cell",
            "set_cursor_to_box",
            "find_and_replace_text_files",
            "pterm_pretty_print",
            "histogram_in_terminal",
            "MIDI_input",
            "text_to_speech_voices_comparison",
            "display_image_slideshow",
            "convert_image_files",
            "set_prompt_style"
          ],
          "aliases": [
            "_builtin_print"
          ],
          "via_variants": [],
          "cluster": [
            "killport",
            "save_gist",
            "ring_terminal_bell",
            "save_images",
            "write_to_fp",
            "tmux_kill_session",
            "check_pip_requirements",
            "kill_process",
            "swap_paths",
            "on_fail",
            "is_valid_shell_syntax",
            "_run_ai_cli_coder",
            "set_cursor_to_bar",
            "input_select",
            "print_fansi_reference_table",
            "add_ipython_kernel",
            "shorten_github_url",
            "mini_editor",
            "pip_install_multiple",
            "input_conditional",
            "_run_filebrowser",
            "_terminal_move_cursor_to_bottom_left",
            "display_help",
            "text_to_speech_via_google",
            "_rich_print",
            "select_git_commit",
            "rinsp",
            "_disable_terminal_mouse_reporting",
            "print_code",
            "print_process_info",
            "_multi_line_python_input",
            "_legacy_fansi",
            "resize_videos",
            "_test_validate_tensor_shapes",
            "printed",
            "_terminal_move_cursor_to_bottom_and_new_line",
            "print_gpu_summary",
            "_mv",
            "set_prompt_style",
            "print_rich_stack_trace",
            "mli",
            "_set_ryan_rprc",
            "pseudo_terminal",
            "cv_imshow",
            "_cv_print_cam_props",
            "do_path",
            "_install_lazygit",
            "input_integer",
            "print_notebook_gpu_summary",
            "print",
            "search_processes",
            "launch_terminal_in_colab",
            "select_torch_device",
            "_fd",
            "currently_running_desktop",
            "add_to_successful_command_history",
            "download_google_font",
            "test_parse_dyaml_junctions",
            "_builtin_print",
            "git_clone",
            "_set_ryan_tmux_conf",
            "download_youtube_video",
            "get_all_facebook_messages",
            "display_file_tree",
            "print_lines",
            "pip_import",
            "set_snapshot",
            "fansi_pygments_demo",
            "display_markdown",
            "MIDI_output",
            "input_select_path",
            "_display_columns",
            "fansi_print_lines",
            "cv_resize_images",
            "print_highlighted_stack_trace",
            "_ensure_filebrowser_installed",
            "fansi_print",
            "input_option",
            "_set_ryan_vimrc",
            "_run_sys_command",
            "line_graph_via_plotille",
            "set_cursor_to_underscore",
            "_display_filetype_size_histogram",
            "_pterm_exeval",
            "_set_session_title",
            "fansi",
            "display_query_options",
            "save_safetensors",
            "fetch_data",
            "_fix_CERTIFICATE_VERIFY_FAILED_errors",
            "_terminal_move_cursor_to_top_left",
            "display_image_in_terminal",
            "s3_list_objects",
            "pretty_print",
            "convert_to_gif_via_ffmpeg",
            "print_all_git_paths",
            "print_history",
            "path_join",
            "clear_terminal_screen",
            "rinsp_search",
            "load_video",
            "_pterm_cd",
            "_rp_show_custom_line_profile",
            "make_zip_file_from_folder",
            "_rma",
            "_fdt_for_command_line",
            "validate_tensor_shapes",
            "ptoc",
            "_pterm_fuzzy_cd",
            "play_sound_file_via_afplay",
            "offer_to_blacklist",
            "printed_generator",
            "set_ans",
            "_set_ryan_xonshrc",
            "load_safetensors",
            "_print_status",
            "run_test",
            "_nbca",
            "display_code_cell",
            "set_cursor_to_box",
            "find_and_replace_text_files",
            "pterm_pretty_print",
            "histogram_in_terminal",
            "MIDI_input",
            "text_to_speech_voices_comparison",
            "display_image_slideshow",
            "convert_image_files",
            "list_cap_props"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        },
        "fansi_print": {
          "function_name": "fansi_print",
          "calls": [
            "fansi",
            "print"
          ],
          "called_by": [
            "change_video_file_framerate",
            "print_verbose_stack_trace",
            "_convert_powerpoint_file",
            "accumulate_clipboard_text",
            "import_all_submodules",
            "pip_import",
            "_make_sure_nltk_has_wordnet_installed",
            "play_sound_from_samples",
            "med_filter",
            "display_video_in_terminal_color",
            "_mv",
            "slowmo_video_via_rife",
            "fansi_printed",
            "_fart",
            "_fzf_multi_grep",
            "_get_depth_pro_model",
            "display_video",
            "mli",
            "_autocomplete_lss_name",
            "text_to_speech_via_apple",
            "clear_jupyter_notebook_outputs",
            "string_to_clipboard",
            "pseudo_terminal",
            "display_image",
            "_write_default_gitignore",
            "_cv_initialize_cameras",
            "tmuxp_launch_session_from_yaml",
            "explore_torch_module",
            "take_snapshot",
            "string_from_clipboard",
            "min_filter",
            "try_import",
            "set_ans",
            "_launch_ranger",
            "git_pull",
            "_waste_gpu",
            "_pterm_exeval",
            "gauss_blur",
            "pip_install_multiple",
            "show_error",
            "max_filter",
            "_display_pterm_flamechart",
            "_run_bashtop",
            "select_torch_device",
            "_vimore",
            "linterp",
            "_pip_import_depth_pro",
            "print_all_git_paths",
            "_filter_dict_via_fzf",
            "git_import",
            "python_input",
            "_ensure_ollama_server_running",
            "eval_for_rinsp",
            "waste_gpus",
            "input_multiline",
            "add_audio_to_video_file",
            "set_prompt_style",
            "_multi_line_python_input"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "change_video_file_framerate",
            "print_verbose_stack_trace",
            "_convert_powerpoint_file",
            "accumulate_clipboard_text",
            "import_all_submodules",
            "pip_import",
            "_make_sure_nltk_has_wordnet_installed",
            "play_sound_from_samples",
            "med_filter",
            "display_video_in_terminal_color",
            "_mv",
            "slowmo_video_via_rife",
            "fansi_printed",
            "_fart",
            "_fzf_multi_grep",
            "_get_depth_pro_model",
            "display_video",
            "mli",
            "_autocomplete_lss_name",
            "text_to_speech_via_apple",
            "clear_jupyter_notebook_outputs",
            "string_to_clipboard",
            "pseudo_terminal",
            "display_image",
            "fansi_print",
            "_write_default_gitignore",
            "_cv_initialize_cameras",
            "tmuxp_launch_session_from_yaml",
            "explore_torch_module",
            "take_snapshot",
            "string_from_clipboard",
            "min_filter",
            "try_import",
            "set_ans",
            "_launch_ranger",
            "git_pull",
            "_waste_gpu",
            "print",
            "_pterm_exeval",
            "gauss_blur",
            "pip_install_multiple",
            "show_error",
            "fansi",
            "max_filter",
            "_display_pterm_flamechart",
            "_run_bashtop",
            "select_torch_device",
            "_vimore",
            "linterp",
            "_pip_import_depth_pro",
            "print_all_git_paths",
            "_filter_dict_via_fzf",
            "git_import",
            "python_input",
            "_ensure_ollama_server_running",
            "eval_for_rinsp",
            "waste_gpus",
            "input_multiline",
            "add_audio_to_video_file",
            "set_prompt_style",
            "_multi_line_python_input"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        },
        "add": {
          "function_name": "add",
          "calls": [],
          "called_by": [
            "get_system_commands",
            "args_hash",
            "leave_ImportFrom",
            "pip_import",
            "import_all_submodules",
            "_get_all_paths_fast",
            "__setitem__",
            "recursion_helper",
            "_rinsp_search_helper",
            "get_cudnn_version",
            "_qualify_imports",
            "offer_to_blacklist",
            "load_image_from_webcam",
            "try_import",
            "lazy_par_map",
            "_pterm_exeval",
            "_inline_rp_code",
            "_dict_hash",
            "get_all_importable_module_names",
            "get_all_paths",
            "_get_env_info",
            "extract_imports",
            "laplacian_blend",
            "explore",
            "_get_parts_of_speech_via_nltk",
            "load_image_from_url"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "add",
            "get_system_commands",
            "lazy_par_map",
            "_pterm_exeval",
            "args_hash",
            "leave_ImportFrom",
            "pip_import",
            "import_all_submodules",
            "_get_all_paths_fast",
            "__setitem__",
            "recursion_helper",
            "_inline_rp_code",
            "_dict_hash",
            "get_all_importable_module_names",
            "_rinsp_search_helper",
            "get_cudnn_version",
            "_qualify_imports",
            "get_all_paths",
            "_get_env_info",
            "extract_imports",
            "laplacian_blend",
            "explore",
            "_get_parts_of_speech_via_nltk",
            "offer_to_blacklist",
            "load_image_from_webcam",
            "load_image_from_url",
            "try_import"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        },
        "delete_file": {
          "function_name": "delete_file",
          "calls": [
            "file_exists",
            "pip_import"
          ],
          "called_by": [
            "edit_image_in_terminal",
            "encode_video_to_bytes",
            "file_cache_wrap",
            "_display_video_in_notebook",
            "_view_image_via_textual_imageview",
            "_paste_path_from_bundle",
            "save_image_to_imgur",
            "make_zip_file_from_folder",
            "pseudo_terminal",
            "tmuxp_launch_session_from_yaml",
            "load_image_from_clipboard",
            "_delete_pyin_settings_file",
            "_view_markdown_in_terminal",
            "zip_folder_to_bytes",
            "decorator",
            "replace_symlink_with_hardlink",
            "decode_video_from_bytes",
            "view_table",
            "launch_visidata",
            "tmux_copy",
            "convert_image_file",
            "_view_json_via_jtree",
            "convert_to_gif_via_ffmpeg",
            "text_to_speech_via_google",
            "clear_cache",
            "load_animated_gif",
            "download_youtube_video",
            "delete_path",
            "delete_symlink"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "edit_image_in_terminal",
            "file_exists",
            "pip_import",
            "encode_video_to_bytes",
            "file_cache_wrap",
            "_display_video_in_notebook",
            "_view_image_via_textual_imageview",
            "_paste_path_from_bundle",
            "save_image_to_imgur",
            "make_zip_file_from_folder",
            "pseudo_terminal",
            "tmuxp_launch_session_from_yaml",
            "load_image_from_clipboard",
            "_delete_pyin_settings_file",
            "_view_markdown_in_terminal",
            "zip_folder_to_bytes",
            "decorator",
            "delete_file",
            "replace_symlink_with_hardlink",
            "decode_video_from_bytes",
            "view_table",
            "launch_visidata",
            "tmux_copy",
            "convert_image_file",
            "_view_json_via_jtree",
            "convert_to_gif_via_ffmpeg",
            "text_to_speech_via_google",
            "clear_cache",
            "load_animated_gif",
            "download_youtube_video",
            "delete_path",
            "delete_symlink"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        },
        "as_easydict": {
          "function_name": "as_easydict",
          "calls": [
            "pip_import"
          ],
          "called_by": [
            "gather_attrs",
            "load_json",
            "load_safetensors",
            "validate_tensor_shapes",
            "load_yaml_file",
            "parse_yaml",
            "broadcast_kwargs",
            "as_easydicts"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "gather_attrs",
            "load_json",
            "as_easydict",
            "load_safetensors",
            "pip_import",
            "validate_tensor_shapes",
            "load_yaml_file",
            "parse_yaml",
            "broadcast_kwargs",
            "as_easydicts"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        },
        "rinsp": {
          "function_name": "rinsp",
          "calls": [
            "file_exists",
            "read_symlink",
            "pip_import",
            "is_utf8_file",
            "linerino",
            "get_all_submodule_names",
            "sorty",
            "number_of_lines_in_file",
            "is_torch_tensor",
            "is_module",
            "color",
            "get_process_using_port",
            "print_stack_trace",
            "is_dictlike",
            "number_of_lines",
            "path_exists",
            "get_source_file",
            "get_all_files",
            "_maybe_display_string_in_pager",
            "symlink_is_broken",
            "autoformat_python_via_black",
            "strip_ansi_escapes",
            "indentify_all_but_first_line",
            "get_terminal_width",
            "get_file_size",
            "errortext",
            "is_image_file",
            "get_port_is_taken",
            "fansi_syntax_highlighting",
            "append_stat",
            "print",
            "format_parent_hierarchy",
            "is_numpy_array",
            "get_parent_hierarchy",
            "line_split",
            "fansi",
            "strip",
            "is_video_file",
            "date_modified",
            "human_readable_file_size",
            "replace",
            "format_signature",
            "display_dict",
            "get_video_file_shape",
            "get_video_file_duration",
            "mean",
            "parent_class_names",
            "currently_running_windows",
            "get_full_class_name",
            "get_all_folders",
            "get_image_file_dimensions",
            "line_join",
            "print_process_info"
          ],
          "called_by": [
            "pseudo_terminal"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "file_exists",
            "read_symlink",
            "pip_import",
            "is_utf8_file",
            "linerino",
            "get_all_submodule_names",
            "sorty",
            "number_of_lines_in_file",
            "is_torch_tensor",
            "is_module",
            "color",
            "get_process_using_port",
            "is_dictlike",
            "number_of_lines",
            "path_exists",
            "pseudo_terminal",
            "get_source_file",
            "get_all_files",
            "_maybe_display_string_in_pager",
            "symlink_is_broken",
            "autoformat_python_via_black",
            "strip_ansi_escapes",
            "indentify_all_but_first_line",
            "get_terminal_width",
            "get_file_size",
            "errortext",
            "is_image_file",
            "get_port_is_taken",
            "fansi_syntax_highlighting",
            "append_stat",
            "print",
            "format_parent_hierarchy",
            "is_numpy_array",
            "get_parent_hierarchy",
            "line_split",
            "fansi",
            "strip",
            "is_video_file",
            "date_modified",
            "human_readable_file_size",
            "replace",
            "format_signature",
            "display_dict",
            "get_video_file_shape",
            "get_video_file_duration",
            "line_join",
            "rinsp",
            "mean",
            "parent_class_names",
            "currently_running_windows",
            "get_full_class_name",
            "get_all_folders",
            "get_image_file_dimensions",
            "print_stack_trace",
            "print_process_info"
          ],
          "multiplexing": [
            "isinstance",
            "isinstance",
            "line_join",
            "str",
            "isinstance",
            "str"
          ],
          "is_via_variant": false,
          "is_private": false
        },
        "_get_pynput_mouse_controller": {
          "function_name": "_get_pynput_mouse_controller",
          "calls": [
            "pip_import"
          ],
          "called_by": [
            "set_mouse_position",
            "mouse_middle_press",
            "mouse_middle_release",
            "mouse_left_click",
            "mouse_right_press",
            "mouse_left_release",
            "mouse_left_press",
            "mouse_right_release",
            "mouse_middle_click",
            "mouse_right_click",
            "get_mouse_position"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "set_mouse_position",
            "mouse_middle_press",
            "mouse_middle_release",
            "mouse_left_click",
            "mouse_right_press",
            "pip_import",
            "mouse_left_release",
            "mouse_left_press",
            "mouse_right_release",
            "mouse_middle_click",
            "mouse_right_click",
            "_get_pynput_mouse_controller",
            "get_mouse_position"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": true
        }
      },
      "documentation_status": {
        "pip_import": {
          "current_quality": "excellent",
          "current_docstring": "TODO: Make this function only request sudo if we need it. Otherwise it's a nuisance.\nTODO: Add an \"always\" option to \"yes\" and \"no\" for installing modules.\n\nAttempts to import a module, and if success...",
          "suggestions": [
            "Document function parameters and their types"
          ],
          "has_examples": true,
          "has_parameters": false,
          "has_return_info": true
        },
        "print": {
          "current_quality": "missing",
          "current_docstring": "",
          "suggestions": [
            "Add comprehensive docstring with purpose, parameters, and examples"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "fansi_print": {
          "current_quality": "good",
          "current_docstring": "This function prints colored text in a terminal.\nIt can also print bolded, underlined, or highlighted text.\nIt uses ANSI escape sequences to do this...\n   ...and so calling it 'fansi' is a pun on 'fan...",
          "suggestions": [
            "Document function parameters and their types"
          ],
          "has_examples": true,
          "has_parameters": false,
          "has_return_info": false
        },
        "add": {
          "current_quality": "missing",
          "current_docstring": "",
          "suggestions": [
            "Add comprehensive docstring with purpose, parameters, and examples"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "delete_file": {
          "current_quality": "good",
          "current_docstring": "Deletes a file at a given path.\n\nArgs:\n    path (str): Path to the file.\n    permanent (bool, optional): If True, delete file permanently. Otherwise, move to trash. Defaults to True.\n\npermanent exists...",
          "suggestions": [
            "Add concrete usage examples with >>> syntax",
            "Document return value and type"
          ],
          "has_examples": false,
          "has_parameters": true,
          "has_return_info": false
        },
        "as_easydict": {
          "current_quality": "missing",
          "current_docstring": "",
          "suggestions": [
            "Add comprehensive docstring with purpose, parameters, and examples"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "rinsp": {
          "current_quality": "missing",
          "current_docstring": "",
          "suggestions": [
            "Add comprehensive docstring with purpose, parameters, and examples"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "_get_pynput_mouse_controller": {
          "current_quality": "missing",
          "current_docstring": "",
          "suggestions": [
            "Add comprehensive docstring with purpose, parameters, and examples"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        }
      },
      "work_instructions": [
        "For each function in this package:",
        "1. Read the existing docstring (if any) and understand the function's purpose",
        "2. Examine the function's implementation to understand its behavior",
        "3. Check related functions (in context) to understand how they work together",
        "4. ENHANCE (don't replace) the docstring following the template:",
        "   - Keep original docstring if it exists",
        "   - Add 'Enhanced Documentation:' section with usage patterns",
        "   - Include concrete examples with >>> syntax",
        "   - Document parameters and return values",
        "   - Note related functions and when to use vs alternatives",
        "   - Add relevant tags for searchability",
        "5. Test your examples to ensure they work",
        "6. Update the appropriate tag files in documentation/tags/",
        "7. SPECIAL: Document the multiplexing pattern - how the base function dispatches to specific implementations"
      ],
      "quality_checklist": [
        "\u2610 Each function has enhanced docstring with purpose clearly explained",
        "\u2610 All parameters are documented with types and descriptions",
        "\u2610 Return values are documented with types and descriptions",
        "\u2610 At least one concrete example with >>> syntax that actually runs",
        "\u2610 Related functions are mentioned with explanations",
        "\u2610 Usage patterns and common scenarios are described",
        "\u2610 Relevant tags added for searchability",
        "\u2610 Function added to appropriate tag files in documentation/tags/",
        "\u2610 Examples tested and confirmed working",
        "\u2610 Cross-references to multiplexing patterns or _via_ variants documented"
      ]
    },
    {
      "package_id": 2,
      "functions": [
        "is_torch_tensor",
        "is_image",
        "as_numpy_image",
        "is_binary_image",
        "display_image",
        "get_video_height",
        "get_video_width",
        "_crop_images_to_max_or_min_size"
      ],
      "total_functions": 8,
      "estimated_hours": 6.0,
      "priority_score": 1890,
      "context": {
        "is_torch_tensor": {
          "function_name": "is_torch_tensor",
          "calls": [
            "_is_instance_of_module_class"
          ],
          "called_by": [
            "_fft",
            "_maximum",
            "_images_are_all_same_size",
            "_create_array_like",
            "_ceil",
            "_sigmoid",
            "as_numpy_videos",
            "_sin",
            "as_numpy_images",
            "_log",
            "rinsp",
            "_asin",
            "_crop_images_to_max_or_min_size",
            "_softmax",
            "as_torch_images",
            "torch_remap_image",
            "labeled_videos",
            "get_video_height",
            "_atan2",
            "apply_uv_map",
            "get_min_image_dimensions",
            "_sign",
            "accumulate_flows",
            "resize_list",
            "_copy_tensor",
            "_round",
            "_sinh",
            "_pow",
            "get_video_width",
            "_sqrt",
            "_acos",
            "get_max_video_dimensions",
            "_tanh",
            "_nan_to_num",
            "_atan",
            "_trim_videos_to_same_length",
            "is_binary_image",
            "_cosh",
            "_cos",
            "_floor",
            "is_float_image",
            "get_bilinear_weights",
            "get_max_image_dimensions",
            "display_image",
            "_sum",
            "_ifft",
            "_min",
            "_minimum",
            "_exp",
            "_log2",
            "_log10",
            "as_torch_image",
            "_tensorify",
            "_mean",
            "_relu",
            "_tan",
            "_clip",
            "is_image",
            "torch_resize_images",
            "validate_tensor_shapes",
            "_degrees",
            "_omni_save_default_extension",
            "as_numpy_image",
            "torch_scatter_add_image",
            "as_rgba_float_color",
            "get_min_video_dimensions",
            "as_numpy_video",
            "_abs",
            "_max",
            "list_transpose",
            "handy_hash",
            "optical_flow_to_image",
            "random_batch",
            "is_torch_image",
            "is_byte_image",
            "_radians",
            "run_cotracker"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "is_binary_image",
            "_cosh",
            "_cos",
            "_floor",
            "_fft",
            "is_float_image",
            "_maximum",
            "get_bilinear_weights",
            "get_max_image_dimensions",
            "_images_are_all_same_size",
            "display_image",
            "_atan",
            "_sum",
            "_ifft",
            "_create_array_like",
            "_min",
            "_ceil",
            "_sigmoid",
            "_minimum",
            "as_numpy_videos",
            "_exp",
            "_sin",
            "_log2",
            "_log10",
            "as_torch_image",
            "as_numpy_images",
            "_log",
            "_tensorify",
            "rinsp",
            "_mean",
            "_asin",
            "_crop_images_to_max_or_min_size",
            "_relu",
            "_tan",
            "_softmax",
            "as_torch_images",
            "_clip",
            "torch_remap_image",
            "labeled_videos",
            "is_image",
            "is_torch_tensor",
            "get_video_height",
            "_atan2",
            "apply_uv_map",
            "get_min_image_dimensions",
            "_sign",
            "_is_instance_of_module_class",
            "accumulate_flows",
            "torch_resize_images",
            "validate_tensor_shapes",
            "_degrees",
            "_omni_save_default_extension",
            "as_numpy_image",
            "resize_list",
            "_copy_tensor",
            "_round",
            "_sinh",
            "_pow",
            "torch_scatter_add_image",
            "get_video_width",
            "as_rgba_float_color",
            "_sqrt",
            "get_min_video_dimensions",
            "as_numpy_video",
            "_abs",
            "_max",
            "_acos",
            "list_transpose",
            "get_max_video_dimensions",
            "_tanh",
            "handy_hash",
            "optical_flow_to_image",
            "random_batch",
            "_nan_to_num",
            "is_torch_image",
            "is_byte_image",
            "_trim_videos_to_same_length",
            "_radians",
            "run_cotracker"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        },
        "is_image": {
          "function_name": "is_image",
          "calls": [
            "is_binary_image",
            "is_rgba_image",
            "is_byte_image",
            "is_rgb_image",
            "is_grayscale_image",
            "is_pil_image",
            "is_torch_tensor",
            "as_numpy_array",
            "is_float_image"
          ],
          "called_by": [
            "grid_concatenated_images",
            "as_byte_image",
            "edit_image_in_terminal",
            "_load_image_from_file_via_PIL",
            "resize_image_to_hold",
            "as_torch_images",
            "as_rgba_image",
            "get_image_height",
            "get_mask_iou",
            "_prepare_cv_image",
            "_convert_content",
            "get_image_saturation",
            "cv_equalize_histogram",
            "overlay_images",
            "save_image_jpg",
            "_view_image_via_textual_imageview",
            "apply_uv_map",
            "save_image_to_imgur",
            "trim_video",
            "get_image_dimensions",
            "pseudo_terminal",
            "crop_image",
            "display_image",
            "_omni_save_default_extension",
            "display_image_in_terminal_color",
            "with_alpha_channel",
            "as_float_image",
            "_with_image_channel",
            "blend_images",
            "_binary_floyd_steinburg_dithering",
            "_rotate_rgb_image",
            "inverted_image",
            "get_optical_flow_via_pyflow",
            "save_openexr_image",
            "crop_image_at_random_position",
            "rgb_histogram_image",
            "is_transparent_image",
            "as_rgb_image",
            "cv_bgr_rgb_swap",
            "as_binary_image",
            "get_image_value",
            "apply_image_function_per_channel",
            "display_image_in_terminal_imgcat",
            "cv_image_filter",
            "as_pil_image",
            "_omni_save_animated_image",
            "get_image_hue",
            "_display_image_in_notebook_via_ipyplot",
            "write_frame",
            "crop_image_to_square",
            "convert_grid_item",
            "cv_inpaint_image",
            "cv_floodfill_mask",
            "labeled_image",
            "encode_image_to_bytes",
            "resize_image_to_fit",
            "pterm_pretty_print",
            "cv_resize_image",
            "shift_image",
            "get_image_width",
            "_encode_image_to_bytes",
            "display_image_slideshow",
            "crop_image_zeros",
            "as_grayscale_image",
            "get_normal_map",
            "sobel_edges",
            "rgb_to_hsv",
            "_convert_content_grid",
            "hsv_to_rgb",
            "run_depth_pro",
            "rotate_images",
            "_resize_image_via_skimage"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "is_binary_image",
            "grid_concatenated_images",
            "as_byte_image",
            "resize_image_to_hold",
            "get_mask_iou",
            "is_rgba_image",
            "get_image_height",
            "_prepare_cv_image",
            "get_image_saturation",
            "cv_equalize_histogram",
            "is_float_image",
            "save_image_to_imgur",
            "trim_video",
            "get_image_dimensions",
            "display_image",
            "is_grayscale_image",
            "display_image_in_terminal_color",
            "with_alpha_channel",
            "_with_image_channel",
            "blend_images",
            "as_rgb_image",
            "crop_image_at_random_position",
            "is_transparent_image",
            "apply_image_function_per_channel",
            "display_image_in_terminal_imgcat",
            "get_image_hue",
            "cv_inpaint_image",
            "labeled_image",
            "resize_image_to_fit",
            "cv_resize_image",
            "shift_image",
            "_encode_image_to_bytes",
            "sobel_edges",
            "run_depth_pro",
            "edit_image_in_terminal",
            "rotate_images",
            "as_torch_images",
            "_load_image_from_file_via_PIL",
            "as_rgba_image",
            "is_rgb_image",
            "_convert_content",
            "is_image",
            "is_torch_tensor",
            "overlay_images",
            "save_image_jpg",
            "_view_image_via_textual_imageview",
            "apply_uv_map",
            "pseudo_terminal",
            "crop_image",
            "_omni_save_default_extension",
            "as_float_image",
            "_binary_floyd_steinburg_dithering",
            "_rotate_rgb_image",
            "inverted_image",
            "get_optical_flow_via_pyflow",
            "save_openexr_image",
            "get_image_value",
            "cv_bgr_rgb_swap",
            "as_binary_image",
            "cv_image_filter",
            "is_pil_image",
            "as_pil_image",
            "_omni_save_animated_image",
            "write_frame",
            "_display_image_in_notebook_via_ipyplot",
            "crop_image_to_square",
            "convert_grid_item",
            "cv_floodfill_mask",
            "encode_image_to_bytes",
            "pterm_pretty_print",
            "is_byte_image",
            "get_image_width",
            "display_image_slideshow",
            "crop_image_zeros",
            "as_numpy_array",
            "as_grayscale_image",
            "get_normal_map",
            "rgb_to_hsv",
            "_convert_content_grid",
            "hsv_to_rgb",
            "rgb_histogram_image",
            "_resize_image_via_skimage"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        },
        "as_numpy_image": {
          "function_name": "as_numpy_image",
          "calls": [
            "as_numpy_images",
            "is_pil_image",
            "is_torch_tensor",
            "is_a_matrix",
            "as_numpy_array"
          ],
          "called_by": [
            "resize_image_to_hold",
            "heightify",
            "_prepare_cv_image",
            "roll_image",
            "save_image_jpg",
            "image_with_progress_bar",
            "_as_skia_image",
            "save_image_webp",
            "with_drop_shadow",
            "crop_image",
            "display_image",
            "cv_imshow",
            "rotate_image",
            "display_image_in_terminal_color",
            "auto_canny",
            "get_image_blue",
            "save_image_avif",
            "get_image_green",
            "_rotate_rgb_image",
            "with_corner_radius",
            "bordered_image_solid_color",
            "save_image_jxl",
            "_images_conversion",
            "as_pil_image",
            "skia_resize_image",
            "display_image_in_terminal",
            "get_image_red",
            "labeled_image",
            "resize_image_to_fit",
            "as_torch_image",
            "as_numpy_images",
            "apply_colormap_to_image",
            "run_depth_pro",
            "as_numpy_video"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "resize_image_to_hold",
            "heightify",
            "_prepare_cv_image",
            "roll_image",
            "is_torch_tensor",
            "save_image_jpg",
            "image_with_progress_bar",
            "_as_skia_image",
            "save_image_webp",
            "with_drop_shadow",
            "crop_image",
            "display_image",
            "cv_imshow",
            "rotate_image",
            "as_numpy_image",
            "display_image_in_terminal_color",
            "auto_canny",
            "is_a_matrix",
            "get_image_blue",
            "save_image_avif",
            "get_image_green",
            "_rotate_rgb_image",
            "with_corner_radius",
            "bordered_image_solid_color",
            "save_image_jxl",
            "_images_conversion",
            "is_pil_image",
            "as_pil_image",
            "skia_resize_image",
            "display_image_in_terminal",
            "get_image_red",
            "labeled_image",
            "resize_image_to_fit",
            "as_torch_image",
            "as_numpy_images",
            "as_numpy_array",
            "apply_colormap_to_image",
            "run_depth_pro",
            "as_numpy_video"
          ],
          "multiplexing": [
            "as_numpy_array",
            "as_numpy_array",
            "as_numpy_array",
            "as_numpy_array",
            "as_numpy_array",
            "as_numpy_array"
          ],
          "is_via_variant": false,
          "is_private": false
        },
        "is_binary_image": {
          "function_name": "is_binary_image",
          "calls": [
            "is_torch_tensor"
          ],
          "called_by": [
            "as_byte_image",
            "inverted_image",
            "get_optical_flow_via_pyflow",
            "unwarped_perspective_image",
            "cv_imshow",
            "cv_draw_circle",
            "as_binary_image",
            "cv_draw_arrow",
            "cv_resize_image",
            "is_image",
            "cv_image_filter",
            "as_float_image",
            "apply_uv_map",
            "cv_gauss_blur",
            "cv_remap_image",
            "_binary_floyd_steinburg_dithering"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "is_binary_image",
            "as_byte_image",
            "inverted_image",
            "get_optical_flow_via_pyflow",
            "cv_draw_circle",
            "as_binary_image",
            "cv_draw_arrow",
            "is_image",
            "cv_image_filter",
            "is_torch_tensor",
            "apply_uv_map",
            "cv_remap_image",
            "unwarped_perspective_image",
            "cv_imshow",
            "cv_resize_image",
            "as_float_image",
            "cv_gauss_blur",
            "_binary_floyd_steinburg_dithering"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        },
        "display_image": {
          "function_name": "display_image",
          "calls": [
            "get_plt",
            "pip_import",
            "is_image",
            "currently_in_a_tty",
            "is_torch_tensor",
            "running_in_google_colab",
            "running_in_ipython",
            "module_exists",
            "cv_imshow",
            "fansi_print",
            "display_image_in_terminal_color",
            "as_numpy_image",
            "as_float_image",
            "_fig",
            "grayscale_to_rgb",
            "_float_image_dtype",
            "as_rgb_image",
            "clf",
            "is_pil_image",
            "running_in_ssh",
            "display_image_in_notebook",
            "currently_running_desktop",
            "load_image"
          ],
          "called_by": [
            "display_color_255",
            "cv_imshow",
            "display_video_in_terminal_color",
            "display_alpha_image",
            "display_video"
          ],
          "aliases": [
            "display"
          ],
          "via_variants": [],
          "cluster": [
            "get_plt",
            "as_rgb_image",
            "clf",
            "display_color_255",
            "pip_import",
            "is_image",
            "currently_in_a_tty",
            "is_torch_tensor",
            "is_pil_image",
            "display_video_in_terminal_color",
            "running_in_google_colab",
            "display_video",
            "running_in_ssh",
            "running_in_ipython",
            "module_exists",
            "display_image_in_notebook",
            "currently_running_desktop",
            "display_image",
            "cv_imshow",
            "fansi_print",
            "load_image",
            "display_image_in_terminal_color",
            "as_numpy_image",
            "as_float_image",
            "display",
            "_fig",
            "grayscale_to_rgb",
            "_float_image_dtype",
            "display_alpha_image"
          ],
          "multiplexing": [
            "fansi_print",
            "display_image_in_terminal_color",
            "display_image_in_notebook",
            "cv_imshow",
            "cv_imshow",
            "cv_imshow"
          ],
          "is_via_variant": false,
          "is_private": false
        },
        "get_video_height": {
          "function_name": "get_video_height",
          "calls": [
            "is_numpy_array",
            "is_torch_tensor"
          ],
          "called_by": [
            "get_video_heights",
            "get_max_video_dimensions",
            "get_min_video_dimensions"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "is_torch_tensor",
            "get_video_height",
            "get_video_heights",
            "is_numpy_array",
            "get_max_video_dimensions",
            "get_min_video_dimensions"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        },
        "get_video_width": {
          "function_name": "get_video_width",
          "calls": [
            "is_numpy_array",
            "is_torch_tensor"
          ],
          "called_by": [
            "get_video_widths",
            "get_max_video_dimensions",
            "get_min_video_dimensions"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "is_torch_tensor",
            "is_numpy_array",
            "get_video_widths",
            "get_max_video_dimensions",
            "get_video_width",
            "get_min_video_dimensions"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        },
        "_crop_images_to_max_or_min_size": {
          "function_name": "_crop_images_to_max_or_min_size",
          "calls": [
            "detuple",
            "get_image_dimensions",
            "crop_image",
            "is_numpy_array",
            "is_torch_tensor"
          ],
          "called_by": [
            "crop_images_to_min_height",
            "crop_images_to_max_size",
            "crop_images_to_max_width",
            "crop_images_to_min_width",
            "crop_images_to_max_height",
            "crop_images_to_min_size"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "detuple",
            "crop_images_to_min_height",
            "get_image_dimensions",
            "crop_images_to_max_size",
            "crop_images_to_max_width",
            "crop_image",
            "crop_images_to_min_width",
            "is_numpy_array",
            "crop_images_to_max_height",
            "is_torch_tensor",
            "crop_images_to_min_size",
            "_crop_images_to_max_or_min_size"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": true
        }
      },
      "documentation_status": {
        "is_torch_tensor": {
          "current_quality": "missing",
          "current_docstring": "",
          "suggestions": [
            "Add comprehensive docstring with purpose, parameters, and examples"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "is_image": {
          "current_quality": "basic",
          "current_docstring": "An image must be either grayscale (a numpy matrix), rgb (a HWC tensor), or rgba (a HWC tensor) and have be either a bool, np.uint8, or floating point (between 0 and 1) dtype\nIt can also be a PIL image",
          "suggestions": [
            "Add concrete usage examples with >>> syntax",
            "Document return value and type",
            "Document supported image types and formats"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "as_numpy_image": {
          "current_quality": "basic",
          "current_docstring": "Will convert an image to HWC np.ndarray form if it isn't already - supports CHW torch tensors, PIL images etc ",
          "suggestions": [
            "Add concrete usage examples with >>> syntax",
            "Document function parameters and their types",
            "Document return value and type",
            "Document supported image types and formats"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "is_binary_image": {
          "current_quality": "basic",
          "current_docstring": "A binary image is made of boolean values (AKA true or false)",
          "suggestions": [
            "Add concrete usage examples with >>> syntax",
            "Document return value and type",
            "Document supported image types and formats",
            "Expand description with more detail about purpose and behavior"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "display_image": {
          "current_quality": "basic",
          "current_docstring": "Very simple to understand: this function displays an image.\nAt first, it tries to use matplotlib and if that errors it falls back to opencv's imshow function.\nBy default this function will not halt yo...",
          "suggestions": [
            "Add concrete usage examples with >>> syntax",
            "Document function parameters and their types",
            "Document return value and type",
            "Document supported image types and formats"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "get_video_height": {
          "current_quality": "missing",
          "current_docstring": "",
          "suggestions": [
            "Add comprehensive docstring with purpose, parameters, and examples"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "get_video_width": {
          "current_quality": "missing",
          "current_docstring": "",
          "suggestions": [
            "Add comprehensive docstring with purpose, parameters, and examples"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "_crop_images_to_max_or_min_size": {
          "current_quality": "missing",
          "current_docstring": "",
          "suggestions": [
            "Add comprehensive docstring with purpose, parameters, and examples"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        }
      },
      "work_instructions": [
        "For each function in this package:",
        "1. Read the existing docstring (if any) and understand the function's purpose",
        "2. Examine the function's implementation to understand its behavior",
        "3. Check related functions (in context) to understand how they work together",
        "4. ENHANCE (don't replace) the docstring following the template:",
        "   - Keep original docstring if it exists",
        "   - Add 'Enhanced Documentation:' section with usage patterns",
        "   - Include concrete examples with >>> syntax",
        "   - Document parameters and return values",
        "   - Note related functions and when to use vs alternatives",
        "   - Add relevant tags for searchability",
        "5. Test your examples to ensure they work",
        "6. Update the appropriate tag files in documentation/tags/",
        "7. SPECIAL: Document the multiplexing pattern - how the base function dispatches to specific implementations"
      ],
      "quality_checklist": [
        "\u2610 Each function has enhanced docstring with purpose clearly explained",
        "\u2610 All parameters are documented with types and descriptions",
        "\u2610 Return values are documented with types and descriptions",
        "\u2610 At least one concrete example with >>> syntax that actually runs",
        "\u2610 Related functions are mentioned with explanations",
        "\u2610 Usage patterns and common scenarios are described",
        "\u2610 Relevant tags added for searchability",
        "\u2610 Function added to appropriate tag files in documentation/tags/",
        "\u2610 Examples tested and confirmed working",
        "\u2610 Cross-references to multiplexing patterns or _via_ variants documented"
      ]
    },
    {
      "package_id": 5,
      "functions": [
        "format",
        "fansi",
        "replace",
        "text_to_speech_via_google",
        "get_nvidia_smi",
        "write_to_fp",
        "download_url",
        "get_windows_version"
      ],
      "total_functions": 8,
      "estimated_hours": 6.0,
      "priority_score": 1710,
      "context": {
        "format": {
          "function_name": "format",
          "calls": [],
          "called_by": [
            "byte_color_to_hex_color",
            "save_gist",
            "load_video",
            "torch_remap_image",
            "_test_validate_tensor_shapes",
            "write_to_fp",
            "_display_video_in_notebook",
            "_rp_show_custom_line_profile",
            "tmux_kill_session",
            "print_gpu_summary",
            "kill_process",
            "get_cudnn_version",
            "test_mixed_tensor_types",
            "load_video_stream",
            "cv_optical_flow",
            "get_process_using_port",
            "get_bilinear_weights",
            "map_network",
            "_copy_text_over_terminal",
            "get_os",
            "_get_stack_trace_string",
            "validate_tensor_shapes",
            "split_into_sublists",
            "get_process_username",
            "_get_all_github_gists_info",
            "format_date",
            "torch_scatter_add_image",
            "download_url",
            "fansi_pygments",
            "merged_dicts",
            "_pterm_exeval",
            "get_youtube_video_transcript",
            "test_multiple_tensors_consistent",
            "pip_install_multiple",
            "fansi",
            "write_frame",
            "save_safetensors",
            "get_nvidia_smi",
            "fetch_data",
            "concat_mp4_files",
            "load_page",
            "display_code_cell",
            "skia_resize_image",
            "replace",
            "get_windows_version",
            "run_test",
            "test_manual_dimension",
            "find_and_replace_text_files",
            "get_process_start_date",
            "text_to_speech_via_google",
            "_truncate_string_floats",
            "currently_running_desktop",
            "get_all_local_ip_addresses",
            "_get_env_info",
            "test_single_tensor",
            "download_google_font",
            "get_git_date_modified",
            "convert_image_files",
            "_get_rp_color",
            "_get_skia_sampling",
            "print_process_info",
            "get_all_facebook_messages",
            "_legacy_fansi"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "byte_color_to_hex_color",
            "save_gist",
            "write_to_fp",
            "tmux_kill_session",
            "kill_process",
            "get_process_using_port",
            "get_bilinear_weights",
            "split_into_sublists",
            "get_process_username",
            "fansi_pygments",
            "_pterm_exeval",
            "test_multiple_tensors_consistent",
            "pip_install_multiple",
            "fansi",
            "test_mixed_tensor_types",
            "save_safetensors",
            "fetch_data",
            "concat_mp4_files",
            "load_page",
            "replace",
            "get_windows_version",
            "test_manual_dimension",
            "get_process_start_date",
            "text_to_speech_via_google",
            "_truncate_string_floats",
            "get_all_local_ip_addresses",
            "test_single_tensor",
            "_get_skia_sampling",
            "get_os",
            "print_process_info",
            "_legacy_fansi",
            "load_video",
            "torch_remap_image",
            "_test_validate_tensor_shapes",
            "_display_video_in_notebook",
            "_rp_show_custom_line_profile",
            "print_gpu_summary",
            "get_cudnn_version",
            "load_video_stream",
            "cv_optical_flow",
            "map_network",
            "_copy_text_over_terminal",
            "_get_stack_trace_string",
            "validate_tensor_shapes",
            "_get_all_github_gists_info",
            "format_date",
            "torch_scatter_add_image",
            "download_url",
            "merged_dicts",
            "get_youtube_video_transcript",
            "format",
            "write_frame",
            "run_test",
            "get_nvidia_smi",
            "display_code_cell",
            "skia_resize_image",
            "find_and_replace_text_files",
            "currently_running_desktop",
            "_get_env_info",
            "download_google_font",
            "get_git_date_modified",
            "convert_image_files",
            "_get_rp_color",
            "get_all_facebook_messages"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        },
        "fansi": {
          "function_name": "fansi",
          "calls": [
            "as_rgb_float_color",
            "get",
            "print",
            "update",
            "terminal_supports_ansi",
            "float_color_to_byte_color",
            "float_color_to_ansi256",
            "fansi",
            "format",
            "_transform_fansi_arg",
            "keys"
          ],
          "called_by": [
            "display_file_tree",
            "request_replace",
            "import_all_submodules",
            "linerino",
            "highlight_child",
            "set_snapshot",
            "_rp_show_custom_line_profile",
            "_mv",
            "input_select_multiple",
            "_paste_path_from_bundle",
            "_fart",
            "fansi_highlight_path",
            "input_select_path",
            "fansi_print_lines",
            "__repr__",
            "pseudo_terminal",
            "fansi_print",
            "validate_tensor_shapes",
            "get_stats_string",
            "_maybe_display_string_in_pager",
            "_run_sys_command",
            "_pterm_fuzzy_cd",
            "do_path",
            "errortext",
            "_eta",
            "_line_numbered_string",
            "try_import",
            "fansi_syntax_highlighting",
            "ansi_highlight",
            "format_path",
            "pip_install_multiple",
            "fansi_progress",
            "fansi",
            "select_torch_device",
            "fansify",
            "_nbca",
            "cyan",
            "display_code_cell",
            "_vimore",
            "_highlighted_query_results",
            "pretty_print",
            "_fd",
            "to_str",
            "print_all_git_paths",
            "select_git_commit",
            "option_to_string",
            "rinsp",
            "print_history",
            "highlighted",
            "input_select_serial_device_id",
            "print_code",
            "pretty_lines",
            "set_prompt_style",
            "print_stack_trace",
            "_legacy_fansi"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "display_file_tree",
            "request_replace",
            "update",
            "linerino",
            "set_snapshot",
            "input_select_multiple",
            "_fart",
            "fansi_highlight_path",
            "input_select_path",
            "fansi_print_lines",
            "fansi_print",
            "_run_sys_command",
            "_line_numbered_string",
            "try_import",
            "fansi_syntax_highlighting",
            "float_color_to_byte_color",
            "pip_install_multiple",
            "fansi_progress",
            "fansi",
            "_transform_fansi_arg",
            "_vimore",
            "_highlighted_query_results",
            "pretty_print",
            "as_rgb_float_color",
            "to_str",
            "print_all_git_paths",
            "select_git_commit",
            "rinsp",
            "print_history",
            "highlighted",
            "input_select_serial_device_id",
            "print_code",
            "print_stack_trace",
            "format_path",
            "_legacy_fansi",
            "import_all_submodules",
            "highlight_child",
            "_rp_show_custom_line_profile",
            "_mv",
            "keys",
            "_paste_path_from_bundle",
            "get",
            "__repr__",
            "pseudo_terminal",
            "terminal_supports_ansi",
            "validate_tensor_shapes",
            "get_stats_string",
            "float_color_to_ansi256",
            "_maybe_display_string_in_pager",
            "_pterm_fuzzy_cd",
            "do_path",
            "errortext",
            "_eta",
            "print",
            "ansi_highlight",
            "format",
            "select_torch_device",
            "fansify",
            "_nbca",
            "cyan",
            "display_code_cell",
            "_fd",
            "option_to_string",
            "pretty_lines",
            "set_prompt_style"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        },
        "replace": {
          "function_name": "replace",
          "calls": [
            "format"
          ],
          "called_by": [
            "save_gist",
            "parenthesizer_automator",
            "_get_kernel_to_pid_mapping",
            "words_to_number",
            "_fzf_multi_grep",
            "p",
            "pseudo_terminal",
            "skia_stamp_image",
            "input_select",
            "sanitize_string",
            "string_to_modifier",
            "search_replace_simul",
            "_parse_origin_to_pixels",
            "_pterm_exeval",
            "repr_string_to_modifier",
            "repr_multiline",
            "as_rgba_float_color",
            "_iterfzf",
            "format_parent_hierarchy",
            "columnify_strings",
            "color_name_to_float_color",
            "get_unique_copy_path",
            "apply_suffix_to_name",
            "strip",
            "_parenthesizer_automator",
            "concat_mp4_files",
            "display_code_cell",
            "to_str",
            "pretty_print",
            "find_and_replace_text_files",
            "old_and_new_text",
            "number_to_words",
            "text_to_speech_via_google",
            "rinsp",
            "pretty_lines",
            "_display_downloadable_image_in_notebook_via_ipython"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "save_gist",
            "parenthesizer_automator",
            "_get_kernel_to_pid_mapping",
            "words_to_number",
            "_fzf_multi_grep",
            "p",
            "pseudo_terminal",
            "skia_stamp_image",
            "input_select",
            "sanitize_string",
            "string_to_modifier",
            "search_replace_simul",
            "_parse_origin_to_pixels",
            "_pterm_exeval",
            "repr_string_to_modifier",
            "repr_multiline",
            "as_rgba_float_color",
            "_iterfzf",
            "format_parent_hierarchy",
            "columnify_strings",
            "color_name_to_float_color",
            "get_unique_copy_path",
            "format",
            "apply_suffix_to_name",
            "strip",
            "_parenthesizer_automator",
            "concat_mp4_files",
            "replace",
            "display_code_cell",
            "to_str",
            "pretty_print",
            "find_and_replace_text_files",
            "old_and_new_text",
            "number_to_words",
            "text_to_speech_via_google",
            "rinsp",
            "pretty_lines",
            "_display_downloadable_image_in_notebook_via_ipython"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        },
        "text_to_speech_via_google": {
          "function_name": "text_to_speech_via_google",
          "calls": [
            "_minimize",
            "save",
            "get",
            "print",
            "text_to_speech_via_google",
            "file_exists",
            "pip_import",
            "delete_file",
            "run_as_new_thread",
            "write_to_fp",
            "play_sound_from_samples",
            "strip",
            "format",
            "load_sound_file",
            "replace",
            "temporary_file_path",
            "_tokenize"
          ],
          "called_by": [
            "text_to_speech",
            "text_to_speech_via_google"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "_minimize",
            "save",
            "print",
            "file_exists",
            "pip_import",
            "delete_file",
            "write_to_fp",
            "play_sound_from_samples",
            "strip",
            "format",
            "load_sound_file",
            "text_to_speech",
            "replace",
            "temporary_file_path",
            "get",
            "text_to_speech_via_google",
            "run_as_new_thread",
            "_tokenize"
          ],
          "multiplexing": [],
          "is_via_variant": true,
          "is_private": false
        },
        "get_nvidia_smi": {
          "function_name": "get_nvidia_smi",
          "calls": [
            "get",
            "get_platform",
            "format"
          ],
          "called_by": [
            "_get_env_info",
            "get_gpu_info",
            "get_nvidia_driver_version"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "get",
            "get_platform",
            "format",
            "get_nvidia_smi",
            "get_nvidia_driver_version",
            "_get_env_info",
            "get_gpu_info"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        },
        "write_to_fp": {
          "function_name": "write_to_fp",
          "calls": [
            "get",
            "print",
            "format"
          ],
          "called_by": [
            "save",
            "text_to_speech_via_google"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "save",
            "get",
            "format",
            "print",
            "text_to_speech_via_google",
            "write_to_fp"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        },
        "download_url": {
          "function_name": "download_url",
          "calls": [
            "download_youtube_video",
            "get",
            "get_path_parent",
            "path_exists",
            "is_gs_url",
            "is_s3_url",
            "make_directory",
            "update",
            "system_command_exists",
            "is_valid_url",
            "pip_import",
            "_is_youtube_video_url",
            "format",
            "path_join"
          ],
          "called_by": [
            "_get_executable",
            "__enter__",
            "download_url_to_cache",
            "download_font",
            "download_urls",
            "load_animated_gif"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "__enter__",
            "download_url_to_cache",
            "is_gs_url",
            "is_s3_url",
            "update",
            "pip_import",
            "system_command_exists",
            "_is_youtube_video_url",
            "download_urls",
            "format",
            "_get_executable",
            "download_youtube_video",
            "get",
            "get_path_parent",
            "path_exists",
            "make_directory",
            "is_valid_url",
            "download_font",
            "load_animated_gif",
            "path_join",
            "download_url"
          ],
          "multiplexing": [
            "download_youtube_video",
            "download_youtube_video",
            "download_youtube_video",
            "download_youtube_video"
          ],
          "is_via_variant": false,
          "is_private": false
        },
        "get_windows_version": {
          "function_name": "get_windows_version",
          "calls": [
            "run_and_read_all",
            "get",
            "format"
          ],
          "called_by": [
            "_get_env_info",
            "get_os"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "run_and_read_all",
            "get",
            "format",
            "get_windows_version",
            "_get_env_info",
            "get_os"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        }
      },
      "documentation_status": {
        "format": {
          "current_quality": "missing",
          "current_docstring": "",
          "suggestions": [
            "Add comprehensive docstring with purpose, parameters, and examples"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "fansi": {
          "current_quality": "good",
          "current_docstring": "    'fansi' is a pun, referring to ANSI and fancy\n    Uses ANSI formatting to give the terminal styled color outputs.\n\n    The 'per_line' option applies fansi to each line separately, which is useful ...",
          "suggestions": [
            "Document function parameters and their types",
            "Document return value and type"
          ],
          "has_examples": true,
          "has_parameters": false,
          "has_return_info": false
        },
        "replace": {
          "current_quality": "missing",
          "current_docstring": "",
          "suggestions": [
            "Add comprehensive docstring with purpose, parameters, and examples"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "text_to_speech_via_google": {
          "current_quality": "missing",
          "current_docstring": "",
          "suggestions": [
            "Add comprehensive docstring with purpose, parameters, and examples"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "get_nvidia_smi": {
          "current_quality": "missing",
          "current_docstring": "",
          "suggestions": [
            "Add comprehensive docstring with purpose, parameters, and examples"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "write_to_fp": {
          "current_quality": "missing",
          "current_docstring": "",
          "suggestions": [
            "Add comprehensive docstring with purpose, parameters, and examples"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "download_url": {
          "current_quality": "basic",
          "current_docstring": "Works with both HTTP, Aws S3 and Google Cloud Storage urls, as well as /cns paths accessed via Google's internal fileutil\nDownload a file from a url and return the path it downloaded to. It no path is...",
          "suggestions": [
            "Add concrete usage examples with >>> syntax",
            "Document function parameters and their types",
            "Document return value and type"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "get_windows_version": {
          "current_quality": "missing",
          "current_docstring": "",
          "suggestions": [
            "Add comprehensive docstring with purpose, parameters, and examples"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        }
      },
      "work_instructions": [
        "For each function in this package:",
        "1. Read the existing docstring (if any) and understand the function's purpose",
        "2. Examine the function's implementation to understand its behavior",
        "3. Check related functions (in context) to understand how they work together",
        "4. ENHANCE (don't replace) the docstring following the template:",
        "   - Keep original docstring if it exists",
        "   - Add 'Enhanced Documentation:' section with usage patterns",
        "   - Include concrete examples with >>> syntax",
        "   - Document parameters and return values",
        "   - Note related functions and when to use vs alternatives",
        "   - Add relevant tags for searchability",
        "5. Test your examples to ensure they work",
        "6. Update the appropriate tag files in documentation/tags/",
        "7. SPECIAL: Document backend-specific behavior and when to use each _via_ variant",
        "7. SPECIAL: Document the multiplexing pattern - how the base function dispatches to specific implementations"
      ],
      "quality_checklist": [
        "\u2610 Each function has enhanced docstring with purpose clearly explained",
        "\u2610 All parameters are documented with types and descriptions",
        "\u2610 Return values are documented with types and descriptions",
        "\u2610 At least one concrete example with >>> syntax that actually runs",
        "\u2610 Related functions are mentioned with explanations",
        "\u2610 Usage patterns and common scenarios are described",
        "\u2610 Relevant tags added for searchability",
        "\u2610 Function added to appropriate tag files in documentation/tags/",
        "\u2610 Examples tested and confirmed working",
        "\u2610 Cross-references to multiplexing patterns or _via_ variants documented"
      ]
    },
    {
      "package_id": 4,
      "functions": [
        "detuple",
        "line_join",
        "get_video_widths",
        "make_directories",
        "get_video_heights",
        "save_pickled_value",
        "get_apriltag_images",
        "hex_colors_to_byte_colors"
      ],
      "total_functions": 8,
      "estimated_hours": 6.0,
      "priority_score": 1575,
      "context": {
        "detuple": {
          "function_name": "detuple",
          "calls": [],
          "called_by": [
            "qualify_imports",
            "download_urls_to_cache",
            "_detuple_paths",
            "set_cuda_visible_devices",
            "strip_file_extensions",
            "get_apriltag_images",
            "hex_colors_to_byte_colors",
            "_string_with_any",
            "hex_colors_to_float_colors",
            "get_paths_parents",
            "make_symlinks_relative",
            "set_mouse_position",
            "tmux_kill_sessions",
            "_crop_images_to_max_or_min_size",
            "resize_lists_to_max_len",
            "with_alpha_outlines",
            "horizontally_concatenated_strings",
            "resize_videos",
            "get_video_widths",
            "_contains_func_y",
            "download_urls",
            "make_directories",
            "get_min_image_dimensions",
            "byte_colors_to_float_colors",
            "accumulate_flows",
            "resize_videos_to_min_size",
            "trim_videos",
            "vertically_concatenated_images",
            "resize_videos_to_hold",
            "display_float_color",
            "float_color_to_ansi256",
            "resize_images_to_hold",
            "as_easydicts",
            "kill_processes",
            "_delete_paths_helper",
            "pop_gather",
            "with_file_extensions",
            "make_symlinks_absolute",
            "get_max_video_dimensions",
            "load_video_streams",
            "hsv_to_rgb_float_color",
            "download_fonts",
            "sync_shuffled",
            "save_pickled_value",
            "_trim_videos_to_same_length",
            "float_colors_to_hex_colors",
            "print_lines",
            "get_mask_iou",
            "display_color_255",
            "load_videos",
            "get_path_names",
            "median",
            "gather",
            "read_symlinks",
            "fansi_print_lines",
            "get_max_image_dimensions",
            "cv_resize_images",
            "resize_videos_to_max_size",
            "download_google_fonts",
            "vertically_concatenated_strings",
            "bordered_images_solid_color",
            "get_video_heights",
            "get_nested_value",
            "concat_mp4_files",
            "identity",
            "_concatenated_videos",
            "with_alpha_checkerboards",
            "broadcast_lists",
            "rotate_images",
            "float_colors_to_byte_colors",
            "repr_vars",
            "torch_resize_images",
            "with_image_glows",
            "with_corner_radii",
            "byte_colors_to_hex_colors",
            "resize_videos_to_fit",
            "get_min_video_dimensions",
            "resize_lists_to_min_len",
            "load_text_files",
            "pad_to_same_number_of_lines",
            "resize_images_to_fit",
            "mean",
            "resize_lists",
            "load_jsons",
            "line_join"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "float_colors_to_hex_colors",
            "qualify_imports",
            "print_lines",
            "get_mask_iou",
            "display_color_255",
            "load_videos",
            "get_path_names",
            "median",
            "download_urls_to_cache",
            "_detuple_paths",
            "gather",
            "set_cuda_visible_devices",
            "read_symlinks",
            "fansi_print_lines",
            "get_max_image_dimensions",
            "cv_resize_images",
            "resize_videos_to_max_size",
            "download_google_fonts",
            "vertically_concatenated_strings",
            "strip_file_extensions",
            "bordered_images_solid_color",
            "get_apriltag_images",
            "hex_colors_to_byte_colors",
            "get_video_heights",
            "_string_with_any",
            "hex_colors_to_float_colors",
            "get_nested_value",
            "get_paths_parents",
            "concat_mp4_files",
            "make_symlinks_relative",
            "set_mouse_position",
            "identity",
            "_concatenated_videos",
            "tmux_kill_sessions",
            "with_alpha_checkerboards",
            "_crop_images_to_max_or_min_size",
            "resize_lists_to_max_len",
            "broadcast_lists",
            "with_alpha_outlines",
            "horizontally_concatenated_strings",
            "rotate_images",
            "resize_videos",
            "float_colors_to_byte_colors",
            "get_video_widths",
            "_contains_func_y",
            "download_urls",
            "make_directories",
            "get_min_image_dimensions",
            "repr_vars",
            "byte_colors_to_float_colors",
            "accumulate_flows",
            "resize_videos_to_min_size",
            "trim_videos",
            "torch_resize_images",
            "vertically_concatenated_images",
            "resize_videos_to_hold",
            "display_float_color",
            "float_color_to_ansi256",
            "with_image_glows",
            "with_corner_radii",
            "byte_colors_to_hex_colors",
            "resize_videos_to_fit",
            "resize_images_to_hold",
            "as_easydicts",
            "kill_processes",
            "_delete_paths_helper",
            "detuple",
            "pop_gather",
            "with_file_extensions",
            "get_min_video_dimensions",
            "resize_lists_to_min_len",
            "make_symlinks_absolute",
            "load_text_files",
            "get_max_video_dimensions",
            "pad_to_same_number_of_lines",
            "load_video_streams",
            "resize_images_to_fit",
            "hsv_to_rgb_float_color",
            "download_fonts",
            "sync_shuffled",
            "mean",
            "resize_lists",
            "load_jsons",
            "line_join",
            "save_pickled_value",
            "_trim_videos_to_same_length"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        },
        "line_join": {
          "function_name": "line_join",
          "calls": [
            "detuple"
          ],
          "called_by": [
            "display_file_tree",
            "rinsp_search",
            "_dhistory_helper",
            "print_lines",
            "_get_all_english_words_lowercase",
            "_input_select_multiple_history",
            "parenthesizer_automator",
            "make_string_rectangular",
            "repr_vars",
            "mli",
            "wrap_string_to_width",
            "_rma",
            "input_select_path",
            "fansi_print_lines",
            "_fdt_for_command_line",
            "pseudo_terminal",
            "_write_default_gitignore",
            "validate_tensor_shapes",
            "gather_args_bind",
            "input_select",
            "indentify_all_but_first_line",
            "_clean_cd_history",
            "repr_kwargs_dict",
            "print_fix",
            "vim_copy",
            "_line_numbered_string",
            "vertically_concatenated_strings",
            "_display_filetype_size_histogram",
            "save_file_lines",
            "vim_paste",
            "remove_first_import_line",
            "task",
            "format_parent_hierarchy",
            "columnify_strings",
            "_input_select_multiple_history_multiline",
            "display_query_options",
            "wordcloud_image",
            "_inline_rp_code",
            "select_torch_device",
            "fansify",
            "_fd",
            "unindent",
            "find_and_replace_text_files",
            "_filter_dict_via_fzf",
            "_input_select_multiple_paragraphs",
            "bordered_string",
            "as_example_comment",
            "rinsp",
            "process_paragraph",
            "with_line_numbers",
            "print_history",
            "_add_to_cd_history",
            "input_multiline",
            "horizontally_concatenated_strings",
            "_import_module",
            "print_code",
            "_ISM",
            "_multi_line_python_input",
            "_legacy_fansi"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "display_file_tree",
            "rinsp_search",
            "_dhistory_helper",
            "print_lines",
            "_get_all_english_words_lowercase",
            "_input_select_multiple_history",
            "parenthesizer_automator",
            "make_string_rectangular",
            "repr_vars",
            "mli",
            "wrap_string_to_width",
            "_rma",
            "input_select_path",
            "fansi_print_lines",
            "_fdt_for_command_line",
            "pseudo_terminal",
            "_write_default_gitignore",
            "validate_tensor_shapes",
            "gather_args_bind",
            "input_select",
            "indentify_all_but_first_line",
            "_clean_cd_history",
            "repr_kwargs_dict",
            "print_fix",
            "vim_copy",
            "_line_numbered_string",
            "vertically_concatenated_strings",
            "detuple",
            "_display_filetype_size_histogram",
            "save_file_lines",
            "vim_paste",
            "remove_first_import_line",
            "task",
            "format_parent_hierarchy",
            "columnify_strings",
            "_input_select_multiple_history_multiline",
            "display_query_options",
            "wordcloud_image",
            "_inline_rp_code",
            "select_torch_device",
            "fansify",
            "_fd",
            "unindent",
            "find_and_replace_text_files",
            "_filter_dict_via_fzf",
            "_input_select_multiple_paragraphs",
            "bordered_string",
            "as_example_comment",
            "rinsp",
            "process_paragraph",
            "with_line_numbers",
            "print_history",
            "_add_to_cd_history",
            "input_multiline",
            "_import_module",
            "print_code",
            "horizontally_concatenated_strings",
            "line_join",
            "_ISM",
            "_multi_line_python_input",
            "_legacy_fansi"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        },
        "get_video_widths": {
          "function_name": "get_video_widths",
          "calls": [
            "detuple",
            "get_video_width"
          ],
          "called_by": [
            "resize_videos_to_min_size",
            "resize_videos_to_max_size"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "resize_videos_to_min_size",
            "detuple",
            "resize_videos_to_max_size",
            "get_video_widths",
            "get_video_width"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        },
        "make_directories": {
          "function_name": "make_directories",
          "calls": [
            "detuple",
            "make_directory"
          ],
          "called_by": [],
          "aliases": [
            "make_folders"
          ],
          "via_variants": [],
          "cluster": [
            "detuple",
            "make_directory",
            "make_folders",
            "make_directories"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        },
        "get_video_heights": {
          "function_name": "get_video_heights",
          "calls": [
            "detuple",
            "get_video_height"
          ],
          "called_by": [
            "resize_videos_to_min_size",
            "resize_videos_to_max_size"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "resize_videos_to_min_size",
            "detuple",
            "get_video_heights",
            "get_video_height",
            "resize_videos_to_max_size"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        },
        "save_pickled_value": {
          "function_name": "save_pickled_value",
          "calls": [
            "detuple"
          ],
          "called_by": [
            "_omni_save"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "detuple",
            "save_pickled_value",
            "_omni_save"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        },
        "get_apriltag_images": {
          "function_name": "get_apriltag_images",
          "calls": [
            "get_apriltag_image",
            "detuple"
          ],
          "called_by": [],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "get_apriltag_image",
            "detuple",
            "get_apriltag_images"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        },
        "hex_colors_to_byte_colors": {
          "function_name": "hex_colors_to_byte_colors",
          "calls": [
            "detuple",
            "hex_color_to_byte_color"
          ],
          "called_by": [],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "detuple",
            "hex_color_to_byte_color",
            "hex_colors_to_byte_colors"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        }
      },
      "documentation_status": {
        "detuple": {
          "current_quality": "good",
          "current_docstring": "For pesky petty things. Code is simpler than explanation here. \nPrimarily used for allowing functions to take either one iterable argument OR a vararg list of items\nUsed commonly throughout RP's libra...",
          "suggestions": [
            "Document function parameters and their types",
            "Document return value and type"
          ],
          "has_examples": true,
          "has_parameters": false,
          "has_return_info": false
        },
        "line_join": {
          "current_quality": "basic",
          "current_docstring": "EXAMPLE: line_join(['hello','world'])=='hello\nworld' ",
          "suggestions": [
            "Add concrete usage examples with >>> syntax",
            "Document function parameters and their types",
            "Document return value and type",
            "Expand description with more detail about purpose and behavior"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "get_video_widths": {
          "current_quality": "missing",
          "current_docstring": "",
          "suggestions": [
            "Add comprehensive docstring with purpose, parameters, and examples"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "make_directories": {
          "current_quality": "missing",
          "current_docstring": "",
          "suggestions": [
            "Add comprehensive docstring with purpose, parameters, and examples"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "get_video_heights": {
          "current_quality": "missing",
          "current_docstring": "",
          "suggestions": [
            "Add comprehensive docstring with purpose, parameters, and examples"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "save_pickled_value": {
          "current_quality": "missing",
          "current_docstring": "",
          "suggestions": [
            "Add comprehensive docstring with purpose, parameters, and examples"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "get_apriltag_images": {
          "current_quality": "missing",
          "current_docstring": "",
          "suggestions": [
            "Add comprehensive docstring with purpose, parameters, and examples"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "hex_colors_to_byte_colors": {
          "current_quality": "missing",
          "current_docstring": "",
          "suggestions": [
            "Add comprehensive docstring with purpose, parameters, and examples"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        }
      },
      "work_instructions": [
        "For each function in this package:",
        "1. Read the existing docstring (if any) and understand the function's purpose",
        "2. Examine the function's implementation to understand its behavior",
        "3. Check related functions (in context) to understand how they work together",
        "4. ENHANCE (don't replace) the docstring following the template:",
        "   - Keep original docstring if it exists",
        "   - Add 'Enhanced Documentation:' section with usage patterns",
        "   - Include concrete examples with >>> syntax",
        "   - Document parameters and return values",
        "   - Note related functions and when to use vs alternatives",
        "   - Add relevant tags for searchability",
        "5. Test your examples to ensure they work",
        "6. Update the appropriate tag files in documentation/tags/"
      ],
      "quality_checklist": [
        "\u2610 Each function has enhanced docstring with purpose clearly explained",
        "\u2610 All parameters are documented with types and descriptions",
        "\u2610 Return values are documented with types and descriptions",
        "\u2610 At least one concrete example with >>> syntax that actually runs",
        "\u2610 Related functions are mentioned with explanations",
        "\u2610 Usage patterns and common scenarios are described",
        "\u2610 Relevant tags added for searchability",
        "\u2610 Function added to appropriate tag files in documentation/tags/",
        "\u2610 Examples tested and confirmed working",
        "\u2610 Cross-references to multiplexing patterns or _via_ variants documented"
      ]
    },
    {
      "package_id": 7,
      "functions": [
        "file_exists",
        "path_exists",
        "text_file_to_string",
        "get_system_fonts",
        "append_line_to_file",
        "do_path",
        "_view_json_via_jtree",
        "pterm_pretty_print"
      ],
      "total_functions": 8,
      "estimated_hours": 6.0,
      "priority_score": 1565,
      "context": {
        "file_exists": {
          "function_name": "file_exists",
          "calls": [],
          "called_by": [
            "download_url_to_cache",
            "text_file_to_string",
            "is_utf8_file",
            "encode_video_to_bytes",
            "_display_video_in_notebook",
            "check_pip_requirements",
            "_paste_path_from_bundle",
            "display_markdown",
            "save_image_to_imgur",
            "display_video",
            "copy_file",
            "_run_ai_cli_coder",
            "path_exists",
            "pseudo_terminal",
            "_write_default_gitignore",
            "tmuxp_launch_session_from_yaml",
            "display_image_in_terminal_color",
            "_set_ryan_vimrc",
            "do_path",
            "_view_markdown_in_terminal",
            "zip_folder_to_bytes",
            "vim_copy",
            "copy_directory",
            "get_vim_python_executable",
            "_set_ryan_xonshrc",
            "_get_ryan_rprc_path",
            "load_safetensors",
            "delete_file",
            "load_image_from_file",
            "load_yaml_file",
            "_load_text_from_file_or_url",
            "pip_install_multiple",
            "decode_video_from_bytes",
            "_load_ryan_lazygit_config",
            "get_module_path_from_name",
            "view_table",
            "launch_visidata",
            "convert_image_file",
            "_nbca",
            "_load_video_stream",
            "_vimore",
            "_view_json_via_jtree",
            "_get_executable",
            "pterm_pretty_print",
            "text_to_speech_via_google",
            "append_line_to_file",
            "load_dyaml_file",
            "_guess_mimetype",
            "rinsp",
            "file_cache_call",
            "load_animated_gif",
            "_set_ryan_tmux_conf",
            "get_system_fonts",
            "get_image_file_dimensions",
            "download_youtube_video"
          ],
          "aliases": [
            "is_a_file"
          ],
          "via_variants": [],
          "cluster": [
            "download_url_to_cache",
            "file_exists",
            "text_file_to_string",
            "is_utf8_file",
            "encode_video_to_bytes",
            "_display_video_in_notebook",
            "check_pip_requirements",
            "_paste_path_from_bundle",
            "display_markdown",
            "save_image_to_imgur",
            "display_video",
            "copy_file",
            "_run_ai_cli_coder",
            "path_exists",
            "pseudo_terminal",
            "_write_default_gitignore",
            "tmuxp_launch_session_from_yaml",
            "display_image_in_terminal_color",
            "_set_ryan_vimrc",
            "do_path",
            "_view_markdown_in_terminal",
            "zip_folder_to_bytes",
            "vim_copy",
            "copy_directory",
            "get_vim_python_executable",
            "_set_ryan_xonshrc",
            "_get_ryan_rprc_path",
            "is_a_file",
            "load_safetensors",
            "delete_file",
            "load_image_from_file",
            "load_yaml_file",
            "_load_text_from_file_or_url",
            "pip_install_multiple",
            "decode_video_from_bytes",
            "_load_ryan_lazygit_config",
            "get_module_path_from_name",
            "view_table",
            "launch_visidata",
            "convert_image_file",
            "_nbca",
            "_load_video_stream",
            "_vimore",
            "_view_json_via_jtree",
            "_get_executable",
            "pterm_pretty_print",
            "text_to_speech_via_google",
            "append_line_to_file",
            "load_dyaml_file",
            "_guess_mimetype",
            "rinsp",
            "file_cache_call",
            "load_animated_gif",
            "_set_ryan_tmux_conf",
            "get_system_fonts",
            "get_image_file_dimensions",
            "download_youtube_video"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        },
        "path_exists": {
          "function_name": "path_exists",
          "calls": [
            "file_exists",
            "directory_exists"
          ],
          "called_by": [
            "load_video",
            "make_symlink",
            "save_images",
            "push",
            "_autocomplete_lss_name",
            "_rma",
            "pseudo_terminal",
            "curl_bytes",
            "symlink_is_broken",
            "_clean_cd_history",
            "zip_folder_to_bytes",
            "_extract_code_cells_from_ipynb",
            "download_url",
            "copy_directory",
            "copy_paths",
            "copy_path",
            "get_unique_copy_path",
            "make_hardlink",
            "_save_image",
            "do_copy",
            "symlink_move",
            "convert_to_gif_via_ffmpeg",
            "_all_files_listed_in_exception_traceback",
            "_copy_path_to_bundle",
            "load_image",
            "process_line",
            "rinsp",
            "download_youtube_video"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "load_video",
            "copy_paths",
            "file_exists",
            "make_symlink",
            "copy_path",
            "save_images",
            "get_unique_copy_path",
            "push",
            "make_hardlink",
            "_save_image",
            "directory_exists",
            "_autocomplete_lss_name",
            "do_copy",
            "symlink_move",
            "_rma",
            "convert_to_gif_via_ffmpeg",
            "path_exists",
            "pseudo_terminal",
            "_all_files_listed_in_exception_traceback",
            "_copy_path_to_bundle",
            "load_image",
            "curl_bytes",
            "process_line",
            "symlink_is_broken",
            "rinsp",
            "_clean_cd_history",
            "zip_folder_to_bytes",
            "download_youtube_video",
            "_extract_code_cells_from_ipynb",
            "download_url",
            "copy_directory"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        },
        "text_file_to_string": {
          "function_name": "text_file_to_string",
          "calls": [
            "read",
            "get_absolute_path",
            "curl",
            "file_exists",
            "text_file_to_string",
            "is_valid_url",
            "date_modified"
          ],
          "called_by": [
            "get_all_english_words",
            "text_file_to_string",
            "_input_select_multiple_history",
            "python_2_to_3",
            "_get_pyin_settings",
            "_fzf_multi_grep",
            "_set_ryan_rprc",
            "load_json",
            "pseudo_terminal",
            "_set_ryan_vimrc",
            "_input_select_rp_gists",
            "vim_copy",
            "_get_cd_history",
            "_set_ryan_xonshrc",
            "vim_paste",
            "_get_ryan_rprc_path",
            "load_yaml_file",
            "_get_prompt_style",
            "_load_text_from_file_or_url",
            "pip_install_multiple",
            "load_text",
            "_input_select_multiple_history_multiline",
            "load_text_files",
            "load_file_lines",
            "vim_string_diff",
            "find_and_replace_text_files",
            "old_and_new_text",
            "load_dyaml_file",
            "_get_local_clipboard_string",
            "_get_object_lineno"
          ],
          "aliases": [
            "load_text_file"
          ],
          "via_variants": [],
          "cluster": [
            "get_all_english_words",
            "text_file_to_string",
            "file_exists",
            "_input_select_multiple_history",
            "python_2_to_3",
            "_get_pyin_settings",
            "_fzf_multi_grep",
            "_set_ryan_rprc",
            "load_json",
            "pseudo_terminal",
            "load_text_file",
            "_set_ryan_vimrc",
            "_input_select_rp_gists",
            "vim_copy",
            "_get_cd_history",
            "_set_ryan_xonshrc",
            "vim_paste",
            "_get_ryan_rprc_path",
            "load_yaml_file",
            "_get_prompt_style",
            "_load_text_from_file_or_url",
            "pip_install_multiple",
            "load_text",
            "_input_select_multiple_history_multiline",
            "load_text_files",
            "date_modified",
            "load_file_lines",
            "vim_string_diff",
            "read",
            "find_and_replace_text_files",
            "old_and_new_text",
            "curl",
            "get_absolute_path",
            "load_dyaml_file",
            "is_valid_url",
            "_get_local_clipboard_string",
            "_get_object_lineno"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        },
        "get_system_fonts": {
          "function_name": "get_system_fonts",
          "calls": [
            "currently_running_mac",
            "file_exists",
            "_get_all_paths_fast",
            "line_split",
            "currently_running_windows",
            "currently_running_linux",
            "shell_command"
          ],
          "called_by": [
            "_get_font_path"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "currently_running_mac",
            "file_exists",
            "_get_all_paths_fast",
            "line_split",
            "currently_running_windows",
            "get_system_fonts",
            "currently_running_linux",
            "shell_command",
            "_get_font_path"
          ],
          "multiplexing": [
            "list",
            "any",
            "list",
            "list",
            "list",
            "list"
          ],
          "is_via_variant": false,
          "is_private": false
        },
        "append_line_to_file": {
          "function_name": "append_line_to_file",
          "calls": [
            "file_exists",
            "string_to_text_file"
          ],
          "called_by": [
            "_write_default_gitignore",
            "_load_ryan_lazygit_config",
            "_set_ryan_ranger_config",
            "pseudo_terminal"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "_load_ryan_lazygit_config",
            "_set_ryan_ranger_config",
            "pseudo_terminal",
            "file_exists",
            "_write_default_gitignore",
            "append_line_to_file",
            "string_to_text_file"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        },
        "do_path": {
          "function_name": "do_path",
          "calls": [
            "file_exists",
            "fansi",
            "clear_jupyter_notebook_outputs",
            "print"
          ],
          "called_by": [
            "_nbca"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "fansi",
            "do_path",
            "clear_jupyter_notebook_outputs",
            "print",
            "_nbca",
            "file_exists"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        },
        "_view_json_via_jtree": {
          "function_name": "_view_json_via_jtree",
          "calls": [
            "file_exists",
            "pip_import",
            "delete_file",
            "save_json",
            "run",
            "temporary_file_path",
            "_view_json_via_jtree"
          ],
          "called_by": [
            "_view_interactive_json",
            "_view_json_via_jtree"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "_view_interactive_json",
            "file_exists",
            "delete_file",
            "pip_import",
            "save_json",
            "run",
            "temporary_file_path",
            "_view_json_via_jtree"
          ],
          "multiplexing": [],
          "is_via_variant": true,
          "is_private": true
        },
        "pterm_pretty_print": {
          "function_name": "pterm_pretty_print",
          "calls": [
            "display_image_in_notebook",
            "get_file_extension",
            "print",
            "is_valid_python_syntax",
            "file_exists",
            "load_image",
            "_display_pterm_image",
            "is_valid_url",
            "_maybe_display_string_in_pager",
            "display_image_in_terminal_color",
            "is_image",
            "display_website_in_terminal",
            "is_image_file",
            "fansi_syntax_highlighting",
            "pretty_print"
          ],
          "called_by": [
            "pseudo_terminal"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "get_file_extension",
            "print",
            "file_exists",
            "is_image",
            "display_website_in_terminal",
            "pretty_print",
            "display_image_in_notebook",
            "pterm_pretty_print",
            "pseudo_terminal",
            "is_valid_python_syntax",
            "load_image",
            "_display_pterm_image",
            "is_valid_url",
            "_maybe_display_string_in_pager",
            "display_image_in_terminal_color",
            "is_image_file",
            "fansi_syntax_highlighting"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        }
      },
      "documentation_status": {
        "file_exists": {
          "current_quality": "missing",
          "current_docstring": "",
          "suggestions": [
            "Add comprehensive docstring with purpose, parameters, and examples"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "path_exists": {
          "current_quality": "missing",
          "current_docstring": "",
          "suggestions": [
            "Add comprehensive docstring with purpose, parameters, and examples"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "text_file_to_string": {
          "current_quality": "basic",
          "current_docstring": "text_file_to_string(file_path) reads text file",
          "suggestions": [
            "Add concrete usage examples with >>> syntax",
            "Document function parameters and their types",
            "Document return value and type",
            "Expand description with more detail about purpose and behavior"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "get_system_fonts": {
          "current_quality": "missing",
          "current_docstring": "",
          "suggestions": [
            "Add comprehensive docstring with purpose, parameters, and examples"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "append_line_to_file": {
          "current_quality": "missing",
          "current_docstring": "",
          "suggestions": [
            "Add comprehensive docstring with purpose, parameters, and examples"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "do_path": {
          "current_quality": "missing",
          "current_docstring": "",
          "suggestions": [
            "Add comprehensive docstring with purpose, parameters, and examples"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "_view_json_via_jtree": {
          "current_quality": "missing",
          "current_docstring": "",
          "suggestions": [
            "Add comprehensive docstring with purpose, parameters, and examples"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "pterm_pretty_print": {
          "current_quality": "missing",
          "current_docstring": "",
          "suggestions": [
            "Add comprehensive docstring with purpose, parameters, and examples"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        }
      },
      "work_instructions": [
        "For each function in this package:",
        "1. Read the existing docstring (if any) and understand the function's purpose",
        "2. Examine the function's implementation to understand its behavior",
        "3. Check related functions (in context) to understand how they work together",
        "4. ENHANCE (don't replace) the docstring following the template:",
        "   - Keep original docstring if it exists",
        "   - Add 'Enhanced Documentation:' section with usage patterns",
        "   - Include concrete examples with >>> syntax",
        "   - Document parameters and return values",
        "   - Note related functions and when to use vs alternatives",
        "   - Add relevant tags for searchability",
        "5. Test your examples to ensure they work",
        "6. Update the appropriate tag files in documentation/tags/",
        "7. SPECIAL: Document backend-specific behavior and when to use each _via_ variant",
        "7. SPECIAL: Document the multiplexing pattern - how the base function dispatches to specific implementations"
      ],
      "quality_checklist": [
        "\u2610 Each function has enhanced docstring with purpose clearly explained",
        "\u2610 All parameters are documented with types and descriptions",
        "\u2610 Return values are documented with types and descriptions",
        "\u2610 At least one concrete example with >>> syntax that actually runs",
        "\u2610 Related functions are mentioned with explanations",
        "\u2610 Usage patterns and common scenarios are described",
        "\u2610 Relevant tags added for searchability",
        "\u2610 Function added to appropriate tag files in documentation/tags/",
        "\u2610 Examples tested and confirmed working",
        "\u2610 Cross-references to multiplexing patterns or _via_ variants documented"
      ]
    },
    {
      "package_id": 14,
      "functions": [
        "as_numpy_array",
        "is_grayscale_image",
        "is_rgba_image",
        "is_rgb_image",
        "is_float_color",
        "is_byte_color",
        "_images_conversion",
        "decode_images_from_bytes"
      ],
      "total_functions": 8,
      "estimated_hours": 6.0,
      "priority_score": 1390,
      "context": {
        "as_numpy_array": {
          "function_name": "as_numpy_array",
          "calls": [
            "as_numpy_array"
          ],
          "called_by": [
            "resize_videos",
            "as_torch_images",
            "_load_image_from_file_via_PIL",
            "get_mask_iou",
            "is_rgba_image",
            "is_rgb_image",
            "is_image",
            "is_byte_color",
            "decode_images_from_bytes",
            "slowmo_video_via_rife",
            "graham_scan",
            "apply_uv_map",
            "crop_images_to_square",
            "accumulate_flows",
            "_rgba_image_to_rgba_image",
            "_rgb_to_grayscale",
            "_grayscale_image_to_grayscale_image",
            "cv_resize_images",
            "is_grayscale_image",
            "_cv_save_video_mp4",
            "as_numpy_image",
            "run_cotracker",
            "delaunay_interpolation_weights",
            "load_image_from_screenshot_via_mss",
            "_rgba_image_to_rgb_image",
            "squared_euclidean_distance",
            "is_float_color",
            "_images_conversion",
            "as_numpy_video",
            "_rgb_image_to_rgb_image",
            "resize_video_to_fit",
            "as_numpy_videos",
            "optical_flow_to_image",
            "tiled_videos",
            "least_squares_regression_line_coeffs",
            "histogram_in_terminal",
            "as_numpy_images",
            "_tensorify",
            "save_video_avi",
            "is_binary_color",
            "load_animated_gif",
            "with_alpha_checkerboards",
            "as_numpy_array",
            "resize_lists",
            "resize_video_to_hold",
            "inverted_images",
            "run_depth_pro",
            "_trim_videos_to_same_length",
            "uniform_float_color_image"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "resize_videos",
            "as_torch_images",
            "_load_image_from_file_via_PIL",
            "get_mask_iou",
            "is_rgba_image",
            "is_rgb_image",
            "is_image",
            "is_byte_color",
            "decode_images_from_bytes",
            "slowmo_video_via_rife",
            "graham_scan",
            "apply_uv_map",
            "crop_images_to_square",
            "accumulate_flows",
            "_rgba_image_to_rgba_image",
            "_rgb_to_grayscale",
            "_grayscale_image_to_grayscale_image",
            "cv_resize_images",
            "is_grayscale_image",
            "_cv_save_video_mp4",
            "as_numpy_image",
            "run_cotracker",
            "delaunay_interpolation_weights",
            "load_image_from_screenshot_via_mss",
            "_rgba_image_to_rgb_image",
            "squared_euclidean_distance",
            "is_float_color",
            "_images_conversion",
            "_rgb_image_to_rgb_image",
            "resize_video_to_fit",
            "as_numpy_videos",
            "optical_flow_to_image",
            "tiled_videos",
            "least_squares_regression_line_coeffs",
            "histogram_in_terminal",
            "as_numpy_images",
            "_tensorify",
            "_trim_videos_to_same_length",
            "save_video_avi",
            "is_binary_color",
            "load_animated_gif",
            "as_numpy_array",
            "with_alpha_checkerboards",
            "resize_lists",
            "resize_video_to_hold",
            "inverted_images",
            "run_depth_pro",
            "as_numpy_video",
            "uniform_float_color_image"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        },
        "is_grayscale_image": {
          "function_name": "is_grayscale_image",
          "calls": [
            "as_numpy_array"
          ],
          "called_by": [
            "as_rgba_image",
            "is_image",
            "cv_equalize_histogram",
            "apply_uv_map",
            "byte_image_histogram",
            "save_image_webp",
            "crop_image",
            "preprocess_frame",
            "encode_float_matrix_to_rgba_byte_image",
            "is_opaque_image",
            "get_image_blue",
            "_with_image_channel",
            "save_image_avif",
            "get_image_green",
            "_binary_floyd_steinburg_dithering",
            "_rotate_rgb_image",
            "get_optical_flow_via_pyflow",
            "compose_rgba_image",
            "save_openexr_image",
            "as_rgb_image",
            "apply_image_function_per_channel",
            "save_image_jxl",
            "compose_rgb_image",
            "get_apriltag_image",
            "as_pil_image",
            "get_image_red",
            "cv_floodfill_mask",
            "sobel_edges",
            "crop_image_zeros",
            "as_grayscale_image",
            "remove_duplicate_frames",
            "uniform_float_color_image"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "as_rgba_image",
            "is_image",
            "cv_equalize_histogram",
            "apply_uv_map",
            "byte_image_histogram",
            "save_image_webp",
            "crop_image",
            "is_grayscale_image",
            "preprocess_frame",
            "encode_float_matrix_to_rgba_byte_image",
            "is_opaque_image",
            "get_image_blue",
            "_with_image_channel",
            "save_image_avif",
            "get_image_green",
            "_binary_floyd_steinburg_dithering",
            "_rotate_rgb_image",
            "get_optical_flow_via_pyflow",
            "compose_rgba_image",
            "save_openexr_image",
            "as_rgb_image",
            "apply_image_function_per_channel",
            "save_image_jxl",
            "compose_rgb_image",
            "get_apriltag_image",
            "as_pil_image",
            "get_image_red",
            "cv_floodfill_mask",
            "sobel_edges",
            "crop_image_zeros",
            "as_numpy_array",
            "as_grayscale_image",
            "remove_duplicate_frames",
            "uniform_float_color_image"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        },
        "is_rgba_image": {
          "function_name": "is_rgba_image",
          "calls": [
            "as_numpy_array"
          ],
          "called_by": [
            "as_rgba_image",
            "is_image",
            "with_image_saturation",
            "cv_equalize_histogram",
            "crop_image",
            "extract_image_channels",
            "is_opaque_image",
            "_rotate_rgb_image",
            "inverted_image",
            "as_rgb_image",
            "with_image_brightness",
            "decode_float_matrix_from_rgba_byte_image",
            "cv_inpaint_image",
            "encode_image_to_bytes",
            "with_image_hue",
            "crop_image_zeros",
            "as_grayscale_image",
            "rgb_to_hsv",
            "hsv_to_rgb",
            "uniform_float_color_image"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "inverted_image",
            "is_rgba_image",
            "as_rgba_image",
            "as_rgb_image",
            "with_image_brightness",
            "is_image",
            "with_image_saturation",
            "cv_equalize_histogram",
            "decode_float_matrix_from_rgba_byte_image",
            "cv_inpaint_image",
            "encode_image_to_bytes",
            "crop_image",
            "extract_image_channels",
            "with_image_hue",
            "crop_image_zeros",
            "as_numpy_array",
            "is_opaque_image",
            "as_grayscale_image",
            "rgb_to_hsv",
            "hsv_to_rgb",
            "uniform_float_color_image",
            "_rotate_rgb_image"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        },
        "is_rgb_image": {
          "function_name": "is_rgb_image",
          "calls": [
            "as_numpy_array"
          ],
          "called_by": [
            "get_rgb_byte_color_identity_mapping_image",
            "as_rgb_image",
            "as_rgba_image",
            "crop_image",
            "extract_image_channels",
            "cv_draw_arrow",
            "is_image",
            "_encode_image_to_bytes",
            "crop_image_zeros",
            "as_grayscale_image",
            "is_opaque_image",
            "cv_equalize_histogram",
            "cv_inpaint_image",
            "uniform_float_color_image",
            "_rotate_rgb_image"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "get_rgb_byte_color_identity_mapping_image",
            "as_rgb_image",
            "as_rgba_image",
            "is_rgb_image",
            "cv_draw_arrow",
            "is_image",
            "cv_equalize_histogram",
            "cv_inpaint_image",
            "crop_image",
            "extract_image_channels",
            "_encode_image_to_bytes",
            "crop_image_zeros",
            "as_numpy_array",
            "as_grayscale_image",
            "is_opaque_image",
            "uniform_float_color_image",
            "_rotate_rgb_image"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        },
        "is_float_color": {
          "function_name": "is_float_color",
          "calls": [
            "is_iterable",
            "as_numpy_array",
            "is_number"
          ],
          "called_by": [
            "inverted_color",
            "get_color_saturation",
            "blend_images",
            "get_color_hue",
            "get_color_brightness"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "is_iterable",
            "inverted_color",
            "is_float_color",
            "as_numpy_array",
            "get_color_saturation",
            "is_number",
            "blend_images",
            "get_color_hue",
            "get_color_brightness"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        },
        "is_byte_color": {
          "function_name": "is_byte_color",
          "calls": [
            "is_iterable",
            "as_numpy_array",
            "is_number"
          ],
          "called_by": [
            "byte_color_to_hex_color",
            "inverted_color"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "is_iterable",
            "byte_color_to_hex_color",
            "is_byte_color",
            "as_numpy_array",
            "is_number",
            "inverted_color"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        },
        "_images_conversion": {
          "function_name": "_images_conversion",
          "calls": [
            "mean",
            "as_numpy_array",
            "as_numpy_image"
          ],
          "called_by": [
            "as_byte_images",
            "as_grayscale_images",
            "as_binary_images",
            "as_rgb_images",
            "as_rgba_images",
            "as_float_images"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "as_byte_images",
            "as_grayscale_images",
            "as_numpy_image",
            "_images_conversion",
            "as_binary_images",
            "mean",
            "as_rgb_images",
            "as_numpy_array",
            "as_rgba_images",
            "as_float_images"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": true
        },
        "decode_images_from_bytes": {
          "function_name": "decode_images_from_bytes",
          "calls": [
            "bytes_to_object",
            "as_numpy_array"
          ],
          "called_by": [
            "decode_images_from_base64"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "bytes_to_object",
            "as_numpy_array",
            "decode_images_from_bytes",
            "decode_images_from_base64"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        }
      },
      "documentation_status": {
        "as_numpy_array": {
          "current_quality": "basic",
          "current_docstring": "Will convert x into type np.ndarray\nThis should convert anything that can be converted into a numpy array\nShould work for torch tensors, python lists of numbers, etc.\nIn particular, this works even if...",
          "suggestions": [
            "Add concrete usage examples with >>> syntax",
            "Document function parameters and their types",
            "Document return value and type"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "is_grayscale_image": {
          "current_quality": "basic",
          "current_docstring": "Check if image is grayscale (2D array with shape HW).\n\nReturns True for 2-dimensional numpy arrays or convertible inputs.\nReturns False for color images, torch tensors, or invalid inputs.\nSee also: is...",
          "suggestions": [
            "Add concrete usage examples with >>> syntax",
            "Document return value and type"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "is_rgba_image": {
          "current_quality": "basic",
          "current_docstring": "Check if image is RGBA (3D array with shape HW4).\n\nReturns True for arrays with exactly 4 channels (RGB + alpha).\nReturns False for grayscale, RGB, torch tensors, or invalid inputs.\nSee also: is_rgb_i...",
          "suggestions": [
            "Add concrete usage examples with >>> syntax",
            "Document return value and type"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "is_rgb_image": {
          "current_quality": "basic",
          "current_docstring": "Check if image is RGB (3D array with shape HW3).\n\nReturns True for arrays with exactly 3 color channels.\nReturns False for grayscale, RGBA, torch tensors, or invalid inputs.\nSee also: is_grayscale_ima...",
          "suggestions": [
            "Add concrete usage examples with >>> syntax",
            "Document return value and type"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "is_float_color": {
          "current_quality": "missing",
          "current_docstring": "",
          "suggestions": [
            "Add comprehensive docstring with purpose, parameters, and examples"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "is_byte_color": {
          "current_quality": "missing",
          "current_docstring": "",
          "suggestions": [
            "Add comprehensive docstring with purpose, parameters, and examples"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "_images_conversion": {
          "current_quality": "missing",
          "current_docstring": "",
          "suggestions": [
            "Add comprehensive docstring with purpose, parameters, and examples"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "decode_images_from_bytes": {
          "current_quality": "missing",
          "current_docstring": "",
          "suggestions": [
            "Add comprehensive docstring with purpose, parameters, and examples"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        }
      },
      "work_instructions": [
        "For each function in this package:",
        "1. Read the existing docstring (if any) and understand the function's purpose",
        "2. Examine the function's implementation to understand its behavior",
        "3. Check related functions (in context) to understand how they work together",
        "4. ENHANCE (don't replace) the docstring following the template:",
        "   - Keep original docstring if it exists",
        "   - Add 'Enhanced Documentation:' section with usage patterns",
        "   - Include concrete examples with >>> syntax",
        "   - Document parameters and return values",
        "   - Note related functions and when to use vs alternatives",
        "   - Add relevant tags for searchability",
        "5. Test your examples to ensure they work",
        "6. Update the appropriate tag files in documentation/tags/"
      ],
      "quality_checklist": [
        "\u2610 Each function has enhanced docstring with purpose clearly explained",
        "\u2610 All parameters are documented with types and descriptions",
        "\u2610 Return values are documented with types and descriptions",
        "\u2610 At least one concrete example with >>> syntax that actually runs",
        "\u2610 Related functions are mentioned with explanations",
        "\u2610 Usage patterns and common scenarios are described",
        "\u2610 Relevant tags added for searchability",
        "\u2610 Function added to appropriate tag files in documentation/tags/",
        "\u2610 Examples tested and confirmed working",
        "\u2610 Cross-references to multiplexing patterns or _via_ variants documented"
      ]
    },
    {
      "package_id": 6,
      "functions": [
        "strip",
        "get_all_paths",
        "get_all_function_names",
        "get_stats_string",
        "display_file_tree",
        "number_of_leading_spaces",
        "get_default_iface_name_linux",
        "columnify_strings"
      ],
      "total_functions": 8,
      "estimated_hours": 6.0,
      "priority_score": 1370,
      "context": {
        "strip": {
          "function_name": "strip",
          "calls": [
            "strip",
            "replace"
          ],
          "called_by": [
            "get_my_mac_address",
            "display_file_tree",
            "killport",
            "replace_if_none",
            "_dhistory_helper",
            "fix_package",
            "_get_cdh_back_names",
            "number_of_leading_spaces",
            "_get_processor_name",
            "_display_video_in_notebook",
            "destructure",
            "fansi_pygments_demo",
            "load_tsv",
            "get_all_function_names",
            "words_to_number",
            "_autocomplete_lss_name",
            "get_default_iface_name_linux",
            "pseudo_terminal",
            "_write_default_gitignore",
            "properties_to_xml",
            "validate_tensor_shapes",
            "get_git_branch",
            "get_stats_string",
            "add_ipython_kernel",
            "_pterm_fuzzy_cd",
            "_view_markdown_in_terminal",
            "_extract_code_cells_from_ipynb",
            "get_vim_python_executable",
            "vim_paste",
            "bundle_vars",
            "__str__",
            "as_rgba_float_color",
            "delete_empty_lines",
            "pip_install_multiple",
            "columnify_strings",
            "color_name_to_float_color",
            "strip",
            "_load_ryan_lazygit_config",
            "select_torch_device",
            "parse",
            "concat_mp4_files",
            "rp_iglob",
            "format_signature",
            "unindent",
            "get_my_public_ip_address",
            "get_all_paths",
            "text_to_speech_via_google",
            "get_lines",
            "_parse_exeval_code",
            "select_git_commit",
            "_get_env_info",
            "get_star_modules",
            "as_example_comment",
            "rinsp",
            "get_git_date_modified",
            "print_history",
            "is_valid_line",
            "get_arxiv_bibtex",
            "_get_repo_name_from_url",
            "_run_tmux_command"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "get_my_mac_address",
            "display_file_tree",
            "killport",
            "replace_if_none",
            "_dhistory_helper",
            "fix_package",
            "_get_cdh_back_names",
            "number_of_leading_spaces",
            "_get_processor_name",
            "_display_video_in_notebook",
            "destructure",
            "fansi_pygments_demo",
            "load_tsv",
            "get_all_function_names",
            "words_to_number",
            "_autocomplete_lss_name",
            "get_default_iface_name_linux",
            "pseudo_terminal",
            "_write_default_gitignore",
            "properties_to_xml",
            "validate_tensor_shapes",
            "get_git_branch",
            "get_stats_string",
            "add_ipython_kernel",
            "_pterm_fuzzy_cd",
            "_view_markdown_in_terminal",
            "_extract_code_cells_from_ipynb",
            "get_vim_python_executable",
            "vim_paste",
            "bundle_vars",
            "__str__",
            "as_rgba_float_color",
            "delete_empty_lines",
            "pip_install_multiple",
            "columnify_strings",
            "color_name_to_float_color",
            "strip",
            "_load_ryan_lazygit_config",
            "select_torch_device",
            "parse",
            "concat_mp4_files",
            "replace",
            "rp_iglob",
            "format_signature",
            "unindent",
            "get_my_public_ip_address",
            "get_all_paths",
            "text_to_speech_via_google",
            "get_lines",
            "_parse_exeval_code",
            "select_git_commit",
            "_get_env_info",
            "get_star_modules",
            "as_example_comment",
            "rinsp",
            "get_git_date_modified",
            "print_history",
            "is_valid_line",
            "get_arxiv_bibtex",
            "_get_repo_name_from_url",
            "_run_tmux_command"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        },
        "get_all_paths": {
          "function_name": "get_all_paths",
          "calls": [
            "get_current_directory",
            "add",
            "get_file_extension",
            "is_hidden",
            "get_absolute_path",
            "is_symbolic_link",
            "recursion_helper",
            "strip",
            "directory_exists",
            "get_relative_path"
          ],
          "called_by": [
            "display_file_tree",
            "_display_filetype_size_histogram",
            "input_select_path",
            "delete_all_paths_in_directory",
            "pseudo_terminal",
            "get_all_files",
            "get_stats_string",
            "get_subfolders",
            "_maybe_unbury_folder",
            "get_all_image_files",
            "display_image_slideshow",
            "get_all_folders",
            "_paste_path_from_bundle",
            "is_empty_folder"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "display_file_tree",
            "add",
            "get_file_extension",
            "_display_filetype_size_histogram",
            "recursion_helper",
            "get_subfolders",
            "strip",
            "_paste_path_from_bundle",
            "directory_exists",
            "get_relative_path",
            "get_current_directory",
            "get_all_paths",
            "is_hidden",
            "input_select_path",
            "delete_all_paths_in_directory",
            "pseudo_terminal",
            "get_absolute_path",
            "is_symbolic_link",
            "get_all_files",
            "get_stats_string",
            "_maybe_unbury_folder",
            "get_all_image_files",
            "display_image_slideshow",
            "get_all_folders",
            "is_empty_folder"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        },
        "get_all_function_names": {
          "function_name": "get_all_function_names",
          "calls": [
            "lrstrip_all_lines",
            "strip",
            "line_split"
          ],
          "called_by": [
            "_dhistory_helper",
            "_get_function_name"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "strip",
            "_dhistory_helper",
            "get_all_function_names",
            "lrstrip_all_lines",
            "line_split",
            "_get_function_name"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        },
        "get_stats_string": {
          "function_name": "get_stats_string",
          "calls": [
            "get_file_extension",
            "get_all_paths",
            "shuffled",
            "is_hidden_file",
            "is_symbolic_link",
            "is_utf8_file",
            "number_of_lines_in_file",
            "fansi",
            "strip",
            "get_file_size",
            "get_image_file_dimensions"
          ],
          "called_by": [
            "display_file_tree",
            "walk"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "display_file_tree",
            "get_file_extension",
            "get_all_paths",
            "shuffled",
            "is_hidden_file",
            "get_stats_string",
            "is_symbolic_link",
            "is_utf8_file",
            "number_of_lines_in_file",
            "fansi",
            "strip",
            "get_file_size",
            "get_image_file_dimensions",
            "walk"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        },
        "display_file_tree": {
          "function_name": "display_file_tree",
          "calls": [
            "get_file_extension",
            "register",
            "print_line",
            "is_utf8_file",
            "highlight_child",
            "number_of_lines_in_file",
            "is_symbolic_link",
            "get_stats_string",
            "_maybe_display_string_in_pager",
            "get_file_size",
            "shuffled",
            "print",
            "fansi",
            "strip",
            "summary",
            "get_all_paths",
            "is_hidden_file",
            "get_image_file_dimensions",
            "path_join",
            "line_join",
            "walk"
          ],
          "called_by": [
            "pseudo_terminal"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "display_file_tree",
            "get_file_extension",
            "register",
            "shuffled",
            "print",
            "print_line",
            "is_utf8_file",
            "highlight_child",
            "number_of_lines_in_file",
            "fansi",
            "strip",
            "summary",
            "get_all_paths",
            "is_hidden_file",
            "pseudo_terminal",
            "is_symbolic_link",
            "get_stats_string",
            "_maybe_display_string_in_pager",
            "get_file_size",
            "get_image_file_dimensions",
            "path_join",
            "line_join",
            "walk"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        },
        "number_of_leading_spaces": {
          "function_name": "number_of_leading_spaces",
          "calls": [
            "strip"
          ],
          "called_by": [
            "pseudo_terminal"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "strip",
            "number_of_leading_spaces",
            "pseudo_terminal"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        },
        "get_default_iface_name_linux": {
          "function_name": "get_default_iface_name_linux",
          "calls": [
            "strip"
          ],
          "called_by": [
            "get_my_mac_address"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "get_my_mac_address",
            "strip",
            "get_default_iface_name_linux"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        },
        "columnify_strings": {
          "function_name": "columnify_strings",
          "calls": [
            "line_join",
            "strip",
            "replace",
            "horizontally_concatenated_strings"
          ],
          "called_by": [
            "pseudo_terminal"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "strip",
            "pseudo_terminal",
            "line_join",
            "replace",
            "horizontally_concatenated_strings",
            "columnify_strings"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        }
      },
      "documentation_status": {
        "strip": {
          "current_quality": "missing",
          "current_docstring": "",
          "suggestions": [
            "Add comprehensive docstring with purpose, parameters, and examples"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "get_all_paths": {
          "current_quality": "missing",
          "current_docstring": "",
          "suggestions": [
            "Add comprehensive docstring with purpose, parameters, and examples"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "get_all_function_names": {
          "current_quality": "missing",
          "current_docstring": "",
          "suggestions": [
            "Add comprehensive docstring with purpose, parameters, and examples"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "get_stats_string": {
          "current_quality": "missing",
          "current_docstring": "",
          "suggestions": [
            "Add comprehensive docstring with purpose, parameters, and examples"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "display_file_tree": {
          "current_quality": "missing",
          "current_docstring": "",
          "suggestions": [
            "Add comprehensive docstring with purpose, parameters, and examples"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "number_of_leading_spaces": {
          "current_quality": "missing",
          "current_docstring": "",
          "suggestions": [
            "Add comprehensive docstring with purpose, parameters, and examples"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "get_default_iface_name_linux": {
          "current_quality": "missing",
          "current_docstring": "",
          "suggestions": [
            "Add comprehensive docstring with purpose, parameters, and examples"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "columnify_strings": {
          "current_quality": "missing",
          "current_docstring": "",
          "suggestions": [
            "Add comprehensive docstring with purpose, parameters, and examples"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        }
      },
      "work_instructions": [
        "For each function in this package:",
        "1. Read the existing docstring (if any) and understand the function's purpose",
        "2. Examine the function's implementation to understand its behavior",
        "3. Check related functions (in context) to understand how they work together",
        "4. ENHANCE (don't replace) the docstring following the template:",
        "   - Keep original docstring if it exists",
        "   - Add 'Enhanced Documentation:' section with usage patterns",
        "   - Include concrete examples with >>> syntax",
        "   - Document parameters and return values",
        "   - Note related functions and when to use vs alternatives",
        "   - Add relevant tags for searchability",
        "5. Test your examples to ensure they work",
        "6. Update the appropriate tag files in documentation/tags/"
      ],
      "quality_checklist": [
        "\u2610 Each function has enhanced docstring with purpose clearly explained",
        "\u2610 All parameters are documented with types and descriptions",
        "\u2610 Return values are documented with types and descriptions",
        "\u2610 At least one concrete example with >>> syntax that actually runs",
        "\u2610 Related functions are mentioned with explanations",
        "\u2610 Usage patterns and common scenarios are described",
        "\u2610 Relevant tags added for searchability",
        "\u2610 Function added to appropriate tag files in documentation/tags/",
        "\u2610 Examples tested and confirmed working",
        "\u2610 Cross-references to multiplexing patterns or _via_ variants documented"
      ]
    },
    {
      "package_id": 3,
      "functions": [
        "is_numpy_array",
        "resize_videos",
        "set_ans",
        "as_numpy_video",
        "as_numpy_videos",
        "resize_lists_to_max_len",
        "resize_lists_to_min_len",
        "_tensorify"
      ],
      "total_functions": 8,
      "estimated_hours": 6.0,
      "priority_score": 1340,
      "context": {
        "is_numpy_array": {
          "function_name": "is_numpy_array",
          "calls": [
            "_is_instance_of_module_class"
          ],
          "called_by": [
            "_softmax",
            "resize_videos",
            "_clip",
            "_radians",
            "_cosh",
            "labeled_videos",
            "_cos",
            "get_video_height",
            "_atan2",
            "_floor",
            "_fft",
            "get_min_image_dimensions",
            "_sign",
            "trim_video",
            "crop_images_to_square",
            "_maximum",
            "accumulate_flows",
            "get_max_image_dimensions",
            "pseudo_terminal",
            "_images_are_all_same_size",
            "vertically_concatenated_images",
            "cv_resize_images",
            "validate_tensor_shapes",
            "_omni_save_default_extension",
            "_atan",
            "_degrees",
            "resize_list",
            "_copy_tensor",
            "_sum",
            "_ifft",
            "_round",
            "_sinh",
            "_pow",
            "resize_video_to_hold",
            "set_ans",
            "get_video_width",
            "_create_array_like",
            "_min",
            "_ceil",
            "as_rgba_float_color",
            "get_min_video_dimensions",
            "_sqrt",
            "_sigmoid",
            "_minimum",
            "as_numpy_video",
            "resize_lists_to_min_len",
            "resize_video_to_fit",
            "_abs",
            "_max",
            "as_numpy_videos",
            "_acos",
            "list_transpose",
            "get_max_video_dimensions",
            "handy_hash",
            "_exp",
            "_tanh",
            "_sin",
            "_log2",
            "_log10",
            "_nan_to_num",
            "_log",
            "_tensorify",
            "rinsp",
            "resize_lists",
            "with_alpha_checkerboards",
            "_mean",
            "_relu",
            "_crop_images_to_max_or_min_size",
            "_asin",
            "resize_lists_to_max_len",
            "_tan",
            "inverted_images",
            "_trim_videos_to_same_length"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "_radians",
            "_cosh",
            "_cos",
            "_floor",
            "_fft",
            "trim_video",
            "_maximum",
            "get_max_image_dimensions",
            "_images_are_all_same_size",
            "cv_resize_images",
            "_sum",
            "_ifft",
            "_create_array_like",
            "_min",
            "_ceil",
            "_sigmoid",
            "_minimum",
            "as_numpy_videos",
            "_exp",
            "_sin",
            "_log2",
            "_log10",
            "_log",
            "_tensorify",
            "rinsp",
            "with_alpha_checkerboards",
            "_mean",
            "_relu",
            "_crop_images_to_max_or_min_size",
            "resize_video_to_hold",
            "_asin",
            "resize_lists_to_max_len",
            "_tan",
            "inverted_images",
            "_softmax",
            "resize_videos",
            "_clip",
            "labeled_videos",
            "get_video_height",
            "_atan2",
            "get_min_image_dimensions",
            "_sign",
            "_is_instance_of_module_class",
            "crop_images_to_square",
            "accumulate_flows",
            "pseudo_terminal",
            "vertically_concatenated_images",
            "validate_tensor_shapes",
            "_degrees",
            "_omni_save_default_extension",
            "resize_list",
            "_copy_tensor",
            "_round",
            "_sinh",
            "_pow",
            "set_ans",
            "get_video_width",
            "is_numpy_array",
            "as_rgba_float_color",
            "get_min_video_dimensions",
            "_sqrt",
            "resize_lists_to_min_len",
            "as_numpy_video",
            "resize_video_to_fit",
            "_abs",
            "_max",
            "_acos",
            "list_transpose",
            "get_max_video_dimensions",
            "handy_hash",
            "_tanh",
            "_nan_to_num",
            "resize_lists",
            "_atan",
            "_trim_videos_to_same_length"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        },
        "resize_videos": {
          "function_name": "resize_videos",
          "calls": [
            "detuple",
            "is_numpy_array",
            "as_numpy_array",
            "print"
          ],
          "called_by": [
            "resize_videos_to_min_size",
            "resize_videos_to_max_size"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "resize_videos_to_min_size",
            "resize_videos",
            "detuple",
            "as_numpy_array",
            "print",
            "resize_videos_to_max_size",
            "is_numpy_array"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        },
        "set_ans": {
          "function_name": "set_ans",
          "calls": [
            "set_numpy_print_options",
            "print",
            "get_ans",
            "print_verbose_stack_trace",
            "fansi_print",
            "take_snapshot",
            "is_numpy_array",
            "dupdate",
            "line_split",
            "get_terminal_width"
          ],
          "called_by": [
            "pseudo_terminal"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "set_numpy_print_options",
            "print",
            "get_ans",
            "pseudo_terminal",
            "print_verbose_stack_trace",
            "fansi_print",
            "take_snapshot",
            "is_numpy_array",
            "dupdate",
            "line_split",
            "get_terminal_width",
            "set_ans"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        },
        "as_numpy_video": {
          "function_name": "as_numpy_video",
          "calls": [
            "is_numpy_array",
            "pip_import",
            "as_numpy_image",
            "is_torch_tensor",
            "as_numpy_array"
          ],
          "called_by": [
            "as_numpy_videos"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "is_torch_tensor",
            "as_numpy_array",
            "as_numpy_videos",
            "is_numpy_array",
            "pip_import",
            "as_numpy_video",
            "as_numpy_image"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        },
        "as_numpy_videos": {
          "function_name": "as_numpy_videos",
          "calls": [
            "is_numpy_array",
            "pip_import",
            "is_torch_tensor",
            "as_numpy_array",
            "as_numpy_video"
          ],
          "called_by": [],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "is_torch_tensor",
            "as_numpy_array",
            "as_numpy_videos",
            "is_numpy_array",
            "pip_import",
            "as_numpy_video"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        },
        "resize_lists_to_max_len": {
          "function_name": "resize_lists_to_max_len",
          "calls": [
            "resize_list",
            "detuple",
            "is_numpy_array"
          ],
          "called_by": [],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "is_numpy_array",
            "detuple",
            "resize_list",
            "resize_lists_to_max_len"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        },
        "resize_lists_to_min_len": {
          "function_name": "resize_lists_to_min_len",
          "calls": [
            "resize_list",
            "detuple",
            "is_numpy_array"
          ],
          "called_by": [],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "is_numpy_array",
            "resize_lists_to_min_len",
            "resize_list",
            "detuple"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        },
        "_tensorify": {
          "function_name": "_tensorify",
          "calls": [
            "is_numpy_array",
            "is_torch_tensor",
            "as_numpy_array"
          ],
          "called_by": [
            "square_matrix_size",
            "is_a_square_matrix",
            "is_a_matrix"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "square_matrix_size",
            "is_a_square_matrix",
            "is_torch_tensor",
            "as_numpy_array",
            "is_a_matrix",
            "is_numpy_array",
            "_tensorify"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": true
        }
      },
      "documentation_status": {
        "is_numpy_array": {
          "current_quality": "missing",
          "current_docstring": "",
          "suggestions": [
            "Add comprehensive docstring with purpose, parameters, and examples"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "resize_videos": {
          "current_quality": "missing",
          "current_docstring": "",
          "suggestions": [
            "Add comprehensive docstring with purpose, parameters, and examples"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "set_ans": {
          "current_quality": "missing",
          "current_docstring": "",
          "suggestions": [
            "Add comprehensive docstring with purpose, parameters, and examples"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "as_numpy_video": {
          "current_quality": "missing",
          "current_docstring": "",
          "suggestions": [
            "Add comprehensive docstring with purpose, parameters, and examples"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "as_numpy_videos": {
          "current_quality": "missing",
          "current_docstring": "",
          "suggestions": [
            "Add comprehensive docstring with purpose, parameters, and examples"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "resize_lists_to_max_len": {
          "current_quality": "missing",
          "current_docstring": "",
          "suggestions": [
            "Add comprehensive docstring with purpose, parameters, and examples"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "resize_lists_to_min_len": {
          "current_quality": "missing",
          "current_docstring": "",
          "suggestions": [
            "Add comprehensive docstring with purpose, parameters, and examples"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "_tensorify": {
          "current_quality": "missing",
          "current_docstring": "",
          "suggestions": [
            "Add comprehensive docstring with purpose, parameters, and examples"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        }
      },
      "work_instructions": [
        "For each function in this package:",
        "1. Read the existing docstring (if any) and understand the function's purpose",
        "2. Examine the function's implementation to understand its behavior",
        "3. Check related functions (in context) to understand how they work together",
        "4. ENHANCE (don't replace) the docstring following the template:",
        "   - Keep original docstring if it exists",
        "   - Add 'Enhanced Documentation:' section with usage patterns",
        "   - Include concrete examples with >>> syntax",
        "   - Document parameters and return values",
        "   - Note related functions and when to use vs alternatives",
        "   - Add relevant tags for searchability",
        "5. Test your examples to ensure they work",
        "6. Update the appropriate tag files in documentation/tags/"
      ],
      "quality_checklist": [
        "\u2610 Each function has enhanced docstring with purpose clearly explained",
        "\u2610 All parameters are documented with types and descriptions",
        "\u2610 Return values are documented with types and descriptions",
        "\u2610 At least one concrete example with >>> syntax that actually runs",
        "\u2610 Related functions are mentioned with explanations",
        "\u2610 Usage patterns and common scenarios are described",
        "\u2610 Relevant tags added for searchability",
        "\u2610 Function added to appropriate tag files in documentation/tags/",
        "\u2610 Examples tested and confirmed working",
        "\u2610 Cross-references to multiplexing patterns or _via_ variants documented"
      ]
    },
    {
      "package_id": 9,
      "functions": [
        "_omni_load",
        "load_image",
        "load_json",
        "load",
        "is_video_file",
        "load_pickled_value",
        "file_to_object",
        "is_utf8_file"
      ],
      "total_functions": 8,
      "estimated_hours": 6.0,
      "priority_score": 1335,
      "context": {
        "_omni_load": {
          "function_name": "_omni_load",
          "calls": [
            "load_pickled_value",
            "load_json",
            "load_video",
            "ends_with_any",
            "_omni_load_animated_image",
            "load_parquet",
            "is_utf8_file",
            "load_image",
            "load_safetensors",
            "load_sound_file",
            "is_video_file",
            "load_file_lines",
            "load_tsv",
            "is_image_file",
            "load",
            "file_to_object"
          ],
          "called_by": [],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "load_video",
            "ends_with_any",
            "_omni_load_animated_image",
            "load_safetensors",
            "is_utf8_file",
            "is_video_file",
            "load_file_lines",
            "load_tsv",
            "load_sound_file",
            "file_to_object",
            "load_pickled_value",
            "load_json",
            "load_parquet",
            "load_image",
            "_omni_load",
            "is_image_file",
            "load"
          ],
          "multiplexing": [
            "load_tsv",
            "load_csv",
            "load_parquet",
            "load_safetensors",
            "load_file_lines",
            "load_pickled_value",
            "file_to_object",
            "load_image",
            "load_video",
            "load_text_file"
          ],
          "is_via_variant": false,
          "is_private": true
        },
        "load_image": {
          "function_name": "load_image",
          "calls": [
            "path_exists",
            "get_absolute_path",
            "load_image_from_file",
            "is_valid_url",
            "load_image_from_url"
          ],
          "called_by": [
            "_copy_image_to_clipboard_via_pyjpgclipboard",
            "_helper",
            "pseudo_terminal",
            "display_image",
            "load_image_from_clipboard",
            "load_rgb_image",
            "display_image_in_terminal_color",
            "_display_pterm_image",
            "latex_image",
            "display_cv_color_histogram",
            "load_images",
            "get_youtube_video_thumbnail",
            "write_frame",
            "convert_image_file",
            "display_image_in_terminal",
            "encode_image_to_bytes",
            "pterm_pretty_print",
            "save_video_mp4",
            "_omni_load",
            "display_image_slideshow",
            "convert_image_files",
            "load_frame",
            "run_depth_pro",
            "edit_image_in_terminal"
          ],
          "aliases": [
            "li"
          ],
          "via_variants": [],
          "cluster": [
            "display_cv_color_histogram",
            "li",
            "load_image_from_file",
            "load_images",
            "_copy_image_to_clipboard_via_pyjpgclipboard",
            "get_youtube_video_thumbnail",
            "write_frame",
            "convert_image_file",
            "display_image_in_terminal",
            "_helper",
            "encode_image_to_bytes",
            "pterm_pretty_print",
            "path_exists",
            "pseudo_terminal",
            "get_absolute_path",
            "display_image",
            "load_image",
            "save_video_mp4",
            "load_image_from_clipboard",
            "is_valid_url",
            "load_rgb_image",
            "display_image_in_terminal_color",
            "_display_pterm_image",
            "_omni_load",
            "display_image_slideshow",
            "convert_image_files",
            "latex_image",
            "load_image_from_url",
            "load_frame",
            "run_depth_pro",
            "edit_image_in_terminal"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        },
        "load_json": {
          "function_name": "load_json",
          "calls": [
            "text_file_to_string",
            "as_easydict"
          ],
          "called_by": [
            "_omni_load",
            "_get_all_github_gists_info",
            "load_jsons",
            "get_number_of_github_gists",
            "load_page",
            "_view_with_pyfx",
            "_extract_code_cells_from_ipynb"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "load_json",
            "as_easydict",
            "text_file_to_string",
            "_omni_load",
            "load_jsons",
            "get_number_of_github_gists",
            "_get_all_github_gists_info",
            "load_page",
            "_view_with_pyfx",
            "_extract_code_cells_from_ipynb"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        },
        "load": {
          "function_name": "load",
          "calls": [
            "load_video"
          ],
          "called_by": [
            "load_pickled_value",
            "_omni_load",
            "file_cache_call",
            "_get_cotracker_model",
            "parse_dyaml_junctions"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "load_pickled_value",
            "file_cache_call",
            "load_video",
            "_get_cotracker_model",
            "parse_dyaml_junctions",
            "_omni_load",
            "load"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        },
        "is_video_file": {
          "function_name": "is_video_file",
          "calls": [
            "_guess_mimetype"
          ],
          "called_by": [
            "save_video_gif_via_pil",
            "_omni_load",
            "display_video",
            "rinsp"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "is_video_file",
            "save_video_gif_via_pil",
            "_guess_mimetype",
            "_omni_load",
            "display_video",
            "rinsp"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        },
        "load_pickled_value": {
          "function_name": "load_pickled_value",
          "calls": [
            "load"
          ],
          "called_by": [
            "_omni_load"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "load_pickled_value",
            "_omni_load",
            "load"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        },
        "file_to_object": {
          "function_name": "file_to_object",
          "calls": [
            "bytes_to_object",
            "file_to_bytes"
          ],
          "called_by": [
            "_omni_load"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "bytes_to_object",
            "_omni_load",
            "file_to_bytes",
            "file_to_object"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        },
        "is_utf8_file": {
          "function_name": "is_utf8_file",
          "calls": [
            "file_exists"
          ],
          "called_by": [
            "display_file_tree",
            "find_and_replace_text_files",
            "get_stats_string",
            "_omni_load",
            "rinsp",
            "_view_with_pyfx",
            "should_read",
            "_fzf_multi_grep",
            "_string_diff_helper"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "display_file_tree",
            "find_and_replace_text_files",
            "file_exists",
            "get_stats_string",
            "is_utf8_file",
            "_omni_load",
            "rinsp",
            "_view_with_pyfx",
            "should_read",
            "_fzf_multi_grep",
            "_string_diff_helper"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        }
      },
      "documentation_status": {
        "_omni_load": {
          "current_quality": "missing",
          "current_docstring": "",
          "suggestions": [
            "Add comprehensive docstring with purpose, parameters, and examples"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "load_image": {
          "current_quality": "basic",
          "current_docstring": "Automatically detect if location is a URL or a file path and try to smartly choose the appropriate function to load the image ",
          "suggestions": [
            "Add concrete usage examples with >>> syntax",
            "Document function parameters and their types",
            "Document return value and type",
            "Add supported file formats and common usage patterns"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "load_json": {
          "current_quality": "missing",
          "current_docstring": "",
          "suggestions": [
            "Add comprehensive docstring with purpose, parameters, and examples"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "load": {
          "current_quality": "missing",
          "current_docstring": "",
          "suggestions": [
            "Add comprehensive docstring with purpose, parameters, and examples"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "is_video_file": {
          "current_quality": "missing",
          "current_docstring": "",
          "suggestions": [
            "Add comprehensive docstring with purpose, parameters, and examples"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "load_pickled_value": {
          "current_quality": "missing",
          "current_docstring": "",
          "suggestions": [
            "Add comprehensive docstring with purpose, parameters, and examples"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "file_to_object": {
          "current_quality": "missing",
          "current_docstring": "",
          "suggestions": [
            "Add comprehensive docstring with purpose, parameters, and examples"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "is_utf8_file": {
          "current_quality": "basic",
          "current_docstring": "Returns True iff the file path is a UTF-8 file\nFaster than trying to use text_file_to_string(path), because it doesn't need to read the whole file",
          "suggestions": [
            "Add concrete usage examples with >>> syntax",
            "Document return value and type"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        }
      },
      "work_instructions": [
        "For each function in this package:",
        "1. Read the existing docstring (if any) and understand the function's purpose",
        "2. Examine the function's implementation to understand its behavior",
        "3. Check related functions (in context) to understand how they work together",
        "4. ENHANCE (don't replace) the docstring following the template:",
        "   - Keep original docstring if it exists",
        "   - Add 'Enhanced Documentation:' section with usage patterns",
        "   - Include concrete examples with >>> syntax",
        "   - Document parameters and return values",
        "   - Note related functions and when to use vs alternatives",
        "   - Add relevant tags for searchability",
        "5. Test your examples to ensure they work",
        "6. Update the appropriate tag files in documentation/tags/",
        "7. SPECIAL: Document the multiplexing pattern - how the base function dispatches to specific implementations"
      ],
      "quality_checklist": [
        "\u2610 Each function has enhanced docstring with purpose clearly explained",
        "\u2610 All parameters are documented with types and descriptions",
        "\u2610 Return values are documented with types and descriptions",
        "\u2610 At least one concrete example with >>> syntax that actually runs",
        "\u2610 Related functions are mentioned with explanations",
        "\u2610 Usage patterns and common scenarios are described",
        "\u2610 Relevant tags added for searchability",
        "\u2610 Function added to appropriate tag files in documentation/tags/",
        "\u2610 Examples tested and confirmed working",
        "\u2610 Cross-references to multiplexing patterns or _via_ variants documented"
      ]
    },
    {
      "package_id": 15,
      "functions": [
        "is_iterable",
        "path_join",
        "is_color",
        "process_command",
        "is_non_str_iterable",
        "save_file_lines",
        "is_binary_color",
        "cv_best_match_contours"
      ],
      "total_functions": 8,
      "estimated_hours": 6.0,
      "priority_score": 1245,
      "context": {
        "is_iterable": {
          "function_name": "is_iterable",
          "calls": [],
          "called_by": [
            "process_command",
            "labeled_videos",
            "is_byte_color",
            "get_sinusoidal_positional_encodings",
            "gather",
            "cv_best_match_contours",
            "set_cuda_visible_devices",
            "cluster_by_key",
            "chunk_by_key",
            "_web_copy",
            "is_non_str_iterable",
            "random_permutation",
            "save_file_lines",
            "playback_mouse_positions",
            "copy_paths",
            "is_float_color",
            "_get_function_names",
            "pam",
            "pip_install_multiple",
            "cv_draw_arrows",
            "labeled_images",
            "cv_best_match_contour",
            "linterp",
            "squelch_call",
            "load_video_streams",
            "find_and_replace_text_files",
            "cv_draw_circles",
            "as_numpy_images",
            "is_color",
            "tmuxp_create_session_yaml",
            "is_binary_color",
            "_load_files",
            "convert_image_files",
            "broadcast_lists",
            "path_join",
            "sync_sorted",
            "rotate_images"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "process_command",
            "labeled_videos",
            "is_byte_color",
            "get_sinusoidal_positional_encodings",
            "gather",
            "cv_best_match_contours",
            "set_cuda_visible_devices",
            "cluster_by_key",
            "chunk_by_key",
            "_web_copy",
            "is_non_str_iterable",
            "random_permutation",
            "is_iterable",
            "save_file_lines",
            "playback_mouse_positions",
            "copy_paths",
            "is_float_color",
            "_get_function_names",
            "pam",
            "pip_install_multiple",
            "cv_draw_arrows",
            "labeled_images",
            "cv_best_match_contour",
            "linterp",
            "squelch_call",
            "load_video_streams",
            "find_and_replace_text_files",
            "cv_draw_circles",
            "as_numpy_images",
            "is_color",
            "tmuxp_create_session_yaml",
            "is_binary_color",
            "_load_files",
            "convert_image_files",
            "broadcast_lists",
            "path_join",
            "sync_sorted",
            "rotate_images"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        },
        "path_join": {
          "function_name": "path_join",
          "calls": [
            "is_iterable",
            "is_non_str_iterable",
            "product",
            "print"
          ],
          "called_by": [
            "display_file_tree",
            "_set_ryan_ranger_config",
            "make_symlink",
            "save_images",
            "move_path",
            "_get_depth_pro_model",
            "_fzf_multi_grep",
            "copy_file",
            "_run_ai_cli_coder",
            "with_file_name",
            "pseudo_terminal",
            "_write_default_gitignore",
            "_pterm_fuzzy_cd",
            "download_url",
            "copy_directory",
            "get_vim_python_executable",
            "apply_suffix_to_path",
            "get_cache_file_path",
            "copy_paths",
            "files_walk",
            "walk",
            "get_unique_copy_path",
            "copy_to_folder",
            "with_folder_name",
            "make_hardlink",
            "convert_image_file",
            "_get_executable",
            "_pip_import_depth_pro",
            "git_import",
            "get_random_files",
            "download_google_font",
            "_get_select_torch_device_lock_file",
            "_ensure_tapnet_installed",
            "_is_python_exe_root"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "display_file_tree",
            "_set_ryan_ranger_config",
            "make_symlink",
            "save_images",
            "move_path",
            "_get_depth_pro_model",
            "_fzf_multi_grep",
            "copy_file",
            "_run_ai_cli_coder",
            "with_file_name",
            "pseudo_terminal",
            "_write_default_gitignore",
            "is_non_str_iterable",
            "_pterm_fuzzy_cd",
            "product",
            "download_url",
            "copy_directory",
            "is_iterable",
            "get_vim_python_executable",
            "apply_suffix_to_path",
            "print",
            "get_cache_file_path",
            "copy_paths",
            "files_walk",
            "walk",
            "get_unique_copy_path",
            "copy_to_folder",
            "with_folder_name",
            "make_hardlink",
            "convert_image_file",
            "_get_executable",
            "_pip_import_depth_pro",
            "git_import",
            "get_random_files",
            "download_google_font",
            "_get_select_torch_device_lock_file",
            "path_join",
            "_ensure_tapnet_installed",
            "_is_python_exe_root"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        },
        "is_color": {
          "function_name": "is_color",
          "calls": [
            "is_iterable",
            "is_number"
          ],
          "called_by": [
            "blend_images",
            "uniform_float_color_image"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "is_iterable",
            "is_number",
            "blend_images",
            "is_color",
            "uniform_float_color_image"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        },
        "process_command": {
          "function_name": "process_command",
          "calls": [
            "is_iterable",
            "list_flatten"
          ],
          "called_by": [
            "tmuxp_create_session_yaml"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "process_command",
            "list_flatten",
            "tmuxp_create_session_yaml",
            "is_iterable"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        },
        "is_non_str_iterable": {
          "function_name": "is_non_str_iterable",
          "calls": [
            "is_iterable"
          ],
          "called_by": [
            "path_join"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "is_iterable",
            "is_non_str_iterable",
            "path_join"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        },
        "save_file_lines": {
          "function_name": "save_file_lines",
          "calls": [
            "is_iterable",
            "line_join",
            "string_to_text_file"
          ],
          "called_by": [
            "_omni_save"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "is_iterable",
            "save_file_lines",
            "line_join",
            "_omni_save",
            "string_to_text_file"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        },
        "is_binary_color": {
          "function_name": "is_binary_color",
          "calls": [
            "is_iterable",
            "as_numpy_array",
            "is_number"
          ],
          "called_by": [
            "inverted_color"
          ],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "is_binary_color",
            "is_iterable",
            "as_numpy_array",
            "is_number",
            "inverted_color"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        },
        "cv_best_match_contours": {
          "function_name": "cv_best_match_contours",
          "calls": [
            "is_iterable",
            "cv_contour_match"
          ],
          "called_by": [],
          "aliases": [],
          "via_variants": [],
          "cluster": [
            "is_iterable",
            "cv_contour_match",
            "cv_best_match_contours"
          ],
          "multiplexing": [],
          "is_via_variant": false,
          "is_private": false
        }
      },
      "documentation_status": {
        "is_iterable": {
          "current_quality": "missing",
          "current_docstring": "",
          "suggestions": [
            "Add comprehensive docstring with purpose, parameters, and examples"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "path_join": {
          "current_quality": "excellent",
          "current_docstring": "Joins given paths, which can be a combination of strings and non-string iterables (like lists, tuples).\nAn extension of os.path.join (wherever os.path.join works, so will this)\n\nArguments:\n*paths -- A...",
          "suggestions": [],
          "has_examples": true,
          "has_parameters": true,
          "has_return_info": true
        },
        "is_color": {
          "current_quality": "missing",
          "current_docstring": "",
          "suggestions": [
            "Add comprehensive docstring with purpose, parameters, and examples"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "process_command": {
          "current_quality": "missing",
          "current_docstring": "",
          "suggestions": [
            "Add comprehensive docstring with purpose, parameters, and examples"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "is_non_str_iterable": {
          "current_quality": "missing",
          "current_docstring": "",
          "suggestions": [
            "Add comprehensive docstring with purpose, parameters, and examples"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "save_file_lines": {
          "current_quality": "missing",
          "current_docstring": "",
          "suggestions": [
            "Add comprehensive docstring with purpose, parameters, and examples"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "is_binary_color": {
          "current_quality": "missing",
          "current_docstring": "",
          "suggestions": [
            "Add comprehensive docstring with purpose, parameters, and examples"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        },
        "cv_best_match_contours": {
          "current_quality": "missing",
          "current_docstring": "",
          "suggestions": [
            "Add comprehensive docstring with purpose, parameters, and examples"
          ],
          "has_examples": false,
          "has_parameters": false,
          "has_return_info": false
        }
      },
      "work_instructions": [
        "For each function in this package:",
        "1. Read the existing docstring (if any) and understand the function's purpose",
        "2. Examine the function's implementation to understand its behavior",
        "3. Check related functions (in context) to understand how they work together",
        "4. ENHANCE (don't replace) the docstring following the template:",
        "   - Keep original docstring if it exists",
        "   - Add 'Enhanced Documentation:' section with usage patterns",
        "   - Include concrete examples with >>> syntax",
        "   - Document parameters and return values",
        "   - Note related functions and when to use vs alternatives",
        "   - Add relevant tags for searchability",
        "5. Test your examples to ensure they work",
        "6. Update the appropriate tag files in documentation/tags/"
      ],
      "quality_checklist": [
        "\u2610 Each function has enhanced docstring with purpose clearly explained",
        "\u2610 All parameters are documented with types and descriptions",
        "\u2610 Return values are documented with types and descriptions",
        "\u2610 At least one concrete example with >>> syntax that actually runs",
        "\u2610 Related functions are mentioned with explanations",
        "\u2610 Usage patterns and common scenarios are described",
        "\u2610 Relevant tags added for searchability",
        "\u2610 Function added to appropriate tag files in documentation/tags/",
        "\u2610 Examples tested and confirmed working",
        "\u2610 Cross-references to multiplexing patterns or _via_ variants documented"
      ]
    }
  ]
}
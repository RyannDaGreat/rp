{
  "package_id": 37,
  "functions": [
    "helper",
    "descendants",
    "_init_contour_class",
    "import_all_submodules",
    "knn_clusters",
    "calculate_flows",
    "split_into_sublists",
    "video_with_progress_bar"
  ],
  "total_functions": 8,
  "estimated_hours": 6.0,
  "priority_score": 700,
  "context": {
    "helper": {
      "function_name": "helper",
      "calls": [
        "descendants"
      ],
      "called_by": [
        "bytes_to_file",
        "import_all_submodules",
        "_init_contour_class",
        "knn_clusters",
        "split_into_sublists",
        "descendants",
        "remove_duplicate_frames",
        "calculate_flows",
        "_rinsp_search_helper",
        "video_with_progress_bar",
        "s3_list_objects"
      ],
      "aliases": [],
      "via_variants": [],
      "cluster": [
        "helper",
        "bytes_to_file",
        "import_all_submodules",
        "_init_contour_class",
        "knn_clusters",
        "split_into_sublists",
        "descendants",
        "remove_duplicate_frames",
        "calculate_flows",
        "_rinsp_search_helper",
        "video_with_progress_bar",
        "s3_list_objects"
      ],
      "multiplexing": [],
      "is_via_variant": false,
      "is_private": false
    },
    "descendants": {
      "function_name": "descendants",
      "calls": [
        "helper",
        "descendants"
      ],
      "called_by": [
        "helper",
        "descendants",
        "_init_contour_class"
      ],
      "aliases": [],
      "via_variants": [],
      "cluster": [
        "helper",
        "descendants",
        "_init_contour_class"
      ],
      "multiplexing": [],
      "is_via_variant": false,
      "is_private": false
    },
    "_init_contour_class": {
      "function_name": "_init_contour_class",
      "calls": [
        "is_counter_clockwise",
        "helper",
        "descendants"
      ],
      "called_by": [
        "cv_find_contours"
      ],
      "aliases": [],
      "via_variants": [],
      "cluster": [
        "helper",
        "cv_find_contours",
        "is_counter_clockwise",
        "descendants",
        "_init_contour_class"
      ],
      "multiplexing": [],
      "is_via_variant": false,
      "is_private": true
    },
    "import_all_submodules": {
      "function_name": "import_all_submodules",
      "calls": [
        "helper",
        "module_exists",
        "add",
        "fansi_print",
        "get_all_submodule_names",
        "fansi",
        "try_import",
        "is_a_module",
        "get_module_path"
      ],
      "called_by": [],
      "aliases": [],
      "via_variants": [],
      "cluster": [
        "helper",
        "module_exists",
        "add",
        "fansi_print",
        "import_all_submodules",
        "get_all_submodule_names",
        "fansi",
        "try_import",
        "is_a_module",
        "get_module_path"
      ],
      "multiplexing": [],
      "is_via_variant": false,
      "is_private": false
    },
    "knn_clusters": {
      "function_name": "knn_clusters",
      "calls": [
        "helper",
        "neighbors"
      ],
      "called_by": [],
      "aliases": [],
      "via_variants": [],
      "cluster": [
        "helper",
        "neighbors",
        "knn_clusters"
      ],
      "multiplexing": [],
      "is_via_variant": false,
      "is_private": false
    },
    "calculate_flows": {
      "function_name": "calculate_flows",
      "calls": [
        "helper",
        "has_len"
      ],
      "called_by": [],
      "aliases": [],
      "via_variants": [],
      "cluster": [
        "helper",
        "calculate_flows",
        "has_len"
      ],
      "multiplexing": [],
      "is_via_variant": false,
      "is_private": false
    },
    "split_into_sublists": {
      "function_name": "split_into_sublists",
      "calls": [
        "helper",
        "format",
        "is_number",
        "has_len"
      ],
      "called_by": [
        "split_into_subdicts",
        "tiled_images",
        "wrap_string_to_width"
      ],
      "aliases": [],
      "via_variants": [],
      "cluster": [
        "helper",
        "wrap_string_to_width",
        "tiled_images",
        "split_into_sublists",
        "format",
        "is_number",
        "split_into_subdicts",
        "has_len"
      ],
      "multiplexing": [],
      "is_via_variant": false,
      "is_private": false
    },
    "video_with_progress_bar": {
      "function_name": "video_with_progress_bar",
      "calls": [
        "helper",
        "gather_args_call"
      ],
      "called_by": [],
      "aliases": [],
      "via_variants": [],
      "cluster": [
        "helper",
        "gather_args_call",
        "video_with_progress_bar"
      ],
      "multiplexing": [],
      "is_via_variant": false,
      "is_private": false
    }
  },
  "documentation_status": {
    "helper": {
      "current_quality": "missing",
      "current_docstring": "",
      "suggestions": [
        "Add comprehensive docstring with purpose, parameters, and examples"
      ],
      "has_examples": false,
      "has_parameters": false,
      "has_return_info": false
    },
    "descendants": {
      "current_quality": "missing",
      "current_docstring": "",
      "suggestions": [
        "Add comprehensive docstring with purpose, parameters, and examples"
      ],
      "has_examples": false,
      "has_parameters": false,
      "has_return_info": false
    },
    "_init_contour_class": {
      "current_quality": "missing",
      "current_docstring": "",
      "suggestions": [
        "Add comprehensive docstring with purpose, parameters, and examples"
      ],
      "has_examples": false,
      "has_parameters": false,
      "has_return_info": false
    },
    "import_all_submodules": {
      "current_quality": "basic",
      "current_docstring": "Useful when you're searching for some keyword in a library, but not every submodule has been imported\nBackground: Modules sometimes don't import everything all at once. When you import PIL, for exampl...",
      "suggestions": [
        "Add concrete usage examples with >>> syntax",
        "Document function parameters and their types",
        "Document return value and type"
      ],
      "has_examples": false,
      "has_parameters": false,
      "has_return_info": false
    },
    "knn_clusters": {
      "current_quality": "basic",
      "current_docstring": "Given a list of vectors, return a list of sets of vectors belonging to each cluster resulting from the k-nearest neighbor clustering algorithm\nRequires MUTUAL neighbors to make an edge (aka given two ...",
      "suggestions": [
        "Add concrete usage examples with >>> syntax",
        "Document function parameters and their types",
        "Document return value and type"
      ],
      "has_examples": false,
      "has_parameters": false,
      "has_return_info": false
    },
    "calculate_flows": {
      "current_quality": "basic",
      "current_docstring": "Calculates optical flow for a whole video, given a video and a function that computes flow(prev_frame, next_frame)\nReturns an iterable of optical flows, and if not lazy it has length len(video)-1",
      "suggestions": [
        "Add concrete usage examples with >>> syntax",
        "Document function parameters and their types",
        "Document return value and type"
      ],
      "has_examples": false,
      "has_parameters": false,
      "has_return_info": false
    },
    "split_into_sublists": {
      "current_quality": "good",
      "current_docstring": "If strict: sublist_len MUST evenly divide len(l)\nIt will return a list of tuples, unless l is a string, in which case it will return a list of strings\nkeep_remainder is not applicable if strict\nif not...",
      "suggestions": [
        "Document function parameters and their types",
        "Document return value and type"
      ],
      "has_examples": true,
      "has_parameters": false,
      "has_return_info": false
    },
    "video_with_progress_bar": {
      "current_quality": "good",
      "current_docstring": "Adds a progress bar to the top of a video to see how far into it you are.\nSee rp.get_progress_bar_image for further documentation.\n\nEXAMPLE:\n   >>> display_video(\n   ...     video_with_progress_bar(\n ...",
      "suggestions": [
        "Document function parameters and their types",
        "Document return value and type"
      ],
      "has_examples": true,
      "has_parameters": false,
      "has_return_info": false
    }
  },
  "work_instructions": [
    "For each function in this package:",
    "1. Read the existing docstring (if any) and understand the function's purpose",
    "2. Examine the function's implementation to understand its behavior",
    "3. Check related functions (in context) to understand how they work together",
    "4. ENHANCE (don't replace) the docstring following the template:",
    "   - Keep original docstring if it exists",
    "   - Add 'Enhanced Documentation:' section with usage patterns",
    "   - Include concrete examples with >>> syntax",
    "   - Document parameters and return values",
    "   - Note related functions and when to use vs alternatives",
    "   - Add relevant tags for searchability",
    "5. Test your examples to ensure they work",
    "6. Update the appropriate tag files in documentation/tags/"
  ],
  "quality_checklist": [
    "\u2610 Each function has enhanced docstring with purpose clearly explained",
    "\u2610 All parameters are documented with types and descriptions",
    "\u2610 Return values are documented with types and descriptions",
    "\u2610 At least one concrete example with >>> syntax that actually runs",
    "\u2610 Related functions are mentioned with explanations",
    "\u2610 Usage patterns and common scenarios are described",
    "\u2610 Relevant tags added for searchability",
    "\u2610 Function added to appropriate tag files in documentation/tags/",
    "\u2610 Examples tested and confirmed working",
    "\u2610 Cross-references to multiplexing patterns or _via_ variants documented"
  ]
}
{
  "package_id": 64,
  "functions": [
    "as_binary_image",
    "_float_image_to_binary_image",
    "_binary_image_to_binary_image",
    "_byte_image_to_binary_image",
    "get_alpha_outline",
    "_cv_morphological_helper",
    "get_apriltag_image",
    "cv_distance_transform"
  ],
  "total_functions": 8,
  "estimated_hours": 6.0,
  "priority_score": 665,
  "context": {
    "as_binary_image": {
      "function_name": "as_binary_image",
      "calls": [
        "is_binary_image",
        "_binary_image_to_binary_image",
        "is_byte_image",
        "_byte_image_to_binary_image",
        "is_image",
        "_float_image_to_binary_image",
        "is_float_image",
        "_binary_floyd_steinburg_dithering"
      ],
      "called_by": [
        "cv_distance_transform",
        "get_alpha_outline",
        "cv_floodfill_mask",
        "get_apriltag_image",
        "_cv_morphological_helper",
        "_skimage_skeletonize",
        "cv_inpaint_image",
        "display_image_in_terminal",
        "_binary_floyd_steinburg_dithering"
      ],
      "aliases": [],
      "via_variants": [],
      "cluster": [
        "is_binary_image",
        "cv_distance_transform",
        "_binary_image_to_binary_image",
        "as_binary_image",
        "_byte_image_to_binary_image",
        "is_image",
        "_float_image_to_binary_image",
        "get_apriltag_image",
        "_skimage_skeletonize",
        "is_float_image",
        "cv_inpaint_image",
        "display_image_in_terminal",
        "cv_floodfill_mask",
        "get_alpha_outline",
        "is_byte_image",
        "_cv_morphological_helper",
        "_binary_floyd_steinburg_dithering"
      ],
      "multiplexing": [
        "_binary_floyd_steinburg_dithering",
        "_float_image_to_binary_image",
        "_byte_image_to_binary_image"
      ],
      "is_via_variant": false,
      "is_private": false
    },
    "_float_image_to_binary_image": {
      "function_name": "_float_image_to_binary_image",
      "calls": [
        "_clamp_float_image"
      ],
      "called_by": [
        "as_binary_image",
        "_byte_image_to_binary_image"
      ],
      "aliases": [],
      "via_variants": [],
      "cluster": [
        "_float_image_to_binary_image",
        "as_binary_image",
        "_byte_image_to_binary_image",
        "_clamp_float_image"
      ],
      "multiplexing": [],
      "is_via_variant": false,
      "is_private": true
    },
    "_binary_image_to_binary_image": {
      "function_name": "_binary_image_to_binary_image",
      "calls": [],
      "called_by": [
        "as_binary_image"
      ],
      "aliases": [],
      "via_variants": [],
      "cluster": [
        "as_binary_image",
        "_binary_image_to_binary_image"
      ],
      "multiplexing": [],
      "is_via_variant": false,
      "is_private": true
    },
    "_byte_image_to_binary_image": {
      "function_name": "_byte_image_to_binary_image",
      "calls": [
        "_float_image_to_binary_image",
        "_byte_image_to_float_image"
      ],
      "called_by": [
        "as_binary_image"
      ],
      "aliases": [],
      "via_variants": [],
      "cluster": [
        "_float_image_to_binary_image",
        "_byte_image_to_float_image",
        "as_binary_image",
        "_byte_image_to_binary_image"
      ],
      "multiplexing": [],
      "is_via_variant": false,
      "is_private": true
    },
    "get_alpha_outline": {
      "function_name": "get_alpha_outline",
      "calls": [
        "cv_erode",
        "bordered_image_solid_color",
        "cv_dilate",
        "as_binary_image",
        "as_grayscale_image"
      ],
      "called_by": [
        "with_alpha_outline"
      ],
      "aliases": [],
      "via_variants": [],
      "cluster": [
        "cv_erode",
        "cv_dilate",
        "bordered_image_solid_color",
        "get_alpha_outline",
        "as_grayscale_image",
        "with_alpha_outline",
        "as_binary_image"
      ],
      "multiplexing": [],
      "is_via_variant": false,
      "is_private": false
    },
    "_cv_morphological_helper": {
      "function_name": "_cv_morphological_helper",
      "calls": [
        "as_byte_image",
        "as_binary_image",
        "flat_circle_kernel"
      ],
      "called_by": [
        "cv_erode",
        "cv_dilate"
      ],
      "aliases": [],
      "via_variants": [],
      "cluster": [
        "cv_erode",
        "as_byte_image",
        "flat_circle_kernel",
        "_cv_morphological_helper",
        "as_binary_image",
        "cv_dilate"
      ],
      "multiplexing": [],
      "is_via_variant": false,
      "is_private": true
    },
    "get_apriltag_image": {
      "function_name": "get_apriltag_image",
      "calls": [
        "cv_resize_image",
        "is_byte_image",
        "pip_import",
        "is_grayscale_image",
        "as_binary_image"
      ],
      "called_by": [
        "get_apriltag_images"
      ],
      "aliases": [],
      "via_variants": [],
      "cluster": [
        "get_apriltag_image",
        "is_grayscale_image",
        "cv_resize_image",
        "pip_import",
        "as_binary_image",
        "get_apriltag_images",
        "is_byte_image"
      ],
      "multiplexing": [],
      "is_via_variant": false,
      "is_private": false
    },
    "cv_distance_transform": {
      "function_name": "cv_distance_transform",
      "calls": [
        "as_byte_image",
        "inverted_image",
        "pip_import",
        "as_binary_image",
        "as_grayscale_image"
      ],
      "called_by": [],
      "aliases": [],
      "via_variants": [],
      "cluster": [
        "as_byte_image",
        "inverted_image",
        "as_grayscale_image",
        "cv_distance_transform",
        "pip_import",
        "as_binary_image"
      ],
      "multiplexing": [],
      "is_via_variant": false,
      "is_private": false
    }
  },
  "documentation_status": {
    "as_binary_image": {
      "current_quality": "basic",
      "current_docstring": "Returns a nummpy array with dtype bool\nEXAMPLE of 'dither': while True: display_image(as_binary_image(load_image_from_webcam(),dither=True))",
      "suggestions": [
        "Add concrete usage examples with >>> syntax",
        "Document function parameters and their types",
        "Document return value and type",
        "Document supported image types and formats"
      ],
      "has_examples": false,
      "has_parameters": false,
      "has_return_info": false
    },
    "_float_image_to_binary_image": {
      "current_quality": "missing",
      "current_docstring": "",
      "suggestions": [
        "Add comprehensive docstring with purpose, parameters, and examples"
      ],
      "has_examples": false,
      "has_parameters": false,
      "has_return_info": false
    },
    "_binary_image_to_binary_image": {
      "current_quality": "missing",
      "current_docstring": "",
      "suggestions": [
        "Add comprehensive docstring with purpose, parameters, and examples"
      ],
      "has_examples": false,
      "has_parameters": false,
      "has_return_info": false
    },
    "_byte_image_to_binary_image": {
      "current_quality": "missing",
      "current_docstring": "",
      "suggestions": [
        "Add comprehensive docstring with purpose, parameters, and examples"
      ],
      "has_examples": false,
      "has_parameters": false,
      "has_return_info": false
    },
    "get_alpha_outline": {
      "current_quality": "basic",
      "current_docstring": "You should set inner_radius>0 or outer_radius>0\n\ninclude_edges (bool): Has an effect when inner_radius>0 - if True, it assumes there's 0 alpha outside the image - and as a result can create an outline...",
      "suggestions": [
        "Add concrete usage examples with >>> syntax",
        "Document return value and type"
      ],
      "has_examples": false,
      "has_parameters": false,
      "has_return_info": false
    },
    "_cv_morphological_helper": {
      "current_quality": "basic",
      "current_docstring": "Used for erosion, dilation, and other functions.\nPlease see the documentation if you'd like to know what a morpholocical filter is:\nhttps://docs.opencv.org/3.0-beta/doc/py_tutorials/py_imgproc/py_morp...",
      "suggestions": [
        "Add concrete usage examples with >>> syntax",
        "Document function parameters and their types"
      ],
      "has_examples": false,
      "has_parameters": false,
      "has_return_info": false
    },
    "get_apriltag_image": {
      "current_quality": "good",
      "current_docstring": "Returns an image with the apriltag corresponding to the given value\nPlease note: the output images are of minimum resolution - they're very small!\n             this is what the size option is for. You...",
      "suggestions": [
        "Document return value and type",
        "Document supported image types and formats"
      ],
      "has_examples": true,
      "has_parameters": false,
      "has_return_info": false
    },
    "cv_distance_transform": {
      "current_quality": "good",
      "current_docstring": "Compute distance transform using OpenCV.\n\nArgs:\n    mask: 2D boolean array\n    distance_to: What are we returning distances to? Options:\n        - 'white': Regions where mask==True\n        - 'black': ...",
      "suggestions": [
        "Add concrete usage examples with >>> syntax",
        "Document return value and type"
      ],
      "has_examples": false,
      "has_parameters": true,
      "has_return_info": false
    }
  },
  "work_instructions": [
    "For each function in this package:",
    "1. Read the existing docstring (if any) and understand the function's purpose",
    "2. Examine the function's implementation to understand its behavior",
    "3. Check related functions (in context) to understand how they work together",
    "4. ENHANCE (don't replace) the docstring following the template:",
    "   - Keep original docstring if it exists",
    "   - Add 'Enhanced Documentation:' section with usage patterns",
    "   - Include concrete examples with >>> syntax",
    "   - Document parameters and return values",
    "   - Note related functions and when to use vs alternatives",
    "   - Add relevant tags for searchability",
    "5. Test your examples to ensure they work",
    "6. Update the appropriate tag files in documentation/tags/",
    "7. SPECIAL: Document the multiplexing pattern - how the base function dispatches to specific implementations"
  ],
  "quality_checklist": [
    "\u2610 Each function has enhanced docstring with purpose clearly explained",
    "\u2610 All parameters are documented with types and descriptions",
    "\u2610 Return values are documented with types and descriptions",
    "\u2610 At least one concrete example with >>> syntax that actually runs",
    "\u2610 Related functions are mentioned with explanations",
    "\u2610 Usage patterns and common scenarios are described",
    "\u2610 Relevant tags added for searchability",
    "\u2610 Function added to appropriate tag files in documentation/tags/",
    "\u2610 Examples tested and confirmed working",
    "\u2610 Cross-references to multiplexing patterns or _via_ variants documented"
  ]
}
{
  "root": "/opt/homebrew/lib/python3.10/site-packages/rp",
  "structure": {
    "web_evaluator.py": {
      "functions": [
        "_HandlerMaker",
        "run_server",
        "run_delegation_server",
        "launch_tmux_delegation_cluster",
        "interactive_mode",
        "create",
        "from_dict",
        "to_dict",
        "_exeval",
        "_json_dumps",
        "__repr__",
        "update_scope",
        "report_vars",
        "report_code",
        "parse_vars",
        "get_rp_js_code",
        "__init__",
        "evaluate",
        "_evaluate",
        "ping",
        "__repr__",
        "from_string",
        "from_client",
        "__hash__",
        "__eq__",
        "__init__",
        "register_client",
        "unregister_client",
        "register_clients",
        "unregister_clients",
        "_update",
        "evaluate",
        "_evaluate_client",
        "evaluate_all",
        "_rerank",
        "__init__",
        "load_clients",
        "clear",
        "register",
        "__repr__",
        "refresh_clients",
        "local_client",
        "roster",
        "delegator",
        "evaluate",
        "evaluate_all",
        "do_POST",
        "do_GET",
        "handle_py2py",
        "handle_web_query",
        "has_path_prefix",
        "handle_web_query_bytes",
        "handle_web_query_json",
        "handle_rp_js",
        "send_content_bytes",
        "send_content_str",
        "get_request_body",
        "stop",
        "evaluate_on_client",
        "refresh_loop",
        "get_param",
        "register_client_after_ping"
      ],
      "classes": [
        "Evaluation",
        "ThreadingHTTPServer",
        "Client",
        "ClientDelegator",
        "ClientRoster",
        "NotADelegationServerError",
        "DelegationClient",
        "_Handler"
      ],
      "imports": [
        "argparse",
        "ast",
        "os",
        "json",
        "shlex",
        "sys",
        "textwrap",
        "threading",
        "time",
        "traceback",
        "collections",
        "contextlib",
        "http.server",
        "socketserver",
        "urllib.parse",
        "rp",
        "requests",
        "readline",
        "readline"
      ],
      "size_lines": 1662,
      "has_main": true,
      "docstring": null
    },
    "matrix.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "rp",
        "unimatrix"
      ],
      "size_lines": 7,
      "has_main": false,
      "docstring": null
    },
    "tracetraptest.py": {
      "functions": [
        "debug_when",
        "debug_when_namespace_satisfies",
        "theres_a_value_in_namespace_such_that",
        "theres_a_value_equal_to",
        "set_pudb_trace_at_frame",
        "tracer",
        "_",
        "trap",
        "f",
        "trap"
      ],
      "classes": [],
      "imports": [
        "sys",
        "pudb",
        "rp",
        "pudb"
      ],
      "size_lines": 116,
      "has_main": true,
      "docstring": null
    },
    "fix_line_numbers.py": {
      "functions": [
        "extract_grep_pattern",
        "fix_line_references",
        "handle_file_line",
        "handle_line_ref",
        "handle_approx_line",
        "handle_approx_line2",
        "handle_simple_file_line",
        "find_file",
        "process_markdown_files",
        "show_diff",
        "main"
      ],
      "classes": [],
      "imports": [
        "os",
        "re",
        "glob",
        "shutil",
        "pathlib"
      ],
      "size_lines": 211,
      "has_main": true,
      "docstring": "Fix all line number references in documentation files by replacing them with grep patterns.\nCreates backup and shows diff."
    },
    "chainsaw.py": {
      "functions": [
        "f",
        "set_pudb_trace_at_frame",
        "trap_namespace_tracer",
        "tracer"
      ],
      "classes": [],
      "imports": [
        "pudb"
      ],
      "size_lines": 33,
      "has_main": false,
      "docstring": null
    },
    "documentation.py": {
      "error": "unterminated string literal (detected at line 1) (<unknown>, line 1)"
    },
    "flappy.py": {
      "functions": [
        "is_data",
        "main",
        "__init__",
        "__add__",
        "__mul__",
        "__repr__",
        "length",
        "normalize",
        "__init__",
        "bbox",
        "shape",
        "shape",
        "simulate",
        "collide",
        "draw"
      ],
      "classes": [
        "Vector",
        "Sprite"
      ],
      "imports": [
        "select",
        "sys",
        "termios",
        "time",
        "tty",
        "math",
        "random"
      ],
      "size_lines": 212,
      "has_main": false,
      "docstring": null
    },
    "scratchpad.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "re",
        "pathlib"
      ],
      "size_lines": 189,
      "has_main": false,
      "docstring": null
    },
    "r.py.python_2_to_3_temp.py": {
      "functions": [
        "load",
        "save"
      ],
      "classes": [],
      "imports": [
        "pyflann.exceptions",
        "binary_dataset",
        "dat_dataset",
        "npy_dataset",
        "hdf5_dataset",
        "os.path",
        "numpy"
      ],
      "size_lines": 36,
      "has_main": false,
      "docstring": null
    },
    "version.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 1,
      "has_main": false,
      "docstring": null
    },
    "ryan_zshrc.py": {
      "error": "invalid decimal literal (<unknown>, line 1)"
    },
    "rp_mpi.py": {
      "functions": [
        "print_verbose_stack_trace",
        "exec_in_new_thread",
        "eval_function_from_name",
        "accept_command",
        "outsourced",
        "wait_all",
        "parallel_mapper",
        "slave_loop",
        "start_slave",
        "exit_mpi",
        "test_1",
        "test_2",
        "wrapper",
        "parallel_map"
      ],
      "classes": [],
      "imports": [
        "rp",
        "mpi4py",
        "mpi4py",
        "stackprinter"
      ],
      "size_lines": 204,
      "has_main": false,
      "docstring": null
    },
    "r.py": {
      "functions": [
        "entuple",
        "detuple",
        "enlist",
        "delist",
        "itc",
        "run_func",
        "fog",
        "scoop",
        "seq_map",
        "par_map",
        "lazy_par_map",
        "seq",
        "par",
        "pam",
        "identity",
        "list_roll",
        "list_flatten",
        "product",
        "unique",
        "tic",
        "toc",
        "ptoc",
        "ptoctic",
        "seconds",
        "millis",
        "micros",
        "nanos",
        "get_process_cwd",
        "get_current_directory",
        "set_current_directory",
        "ConditionalContext",
        "currently_running_windows",
        "currently_running_posix",
        "currently_running_mac",
        "currently_running_linux",
        "terminal_supports_ansi",
        "terminal_supports_unicode",
        "fansi_is_enabled",
        "fansi_is_disabled",
        "disable_fansi",
        "enable_fansi",
        "without_fansi",
        "_transform_fansi_arg",
        "fansi",
        "_fansi_fix",
        "_legacy_fansi",
        "fansi_print",
        "fansi_printed",
        "print_fansi_reference_table",
        "_old_fansi_syntax_highlighting",
        "fansi_syntax_highlighting",
        "fansi_highlight_path",
        "fansi_pygments",
        "fansi_pygments_demo",
        "_get_local_clipboard_string",
        "_set_local_clipboard_string",
        "string_to_clipboard",
        "_copy_text_over_terminal",
        "string_from_clipboard",
        "accumulate_clipboard_text",
        "_rgb_to_grayscale",
        "grayscale_to_rgb",
        "gauss_blur",
        "flat_circle_kernel",
        "gaussian_kernel",
        "get_max_image_dimensions",
        "get_max_video_dimensions",
        "get_min_video_dimensions",
        "get_min_image_dimensions",
        "uniform_float_color_image",
        "blend_images",
        "overlay_images",
        "laplacian_blend",
        "get_checkerboard_image",
        "with_drop_shadow",
        "with_drop_shadows",
        "with_corner_radius",
        "with_image_glow",
        "with_image_glows",
        "with_corner_radii",
        "get_alpha_outline",
        "with_alpha_outline",
        "with_alpha_outlines",
        "get_progress_bar_image",
        "image_with_progress_bar",
        "video_with_progress_bar",
        "boomerang_video",
        "_get_executable",
        "_get_rife_executable",
        "_get_esrgan_executable",
        "slowmo_video_via_rife",
        "_crop_images_to_max_or_min_size",
        "crop_images_to_max_size",
        "crop_images_to_min_size",
        "crop_images_to_max_height",
        "crop_images_to_max_width",
        "crop_images_to_min_height",
        "crop_images_to_min_width",
        "crop_image_to_square",
        "crop_images_to_square",
        "crop_image_at_random_position",
        "get_random_crop_bounds",
        "get_center_crop_bounds",
        "trim_video",
        "trim_videos",
        "_trim_videos_to_same_length",
        "trim_videos_to_max_length",
        "trim_videos_to_min_length",
        "_concatenated_videos",
        "horizontally_concatenated_videos",
        "vertically_concatenated_videos",
        "max_filter",
        "min_filter",
        "med_filter",
        "range_filter",
        "grid2d",
        "grid2d_map",
        "_auto_interp_for_resize_image",
        "_resize_image_via_skimage",
        "resize_image",
        "xy_float_images",
        "xy_torch_matrices",
        "_is_instance_of_module_class",
        "is_numpy_array",
        "is_torch_tensor",
        "is_torch_image",
        "is_torch_module",
        "_is_pandas_dataframe",
        "_is_pandas_series",
        "_is_pandas_iloc_iterable",
        "is_pil_image",
        "_is_skia_image",
        "_is_easydict",
        "random_index",
        "random_element",
        "random_choice",
        "random_permutation",
        "is_a_permutation",
        "inverse_permutation",
        "randint",
        "randints",
        "randint_complex",
        "randints_complex",
        "random_float",
        "random_float_complex",
        "random_floats",
        "random_floats_complex",
        "random_chance",
        "random_batch",
        "random_batch_up_to",
        "random_batch_with_replacement",
        "random_substring",
        "shuffled",
        "random_parallel_batch",
        "temporary_random_seed",
        "temporary_numpy_random_seed",
        "temporary_torch_random_seed",
        "seed_all",
        "temporary_seed_all",
        "run_as_new_thread",
        "run_as_new_process",
        "is_valid_url",
        "_erase_terminal_line",
        "load_files",
        "_load_files",
        "load_animated_gif",
        "load_image_from_clipboard",
        "_paste_from_clipboard",
        "_copy_image_to_clipboard_via_pyjpgclipboard",
        "_copy_image_to_clipboard_via_copykitten",
        "copy_image_to_clipboard",
        "load_image",
        "load_rgb_image",
        "load_images",
        "_load_images_via_pdf2image",
        "load_pdf_as_images",
        "get_pdf_num_pages",
        "load_image_from_file",
        "_init_pillow_heif",
        "_load_image_from_file_via_PIL",
        "_load_image_from_file_via_imageio",
        "_load_image_from_file_via_scipy",
        "_load_image_from_file_via_opencv",
        "_disable_insecure_request_warning",
        "load_image_from_url",
        "load_image_from_matplotlib",
        "_get_openexr_image_dimensions",
        "is_valid_openexr_file",
        "get_openexr_channels",
        "load_openexr_image",
        "_encode_image_to_bytes",
        "encode_image_to_bytes",
        "encode_images_to_bytes",
        "decode_images_from_bytes",
        "encode_image_to_base64",
        "encode_images_to_base64",
        "decode_image_from_base64",
        "decode_images_from_base64",
        "decode_bytes_to_image",
        "save_image",
        "save_images",
        "temp_saved_image",
        "save_image_to_imgur",
        "save_image_jpg",
        "save_image_webp",
        "save_image_avif",
        "save_image_jxl",
        "save_animated_webp",
        "save_openexr_image",
        "_get_files_from_paths",
        "convert_image_file",
        "convert_image_files",
        "text_to_speech_via_apple",
        "text_to_speech_via_google",
        "text_to_speech_voices_comparison",
        "text_to_speech",
        "_fig",
        "set_numpy_print_options",
        "load_mp3_file",
        "load_wav_file",
        "adjust_samplerate",
        "load_sound_file",
        "save_wav",
        "play_sound_from_samples",
        "play_sound_file",
        "play_sound_file_via_afplay",
        "play_sound_file_via_pygame",
        "stop_sound",
        "mp3_to_wav",
        "wav_to_mp3",
        "convert_audio_file",
        "_display_image_in_notebook_via_ipyplot",
        "_display_image_in_notebook_via_ipython",
        "add_ipython_kernel",
        "display_video",
        "_make_video_dimensions_even",
        "_display_video_via_mediapy",
        "display_video_in_notebook",
        "_display_video_in_notebook",
        "display_video_in_notebook_webp",
        "_display_downloadable_image_in_notebook_via_ipython",
        "display_image_in_notebook",
        "_image_to_html",
        "display_image",
        "with_alpha_checkerboard",
        "with_alpha_checkerboards",
        "display_alpha_image",
        "_display_image_slideshow_animated",
        "display_qr_code_in_terminal",
        "display_website_in_terminal",
        "display_image_slideshow",
        "display_color_255",
        "display_float_color",
        "bar_graph",
        "histogram_in_terminal",
        "line_graph_via_plotille",
        "line_graph_live",
        "line_graph_in_terminal",
        "line_graph",
        "display_polygon",
        "block",
        "display_update",
        "display_clear",
        "clf",
        "display_cv_color_histogram",
        "display_cv_color_histograms",
        "_minmax_indices",
        "min_valued_indices",
        "max_valued_indices",
        "min_valued_elements",
        "max_valued_elements",
        "max_valued_index",
        "min_valued_index",
        "blend",
        "iblend",
        "interp",
        "linterp",
        "matching_keys",
        "matching_indices",
        "gather",
        "pop_gather",
        "gather_vars",
        "bundle_vars",
        "gather_attrs",
        "destructure",
        "gather_args",
        "gather_args_call",
        "gather_args_wrap",
        "gather_args_bind",
        "get_current_function",
        "get_current_function_name",
        "gather_args_recursive_call",
        "replace_if_none",
        "squelch_call",
        "squelch_wrap",
        "rebind_globals_to_module",
        "globalize_locals",
        "_filter_dict_via_fzf",
        "list_to_index_dict",
        "invert_dict",
        "invert_list_to_dict",
        "dict_to_list",
        "list_set",
        "display_dict",
        "display_list",
        "display_markdown",
        "_get_carbon_url",
        "display_code_cell",
        "_muted_stdout_write",
        "suppress_console_output",
        "restore_console_output",
        "force_suppress_console_output",
        "force_restore_console_output",
        "force_suppress_warnings",
        "force_restore_warnings",
        "TemporarilySuppressConsoleOutput",
        "_translate_timezone",
        "format_date",
        "format_current_date",
        "_method_decorator_metaclass",
        "get_current_timezone",
        "rinsp",
        "_cv_initialize_cameras",
        "_cv_print_cam_props",
        "load_image_from_webcam",
        "load_webcam_stream",
        "load_image_from_screenshot_via_mss",
        "load_image_from_screenshot",
        "load_screenshot_stream",
        "_load_image_from_screenshot_via_pyscreenshot",
        "_load_image_from_webcam_in_jupyter_notebook",
        "record_mono_audio",
        "MIDI_output",
        "MIDI_control",
        "MIDI_control_precisely",
        "MIDI_jiggle_control",
        "MIDI_note_on",
        "MIDI_note_off",
        "MIDI_pitch_bend",
        "MIDI_all_notes_off",
        "MIDI_breath",
        "MIDI_input",
        "cmp_to_key",
        "sign",
        "load_pickled_value",
        "save_pickled_value",
        "string_to_text_file",
        "save_text_file",
        "text_file_to_string",
        "load_file_lines",
        "save_file_lines",
        "load_text_files",
        "append_line_to_file",
        "as_easydict",
        "as_easydicts",
        "load_json",
        "load_jsons",
        "save_json",
        "load_tsv",
        "load_parquet",
        "load_yaml_file",
        "load_yaml_files",
        "parse_yaml",
        "parse_dyaml",
        "load_dyaml_file",
        "touch_file",
        "is_iterable",
        "get_my_local_ip_address",
        "get_my_mac_address",
        "get_my_public_ip_address",
        "deepcopy_multiply",
        "assert_equality",
        "get_nested_value",
        "get_nested_attr",
        "shell_command",
        "get_system_commands",
        "_get_cached_system_commands",
        "system_command_exists",
        "add_to_env_path",
        "printed",
        "get_plt",
        "display_dot",
        "display_path",
        "_translate_offline",
        "translate",
        "sync_sorted",
        "by_number",
        "sorted_by_number",
        "sorted_by_len",
        "sorted_by_attr",
        "sorted_dict",
        "_string_with_any",
        "starts_with_any",
        "ends_with_any",
        "_contains_func_y",
        "contains_any",
        "contains_all",
        "in_any",
        "in_all",
        "contains_sort",
        "sync_shuffled",
        "full_range",
        "sine_tone_sampler",
        "triangle_tone_sampler",
        "sawtooth_tone_sampler",
        "square_tone_sampler",
        "play_tone",
        "play_semitone",
        "semitone_to_hz",
        "play_chord",
        "mini_editor",
        "get_terminal_size",
        "get_terminal_width",
        "get_terminal_height",
        "is_namespaceable",
        "is_literal",
        "clip_string_width",
        "properties_to_xml",
        "split_including_delimiters",
        "split_letters_from_digits",
        "split_camel_case",
        "split_python_tokens",
        "clamp",
        "int_clamp",
        "float_clamp",
        "get_current_exception",
        "pop_exception_traceback",
        "print_verbose_stack_trace",
        "print_stack_trace",
        "print_highlighted_stack_trace",
        "print_rich_stack_trace",
        "get_rich_traceback_string",
        "_get_stack_trace_string",
        "audio_stretch",
        "cartesian_to_polar",
        "complex_to_polar",
        "riemann_sum",
        "riemann_mean",
        "fourier",
        "discrete_fourier",
        "matrix_to_tuples",
        "perpendicular_bisector_function",
        "harmonic_analysis_via_least_squares",
        "cluster_by_key",
        "cluster_by_attr",
        "chunk_by_attr",
        "chunk_by_key",
        "cluster_filter",
        "proportion_to_digits",
        "digits_to_proportion",
        "encode_float_matrix_to_rgba_byte_image",
        "decode_float_matrix_from_rgba_byte_image",
        "print_all_git_paths",
        "is_int_literal",
        "is_string_literal",
        "indentify",
        "unindent",
        "lrstrip_all_lines",
        "search_replace_simul",
        "shorten_url",
        "unshorten_url",
        "load_gist",
        "shorten_github_url",
        "save_gist",
        "_fix_CERTIFICATE_VERIFY_FAILED_errors",
        "get_arxiv_bibtex",
        "random_namespace_hash",
        "random_passphrase",
        "latex_image",
        "display_image_in_terminal",
        "display_image_in_terminal_color",
        "display_image_in_terminal_imgcat",
        "display_video_in_terminal_color",
        "auto_canny",
        "skeletonize",
        "_skimage_skeletonize",
        "_cv_skeletonize",
        "get_edge_drawing",
        "print_latex_image",
        "_get_prompt_style",
        "_get_cdh_back_names",
        "_user_path_ans",
        "_cdh_back_query",
        "_get_cd_history",
        "_add_to_cd_history",
        "_update_cd_history",
        "_cdh_folder_is_protected",
        "_clean_cd_history",
        "set_prompt_style",
        "split_into_sublists",
        "split_into_n_sublists",
        "split_into_subdicts",
        "split_into_n_subdicts",
        "join_with_separator",
        "rotate_image",
        "rotate_images",
        "_rotate_rgb_image",
        "open_url_in_web_browser",
        "google_search_url",
        "open_google_search_in_web_browser",
        "reload_module",
        "reload_rp",
        "_print_status",
        "_eta",
        "get_all_submodule_names",
        "merged_dicts",
        "merged_prefixed_dicts",
        "merged_suffixed_dicts",
        "keys_and_values_to_dict",
        "get_source_code",
        "get_source_file",
        "edit",
        "_static_calldefs",
        "_get_object_lineno",
        "vim",
        "is_valid_python_syntax",
        "_is_valid_exeval_python_syntax",
        "is_valid_sh_syntax",
        "is_valid_bash_syntax",
        "is_valid_zsh_syntax",
        "get_default_shell",
        "_ipython_exeval_maker",
        "_parse_exeval_code",
        "exeval",
        "_display_pterm_flamechart",
        "_truncate_string_floats",
        "_pterm_exeval",
        "_rp_show_custom_line_profile",
        "get_last_line_profile_results",
        "dec2bin",
        "run_until_complete",
        "_multi_line_python_input",
        "_get_pyin_settings",
        "_load_pyin_settings_file",
        "_save_pyin_settings_file",
        "_delete_pyin_settings_file",
        "_set_session_title",
        "_get_session_title",
        "_get_default_session_title",
        "_set_default_session_title",
        "_set_pterm_theme",
        "python_input",
        "_dhistory_helper",
        "_reload_modules",
        "launch_xonsh",
        "with_line_numbers",
        "number_of_lines",
        "number_of_lines_in_terminal",
        "number_of_lines_in_file",
        "_all_files_listed_in_exception_traceback",
        "read_symlink",
        "make_symlink_absolute",
        "make_symlink_relative",
        "read_symlinks",
        "make_symlinks_relative",
        "make_symlinks_absolute",
        "symlink_is_broken",
        "make_hardlink",
        "replace_symlink_with_hardlink",
        "replace_symlinks_with_hardlinks",
        "make_symlink",
        "is_symbolic_link",
        "symlink_move",
        "_guess_mimetype",
        "is_image_file",
        "is_video_file",
        "is_sound_file",
        "is_utf8_file",
        "display_file_tree",
        "_line_numbered_string",
        "_vimore",
        "_load_text_from_file_or_url",
        "_warnings_on",
        "_warnings_off",
        "_warnings_are_off",
        "_mv",
        "_absolute_path_ans",
        "_relative_path_ans",
        "_rma",
        "_cpah",
        "_get_env_info",
        "_view_image_via_textual_imageview",
        "_ISM",
        "_which",
        "_whiches",
        "_ism_whiches",
        "_view_with_pyfx",
        "_view_json_via_jtree",
        "_view_interactive_json",
        "_get_processor_name",
        "_display_columns",
        "_input_select_multiple_history_multiline",
        "_input_select_multiple_paragraphs",
        "_autocomplete_lss_name",
        "_input_select_multiple_history",
        "_pterm_fuzzy_cd",
        "_ric_current_candidate_fuzzy_matches",
        "get_number_of_github_gists",
        "_get_all_github_gists_info",
        "_download_rp_gists",
        "_input_select_rp_gists",
        "_pterm_cd",
        "_profile_vim_startup_plugins",
        "_view_markdown_in_terminal",
        "_get_function_names",
        "_convert_powerpoint_file",
        "_write_default_gitignore",
        "_add_pterm_prefix_shortcut",
        "_add_pterm_command_shortcuts",
        "_get_pterm_verbose",
        "no_gc",
        "pseudo_terminal",
        "set_process_title",
        "get_process_title",
        "parenthesizer_automator",
        "timeout",
        "save_animated_png",
        "battery_percentage",
        "battery_plugged_in",
        "battery_seconds_remaining",
        "total_disc_bytes",
        "human_readable_file_size",
        "string_to_file_size",
        "get_file_size",
        "num_args",
        "_rich_inspect",
        "_rich_print",
        "pretty_print",
        "repr_kwargs_dict",
        "repr_multiline",
        "repr_vars",
        "has_len",
        "as_example_comment",
        "string_transpose",
        "print_to_string",
        "print_lines",
        "fansi_print_lines",
        "reduced_row_echelon_form",
        "all_rolls",
        "circular_diff",
        "circular_quotient",
        "circular_convolve",
        "circular_cross_correlate",
        "circular_auto_correlate",
        "circular_gaussian_blur",
        "circular_extrema_indices",
        "circ_diff_inverse",
        "gcd",
        "lcm",
        "product",
        "ncr",
        "get_process_memory",
        "get_process_username",
        "get_username",
        "get_process_id",
        "get_process_exists",
        "get_process_start_date",
        "kill_process",
        "kill_processes",
        "search_processes",
        "regex_match",
        "regex_replace",
        "ring_terminal_bell",
        "_pterm",
        "clear_terminal_screen",
        "set_cursor_to_bar",
        "set_cursor_to_box",
        "set_cursor_to_underscore",
        "line_number",
        "is_number",
        "_refresh_autocomplete_module_list",
        "line_join",
        "powerset",
        "print_fix",
        "remove_all_whitespace",
        "cv_bgr_rgb_swap",
        "cv_imshow",
        "_cv_helper",
        "_init_contour_class",
        "cv_find_contours",
        "cv_simplify_contour",
        "cv_distance_to_contour",
        "cv_closest_contour_point",
        "cv_closest_contour",
        "cv_draw_contours",
        "cv_draw_contour",
        "cv_draw_rectangle",
        "cv_contour_length",
        "cv_contour_area",
        "cv_draw_circle",
        "cv_draw_circles",
        "cv_draw_arrow",
        "cv_draw_arrows",
        "cv_line_graph",
        "rgb_histogram_image",
        "byte_image_histogram",
        "cv_apply_affine_to_image",
        "cv_manually_selected_contours",
        "cv_manually_selected_contour",
        "cv_distance_transform",
        "cosine_similarity",
        "fourier_descriptor",
        "fourier_descriptor_distance",
        "fourier_descriptor_similarity",
        "cv_contour_match",
        "cv_best_match_contour",
        "cv_best_match_contours",
        "_cv_morphological_helper",
        "cv_erode",
        "cv_dilate",
        "cv_gauss_blur",
        "is_opaque_image",
        "is_transparent_image",
        "_alpha_weighted_rgba_image_func",
        "rotation_matrix",
        "loop_direction_2d",
        "is_clockwise",
        "is_counter_clockwise",
        "cv_make_clockwise",
        "scatter_plot",
        "line_split",
        "line_join",
        "append_uniform_row",
        "append_zeros_row",
        "append_ones_row",
        "append_uniform_column",
        "append_zeros_column",
        "append_ones_column",
        "squared_euclidean_distance",
        "euclidean_distance",
        "differential_euclidean_distances",
        "cumulative_euclidean_distances",
        "evenly_split_path",
        "is_complex_vector",
        "is_points_array",
        "is_cv_contour",
        "_points_array_to_complex_vector",
        "_points_array_to_cv_contour",
        "_complex_vector_to_points_array",
        "_complex_vector_to_cv_contour",
        "_cv_contour_to_points_array",
        "_cv_contour_to_complex_vector",
        "as_complex_vector",
        "as_points_array",
        "as_cv_contour",
        "contours_to_image",
        "contour_to_image",
        "squared_distance_matrix",
        "distance_matrix",
        "closest_points",
        "least_squares_euclidean_affine",
        "least_squares_affine",
        "translation_affine",
        "rotation_affine_2d",
        "inverse_affine",
        "identity_affine",
        "combined_affine",
        "apply_affine",
        "icp_least_squares_euclidean_affine",
        "is_euclidean_affine_matrix",
        "is_affine_matrix",
        "euclidean_affine_to_complex_linear_coeffs",
        "complex_linear_coeffs_to_euclidean_affine",
        "_torch_tensor_to_bytes_for_hashing",
        "handy_hash",
        "_set_hash",
        "_dict_hash",
        "_list_hash",
        "_tuple_hash",
        "_slice_hash",
        "args_hash",
        "memoized",
        "memoized_property",
        "_omni_load_animated_image",
        "_omni_save_animated_image",
        "_omni_save_default_extension",
        "_omni_load",
        "_omni_save",
        "file_cache_call",
        "file_cache_wrap",
        "_get_hash",
        "get_md5_hash",
        "get_sha256_hash",
        "_labeled_image_text_to_image",
        "labeled_image",
        "_images_are_all_same_size",
        "labeled_images",
        "labeled_videos",
        "_cv_char_to_image",
        "_cv_text_to_image_monospace",
        "cv_text_to_image",
        "_single_line_cv_text_to_image",
        "_slow_pil_text_to_image",
        "as_rgba_float_color",
        "as_rgb_float_color",
        "as_rgba_float_colors",
        "as_rgb_float_colors",
        "_get_font_path",
        "get_font_supported_chars",
        "pil_text_to_image",
        "skia_text_to_image",
        "skia_stamp_image",
        "download_google_font",
        "download_font",
        "download_fonts",
        "download_google_fonts",
        "get_downloaded_fonts",
        "download_all_google_fonts",
        "_get_file_path",
        "strip_file_extension",
        "strip_file_extensions",
        "get_file_extension",
        "get_file_extensions",
        "with_file_extension",
        "with_file_extensions",
        "with_file_name",
        "with_folder_name",
        "get_path_name",
        "get_path_names",
        "get_relative_path",
        "get_relative_paths",
        "get_absolute_path",
        "_detuple_paths",
        "get_absolute_paths",
        "has_file_extension",
        "date_modified",
        "date_created",
        "date_accessed",
        "get_all_paths",
        "get_all_files",
        "get_all_image_files",
        "get_all_runnable_python_files",
        "get_all_folders",
        "get_subfolders",
        "_os_listdir_files",
        "folder_is_empty",
        "get_random_file",
        "get_random_files",
        "get_random_folders",
        "get_random_folder",
        "_has_globbing_characters",
        "rp_iglob",
        "rp_glob",
        "fractional_integral_in_frequency_domain",
        "best_flann_dict_matches",
        "knn_clusters",
        "r_transform",
        "r_transform_inverse",
        "horizontally_concatenated_images",
        "vertically_concatenated_images",
        "grid_concatenated_images",
        "tiled_images",
        "tiled_videos",
        "vertically_flipped_image",
        "horizontally_flipped_image",
        "least_squares_regression_line_coeffs",
        "magnitude",
        "normalized",
        "_get_javascript_runtime",
        "javascript",
        "javascript_console",
        "_get_byte_to_binary_grayscale_image_floyd_steinburg_dithering_function",
        "_binary_floyd_steinburg_dithering",
        "is_image",
        "is_grayscale_image",
        "is_rgb_image",
        "is_rgba_image",
        "_grayscale_image_to_grayscale_image",
        "_grayscale_image_to_rgb_image",
        "_grayscale_image_to_rgba_image",
        "_rgb_image_to_grayscale_image",
        "_rgb_image_to_rgb_image",
        "_rgb_image_to_rgba_image",
        "_rgba_image_to_grayscale_image",
        "_rgba_image_to_rgb_image",
        "_rgba_image_to_rgba_image",
        "as_grayscale_image",
        "as_rgb_image",
        "as_rgba_image",
        "is_float_image",
        "is_byte_image",
        "is_binary_image",
        "_clamp_float_image",
        "_float_image_dtype",
        "_float_image_to_float_image",
        "_float_image_to_byte_image",
        "_float_image_to_binary_image",
        "_byte_image_to_float_image",
        "_byte_image_to_byte_image",
        "_byte_image_to_binary_image",
        "_binary_image_to_float_image",
        "_binary_image_to_byte_image",
        "_binary_image_to_binary_image",
        "as_float_image",
        "as_byte_image",
        "as_binary_image",
        "_images_conversion",
        "as_float_images",
        "as_byte_images",
        "as_binary_images",
        "as_rgb_images",
        "as_rgba_images",
        "as_grayscale_images",
        "_common_image_channel_converter",
        "_common_image_dtype_converter",
        "_common_image_converter",
        "random_rgb_byte_color",
        "random_rgba_byte_color",
        "random_grayscale_byte_color",
        "random_rgb_float_color",
        "random_rgba_float_color",
        "random_grayscale_float_color",
        "random_rgb_binary_color",
        "random_rgba_binary_color",
        "random_grayscale_binary_color",
        "random_hex_color",
        "random_rgb_byte_colors",
        "random_rgba_byte_colors",
        "random_grayscale_byte_colors",
        "random_rgb_float_colors",
        "random_rgba_float_colors",
        "random_grayscale_float_colors",
        "random_rgb_binary_colors",
        "random_rgba_binary_colors",
        "random_grayscale_binary_colors",
        "random_hex_colors",
        "is_color",
        "is_binary_color",
        "is_byte_color",
        "is_float_color",
        "hex_color_to_byte_color",
        "hex_color_to_float_color",
        "byte_color_to_hex_color",
        "byte_color_to_float_color",
        "float_color_to_byte_color",
        "float_color_to_hex_color",
        "float_color_to_byte_color",
        "float_colors_to_byte_colors",
        "float_colors_to_hex_colors",
        "byte_colors_to_hex_colors",
        "byte_colors_to_float_colors",
        "hex_colors_to_byte_colors",
        "hex_colors_to_float_colors",
        "_altbw",
        "_get_rp_color",
        "color_name_to_float_color",
        "color_name_to_byte_color",
        "color_name_to_hex_color",
        "get_color_hue",
        "get_color_saturation",
        "get_color_brightness",
        "get_image_dimensions",
        "get_image_height",
        "get_image_width",
        "get_video_height",
        "get_video_heights",
        "get_video_width",
        "get_video_widths",
        "running_in_ipython",
        "get_notebook_name",
        "get_notebook_path",
        "launch_terminal_in_colab",
        "running_in_google_colab",
        "get_cloud_provider",
        "running_in_gcp",
        "_is_python_exe_root",
        "running_in_ssh",
        "running_in_mamba",
        "running_in_conda",
        "running_in_venv",
        "get_conda_name",
        "get_venv_name",
        "running_in_tmux",
        "running_in_docker",
        "split_tensor_into_regions",
        "apply_tensor_mapping",
        "bordered_image_solid_color",
        "bordered_images_solid_color",
        "get_principle_components",
        "cv_box_blur",
        "_highlighted_query_results",
        "_rinsp_search_helper",
        "rinsp_search",
        "as_numpy_array",
        "input_multiline",
        "input_conditional",
        "input_yes_no",
        "input_integer",
        "input_default",
        "input_select",
        "input_select_multiple",
        "get_youtube_video_url",
        "_is_youtube_video_url",
        "get_youtube_video_transcript",
        "download_youtube_video",
        "_get_youtube_video_data_via_embeddify",
        "get_youtube_video_title",
        "get_youtube_video_thumbnail",
        "_moviepy_VideoFileClip",
        "_get_video_file_duration_via_moviepy",
        "get_video_file_duration",
        "_get_video_file_framerate_via_moviepy",
        "_get_video_file_framerate_via_ffprobe",
        "get_video_file_framerate",
        "_load_video_stream",
        "load_video_stream",
        "load_video_streams",
        "load_video",
        "load_videos",
        "save_video_avi",
        "_get_default_video_path",
        "_as_video_bitrate",
        "_as_video_quality",
        "_cv_save_video_mp4",
        "_cv_save_video_mp4",
        "set_save_video_mp4_default_backend",
        "save_video_mp4",
        "save_video_gif_via_pil",
        "convert_to_gif_via_ffmpeg",
        "convert_to_gifs_via_ffmpeg",
        "save_video",
        "encode_video_to_bytes",
        "decode_video_from_bytes",
        "add_audio_to_video_file",
        "change_video_file_framerate",
        "change_video_file_framerates",
        "concat_mp4_files",
        "directory_exists",
        "is_empty_folder",
        "file_exists",
        "path_exists",
        "rename_path",
        "move_path",
        "swap_paths",
        "delete_file",
        "delete_folder",
        "delete_symlink",
        "delete_path",
        "_delete_paths_helper",
        "delete_paths",
        "delete_files",
        "delete_folders",
        "copy_path",
        "copy_to_folder",
        "copy_directory",
        "get_home_directory",
        "copy_file",
        "copy_paths",
        "get_path_parent",
        "get_paths_parents",
        "make_directory",
        "make_parent_directory",
        "take_directory",
        "make_directories",
        "delete_all_paths_in_directory",
        "delete_all_files_in_directory",
        "path_join",
        "path_split",
        "get_unique_copy_path",
        "get_cutscene_frame_numbers",
        "remove_duplicate_frames",
        "send_text_message",
        "shift_image",
        "roll_image",
        "crop_image",
        "crop_images",
        "crop_videos",
        "crop_videos_to_min_size",
        "crop_videos_to_max_size",
        "crop_image_zeros",
        "cv_contour_to_segment",
        "whiten_points_covariance",
        "visible_string_ljust",
        "visible_string_rjust",
        "visible_string_center",
        "make_string_rectangular",
        "string_is_rectangular",
        "horizontally_concatenated_strings",
        "vertically_concatenated_strings",
        "wrap_string_to_width",
        "bordered_string",
        "simple_boxed_string",
        "strip_ansi_escapes",
        "visible_string_length",
        "string_width",
        "string_height",
        "_pad_string_height",
        "pad_to_same_number_of_lines",
        "pad_string_to_dims",
        "prime_number_generator",
        "edit_distance",
        "edit_image_in_terminal",
        "timeout",
        "_get_inflect_engine",
        "is_plural_noun",
        "is_singular_noun",
        "is_singular_noun_of",
        "is_plural_noun_of",
        "plural_noun",
        "singular_noun",
        "number_to_words",
        "words_to_number",
        "_get_parts_of_speech_via_nltk",
        "_nltk_wordnet_is_installed",
        "_make_sure_nltk_has_wordnet_installed",
        "is_a_verb",
        "is_an_adjective",
        "is_a_noun",
        "get_all_english_words",
        "_get_all_english_words_lowercase",
        "is_an_english_word",
        "split_sentences",
        "_ensure_punkt_downloaded",
        "_get_punkt_languages",
        "connected_to_internet",
        "_string_pager_via_pypager",
        "_string_pager_via_click",
        "_string_pager_via_less",
        "string_pager",
        "_get_pynput_mouse_controller",
        "get_mouse_position",
        "get_mouse_x",
        "get_mouse_y",
        "set_mouse_position",
        "record_mouse_positions",
        "playback_mouse_positions",
        "mouse_left_click",
        "mouse_right_click",
        "mouse_middle_click",
        "mouse_left_press",
        "mouse_right_press",
        "mouse_middle_press",
        "mouse_left_release",
        "mouse_right_release",
        "mouse_middle_release",
        "get_monitor_resolution",
        "get_number_of_monitors",
        "unicode_loading_bar",
        "get_box_char_bar_graph",
        "get_scope",
        "_get_visible_scope",
        "get_all_importable_module_names",
        "get_module_path_from_name",
        "get_module_path",
        "is_a_module",
        "date_to_epoch_seconds",
        "date_to_epoch_millis",
        "epoch_seconds_to_date",
        "epoch_millis_to_date",
        "get_current_date",
        "string_to_date",
        "open_file_with_default_application",
        "mean",
        "median",
        "norm_cdf",
        "norm_pdf",
        "inverse_norm_cdf",
        "s3_list_objects",
        "is_s3_url",
        "is_gs_url",
        "download_url",
        "download_urls",
        "download_url_to_cache",
        "download_urls_to_cache",
        "get_cache_file_path",
        "get_cache_file_paths",
        "debug",
        "_tensorify",
        "is_a_matrix",
        "is_a_square_matrix",
        "square_matrix_size",
        "prime_factors",
        "set_os_volume",
        "fuzzy_string_match",
        "get_english_synonyms_via_nltk",
        "_datamuse_words_request",
        "get_english_synonyms_via_datamuse",
        "get_english_related_words_via_datamuse",
        "get_english_antonyms_via_datamuse",
        "get_english_rhymes_via_datamuse",
        "get_english_synonyms",
        "fibonacci",
        "inverse_fibonacci",
        "graham_scan",
        "convex_hull",
        "_point_on_edge",
        "_edges_intersect",
        "paths_intersect",
        "_edge_intersection_positions",
        "path_intersections",
        "path_intersects_point",
        "reduce_wrap",
        "longest_common_prefix",
        "longest_common_suffix",
        "longest_common_substring",
        "input_keypress",
        "input_select_path",
        "input_select_folder",
        "input_select_file",
        "input_select_serial_device_id",
        "temporary_file_path",
        "python_2_to_3",
        "strip_python_docstrings",
        "strip_python_comments",
        "strip_trailing_whitespace",
        "delete_empty_lines",
        "propagate_whitespace",
        "_get_ryan_rprc_path",
        "_set_ryan_rprc",
        "get_vim_python_executable",
        "_vim_pip_install",
        "_set_ryan_ranger_config",
        "_set_ryan_vimrc",
        "_set_ryan_xonshrc",
        "_sort_imports_via_isort",
        "clean_imports_via_unimport",
        "_set_ryan_tmux_conf",
        "_run_sys_command",
        "_ensure_installed",
        "_brew_install",
        "_ensure_brew_installed",
        "_ensure_wget_installed",
        "_ensure_curl_installed",
        "_ensure_rclone_installed",
        "_ensure_ffmpeg_installed",
        "_ensure_claudecode_installed",
        "_ensure_gemini_cli_installed",
        "_ensure_snap_installed",
        "_ensure_nvtop_installed",
        "_ensure_zsh_installed",
        "_install_oh_my_zsh",
        "_ensure_viddy_installed",
        "_ensure_tmux_installed",
        "_ensure_npm_installed",
        "_ensure_nvm_installed",
        "_ensure_node_installed",
        "_ensure_git_installed",
        "_install_ollama",
        "_ensure_ollama_server_running",
        "_load_ryan_lazygit_config",
        "_install_lazygit",
        "_ensure_filebrowser_installed",
        "_ensure_cog_installed",
        "_run_bashtop",
        "_disable_terminal_mouse_reporting",
        "_terminal_move_cursor_to_top_left",
        "_terminal_move_cursor_to_bottom_left",
        "_terminal_move_cursor_to_bottom_and_new_line",
        "_run_ai_cli_coder",
        "_run_claude_code",
        "_run_gemini_cli",
        "_configure_filebrowser",
        "_run_filebrowser",
        "get_port_is_taken",
        "get_next_free_port",
        "get_all_taken_ports",
        "get_process_using_port",
        "compress_bytes",
        "decompress_bytes",
        "can_convert_object_to_bytes",
        "_dill_dumps",
        "object_to_bytes",
        "object_to_base64",
        "base64_to_object",
        "bytes_to_object",
        "encode_bytes_to_image",
        "decode_image_to_bytes",
        "_web_copy",
        "web_copy",
        "web_paste",
        "tmux_copy",
        "tmux_paste",
        "local_copy",
        "local_paste",
        "_run_tmux_command",
        "tmux_get_current_pane_index",
        "tmux_get_current_window_index",
        "tmux_get_current_window_name",
        "tmux_get_current_session_index",
        "tmux_get_current_session_name",
        "_get_all_tmux_windows",
        "_tmux_close_windows",
        "tmux_close_windows_to_left",
        "tmux_close_windows_to_right",
        "tmux_close_other_windows",
        "tmux_close_other_sessions",
        "tmux_detach_other_clients",
        "_get_current_tmux_client",
        "_get_all_tmux_clients",
        "tmux_get_all_session_names",
        "tmux_get_unique_session_name",
        "tmux_get_current_session_name",
        "tmux_session_exists",
        "tmux_kill_session",
        "tmux_kill_sessions",
        "tmux_type_in_all_panes",
        "tmux_get_scrollback",
        "_tmux_reset_all_panes",
        "tmuxp_create_session_yaml",
        "tmuxp_launch_session_from_yaml",
        "_extract_code_cells_from_ipynb",
        "exec_ipynb",
        "_get_jupyter_output_widget",
        "extract_code_from_ipynb",
        "_get_facebook_client",
        "send_facebook_message",
        "get_all_facebook_messages",
        "explore_torch_module",
        "record_torch_module_forward_stats",
        "visualize_pytorch_model",
        "get_sinusoidal_positional_encodings",
        "inverted_color",
        "inverted_image",
        "inverted_images",
        "make_zip_file_from_folder",
        "extract_zip_file",
        "_extract_archive_via_pyunpack",
        "_maybe_unbury_folder",
        "get_normal_map",
        "sobel_edges",
        "currently_in_a_tty",
        "currently_running_desktop",
        "_maybe_display_string_in_pager",
        "_fd",
        "get_image_file_dimensions",
        "get_video_file_shape",
        "get_video_file_num_frames",
        "get_video_file_height",
        "get_video_file_width",
        "_hsv_to_rgb_via_numpy",
        "_hsv_to_rgb_via_numba",
        "_rgb_to_hsv_via_numpy",
        "_rgb_to_hsv_via_numba",
        "hsv_to_rgb",
        "rgb_to_hsv",
        "get_image_hue",
        "get_image_saturation",
        "get_image_value",
        "get_image_red",
        "get_image_green",
        "get_image_blue",
        "_with_image_channel",
        "with_image_red",
        "with_image_green",
        "with_image_blue",
        "with_image_hue",
        "shift_image_hue",
        "with_image_saturation",
        "with_image_brightness",
        "hsv_to_rgb_float_color",
        "float_color_to_ansi256",
        "get_rgb_byte_color_identity_mapping_image",
        "apply_colormap_to_image",
        "zalgo_text",
        "big_ascii_text",
        "bytes_to_file",
        "file_to_bytes",
        "file_to_base64",
        "file_to_object",
        "object_to_file",
        "bytes_to_base64",
        "base64_to_bytes",
        "bytes_to_base16",
        "base16_to_bytes",
        "func_call_to_shell_command",
        "_call_from_base64_string",
        "_launch_ranger",
        "curl",
        "curl_bytes",
        "get_computer_name",
        "cv_image_filter",
        "random_rotation_matrix",
        "wordcloud_image",
        "display_pandas_correlation_heatmap",
        "view_table",
        "launch_visidata",
        "_write_to_pterm_hist",
        "_prepare_cv_image",
        "cv_resize_image",
        "_size_to_height_width",
        "cv_resize_images",
        "resize_videos",
        "skia_resize_image",
        "torch_resize_image",
        "torch_resize_images",
        "torch_remap_image",
        "apply_uv_map",
        "get_identity_uv_map",
        "validate_tensor_shapes",
        "_test_validate_tensor_shapes",
        "_ceil",
        "_floor",
        "_round",
        "_sin",
        "_cos",
        "_tan",
        "_exp",
        "_log",
        "_log10",
        "_sqrt",
        "_abs",
        "_pow",
        "_fft",
        "_ifft",
        "_tanh",
        "_sigmoid",
        "_relu",
        "_softmax",
        "_log2",
        "_asin",
        "_acos",
        "_atan",
        "_clip",
        "_nan_to_num",
        "_clamp",
        "_atan2",
        "_sinh",
        "_cosh",
        "_sign",
        "_degrees",
        "_radians",
        "_create_array_like",
        "_zeros_like",
        "_ones_like",
        "_randn_like",
        "_rand_like",
        "_maximum",
        "_minimum",
        "_max",
        "_min",
        "_sum",
        "_mean",
        "_copy_tensor",
        "get_bilinear_weights",
        "torch_scatter_add_image",
        "accumulate_flows",
        "resize_image_to_hold",
        "resize_image_to_fit",
        "resize_images_to_hold",
        "resize_images_to_fit",
        "resize_video_to_hold",
        "resize_video_to_fit",
        "resize_videos_to_fit",
        "resize_videos_to_hold",
        "resize_images_to_max_size",
        "resize_images_to_min_size",
        "resize_videos_to_min_size",
        "resize_videos_to_max_size",
        "_iterfzf",
        "cv_inpaint_image",
        "cv_floodfill_mask",
        "get_path_inode",
        "_is_dir_entry",
        "_get_all_paths_fast",
        "breadth_first_path_iterator",
        "gpt3",
        "deepgenx",
        "_get_openai_api_key",
        "_run_openai_llm",
        "run_llm_api",
        "minify_python_code",
        "image_to_text",
        "cv_equalize_histogram",
        "compose_rgb_image",
        "compose_rgba_image",
        "compose_image_from_channels",
        "extract_image_channels",
        "extract_alpha_channel",
        "apply_image_function_per_channel",
        "with_alpha_channel",
        "with_image_rgb",
        "play_the_matrix_animation",
        "_string_diff_helper",
        "dunk_string_diff",
        "view_string_diff",
        "vim_string_diff",
        "vim_paste",
        "vim_copy",
        "zip_folder_to_bytes",
        "web_paste_path",
        "_paste_path_from_bundle",
        "web_copy_path",
        "_copy_path_to_bundle",
        "get_all_local_ip_addresses",
        "ip_to_mac_address",
        "ip_to_host_name",
        "get_mac_address_vendor",
        "PynputCasette",
        "find_and_replace_text_files",
        "_fart",
        "import_all_submodules",
        "dns_lookup",
        "_fdt_for_command_line",
        "_fzf_multi_grep",
        "unwarped_perspective_image",
        "unwarped_perspective_contour",
        "_pip_import_depth_pro",
        "_get_depth_pro_model",
        "run_depth_pro",
        "_get_cotracker_model",
        "run_cotracker",
        "run_tapnet",
        "_ensure_tapnet_installed",
        "_pip_import_pyflow",
        "get_optical_flow_via_pyflow",
        "cv_optical_flow",
        "calculate_flows",
        "optical_flow_to_image",
        "optical_flow_to_arrow_grid",
        "cv_remap_image",
        "_get_apriltag_detector",
        "detect_apriltags",
        "get_apriltag_image",
        "get_apriltag_images",
        "_display_filetype_size_histogram",
        "_nbca",
        "clear_jupyter_notebook_outputs",
        "_initialize_bokeh",
        "line_graph_via_bokeh",
        "histogram_via_bokeh",
        "get_git_branch",
        "get_git_is_dirty",
        "get_git_remote_url",
        "get_current_git_hash",
        "get_git_commit_message",
        "get_git_commit_date",
        "is_a_git_repo",
        "get_git_repo_root",
        "_distill_github_url",
        "_get_repo_name_from_url",
        "git_clone",
        "git_pull",
        "get_git_info",
        "get_git_date_modified",
        "select_git_commit",
        "_autoformat_python_code_via_black",
        "autoformat_python_via_black_macchiato",
        "autoformat_html_via_bs4",
        "add_trailing_commas",
        "autoformat_json",
        "as_numpy_images",
        "as_pil_image",
        "as_pil_images",
        "as_numpy_image",
        "as_numpy_video",
        "as_numpy_videos",
        "as_torch_videos",
        "as_torch_images",
        "as_torch_image",
        "load_safetensors",
        "save_safetensors",
        "_get_select_torch_device_lock_file",
        "select_torch_device",
        "_torch_device_to_index",
        "_waste_gpu",
        "waste_gpus",
        "set_cuda_visible_devices",
        "get_cuda_visible_devices",
        "run_removestar",
        "qualify_imports",
        "_qualify_imports",
        "get_star_modules",
        "remove_fstrings",
        "refactor_flynt",
        "file_line_iterator",
        "_file_line_gen",
        "_reverse_file_line_gen",
        "get_system_fonts",
        "resize_list",
        "resize_lists",
        "resize_lists_to_max_len",
        "resize_lists_to_min_len",
        "resize_list_to_fit",
        "resize_lists_to_fit",
        "list_transpose",
        "dict_transpose",
        "list_dict_transpose",
        "broadcast_lists",
        "broadcast_kwargs",
        "dict_walk",
        "monkey_patch",
        "_inline_rp_code",
        "get_free_ram",
        "get_total_ram",
        "get_used_ram",
        "_init_nvml",
        "_get_gpu_memory_info",
        "_get_gpu_handle",
        "get_gpu_uuid",
        "get_gpu_count",
        "get_visible_gpu_ids",
        "get_all_gpu_ids",
        "get_gpu_ids_used_by_process",
        "get_gpu_pids",
        "get_free_vram",
        "get_total_vram",
        "get_used_vram",
        "get_gpu_with_most_free_vram",
        "get_gpu_name",
        "get_vram_used_by_current_process",
        "get_gpu_temperature",
        "get_gpu_utilization",
        "print_gpu_summary",
        "print_notebook_gpu_summary",
        "_get_kernel_to_pid_mapping",
        "_get_all_notebook_sessions_via_ipybname",
        "print_process_info",
        "type_string_with_keyboard",
        "delaunay_interpolation_weights",
        "get_total_disk_space",
        "get_used_disk_space",
        "get_free_disk_space",
        "_ensure_uv_installed",
        "pip_install",
        "update_rp",
        "module_exists",
        "pip_install_multiple",
        "pip_import",
        "_import_module",
        "git_import",
        "check_pip_requirements",
        "get_mask_iou",
        "fuzzy_match",
        "get_only",
        "killport",
        "helper",
        "local_toc",
        "reset_timer",
        "__init__",
        "__enter__",
        "__exit__",
        "__init__",
        "__enter__",
        "__exit__",
        "__init__",
        "__enter__",
        "__exit__",
        "wrapper",
        "__init__",
        "_get_value",
        "_get_name",
        "__enter__",
        "__exit__",
        "get_accumulation_string",
        "helper",
        "width",
        "height",
        "_load_file",
        "skip_filter",
        "__init__",
        "__getitem__",
        "__len__",
        "_save_image",
        "_convert_image",
        "read",
        "loop_wrapper",
        "save_video",
        "__init__",
        "_convert_content",
        "_convert_content_grid",
        "_update",
        "display",
        "clear",
        "update",
        "grid_update",
        "row_update",
        "display_help",
        "zoom_crop_origin",
        "stop_autoplay_on_keypress",
        "plot",
        "handler",
        "is_comprehension",
        "maybe_add_varkw",
        "maybe_replace_varargs",
        "wrapper",
        "wrapper",
        "wrapper",
        "decorator",
        "wrapper",
        "format_string",
        "__init_subclass__",
        "get_form",
        "as_form",
        "is_form",
        "human_to_iana",
        "iana_to_tzinfo",
        "iana_to_human",
        "tzinfo_to_iana",
        "human_to_tzinfo",
        "tzinfo_to_human",
        "is_iana",
        "is_human",
        "is_tzinfo",
        "human_to_num_bytes",
        "num_bytes_to_human",
        "is_num_bytes",
        "is_human",
        "print",
        "linerino",
        "parent_class_names",
        "get_full_class_name",
        "get_parent_hierarchy",
        "format_parent_hierarchy",
        "is_dictlike",
        "errortext",
        "list_cap_props",
        "take_photo",
        "handle_key_colons",
        "split_colon_keys",
        "parse_dyaml_junctions",
        "expand_comma_keys",
        "apply_deltas_from_junctions",
        "junctions_to_dict",
        "parse_dyaml",
        "test_parse_dyaml_junctions",
        "update_sys_commands",
        "translate",
        "sorting_key",
        "new_key",
        "cmp",
        "main",
        "get_all_pygments_tokens",
        "get_all_token_strings",
        "linear_function",
        "count_leading",
        "main",
        "formula_as_file",
        "width",
        "height",
        "_helper",
        "matches",
        "unique",
        "task",
        "in_tokens",
        "helper",
        "generator",
        "fansi_progress",
        "display_eta",
        "out",
        "__init__",
        "__call__",
        "__iter__",
        "__len__",
        "ipython_exeval",
        "__init__",
        "parse",
        "__str__",
        "__repr__",
        "__eq__",
        "replace",
        "mli",
        "_load_pyin_settings_from_dict",
        "__init__",
        "get_all_function_names",
        "_get_function_name",
        "__init__",
        "update",
        "__hash__",
        "process_line",
        "print_line",
        "get_stats_string",
        "highlight_child",
        "localized_path",
        "run",
        "run_and_read_all",
        "run_and_parse_first_match",
        "get_nvidia_driver_version",
        "get_gpu_info",
        "get_running_cuda_version",
        "get_cudnn_version",
        "get_nvidia_smi",
        "get_platform",
        "get_mac_version",
        "get_windows_version",
        "get_lsb_version",
        "check_release_file",
        "get_os",
        "squelch",
        "get_env_info",
        "update",
        "refresh",
        "process_paragraph",
        "is_a_match",
        "joined_names",
        "load_page",
        "__init__",
        "__enter__",
        "__exit__",
        "_parenthesizer_automator",
        "timeout_handler",
        "get_file_size",
        "get_folder_size",
        "postprocess",
        "normalize_unit",
        "pretty_lines",
        "patch",
        "reverse",
        "mouse_callback",
        "distance",
        "on_mouse_move",
        "on_mouse_down",
        "on_key_press",
        "on_mouse_move",
        "on_mouse_down",
        "on_key_press",
        "complex_descriptors",
        "conv_circ",
        "complex_descriptor",
        "ryan_match",
        "point_cloud_angle",
        "__init__",
        "__hash__",
        "__eq__",
        "__repr__",
        "__init__",
        "__setitem__",
        "__delitem__",
        "__getitem__",
        "__iter__",
        "__contains__",
        "fallback",
        "memoized_function",
        "memoized_property",
        "decorator",
        "__init__",
        "__get__",
        "__new__",
        "instance_cache",
        "horizontally_concatenated_images",
        "_parse_origin_to_pixels",
        "get_urls",
        "fetch_data",
        "main",
        "get",
        "recursion_helper",
        "is_hidden",
        "_has_if_name_main",
        "__init__",
        "_settings_hash",
        "__getitem__",
        "__setitem__",
        "__len__",
        "__iter__",
        "_keyify",
        "neighbors",
        "helper",
        "minmax",
        "dithering_gray",
        "converter",
        "blend_colors",
        "__init__",
        "_get_html",
        "_init_update",
        "display",
        "update",
        "f",
        "match",
        "keys",
        "get",
        "helper",
        "is_valid_integer_string",
        "on_fail",
        "condition",
        "display_more_options",
        "display_query_options",
        "display_options_with_pager",
        "_stringify",
        "load",
        "load",
        "__init__",
        "write_frame",
        "finish",
        "load_frame",
        "run",
        "delfunc",
        "do_copy",
        "is_non_str_iterable",
        "apply_suffix_to_name",
        "apply_suffix_to_path",
        "preprocess_frame",
        "sim_score",
        "helper",
        "__init__",
        "handle_timeout",
        "__enter__",
        "__exit__",
        "wrapper",
        "helper",
        "printed_generator",
        "__init__",
        "__enter__",
        "__exit__",
        "__init__",
        "__enter__",
        "__exit__",
        "download",
        "wrapper",
        "format_path",
        "option_to_string",
        "helper",
        "__init__",
        "update",
        "read",
        "is_listlike",
        "process_command",
        "format",
        "highlighted",
        "print_line",
        "helper",
        "_as_skia_image",
        "_get_skia_sampling",
        "format_shape",
        "run_test",
        "test_single_tensor",
        "test_multiple_tensors_consistent",
        "test_mixed_tensor_types",
        "test_manual_dimension",
        "test_missing_tensor",
        "test_not_a_tensor",
        "test_dim_count_mismatch",
        "test_literal_mismatch",
        "test_inconsistent_dims",
        "sanitize_string",
        "__init__",
        "__repr__",
        "__hash__",
        "__eq__",
        "should_include",
        "should_explore",
        "postprocess_path",
        "explore",
        "generator",
        "config",
        "init_colors",
        "get_matrix_code_chars",
        "random_char",
        "random_rain_length",
        "rain_forever",
        "rain_once",
        "animate_rain",
        "update_style",
        "main",
        "add_rain",
        "is_valid_int",
        "is_valid_line",
        "get_lines",
        "get_timestamp",
        "strip_braces",
        "get_timestamp",
        "__init__",
        "__repr__",
        "request_replace",
        "pinger",
        "get_my_ip",
        "map_network",
        "autoimportable_module",
        "old_and_new_text",
        "file_will_change",
        "try_import",
        "helper",
        "__init__",
        "push",
        "pop",
        "files_walk",
        "load_text",
        "load_annotated_lines",
        "should_read",
        "text_lines_walk",
        "helper",
        "__init__",
        "__hash__",
        "__eq__",
        "center",
        "__repr__",
        "do_path",
        "__init__",
        "__len__",
        "__getitem__",
        "__init__",
        "__iter__",
        "__next__",
        "__len__",
        "__repr__",
        "__init__",
        "__contains__",
        "__iter__",
        "__len__",
        "add",
        "discard",
        "__getitem__",
        "__setitem__",
        "__getattr__",
        "__delattr__",
        "__setattr__",
        "__repr__",
        "__init__",
        "__getattr__",
        "__dir__",
        "__contains__",
        "__repr__",
        "__getitem__",
        "should_traverse",
        "walk",
        "patcher",
        "extract_imports",
        "remove_first_import_line",
        "get_code",
        "unarpy",
        "filter_pids_exist",
        "none_to_zero",
        "get_all_pids_and_their_commands",
        "fix_package",
        "__init__",
        "add",
        "__contains__",
        "delete",
        "offer_to_blacklist",
        "wrapper",
        "is_builtin",
        "combine_range",
        "analyze_python",
        "ansi_highlight",
        "is_builtin",
        "combine_range",
        "analyze_python",
        "ansi_highlight",
        "progress_func",
        "__init__",
        "save",
        "write_to_fp",
        "_tokenize",
        "_minimize",
        "convert_grid_item",
        "display",
        "trace_func",
        "__new__",
        "sorty",
        "append_stat",
        "to_str",
        "__init__",
        "__lt__",
        "__gt__",
        "__eq__",
        "__le__",
        "__ge__",
        "__ne__",
        "__init__",
        "__repr__",
        "__iter__",
        "is_leaf",
        "map_constructor",
        "get_default_iface_name_linux",
        "getmac",
        "addstr_wordwrap",
        "words_and_spaces",
        "ioctl_GWINSZ",
        "trace_lines",
        "do_when_ready",
        "is_hidden_file",
        "__init__",
        "register",
        "summary",
        "walk",
        "level_label",
        "p",
        "split_numbers_and_letters",
        "is_inner",
        "is_outer",
        "is_solid_white",
        "is_solid_black",
        "descendants",
        "wrapper",
        "clear_cache",
        "heightify",
        "print_line",
        "primes",
        "wrapped",
        "commit_process",
        "_announce_cell",
        "show_head",
        "get_color",
        "show_body",
        "show_tail",
        "text_files_walk",
        "mute",
        "__init__",
        "get_full_module_name",
        "leave_ImportFrom",
        "leave_Call",
        "leave_Name",
        "_is_likely_module_function",
        "new_func",
        "wrapped_line_tokens",
        "progress_func",
        "progress_func",
        "strip",
        "color",
        "is_module",
        "format_signature",
        "indentify_all_but_first_line",
        "print_fansi_colors_in_curses",
        "blend_rgb",
        "dictify",
        "dupdate",
        "scope",
        "equal",
        "deep_dark_dict_copy",
        "get_snapshot",
        "set_snapshot",
        "take_snapshot",
        "get_ans",
        "set_ans",
        "eval_for_rinsp",
        "print_history",
        "show_error",
        "pterm_pretty_print",
        "add_to_successful_command_history",
        "join_command",
        "helper",
        "primes",
        "__getattribute__",
        "get_progress_text",
        "input_option",
        "filter_by_extension",
        "ram_to_string",
        "line_number_prefix_generator",
        "is_module",
        "autoformat_python_via_black",
        "__init__",
        "can_undo",
        "can_redo",
        "undo",
        "redo",
        "do",
        "do_if_new",
        "fansify",
        "_display_pterm_image",
        "new_init",
        "evaluable_part",
        "try_eval",
        "columnify_strings",
        "string_to_modifier",
        "repr_string_to_modifier",
        "cyan",
        "print_code",
        "print_line",
        "print_line",
        "file_size_key",
        "number_of_leading_spaces",
        "breakify",
        "get_name_from_name_error",
        "precache_all"
      ],
      "classes": [
        "SetCurrentDirectoryTemporarily",
        "TemporarilySetAttr",
        "TemporarilySetItem",
        "PrintBeforeAfter",
        "LazyLoadedImages",
        "JupyterDisplayChannel",
        "_FormTranslator",
        "_TimezoneFormTranslator",
        "_FilesizeFormTranslator",
        "PseudoTerminalPrompt",
        "eta",
        "_ExevalDirective",
        "pseudo_terminal_style",
        "_Module",
        "_PtermLevelTitleContext",
        "_PseudoTerminalReturnException",
        "HandyHashable",
        "HandyDict",
        "ClassProperty",
        "CachedInstances",
        "FlannDict",
        "JupyterImageChannel",
        "VideoWriterMP4",
        "Timeout",
        "TimeoutError",
        "TemporarilyDownloadUrl",
        "_MaybeTemporarilyDownloadVideo",
        "_WebCopyProgressTracker",
        "_PathInfo",
        "_BundledPath",
        "_MinFileSizeHeap",
        "AprilTag",
        "ImageDataset",
        "IteratorWithLen",
        "BoolSet",
        "DictReader",
        "_rp_persistent_set",
        "gTTS",
        "Meta",
        "K",
        "Junction",
        "JunctionList",
        "Tree",
        "TimeoutException",
        "Contour",
        "result",
        "result",
        "QualifyImportsTransformer",
        "PreserveDuplicatesLoader",
        "WindowFullException",
        "result",
        "LazyloadedModule",
        "UndoRedoStack"
      ],
      "imports": [
        "__future__",
        "sys",
        "threading",
        "builtins",
        "time",
        "rp",
        "rp.libs.graveyard",
        "os",
        "time",
        "shlex",
        "sys",
        "random",
        "warnings",
        "traceback",
        "tempfile",
        "contextlib",
        "cachetools",
        "itertools",
        "math",
        "random",
        "re",
        "itertools",
        "functools",
        "contextlib",
        "math",
        "datetime",
        "collections.abc",
        "glob",
        "copy",
        "rp.libs.stamp_tensor",
        "rp.rp_ptpython.prompt_style",
        "rp.rp_ptpython.prompt_style",
        "rp.experimental.debug_comment",
        "tracetraptest",
        "lazy_loader",
        "copy",
        "concurrent.futures",
        "psutil",
        "os",
        "contextlib",
        "os",
        "os",
        "platform",
        "platform",
        "re",
        "pygments",
        "pygments.lexers",
        "pygments.formatters",
        "pygments.lexers",
        "pygments.styles",
        "pygments.lexers",
        "pygments.styles",
        "sys",
        "base64",
        "scipy.ndimage.filters",
        "numpy",
        "cv2",
        "numpy",
        "math",
        "PIL",
        "random",
        "scipy.ndimage.filters",
        "scipy.ndimage.filters",
        "scipy.ndimage.filters",
        "copy",
        "skimage.transform",
        "torch",
        "random",
        "collections.abc",
        "random",
        "random",
        "collections.abc",
        "random",
        "numpy",
        "torch",
        "multiprocessing",
        "urllib.parse",
        "PIL",
        "PIL",
        "copykitten",
        "pdf2image",
        "pdf2image",
        "PIL",
        "imageio",
        "scipy.misc",
        "requests.packages.urllib3.exceptions",
        "requests",
        "PIL",
        "io",
        "io",
        "cv2",
        "numpy",
        "matplotlib.pyplot",
        "OpenEXR",
        "OpenEXR",
        "OpenEXR",
        "OpenEXR",
        "Imath",
        "numpy",
        "cv2",
        "base64",
        "base64",
        "io",
        "PIL",
        "PIL",
        "OpenEXR",
        "Imath",
        "numpy",
        "glob",
        "functools",
        "re",
        "requests",
        "gtts_token.gtts_token",
        "numpy",
        "pydub",
        "scipy.io.wavfile",
        "scipy.signal",
        "scipy.io",
        "pygame",
        "os",
        "subprocess",
        "subprocess",
        "os",
        "IPython",
        "sys",
        "subprocess",
        "mediapy",
        "IPython.display",
        "base64",
        "IPython.display",
        "matplotlib",
        "matplotlib.pyplot",
        "matplotlib.animation",
        "qrcode",
        "html2text",
        "plotille",
        "plotille",
        "matplotlib.patches",
        "matplotlib",
        "matplotlib.backend_bases",
        "matplotlib.pyplot",
        "matplotlib.pyplot",
        "numpy",
        "cv2",
        "matplotlib",
        "itertools",
        "inspect",
        "easydict",
        "ast",
        "inspect",
        "astor",
        "easydict",
        "inspect",
        "ast",
        "inspect",
        "functools",
        "functools",
        "inspect",
        "functools",
        "inspect",
        "inspect",
        "ast",
        "functools",
        "types",
        "functools",
        "inspect",
        "functools",
        "sys",
        "iterfzf",
        "more_itertools",
        "urllib.parse",
        "re",
        "datetime",
        "inspect",
        "cv2",
        "cv2",
        "cv2",
        "mss",
        "IPython.display",
        "google.colab.output",
        "base64",
        "rtmidi",
        "rtmidi.midiutil",
        "easydict",
        "json",
        "json",
        "pandas",
        "csv",
        "pandas",
        "pyarrow.parquet",
        "easydict",
        "yaml",
        "yaml",
        "pathlib",
        "socket",
        "requests",
        "copy",
        "subprocess",
        "os",
        "subprocess",
        "rp",
        "shutil",
        "matplotlib.pyplot",
        "matplotlib.pyplot",
        "transliterate",
        "collections",
        "functools",
        "curses",
        "os",
        "platform",
        "re",
        "re",
        "re",
        "pygments.lexers",
        "pygments.lexer",
        "traceback",
        "traceback",
        "pygments",
        "pygments.lexers",
        "pygments.formatters",
        "pygments.formatters.terminal",
        "inspect",
        "io",
        "types",
        "rich.console",
        "rich.traceback",
        "traceback",
        "collections",
        "contextlib",
        "sys",
        "urllib.request",
        "requests",
        "json",
        "requests",
        "urllib.request",
        "urllib.error",
        "urllib.parse",
        "json",
        "datetime",
        "time",
        "os",
        "os.path",
        "ssl",
        "stat",
        "subprocess",
        "sys",
        "os",
        "requests",
        "drawille",
        "sys",
        "importlib.util",
        "rp.libs.timg",
        "imgcat",
        "time",
        "skimage.morphology",
        "numpy",
        "cv2",
        "rp.prompt_toolkit.history",
        "webbrowser",
        "urllib.parse",
        "importlib",
        "rp",
        "rp",
        "datetime",
        "types",
        "pkgutil",
        "collections.abc",
        "inspect",
        "inspect",
        "xdoctest",
        "subprocess",
        "ast",
        "traceback",
        "IPython.terminal.embed",
        "re",
        "rp.patch_linecache",
        "time",
        "sys",
        "time",
        "linecache",
        "math",
        "asyncio",
        "rp.r",
        "rp.rp_ptpython.style",
        "rp.rp_ptpython.completer",
        "rp.rp_ptpython.python_input",
        "collections",
        "re",
        "itertools",
        "traceback",
        "re",
        "os",
        "os",
        "pathlib",
        "mimetypes",
        "codecs",
        "os",
        "sys",
        "subprocess",
        "warnings",
        "warnings",
        "warnings",
        "locale",
        "re",
        "subprocess",
        "sys",
        "os",
        "collections",
        "textual_imageview.app",
        "shutil",
        "rp.libs.pyfx.app",
        "rp.libs.pyfx.model",
        "os",
        "platform",
        "subprocess",
        "re",
        "rich",
        "rich.columns",
        "json",
        "ast",
        "rp.r_iterm_comm",
        "rp.r_iterm_comm",
        "rp.libs.profile_vim_plugins",
        "rp.experimental",
        "rp.r_iterm_comm",
        "rp.r_iterm_comm",
        "gc",
        "threading",
        "contextlib",
        "signal",
        "numpngw",
        "re",
        "inspect",
        "rich.console",
        "rich",
        "rich.console",
        "pprint",
        "inspect",
        "sys",
        "sympy",
        "math",
        "functools",
        "functools",
        "functools",
        "functools",
        "operator",
        "psutil",
        "psutil",
        "getpass",
        "os",
        "psutil",
        "os",
        "signal",
        "psutil",
        "sys",
        "typing",
        "re",
        "re",
        "inspect",
        "numbers",
        "rp.rp_ptpython.completer",
        "itertools",
        "cv2",
        "cv2",
        "numpy",
        "cv2",
        "math",
        "numpy",
        "cv2",
        "torch",
        "io",
        "functools",
        "functools",
        "hashlib",
        "os",
        "io",
        "base64",
        "string",
        "math",
        "PIL",
        "numpy",
        "fontTools.ttLib",
        "collections",
        "skia",
        "numpy",
        "math",
        "rp",
        "skia",
        "numpy",
        "requests",
        "os",
        "pathlib",
        "datetime",
        "datetime",
        "datetime",
        "re",
        "os",
        "os.path",
        "re",
        "glob",
        "os",
        "math",
        "copy",
        "js2py",
        "numba",
        "re",
        "colorsys",
        "colorsys",
        "colorsys",
        "ipynbname",
        "google.colab.output",
        "google.colab.output",
        "sys",
        "cloud_detect",
        "pathlib",
        "warnings",
        "readline",
        "pytubefix",
        "pytubefix",
        "pytubefix.cli",
        "embeddify",
        "subprocess",
        "json",
        "cv2",
        "cv2",
        "cv2",
        "os",
        "subprocess",
        "skvideo.io",
        "subprocess",
        "subprocess",
        "subprocess",
        "os",
        "tempfile",
        "shutil",
        "shutil",
        "os",
        "shutil",
        "shutil",
        "os",
        "shutil",
        "urllib.parse",
        "os",
        "scenedetect.video_manager",
        "scenedetect.scene_manager",
        "scenedetect.stats_manager",
        "scenedetect.detectors.content_detector",
        "numpy",
        "cv2",
        "skimage.metrics",
        "twilio.rest",
        "numpy",
        "math",
        "sklearn.decomposition",
        "inflect",
        "word2number",
        "nltk.corpus",
        "nltk",
        "nltk",
        "nltk",
        "nltk.tokenize",
        "nltk",
        "os",
        "nltk.data",
        "socket",
        "pypager.source",
        "pypager.pager",
        "subprocess",
        "os",
        "screeninfo",
        "screeninfo",
        "math",
        "os",
        "time",
        "inspect",
        "inspect",
        "pkgutil",
        "importlib.util",
        "os",
        "inspect",
        "builtins",
        "datetime",
        "datetime",
        "datetime",
        "dateparser",
        "pytz",
        "subprocess",
        "os",
        "platform",
        "statistics",
        "scipy.stats",
        "scipy.stats",
        "scipy.stats",
        "boto3",
        "urllib.parse",
        "easydict",
        "re",
        "nltk.corpus",
        "requests",
        "json",
        "math",
        "functools",
        "pylcs",
        "termios",
        "fcntl",
        "sys",
        "os",
        "serial.tools.list_ports",
        "tempfile",
        "sys",
        "subprocess",
        "ast",
        "astor",
        "subprocess",
        "isort",
        "unimport",
        "unimport.analyzers.main",
        "unimport.statement",
        "unimport.refactor",
        "subprocess",
        "socket",
        "psutil",
        "zlib",
        "zlib",
        "dill",
        "numpy",
        "math",
        "struct",
        "numpy",
        "struct",
        "requests",
        "io",
        "requests",
        "subprocess",
        "libtmux",
        "libtmux",
        "subprocess",
        "subprocess",
        "subprocess",
        "yaml",
        "json",
        "ipywidgets",
        "IPython.display",
        "fbchat",
        "fbchat",
        "fbchat",
        "rp.libs.pytorch_module_explorer",
        "rp.libs.torch_hooks",
        "warnings",
        "pyunpack",
        "snowy",
        "snowy",
        "os",
        "platform",
        "subprocess",
        "re",
        "rp.r_iterm_comm",
        "glob",
        "itertools",
        "imagesize",
        "colorsys",
        "cv2",
        "cmapy",
        "zalgo_text.zalgo",
        "art",
        "base64",
        "base64",
        "binascii",
        "binascii",
        "shlex",
        "ranger",
        "requests",
        "requests",
        "io",
        "socket",
        "cv2",
        "wordcloud",
        "pandas",
        "matplotlib.pyplot",
        "seaborn",
        "tabview",
        "pandas",
        "cv2",
        "skia",
        "torch.nn.functional",
        "einops",
        "torch",
        "torch.nn.functional",
        "einops",
        "torch",
        "torch",
        "einops",
        "iterfzf",
        "cv2",
        "cv2",
        "collections",
        "os",
        "openai",
        "python_minifier",
        "pytesseract",
        "cv2",
        "random",
        "curses",
        "time",
        "os",
        "subprocess",
        "os",
        "json",
        "socket",
        "multiprocessing",
        "subprocess",
        "os",
        "getmac",
        "socket",
        "mac_vendor_lookup",
        "rp.libs.pynput_recorder",
        "socket",
        "iterfzf",
        "json",
        "cv2",
        "cv2",
        "PIL",
        "depth_pro",
        "depth_pro",
        "torch",
        "torch",
        "einops",
        "rp.git.tapnet.run_tapnet",
        "pyflow",
        "cv2",
        "numpy",
        "cv2",
        "numpy",
        "cv2",
        "cv2",
        "apriltag",
        "moms_apriltag",
        "bokeh.io",
        "IPython.utils",
        "bokeh",
        "bokeh.plotting",
        "bokeh.io",
        "bokeh.themes",
        "bokeh",
        "bokeh.plotting",
        "bokeh.io",
        "bokeh.themes",
        "subprocess",
        "subprocess",
        "git",
        "git",
        "git",
        "git",
        "git",
        "urllib.parse",
        "git",
        "subprocess",
        "shlex",
        "os",
        "datetime",
        "subprocess",
        "datetime",
        "black",
        "macchiato",
        "io",
        "bs4",
        "add_trailing_comma._main",
        "json",
        "PIL.Image",
        "torch",
        "torch",
        "safetensors",
        "os",
        "rp.r",
        "safetensors.torch",
        "torch",
        "torch",
        "ast",
        "removestar.removestar",
        "libcst",
        "libcst",
        "rp.libs.refactor.string_format.fstring_converter",
        "flynt.api",
        "flynt.state",
        "mmap",
        "os",
        "os",
        "copy",
        "collections.abc",
        "psutil",
        "psutil",
        "psutil",
        "py3nvml.py3nvml",
        "py3nvml.py3nvml",
        "py3nvml.py3nvml",
        "py3nvml.py3nvml",
        "py3nvml.py3nvml",
        "py3nvml.py3nvml",
        "py3nvml.py3nvml",
        "os",
        "py3nvml.py3nvml",
        "py3nvml.py3nvml",
        "rich.console",
        "collections",
        "rich.table",
        "rich",
        "rich",
        "rich.table",
        "ipynbname",
        "psutil",
        "rich.console",
        "rich.table",
        "rich",
        "rich.syntax",
        "datetime",
        "pynput.keyboard",
        "time",
        "numpy",
        "scipy.spatial",
        "shutil",
        "shutil",
        "shutil",
        "sys",
        "subprocess",
        "shlex",
        "importlib",
        "pkg_resources",
        "pip._internal.req.req_file",
        "pip._internal.req.constructors",
        "pip._internal.network.session",
        "rich.console",
        "rich.table",
        "subprocess",
        "os",
        "signal",
        "os",
        "keyword",
        "tokenize",
        "cgi",
        "re",
        "functools",
        "keyword",
        "tokenize",
        "cgi",
        "re",
        "functools",
        "rp.Pyperclip",
        "random",
        "numpy",
        "torch",
        "tqdm",
        "pyjpgclipboard",
        "pillow_heif",
        "imgurpython",
        "sounddevice",
        "IPython.display",
        "sounddevice",
        "pygame",
        "IPython.display",
        "pandas",
        "IPython.display",
        "IPython.display",
        "IPython.display",
        "IPython.display",
        "rich",
        "rich.markdown",
        "IPython.display",
        "re",
        "uuid",
        "html",
        "pytz",
        "types",
        "collections",
        "pprint",
        "tqdm",
        "tqdm",
        "yaml",
        "copy",
        "collections.abc",
        "getmac",
        "googletrans",
        "urllib.parse",
        "urllib.request",
        "certifi",
        "timg",
        "pygments.token",
        "sys",
        "time",
        "re",
        "warnings",
        "datetime",
        "sys",
        "platform",
        "rp",
        "re",
        "inspect",
        "xonsh.main",
        "requests",
        "platform",
        "jtree",
        "json",
        "rp.r_iterm_comm",
        "re",
        "sys",
        "rp.r_iterm_comm",
        "setproctitle",
        "psutil",
        "psutil",
        "psutil",
        "psutil",
        "datetime",
        "inspect",
        "tqdm",
        "copy",
        "urllib.parse",
        "rp.libs.pyflann",
        "PIL",
        "PIL",
        "webcolors",
        "IPython",
        "IPython.display",
        "IPython.display",
        "moviepy.editor",
        "ffmpeg",
        "send2trash",
        "send2trash",
        "pathlib",
        "wcwidth",
        "numba",
        "signal",
        "signal",
        "subprocess",
        "rp.rp_ptpdb",
        "sympy",
        "subprocess",
        "hiddenlayer",
        "torch",
        "shutil",
        "zipfile",
        "itertools",
        "numba",
        "numba",
        "logging",
        "logging",
        "pandas",
        "skia",
        "skia",
        "torch",
        "torch",
        "ast",
        "heapq",
        "heapq",
        "os",
        "multiprocessing.pool",
        "itertools",
        "depth_pro",
        "rp.git.tapnet.run_tapnet",
        "pyflow",
        "einops",
        "einops",
        "filelock",
        "torch",
        "torch",
        "easydict",
        "ast",
        "py3nvml.py3nvml",
        "psutil",
        "uv",
        "imp",
        "numpy",
        "web_evaluator",
        "colorama",
        "win_unicode_console",
        "builtins",
        "builtins",
        "rp.Pyperclip",
        "math",
        "numpy",
        "torch",
        "urllib.request",
        "torch",
        "IPython.display",
        "IPython.display",
        "types",
        "pyaudio",
        "copy",
        "itertools",
        "struct",
        "ctypes",
        "rich",
        "urllib",
        "urllib2",
        "rp.rp_ptpython.completer",
        "rp.rp_ptpython.ipython",
        "rp.prompt_toolkit.shortcuts",
        "signal",
        "readline",
        "rlcompleter",
        "copy",
        "rp.r_iterm_comm",
        "moviepy",
        "pathlib",
        "subprocess",
        "pdb",
        "IPython.display",
        "tarfile",
        "torch",
        "numpy",
        "torch",
        "importlib",
        "platform",
        "pyflow",
        "torch",
        "importlib.util",
        "builtins",
        "builtins",
        "imageio",
        "imageio",
        "scipy.misc",
        "skimage.io",
        "types",
        "inspect",
        "fcntl",
        "termios",
        "struct",
        "rp.rp_ptpython.python_input",
        "time",
        "importlib",
        "shlex",
        "warnings",
        "time",
        "rp.r_iterm_comm",
        "rp.r_iterm_comm",
        "subprocess",
        "shutil",
        "depth_pro",
        "os",
        "playsound",
        "types",
        "shlex",
        "rp.r_iterm_comm",
        "torch",
        "cv2",
        "black",
        "csv",
        "numpy",
        "re",
        "requests",
        "pyflow",
        "types",
        "gc",
        "tqdm",
        "pprint",
        "rp",
        "os",
        "IPython.display",
        "os",
        "sys",
        "subprocess",
        "psutil",
        "os",
        "pdb",
        "pdb",
        "platform",
        "sys",
        "getpass",
        "rp",
        "rp",
        "time",
        "rp",
        "time",
        "rp",
        "time",
        "rp",
        "time",
        "rp.pypi_inspection",
        "rp.pypi_inspection",
        "rp.libs.peepdis",
        "rp.libs.peepdis",
        "os",
        "rp.r_iterm_comm",
        "time",
        "time",
        "time",
        "ast",
        "shlex",
        "tabview",
        "sys",
        "rp.rp_ptpython.completer",
        "sys",
        "shlex",
        "sys"
      ],
      "size_lines": 53185,
      "has_main": true,
      "docstring": "Welcome to RP: Ryan Python "
    },
    "rp_public_namespace.py": {
      "error": "invalid syntax (<unknown>, line 1)"
    },
    "profile_rp.py": {
      "functions": [
        "_"
      ],
      "classes": [],
      "imports": [
        "pyinstrument",
        "rp"
      ],
      "size_lines": 16,
      "has_main": false,
      "docstring": null
    },
    "extract_grep_patterns.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "re"
      ],
      "size_lines": 92,
      "has_main": false,
      "docstring": "Extract greppable patterns from specific line numbers in key_bindings.py"
    },
    "pychess.py": {
      "functions": [
        "group",
        "b2m",
        "m2b",
        "move",
        "flipb",
        "flipm",
        "score",
        "legal",
        "moves",
        "shuffled",
        "all_moves",
        "all_n_moves",
        "advantage",
        "think_1",
        "think_2",
        "think_3",
        "think_4",
        "has_won",
        "print_board",
        "color_print",
        "red_print",
        "blue_print",
        "yellow_print"
      ],
      "classes": [],
      "imports": [
        "readline",
        "itertools",
        "random",
        "ast"
      ],
      "size_lines": 350,
      "has_main": false,
      "docstring": null
    },
    "Pyperclip.py": {
      "functions": [
        "_xsel_works",
        "_pasteWindows",
        "_copyWindows",
        "_pasteCygwin",
        "_copyCygwin",
        "_copyOSX",
        "_pasteOSX",
        "_pasteGtk",
        "_copyGtk",
        "_pasteQt",
        "_copyQt",
        "_copyXclip",
        "_pasteXclip",
        "_copyXsel",
        "_pasteXsel"
      ],
      "classes": [],
      "imports": [
        "rp",
        "os",
        "platform",
        "os",
        "subprocess",
        "ctypes",
        "ctypes",
        "gtk",
        "PyQt4.QtCore",
        "PyQt4.QtGui"
      ],
      "size_lines": 238,
      "has_main": false,
      "docstring": null
    },
    "google_colab.py": {
      "functions": [
        "mp4_to_html"
      ],
      "classes": [],
      "imports": [
        "base64"
      ],
      "size_lines": 13,
      "has_main": false,
      "docstring": null
    },
    "__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "rp.r"
      ],
      "size_lines": 2,
      "has_main": false,
      "docstring": null
    },
    "snake.py": {
      "functions": [
        "main",
        "__init__",
        "add_entity",
        "_generate_field",
        "_clear_field",
        "render",
        "get_entity_pos",
        "is_snake_eat_entity",
        "__init__",
        "set_direction",
        "level_up",
        "is_alive",
        "_check_limit",
        "move",
        "set_field"
      ],
      "classes": [
        "Field",
        "Snake"
      ],
      "imports": [
        "curses",
        "time",
        "sys",
        "random",
        "rp",
        "rp"
      ],
      "size_lines": 208,
      "has_main": false,
      "docstring": null
    },
    "remote_desktop_client.py": {
      "functions": [
        "get_pynput_key_name",
        "main",
        "restart_stream"
      ],
      "classes": [],
      "imports": [
        "rp",
        "rp.web_evaluator",
        "sys",
        "time",
        "rp.libs.video_streaming",
        "pygame"
      ],
      "size_lines": 222,
      "has_main": true,
      "docstring": null
    },
    "mario.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "rp.libs.super_mario.game"
      ],
      "size_lines": 1,
      "has_main": false,
      "docstring": null
    },
    "shotgun.py": {
      "functions": [
        "install"
      ],
      "classes": [],
      "imports": [
        "rp"
      ],
      "size_lines": 266,
      "has_main": true,
      "docstring": null
    },
    "py2048.py": {
      "functions": [
        "board_index",
        "print_board",
        "add_piece",
        "getch",
        "apply_move",
        "get_apply_move",
        "quit"
      ],
      "classes": [],
      "imports": [
        "random",
        "sys",
        "termios",
        "tty",
        "rp"
      ],
      "size_lines": 183,
      "has_main": false,
      "docstring": null
    },
    "r_credentials.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 2,
      "has_main": false,
      "docstring": null
    },
    "patch_linecache.py": {
      "functions": [
        "_bpython_clear_linecache",
        "filename_for_console_input",
        "run_code",
        "__init__",
        "is_bpython_filename",
        "get_bpython_history",
        "remember_bpython_input",
        "__getitem__",
        "__contains__",
        "__delitem__"
      ],
      "classes": [
        "BPythonLinecache"
      ],
      "imports": [
        "linecache",
        "code",
        "sys"
      ],
      "size_lines": 182,
      "has_main": false,
      "docstring": null
    },
    "trans.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "rp"
      ],
      "size_lines": 36,
      "has_main": false,
      "docstring": null
    },
    "blm.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 32,
      "has_main": false,
      "docstring": null
    },
    "r_iterm_comm.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 30,
      "has_main": false,
      "docstring": null
    },
    "map_codebase.py": {
      "functions": [
        "analyze_python_file",
        "map_directory_structure",
        "generate_overview",
        "main",
        "print_structure",
        "count_imports"
      ],
      "classes": [],
      "imports": [
        "os",
        "ast",
        "json",
        "pathlib",
        "collections"
      ],
      "size_lines": 235,
      "has_main": true,
      "docstring": "RP Codebase Mapper - Creates a bird's eye view of the entire RP module structure\nThis helps future Claudes understand the codebase organization."
    },
    "remote_desktop_server.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "rp.web_evaluator"
      ],
      "size_lines": 12,
      "has_main": false,
      "docstring": null
    },
    "sudoku.py": {
      "functions": [
        "__init__",
        "__setitem__",
        "__getitem__",
        "__init__",
        "clear",
        "candidates",
        "populate",
        "__str__",
        "__getitem__",
        "__setitem__",
        "is_solved",
        "solve",
        "__init__",
        "__enter__",
        "__exit__",
        "_draw_sudoku",
        "_print_string",
        "_help",
        "main"
      ],
      "classes": [
        "Block",
        "Sudoku",
        "CursesUI"
      ],
      "imports": [
        "curses",
        "random",
        "time"
      ],
      "size_lines": 300,
      "has_main": false,
      "docstring": "Sudoku Game.\nA simple Sudoku game that uses backtracking for solving and creating\nSudokos."
    },
    "ryan_vimrc.py": {
      "error": "unterminated string literal (detected at line 1) (<unknown>, line 1)"
    },
    "pypi_inspection.py": {
      "functions": [
        "get_name",
        "get_site_packages_directory",
        "process",
        "get_pypi_name",
        "get_modules",
        "get_dist_info_paths",
        "get_dist_infos",
        "get_pypi_info",
        "get_console_scripts",
        "get_pypi_info_from_module",
        "display_module_pypi_info",
        "display_all_pypi_info",
        "get_module_from_object",
        "get_module_name_from_object",
        "get_pypi_info_from_module_name",
        "get_pypi_module_package_names",
        "get_field"
      ],
      "classes": [],
      "imports": [
        "rp",
        "sysconfig",
        "rp",
        "inspect",
        "rp.pypi_inspection"
      ],
      "size_lines": 244,
      "has_main": false,
      "docstring": null
    },
    "__main__.py": {
      "functions": [
        "arg_eval",
        "pop_kwargs",
        "pop_args",
        "main"
      ],
      "classes": [],
      "imports": [
        "sys",
        "rp",
        "threading"
      ],
      "size_lines": 138,
      "has_main": true,
      "docstring": null
    },
    "move_to_graveyard.py": {
      "functions": [
        "find_graveyard_blocks",
        "process_block_for_graveyard",
        "remove_blocks_from_content",
        "add_graveyard_import_to_rpy",
        "extract_exported_names",
        "generate_all_list",
        "update_graveyard_all_list",
        "append_to_graveyard",
        "main"
      ],
      "classes": [],
      "imports": [
        "os",
        "re",
        "sys",
        "ast",
        "rp"
      ],
      "size_lines": 368,
      "has_main": true,
      "docstring": "RP Graveyard Refactoring Script\n\nThis script moves code blocks marked with #GRAVEYARD START and #GRAVEYARD END\nfrom r.py to libs/graveyard.py, with proper dependency qualification.\n\nUsage:\n    /opt/homebrew/opt/python@3.10/bin/python3.10 move_to_graveyard.py\n\nThe script will:\n1. Find all #GRAVEYARD START/END pairs in r.py\n2. Extract the code blocks between markers\n3. Apply qualify_imports to handle rp dependencies  \n4. Remove blocks from r.py\n5. Append processed blocks to libs/graveyard.py\n6. Add graveyard import to r.py if needed"
    },
    "untitled.py": {
      "error": "invalid syntax (<unknown>, line 65)"
    },
    "list_of_modules.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 65,
      "has_main": false,
      "docstring": null
    },
    "death_of_the_mind.py": {
      "functions": [
        "death_of_the_mind",
        "death_of_the_mind2"
      ],
      "classes": [],
      "imports": [
        "rp",
        "rp"
      ],
      "size_lines": 4540,
      "has_main": true,
      "docstring": null
    },
    "tetris.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "rp.libs.tetris.__main__"
      ],
      "size_lines": 2,
      "has_main": false,
      "docstring": null
    },
    "test_motifs.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "rp",
        "numpy"
      ],
      "size_lines": 168,
      "has_main": false,
      "docstring": "Testing and validating RP design motifs with concrete examples"
    },
    "experimental": {
      "powerpoint_converter.py": {
        "functions": [
          "_get_thumbnail_mapping",
          "get_thumbnail_mappings",
          "convert_mp4_to_gif",
          "process_powerpoint_file"
        ],
        "classes": [],
        "imports": [
          "rp",
          "xml.etree.ElementTree",
          "moviepy.editor"
        ],
        "size_lines": 127,
        "has_main": false,
        "docstring": "Ryan Burgert, April 2024\n\nThis tool is meant to solve a problem: when I have powerpoint files with MP4 files, and I upload them to Google Slides, all the videos are replaced by images! What the fuck?\nTurns out the official way to add videos to Google Slides is to upload each video to Google Drive, then in the Google Slides interface select them for insertion one by one. Very annoying.\n\nThis script changes a powerpoint file so that when its uploaded to Google Slides, the MP4 animations are all converted to GIF's!\nWhatsmore - it doesn't destroy *anything* in the original powerpoint file - you can use it as normal!\n\nHow does it work?\nWell, those static images google slides replaces your videos with - they're thumnails that can be found in the powerpoint file, that are automatically created when you upload an MP4 to powerpoint.\nDid you know that .pptx files are actually zip files? Yeah! You can unzip them and look inside - you'll find a file structure!\nUsually these thumbnails are png images - but we can replace them with GIF's of the original videos - and these will be animated when viewed in a web browser!\nNote that this causes some 'corruption' to the powerpoint file (no damage that I can see) - but to fix it open the new pptx file this script creates, let powerpoint correct the errors, then re-save it.\nThat file can be uploaded to Google Slides and all the animations will work!\n\nTo use this code:\n    process_powerpoint_file('/Users/ryan/Desktop/Eyeline_April2_2024.pptx')"
      },
      "stdin_python_highlighter.py": {
        "functions": [
          "line_number_prefix_generator",
          "line_highlighter",
          "preview_line_highlighter",
          "prefix_highlighter",
          "preview_prefix_highlighter",
          "fansi_syntax_highlighting",
          "strip_ansi_escapes",
          "fansi",
          "split_including_delimiters",
          "split_into_sublists",
          "get_absolute_path",
          "number_of_lines_in_file",
          "file_line_iterator",
          "total_disc_bytes",
          "line_join",
          "human_readable_file_size",
          "diff",
          "diff_display_string",
          "split_python_tokens",
          "is_valid_python_syntax",
          "print_python_line_summary",
          "stdin_read_robust",
          "start",
          "get_file_size",
          "get_folder_size",
          "__init__",
          "color",
          "numbered_line",
          "__iter__",
          "__str__",
          "summary_string",
          "get_all_pygments_tokens",
          "get_all_token_strings",
          "get_indent_level",
          "startswithany",
          "colorize",
          "is_builtin",
          "combine_range",
          "analyze_python",
          "ansi_highlight",
          "wrapped_line_tokens",
          "fansi_with_underlined_trailing_whitespace",
          "make_preview_window",
          "get_preview_line"
        ],
        "classes": [
          "LineDiffHunk"
        ],
        "imports": [
          "fileinput",
          "sys",
          "difflib",
          "typing",
          "re",
          "os",
          "itertools",
          "os",
          "pygments.lexers",
          "pygments.lexer",
          "ast",
          "traceback",
          "keyword",
          "tokenize",
          "re",
          "functools",
          "builtins",
          "itertools",
          "traceback",
          "builtins",
          "json",
          "itertools",
          "traceback"
        ],
        "size_lines": 1045,
        "has_main": false,
        "docstring": null
      },
      "debug_comment.py": {
        "functions": [
          "is_zero_arg_callable",
          "debug_comment",
          "format_debug_comment",
          "_debug_print",
          "_perform_debug_eval_substitutions"
        ],
        "classes": [],
        "imports": [
          "inspect",
          "atexit",
          "rp",
          "rp"
        ],
        "size_lines": 160,
        "has_main": true,
        "docstring": null
      },
      "__init__.py": {
        "functions": [],
        "classes": [],
        "imports": [
          "powerpoint_converter"
        ],
        "size_lines": 2,
        "has_main": false,
        "docstring": null
      },
      "manpage_completer.py": {
        "functions": [
          "get_man_completions_path",
          "_get_man_page",
          "_man_option_string_regex",
          "generate_options_of",
          "_get_manpage_completions",
          "get_manpage_completions",
          "get_headers",
          "split_options_string",
          "get_option_section",
          "get_options"
        ],
        "classes": [],
        "imports": [
          "functools",
          "json",
          "re",
          "shutil",
          "subprocess",
          "textwrap",
          "pathlib",
          "rp"
        ],
        "size_lines": 168,
        "has_main": false,
        "docstring": null
      }
    },
    "libs": {
      "pytorch_module_explorer.py": {
        "functions": [
          "format_shape",
          "format_param_count",
          "format_time",
          "format_percentage",
          "make_transparent_if_equal",
          "get_torch_dtype_size",
          "format_torch_dtype",
          "get_module_param_attr",
          "get_module_dtype",
          "basic_syntax_highlighting",
          "has_forward_stats",
          "get_latest_forward_stats",
          "get_total_runtime",
          "calculate_tensor_memory_size",
          "calculate_memory_from_shape",
          "extract_tensor_dtype",
          "get_module_total_runtime",
          "get_module_device",
          "format_devices",
          "get_module_device_label",
          "build_parent_map",
          "is_torch_module",
          "explore_module",
          "explore_torch_module_with_stats",
          "__init__",
          "toggle_active",
          "get_label",
          "get_width",
          "_get_text",
          "_get_text",
          "_get_text",
          "_get_text",
          "get_label",
          "_get_text",
          "_get_text",
          "_get_text",
          "_get_text",
          "_get_text",
          "_get_text",
          "_get_text",
          "_get_text",
          "_get_text",
          "_get_text",
          "_get_text",
          "_find_tree_from_node",
          "_get_app",
          "_get_total_runtime_recursively",
          "__init__",
          "toggle_active",
          "_get_text",
          "__init__",
          "toggle_active",
          "_get_text",
          "__init__",
          "_get_text",
          "get_label",
          "_highlight_args",
          "_get_text",
          "_get_text",
          "_get_text",
          "get_label",
          "_get_text",
          "_get_text",
          "_get_text",
          "_get_text",
          "_get_text",
          "_get_text",
          "_get_text",
          "on_tree_node_expanded",
          "on_tree_node_collapsed",
          "walk_tree",
          "action_cursor_right",
          "action_cursor_left",
          "action_toggle_selected",
          "action_pass_through_a",
          "action_pass_through_i",
          "action_move_up",
          "action_move_down",
          "action_move_to_top",
          "action_move_to_bottom",
          "compose",
          "on_button_pressed",
          "_get_help_markdown",
          "__init__",
          "clear",
          "set_title",
          "expand_root",
          "is_simple_type",
          "format_value",
          "add_attributes_recursively",
          "build_for_object",
          "__init__",
          "get_component",
          "is_alignment_active",
          "get_label",
          "__init__",
          "add_callback",
          "toggle",
          "set_active",
          "_notify_callbacks",
          "status_text",
          "status_style",
          "formatted_example",
          "shortcut_text",
          "button_text",
          "__init__",
          "compose",
          "on_click",
          "toggle_switch",
          "update_switch",
          "on_button_pressed",
          "process_children",
          "__init__",
          "compose",
          "on_mount",
          "_add_to_load_queue",
          "init_label_manager",
          "calculate_module_stats",
          "_get_module_children",
          "_populate_node_with_children",
          "populate_tree",
          "on_node_expanded",
          "on_tree_node_selected",
          "format_python_attribute_path",
          "get_module_path",
          "get_node_path",
          "build_attributes_tree",
          "update_editor_with_module",
          "action_focused_panel_down",
          "action_focused_panel_up",
          "action_focused_panel_left",
          "action_focused_panel_right",
          "action_toggle_focused",
          "action_focus_next_pane",
          "action_focus_prev_pane",
          "action_page_up",
          "action_page_down",
          "get_node_path",
          "toggle_node_state",
          "action_toggle_node",
          "toggle_nodes_by_criteria",
          "process_nodes_recursively",
          "action_toggle_subtree",
          "recursive_expand_nodes",
          "recursive_collapse_nodes",
          "process_pending_loads",
          "action_toggle_all_folds",
          "action_toggle_siblings",
          "action_toggle_all_siblings",
          "action_toggle_same_class",
          "action_toggle_all_same_class",
          "update_all_node_labels",
          "calculate_aligned_labels",
          "update_aligned_node_labels",
          "_apply_current_component_states_to_node",
          "apply_component_state",
          "_toggle_component_class",
          "action_toggle_param_shapes",
          "action_toggle_memory",
          "action_toggle_params",
          "action_toggle_device",
          "action_toggle_input_shape",
          "action_toggle_output_shape",
          "action_toggle_call_count",
          "_get_component_class_by_name",
          "action_toggle_runtime",
          "action_toggle_forward_stats",
          "action_toggle_alignment",
          "action_toggle_attrs_panel",
          "action_toggle_code_panel",
          "move_component_up",
          "move_component_down",
          "move_component_to_top",
          "move_component_to_bottom",
          "_rebuild_node_components",
          "_focus_component_item",
          "toggle_component",
          "action_toggle_label_manager",
          "action_show_help",
          "_focus_first_component_item",
          "action_expand_right_panel",
          "action_contract_right_panel",
          "update_panel_layout",
          "__init__",
          "_get_name",
          "extra_repr",
          "forward",
          "process_node",
          "update_node_group",
          "collect_expanded",
          "update_node_label",
          "collect_expanded_paths"
        ],
        "classes": [
          "NodeLabelComponent",
          "DeviceLabelComponent",
          "SizeLabelComponent",
          "MemoryPercentComponent",
          "SelfMemoryComponent",
          "ForwardStatsComponent",
          "ForwardInputShapeComponent",
          "ForwardInputMemorySizeComponent",
          "ForwardOutputShapeComponent",
          "ForwardOutputMemorySizeComponent",
          "ForwardCallCountComponent",
          "ForwardRuntimeComponent",
          "AvgSelfRuntimeComponent",
          "TotalRuntimeComponent",
          "RuntimePercentComponent",
          "AvgTotalRuntimeComponent",
          "ModuleNameComponent",
          "ModuleTypeBaseComponent",
          "ModuleTypeNameComponent",
          "ModuleTypeArgsComponent",
          "ParamShapesComponent",
          "ParamCountComponent",
          "ParamPercentComponent",
          "SelfParamCountComponent",
          "OwnParamsComponent",
          "OwnVRAMComponent",
          "InputDTypeComponent",
          "OutputDTypeComponent",
          "ModuleDTypeComponent",
          "AlignmentComponent",
          "HJKLTree",
          "HJKLListView",
          "HelpScreen",
          "AttributeTree",
          "ModuleEntry",
          "ModuleNode",
          "ComponentState",
          "ComponentListItem",
          "ModelTreeViewer",
          "ModuleWrapper"
        ],
        "imports": [
          "rp",
          "asyncio",
          "dataclasses",
          "typing",
          "textual",
          "textual.await_complete",
          "textual.message",
          "textual.widgets._tree",
          "textual.worker",
          "textual.app",
          "textual.widgets",
          "textual.binding",
          "textual.containers",
          "textual.widgets._text_area",
          "textual.reactive",
          "textual._text_area_theme",
          "textual.screen",
          "typing",
          "torch",
          "rich.text",
          "rich.pretty",
          "rich.console",
          "rich.style",
          "io",
          "inspect",
          "numpy",
          "os",
          "pathlib",
          "tempfile",
          "textual.widgets",
          "re",
          "diffusers",
          "textual.app",
          "re",
          "torch.nn",
          "textual.widgets",
          "traceback",
          "torch",
          "torch",
          "traceback"
        ],
        "size_lines": 5275,
        "has_main": true,
        "docstring": null
      },
      "graveyard.py": {
        "functions": [
          "test_function_for_graveyard",
          "another_test_function",
          "brutish_display_image",
          "display_grayscale_image",
          "rip_music",
          "rip_info",
          "arduino",
          "read_line",
          "matlab_session",
          "_initialize_static_matlab_session",
          "matlab",
          "matlab_pseudo_terminal",
          "OSC_output",
          "OSC_jiggle",
          "blob_coords",
          "graph_resistance_distance",
          "qterm",
          "UCB1",
          "summation",
          "socket_writer",
          "socket_write",
          "socket_reader",
          "socket_read",
          "socket_reading_thread",
          "k_means_analysis",
          "space_split",
          "tofloat",
          "get_file_paths",
          "_legacy_par_map",
          "image_to_xyrgb_lists",
          "xyrgb_lists_to_image",
          "xyrgb_normalize",
          "image_to_all_normalized_xy_rgb_training_pairs",
          "speak",
          "find_arduino_port",
          "write_bytes",
          "handle_matlab_stdout",
          "wrapper",
          "enable_stdout",
          "disable_stdout",
          "global_max",
          "get",
          "local_max",
          "blurred",
          "_exeval",
          "_exec",
          "_eval",
          "write",
          "read",
          "go",
          "get",
          "step"
        ],
        "classes": [],
        "imports": [
          "rp.r",
          "rp.r",
          "rp.r",
          "rp.r",
          "rp.r",
          "rp.r",
          "rp.r",
          "rp.r",
          "rp.r",
          "rp.r",
          "rp.r",
          "rp.r",
          "rp.r",
          "rp.r",
          "rp.r",
          "rp.r",
          "rp.r",
          "rp.r",
          "rp.r",
          "rp.r",
          "rp.r",
          "rp.r",
          "rp.r",
          "copy",
          "youtube_dl",
          "youtube_dl",
          "pymatbridge",
          "rp.TestOSC",
          "rp.r_iterm_comm",
          "math",
          "socket",
          "socket",
          "scipy.cluster.vq",
          "serial.tools.list_ports",
          "multiprocessing.dummy",
          "vispy"
        ],
        "size_lines": 1093,
        "has_main": false,
        "docstring": "RP Graveyard - Repository for unused/deprecated code blocks\n\nThis module contains code that has been moved from r.py but is kept for potential future use.\nFunctions and code blocks are automatically refactored to work independently using qualified imports.\n\nAll code in this graveyard remains accessible from r.py via: from rp.libs.graveyard import *\n\nProcessing strategy:\n1. Extract code block from r.py\n2. Add \"from rp.r import *\" at top \n3. Use rp.qualify_imports to convert to \"import rp.r\" + qualified calls\n4. Result: fully qualified, no circular imports"
      },
      "torch_tools.py": {
        "functions": [
          "resize_conv2d_channels"
        ],
        "classes": [],
        "imports": [
          "rp",
          "torch.nn"
        ],
        "size_lines": 90,
        "has_main": false,
        "docstring": null
      },
      "webeval_dataset.py": {
        "functions": [
          "__getitem__",
          "__getattribute__",
          "__init__",
          "get_output_ticket",
          "save_ticket",
          "get_ticket_hashname",
          "get_sample_folder",
          "load_sample",
          "__repr__",
          "save_file",
          "load_file",
          "path_exists",
          "paths_exist",
          "ticket_processor",
          "post_process",
          "__init__",
          "load_input_tickets",
          "get_output_ticket",
          "__getitem__",
          "__len__",
          "__repr__",
          "__init__",
          "get_output_ticket",
          "__repr__",
          "launch_cluster",
          "get_video",
          "get_canny_video"
        ],
        "classes": [
          "EvaluableEasydict",
          "TicketHandler",
          "LocalDataset",
          "RemoteDataset"
        ],
        "imports": [
          "rp",
          "dict_hash",
          "rp.web_evaluator",
          "easydict"
        ],
        "size_lines": 300,
        "has_main": false,
        "docstring": null
      },
      "stamp_tensor.py": {
        "functions": [
          "_parse_origin",
          "_get_bilinear_corners_and_weights",
          "_get_bounding_box",
          "_stamp_bilinear",
          "_stamp_nearest",
          "_stamp_with_wrapping",
          "_get_proportional_offset",
          "_parse_tensor_shape_form",
          "stamp_tensor",
          "test_stamp_tensor",
          "demo_stamp_tensor",
          "crop_tensor",
          "generate_wrapped_offsets",
          "add",
          "replace",
          "subtract",
          "multiply",
          "divide",
          "max",
          "min",
          "mean"
        ],
        "classes": [
          "_StampModes"
        ],
        "imports": [
          "math",
          "numpy",
          "rp",
          "rp"
        ],
        "size_lines": 760,
        "has_main": true,
        "docstring": null
      },
      "__init__.py": {
        "functions": [],
        "classes": [],
        "imports": [],
        "size_lines": 1,
        "has_main": false,
        "docstring": null
      },
      "torch_hooks.py": {
        "functions": [
          "calculate_tensor_memory",
          "extract_tensor",
          "add_forward_hooks",
          "is_torch_module",
          "find_modules_in_object",
          "stats_collection",
          "record_module_forward_stats",
          "forward_pre_hook",
          "forward_hook"
        ],
        "classes": [],
        "imports": [
          "rp",
          "torch",
          "contextlib",
          "time",
          "inspect",
          "typing",
          "torch.autograd.profiler",
          "functools"
        ],
        "size_lines": 325,
        "has_main": false,
        "docstring": null
      },
      "test.py": {
        "functions": [],
        "classes": [],
        "imports": [
          "diffusers",
          "rp",
          "torch",
          "diffusers",
          "diffusers.utils",
          "numpy",
          "torch",
          "cv2",
          "PIL"
        ],
        "size_lines": 60,
        "has_main": false,
        "docstring": null
      },
      "draw_code_minimap.py": {
        "functions": [
          "draw_minimap",
          "resize_list",
          "text_file_to_string",
          "usage",
          "main"
        ],
        "classes": [],
        "imports": [
          "sys",
          "drawille"
        ],
        "size_lines": 160,
        "has_main": true,
        "docstring": null
      },
      "profile_vim_plugins.py": {
        "functions": [
          "to_list",
          "get_exe",
          "is_subdir",
          "stdev",
          "main",
          "run",
          "__init__",
          "generate",
          "__guess_plugin_dir",
          "__load_times",
          "__run_vim",
          "__clean_log",
          "__del__",
          "__init__",
          "process_data",
          "average_data",
          "stdev_data",
          "plot",
          "export",
          "print_summary",
          "__sort_data",
          "__init__"
        ],
        "classes": [
          "StartupData",
          "StartupAnalyzer",
          "SimpleNamespace"
        ],
        "imports": [
          "os",
          "sys",
          "subprocess",
          "re",
          "csv",
          "operator",
          "argparse",
          "collections",
          "statistics",
          "pylab",
          "numpy"
        ],
        "size_lines": 331,
        "has_main": false,
        "docstring": "Profiles Vim Plugins to see how much they impact the startup. From https://github.com/hyiltiz/vim-plugins-profile"
      },
      "rp_black_macchiato.py": {
        "functions": [
          "autoformat_python_via_black_macchiato"
        ],
        "classes": [],
        "imports": [
          "macchiato",
          "sys",
          "io",
          "os",
          "tempfile",
          "rp"
        ],
        "size_lines": 47,
        "has_main": false,
        "docstring": "Black Macchiato wrapper that prints errors as stdout and avoids directory permission errors\nLean and mean - faster than importing all of rp"
      },
      "pynput_recorder.py": {
        "functions": [
          "record_actions",
          "_convert_macos_special_char",
          "pynput_casette_to_tmux",
          "playback_actions",
          "lstrip_delays",
          "rstrip_delays",
          "strip_delays",
          "__repr__",
          "__call__",
          "__init__",
          "__call__",
          "__init__",
          "__init__",
          "__call__",
          "__init__",
          "__call__",
          "__init__",
          "__call__",
          "__init__",
          "__call__",
          "__init__",
          "__init__",
          "__call__",
          "__init__",
          "__call__",
          "__call__",
          "__call__",
          "__call__",
          "__init__",
          "__call__",
          "__init__",
          "__call__",
          "__init__",
          "__call__",
          "__init__",
          "__call__",
          "__init__",
          "__init__",
          "__init__",
          "__init__",
          "__init__",
          "__init__",
          "create_action",
          "handle_event",
          "on_move",
          "on_click",
          "on_scroll",
          "on_press",
          "on_release",
          "__init__",
          "__call__",
          "from_pynput",
          "on_press",
          "__init__",
          "record",
          "strip",
          "lstrip",
          "rstrip",
          "speedup",
          "slowdown",
          "remove_mousemoves",
          "merge_delays",
          "set_all_delays",
          "cap_all_delays",
          "round_all_delays",
          "to_tmux",
          "duration",
          "play",
          "repr"
        ],
        "classes": [
          "Reprable",
          "Action",
          "DelayAction",
          "MouseAction",
          "MouseMoveAction",
          "MousePressAction",
          "MouseReleaseAction",
          "MouseScrollAction",
          "KeyboardAction",
          "KeyboardPressAction",
          "KeyboardReleaseAction",
          "Trigger",
          "NoStartTrigger",
          "NoEndTrigger",
          "KeyDownTrigger",
          "KeyUpTrigger",
          "TwoKeyDownTrigger",
          "TwoKeyUpTrigger",
          "CmdEscUpTrigger",
          "CmdEscDownTrigger",
          "CmdShiftUpTrigger",
          "CmdShiftDownTrigger",
          "CmdCmdUpTrigger",
          "CmdCmdDownTrigger",
          "TmuxSendkeyAction",
          "PynputCasette"
        ],
        "imports": [
          "copy",
          "rp",
          "time",
          "abc",
          "subprocess",
          "pynput",
          "pynput.mouse",
          "pynput.keyboard"
        ],
        "size_lines": 1039,
        "has_main": false,
        "docstring": null
      },
      "video_streaming": {
        "v1.py": {
          "functions": [
            "main",
            "__init__",
            "encode_frame",
            "flush_encoder",
            "close",
            "__init__",
            "decode_chunk",
            "close"
          ],
          "classes": [
            "EfficientH264Encoder",
            "EfficientH264Decoder"
          ],
          "imports": [
            "av",
            "numpy",
            "cv2",
            "fractions"
          ],
          "size_lines": 147,
          "has_main": true,
          "docstring": null
        },
        "video_codec_streams.py": {
          "functions": [
            "get_codec_config",
            "main",
            "remote_screenshare",
            "__init__",
            "encode_frame",
            "flush_encoder",
            "close",
            "encode_video",
            "__init__",
            "decode_chunk",
            "decode_chunks",
            "close",
            "restart_stream"
          ],
          "classes": [
            "VideoStreamEncoder",
            "VideoStreamDecoder"
          ],
          "imports": [
            "rp",
            "av",
            "numpy",
            "cv2",
            "fractions",
            "time",
            "rp",
            "sys"
          ],
          "size_lines": 295,
          "has_main": true,
          "docstring": null
        }
      },
      "timg": {
        "renderer.py": {
          "functions": [
            "__init__",
            "load_image_from_file",
            "load_image",
            "resize",
            "reduce_colors",
            "grayscale",
            "to_string",
            "render"
          ],
          "classes": [
            "Renderer"
          ],
          "imports": [
            "PIL"
          ],
          "size_lines": 36,
          "has_main": false,
          "docstring": null
        },
        "__init__.py": {
          "functions": [],
          "classes": [],
          "imports": [
            "argparser",
            "meta",
            "methods",
            "renderer"
          ],
          "size_lines": 5,
          "has_main": false,
          "docstring": null
        },
        "argparser.py": {
          "functions": [
            "parse_args"
          ],
          "classes": [],
          "imports": [
            "argparse",
            "platform"
          ],
          "size_lines": 59,
          "has_main": false,
          "docstring": null
        },
        "__main__.py": {
          "functions": [
            "main"
          ],
          "classes": [],
          "imports": [
            "shutil",
            "sys",
            "rp.libs.timg",
            "methods",
            "methods.ascii"
          ],
          "size_lines": 66,
          "has_main": true,
          "docstring": null
        },
        "meta.py": {
          "functions": [],
          "classes": [],
          "imports": [],
          "size_lines": 4,
          "has_main": false,
          "docstring": null
        },
        "methods": {
          "ascii.py": {
            "functions": [
              "show_available_charsets",
              "__init__",
              "grayscale",
              "to_string"
            ],
            "classes": [
              "ASCIIMethod"
            ],
            "imports": [
              "math",
              "method"
            ],
            "size_lines": 45,
            "has_main": false,
            "docstring": null
          },
          "sixel.py": {
            "functions": [
              "pattern_to_char",
              "rgb_to_percent",
              "__init__",
              "to_string"
            ],
            "classes": [
              "SixelMethod"
            ],
            "imports": [
              "method"
            ],
            "size_lines": 68,
            "has_main": false,
            "docstring": null
          },
          "__init__.py": {
            "functions": [
              "show_available_methods"
            ],
            "classes": [],
            "imports": [
              "ansi_methods",
              "ascii",
              "sixel"
            ],
            "size_lines": 46,
            "has_main": false,
            "docstring": null
          },
          "ansi_methods.py": {
            "functions": [
              "__init__",
              "to_string",
              "__init__",
              "to_string",
              "__init__",
              "to_string",
              "__init__",
              "to_string"
            ],
            "classes": [
              "Ansi8FblockMethod",
              "Ansi24FblockMethod",
              "Ansi8HblockMethod",
              "Ansi24HblockMethod"
            ],
            "imports": [
              "ansi",
              "method"
            ],
            "size_lines": 32,
            "has_main": false,
            "docstring": null
          },
          "method.py": {
            "functions": [
              "__init__",
              "to_string"
            ],
            "classes": [
              "RenderMethod"
            ],
            "imports": [],
            "size_lines": 7,
            "has_main": false,
            "docstring": null
          },
          "ansi.py": {
            "functions": [
              "rgb8",
              "fg8",
              "bg8",
              "fg24",
              "bg24",
              "__init__",
              "c_optimized_render",
              "efficient_rendering",
              "to_block",
              "to_8_bit_hblock",
              "to_24_bit_hblock",
              "to_8_bit_fblock",
              "to_24_bit_fblock"
            ],
            "classes": [
              "ANSIMethod"
            ],
            "imports": [
              "numpy",
              "io",
              "cffi"
            ],
            "size_lines": 224,
            "has_main": false,
            "docstring": null
          }
        }
      },
      "tetris": {
        "letters.py": {
          "functions": [
            "word"
          ],
          "classes": [],
          "imports": [],
          "size_lines": 444,
          "has_main": true,
          "docstring": null
        },
        "__init__.py": {
          "functions": [],
          "classes": [],
          "imports": [],
          "size_lines": 1,
          "has_main": false,
          "docstring": null
        },
        "__main__.py": {
          "functions": [
            "contains",
            "main",
            "__init__",
            "alive",
            "__init__"
          ],
          "classes": [
            "Tetris",
            "Shape"
          ],
          "imports": [
            "time",
            "random",
            "os",
            "sys",
            "letters",
            "graphics",
            "graphics.nbinput",
            "tetrisShapes"
          ],
          "size_lines": 126,
          "has_main": false,
          "docstring": null
        },
        "tetrisShapes.py": {
          "functions": [
            "__init__",
            "image"
          ],
          "classes": [
            "Shape"
          ],
          "imports": [
            "os",
            "sys",
            "graphics"
          ],
          "size_lines": 34,
          "has_main": false,
          "docstring": null
        },
        "graphics": {
          "graphics": {
            "console.py": {
              "functions": [
                "supportedChars",
                "main",
                "__init__",
                "getSize",
                "__repr__"
              ],
              "classes": [
                "Size"
              ],
              "imports": [
                "os",
                "sys",
                "struct",
                "termios",
                "fcntl",
                "termios",
                "fcntl"
              ],
              "size_lines": 104,
              "has_main": true,
              "docstring": null
            },
            "shapes.py": {
              "functions": [
                "main",
                "__init__",
                "__repr__",
                "image",
                "rotate",
                "height",
                "width",
                "__init__",
                "genImage",
                "__init__",
                "genImage",
                "__init__",
                "genImage",
                "__init__",
                "genImage",
                "__init__",
                "genImage",
                "char",
                "text",
                "text",
                "__init__",
                "genImage",
                "char"
              ],
              "classes": [
                "Image",
                "Vector",
                "Square",
                "Box",
                "Circle",
                "Text",
                "CustImage"
              ],
              "imports": [
                "math",
                "sys"
              ],
              "size_lines": 268,
              "has_main": true,
              "docstring": "Functions to generate different shapes to be used as sprite images. "
            },
            "nbinput.py": {
              "functions": [
                "escape_code",
                "main",
                "__init__",
                "char",
                "__enter__",
                "__exit__",
                "__init__",
                "enter",
                "exit",
                "char",
                "__init__",
                "enter",
                "exit",
                "char",
                "__init__",
                "enter",
                "exit",
                "char",
                "__init__",
                "char",
                "char"
              ],
              "classes": [
                "NonBlockingInput",
                "_nbiGetchUnix",
                "_nbiGetchWindows",
                "_nbiGetchMacCarbon",
                "BlockingInput",
                "_biGetchUnix",
                "_biGetchWindows",
                "_biGetchMacCarbon"
              ],
              "imports": [
                "sys",
                "select",
                "time",
                "tty",
                "termios",
                "msvcrt",
                "Carbon"
              ],
              "size_lines": 178,
              "has_main": true,
              "docstring": "Most of this code came from this page:\nhttp://code.activestate.com/recipes/134892/#c5"
            },
            "__init__.py": {
              "functions": [],
              "classes": [],
              "imports": [
                "random",
                "copy"
              ],
              "size_lines": 18,
              "has_main": false,
              "docstring": null
            },
            "sprite.py": {
              "functions": [
                "__init__",
                "__repr__",
                "char",
                "move",
                "touching",
                "overlaps",
                "onEdge"
              ],
              "classes": [
                "Sprite"
              ],
              "imports": [
                "random",
                "copy"
              ],
              "size_lines": 172,
              "has_main": false,
              "docstring": null
            },
            "funcs.py": {
              "functions": [
                "rotatePosition",
                "rotateImage"
              ],
              "classes": [],
              "imports": [],
              "size_lines": 21,
              "has_main": false,
              "docstring": null
            },
            "canvas.py": {
              "functions": [
                "__init__",
                "__repr__",
                "__str__",
                "testPixel",
                "updateSize",
                "withinBounds",
                "wrapPos",
                "border",
                "border",
                "center",
                "center"
              ],
              "classes": [
                "Canvas"
              ],
              "imports": [
                "random",
                "copy"
              ],
              "size_lines": 214,
              "has_main": false,
              "docstring": null
            },
            "colors.py": {
              "functions": [
                "has_colors",
                "colorStr"
              ],
              "classes": [],
              "imports": [
                "sys",
                "curses"
              ],
              "size_lines": 29,
              "has_main": true,
              "docstring": null
            }
          }
        }
      },
      "jedi": {
        "refactoring.py": {
          "functions": [
            "rename",
            "_rename",
            "extract",
            "inline",
            "__init__",
            "old_files",
            "new_files",
            "diff",
            "process"
          ],
          "classes": [
            "Refactoring"
          ],
          "imports": [
            "difflib",
            "rp.libs.parso",
            "rp.libs.jedi.evaluate"
          ],
          "size_lines": 204,
          "has_main": false,
          "docstring": "THIS is not in active development, please check\nhttps://github.com/davidhalter/jedi/issues/667 first before editing.\n\nIntroduce some basic refactoring functions to |jedi|. This module is still in a\nvery early development stage and needs much testing and improvement.\n\n.. warning:: I won't do too much here, but if anyone wants to step in, please\n             do. Refactoring is none of my priorities\n\nIt uses the |jedi| `API <api.html>`_ and supports currently the\nfollowing functions (sometimes bug-prone):\n\n- rename\n- extract variable\n- inline variable"
        },
        "parser_utils.py": {
          "functions": [
            "get_executable_nodes",
            "get_sync_comp_fors",
            "for_stmt_defines_one_name",
            "get_flow_branch_keyword",
            "get_statement_of_position",
            "clean_scope_docstring",
            "safe_literal_eval",
            "get_call_signature",
            "move",
            "get_following_comment_same_line",
            "is_scope",
            "_get_parent_scope_cache",
            "get_parent_scope",
            "get_cached_code_lines",
            "cut_value_at_position",
            "get_string_quote",
            "wrapper"
          ],
          "classes": [],
          "imports": [
            "re",
            "textwrap",
            "inspect",
            "weakref",
            "rp.libs.parso.python",
            "rp.libs.parso.cache",
            "rp.libs.parso",
            "rp.libs.jedi._compatibility"
          ],
          "size_lines": 298,
          "has_main": false,
          "docstring": null
        },
        "cache.py": {
          "functions": [
            "underscore_memoization",
            "clear_time_caches",
            "call_signature_time_cache",
            "time_cache",
            "memoize_method",
            "wrapper",
            "_temp",
            "decorator",
            "wrapper",
            "wrapper",
            "wrapper"
          ],
          "classes": [],
          "imports": [
            "time",
            "functools",
            "rp.libs.jedi",
            "rp.libs.parso.cache"
          ],
          "size_lines": 147,
          "has_main": false,
          "docstring": "This caching is very important for speed and memory optimizations. There's\nnothing really spectacular, just some decorators. The following cache types are\navailable:\n\n- ``time_cache`` can be used to cache something for just a limited time span,\n  which can be useful if there's user interaction and the user cannot react\n  faster than a certain time.\n\nThis module is one of the reasons why |jedi| is not thread-safe. As you can see\nthere are global variables, which are holding the cache information. Some of\nthese variables are being cleaned after every API usage."
        },
        "__init__.py": {
          "functions": [],
          "classes": [],
          "imports": [
            "rp.libs.jedi.api",
            "rp.libs.jedi",
            "rp.libs.jedi.api.environment",
            "rp.libs.jedi.api.exceptions",
            "rp.libs.jedi.plugins"
          ],
          "size_lines": 48,
          "has_main": false,
          "docstring": "Jedi is a static analysis tool for Python that can be used in IDEs/editors.\nJedi has a focus on autocompletion and goto functionality. Jedi is fast and is\nvery well tested. It understands Python and stubs on a deep level.\n\nJedi has support for different goto functions. It's possible to search for\nusages and list names in a Python file to get information about them.\n\nJedi uses a very simple API to connect with IDE's. There's a reference\nimplementation as a `VIM-Plugin <https://github.com/davidhalter/jedi-vim>`_,\nwhich uses Jedi's autocompletion.  We encourage you to use Jedi in your IDEs.\nAutocompletion in your REPL is also possible, IPython uses it natively and for\nthe CPython REPL you have to install it.\n\nHere's a simple example of the autocompletion feature:\n\n>>> import jedi\n>>> source = '''\n... import json\n... json.lo'''\n>>> script = jedi.Script(source, 3, len('json.lo'), 'example.py')\n>>> script\n<Script: 'example.py' ...>\n>>> completions = script.completions()\n>>> completions\n[<Completion: load>, <Completion: loads>]\n>>> print(completions[0].complete)\nad\n>>> print(completions[0].name)\nload\n\nAs you see Jedi is pretty simple and allows you to concentrate on writing a\ngood text editor, while still having very good IDE features for Python."
        },
        "utils.py": {
          "functions": [
            "setup_readline",
            "version_info",
            "complete"
          ],
          "classes": [
            "JediRL"
          ],
          "imports": [
            "__future__",
            "__main__",
            "collections",
            "logging",
            "traceback",
            "re",
            "os",
            "sys",
            "rp.libs.jedi",
            "rp.libs.jedi",
            "rlcompleter",
            "readline"
          ],
          "size_lines": 135,
          "has_main": false,
          "docstring": "Utilities for end-users."
        },
        "debug.py": {
          "functions": [
            "_lazy_colorama_init",
            "reset_time",
            "increase_indent",
            "increase_indent_cm",
            "dbg",
            "warning",
            "speed",
            "print_to_stdout",
            "wrapper",
            "_lazy_colorama_init"
          ],
          "classes": [
            "Fore"
          ],
          "imports": [
            "os",
            "time",
            "contextlib",
            "rp.libs.jedi._compatibility",
            "colorama",
            "colorama"
          ],
          "size_lines": 144,
          "has_main": false,
          "docstring": null
        },
        "settings.py": {
          "functions": [],
          "classes": [],
          "imports": [
            "os",
            "platform"
          ],
          "size_lines": 164,
          "has_main": false,
          "docstring": "This module contains variables with global |jedi| settings. To change the\nbehavior of |jedi|, change the variables defined in :mod:`jedi.settings`.\n\nPlugins should expose an interface so that the user can adjust the\nconfiguration.\n\n\nExample usage::\n\n    from jedi import settings\n    settings.case_insensitive_completion = True\n\n\nCompletion output\n~~~~~~~~~~~~~~~~~\n\n.. autodata:: case_insensitive_completion\n.. autodata:: add_bracket_after_function\n.. autodata:: no_completion_duplicates\n\n\nFilesystem cache\n~~~~~~~~~~~~~~~~\n\n.. autodata:: cache_directory\n.. autodata:: use_filesystem_cache\n\n\nParser\n~~~~~~\n\n.. autodata:: fast_parser\n\n\nDynamic stuff\n~~~~~~~~~~~~~\n\n.. autodata:: dynamic_array_additions\n.. autodata:: dynamic_params\n.. autodata:: dynamic_params_for_other_modules\n.. autodata:: additional_dynamic_modules\n.. autodata:: auto_import_modules\n\n\nCaching\n~~~~~~~\n\n.. autodata:: call_signatures_validity"
        },
        "file_io.py": {
          "functions": [
            "__init__",
            "list",
            "get_file_io",
            "list",
            "get_file_io",
            "get_parent_folder",
            "__init__",
            "get_last_modified"
          ],
          "classes": [
            "AbstractFolderIO",
            "FolderIO",
            "FileIOFolderMixin",
            "ZipFileIO",
            "FileIO",
            "KnownContentFileIO"
          ],
          "imports": [
            "os",
            "rp.libs.parso"
          ],
          "size_lines": 49,
          "has_main": false,
          "docstring": null
        },
        "_compatibility.py": {
          "functions": [
            "find_module_py34",
            "find_module_py33",
            "_from_loader",
            "_get_source",
            "find_module_pre_py3",
            "_iter_modules",
            "use_metaclass",
            "u",
            "cast_path",
            "force_unicode",
            "literal_eval",
            "no_unicode_pprint",
            "utf8_repr",
            "pickle_load",
            "_python2_dct_keys_to_unicode",
            "pickle_dump",
            "highest_pickle_protocol",
            "which",
            "__init__",
            "read",
            "close",
            "__init__",
            "all_suffixes",
            "reraise",
            "wrapper",
            "load",
            "loads",
            "__init__",
            "_access_check",
            "_decode_string",
            "load_string",
            "load_binstring",
            "load_short_binstring",
            "__init__",
            "__call__",
            "_exitfunc"
          ],
          "classes": [
            "DummyFile",
            "ImplicitNSInfo",
            "GeneralizedPopen",
            "NewUnpickler",
            "finalize",
            "Parameter"
          ],
          "imports": [
            "__future__",
            "atexit",
            "errno",
            "functools",
            "sys",
            "os",
            "re",
            "pkgutil",
            "warnings",
            "inspect",
            "subprocess",
            "weakref",
            "zipimport",
            "rp.libs.jedi.file_io",
            "ast",
            "importlib",
            "imp",
            "builtins",
            "itertools",
            "pprint",
            "queue",
            "Queue",
            "cPickle",
            "inspect",
            "imp",
            "__builtin__",
            "itertools",
            "pickle"
          ],
          "size_lines": 666,
          "has_main": false,
          "docstring": "To ensure compatibility from Python ``2.7`` - ``3.x``, a module has been\ncreated. Clearly there is huge need to use conforming syntax."
        },
        "__main__.py": {
          "functions": [
            "_start_linter"
          ],
          "classes": [],
          "imports": [
            "sys",
            "os.path",
            "rp.libs.jedi",
            "fnmatch",
            "os",
            "traceback",
            "pdb"
          ],
          "size_lines": 49,
          "has_main": false,
          "docstring": null
        },
        "plugins": {
          "registry.py": {
            "functions": [],
            "classes": [],
            "imports": [
              "rp.libs.jedi.plugins",
              "rp.libs.jedi.plugins",
              "rp.libs.jedi.plugins"
            ],
            "size_lines": 11,
            "has_main": false,
            "docstring": "This is not a plugin, this is just the place were plugins are registered."
          },
          "flask.py": {
            "functions": [
              "import_module",
              "wrapper"
            ],
            "classes": [],
            "imports": [],
            "size_lines": 22,
            "has_main": false,
            "docstring": null
          },
          "__init__.py": {
            "functions": [
              "__init__",
              "register",
              "decorate",
              "_build_functions",
              "decorator",
              "wrapper"
            ],
            "classes": [
              "_PluginManager"
            ],
            "imports": [
              "functools"
            ],
            "size_lines": 48,
            "has_main": false,
            "docstring": null
          },
          "stdlib.py": {
            "functions": [
              "execute",
              "_follow_param",
              "argument_clinic",
              "builtins_property",
              "builtins_next",
              "builtins_iter",
              "builtins_getattr",
              "builtins_type",
              "builtins_super",
              "builtins_reversed",
              "builtins_isinstance",
              "builtins_staticmethod",
              "builtins_classmethod",
              "collections_namedtuple",
              "functools_partial",
              "_return_first_param",
              "_random_choice",
              "_dataclass",
              "_functools_wraps",
              "_operator_itemgetter",
              "_create_string_input_function",
              "_os_path_join",
              "get_metaclass_filters",
              "tree_name_to_contexts",
              "wrapper",
              "f",
              "__init__",
              "_get_bases",
              "_get_wrapped_context",
              "get_filters",
              "__init__",
              "py__iter__",
              "py__next__",
              "get_object",
              "py__get__",
              "__init__",
              "get_object",
              "py__get__",
              "__init__",
              "get_signatures",
              "get_object",
              "py__call__",
              "__init__",
              "unpack",
              "__init__",
              "__getattr__",
              "_get_function",
              "get_signatures",
              "py__call__",
              "__init__",
              "get_param_names",
              "__init__",
              "unpack",
              "get_signatures",
              "__init__",
              "get_param_names",
              "__init__",
              "get_kind",
              "infer",
              "__init__",
              "py__call__",
              "py__call__",
              "__init__",
              "name",
              "get_signature_functions",
              "wrapper",
              "wrapper",
              "__init__",
              "name",
              "_get_wrapped_context",
              "get_filters",
              "wrapper",
              "call",
              "wrapper",
              "iterate"
            ],
            "classes": [
              "SuperInstance",
              "ReversedObject",
              "StaticMethodObject",
              "ClassMethodObject",
              "ClassMethodGet",
              "ClassMethodArguments",
              "PartialObject",
              "PartialSignature",
              "MergedPartialArguments",
              "DataclassWrapper",
              "DataclassSignature",
              "DataclassParamName",
              "ItemGetterCallable",
              "WrapsCallable",
              "Wrapped",
              "EnumInstance"
            ],
            "imports": [
              "rp.libs.parso",
              "os",
              "rp.libs.jedi._compatibility",
              "rp.libs.jedi",
              "rp.libs.jedi.evaluate.utils",
              "rp.libs.jedi.evaluate.helpers",
              "rp.libs.jedi.evaluate.arguments",
              "rp.libs.jedi.evaluate",
              "rp.libs.jedi.evaluate",
              "rp.libs.jedi.evaluate.context.instance",
              "rp.libs.jedi.evaluate.base_context",
              "rp.libs.jedi.evaluate.context",
              "rp.libs.jedi.evaluate.context.klass",
              "rp.libs.jedi.evaluate.context.function",
              "rp.libs.jedi.evaluate.context",
              "rp.libs.jedi.evaluate.lazy_context",
              "rp.libs.jedi.evaluate.names",
              "rp.libs.jedi.evaluate.syntax_tree",
              "rp.libs.jedi.evaluate.filters",
              "rp.libs.jedi.evaluate.signature"
            ],
            "size_lines": 836,
            "has_main": false,
            "docstring": "Implementations of standard library functions, because it's not possible to\nunderstand them with Jedi.\n\nTo add a new implementation, create a function and add it to the\n``_implemented`` dict at the bottom of this module.\n\nNote that this module exists only to implement very specific functionality in\nthe standard library. The usual way to understand the standard library is the\ncompiled module that returns the types for C-builtins."
          }
        },
        "common": {
          "__init__.py": {
            "functions": [],
            "classes": [],
            "imports": [
              "rp.libs.jedi.common.context"
            ],
            "size_lines": 2,
            "has_main": false,
            "docstring": null
          },
          "context.py": {
            "functions": [
              "__init__",
              "get_root_context",
              "__init__",
              "_from_frozen_set",
              "from_sets",
              "__or__",
              "__and__",
              "__iter__",
              "__bool__",
              "__len__",
              "__repr__",
              "filter",
              "__getattr__",
              "__eq__",
              "__hash__",
              "mapper"
            ],
            "classes": [
              "BaseContext",
              "BaseContextSet"
            ],
            "imports": [],
            "size_lines": 74,
            "has_main": false,
            "docstring": null
          },
          "utils.py": {
            "functions": [
              "traverse_parents",
              "monkeypatch"
            ],
            "classes": [],
            "imports": [
              "os",
              "contextlib"
            ],
            "size_lines": 27,
            "has_main": false,
            "docstring": null
          }
        },
        "evaluate": {
          "base_context.py": {
            "functions": [
              "iterate_contexts",
              "_getitem",
              "iterator_to_context_set",
              "get_root_context",
              "create_cached",
              "execute",
              "execute_evaluated",
              "execute_annotation",
              "gather_annotation_classes",
              "merge_types_of_iterate",
              "py__getattribute__",
              "py__await__",
              "eval_node",
              "create_context",
              "iterate",
              "is_sub_class_of",
              "is_same_class",
              "api_type",
              "py__getitem__",
              "py__iter__",
              "get_signatures",
              "is_class",
              "is_instance",
              "is_function",
              "is_module",
              "is_namespace",
              "is_compiled",
              "is_bound_method",
              "py__bool__",
              "py__doc__",
              "get_safe_value",
              "py__call__",
              "py__stop_iteration_returns",
              "get_qualified_names",
              "is_stub",
              "name",
              "create_cached",
              "__getattr__",
              "_wrapped_context",
              "__repr__",
              "_get_wrapped_context",
              "__init__",
              "__repr__",
              "__init__",
              "__repr__",
              "__init__",
              "get_root_context",
              "infer",
              "__repr__",
              "name",
              "assignment_indexes",
              "py__class__",
              "iterate",
              "execute",
              "execute_evaluated",
              "py__getattribute__",
              "get_item",
              "try_merge",
              "gather_annotation_classes",
              "get_signatures",
              "wrapper"
            ],
            "classes": [
              "HelperContextMixin",
              "Context",
              "_ContextWrapperBase",
              "LazyContextWrapper",
              "ContextWrapper",
              "TreeContext",
              "ContextualizedNode",
              "ContextualizedName",
              "ContextSet"
            ],
            "imports": [
              "functools",
              "operator",
              "rp.libs.parso.python.tree",
              "rp.libs.jedi",
              "rp.libs.jedi._compatibility",
              "rp.libs.jedi.parser_utils",
              "rp.libs.jedi.common",
              "rp.libs.jedi.evaluate.helpers",
              "rp.libs.jedi.evaluate.utils",
              "rp.libs.jedi.evaluate.cache",
              "rp.libs.jedi.cache",
              "rp.libs.jedi.evaluate.context.iterable",
              "rp.libs.jedi.evaluate.arguments",
              "rp.libs.jedi.evaluate",
              "rp.libs.jedi.evaluate",
              "rp.libs.jedi.evaluate.names",
              "rp.libs.jedi.evaluate.lazy_context",
              "rp.libs.jedi.evaluate.lazy_context",
              "rp.libs.jedi.evaluate",
              "rp.libs.jedi.evaluate.compiled"
            ],
            "size_lines": 437,
            "has_main": false,
            "docstring": "Contexts are the \"values\" that Python would return. However Contexts are at the\nsame time also the \"contexts\" that a user is currently sitting in.\n\nA ContextSet is typically used to specify the return of a function or any other\nstatic analysis operation. In jedi there are always multiple returns and not\njust one."
          },
          "finder.py": {
            "functions": [
              "_check_flow_information",
              "_check_isinstance_type",
              "__init__",
              "find",
              "_get_origin_scope",
              "get_filters",
              "_get_context_filters",
              "filter_name",
              "_check_getattr",
              "_names_to_types"
            ],
            "classes": [
              "NameFinder"
            ],
            "imports": [
              "rp.libs.parso.python",
              "rp.libs.parso.tree",
              "rp.libs.jedi",
              "rp.libs.jedi",
              "rp.libs.jedi.evaluate",
              "rp.libs.jedi.evaluate",
              "rp.libs.jedi.evaluate",
              "rp.libs.jedi.evaluate.arguments",
              "rp.libs.jedi.evaluate",
              "rp.libs.jedi.evaluate.context",
              "rp.libs.jedi.evaluate.filters",
              "rp.libs.jedi.evaluate.names",
              "rp.libs.jedi.evaluate.base_context",
              "rp.libs.jedi.parser_utils",
              "rp.libs.jedi.evaluate.gradual.conversion"
            ],
            "size_lines": 291,
            "has_main": false,
            "docstring": "Searching for names with given scope and name. This is very central in Jedi and\nPython. The name resolution is quite complicated with descripter,\n``__getattribute__``, ``__getattr__``, ``global``, etc.\n\nIf you want to understand name resolution, please read the first few chapters\nin http://blog.ionelmc.ro/2015/02/09/understanding-python-metaclasses/.\n\nFlow checks\n+++++++++++\n\nFlow checks are not really mature. There's only a check for ``isinstance``.  It\nwould check whether a flow has the form of ``if isinstance(a, type_or_tuple)``.\nUnfortunately every other thing is being ignored (e.g. a == '' would be easy to\ncheck for -> a is a string). There's big potential in these checks."
          },
          "analysis.py": {
            "functions": [
              "add",
              "_check_for_setattr",
              "add_attribute_error",
              "_check_for_exception_catch",
              "__init__",
              "line",
              "column",
              "code",
              "__unicode__",
              "__str__",
              "__eq__",
              "__ne__",
              "__hash__",
              "__repr__",
              "check_match",
              "check_try_for_except",
              "check_hasattr"
            ],
            "classes": [
              "Error",
              "Warning"
            ],
            "imports": [
              "rp.libs.parso.python",
              "rp.libs.jedi._compatibility",
              "rp.libs.jedi",
              "rp.libs.jedi.evaluate.helpers",
              "rp.libs.jedi.evaluate.context.instance",
              "rp.libs.jedi.evaluate.arguments",
              "rp.libs.jedi.evaluate.context"
            ],
            "size_lines": 225,
            "has_main": false,
            "docstring": "Module for statical analysis."
          },
          "lazy_context.py": {
            "functions": [
              "get_merged_lazy_context",
              "__init__",
              "__repr__",
              "infer",
              "infer",
              "infer",
              "__init__",
              "infer",
              "__init__",
              "infer",
              "infer"
            ],
            "classes": [
              "AbstractLazyContext",
              "LazyKnownContext",
              "LazyKnownContexts",
              "LazyUnknownContext",
              "LazyTreeContext",
              "MergedLazyContexts"
            ],
            "imports": [
              "rp.libs.jedi.evaluate.base_context",
              "rp.libs.jedi.common.utils"
            ],
            "size_lines": 60,
            "has_main": false,
            "docstring": null
          },
          "sys_path.py": {
            "functions": [
              "_abs_path",
              "_paths_from_assignment",
              "_paths_from_list_modifications",
              "check_sys_path_modifications",
              "discover_buildout_paths",
              "_get_paths_from_buildout_script",
              "_get_parent_dir_with_file",
              "_get_buildout_script_paths",
              "remove_python_path_suffix",
              "transform_path_to_dotted",
              "get_sys_path_powers",
              "iter_potential_solutions"
            ],
            "classes": [],
            "imports": [
              "os",
              "rp.libs.jedi._compatibility",
              "rp.libs.jedi.evaluate.cache",
              "rp.libs.jedi.evaluate.base_context",
              "rp.libs.jedi.evaluate.helpers",
              "rp.libs.jedi.common.utils",
              "rp.libs.jedi.parser_utils",
              "rp.libs.jedi.file_io",
              "rp.libs.jedi",
              "rp.libs.jedi",
              "rp.libs.jedi.evaluate.context"
            ],
            "size_lines": 262,
            "has_main": false,
            "docstring": null
          },
          "arguments.py": {
            "functions": [
              "try_iter_content",
              "repack_with_argument_clinic",
              "_iterate_argument_clinic",
              "_parse_argument_clinic",
              "unpack_arglist",
              "_iterate_star_args",
              "_star_star_dict",
              "decorator",
              "eval_all",
              "unpack",
              "get_executed_params_and_issues",
              "get_calling_nodes",
              "get_executed_params_and_issues",
              "__repr__",
              "__init__",
              "create_cached",
              "unpack",
              "_as_tree_tuple_objects",
              "iter_calling_names_with_star",
              "__repr__",
              "get_calling_nodes",
              "__init__",
              "unpack",
              "__repr__",
              "__init__",
              "context",
              "argument_node",
              "trailer",
              "unpack",
              "get_calling_nodes",
              "__repr__",
              "wrapper"
            ],
            "classes": [
              "ParamIssue",
              "_AbstractArgumentsMixin",
              "AbstractArguments",
              "AnonymousArguments",
              "TreeArguments",
              "ValuesArguments",
              "TreeArgumentsWrapper"
            ],
            "imports": [
              "re",
              "rp.libs.parso.python",
              "rp.libs.jedi._compatibility",
              "rp.libs.jedi",
              "rp.libs.jedi.evaluate.utils",
              "rp.libs.jedi.evaluate",
              "rp.libs.jedi.evaluate.lazy_context",
              "rp.libs.jedi.evaluate.names",
              "rp.libs.jedi.evaluate.base_context",
              "rp.libs.jedi.evaluate.context",
              "rp.libs.jedi.evaluate.cache",
              "rp.libs.jedi.evaluate.param",
              "rp.libs.jedi.evaluate.context.instance",
              "rp.libs.jedi.evaluate.dynamic",
              "rp.libs.jedi.evaluate.dynamic"
            ],
            "size_lines": 383,
            "has_main": false,
            "docstring": null
          },
          "flow_analysis.py": {
            "functions": [
              "_get_flow_scopes",
              "reachability_check",
              "_break_check",
              "_check_if",
              "__init__",
              "invert",
              "__and__",
              "__repr__"
            ],
            "classes": [
              "Status"
            ],
            "imports": [
              "rp.libs.jedi.parser_utils",
              "rp.libs.jedi.evaluate.recursion"
            ],
            "size_lines": 119,
            "has_main": false,
            "docstring": null
          },
          "cache.py": {
            "functions": [
              "_memoize_default",
              "evaluator_function_cache",
              "evaluator_method_cache",
              "evaluator_as_method_param_cache",
              "evaluator_method_generator_cache",
              "func",
              "decorator",
              "decorator",
              "decorator",
              "__call__",
              "func",
              "wrapper",
              "wrapper"
            ],
            "classes": [
              "CachedMetaClass"
            ],
            "imports": [
              "rp.libs.jedi"
            ],
            "size_lines": 124,
            "has_main": false,
            "docstring": "- the popular ``_memoize_default`` works like a typical memoize and returns the\n  default otherwise.\n- ``CachedMetaClass`` uses ``_memoize_default`` to do the same with classes."
          },
          "__init__.py": {
            "functions": [
              "__init__",
              "import_module",
              "execute",
              "builtins_module",
              "typing_module",
              "reset_recursion_limitations",
              "get_sys_path",
              "eval_element",
              "_eval_element_if_evaluated",
              "_eval_element_cached",
              "goto_definitions",
              "_follow_error_node_imports_if_possible",
              "goto",
              "create_context",
              "parse_and_get_code",
              "parse",
              "parent_scope",
              "from_scope_node"
            ],
            "classes": [
              "Evaluator"
            ],
            "imports": [
              "rp.libs.parso.python",
              "rp.libs.parso",
              "rp.libs.parso",
              "rp.libs.jedi.file_io",
              "rp.libs.jedi",
              "rp.libs.jedi",
              "rp.libs.jedi.evaluate.utils",
              "rp.libs.jedi.evaluate",
              "rp.libs.jedi.evaluate",
              "rp.libs.jedi.evaluate.cache",
              "rp.libs.jedi.evaluate",
              "rp.libs.jedi.evaluate.names",
              "rp.libs.jedi.evaluate.base_context",
              "rp.libs.jedi.evaluate.context",
              "rp.libs.jedi.evaluate.context.iterable",
              "rp.libs.jedi.evaluate.syntax_tree",
              "rp.libs.jedi.plugins"
            ],
            "size_lines": 444,
            "has_main": false,
            "docstring": "Evaluation of Python code in |jedi| is based on three assumptions:\n\n* The code uses as least side effects as possible. Jedi understands certain\n  list/tuple/set modifications, but there's no guarantee that Jedi detects\n  everything (list.append in different modules for example).\n* No magic is being used:\n\n  - metaclasses\n  - ``setattr()`` / ``__import__()``\n  - writing to ``globals()``, ``locals()``, ``object.__dict__``\n* The programmer is not a total dick, e.g. like `this\n  <https://github.com/davidhalter/jedi/issues/24>`_ :-)\n\nThe actual algorithm is based on a principle called lazy evaluation.  That\nsaid, the typical entry point for static analysis is calling\n``eval_expr_stmt``. There's separate logic for autocompletion in the API, the\nevaluator is all about evaluating an expression.\n\nTODO this paragraph is not what jedi does anymore, it's similar, but not the\nsame.\n\nNow you need to understand what follows after ``eval_expr_stmt``. Let's\nmake an example::\n\n    import datetime\n    datetime.date.toda# <-- cursor here\n\nFirst of all, this module doesn't care about completion. It really just cares\nabout ``datetime.date``. At the end of the procedure ``eval_expr_stmt`` will\nreturn the ``date`` class.\n\nTo *visualize* this (simplified):\n\n- ``Evaluator.eval_expr_stmt`` doesn't do much, because there's no assignment.\n- ``Context.eval_node`` cares for resolving the dotted path\n- ``Evaluator.find_types`` searches for global definitions of datetime, which\n  it finds in the definition of an import, by scanning the syntax tree.\n- Using the import logic, the datetime module is found.\n- Now ``find_types`` is called again by ``eval_node`` to find ``date``\n  inside the datetime module.\n\nNow what would happen if we wanted ``datetime.date.foo.bar``? Two more\ncalls to ``find_types``. However the second call would be ignored, because the\nfirst one would return nothing (there's no foo attribute in ``date``).\n\nWhat if the import would contain another ``ExprStmt`` like this::\n\n    from foo import bar\n    Date = bar.baz\n\nWell... You get it. Just another ``eval_expr_stmt`` recursion. It's really\neasy. Python can obviously get way more complicated then this. To understand\ntuple assignments, list comprehensions and everything else, a lot more code had\nto be written.\n\nJedi has been tested very well, so you can just start modifying code. It's best\nto write your own test first for your \"new\" feature. Don't be scared of\nbreaking stuff. As long as the tests pass, you're most likely to be fine.\n\nI need to mention now that lazy evaluation is really good because it\nonly *evaluates* what needs to be *evaluated*. All the statements and modules\nthat are not used are just being ignored."
          },
          "param.py": {
            "functions": [
              "_add_argument_issue",
              "get_executed_params_and_issues",
              "_error_argument_count",
              "_create_default_param",
              "create_default_params",
              "__init__",
              "infer_annotations",
              "infer",
              "matches_signature",
              "var_args",
              "__repr__",
              "too_many_args"
            ],
            "classes": [
              "ExecutedParam"
            ],
            "imports": [
              "collections",
              "rp.libs.jedi",
              "rp.libs.jedi.evaluate.utils",
              "rp.libs.jedi.evaluate",
              "rp.libs.jedi.evaluate.lazy_context",
              "rp.libs.jedi.evaluate",
              "rp.libs.jedi.evaluate.context",
              "rp.libs.jedi.evaluate.gradual.annotation"
            ],
            "size_lines": 254,
            "has_main": false,
            "docstring": null
          },
          "docstrings.py": {
            "functions": [
              "_get_numpy_doc_string_cls",
              "_search_param_in_numpydocstr",
              "_search_return_in_numpydocstr",
              "_expand_typestr",
              "_search_param_in_docstr",
              "_strip_rst_role",
              "_evaluate_for_statement_string",
              "_execute_types_in_stmt",
              "_execute_array_values",
              "infer_param",
              "infer_return_types",
              "eval_docstring",
              "search_return_in_docstr"
            ],
            "classes": [],
            "imports": [
              "re",
              "warnings",
              "textwrap",
              "rp.libs.parso",
              "rp.libs.jedi._compatibility",
              "rp.libs.jedi",
              "rp.libs.jedi.evaluate.utils",
              "rp.libs.jedi.evaluate.cache",
              "rp.libs.jedi.evaluate.base_context",
              "rp.libs.jedi.evaluate.lazy_context",
              "numpydoc.docscrape",
              "rp.libs.jedi.evaluate.context",
              "rp.libs.jedi.evaluate.context.iterable",
              "rp.libs.jedi.evaluate.context.instance",
              "rp.libs.jedi.evaluate.context"
            ],
            "size_lines": 312,
            "has_main": false,
            "docstring": "Docstrings are another source of information for functions and classes.\n:mod:`jedi.evaluate.dynamic` tries to find all executions of functions, while\nthe docstring parsing is much easier. There are three different types of\ndocstrings that |jedi| understands:\n\n- `Sphinx <http://sphinx-doc.org/markup/desc.html#info-field-lists>`_\n- `Epydoc <http://epydoc.sourceforge.net/manual-fields.html>`_\n- `Numpydoc <https://github.com/numpy/numpy/blob/master/doc/HOWTO_DOCUMENT.rst.txt>`_\n\nFor example, the sphinx annotation ``:type foo: str`` clearly states that the\ntype of ``foo`` is ``str``.\n\nAs an addition to parameter searching, this module also provides return\nannotations."
          },
          "imports.py": {
            "functions": [
              "infer_import",
              "_add_error",
              "_level_to_base_import_path",
              "import_module",
              "_load_python_module",
              "_load_builtin_module",
              "_load_module_from_path",
              "get_modules_containing_name",
              "__init__",
              "add",
              "get",
              "get_from_path",
              "__init__",
              "_get_nested_import_name",
              "__getattr__",
              "__repr__",
              "__init__",
              "_str_import_path",
              "_sys_path_with_modifications",
              "follow",
              "_get_module_names",
              "completion_names",
              "check_directory",
              "check_fs",
              "get_file_ios_to_check"
            ],
            "classes": [
              "ModuleCache",
              "NestedImportModule",
              "Importer"
            ],
            "imports": [
              "os",
              "rp.libs.parso.python",
              "rp.libs.parso.tree",
              "rp.libs.parso",
              "rp.libs.jedi._compatibility",
              "rp.libs.jedi",
              "rp.libs.jedi",
              "rp.libs.jedi.file_io",
              "rp.libs.jedi.parser_utils",
              "rp.libs.jedi.evaluate",
              "rp.libs.jedi.evaluate",
              "rp.libs.jedi.evaluate",
              "rp.libs.jedi.evaluate",
              "rp.libs.jedi.evaluate.utils",
              "rp.libs.jedi.evaluate.cache",
              "rp.libs.jedi.evaluate.names",
              "rp.libs.jedi.evaluate.base_context",
              "rp.libs.jedi.evaluate.gradual.typeshed",
              "rp.libs.jedi.evaluate.context.module",
              "rp.libs.jedi.plugins",
              "rp.libs.jedi.evaluate.context",
              "rp.libs.jedi.evaluate.context.namespace",
              "rp.libs.jedi.evaluate.gradual.conversion"
            ],
            "size_lines": 569,
            "has_main": false,
            "docstring": ":mod:`jedi.evaluate.imports` is here to resolve import statements and return\nthe modules/classes/functions/whatever, which they stand for. However there's\nnot any actual importing done. This module is about finding modules in the\nfilesystem. This can be quite tricky sometimes, because Python imports are not\nalways that simple.\n\nThis module uses imp for python up to 3.2 and importlib for python 3.3 on; the\ncorrect implementation is delegated to _compatibility.\n\nThis module also supports import autocompletion, which means to complete\nstatements like ``from datetim`` (cursor at the end would return ``datetime``)."
          },
          "names.py": {
            "functions": [
              "infer",
              "goto",
              "get_qualified_names",
              "_get_qualified_names",
              "get_root_context",
              "__repr__",
              "is_import",
              "api_type",
              "__init__",
              "infer",
              "__init__",
              "get_qualified_names",
              "_get_qualified_names",
              "goto",
              "is_import",
              "string_name",
              "start_pos",
              "infer",
              "_get_qualified_names",
              "get_root_context",
              "api_type",
              "__init__",
              "goto",
              "infer",
              "api_type",
              "maybe_positional_argument",
              "maybe_keyword_argument",
              "_kind_string",
              "get_kind",
              "to_string",
              "get_param",
              "star_count",
              "to_string",
              "_get_param_node",
              "annotation_node",
              "infer_annotation",
              "infer_default",
              "default_node",
              "string_name",
              "get_kind",
              "infer",
              "get_param",
              "__init__",
              "__getattr__",
              "__repr__",
              "__init__",
              "get_qualified_names",
              "parent_context",
              "infer",
              "goto",
              "api_type",
              "__init__",
              "infer",
              "__getattr__",
              "__repr__"
            ],
            "classes": [
              "AbstractNameDefinition",
              "AbstractArbitraryName",
              "AbstractTreeName",
              "ContextNameMixin",
              "ContextName",
              "TreeNameDefinition",
              "_ParamMixin",
              "ParamNameInterface",
              "BaseTreeParamName",
              "ParamName",
              "ParamNameWrapper",
              "ImportName",
              "SubModuleName",
              "NameWrapper"
            ],
            "imports": [
              "abc",
              "rp.libs.parso.tree",
              "rp.libs.jedi._compatibility",
              "rp.libs.jedi.evaluate.base_context",
              "rp.libs.jedi.cache",
              "rp.libs.jedi.evaluate.syntax_tree",
              "rp.libs.jedi.evaluate.imports"
            ],
            "size_lines": 376,
            "has_main": false,
            "docstring": null
          },
          "dynamic.py": {
            "functions": [
              "search_params",
              "_search_function_executions",
              "_get_lambda_name",
              "_get_possible_nodes",
              "_check_name_for_execution",
              "__init__",
              "infer",
              "create_func_excs"
            ],
            "classes": [
              "DynamicExecutedParams"
            ],
            "imports": [
              "rp.libs.jedi",
              "rp.libs.jedi",
              "rp.libs.jedi.evaluate.cache",
              "rp.libs.jedi.evaluate",
              "rp.libs.jedi.evaluate.arguments",
              "rp.libs.jedi.evaluate.param",
              "rp.libs.jedi.evaluate.helpers",
              "rp.libs.jedi.evaluate.utils",
              "rp.libs.jedi.parser_utils",
              "rp.libs.jedi.evaluate.context",
              "rp.libs.jedi.evaluate.base_context",
              "rp.libs.jedi.evaluate",
              "rp.libs.jedi.evaluate.context.function"
            ],
            "size_lines": 232,
            "has_main": false,
            "docstring": "One of the really important features of |jedi| is to have an option to\nunderstand code like this::\n\n    def foo(bar):\n        bar. # completion here\n    foo(1)\n\nThere's no doubt wheter bar is an ``int`` or not, but if there's also a call\nlike ``foo('str')``, what would happen? Well, we'll just show both. Because\nthat's what a human would expect.\n\nIt works as follows:\n\n- |Jedi| sees a param\n- search for function calls named ``foo``\n- execute these calls and check the input."
          },
          "syntax_tree.py": {
            "functions": [
              "_limit_context_infers",
              "_py__stop_iteration_returns",
              "eval_node",
              "eval_trailer",
              "eval_atom",
              "eval_expr_stmt",
              "_eval_expr_stmt",
              "eval_or_test",
              "eval_factor",
              "_literals_to_types",
              "_eval_comparison",
              "_is_annotation_name",
              "_is_tuple",
              "_is_list",
              "_bool_to_context",
              "_get_tuple_ints",
              "_eval_comparison_part",
              "_remove_statements",
              "tree_name_to_contexts",
              "_apply_decorators",
              "check_tuple_assignments",
              "eval_subscript_list",
              "wrapper",
              "check"
            ],
            "classes": [],
            "imports": [
              "copy",
              "rp.libs.parso.python",
              "rp.libs.jedi._compatibility",
              "rp.libs.jedi",
              "rp.libs.jedi",
              "rp.libs.jedi.evaluate.base_context",
              "rp.libs.jedi.evaluate.lazy_context",
              "rp.libs.jedi.evaluate",
              "rp.libs.jedi.evaluate",
              "rp.libs.jedi.evaluate",
              "rp.libs.jedi.evaluate",
              "rp.libs.jedi.evaluate",
              "rp.libs.jedi.evaluate",
              "rp.libs.jedi.evaluate.context",
              "rp.libs.jedi.evaluate.context",
              "rp.libs.jedi.evaluate.context",
              "rp.libs.jedi.evaluate.finder",
              "rp.libs.jedi.evaluate.helpers",
              "rp.libs.jedi.evaluate.compiled.access",
              "rp.libs.jedi.evaluate.cache",
              "rp.libs.jedi.evaluate.gradual.stub_context",
              "rp.libs.jedi.evaluate.gradual",
              "rp.libs.jedi.evaluate.context.decorator",
              "rp.libs.jedi.plugins"
            ],
            "size_lines": 731,
            "has_main": false,
            "docstring": "Functions evaluating the syntax tree."
          },
          "utils.py": {
            "functions": [
              "to_list",
              "unite",
              "safe_property",
              "reraise_uncaught",
              "ignored",
              "indent_block",
              "wrapper",
              "wrapper",
              "__init__",
              "push_back",
              "__iter__",
              "next",
              "__next__"
            ],
            "classes": [
              "UncaughtAttributeError",
              "PushBackIterator"
            ],
            "imports": [
              "sys",
              "contextlib",
              "functools",
              "re",
              "os",
              "rp.libs.jedi._compatibility"
            ],
            "size_lines": 120,
            "has_main": false,
            "docstring": "A universal module with functions / classes without dependencies. "
          },
          "parser_cache.py": {
            "functions": [
              "get_yield_exprs"
            ],
            "classes": [],
            "imports": [
              "rp.libs.jedi.evaluate.cache"
            ],
            "size_lines": 7,
            "has_main": false,
            "docstring": null
          },
          "star_args.py": {
            "functions": [
              "_iter_nodes_for_param",
              "_goes_to_param_name",
              "_to_callables",
              "_remove_given_params",
              "process_params",
              "__init__",
              "get_kind"
            ],
            "classes": [
              "ParamNameFixedKind"
            ],
            "imports": [
              "rp.libs.jedi._compatibility",
              "rp.libs.jedi.evaluate.utils",
              "rp.libs.jedi.evaluate.names",
              "rp.libs.parso.python.tree",
              "rp.libs.jedi.evaluate.arguments",
              "rp.libs.jedi.evaluate.names",
              "rp.libs.jedi.evaluate.syntax_tree"
            ],
            "size_lines": 207,
            "has_main": false,
            "docstring": "This module is responsible for evaluating *args and **kwargs for signatures.\n\nThis means for example in this case::\n\n    def foo(a, b, c): ...\n\n    def bar(*args):\n        return foo(1, *args)\n\nThe signature here for bar should be `bar(b, c)` instead of bar(*args)."
          },
          "recursion.py": {
            "functions": [
              "execution_allowed",
              "execution_recursion_decorator",
              "__init__",
              "decorator",
              "__init__",
              "pop_execution",
              "push_execution",
              "wrapper"
            ],
            "classes": [
              "RecursionDetector",
              "ExecutionRecursionDetector"
            ],
            "imports": [
              "contextlib",
              "rp.libs.jedi",
              "rp.libs.jedi.evaluate.base_context"
            ],
            "size_lines": 154,
            "has_main": false,
            "docstring": "Recursions are the recipe of |jedi| to conquer Python code. However, someone\nmust stop recursions going mad. Some settings are here to make |jedi| stop at\nthe right time. You can read more about them :ref:`here <settings-recursion>`.\n\nNext to :mod:`jedi.evaluate.cache` this module also makes |jedi| not\nthread-safe. Why?  ``execution_recursion_decorator`` uses class variables to\ncount the function calls.\n\n.. _settings-recursion:\n\nSettings\n~~~~~~~~~~\n\nRecursion settings are important if you don't want extremly\nrecursive python code to go absolutely crazy.\n\nThe default values are based on experiments while completing the |jedi| library\nitself (inception!). But I don't think there's any other Python library that\nuses recursion in a similarly extreme way. Completion should also be fast and\ntherefore the quality might not always be maximal.\n\n.. autodata:: recursion_limit\n.. autodata:: total_function_execution_limit\n.. autodata:: per_function_execution_limit\n.. autodata:: per_function_recursion_limit"
          },
          "signature.py": {
            "functions": [
              "to_string",
              "__init__",
              "name",
              "annotation_string",
              "get_param_names",
              "bind",
              "__repr__",
              "__init__",
              "bind",
              "_annotation",
              "annotation_string",
              "get_param_names",
              "__init__",
              "annotation_string",
              "_function_context",
              "bind",
              "__init__",
              "__getattr__",
              "param_strings"
            ],
            "classes": [
              "_SignatureMixin",
              "AbstractSignature",
              "TreeSignature",
              "BuiltinSignature",
              "SignatureWrapper"
            ],
            "imports": [
              "rp.libs.jedi._compatibility",
              "rp.libs.jedi.cache",
              "rp.libs.jedi.evaluate.star_args"
            ],
            "size_lines": 117,
            "has_main": false,
            "docstring": null
          },
          "helpers.py": {
            "functions": [
              "is_stdlib_path",
              "deep_ast_copy",
              "evaluate_call_of_leaf",
              "call_of_leaf",
              "get_names_of_node",
              "get_module_names",
              "predefine_names",
              "is_string",
              "is_literal",
              "_get_safe_value_or_none",
              "get_int_or_none",
              "get_str_or_none",
              "is_number",
              "reraise_getitem_errors",
              "parse_dotted_names",
              "contexts_from_qualified_names",
              "is_module_scope_name"
            ],
            "classes": [
              "SimpleGetItemNotFound"
            ],
            "imports": [
              "copy",
              "sys",
              "re",
              "os",
              "itertools",
              "contextlib",
              "rp.libs.parso.python",
              "rp.libs.jedi._compatibility",
              "rp.libs.jedi.parser_utils",
              "rp.libs.jedi.evaluate.syntax_tree",
              "rp.libs.jedi.evaluate"
            ],
            "size_lines": 270,
            "has_main": false,
            "docstring": null
          },
          "usages.py": {
            "functions": [
              "_resolve_names",
              "_dictionarize",
              "_find_names",
              "usages"
            ],
            "classes": [],
            "imports": [
              "rp.libs.jedi.evaluate",
              "rp.libs.jedi.evaluate.names"
            ],
            "size_lines": 62,
            "has_main": false,
            "docstring": null
          },
          "filters.py": {
            "functions": [
              "_get_definition_names",
              "publish_method",
              "get_global_filters",
              "_filter",
              "get",
              "values",
              "__init__",
              "wrap_names",
              "get",
              "values",
              "__init__",
              "get",
              "_convert_names",
              "values",
              "__repr__",
              "__init__",
              "_filter",
              "_is_name_reachable",
              "_check_flows",
              "__init__",
              "_convert_names",
              "__init__",
              "get",
              "_filter",
              "values",
              "__init__",
              "get",
              "values",
              "_convert",
              "__repr__",
              "__init__",
              "get",
              "values",
              "__repr__",
              "__init__",
              "py__call__",
              "__getattr__",
              "__init__",
              "_convert",
              "__init__",
              "get_filters",
              "__init__",
              "decorator",
              "yielder",
              "__init__",
              "infer"
            ],
            "classes": [
              "AbstractFilter",
              "FilterWrapper",
              "AbstractUsedNamesFilter",
              "ParserTreeFilter",
              "FunctionExecutionFilter",
              "GlobalNameFilter",
              "DictFilter",
              "MergedFilter",
              "_BuiltinMappedMethod",
              "SpecialMethodFilter",
              "_OverwriteMeta",
              "_AttributeOverwriteMixin",
              "LazyAttributeOverwrite",
              "AttributeOverwrite",
              "SpecialMethodName"
            ],
            "imports": [
              "abc",
              "weakref",
              "rp.libs.parso.tree",
              "rp.libs.jedi._compatibility",
              "rp.libs.jedi.evaluate",
              "rp.libs.jedi.evaluate.base_context",
              "rp.libs.jedi.parser_utils",
              "rp.libs.jedi.evaluate.utils",
              "rp.libs.jedi.evaluate.names",
              "rp.libs.jedi.evaluate.context.function"
            ],
            "size_lines": 413,
            "has_main": false,
            "docstring": "Filters are objects that you can use to filter names in different scopes. They\nare needed for name resolution."
          },
          "gradual": {
            "typeshed.py": {
              "functions": [
                "_merge_create_stub_map",
                "_create_stub_map",
                "_get_typeshed_directories",
                "_cache_stub_file_map",
                "import_module_decorator",
                "_try_to_load_stub_cached",
                "_try_to_load_stub",
                "_load_from_typeshed",
                "_try_to_load_stub_from_file",
                "create_stub_module",
                "generate",
                "wrapper"
              ],
              "classes": [],
              "imports": [
                "os",
                "re",
                "functools",
                "rp.libs.jedi.file_io",
                "rp.libs.jedi._compatibility",
                "rp.libs.jedi.parser_utils",
                "rp.libs.jedi.evaluate.base_context",
                "rp.libs.jedi.evaluate.gradual.stub_context"
              ],
              "size_lines": 290,
              "has_main": false,
              "docstring": null
            },
            "annotation.py": {
              "functions": [
                "eval_annotation",
                "_evaluate_annotation_string",
                "_get_forward_reference_node",
                "_split_comment_param_declaration",
                "infer_param",
                "_infer_param",
                "py__annotations__",
                "infer_return_types",
                "infer_type_vars_for_execution",
                "_merge_type_var_dicts",
                "_infer_type_vars",
                "find_type_from_comment_hint_for",
                "find_type_from_comment_hint_with",
                "find_type_from_comment_hint_assign",
                "_find_type_from_comment_hint",
                "find_unknown_type_vars",
                "_unpack_subscriptlist",
                "check_node"
              ],
              "classes": [],
              "imports": [
                "re",
                "rp.libs.parso",
                "rp.libs.jedi._compatibility",
                "rp.libs.jedi.evaluate.cache",
                "rp.libs.jedi.evaluate.base_context",
                "rp.libs.jedi.evaluate.gradual.typing",
                "rp.libs.jedi.evaluate.gradual.typing",
                "rp.libs.jedi.evaluate.helpers",
                "rp.libs.jedi.evaluate.compiled",
                "rp.libs.jedi",
                "rp.libs.jedi",
                "rp.libs.jedi.evaluate.context.instance"
              ],
              "size_lines": 406,
              "has_main": false,
              "docstring": "PEP 0484 ( https://www.python.org/dev/peps/pep-0484/ ) describes type hints\nthrough function annotations. There is a strong suggestion in this document\nthat only the type of type hinting defined in PEP0484 should be allowed\nas annotations in future python versions."
            },
            "stub_context.py": {
              "functions": [
                "__init__",
                "is_stub",
                "sub_modules_dict",
                "_get_first_non_stub_filters",
                "_get_stub_filters",
                "get_filters",
                "get_filters",
                "infer",
                "__init__",
                "_is_name_reachable"
              ],
              "classes": [
                "StubModuleContext",
                "TypingModuleWrapper",
                "_StubName",
                "StubFilter",
                "VersionInfo"
              ],
              "imports": [
                "rp.libs.jedi.evaluate.base_context",
                "rp.libs.jedi.evaluate.context.module",
                "rp.libs.jedi.evaluate.filters",
                "rp.libs.jedi.evaluate.gradual.typing"
              ],
              "size_lines": 106,
              "has_main": false,
              "docstring": null
            },
            "conversion.py": {
              "functions": [
                "_stub_to_python_context_set",
                "_infer_from_stub",
                "_try_stub_to_python_names",
                "_load_stub_module",
                "_python_to_stub_names",
                "convert_names",
                "convert_contexts",
                "to_stub"
              ],
              "classes": [],
              "imports": [
                "rp.libs.jedi",
                "rp.libs.jedi.evaluate.base_context",
                "rp.libs.jedi.evaluate.utils",
                "rp.libs.jedi.evaluate.gradual.stub_context",
                "rp.libs.jedi.evaluate.compiled.mixed",
                "rp.libs.jedi.evaluate.gradual.typeshed"
              ],
              "size_lines": 200,
              "has_main": false,
              "docstring": null
            },
            "__init__.py": {
              "functions": [],
              "classes": [],
              "imports": [],
              "size_lines": 1,
              "has_main": false,
              "docstring": null
            },
            "utils.py": {
              "functions": [
                "load_proper_stub_module"
              ],
              "classes": [],
              "imports": [
                "os",
                "rp.libs.jedi.evaluate.gradual.typeshed"
              ],
              "size_lines": 33,
              "has_main": false,
              "docstring": null
            },
            "typing.py": {
              "functions": [
                "_iter_over_arguments",
                "__init__",
                "infer",
                "__init__",
                "tree_node",
                "get_filters",
                "py__class__",
                "name",
                "__repr__",
                "infer",
                "_remap",
                "__init__",
                "__repr__",
                "execute_annotation",
                "gather_annotation_classes",
                "py__getitem__",
                "py__bases__",
                "get_metaclasses",
                "iterate",
                "resolve_forward_references",
                "__init__",
                "name",
                "py__name__",
                "__repr__",
                "_get_wrapped_context",
                "_get_getitem_contexts",
                "py__call__",
                "_is_homogenous",
                "py__simple_getitem__",
                "py__iter__",
                "py__getitem__",
                "execute_annotation",
                "py__call__",
                "_find_string_name",
                "__init__",
                "py__name__",
                "get_filters",
                "_get_classes",
                "is_same_class",
                "constraints",
                "define_generics",
                "execute_annotation",
                "__repr__",
                "py__call__",
                "py__call__",
                "__init__",
                "py__call__",
                "py__call__",
                "__init__",
                "infer",
                "py__name__",
                "__repr__",
                "__init__",
                "get",
                "values",
                "get_type_var_filter",
                "get_filters",
                "is_same_class",
                "py__call__",
                "get_generics",
                "define_generics",
                "__repr__",
                "py__bases__",
                "__init__",
                "get_generics",
                "__init__",
                "get_generics",
                "__init__",
                "infer",
                "_remap_type_vars",
                "py__stop_iteration_returns",
                "iter_",
                "__init__",
                "get",
                "values"
              ],
              "classes": [
                "TypingName",
                "_BaseTypingContext",
                "TypingModuleName",
                "TypingModuleFilterWrapper",
                "_WithIndexBase",
                "TypingContextWithIndex",
                "TypingContext",
                "_TypingClassMixin",
                "TypingClassContextWithIndex",
                "TypingClassContext",
                "TypeAlias",
                "_ContainerBase",
                "Callable",
                "Tuple",
                "Generic",
                "Protocol",
                "Any",
                "TypeVarClass",
                "TypeVar",
                "OverloadFunction",
                "NewTypeFunction",
                "NewType",
                "CastFunction",
                "BoundTypeVarName",
                "TypeVarFilter",
                "AbstractAnnotatedClass",
                "LazyGenericClass",
                "GenericClass",
                "LazyAnnotatedBaseClass",
                "InstanceWrapper",
                "EmptyFilter"
              ],
              "imports": [
                "rp.libs.jedi._compatibility",
                "rp.libs.jedi",
                "rp.libs.jedi.evaluate.cache",
                "rp.libs.jedi.evaluate.compiled",
                "rp.libs.jedi.evaluate.base_context",
                "rp.libs.jedi.evaluate.lazy_context",
                "rp.libs.jedi.evaluate.context.iterable",
                "rp.libs.jedi.evaluate.arguments",
                "rp.libs.jedi.evaluate.utils",
                "rp.libs.jedi.evaluate.filters",
                "rp.libs.jedi.evaluate.names",
                "rp.libs.jedi.evaluate.helpers",
                "rp.libs.jedi.evaluate.context.klass",
                "rp.libs.jedi.evaluate.imports",
                "rp.libs.jedi.evaluate.gradual.annotation"
              ],
              "size_lines": 708,
              "has_main": false,
              "docstring": "We need to somehow work with the typing objects. Since the typing objects are\npretty bare we need to add all the Jedi customizations to make them work as\ncontexts.\n\nThis file deals with all the typing.py cases."
            }
          },
          "context": {
            "instance.py": {
              "functions": [
                "__init__",
                "infer",
                "matches_signature",
                "__init__",
                "get_executed_params_and_issues",
                "__init__",
                "is_instance",
                "get_qualified_names",
                "get_annotated_class_object",
                "py__call__",
                "py__class__",
                "py__bool__",
                "get_function_slot_names",
                "execute_function_slots",
                "py__get__",
                "get_filters",
                "py__getitem__",
                "py__iter__",
                "name",
                "create_init_executions",
                "create_instance_context",
                "get_signatures",
                "__repr__",
                "__init__",
                "name",
                "get_first_non_keyword_argument_contexts",
                "is_stub",
                "__init__",
                "name",
                "_get_annotated_class_object",
                "get_annotated_class_object",
                "_get_annotation_init_functions",
                "__init__",
                "get_annotated_class_object",
                "__init__",
                "infer",
                "__init__",
                "get",
                "values",
                "_convert",
                "__init__",
                "is_bound_method",
                "py__class__",
                "_get_arguments",
                "get_function_execution",
                "py__call__",
                "get_signature_functions",
                "get_signatures",
                "__repr__",
                "is_bound_method",
                "get_signatures",
                "__init__",
                "parent_context",
                "__init__",
                "infer",
                "__getattr__",
                "__repr__",
                "__init__",
                "get",
                "values",
                "_convert",
                "__repr__",
                "__init__",
                "_filter",
                "_filter_self_names",
                "_convert_names",
                "_check_flows",
                "__init__",
                "unpack",
                "get_executed_params_and_issues",
                "iterate"
              ],
              "classes": [
                "InstanceExecutedParam",
                "AnonymousInstanceArguments",
                "AbstractInstanceContext",
                "CompiledInstance",
                "TreeInstance",
                "AnonymousInstance",
                "CompiledInstanceName",
                "CompiledInstanceClassFilter",
                "BoundMethod",
                "CompiledBoundMethod",
                "SelfName",
                "LazyInstanceClassName",
                "InstanceClassFilter",
                "SelfAttributeFilter",
                "InstanceArguments"
              ],
              "imports": [
                "abc",
                "rp.libs.jedi",
                "rp.libs.jedi",
                "rp.libs.jedi.evaluate",
                "rp.libs.jedi.evaluate.compiled.context",
                "rp.libs.jedi.evaluate.helpers",
                "rp.libs.jedi.evaluate.filters",
                "rp.libs.jedi.evaluate.names",
                "rp.libs.jedi.evaluate.base_context",
                "rp.libs.jedi.evaluate.lazy_context",
                "rp.libs.jedi.evaluate.cache",
                "rp.libs.jedi.evaluate.arguments",
                "rp.libs.jedi.evaluate.context.function",
                "rp.libs.jedi.evaluate.context.klass",
                "rp.libs.jedi.evaluate.context",
                "rp.libs.jedi.parser_utils",
                "rp.libs.jedi.evaluate.dynamic",
                "rp.libs.jedi.evaluate.gradual.annotation"
              ],
              "size_lines": 532,
              "has_main": false,
              "docstring": null
            },
            "iterable.py": {
              "functions": [
                "comprehension_from_atom",
                "unpack_tuple_to_dict",
                "check_array_additions",
                "_check_array_additions",
                "get_dynamic_array_instance",
                "py__stop_iteration_returns",
                "_get_wrapped_context",
                "is_instance",
                "py__bool__",
                "py__iter__",
                "py__next__",
                "py__stop_iteration_returns",
                "name",
                "__init__",
                "py__iter__",
                "py__stop_iteration_returns",
                "__repr__",
                "from_comp_for",
                "get_filters",
                "_get_comp_for_context",
                "_nested",
                "_iterate",
                "py__iter__",
                "__repr__",
                "_get_generics",
                "name",
                "_get_generics",
                "_get_wrapped_context",
                "py__bool__",
                "py__class__",
                "parent",
                "py__getitem__",
                "__init__",
                "py__simple_getitem__",
                "__init__",
                "py__iter__",
                "py__simple_getitem__",
                "_dict_keys",
                "_dict_values",
                "_imitate_values",
                "_imitate_items",
                "get_mapping_item_contexts",
                "exact_key_items",
                "__init__",
                "py__simple_getitem__",
                "py__iter__",
                "py__len__",
                "_dict_values",
                "get_tree_entries",
                "exact_key_items",
                "__repr__",
                "__init__",
                "_imitate_values",
                "_imitate_items",
                "_dict_keys",
                "get_mapping_item_contexts",
                "__init__",
                "__init__",
                "py__simple_getitem__",
                "py__iter__",
                "py__bool__",
                "__repr__",
                "__init__",
                "py__iter__",
                "py__simple_getitem__",
                "_values",
                "_dict_values",
                "_dict_keys",
                "get_mapping_item_contexts",
                "exact_key_items",
                "__init__",
                "py__iter__",
                "py__simple_getitem__",
                "get_tree_entries",
                "__len__",
                "find_additions",
                "__init__",
                "py__class__",
                "py__iter__",
                "iterate",
                "__init__",
                "__getattr__",
                "obj",
                "get_safe_value",
                "get"
              ],
              "classes": [
                "IterableMixin",
                "GeneratorBase",
                "Generator",
                "CompForContext",
                "ComprehensionMixin",
                "_DictMixin",
                "Sequence",
                "_BaseComprehension",
                "ListComprehension",
                "SetComprehension",
                "GeneratorComprehension",
                "DictComprehension",
                "SequenceLiteralContext",
                "DictLiteralContext",
                "_FakeArray",
                "FakeSequence",
                "FakeDict",
                "MergedArray",
                "_ArrayInstance",
                "Slice"
              ],
              "imports": [
                "sys",
                "rp.libs.jedi",
                "rp.libs.jedi",
                "rp.libs.jedi._compatibility",
                "rp.libs.jedi.evaluate",
                "rp.libs.jedi.evaluate",
                "rp.libs.jedi.evaluate",
                "rp.libs.jedi.evaluate.lazy_context",
                "rp.libs.jedi.evaluate.helpers",
                "rp.libs.jedi.evaluate.utils",
                "rp.libs.jedi.evaluate.cache",
                "rp.libs.jedi.evaluate.filters",
                "rp.libs.jedi.evaluate.base_context",
                "rp.libs.jedi.parser_utils",
                "rp.libs.jedi.evaluate",
                "rp.libs.jedi.evaluate",
                "rp.libs.jedi.evaluate.gradual.typing",
                "rp.libs.jedi.evaluate"
              ],
              "size_lines": 822,
              "has_main": false,
              "docstring": "Contains all classes and functions to deal with lists, dicts, generators and\niterators in general.\n\nArray modifications\n*******************\n\nIf the content of an array (``set``/``list``) is requested somewhere, the\ncurrent module will be checked for appearances of ``arr.append``,\n``arr.insert``, etc.  If the ``arr`` name points to an actual array, the\ncontent will be added\n\nThis can be really cpu intensive, as you can imagine. Because |jedi| has to\nfollow **every** ``append`` and check wheter it's the right array. However this\nworks pretty good, because in *slow* cases, the recursion detector and other\nsettings will stop this process.\n\nIt is important to note that:\n\n1. Array modfications work only in the current module.\n2. Jedi only checks Array additions; ``list.pop``, etc are ignored."
            },
            "decorator.py": {
              "functions": [
                "__init__",
                "py__doc__"
              ],
              "classes": [
                "Decoratee"
              ],
              "imports": [
                "rp.libs.jedi.evaluate.base_context"
              ],
              "size_lines": 16,
              "has_main": false,
              "docstring": "Decorators are not really contexts, however we need some wrappers to improve\ndocstrings and other things around decorators."
            },
            "__init__.py": {
              "functions": [],
              "classes": [],
              "imports": [
                "rp.libs.jedi.evaluate.context.module",
                "rp.libs.jedi.evaluate.context.klass",
                "rp.libs.jedi.evaluate.context.function",
                "rp.libs.jedi.evaluate.context.instance"
              ],
              "size_lines": 7,
              "has_main": false,
              "docstring": null
            },
            "klass.py": {
              "functions": [
                "apply_py__get__",
                "__init__",
                "infer",
                "__init__",
                "_convert_names",
                "_equals_origin_scope",
                "_access_possible",
                "_filter",
                "is_class",
                "py__call__",
                "py__class__",
                "name",
                "py__name__",
                "get_param_names",
                "py__mro__",
                "get_filters",
                "get_signatures",
                "get_global_filter",
                "list_type_vars",
                "_get_bases_arguments",
                "py__bases__",
                "py__getitem__",
                "define_generics",
                "get_metaclass_filters",
                "get_metaclasses",
                "remap_type_vars"
              ],
              "classes": [
                "ClassName",
                "ClassFilter",
                "ClassMixin",
                "ClassContext"
              ],
              "imports": [
                "rp.libs.jedi",
                "rp.libs.jedi._compatibility",
                "rp.libs.jedi.parser_utils",
                "rp.libs.jedi.evaluate.cache",
                "rp.libs.jedi.evaluate",
                "rp.libs.jedi.evaluate.lazy_context",
                "rp.libs.jedi.evaluate.filters",
                "rp.libs.jedi.evaluate.names",
                "rp.libs.jedi.evaluate.arguments",
                "rp.libs.jedi.evaluate.base_context",
                "rp.libs.jedi.evaluate.context.function",
                "rp.libs.jedi.plugins",
                "rp.libs.jedi.evaluate.syntax_tree",
                "rp.libs.jedi.evaluate.context",
                "rp.libs.jedi.evaluate.gradual.typing",
                "rp.libs.jedi.evaluate.gradual.typing",
                "rp.libs.jedi.evaluate.compiled",
                "rp.libs.jedi.evaluate.gradual.annotation",
                "rp.libs.jedi.evaluate"
              ],
              "size_lines": 345,
              "has_main": false,
              "docstring": "Like described in the :mod:`parso.python.tree` module,\nthere's a need for an ast like module to represent the states of parsed\nmodules.\n\nBut now there are also structures in Python that need a little bit more than\nthat. An ``Instance`` for example is only a ``Class`` before it is\ninstantiated. This class represents these cases.\n\nSo, why is there also a ``Class`` class here? Well, there are decorators and\nthey change classes in Python 3.\n\nRepresentation modules also define \"magic methods\". Those methods look like\n``py__foo__`` and are typically mappable to the Python equivalents ``__call__``\nand others. Here's a list:\n\n====================================== ========================================\n**Method**                             **Description**\n-------------------------------------- ----------------------------------------\npy__call__(arguments: Array)           On callable objects, returns types.\npy__bool__()                           Returns True/False/None; None means that\n                                       there's no certainty.\npy__bases__()                          Returns a list of base classes.\npy__iter__()                           Returns a generator of a set of types.\npy__class__()                          Returns the class of an instance.\npy__simple_getitem__(index: int/str)   Returns a a set of types of the index.\n                                       Can raise an IndexError/KeyError.\npy__getitem__(indexes: ContextSet)     Returns a a set of types of the index.\npy__file__()                           Only on modules. Returns None if does\n                                       not exist.\npy__package__() -> List[str]           Only on modules. For the import system.\npy__path__()                           Only on modules. For the import system.\npy__get__(call_object)                 Only on instances. Simulates\n                                       descriptors.\npy__doc__()                            Returns the docstring for a context.\n====================================== ========================================"
            },
            "module.py": {
              "functions": [
                "iter_module_names",
                "__init__",
                "infer",
                "__init__",
                "string_name",
                "sub_modules_dict",
                "get_filters",
                "py__class__",
                "is_module",
                "is_stub",
                "name",
                "_string_name",
                "_module_attributes_dict",
                "iter_star_filters",
                "star_imports",
                "get_qualified_names",
                "__init__",
                "is_stub",
                "py__name__",
                "py__file__",
                "py__package__",
                "_py__path__",
                "py__path__",
                "__repr__"
              ],
              "classes": [
                "_ModuleAttributeName",
                "ModuleName",
                "SubModuleDictMixin",
                "ModuleMixin",
                "ModuleContext"
              ],
              "imports": [
                "re",
                "os",
                "rp.libs.jedi",
                "rp.libs.jedi.evaluate.cache",
                "rp.libs.jedi.evaluate.names",
                "rp.libs.jedi.evaluate.filters",
                "rp.libs.jedi.evaluate",
                "rp.libs.jedi.evaluate.base_context",
                "rp.libs.jedi.evaluate.names",
                "rp.libs.jedi.evaluate.helpers",
                "rp.libs.jedi.evaluate.compiled",
                "rp.libs.jedi.evaluate.base_context",
                "rp.libs.jedi.evaluate.imports"
              ],
              "size_lines": 287,
              "has_main": false,
              "docstring": null
            },
            "namespace.py": {
              "functions": [
                "__init__",
                "__init__",
                "get_filters",
                "name",
                "py__file__",
                "py__package__",
                "py__path__",
                "py__name__",
                "is_namespace",
                "is_stub",
                "__repr__"
              ],
              "classes": [
                "ImplicitNSName",
                "ImplicitNamespaceContext"
              ],
              "imports": [
                "rp.libs.jedi.evaluate.cache",
                "rp.libs.jedi.evaluate.filters",
                "rp.libs.jedi.evaluate.names",
                "rp.libs.jedi.evaluate.base_context",
                "rp.libs.jedi.evaluate.context.module"
              ],
              "size_lines": 65,
              "has_main": false,
              "docstring": null
            },
            "function.py": {
              "functions": [
                "_find_overload_functions",
                "__init__",
                "start_pos",
                "infer",
                "get_qualified_names",
                "get_filters",
                "py__get__",
                "get_param_names",
                "name",
                "py__name__",
                "py__call__",
                "get_function_execution",
                "get_signatures",
                "is_function",
                "from_context",
                "py__class__",
                "get_default_param_context",
                "get_signature_functions",
                "__init__",
                "get_default_param_context",
                "get_qualified_names",
                "__init__",
                "get_return_values",
                "_get_yield_lazy_context",
                "get_yield_lazy_contexts",
                "merge_yield_contexts",
                "get_filters",
                "get_executed_params_and_issues",
                "matches_signature",
                "infer",
                "__init__",
                "py__call__",
                "get_signature_functions",
                "_is_overload_decorated",
                "create"
              ],
              "classes": [
                "LambdaName",
                "FunctionAndClassBase",
                "FunctionMixin",
                "FunctionContext",
                "MethodContext",
                "FunctionExecutionContext",
                "OverloadedFunctionContext"
              ],
              "imports": [
                "rp.libs.parso.python",
                "rp.libs.jedi._compatibility",
                "rp.libs.jedi",
                "rp.libs.jedi.evaluate.cache",
                "rp.libs.jedi.evaluate",
                "rp.libs.jedi.evaluate",
                "rp.libs.jedi.evaluate",
                "rp.libs.jedi.evaluate",
                "rp.libs.jedi.evaluate",
                "rp.libs.jedi.evaluate.signature",
                "rp.libs.jedi.evaluate.arguments",
                "rp.libs.jedi.evaluate.filters",
                "rp.libs.jedi.evaluate.names",
                "rp.libs.jedi.evaluate.base_context",
                "rp.libs.jedi.evaluate.lazy_context",
                "rp.libs.jedi.evaluate.context",
                "rp.libs.jedi",
                "rp.libs.jedi.evaluate.parser_cache",
                "rp.libs.jedi.evaluate.helpers",
                "rp.libs.jedi.evaluate.context.instance",
                "rp.libs.jedi.evaluate.gradual.typing",
                "rp.libs.jedi.evaluate.gradual.annotation"
              ],
              "size_lines": 445,
              "has_main": false,
              "docstring": null
            }
          },
          "compiled": {
            "access.py": {
              "functions": [
                "safe_getattr",
                "compiled_objects_cache",
                "create_access",
                "load_module",
                "create_access_path",
                "_force_unicode_decorator",
                "get_api_type",
                "_is_class_instance",
                "decorator",
                "__init__",
                "__getstate__",
                "__setstate__",
                "__init__",
                "__repr__",
                "_create_access",
                "_create_access_path",
                "py__bool__",
                "py__file__",
                "py__doc__",
                "py__name__",
                "py__mro__accesses",
                "py__getitem__all_values",
                "py__simple_getitem__",
                "py__iter__list",
                "py__class__",
                "py__bases__",
                "py__path__",
                "get_repr",
                "is_class",
                "is_module",
                "is_instance",
                "ismethoddescriptor",
                "get_qualified_names",
                "dir",
                "has_iter",
                "is_allowed_getattr",
                "getattr_paths",
                "get_safe_value",
                "get_api_type",
                "get_access_path_tuples",
                "_get_objects_path",
                "execute_operation",
                "needs_type_completions",
                "get_signature_params",
                "_get_signature",
                "get_return_annotation",
                "negate",
                "get_dir_infos",
                "wrapper",
                "try_to_get_name",
                "get"
              ],
              "classes": [
                "AccessPath",
                "DirectObjectAccess"
              ],
              "imports": [
                "__future__",
                "inspect",
                "types",
                "sys",
                "operator",
                "collections",
                "rp.libs.jedi._compatibility",
                "rp.libs.jedi.evaluate.compiled.getattr_static",
                "traceback",
                "warnings",
                "sys"
              ],
              "size_lines": 512,
              "has_main": false,
              "docstring": null
            },
            "__init__.py": {
              "functions": [
                "builtin_from_name",
                "create_simple_object",
                "get_string_context_set",
                "load_module",
                "__init__",
                "__getattribute__",
                "_get_wrapped_context",
                "__repr__"
              ],
              "classes": [
                "CompiledValue"
              ],
              "imports": [
                "rp.libs.jedi._compatibility",
                "rp.libs.jedi.evaluate.compiled.context",
                "rp.libs.jedi.evaluate.base_context"
              ],
              "size_lines": 65,
              "has_main": false,
              "docstring": null
            },
            "mixed.py": {
              "functions": [
                "_load_module",
                "_get_object_to_check",
                "_find_syntax_node_name",
                "_create",
                "__init__",
                "get_filters",
                "get_signatures",
                "py__call__",
                "get_safe_value",
                "py__simple_getitem__",
                "__repr__",
                "start_pos",
                "start_pos",
                "infer",
                "api_type"
              ],
              "classes": [
                "MixedObject",
                "MixedName",
                "MixedObjectFilter"
              ],
              "imports": [
                "inspect",
                "os",
                "sys",
                "rp.libs.jedi.parser_utils",
                "rp.libs.jedi",
                "rp.libs.jedi.evaluate",
                "rp.libs.jedi.cache",
                "rp.libs.jedi.file_io",
                "rp.libs.jedi.evaluate.base_context",
                "rp.libs.jedi.evaluate.helpers",
                "rp.libs.jedi.evaluate.context",
                "rp.libs.jedi.evaluate.cache",
                "rp.libs.jedi.evaluate.compiled.getattr_static",
                "rp.libs.jedi.evaluate.compiled.access",
                "rp.libs.jedi.evaluate.compiled.context",
                "rp.libs.jedi.evaluate.gradual.conversion"
              ],
              "size_lines": 292,
              "has_main": false,
              "docstring": "Used only for REPL Completion."
            },
            "context.py": {
              "functions": [
                "_parse_function_doc",
                "_create_from_name",
                "_normalize_create_args",
                "create_from_access_path",
                "create_cached_compiled_object",
                "__init__",
                "__call__",
                "__get__",
                "__init__",
                "py__call__",
                "py__class__",
                "py__mro__",
                "py__bases__",
                "py__path__",
                "string_names",
                "get_qualified_names",
                "py__bool__",
                "py__file__",
                "is_class",
                "is_module",
                "is_compiled",
                "is_stub",
                "is_instance",
                "py__doc__",
                "get_param_names",
                "get_signatures",
                "__repr__",
                "_parse_function_doc",
                "api_type",
                "_cls",
                "get_filters",
                "_ensure_one_filter",
                "py__simple_getitem__",
                "py__getitem__",
                "py__iter__",
                "py__name__",
                "name",
                "_execute_function",
                "get_safe_value",
                "execute_operation",
                "negate",
                "get_metaclasses",
                "__init__",
                "_get_qualified_names",
                "__repr__",
                "api_type",
                "infer",
                "__init__",
                "string_name",
                "to_string",
                "get_kind",
                "infer",
                "__init__",
                "get_kind",
                "to_string",
                "infer",
                "__init__",
                "__init__",
                "infer",
                "__init__",
                "get",
                "_get",
                "_get_cached_name",
                "values",
                "_create_name",
                "__repr__",
                "wrapper",
                "change_options"
              ],
              "classes": [
                "CheckAttribute",
                "CompiledObject",
                "CompiledName",
                "SignatureParamName",
                "UnresolvableParamName",
                "CompiledContextName",
                "EmptyCompiledName",
                "CompiledObjectFilter"
              ],
              "imports": [
                "re",
                "functools",
                "rp.libs.jedi",
                "rp.libs.jedi.evaluate.utils",
                "rp.libs.jedi._compatibility",
                "rp.libs.jedi.cache",
                "rp.libs.jedi.evaluate.filters",
                "rp.libs.jedi.evaluate.names",
                "rp.libs.jedi.evaluate.base_context",
                "rp.libs.jedi.evaluate.lazy_context",
                "rp.libs.jedi.evaluate.compiled.access",
                "rp.libs.jedi.evaluate.cache",
                "rp.libs.jedi.evaluate.helpers",
                "rp.libs.jedi.evaluate.signature",
                "rp.libs.jedi.evaluate",
                "rp.libs.jedi.evaluate.compiled",
                "rp.libs.jedi.evaluate.compiled",
                "rp.libs.jedi.evaluate.context"
              ],
              "size_lines": 542,
              "has_main": false,
              "docstring": "Imitate the parser representation."
            },
            "getattr_static.py": {
              "functions": [
                "_check_instance",
                "_check_class",
                "_is_type",
                "_shadowed_dict_newstyle",
                "_static_getmro_newstyle",
                "_safe_hasattr",
                "_safe_is_data_descriptor",
                "getattr_static",
                "_shadowed_dict",
                "_get_type",
                "_static_getmro",
                "oldstyle_mro"
              ],
              "classes": [
                "_OldStyleClass"
              ],
              "imports": [
                "types",
                "rp.libs.jedi._compatibility"
              ],
              "size_lines": 177,
              "has_main": false,
              "docstring": "A static version of getattr.\nThis is a backport of the Python 3 code with a little bit of additional\ninformation returned to enable Jedi to make decisions."
            },
            "subprocess": {
              "functions.py": {
                "functions": [
                  "get_sys_path",
                  "load_module",
                  "get_compiled_method_return",
                  "create_simple_object",
                  "get_module_info",
                  "list_module_names",
                  "get_builtin_module_names",
                  "_test_raise_error",
                  "_test_print",
                  "_get_init_path",
                  "safe_literal_eval"
                ],
                "classes": [],
                "imports": [
                  "__future__",
                  "sys",
                  "os",
                  "rp.libs.jedi._compatibility",
                  "rp.libs.jedi.evaluate.compiled",
                  "rp.libs.jedi",
                  "warnings"
                ],
                "size_lines": 91,
                "has_main": false,
                "docstring": null
              },
              "__init__.py": {
                "functions": [
                  "_enqueue_output",
                  "_add_stderr_to_debug",
                  "_get_function",
                  "_cleanup_process",
                  "__init__",
                  "get_or_create_access_handle",
                  "get_access_handle",
                  "set_access_handle",
                  "__getattr__",
                  "__init__",
                  "__getattr__",
                  "_convert_access_handles",
                  "__del__",
                  "__init__",
                  "__repr__",
                  "_get_process",
                  "run",
                  "get_sys_path",
                  "_kill",
                  "_send",
                  "delete_evaluator",
                  "__init__",
                  "_get_evaluator",
                  "_run",
                  "listen",
                  "__init__",
                  "add_subprocess",
                  "__repr__",
                  "__getstate__",
                  "__setstate__",
                  "__getattr__",
                  "_workaround",
                  "_cached_results",
                  "wrapper"
                ],
                "classes": [
                  "_EvaluatorProcess",
                  "EvaluatorSameProcess",
                  "EvaluatorSubprocess",
                  "CompiledSubprocess",
                  "Listener",
                  "AccessHandle"
                ],
                "imports": [
                  "os",
                  "sys",
                  "subprocess",
                  "socket",
                  "errno",
                  "traceback",
                  "functools",
                  "threading",
                  "rp.libs.jedi._compatibility",
                  "rp.libs.jedi",
                  "rp.libs.jedi.cache",
                  "rp.libs.jedi.evaluate.compiled.subprocess",
                  "rp.libs.jedi.evaluate.compiled.access",
                  "rp.libs.jedi.api.exceptions",
                  "queue",
                  "Queue",
                  "rp.libs.jedi.evaluate",
                  "rp.libs.jedi.api.environment",
                  "msvcrt"
                ],
                "size_lines": 407,
                "has_main": false,
                "docstring": "Makes it possible to do the compiled analysis in a subprocess. This has two\ngoals:\n\n1. Making it safer - Segfaults and RuntimeErrors as well as stdout/stderr can\n   be ignored and dealt with.\n2. Make it possible to handle different Python versions as well as virtualenvs."
              },
              "__main__.py": {
                "functions": [
                  "_get_paths",
                  "load",
                  "__init__",
                  "find_module"
                ],
                "classes": [
                  "_ExactImporter"
                ],
                "imports": [
                  "os",
                  "sys",
                  "rp.libs.jedi._compatibility",
                  "importlib.machinery",
                  "rp.libs.jedi.evaluate.compiled",
                  "imp",
                  "rp.libs.jedi.evaluate.compiled"
                ],
                "size_lines": 56,
                "has_main": false,
                "docstring": null
              }
            }
          }
        },
        "api": {
          "completion.py": {
            "functions": [
              "get_call_signature_param_names",
              "filter_names",
              "get_user_scope",
              "get_flow_scope_node",
              "_extract_string_while_in_string",
              "__init__",
              "completions",
              "_get_context_completions",
              "_get_keyword_completion_names",
              "_global_completions",
              "_trailer_completions",
              "_get_importer_names",
              "_get_class_context_completions",
              "scan"
            ],
            "classes": [
              "Completion"
            ],
            "imports": [
              "re",
              "rp.libs.parso.python.token",
              "rp.libs.parso.python",
              "rp.libs.parso.tree",
              "rp.libs.jedi._compatibility",
              "rp.libs.jedi",
              "rp.libs.jedi",
              "rp.libs.jedi.api",
              "rp.libs.jedi.api",
              "rp.libs.jedi.api",
              "rp.libs.jedi.api.file_name",
              "rp.libs.jedi.evaluate",
              "rp.libs.jedi.evaluate.helpers",
              "rp.libs.jedi.evaluate.filters",
              "rp.libs.jedi.evaluate.gradual.conversion",
              "rp.libs.jedi.parser_utils"
            ],
            "size_lines": 327,
            "has_main": false,
            "docstring": null
          },
          "keywords.py": {
            "functions": [
              "get_operator",
              "imitate_pydoc",
              "infer",
              "__init__",
              "names",
              "py__doc__",
              "get_signatures",
              "__repr__"
            ],
            "classes": [
              "KeywordName",
              "Keyword"
            ],
            "imports": [
              "pydoc",
              "rp.libs.jedi.evaluate.utils",
              "rp.libs.jedi.evaluate.names",
              "pydoc_data",
              "pydoc_topics"
            ],
            "size_lines": 86,
            "has_main": false,
            "docstring": null
          },
          "__init__.py": {
            "functions": [
              "names",
              "preload_module",
              "set_debug_function",
              "__init__",
              "_get_module",
              "__repr__",
              "completions",
              "goto_definitions",
              "_goto_definitions",
              "goto_assignments",
              "_goto_assignments",
              "usages",
              "call_signatures",
              "_analysis",
              "__init__",
              "_get_module",
              "def_ref_filter",
              "create_name",
              "filter_follow_imports",
              "_usages"
            ],
            "classes": [
              "Script",
              "Interpreter"
            ],
            "imports": [
              "os",
              "sys",
              "warnings",
              "rp.libs.parso",
              "rp.libs.parso.python",
              "rp.libs.jedi._compatibility",
              "rp.libs.jedi.parser_utils",
              "rp.libs.jedi",
              "rp.libs.jedi",
              "rp.libs.jedi",
              "rp.libs.jedi.file_io",
              "rp.libs.jedi.api",
              "rp.libs.jedi.api",
              "rp.libs.jedi.api",
              "rp.libs.jedi.api.completion",
              "rp.libs.jedi.api.environment",
              "rp.libs.jedi.api.project",
              "rp.libs.jedi.evaluate",
              "rp.libs.jedi.evaluate",
              "rp.libs.jedi.evaluate",
              "rp.libs.jedi.evaluate.arguments",
              "rp.libs.jedi.evaluate.helpers",
              "rp.libs.jedi.evaluate.sys_path",
              "rp.libs.jedi.evaluate.names",
              "rp.libs.jedi.evaluate.syntax_tree",
              "rp.libs.jedi.evaluate.context",
              "rp.libs.jedi.evaluate.base_context",
              "rp.libs.jedi.evaluate.context.iterable",
              "rp.libs.jedi.evaluate.gradual.conversion",
              "rp.libs.jedi.evaluate.gradual.utils"
            ],
            "size_lines": 549,
            "has_main": false,
            "docstring": "The API basically only provides one class. You can create a :class:`Script` and\nuse its methods.\n\nAdditionally you can add a debug function with :func:`set_debug_function`.\nAlternatively, if you don't need a custom function and are happy with printing\ndebug messages to stdout, simply call :func:`set_debug_function` without\narguments.\n\n.. warning:: Please, note that Jedi is **not thread safe**."
          },
          "interpreter.py": {
            "functions": [
              "_create",
              "__init__",
              "__init__",
              "get_filters"
            ],
            "classes": [
              "NamespaceObject",
              "MixedModuleContext"
            ],
            "imports": [
              "rp.libs.jedi.evaluate.context",
              "rp.libs.jedi.evaluate",
              "rp.libs.jedi.evaluate.compiled",
              "rp.libs.jedi.evaluate.compiled.access",
              "rp.libs.jedi.evaluate.base_context"
            ],
            "size_lines": 48,
            "has_main": false,
            "docstring": "TODO Some parts of this module are still not well documented."
          },
          "environment.py": {
            "functions": [
              "_get_info",
              "_get_virtual_env_from_var",
              "_calculate_sha256_for_file",
              "get_default_environment",
              "_try_get_same_env",
              "get_cached_default_environment",
              "_get_cached_default_environment",
              "find_virtualenvs",
              "find_system_environments",
              "get_system_environment",
              "create_environment",
              "_get_executable_path",
              "_get_executables_from_windows_registry",
              "_assert_safe",
              "_is_safe",
              "_is_unix_safe_simple",
              "_is_unix_admin",
              "get_grammar",
              "_sha256",
              "__init__",
              "_get_subprocess",
              "__repr__",
              "get_evaluator_subprocess",
              "get_sys_path",
              "__init__",
              "get_evaluator_subprocess",
              "get_sys_path",
              "py27_comp"
            ],
            "classes": [
              "InvalidPythonEnvironment",
              "_BaseEnvironment",
              "Environment",
              "_SameEnvironmentMixin",
              "SameEnvironment",
              "InterpreterEnvironment"
            ],
            "imports": [
              "os",
              "sys",
              "hashlib",
              "filecmp",
              "collections",
              "rp.libs.jedi._compatibility",
              "rp.libs.jedi.cache",
              "rp.libs.jedi.evaluate.compiled.subprocess",
              "rp.libs.parso",
              "winreg",
              "_winreg"
            ],
            "size_lines": 459,
            "has_main": false,
            "docstring": "Environments are a way to activate different Python versions or Virtualenvs for\nstatic analysis. The Python binary in that environment is going to be executed."
          },
          "replstartup.py": {
            "functions": [],
            "classes": [],
            "imports": [
              "rp.libs.jedi.utils",
              "rp.libs.jedi"
            ],
            "size_lines": 30,
            "has_main": false,
            "docstring": "To use Jedi completion in Python interpreter, add the following in your shell\nsetup (e.g., ``.bashrc``). This works only on Linux/Mac, because readline is\nnot available on Windows. If you still want Jedi autocompletion in your REPL,\njust use IPython instead::\n\n    export PYTHONSTARTUP=\"$(python -m jedi repl)\"\n\nThen you will be able to use Jedi completer in your Python interpreter::\n\n    $ python\n    Python 2.7.2+ (default, Jul 20 2012, 22:15:08)\n    [GCC 4.6.1] on linux2\n    Type \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n    >>> import os\n    >>> os.path.join('a', 'b').split().in<TAB>            # doctest: +SKIP\n    ..dex   ..sert"
          },
          "exceptions.py": {
            "functions": [],
            "classes": [
              "_JediError",
              "InternalError",
              "WrongVersion"
            ],
            "imports": [],
            "size_lines": 11,
            "has_main": false,
            "docstring": null
          },
          "classes.py": {
            "functions": [
              "_sort_names_by_start_pos",
              "defined_names",
              "_contexts_to_definitions",
              "_format_signatures",
              "__init__",
              "_get_module",
              "module_path",
              "name",
              "type",
              "module_name",
              "in_builtin_module",
              "line",
              "column",
              "docstring",
              "description",
              "full_name",
              "is_stub",
              "goto_assignments",
              "_goto_assignments",
              "infer",
              "_infer",
              "params",
              "parent",
              "__repr__",
              "get_line_code",
              "get_signatures",
              "execute",
              "__init__",
              "_complete",
              "complete",
              "name_with_symbols",
              "docstring",
              "description",
              "__repr__",
              "follow_definition",
              "__init__",
              "description",
              "desc_with_module",
              "defined_names",
              "is_definition",
              "__eq__",
              "__ne__",
              "__hash__",
              "__init__",
              "params",
              "to_string",
              "__init__",
              "index",
              "bracket_start",
              "__repr__",
              "infer_default",
              "infer_annotation",
              "to_string",
              "kind",
              "__init__",
              "_get_contexts",
              "docstring"
            ],
            "classes": [
              "BaseDefinition",
              "Completion",
              "Definition",
              "Signature",
              "CallSignature",
              "ParamDefinition",
              "_Help"
            ],
            "imports": [
              "re",
              "sys",
              "warnings",
              "rp.libs.jedi",
              "rp.libs.jedi",
              "rp.libs.jedi.evaluate.utils",
              "rp.libs.jedi.cache",
              "rp.libs.jedi.evaluate",
              "rp.libs.jedi.evaluate",
              "rp.libs.jedi.evaluate.imports",
              "rp.libs.jedi.evaluate.context",
              "rp.libs.jedi.evaluate.gradual.typeshed",
              "rp.libs.jedi.evaluate.gradual.conversion",
              "rp.libs.jedi.evaluate.base_context",
              "rp.libs.jedi.api.keywords"
            ],
            "size_lines": 769,
            "has_main": false,
            "docstring": "The :mod:`jedi.api.classes` module contains the return classes of the API.\nThese classes are the much bigger part of the whole API, because they contain\nthe interesting information about completion and goto operations."
          },
          "helpers.py": {
            "functions": [
              "sorted_definitions",
              "get_on_completion_name",
              "_get_code",
              "_get_code_for_stack",
              "get_stack_at_position",
              "evaluate_goto_definition",
              "_iter_arguments",
              "_get_index_and_key",
              "_get_call_signature_details_from_error_node",
              "get_call_signature_details",
              "cache_call_signatures",
              "error_leaf",
              "tokenize_without_endmarker",
              "__init__",
              "index",
              "keyword_name_str",
              "calculate_index",
              "remove_after_pos"
            ],
            "classes": [
              "OnErrorLeaf",
              "CallDetails",
              "EndMarkerReached"
            ],
            "imports": [
              "re",
              "collections",
              "textwrap",
              "rp.libs.parso.python.parser",
              "rp.libs.parso.python",
              "rp.libs.jedi._compatibility",
              "rp.libs.jedi.evaluate.base_context",
              "rp.libs.jedi.evaluate.syntax_tree",
              "rp.libs.jedi.evaluate.helpers",
              "rp.libs.jedi.evaluate.compiled",
              "rp.libs.jedi.cache"
            ],
            "size_lines": 398,
            "has_main": false,
            "docstring": "Helpers for the API"
          },
          "project.py": {
            "functions": [
              "_remove_duplicates_from_path",
              "_force_unicode_list",
              "_is_potential_project",
              "_is_django_path",
              "get_default_project",
              "_get_json_path",
              "load",
              "__init__",
              "_get_base_sys_path",
              "_get_sys_path",
              "save",
              "get_environment",
              "__repr__",
              "py2_comp"
            ],
            "classes": [
              "Project"
            ],
            "imports": [
              "os",
              "json",
              "rp.libs.jedi._compatibility",
              "rp.libs.jedi.api.environment",
              "rp.libs.jedi.api.exceptions",
              "rp.libs.jedi._compatibility",
              "rp.libs.jedi.evaluate.sys_path",
              "rp.libs.jedi.evaluate.cache",
              "rp.libs.jedi.common.utils"
            ],
            "size_lines": 198,
            "has_main": false,
            "docstring": null
          },
          "file_name.py": {
            "functions": [
              "file_name_completions",
              "_get_string_additions",
              "_add_strings",
              "_add_os_path_join",
              "iterate_nodes",
              "check"
            ],
            "classes": [
              "FileName"
            ],
            "imports": [
              "os",
              "rp.libs.jedi._compatibility",
              "rp.libs.jedi.evaluate.names",
              "rp.libs.jedi.api",
              "rp.libs.jedi.evaluate.helpers",
              "rp.libs.jedi.parser_utils"
            ],
            "size_lines": 162,
            "has_main": false,
            "docstring": null
          }
        }
      },
      "peepdis": {
        "legacy.py": {
          "functions": [
            "peep",
            "_shorten",
            "_fix_if_multiline",
            "_positional_exception",
            "__init__",
            "add",
            "__repr__",
            "__str__",
            "__init__"
          ],
          "classes": [
            "OutputStrWrapper",
            "Peeper"
          ],
          "imports": [
            "copy",
            "re",
            "termcolor",
            "types",
            "sys",
            "numpy"
          ],
          "size_lines": 158,
          "has_main": true,
          "docstring": null
        },
        "preferences.py": {
          "functions": [
            "_load_preferences",
            "_update_color_scheme"
          ],
          "classes": [
            "_PreferencesMixin"
          ],
          "imports": [],
          "size_lines": 23,
          "has_main": false,
          "docstring": null
        },
        "__init__.py": {
          "functions": [],
          "classes": [],
          "imports": [
            "legacy"
          ],
          "size_lines": 4,
          "has_main": false,
          "docstring": null
        },
        "core.py": {
          "functions": [
            "peep",
            "__init__",
            "__init__",
            "peep",
            "results",
            "print",
            "evaluate",
            "_index",
            "__init__",
            "evaluate",
            "__init__",
            "_collect_args",
            "evaluate",
            "forge_args",
            "_infer_types",
            "_brute_force_types"
          ],
          "classes": [
            "PeeperMixin",
            "Peeper",
            "BuiltinCallablePeeper",
            "CallablePeeper"
          ],
          "imports": [
            "copy",
            "inspect",
            "types",
            "typing",
            "peepdis.preferences",
            "peepdis.datastructures"
          ],
          "size_lines": 226,
          "has_main": false,
          "docstring": null
        },
        "datastructures.py": {
          "functions": [
            "__init__",
            "get_colored",
            "__str__",
            "__eq__",
            "__init__",
            "get_colored",
            "update_positional",
            "update_kwargs",
            "generate_args",
            "null_args",
            "is_full",
            "__getitem__",
            "__setitem__",
            "__init__",
            "print",
            "get_colored",
            "obj_type",
            "output_type"
          ],
          "classes": [
            "Arg",
            "ArgDict",
            "Output"
          ],
          "imports": [
            "collections",
            "termcolor",
            "typing",
            "peepdis.preferences"
          ],
          "size_lines": 148,
          "has_main": false,
          "docstring": null
        }
      },
      "pyflann": {
        "index.py": {
          "functions": [
            "set_distance_type",
            "__init__",
            "__del__",
            "nn",
            "build_index",
            "save_index",
            "load_index",
            "nn_index",
            "nn_radius",
            "delete_index",
            "kmeans",
            "hierarchical_kmeans",
            "__ensureRandomSeed"
          ],
          "classes": [
            "FLANN"
          ],
          "imports": [
            "bindings.flann_ctypes",
            "io.dataset",
            "numpy.random"
          ],
          "size_lines": 397,
          "has_main": false,
          "docstring": null
        },
        "__init__.py": {
          "functions": [],
          "classes": [],
          "imports": [
            "index",
            "io.dataset",
            "io.hdf5_dataset"
          ],
          "size_lines": 33,
          "has_main": false,
          "docstring": null
        },
        "exceptions.py": {
          "functions": [
            "__init__",
            "__init__"
          ],
          "classes": [
            "FLANNException",
            "CommandException"
          ],
          "imports": [],
          "size_lines": 40,
          "has_main": false,
          "docstring": null
        },
        "util": {
          "__init__.py": {
            "functions": [],
            "classes": [],
            "imports": [],
            "size_lines": 26,
            "has_main": false,
            "docstring": null
          },
          "weave_tools.py": {
            "functions": [
              "__init__",
              "get_name",
              "include",
              "add_support_code",
              "extra_args",
              "__call__",
              "add_function",
              "_import",
              "__init__",
              "pack",
              "decorate"
            ],
            "classes": [
              "CModule",
              "CStruct"
            ],
            "imports": [
              "sys",
              "string",
              "os",
              "numpy",
              "struct",
              "scipy.weave",
              "inspect",
              "inspect"
            ],
            "size_lines": 173,
            "has_main": false,
            "docstring": null
          }
        },
        "io": {
          "hdf5_dataset.py": {
            "functions": [
              "__missing_h5py",
              "check",
              "save",
              "load",
              "load_range"
            ],
            "classes": [],
            "imports": [
              "rp.libs.pyflann.exceptions",
              "numpy",
              "h5py"
            ],
            "size_lines": 94,
            "has_main": false,
            "docstring": null
          },
          "dat_dataset.py": {
            "functions": [
              "is_number",
              "check",
              "save",
              "load"
            ],
            "classes": [],
            "imports": [
              "rp.libs.pyflann.exceptions",
              "numpy"
            ],
            "size_lines": 59,
            "has_main": false,
            "docstring": null
          },
          "__init__.py": {
            "functions": [],
            "classes": [],
            "imports": [
              "dataset"
            ],
            "size_lines": 27,
            "has_main": false,
            "docstring": null
          },
          "binary_dataset.py": {
            "functions": [
              "check",
              "save",
              "load"
            ],
            "classes": [],
            "imports": [
              "rp.libs.pyflann.exceptions",
              "numpy",
              "os.path"
            ],
            "size_lines": 69,
            "has_main": false,
            "docstring": null
          },
          "dataset.py": {
            "functions": [
              "load",
              "save"
            ],
            "classes": [],
            "imports": [
              "rp.libs.pyflann.exceptions",
              "os.path",
              "numpy"
            ],
            "size_lines": 63,
            "has_main": false,
            "docstring": null
          },
          "npy_dataset.py": {
            "functions": [
              "check",
              "save",
              "load"
            ],
            "classes": [],
            "imports": [
              "rp.libs.pyflann.exceptions",
              "numpy"
            ],
            "size_lines": 56,
            "has_main": false,
            "docstring": null
          }
        },
        "bindings": {
          "__init__.py": {
            "functions": [],
            "classes": [],
            "imports": [
              "flann_ctypes"
            ],
            "size_lines": 31,
            "has_main": false,
            "docstring": null
          },
          "flann_ctypes.py": {
            "functions": [
              "load_flann_library",
              "define_functions",
              "ensure_2d_array",
              "__init__",
              "update",
              "__getitem__",
              "__setitem__",
              "keys",
              "__translate",
              "__translate_back"
            ],
            "classes": [
              "CustomStructure",
              "FLANNParameters",
              "FlannLib"
            ],
            "imports": [
              "ctypes",
              "numpy",
              "numpy.ctypeslib",
              "os",
              "rp.libs.pyflann.exceptions",
              "sys"
            ],
            "size_lines": 372,
            "has_main": false,
            "docstring": null
          }
        }
      },
      "pyfx": {
        "logging.py": {
          "functions": [
            "setup_logger"
          ],
          "classes": [],
          "imports": [
            "loguru"
          ],
          "size_lines": 19,
          "has_main": false,
          "docstring": "Separate file for logging configuration."
        },
        "cli_utils.py": {
          "functions": [
            "exit_on_exception",
            "load_from_clipboard",
            "parse",
            "wrapper"
          ],
          "classes": [],
          "imports": [
            "functools",
            "click",
            "pyperclip",
            "rp.libs.pyfx"
          ],
          "size_lines": 37,
          "has_main": false,
          "docstring": null
        },
        "__init__.py": {
          "functions": [],
          "classes": [],
          "imports": [
            "app"
          ],
          "size_lines": 2,
          "has_main": false,
          "docstring": null
        },
        "__version__.py": {
          "functions": [],
          "classes": [],
          "imports": [],
          "size_lines": 2,
          "has_main": false,
          "docstring": null
        },
        "cli.py": {
          "functions": [
            "main"
          ],
          "classes": [],
          "imports": [
            "click",
            "__version__",
            "cli_utils",
            "app",
            "logging",
            "model"
          ],
          "size_lines": 57,
          "has_main": false,
          "docstring": null
        },
        "app.py": {
          "functions": [
            "__init__",
            "run",
            "exit"
          ],
          "classes": [
            "PyfxApp"
          ],
          "imports": [
            "config",
            "model",
            "service.client",
            "service.dispatcher",
            "view"
          ],
          "size_lines": 39,
          "has_main": false,
          "docstring": "Example\n=======\n.. code-block:: python\n   :linenos:\n\n   from rp.libs.pyfx import Controller\n\n   # data is the what you want to render as TUI\n   # only supports dict, list and primitive variable\n   Controller().run_with_data(data)"
        },
        "config": {
          "config.py": {
            "functions": [],
            "classes": [
              "Configuration"
            ],
            "imports": [
              "dataclasses",
              "view"
            ],
            "size_lines": 9,
            "has_main": false,
            "docstring": null
          },
          "config_parser.py": {
            "functions": [
              "parse",
              "__init__",
              "parse",
              "__load_schema",
              "__load_config"
            ],
            "classes": [
              "ConfigurationParser"
            ],
            "imports": [
              "pathlib",
              "dacite",
              "yamale",
              "first",
              "yamale",
              "yamale.validators",
              "config_error",
              "validators",
              "config"
            ],
            "size_lines": 59,
            "has_main": false,
            "docstring": null
          },
          "config_transformer.py": {
            "functions": [
              "transform",
              "load_yaml"
            ],
            "classes": [
              "AbstractConfigurationTransformer"
            ],
            "imports": [
              "abc",
              "yaml",
              "yaml",
              "yaml"
            ],
            "size_lines": 29,
            "has_main": false,
            "docstring": null
          },
          "config_error.py": {
            "functions": [
              "__init__"
            ],
            "classes": [
              "ConfigurationError"
            ],
            "imports": [],
            "size_lines": 4,
            "has_main": false,
            "docstring": null
          },
          "__init__.py": {
            "functions": [],
            "classes": [],
            "imports": [
              "config",
              "config_parser"
            ],
            "size_lines": 3,
            "has_main": false,
            "docstring": null
          },
          "validators": {
            "options.py": {
              "functions": [
                "__init__",
                "_is_valid",
                "fail"
              ],
              "classes": [
                "Options"
              ],
              "imports": [
                "overrides",
                "yamale.validators"
              ],
              "size_lines": 20,
              "has_main": false,
              "docstring": null
            },
            "__init__.py": {
              "functions": [],
              "classes": [],
              "imports": [
                "options"
              ],
              "size_lines": 2,
              "has_main": false,
              "docstring": null
            }
          }
        },
        "model": {
          "__init__.py": {
            "functions": [],
            "classes": [],
            "imports": [
              "model",
              "io.datasource"
            ],
            "size_lines": 12,
            "has_main": false,
            "docstring": "`Pyfx`'s model.\n\nIt loads data from various sources and applies and completes given JSONPath query\non the current loaded JSON data.\n\n* query directly uses :mod:`jsonpath_ng`\n* auto-completion is achieved by home-made :mod:`~pyfx.model.autocomplete`"
          },
          "model.py": {
            "functions": [
              "__init__",
              "load",
              "query",
              "complete",
              "_query"
            ],
            "classes": [
              "Model"
            ],
            "imports": [
              "jsonpath_ng",
              "loguru",
              "autocomplete",
              "io.datasource"
            ],
            "size_lines": 55,
            "has_main": false,
            "docstring": null
          },
          "autocomplete": {
            "__init__.py": {
              "functions": [],
              "classes": [],
              "imports": [
                "autocomplete_listener"
              ],
              "size_lines": 12,
              "has_main": false,
              "docstring": "ANTLR4 based JSONPath Auto-Completion Module.\n\nThe auto-completion is achieved by implementing an AutoCompleteListener which extends ErrorListener\nand ParseListener based on syntax defined in JSONPath.g4_ which is based on JSONPath_ and jsonpath_ng_.\n\n.. _JSONPath.g4: https://github.com/cielong/pyfx/blob/doc/src/pyfx/model/common/jsonpath/JSONPath.g4\n.. _JSONPath: https://goessner.net/articles/JsonPath/\n.. _jsonpath_ng: https://github.com/h2non/jsonpath-ng"
            },
            "autocomplete_listener.py": {
              "functions": [
                "autocomplete",
                "__init__",
                "reset",
                "options",
                "prefix",
                "is_partial_complete",
                "syntaxError",
                "exitFieldAccessor",
                "complete_double_dot_field_access",
                "complete_single_dot_field_access",
                "complete_bracket_field_access",
                "complete_filters",
                "complete_union",
                "find_last_valid_query",
                "find_options",
                "_generate_list_completes"
              ],
              "classes": [
                "JSONPathAutoCompleteListener"
              ],
              "imports": [
                "re",
                "antlr4",
                "antlr4.error.ErrorListener",
                "loguru",
                "overrides",
                "common.jsonpath"
              ],
              "size_lines": 320,
              "has_main": false,
              "docstring": null
            }
          },
          "io": {
            "__init__.py": {
              "functions": [],
              "classes": [],
              "imports": [],
              "size_lines": 1,
              "has_main": false,
              "docstring": null
            },
            "datasource.py": {
              "functions": [
                "create_data_source",
                "read_json",
                "__init__",
                "read_json",
                "__init__",
                "read_json",
                "__init__",
                "read_json",
                "__init__",
                "read_json"
              ],
              "classes": [
                "DataSourceType",
                "DataSource",
                "FileDataSource",
                "TextStreamDataSource",
                "StringDataSource",
                "InMemoryDataSource"
              ],
              "imports": [
                "json",
                "abc",
                "enum",
                "json",
                "loguru",
                "overrides"
              ],
              "size_lines": 110,
              "has_main": false,
              "docstring": null
            }
          },
          "common": {
            "__init__.py": {
              "functions": [],
              "classes": [],
              "imports": [],
              "size_lines": 1,
              "has_main": false,
              "docstring": null
            },
            "jsonpath": {
              "JSONPathLexer.py": {
                "functions": [
                  "serializedATN",
                  "__init__"
                ],
                "classes": [
                  "JSONPathLexer"
                ],
                "imports": [
                  "antlr4",
                  "io",
                  "typing.io",
                  "sys"
                ],
                "size_lines": 127,
                "has_main": false,
                "docstring": null
              },
              "__init__.py": {
                "functions": [],
                "classes": [],
                "imports": [
                  "JSONPathParser",
                  "JSONPathLexer",
                  "JSONPathListener"
                ],
                "size_lines": 10,
                "has_main": false,
                "docstring": "A homemade JSONPath grammar using ANTLR4.\n\nThe reason to build a separate grammar is to build auto-completion for JSONPath\nand finding resources on building autocompletion on ANTLR4 is much easier :)"
              },
              "JSONPathParser.py": {
                "functions": [
                  "serializedATN",
                  "__init__",
                  "jsonpath",
                  "expression",
                  "doubleDotExpression",
                  "singleDotExpression",
                  "filters",
                  "numericFilter",
                  "stringFilter",
                  "booleanFilter",
                  "union",
                  "arraySlice",
                  "fieldAccessor",
                  "field",
                  "bracketField",
                  "arrayIndex",
                  "wildcard",
                  "bracketWildcard",
                  "__init__",
                  "ROOT",
                  "EOF",
                  "expression",
                  "getRuleIndex",
                  "enterRule",
                  "exitRule",
                  "__init__",
                  "singleDotExpression",
                  "doubleDotExpression",
                  "getRuleIndex",
                  "enterRule",
                  "exitRule",
                  "__init__",
                  "DOUBLE_DOT",
                  "field",
                  "bracketField",
                  "getRuleIndex",
                  "enterRule",
                  "exitRule",
                  "__init__",
                  "fieldAccessor",
                  "SINGLE_DOT",
                  "wildcard",
                  "bracketWildcard",
                  "filters",
                  "arraySlice",
                  "union",
                  "getRuleIndex",
                  "enterRule",
                  "exitRule",
                  "__init__",
                  "numericFilter",
                  "stringFilter",
                  "booleanFilter",
                  "getRuleIndex",
                  "enterRule",
                  "exitRule",
                  "__init__",
                  "CURRENT",
                  "fieldAccessor",
                  "INT",
                  "getRuleIndex",
                  "enterRule",
                  "exitRule",
                  "__init__",
                  "CURRENT",
                  "fieldAccessor",
                  "STRING",
                  "getRuleIndex",
                  "enterRule",
                  "exitRule",
                  "__init__",
                  "CURRENT",
                  "fieldAccessor",
                  "getRuleIndex",
                  "enterRule",
                  "exitRule",
                  "__init__",
                  "STRING",
                  "LETTER",
                  "getRuleIndex",
                  "enterRule",
                  "exitRule",
                  "__init__",
                  "INT",
                  "getRuleIndex",
                  "enterRule",
                  "exitRule",
                  "__init__",
                  "SINGLE_DOT",
                  "field",
                  "bracketField",
                  "arrayIndex",
                  "getRuleIndex",
                  "enterRule",
                  "exitRule",
                  "__init__",
                  "LETTER",
                  "getRuleIndex",
                  "enterRule",
                  "exitRule",
                  "__init__",
                  "STRING",
                  "LETTER",
                  "getRuleIndex",
                  "enterRule",
                  "exitRule",
                  "__init__",
                  "INT",
                  "getRuleIndex",
                  "enterRule",
                  "exitRule",
                  "__init__",
                  "getRuleIndex",
                  "enterRule",
                  "exitRule",
                  "__init__",
                  "getRuleIndex",
                  "enterRule",
                  "exitRule"
                ],
                "classes": [
                  "JSONPathParser",
                  "JsonpathContext",
                  "ExpressionContext",
                  "DoubleDotExpressionContext",
                  "SingleDotExpressionContext",
                  "FiltersContext",
                  "NumericFilterContext",
                  "StringFilterContext",
                  "BooleanFilterContext",
                  "UnionContext",
                  "ArraySliceContext",
                  "FieldAccessorContext",
                  "FieldContext",
                  "BracketFieldContext",
                  "ArrayIndexContext",
                  "WildcardContext",
                  "BracketWildcardContext"
                ],
                "imports": [
                  "antlr4",
                  "io",
                  "sys",
                  "typing",
                  "typing.io"
                ],
                "size_lines": 1167,
                "has_main": false,
                "docstring": null
              },
              "JSONPathListener.py": {
                "functions": [
                  "enterJsonpath",
                  "exitJsonpath",
                  "enterExpression",
                  "exitExpression",
                  "enterDoubleDotExpression",
                  "exitDoubleDotExpression",
                  "enterSingleDotExpression",
                  "exitSingleDotExpression",
                  "enterFilters",
                  "exitFilters",
                  "enterNumericFilter",
                  "exitNumericFilter",
                  "enterStringFilter",
                  "exitStringFilter",
                  "enterBooleanFilter",
                  "exitBooleanFilter",
                  "enterUnion",
                  "exitUnion",
                  "enterArraySlice",
                  "exitArraySlice",
                  "enterFieldAccessor",
                  "exitFieldAccessor",
                  "enterField",
                  "exitField",
                  "enterBracketField",
                  "exitBracketField",
                  "enterArrayIndex",
                  "exitArrayIndex",
                  "enterWildcard",
                  "exitWildcard",
                  "enterBracketWildcard",
                  "exitBracketWildcard"
                ],
                "classes": [
                  "JSONPathListener"
                ],
                "imports": [
                  "antlr4",
                  "JSONPathParser",
                  "JSONPathParser"
                ],
                "size_lines": 148,
                "has_main": false,
                "docstring": null
              }
            }
          }
        },
        "view": {
          "view_frame.py": {
            "functions": [
              "__init__",
              "notify",
              "register",
              "size",
              "set_data",
              "focus_on_view",
              "focus_on_query",
              "_change_widget",
              "_change_focus",
              "create_pop_up",
              "get_pop_up_parameters"
            ],
            "classes": [
              "ViewFrame",
              "FocusArea"
            ],
            "imports": [
              "collections",
              "enum",
              "urwid",
              "loguru",
              "overrides",
              "common",
              "components"
            ],
            "size_lines": 121,
            "has_main": false,
            "docstring": null
          },
          "__init__.py": {
            "functions": [],
            "classes": [],
            "imports": [
              "view_manager",
              "view_config"
            ],
            "size_lines": 9,
            "has_main": false,
            "docstring": "`Pyfx` TUI rendering related module.\n\nIt contains a homemade JSON widgets Library and collection of UI components to\ninteract with :class:`~pyfx.app.PyfxApp`."
          },
          "view_config.py": {
            "functions": [],
            "classes": [
              "ViewConfiguration"
            ],
            "imports": [
              "dataclasses",
              "rp.libs.pyfx.view.keymapper.keymapper_config",
              "rp.libs.pyfx.view.theme.theme_config"
            ],
            "size_lines": 11,
            "has_main": false,
            "docstring": null
          },
          "view_manager.py": {
            "functions": [
              "__init__",
              "run",
              "process_input",
              "size",
              "exit",
              "unhandled_input"
            ],
            "classes": [
              "View"
            ],
            "imports": [
              "urwid",
              "loguru",
              "view_frame"
            ],
            "size_lines": 98,
            "has_main": false,
            "docstring": null
          },
          "json_lib": {
            "json_listbox.py": {
              "functions": [
                "__init__",
                "keypress",
                "expand_all",
                "collapse_all",
                "toggle_collapse_on_focused_parent",
                "move_focus_from_end_node_to_start_node",
                "move_focus_to_prev_line",
                "move_focus_to_next_line"
              ],
              "classes": [
                "JSONListBox"
              ],
              "imports": [
                "urwid",
                "loguru",
                "overrides"
              ],
              "size_lines": 225,
              "has_main": false,
              "docstring": null
            },
            "json_composite_end_node.py": {
              "functions": [
                "__init__",
                "is_end_node",
                "is_expanded",
                "collapse_all",
                "toggle_expanded",
                "get_start_node",
                "get_depth",
                "get_parent",
                "get_last_child",
                "get_widget",
                "load_widget",
                "next_sibling",
                "prev_sibling"
              ],
              "classes": [
                "JSONCompositeEndNode"
              ],
              "imports": [
                "abc",
                "abc"
              ],
              "size_lines": 69,
              "has_main": false,
              "docstring": null
            },
            "json_simple_node.py": {
              "functions": [
                "__init__",
                "is_end_node",
                "get_key",
                "get_value",
                "get_parent",
                "get_depth",
                "__calculate_depth",
                "get_root",
                "__load_root",
                "is_root",
                "is_display_key",
                "is_expanded",
                "get_widget",
                "load_widget",
                "next_sibling",
                "prev_sibling"
              ],
              "classes": [
                "JSONSimpleNode"
              ],
              "imports": [
                "abc",
                "abc",
                "urwid"
              ],
              "size_lines": 122,
              "has_main": false,
              "docstring": null
            },
            "node_factory.py": {
              "functions": [
                "__init__",
                "register",
                "create_root_node",
                "create_node"
              ],
              "classes": [
                "NodeFactory"
              ],
              "imports": [
                "loguru",
                "rp.libs.pyfx.view.json_lib.json_composite_node",
                "rp.libs.pyfx.view.json_lib.primitive.generic"
              ],
              "size_lines": 58,
              "has_main": false,
              "docstring": null
            },
            "json_composite_node.py": {
              "functions": [
                "__init__",
                "is_expanded",
                "toggle_expanded",
                "collapse_all",
                "has_children",
                "get_first_child",
                "get_last_child",
                "prev_child",
                "next_child",
                "get_end_node",
                "load_end_node",
                "get_widget",
                "load_widget",
                "get_start_widget",
                "load_start_widget",
                "get_unexpanded_widget",
                "load_unexpanded_widget"
              ],
              "classes": [
                "JSONCompositeNode"
              ],
              "imports": [
                "abc",
                "abc",
                "overrides",
                "overrides",
                "json_simple_node"
              ],
              "size_lines": 111,
              "has_main": false,
              "docstring": null
            },
            "json_widget.py": {
              "functions": [
                "__init__",
                "get_node",
                "get_inner_widget",
                "load_inner_widget",
                "load_value_markup",
                "is_expandable",
                "is_display_key",
                "get_indented_widget",
                "get_indent_cols",
                "next_inorder",
                "prev_inorder",
                "selectable",
                "keypress"
              ],
              "classes": [
                "JSONWidget"
              ],
              "imports": [
                "urwid",
                "overrides",
                "common"
              ],
              "size_lines": 209,
              "has_main": false,
              "docstring": null
            },
            "__init__.py": {
              "functions": [],
              "classes": [],
              "imports": [
                "json_listbox",
                "json_listwalker",
                "node_factory",
                "object",
                "array",
                "primitive",
                "selector"
              ],
              "size_lines": 70,
              "has_main": false,
              "docstring": "A collection of JSON rendering related data models and widgets.\n\nExample\n=======\n.. code-block:: python\n   :linenos:\n\n    from rp.libs.pyfx.view.json_lib import JSONListBox, JSONListWalker, NodeFactory, DEFAULT_NODE_IMPLS\n\n    # 1. create NodeFactory\n    node_factory = NodeFactory(DEFAULT_NODE_IMPLS)\n\n    # 2. add any custom display implementation\n    node_factory.register({\n        clazz: json_node_impl\n    })\n\n    # 3. create top node from the data (only supports dict, list and primitive variable)\n    top_node = node_factory.create_root_node(data)\n\n    # 4. create JSONListBox from top node\n    listbox = JSONListBox(JSONListWalker(top_node))\n\n    # 5. use listbox in your own TUI\n\nImplementation Details\n======================\n\nExposed Class\n-------------\n\nFor integrated this class into your own TUI, three classes is the most and the only entry point.\n\n* :class:`.JSONListBox`\n    A :class:`urwid.ListBox` compatible class to manage the visible portion and rendering of the\n    JSON tree.\n* :class:`.JSONListWalker`\n    A :class:`urwid.ListWalker` compatible class to manage the traverse of the whole tree and\n    store the current focus node.\n* :class:`.NodeFactory`\n    A factory to create node based on its value type.\n\nData Modeling\n-------------\n\nThe JSON data is loaded into memory as a tree and based on the data type it creates\n\n- Non-leaf Nodes (`array`, `object`)\n\n  Each non-leaf node, two types of nodes are implemented to ease navigation and rendering:\n\n  - Start node / Unexpanded node to represent start / unexpanded line\n  - End node to represent end line.\n\n- Leaf Nodes (`string`, `integer`, `numeric`, `boolean`, `null`)\n\n  Each leaf node, single node is enough for navigation."
            },
            "json_listwalker.py": {
              "functions": [
                "__init__",
                "get_focus",
                "set_focus",
                "get_next",
                "get_prev"
              ],
              "classes": [
                "JSONListWalker"
              ],
              "imports": [
                "urwid",
                "overrides"
              ],
              "size_lines": 55,
              "has_main": false,
              "docstring": null
            },
            "selector": {
              "__init__.py": {
                "functions": [
                  "hasattrs",
                  "is_numeric",
                  "is_dictlike",
                  "is_arraylike",
                  "__getitem__"
                ],
                "classes": [
                  "DefaultImplementationSelector"
                ],
                "imports": [
                  "numbers",
                  "object",
                  "array",
                  "primitive"
                ],
                "size_lines": 42,
                "has_main": false,
                "docstring": null
              }
            },
            "array": {
              "array_start_widget.py": {
                "functions": [
                  "__init__",
                  "load_value_markup"
                ],
                "classes": [
                  "ArrayStartWidget"
                ],
                "imports": [
                  "overrides",
                  "json_widget"
                ],
                "size_lines": 17,
                "has_main": false,
                "docstring": null
              },
              "__init__.py": {
                "functions": [],
                "classes": [],
                "imports": [
                  "array_node"
                ],
                "size_lines": 3,
                "has_main": false,
                "docstring": "Node implementation for JSON `array` type."
              },
              "array_node.py": {
                "functions": [
                  "__init__",
                  "collapse_all",
                  "has_children",
                  "get_first_child",
                  "get_last_child",
                  "prev_child",
                  "next_child",
                  "_get_child_node",
                  "_load_child_node",
                  "load_start_widget",
                  "load_unexpanded_widget",
                  "load_end_node"
                ],
                "classes": [
                  "ArrayNode"
                ],
                "imports": [
                  "overrides",
                  "array_end_node",
                  "array_start_widget",
                  "array_unexpanded_widget",
                  "json_composite_end_node",
                  "json_composite_node"
                ],
                "size_lines": 94,
                "has_main": false,
                "docstring": null
              },
              "array_end_node.py": {
                "functions": [
                  "__init__",
                  "load_widget"
                ],
                "classes": [
                  "ArrayEndNode"
                ],
                "imports": [
                  "overrides",
                  "array_end_widget",
                  "json_composite_end_node"
                ],
                "size_lines": 18,
                "has_main": false,
                "docstring": null
              },
              "array_unexpanded_widget.py": {
                "functions": [
                  "__init__",
                  "load_value_markup"
                ],
                "classes": [
                  "ArrayUnexpandedWidget"
                ],
                "imports": [
                  "overrides",
                  "json_widget"
                ],
                "size_lines": 20,
                "has_main": false,
                "docstring": null
              },
              "array_end_widget.py": {
                "functions": [
                  "__init__",
                  "load_value_markup"
                ],
                "classes": [
                  "ArrayEndWidget"
                ],
                "imports": [
                  "overrides",
                  "json_widget"
                ],
                "size_lines": 18,
                "has_main": false,
                "docstring": null
              }
            },
            "primitive": {
              "null.py": {
                "functions": [
                  "load_widget",
                  "load_value_markup"
                ],
                "classes": [
                  "NullNode",
                  "NullWidget"
                ],
                "imports": [
                  "overrides",
                  "base",
                  "json_simple_node"
                ],
                "size_lines": 24,
                "has_main": false,
                "docstring": null
              },
              "generic.py": {
                "functions": [
                  "load_widget",
                  "load_value_markup"
                ],
                "classes": [
                  "GenericNode",
                  "GenericWidget"
                ],
                "imports": [
                  "overrides",
                  "base",
                  "json_simple_node"
                ],
                "size_lines": 24,
                "has_main": false,
                "docstring": null
              },
              "__init__.py": {
                "functions": [],
                "classes": [],
                "imports": [
                  "boolean",
                  "integer",
                  "null",
                  "numeric",
                  "string",
                  "generic"
                ],
                "size_lines": 11,
                "has_main": false,
                "docstring": "Node implementation of primitive JSON type which represents `string`,\n`integer`, `numeric`, `boolean` and `null`"
              },
              "boolean.py": {
                "functions": [
                  "load_widget",
                  "load_value_markup"
                ],
                "classes": [
                  "BooleanNode",
                  "BooleanWidget"
                ],
                "imports": [
                  "overrides",
                  "base",
                  "json_simple_node"
                ],
                "size_lines": 24,
                "has_main": false,
                "docstring": null
              },
              "integer.py": {
                "functions": [
                  "load_widget",
                  "load_value_markup"
                ],
                "classes": [
                  "IntegerNode",
                  "IntegerWidget"
                ],
                "imports": [
                  "overrides",
                  "base",
                  "json_simple_node"
                ],
                "size_lines": 24,
                "has_main": false,
                "docstring": null
              },
              "numeric.py": {
                "functions": [
                  "load_widget",
                  "load_value_markup"
                ],
                "classes": [
                  "NumericNode",
                  "NumericWidget"
                ],
                "imports": [
                  "overrides",
                  "base",
                  "json_simple_node"
                ],
                "size_lines": 24,
                "has_main": false,
                "docstring": null
              },
              "string.py": {
                "functions": [
                  "load_widget",
                  "load_value_markup"
                ],
                "classes": [
                  "StringNode",
                  "StringWidget"
                ],
                "imports": [
                  "overrides",
                  "base",
                  "json_simple_node"
                ],
                "size_lines": 24,
                "has_main": false,
                "docstring": null
              },
              "base.py": {
                "functions": [
                  "__init__",
                  "load_value_markup"
                ],
                "classes": [
                  "PrimitiveWidget"
                ],
                "imports": [
                  "overrides",
                  "json_widget"
                ],
                "size_lines": 17,
                "has_main": false,
                "docstring": null
              }
            },
            "object": {
              "object_end_node.py": {
                "functions": [
                  "__init__",
                  "load_widget"
                ],
                "classes": [
                  "ObjectEndNode"
                ],
                "imports": [
                  "overrides",
                  "object_end_widget",
                  "json_composite_end_node"
                ],
                "size_lines": 20,
                "has_main": false,
                "docstring": null
              },
              "object_start_widget.py": {
                "functions": [
                  "__init__",
                  "load_value_markup"
                ],
                "classes": [
                  "ObjectStartWidget"
                ],
                "imports": [
                  "overrides",
                  "json_widget"
                ],
                "size_lines": 17,
                "has_main": false,
                "docstring": null
              },
              "__init__.py": {
                "functions": [],
                "classes": [],
                "imports": [
                  "object_node"
                ],
                "size_lines": 3,
                "has_main": false,
                "docstring": "Node implementation for JSON `object` type."
              },
              "object_node.py": {
                "functions": [
                  "__init__",
                  "collapse_all",
                  "has_children",
                  "get_first_child",
                  "get_last_child",
                  "prev_child",
                  "next_child",
                  "_get_child_node",
                  "_load_child_node",
                  "load_unexpanded_widget",
                  "load_start_widget",
                  "load_end_node"
                ],
                "classes": [
                  "ObjectNode"
                ],
                "imports": [
                  "overrides",
                  "object_end_node",
                  "object_start_widget",
                  "object_unexpanded_widget",
                  "json_composite_end_node",
                  "json_composite_node"
                ],
                "size_lines": 101,
                "has_main": false,
                "docstring": null
              },
              "object_unexpanded_widget.py": {
                "functions": [
                  "__init__",
                  "load_value_markup"
                ],
                "classes": [
                  "ObjectUnexpandedWidget"
                ],
                "imports": [
                  "overrides",
                  "json_widget"
                ],
                "size_lines": 20,
                "has_main": false,
                "docstring": null
              },
              "object_end_widget.py": {
                "functions": [
                  "__init__",
                  "load_value_markup"
                ],
                "classes": [
                  "ObjectEndWidget"
                ],
                "imports": [
                  "overrides",
                  "json_widget"
                ],
                "size_lines": 17,
                "has_main": false,
                "docstring": null
              }
            }
          },
          "components": {
            "__init__.py": {
              "functions": [],
              "classes": [],
              "imports": [
                "autocomplete_popup",
                "help_bar",
                "query_bar",
                "json_browser"
              ],
              "size_lines": 10,
              "has_main": false,
              "docstring": "Different components(or urwid widgets wrapper) will be used in *Pyfx*'s TUI.\n\nEach component is a single unit rendered in *Pyfx*."
            },
            "help_page": {
              "detailed_help_page.py": {
                "functions": [
                  "__init__"
                ],
                "classes": [
                  "DetailedHelpPage"
                ],
                "imports": [
                  "urwid"
                ],
                "size_lines": 17,
                "has_main": false,
                "docstring": null
              },
              "__init__.py": {
                "functions": [],
                "classes": [],
                "imports": [
                  "detailed_help_page"
                ],
                "size_lines": 2,
                "has_main": false,
                "docstring": null
              }
            },
            "autocomplete_popup": {
              "autocomplete_popup_keymapper.py": {
                "functions": [
                  "mapped_key"
                ],
                "classes": [
                  "AutoCompletePopUpKeyMapper"
                ],
                "imports": [
                  "dataclasses",
                  "overrides",
                  "autocomplete_popup",
                  "keymapper"
                ],
                "size_lines": 26,
                "has_main": false,
                "docstring": null
              },
              "__init__.py": {
                "functions": [],
                "classes": [],
                "imports": [
                  "autocomplete_popup"
                ],
                "size_lines": 2,
                "has_main": false,
                "docstring": null
              },
              "autocomplete_popup.py": {
                "functions": [
                  "list",
                  "__init__",
                  "pack",
                  "_load_widget",
                  "_get_focus_text",
                  "keypress"
                ],
                "classes": [
                  "AutoCompletePopUpKeys",
                  "AutoCompletePopUp"
                ],
                "imports": [
                  "enum",
                  "urwid",
                  "overrides",
                  "common"
                ],
                "size_lines": 100,
                "has_main": false,
                "docstring": null
              }
            },
            "json_browser": {
              "json_browser_keymapper.py": {
                "functions": [
                  "mapped_key"
                ],
                "classes": [
                  "JSONBrowserKeyMapper"
                ],
                "imports": [
                  "dataclasses",
                  "overrides",
                  "json_browser",
                  "keymapper"
                ],
                "size_lines": 29,
                "has_main": false,
                "docstring": null
              },
              "json_browser.py": {
                "functions": [
                  "__init__",
                  "set_top_node",
                  "_load_widget",
                  "_refresh",
                  "keypress"
                ],
                "classes": [
                  "JSONBrowserKeys",
                  "JSONBrowser"
                ],
                "imports": [
                  "enum",
                  "urwid",
                  "overrides",
                  "json_lib",
                  "json_lib",
                  "json_lib",
                  "json_lib"
                ],
                "size_lines": 61,
                "has_main": false,
                "docstring": null
              },
              "__init__.py": {
                "functions": [],
                "classes": [],
                "imports": [
                  "json_browser"
                ],
                "size_lines": 2,
                "has_main": false,
                "docstring": null
              }
            },
            "query_bar": {
              "__init__.py": {
                "functions": [],
                "classes": [],
                "imports": [
                  "query_bar"
                ],
                "size_lines": 2,
                "has_main": false,
                "docstring": null
              },
              "query_bar.py": {
                "functions": [
                  "__init__",
                  "setup",
                  "reset",
                  "complete",
                  "get_text",
                  "insert_text",
                  "pass_keypress",
                  "keypress"
                ],
                "classes": [
                  "QueryBarKeys",
                  "QueryBar"
                ],
                "imports": [
                  "asyncio",
                  "enum",
                  "urwid",
                  "overrides"
                ],
                "size_lines": 99,
                "has_main": false,
                "docstring": null
              },
              "query_bar_keymapper.py": {
                "functions": [
                  "mapped_key"
                ],
                "classes": [
                  "QueryBarKeyMapper"
                ],
                "imports": [
                  "dataclasses",
                  "overrides",
                  "query_bar",
                  "keymapper"
                ],
                "size_lines": 22,
                "has_main": false,
                "docstring": null
              }
            },
            "help_bar": {
              "help_bar.py": {
                "functions": [
                  "__init__"
                ],
                "classes": [
                  "HelpBar"
                ],
                "imports": [
                  "urwid"
                ],
                "size_lines": 13,
                "has_main": false,
                "docstring": null
              },
              "__init__.py": {
                "functions": [],
                "classes": [],
                "imports": [
                  "help_bar"
                ],
                "size_lines": 2,
                "has_main": false,
                "docstring": null
              }
            }
          },
          "common": {
            "selectable_text.py": {
              "functions": [
                "selectable",
                "keypress"
              ],
              "classes": [
                "SelectableText"
              ],
              "imports": [
                "urwid",
                "overrides"
              ],
              "size_lines": 21,
              "has_main": false,
              "docstring": null
            },
            "__init__.py": {
              "functions": [],
              "classes": [],
              "imports": [
                "selectable_text",
                "popup"
              ],
              "size_lines": 4,
              "has_main": false,
              "docstring": "A collection of common widgets will be used in `pyfx`."
            },
            "popup.py": {
              "functions": [
                "__init__",
                "pop_up_widget",
                "create_pop_up",
                "get_pop_up_parameters",
                "open_pop_up",
                "close_pop_up",
                "render"
              ],
              "classes": [
                "PopUpLauncher"
              ],
              "imports": [
                "urwid",
                "urwid",
                "urwid"
              ],
              "size_lines": 60,
              "has_main": false,
              "docstring": null
            }
          },
          "keymapper": {
            "keymapper_config_parser.py": {
              "functions": [
                "create_keymapper",
                "transform"
              ],
              "classes": [
                "KeyMapperConfigurationParser"
              ],
              "imports": [
                "pathlib",
                "dacite",
                "loguru",
                "overrides",
                "config.config_transformer",
                "config.config_error",
                "keymapper"
              ],
              "size_lines": 45,
              "has_main": false,
              "docstring": null
            },
            "abstract_component_keymapper.py": {
              "functions": [
                "mapped_key",
                "key"
              ],
              "classes": [
                "AbstractComponentKeyMapper"
              ],
              "imports": [
                "abc",
                "dataclasses"
              ],
              "size_lines": 22,
              "has_main": false,
              "docstring": null
            },
            "__init__.py": {
              "functions": [],
              "classes": [],
              "imports": [
                "abstract_component_keymapper",
                "keymapper_config"
              ],
              "size_lines": 3,
              "has_main": false,
              "docstring": null
            },
            "keymapper_config.py": {
              "functions": [
                "__post_init__"
              ],
              "classes": [
                "KeyMapperConfiguration"
              ],
              "imports": [
                "dataclasses",
                "keymapper_config_parser",
                "keymapper"
              ],
              "size_lines": 16,
              "has_main": false,
              "docstring": null
            },
            "keymapper.py": {
              "functions": [
                "__init__",
                "filter",
                "combine",
                "__post_init__"
              ],
              "classes": [
                "InputFilter",
                "KeyMapper"
              ],
              "imports": [
                "dataclasses",
                "components.autocomplete_popup.autocomplete_popup_keymapper",
                "components.json_browser.json_browser_keymapper",
                "components.query_bar.query_bar_keymapper"
              ],
              "size_lines": 71,
              "has_main": false,
              "docstring": null
            }
          },
          "theme": {
            "theme.py": {
              "functions": [
                "palette"
              ],
              "classes": [
                "ComponentTheme",
                "Theme"
              ],
              "imports": [
                "dataclasses",
                "urwid"
              ],
              "size_lines": 45,
              "has_main": false,
              "docstring": null
            },
            "theme_config_parser.py": {
              "functions": [
                "create_palette",
                "transform"
              ],
              "classes": [
                "ThemeConfigurationTransformer"
              ],
              "imports": [
                "pathlib",
                "dacite",
                "overrides",
                "config.config_error",
                "config.config_transformer",
                "theme"
              ],
              "size_lines": 40,
              "has_main": false,
              "docstring": null
            },
            "__init__.py": {
              "functions": [],
              "classes": [],
              "imports": [
                "theme_config"
              ],
              "size_lines": 2,
              "has_main": false,
              "docstring": null
            },
            "theme_config.py": {
              "functions": [
                "__post_init__"
              ],
              "classes": [
                "ThemeConfiguration"
              ],
              "imports": [
                "dataclasses",
                "theme_config_parser",
                "theme"
              ],
              "size_lines": 16,
              "has_main": false,
              "docstring": null
            }
          }
        },
        "service": {
          "dispatcher.py": {
            "functions": [
              "__init__",
              "register",
              "invoke"
            ],
            "classes": [
              "DispatcherError",
              "Dispatcher"
            ],
            "imports": [],
            "size_lines": 22,
            "has_main": false,
            "docstring": null
          },
          "client.py": {
            "functions": [
              "__init__",
              "shutdown"
            ],
            "classes": [
              "Client"
            ],
            "imports": [
              "asyncio",
              "concurrent.futures"
            ],
            "size_lines": 21,
            "has_main": false,
            "docstring": null
          },
          "__init__.py": {
            "functions": [],
            "classes": [],
            "imports": [],
            "size_lines": 4,
            "has_main": false,
            "docstring": "This is the service framework"
          }
        }
      },
      "parso": {
        "tree.py": {
          "functions": [
            "search_ancestor",
            "get_root_node",
            "get_next_sibling",
            "get_previous_sibling",
            "get_previous_leaf",
            "get_next_leaf",
            "start_pos",
            "end_pos",
            "get_start_pos_of_prefix",
            "get_first_leaf",
            "get_last_leaf",
            "get_code",
            "__init__",
            "start_pos",
            "start_pos",
            "get_start_pos_of_prefix",
            "get_first_leaf",
            "get_last_leaf",
            "get_code",
            "end_pos",
            "__repr__",
            "__init__",
            "__init__",
            "start_pos",
            "get_start_pos_of_prefix",
            "end_pos",
            "_get_code_for_children",
            "get_code",
            "get_leaf_for_position",
            "get_first_leaf",
            "get_last_leaf",
            "__repr__",
            "__init__",
            "__repr__",
            "__init__",
            "__repr__",
            "binary_search"
          ],
          "classes": [
            "NodeOrLeaf",
            "Leaf",
            "TypedLeaf",
            "BaseNode",
            "Node",
            "ErrorNode",
            "ErrorLeaf"
          ],
          "imports": [
            "abc",
            "rp.libs.parso._compatibility",
            "rp.libs.parso.utils"
          ],
          "size_lines": 367,
          "has_main": false,
          "docstring": null
        },
        "cache.py": {
          "functions": [
            "_get_default_cache_path",
            "load_module",
            "_load_from_file_system",
            "save_module",
            "_save_to_file_system",
            "clear_cache",
            "_get_hashed_path",
            "_get_cache_directory_path",
            "__init__"
          ],
          "classes": [
            "_NodeCacheItem"
          ],
          "imports": [
            "time",
            "os",
            "sys",
            "hashlib",
            "gc",
            "shutil",
            "platform",
            "errno",
            "logging",
            "rp.libs.parso._compatibility",
            "cPickle",
            "pickle"
          ],
          "size_lines": 170,
          "has_main": false,
          "docstring": null
        },
        "__init__.py": {
          "functions": [
            "parse"
          ],
          "classes": [],
          "imports": [
            "rp.libs.parso.parser",
            "rp.libs.parso.grammar",
            "rp.libs.parso.utils"
          ],
          "size_lines": 59,
          "has_main": false,
          "docstring": "Parso is a Python parser that supports error recovery and round-trip parsing\nfor different Python versions (in multiple Python versions). Parso is also able\nto list multiple syntax errors in your python file.\n\nParso has been battle-tested by jedi_. It was pulled out of jedi to be useful\nfor other projects as well.\n\nParso consists of a small API to parse Python and analyse the syntax tree.\n\n.. _jedi: https://github.com/davidhalter/jedi\n\nA simple example:\n\n>>> import rp.libs.parso\n>>> module = parso.parse('hello + 1', version=\"3.6\")\n>>> expr = module.children[0]\n>>> expr\nPythonNode(arith_expr, [<Name: hello@1,0>, <Operator: +>, <Number: 1>])\n>>> print(expr.get_code())\nhello + 1\n>>> name = expr.children[0]\n>>> name\n<Name: hello@1,0>\n>>> name.end_pos\n(1, 5)\n>>> expr.end_pos\n(1, 9)\n\nTo list multiple issues:\n\n>>> grammar = parso.load_grammar()\n>>> module = grammar.parse('foo +\\nbar\\ncontinue')\n>>> error1, error2 = grammar.iter_errors(module)\n>>> error1.message\n'SyntaxError: invalid syntax'\n>>> error2.message\n\"SyntaxError: 'continue' not properly in loop\""
        },
        "grammar.py": {
          "functions": [
            "load_grammar",
            "__init__",
            "parse",
            "_parse",
            "_get_token_namespace",
            "iter_errors",
            "_get_normalizer",
            "_normalize",
            "_get_normalizer_issues",
            "__repr__",
            "__init__",
            "_tokenize_lines",
            "_tokenize",
            "load_grammar"
          ],
          "classes": [
            "Grammar",
            "PythonGrammar"
          ],
          "imports": [
            "hashlib",
            "os",
            "rp.libs.parso._compatibility",
            "rp.libs.parso.pgen2",
            "rp.libs.parso.utils",
            "rp.libs.parso.python.diff",
            "rp.libs.parso.python.tokenize",
            "rp.libs.parso.python.token",
            "rp.libs.parso.cache",
            "rp.libs.parso.parser",
            "rp.libs.parso.python.parser",
            "rp.libs.parso.python.errors",
            "rp.libs.parso.python",
            "rp.libs.parso.file_io"
          ],
          "size_lines": 257,
          "has_main": false,
          "docstring": null
        },
        "parser.py": {
          "functions": [
            "_token_to_transition",
            "__init__",
            "__init__",
            "_allowed_transition_names_and_token_types",
            "__init__",
            "nonterminal",
            "__repr__",
            "__init__",
            "parse",
            "error_recovery",
            "convert_node",
            "convert_leaf",
            "_add_token",
            "_pop",
            "iterate"
          ],
          "classes": [
            "ParserSyntaxError",
            "InternalParseError",
            "Stack",
            "StackNode",
            "BaseParser"
          ],
          "imports": [
            "rp.libs.parso",
            "rp.libs.parso.pgen2.generator"
          ],
          "size_lines": 212,
          "has_main": false,
          "docstring": "The ``Parser`` tries to convert the available Python code in an easy to read\nformat, something like an abstract syntax tree. The classes who represent this\ntree, are sitting in the :mod:`parso.tree` module.\n\nThe Python module ``tokenize`` is a very important part in the ``Parser``,\nbecause it splits the code into different words (tokens).  Sometimes it looks a\nbit messy. Sorry for that! You might ask now: \"Why didn't you use the ``ast``\nmodule for this? Well, ``ast`` does a very good job understanding proper Python\ncode, but fails to work as soon as there's a single line of broken code.\n\nThere's one important optimization that needs to be known: Statements are not\nbeing parsed completely. ``Statement`` is just a representation of the tokens\nwithin the statement. This lowers memory usage and cpu time and reduces the\ncomplexity of the ``Parser`` (there's another parser sitting inside\n``Statement``, which produces ``Array`` and ``Call``)."
        },
        "utils.py": {
          "functions": [
            "split_lines",
            "python_bytes_to_unicode",
            "version_info",
            "_parse_version",
            "parse_version_string",
            "detect_encoding",
            "__gt__",
            "__eq__",
            "__ne__"
          ],
          "classes": [
            "PythonVersionInfo"
          ],
          "imports": [
            "collections",
            "re",
            "sys",
            "ast",
            "rp.libs.parso._compatibility",
            "rp.libs.parso"
          ],
          "size_lines": 176,
          "has_main": false,
          "docstring": null
        },
        "file_io.py": {
          "functions": [
            "__init__",
            "read",
            "get_last_modified",
            "__repr__",
            "__init__",
            "read"
          ],
          "classes": [
            "FileIO",
            "KnownContentFileIO"
          ],
          "imports": [
            "os"
          ],
          "size_lines": 36,
          "has_main": false,
          "docstring": null
        },
        "normalizer.py": {
          "functions": [
            "__new__",
            "__init__",
            "_instantiate_rules",
            "walk",
            "visit",
            "visit_node",
            "_check_type_rules",
            "visit_leaf",
            "initialize",
            "finalize",
            "add_issue",
            "register_rule",
            "_register_rule",
            "create_normalizer",
            "__init__",
            "__eq__",
            "__ne__",
            "__hash__",
            "__repr__",
            "__init__",
            "is_issue",
            "get_node",
            "_get_message",
            "add_issue",
            "feed_node",
            "decorator"
          ],
          "classes": [
            "_NormalizerMeta",
            "Normalizer",
            "NormalizerConfig",
            "Issue",
            "Rule"
          ],
          "imports": [
            "contextlib",
            "rp.libs.parso._compatibility"
          ],
          "size_lines": 184,
          "has_main": false,
          "docstring": null
        },
        "_compatibility.py": {
          "functions": [
            "use_metaclass",
            "u",
            "utf8_repr",
            "wrapper",
            "total_ordering"
          ],
          "classes": [],
          "imports": [
            "sys",
            "platform",
            "functools"
          ],
          "size_lines": 104,
          "has_main": false,
          "docstring": "To ensure compatibility from Python ``2.6`` - ``3.3``, a module has been\ncreated. Clearly there is huge need to use conforming syntax."
        },
        "python": {
          "prefix.py": {
            "functions": [
              "split_prefix",
              "__init__",
              "end_pos",
              "create_spacing_part",
              "__repr__"
            ],
            "classes": [
              "PrefixPart"
            ],
            "imports": [
              "re",
              "codecs",
              "rp.libs.parso.python.tokenize"
            ],
            "size_lines": 98,
            "has_main": false,
            "docstring": null
          },
          "tree.py": {
            "functions": [
              "_create_params",
              "_defined_names",
              "get_doc_node",
              "get_name_of_position",
              "_split_prefix",
              "get_start_pos_of_prefix",
              "end_pos",
              "__repr__",
              "__repr__",
              "__repr__",
              "is_definition",
              "get_definition",
              "string_prefix",
              "_get_payload",
              "__eq__",
              "__ne__",
              "__hash__",
              "__init__",
              "iter_funcdefs",
              "iter_classdefs",
              "iter_imports",
              "_search_in_scope",
              "get_suite",
              "__repr__",
              "__init__",
              "_iter_future_import_names",
              "_has_explicit_absolute_import",
              "get_used_names",
              "name",
              "get_decorators",
              "__init__",
              "get_super_arglist",
              "check_python2_nested_param",
              "__init__",
              "_get_param_nodes",
              "get_params",
              "name",
              "iter_yield_exprs",
              "iter_return_stmts",
              "iter_raise_stmts",
              "is_generator",
              "annotation",
              "__init__",
              "name",
              "_get_param_nodes",
              "annotation",
              "__repr__",
              "get_test_nodes",
              "get_corresponding_test_node",
              "is_node_after_else",
              "get_testlist",
              "get_defined_names",
              "get_except_clause_tests",
              "get_defined_names",
              "get_test_node_from_name",
              "get_path_for_name",
              "is_nested",
              "is_star_import",
              "get_defined_names",
              "_aliases",
              "get_from_names",
              "level",
              "_as_name_tuples",
              "get_paths",
              "get_defined_names",
              "level",
              "get_paths",
              "_dotted_as_names",
              "is_nested",
              "_aliases",
              "type",
              "keyword",
              "assertion",
              "get_global_names",
              "get_defined_names",
              "get_rhs",
              "yield_operators",
              "__init__",
              "star_count",
              "default",
              "annotation",
              "_tfpdef",
              "name",
              "get_defined_names",
              "position_index",
              "get_parent_function",
              "get_code",
              "__repr__",
              "get_defined_names",
              "__init__",
              "__getitem__",
              "__len__",
              "__iter__",
              "__hash__",
              "__eq__",
              "scan",
              "scan",
              "scan",
              "scan",
              "recurse"
            ],
            "classes": [
              "DocstringMixin",
              "PythonMixin",
              "PythonLeaf",
              "_LeafWithoutNewlines",
              "PythonBaseNode",
              "PythonNode",
              "PythonErrorNode",
              "PythonErrorLeaf",
              "EndMarker",
              "Newline",
              "Name",
              "Literal",
              "Number",
              "String",
              "FStringString",
              "FStringStart",
              "FStringEnd",
              "_StringComparisonMixin",
              "Operator",
              "Keyword",
              "Scope",
              "Module",
              "Decorator",
              "ClassOrFunc",
              "Class",
              "Function",
              "Lambda",
              "Flow",
              "IfStmt",
              "WhileStmt",
              "ForStmt",
              "TryStmt",
              "WithStmt",
              "Import",
              "ImportFrom",
              "ImportName",
              "KeywordStatement",
              "AssertStmt",
              "GlobalStmt",
              "ReturnStmt",
              "YieldExpr",
              "ExprStmt",
              "Param",
              "SyncCompFor",
              "UsedNamesMapping"
            ],
            "imports": [
              "re",
              "rp.libs.parso._compatibility",
              "rp.libs.parso.tree",
              "rp.libs.parso.python.prefix",
              "rp.libs.parso.utils",
              "collections.abc",
              "collections"
            ],
            "size_lines": 1246,
            "has_main": false,
            "docstring": "This is the syntax tree for Python syntaxes (2 & 3).  The classes represent\nsyntax elements like functions and imports.\n\nAll of the nodes can be traced back to the `Python grammar file\n<https://docs.python.org/3/reference/grammar.html>`_. If you want to know how\na tree is structured, just analyse that file (for each Python version it's a\nbit different).\n\nThere's a lot of logic here that makes it easier for Jedi (and other libraries)\nto deal with a Python syntax tree.\n\nBy using :py:meth:`parso.tree.NodeOrLeaf.get_code` on a module, you can get\nback the 1-to-1 representation of the input given to the parser. This is\nimportant if you want to refactor a parser tree.\n\n>>> from rp.libs.parso import parse\n>>> parser = parse('import os')\n>>> module = parser.get_root_node()\n>>> module\n<Module: @1-1>\n\nAny subclasses of :class:`Scope`, including :class:`Module` has an attribute\n:attr:`iter_imports <Scope.iter_imports>`:\n\n>>> list(module.iter_imports())\n[<ImportName: import os@1,0>]\n\nChanges to the Python Grammar\n-----------------------------\n\nA few things have changed when looking at Python grammar files:\n\n- :class:`Param` does not exist in Python grammar files. It is essentially a\n  part of a ``parameters`` node.  |parso| splits it up to make it easier to\n  analyse parameters. However this just makes it easier to deal with the syntax\n  tree, it doesn't actually change the valid syntax.\n- A few nodes like `lambdef` and `lambdef_nocond` have been merged in the\n  syntax tree to make it easier to do deal with them.\n\nParser Tree Classes\n-------------------"
          },
          "token.py": {
            "functions": [
              "__init__",
              "__repr__",
              "__init__"
            ],
            "classes": [
              "TokenType",
              "TokenTypes"
            ],
            "imports": [
              "__future__"
            ],
            "size_lines": 28,
            "has_main": false,
            "docstring": null
          },
          "__init__.py": {
            "functions": [],
            "classes": [],
            "imports": [],
            "size_lines": 1,
            "has_main": false,
            "docstring": null
          },
          "parser.py": {
            "functions": [
              "__init__",
              "parse",
              "convert_node",
              "convert_leaf",
              "error_recovery",
              "_stack_removal",
              "_recovery_tokenize",
              "current_suite"
            ],
            "classes": [
              "Parser"
            ],
            "imports": [
              "rp.libs.parso.python",
              "rp.libs.parso.python.token",
              "rp.libs.parso.parser"
            ],
            "size_lines": 219,
            "has_main": false,
            "docstring": null
          },
          "pep8.py": {
            "functions": [
              "_is_magic_name",
              "__init__",
              "__repr__",
              "get_latest_suite_node",
              "__init__",
              "__init__",
              "__init__",
              "__init__",
              "visit_node",
              "_visit_node",
              "_check_tabs_spaces",
              "_get_wanted_blank_lines_count",
              "_reset_newlines",
              "visit_leaf",
              "_visit_part",
              "_check_line_length",
              "_check_spacing",
              "_analyse_non_prefix",
              "add_issue",
              "__init__",
              "is_issue",
              "add_if_spaces",
              "add_not_spaces"
            ],
            "classes": [
              "IndentationTypes",
              "IndentationNode",
              "BracketNode",
              "ImplicitNode",
              "BackslashNode",
              "PEP8Normalizer",
              "PEP8NormalizerConfig",
              "BlankLineAtEnd"
            ],
            "imports": [
              "re",
              "contextlib",
              "rp.libs.parso.python.errors",
              "rp.libs.parso.normalizer",
              "rp.libs.parso.python.tree"
            ],
            "size_lines": 728,
            "has_main": false,
            "docstring": null
          },
          "diff.py": {
            "functions": [
              "_get_previous_leaf_if_indentation",
              "_get_next_leaf_if_indentation",
              "_assert_valid_graph",
              "_get_debug_error_message",
              "_get_last_line",
              "_skip_dedent_error_leaves",
              "_ends_with_newline",
              "_flows_finished",
              "_func_or_class_has_suite",
              "_suite_or_file_input_is_valid",
              "_is_flow_node",
              "_update_positions",
              "__init__",
              "_reset",
              "update",
              "_enabled_debugging",
              "_copy_from_old_parser",
              "_get_old_line_stmt",
              "_parse",
              "_try_parse_part",
              "_diff_tokenize",
              "__init__",
              "finish",
              "add_child_node",
              "add_tree_nodes",
              "get_last_line",
              "__init__",
              "parsed_until_line",
              "_get_insertion_node",
              "add_parsed_nodes",
              "_update_tos",
              "_remove_endmarker",
              "copy_nodes",
              "_copy_nodes",
              "close"
            ],
            "classes": [
              "_PositionUpdatingFinished",
              "DiffParser",
              "_NodesTreeNode",
              "_NodesTree"
            ],
            "imports": [
              "re",
              "difflib",
              "collections",
              "logging",
              "rp.libs.parso.utils",
              "rp.libs.parso.python.parser",
              "rp.libs.parso.python.tree",
              "rp.libs.parso.python.tokenize",
              "rp.libs.parso.python.token",
              "rp.libs.parso"
            ],
            "size_lines": 719,
            "has_main": false,
            "docstring": "Basically a contains parser that is faster, because it tries to parse only\nparts and if anything changes, it only reparses the changed parts.\n\nIt works with a simple diff in the beginning and will try to reuse old parser\nfragments."
          },
          "errors.py": {
            "functions": [
              "_iter_stmts",
              "_get_comprehension_type",
              "_is_future_import",
              "_remove_parens",
              "_iter_params",
              "_is_future_import_first",
              "_iter_definition_exprs_from_lists",
              "_get_expr_stmt_definition_exprs",
              "_get_for_stmt_definition_exprs",
              "__init__",
              "is_async_funcdef",
              "is_function",
              "add_name",
              "finalize",
              "_analyze_names",
              "add_block",
              "add_context",
              "close_child_context",
              "__init__",
              "initialize",
              "visit",
              "visit_node",
              "visit_leaf",
              "_add_indentation_error",
              "_add_syntax_error",
              "add_issue",
              "finalize",
              "_get_message",
              "get_node",
              "is_issue",
              "_get_message",
              "get_node",
              "is_issue",
              "is_issue",
              "get_error_node",
              "is_issue",
              "is_issue",
              "get_node",
              "is_issue",
              "is_issue",
              "is_issue",
              "is_issue",
              "is_issue",
              "get_node",
              "is_issue",
              "_is_bytes_literal",
              "is_issue",
              "is_issue",
              "is_issue",
              "is_issue",
              "is_issue",
              "is_issue",
              "get_node",
              "is_issue",
              "is_issue",
              "is_issue",
              "message",
              "is_issue",
              "is_issue",
              "is_issue",
              "_check_format_spec",
              "_check_fstring_expr",
              "is_issue",
              "_check_fstring_contents",
              "_check_assignment",
              "is_issue",
              "is_issue",
              "is_issue",
              "is_issue",
              "is_issue",
              "is_issue",
              "raise_",
              "create_context",
              "is_definition"
            ],
            "classes": [
              "_Context",
              "ErrorFinder",
              "IndentationRule",
              "_ExpectIndentedBlock",
              "ErrorFinderConfig",
              "SyntaxRule",
              "_InvalidSyntaxRule",
              "_AwaitOutsideAsync",
              "_BreakOutsideLoop",
              "_ContinueChecks",
              "_YieldFromCheck",
              "_NameChecks",
              "_StringChecks",
              "_StarCheck",
              "_StarStarCheck",
              "_ReturnAndYieldChecks",
              "_BytesAndStringMix",
              "_TrailingImportComma",
              "_ImportStarInFunction",
              "_FutureImportRule",
              "_StarExprRule",
              "_StarExprParentRule",
              "_AnnotatorRule",
              "_ArgumentRule",
              "_NonlocalModuleLevelRule",
              "_ArglistRule",
              "_ParameterRule",
              "_TryStmtRule",
              "_FStringRule",
              "_CheckAssignmentRule",
              "_CompForRule",
              "_ExprStmtRule",
              "_WithItemRule",
              "_DelStmtRule",
              "_ExprListRule",
              "_ForStmtRule"
            ],
            "imports": [
              "codecs",
              "warnings",
              "re",
              "contextlib",
              "rp.libs.parso.normalizer",
              "rp.libs.parso.python.tree"
            ],
            "size_lines": 1012,
            "has_main": false,
            "docstring": null
          },
          "tokenize.py": {
            "functions": [
              "group",
              "maybe",
              "_all_string_prefixes",
              "_compile",
              "_get_token_collection",
              "_create_token_collection",
              "_close_fstring_if_necessary",
              "_find_fstring_string",
              "tokenize",
              "_print_tokens",
              "tokenize_lines",
              "_split_illegal_unicode_name",
              "is_identifier",
              "different_case_versions",
              "end_pos",
              "__repr__",
              "__init__",
              "open_parentheses",
              "close_parentheses",
              "allow_multiline",
              "is_in_expr",
              "is_in_format_spec",
              "wrapper",
              "dedent_if_necessary",
              "create_token"
            ],
            "classes": [
              "Token",
              "PythonToken",
              "FStringNode"
            ],
            "imports": [
              "__future__",
              "sys",
              "string",
              "re",
              "collections",
              "itertools",
              "codecs",
              "rp.libs.parso.python.token",
              "rp.libs.parso._compatibility",
              "rp.libs.parso.utils",
              "rp.libs.parso.utils"
            ],
            "size_lines": 687,
            "has_main": true,
            "docstring": "This tokenizer has been copied from the ``tokenize.py`` standard library\ntokenizer. The reason was simple: The standard library tokenizer fails\nif the indentation is not right. To make it possible to do error recovery the\n    tokenizer needed to be rewritten.\n\nBasically this is a stripped down version of the standard library module, so\nyou can read the documentation there. Additionally we included some speed and\nmemory optimizations here."
          }
        },
        "pgen2": {
          "__init__.py": {
            "functions": [],
            "classes": [],
            "imports": [
              "rp.libs.parso.pgen2.generator"
            ],
            "size_lines": 11,
            "has_main": false,
            "docstring": null
          },
          "generator.py": {
            "functions": [
              "_simplify_dfas",
              "_make_dfas",
              "_dump_nfa",
              "_dump_dfas",
              "generate_grammar",
              "_make_transition",
              "_calculate_tree_traversal",
              "_calculate_first_plans",
              "__init__",
              "__init__",
              "__repr__",
              "__init__",
              "add_arc",
              "unifystate",
              "__eq__",
              "__repr__",
              "__init__",
              "__repr__",
              "addclosure"
            ],
            "classes": [
              "Grammar",
              "DFAPlan",
              "DFAState",
              "ReservedString"
            ],
            "imports": [
              "ast",
              "rp.libs.parso.pgen2.grammar_parser"
            ],
            "size_lines": 359,
            "has_main": false,
            "docstring": "This module defines the data structures used to represent a grammar.\n\nSpecifying grammars in pgen is possible with this grammar::\n\n    grammar: (NEWLINE | rule)* ENDMARKER\n    rule: NAME ':' rhs NEWLINE\n    rhs: items ('|' items)*\n    items: item+\n    item: '[' rhs ']' | atom ['+' | '*']\n    atom: '(' rhs ')' | NAME | STRING\n\nThis grammar is self-referencing.\n\nThis parser generator (pgen2) was created by Guido Rossum and used for lib2to3.\nMost of the code has been refactored to make it more Pythonic. Since this was a\n\"copy\" of the CPython Parser parser \"pgen\", there was some work needed to make\nit more readable. It should also be slightly faster than the original pgen2,\nbecause we made some optimizations."
          },
          "grammar_parser.py": {
            "functions": [
              "__init__",
              "parse",
              "_parse_rhs",
              "_parse_items",
              "_parse_item",
              "_parse_atom",
              "_expect",
              "_gettoken",
              "_raise_error",
              "__init__",
              "__init__",
              "add_arc",
              "__repr__"
            ],
            "classes": [
              "GrammarParser",
              "NFAArc",
              "NFAState"
            ],
            "imports": [
              "rp.libs.parso.python.tokenize",
              "rp.libs.parso.utils",
              "rp.libs.parso.python.token"
            ],
            "size_lines": 157,
            "has_main": false,
            "docstring": null
          }
        }
      },
      "refactor": {
        "string_format": {
          "fstring_converter.py": {
            "functions": [
              "direct_fstring_conversion",
              "convert_string",
              "convert_file",
              "__init__",
              "leave_FormattedString",
              "visit_FormattedStringExpression",
              "preprocess_escaped_braces",
              "fix_mixed_braces",
              "replace_escaped_only",
              "replace_fstring"
            ],
            "classes": [
              "FStringToFormatTransformer"
            ],
            "imports": [
              "libcst",
              "typing",
              "re",
              "sys"
            ],
            "size_lines": 374,
            "has_main": true,
            "docstring": null
          },
          "__init__.py": {
            "functions": [
              "format_to_fstring",
              "fstring_to_format"
            ],
            "classes": [],
            "imports": [
              "format_to_fstring_converter",
              "fstring_converter"
            ],
            "size_lines": 69,
            "has_main": false,
            "docstring": "Python string format conversion utilities.\n\nThis module provides functions to convert between different Python string formatting styles:\n- Convert str.format() expressions to f-strings\n- Convert f-strings to str.format() expressions\n\nExamples:\n    # Convert str.format() expressions to f-strings\n    >>> from rp.libs.refactorings.string_format import format_to_fstring\n    >>> code = 'print(\"Hello, {0}!\".format(name))'\n    >>> format_to_fstring(code)\n    'print(f\"Hello, {name}!\")'\n\n    # Convert f-strings to str.format() expressions\n    >>> from rp.libs.refactorings.string_format import fstring_to_format\n    >>> code = 'print(f\"Hello, {name}!\")'\n    >>> fstring_to_format(code)\n    'print(\"Hello, {0}!\".format(name))'\n\nWritten with Claude-Code May 16 2025"
          },
          "test_format_to_fstring_converter.py": {
            "functions": [
              "normalize_code",
              "run_tests",
              "normalize_quotes",
              "are_equivalent"
            ],
            "classes": [],
            "imports": [
              "sys",
              "re",
              "format_to_fstring_converter"
            ],
            "size_lines": 288,
            "has_main": true,
            "docstring": null
          },
          "test_fstring_converter.py": {
            "functions": [
              "normalize_code",
              "run_tests",
              "normalize_quotes",
              "are_equivalent"
            ],
            "classes": [],
            "imports": [
              "sys",
              "re",
              "fstring_converter"
            ],
            "size_lines": 229,
            "has_main": true,
            "docstring": null
          },
          "format_to_fstring_converter.py": {
            "functions": [
              "convert_string",
              "convert_file",
              "__init__",
              "set_original_code",
              "visit_Module",
              "leave_SimpleString",
              "visit_Call",
              "leave_Call",
              "_format_to_fstring_content"
            ],
            "classes": [
              "FormatToFStringTransformer"
            ],
            "imports": [
              "libcst",
              "typing",
              "re",
              "sys"
            ],
            "size_lines": 601,
            "has_main": true,
            "docstring": null
          }
        }
      }
    },
    "rp_ptpython": {
      "validator.py": {
        "functions": [
          "__init__",
          "validate"
        ],
        "classes": [
          "PythonValidator"
        ],
        "imports": [
          "__future__",
          "rp.prompt_toolkit.validation"
        ],
        "size_lines": 49,
        "has_main": false,
        "docstring": null
      },
      "key_bindings.py": {
        "functions": [
          "get_all_function_names",
          "run_code_without_destroying_buffer",
          "run_arbitrary_code_without_destroying_buffer",
          "replace_buffer_text",
          "handle_run_cell",
          "is_callable_token",
          "is_iterable_token",
          "edit_event_buffer_in_external",
          "edit_event_buffer_in_nano",
          "edit_event_buffer_in_micro",
          "edit_event_buffer_in_vim",
          "split_python_tokens",
          "get_ans",
          "do_vim_copy",
          "do_local_copy",
          "do_tmux_copy",
          "do_diff",
          "do_prompt_toolkit_history_diff",
          "do_query_prompt_toolkit_history",
          "do_paste_diff",
          "do_vim_paste_diff",
          "do_ans_diff",
          "do_local_paste_diff",
          "do_web_paste_diff",
          "do_tmux_paste_diff",
          "do_vim_paste",
          "do_tmux_paste",
          "do_web_copy",
          "do_local_paste",
          "do_web_paste",
          "do_copy",
          "commented_string",
          "do_paste",
          "do_string_paste",
          "toggle_top_line_text",
          "toggle_bottom_line_text",
          "text_to_speech",
          "robust_hasattr",
          "separator_boundaries",
          "above_and_below",
          "get_cell_code",
          "swap_from_import",
          "align_lines_to_char",
          "split_def_arguments_into_multiple_lines",
          "keys",
          "find_all_substring_matches",
          "token_exists",
          "token_name_found_of_interest",
          "starts_with_any",
          "cursor_on_string",
          "cursor_on_comment",
          "current_token",
          "true_get_if_in_string_or_comment",
          "get_if_in_string_or_comment",
          "meta_pressed",
          "line_above",
          "line_above_document",
          "beginswithany",
          "ends_with_namespaceable",
          "ends_with_number",
          "so_far",
          "splinterify",
          "indent_hiearchy",
          "find_header",
          "get_level_indent",
          "find_level",
          "get_indent",
          "endswithany",
          "in_class_func_decl",
          "has_selected_completion",
          "calculate_new_cursor_pos",
          "post_handler",
          "handle_character",
          "original_ptpython_load_python_bindings",
          "load_python_bindings",
          "load_sidebar_bindings",
          "load_confirm_exit_bindings",
          "auto_newline",
          "main",
          "f",
          "toggled_last_line",
          "__call__",
          "__init__",
          "parenthezized_line",
          "is_upper_line",
          "is_lower_line",
          "is_parenthesized_at_line",
          "unparenthesized",
          "parenthesized_at_line",
          "unparenthesize_buffer",
          "parenthesize_buffer",
          "buffer_is_parenthesized_at_cursor",
          "buffer_refresh_parenthesization",
          "buffer_toggle_parenthesization",
          "refresh_strings_from_buffer",
          "refresh_strings_from_buffer",
          "_",
          "_",
          "_",
          "_",
          "_",
          "_",
          "_",
          "_",
          "_",
          "self_dot_var_equals_var",
          "setting_index",
          "_",
          "_",
          "_",
          "move_line_down",
          "_",
          "_",
          "current_line_index",
          "go_to_line_number",
          "delete_current_line",
          "_",
          "_",
          "_",
          "_",
          "_",
          "_",
          "_",
          "_",
          "move_arg",
          "_",
          "_",
          "do_backspace",
          "alt_backspace_char_class",
          "_",
          "_",
          "_",
          "_",
          "_",
          "_",
          "_",
          "_",
          "_",
          "_",
          "_",
          "inc_dec",
          "thing",
          "surround",
          "thing2",
          "_",
          "_",
          "_",
          "_",
          "_",
          "_",
          "_",
          "_",
          "_",
          "_",
          "_",
          "_",
          "_",
          "number_of_leading_spaces",
          "_",
          "_",
          "try_to_unindent",
          "try_to_autounindent",
          "_",
          "_",
          "_",
          "_",
          "_",
          "_",
          "_",
          "_",
          "_",
          "_",
          "get_viminfo",
          "get_last_cursor_row_in_vim",
          "get_last_cursor_column_in_vim",
          "get_last_path_edited_in_vim",
          "at_the_end",
          "go",
          "go",
          "go",
          "go",
          "is_callable_token",
          "buffer_insert",
          "_",
          "_",
          "_",
          "_",
          "_",
          "chop_at_parenthesis_level",
          "erase_arg",
          "_",
          "_",
          "_",
          "_",
          "refresh_strings_from_buffer",
          "auto_pass",
          "at_the_end",
          "_",
          "_",
          "_",
          "_",
          "is_autocompletable_prefix",
          "autocomplete_prefix",
          "try_autocompleting_functions",
          "writing_namespace_breaks_syntax",
          "on_first_line",
          "jump_cursor_to_beginning_of_header",
          "do_linejoin",
          "uses_enumerate",
          "transform_var",
          "enumeratify"
        ],
        "classes": [
          "TabShouldInsertWhitespaceFilter",
          "CommentedParenthesizerAutomator"
        ],
        "imports": [
          "__future__",
          "re",
          "rp.prompt_toolkit.document",
          "rp.prompt_toolkit.enums",
          "rp.prompt_toolkit.filters",
          "rp.prompt_toolkit.key_binding.vi_state",
          "rp.prompt_toolkit.key_binding.registry",
          "rp.prompt_toolkit.keys",
          "rp.prompt_toolkit.buffer",
          "rp.prompt_toolkit.key_binding.input_processor",
          "rp",
          "rp.r_iterm_comm",
          "rp",
          "re",
          "rp.r_iterm_comm",
          "rp.r_iterm_comm",
          "rp.r_iterm_comm",
          "rp",
          "rp",
          "subprocess",
          "rp",
          "subprocess",
          "rp",
          "tokenize",
          "rp.r_iterm_comm",
          "rp",
          "rp",
          "rp",
          "rp",
          "rp",
          "rp",
          "rp",
          "rp",
          "rp",
          "rp",
          "rp",
          "rp",
          "rp",
          "rp",
          "rp",
          "rp",
          "rp",
          "rp",
          "rp",
          "rp",
          "rp",
          "rp",
          "rp",
          "rp",
          "rp",
          "rp",
          "difflib",
          "rp",
          "rp.r_iterm_comm",
          "tokenize",
          "rp.prompt_toolkit.key_binding.input_processor",
          "rp.prompt_toolkit.document",
          "rp",
          "os",
          "rp.r_iterm_comm",
          "rp",
          "rp",
          "rp",
          "os",
          "rp",
          "rp",
          "rp",
          "re",
          "rp",
          "rp",
          "rp.r_iterm_comm",
          "rp.prompt_toolkit.buffer",
          "rp",
          "rp.r_iterm_comm",
          "rp",
          "rp",
          "rp",
          "rp.r_iterm_comm",
          "rp",
          "rp.r_iterm_comm",
          "rp",
          "rp.prompt_toolkit.selection",
          "rp.prompt_toolkit.shortcuts",
          "rp",
          "rp.rp_ptpython.python_input",
          "rp",
          "rp",
          "rp",
          "rp.r_iterm_comm",
          "rp.r_iterm_comm",
          "keyword",
          "rp.r_iterm_comm",
          "rp",
          "rp",
          "rp",
          "rp.r_iterm_comm",
          "rp",
          "rp.r_iterm_comm",
          "inspect",
          "rp",
          "rp",
          "rp.r_iterm_comm",
          "rp",
          "rp",
          "rp",
          "rp",
          "rp",
          "rp",
          "rp",
          "rp",
          "rp",
          "rp.r",
          "rp",
          "rp",
          "rp",
          "rp",
          "rp",
          "rp",
          "rp",
          "rp",
          "rp",
          "rp",
          "rp",
          "rp",
          "rp",
          "rp",
          "rp",
          "ast",
          "rp",
          "rp",
          "black",
          "rp.r",
          "rp",
          "rp",
          "rp",
          "rp",
          "rp",
          "rp",
          "rp"
        ],
        "size_lines": 6231,
        "has_main": false,
        "docstring": null
      },
      "prompt_style.py": {
        "functions": [
          "in_tokens",
          "in2_tokens",
          "out_tokens",
          "__init__",
          "in_tokens",
          "in2_tokens",
          "out_tokens",
          "in_tokens",
          "in2_tokens",
          "out_tokens",
          "in_tokens"
        ],
        "classes": [
          "PromptStyle",
          "IPythonPrompt",
          "ClassicPrompt",
          "PseudoTerminalPrompt"
        ],
        "imports": [
          "__future__",
          "abc",
          "six",
          "pygments.token"
        ],
        "size_lines": 87,
        "has_main": false,
        "docstring": null
      },
      "style.py": {
        "functions": [
          "get_all_ui_styles",
          "randint",
          "random_index",
          "random_element",
          "random_choice",
          "random_hex_color",
          "random_style",
          "get_all_code_styles",
          "generate_style",
          "hex_to_rgb",
          "rgb_to_hex",
          "transform_color",
          "transform_style_string",
          "shift_hue_transform",
          "brightness_invert_transform",
          "color_invert_transform",
          "brightness_range_transform",
          "saturation_range_transform",
          "shift_hue_string",
          "invert_brightness_string",
          "adjust_brightness_range_string",
          "adjust_saturation_range_string",
          "force_black_white",
          "adjust_fg_bg_contrast",
          "invert_style_string",
          "__init__",
          "_ensure_pygments_names_loaded",
          "__contains__",
          "__getitem__",
          "get",
          "keys",
          "__init__",
          "_ensure_current_theme_loaded",
          "__contains__",
          "__getitem__",
          "keys",
          "__iter__",
          "transform",
          "transform",
          "transform",
          "transform",
          "transform"
        ],
        "classes": [
          "LazyStyleDict",
          "LazyCodeStyleDict"
        ],
        "imports": [
          "__future__",
          "rp.prompt_toolkit.styles.base",
          "rp",
          "pygments.token",
          "pygments.styles",
          "rp.prompt_toolkit.styles",
          "rp.prompt_toolkit.utils",
          "pygments.token",
          "colorsys",
          "random",
          "rp.r",
          "sys"
        ],
        "size_lines": 3595,
        "has_main": false,
        "docstring": null
      },
      "layout.py": {
        "functions": [
          "show_completions_toolbar",
          "show_completions_menu",
          "show_multi_column_completions_menu",
          "python_sidebar",
          "python_sidebar_navigation",
          "python_sidebar_help",
          "signature_toolbar",
          "status_bar",
          "get_inputmode_tokens",
          "show_sidebar_button_info",
          "exit_confirmation",
          "meta_enter_message",
          "create_layout",
          "get_tokens",
          "get_tokens",
          "get_current_description",
          "get_tokens",
          "get_tokens",
          "__init__",
          "toggle_mouse_support",
          "toggle_microcompletions",
          "toggle_wrap_lines",
          "toggle_paste_mode",
          "enter_history",
          "get_tokens",
          "toggle_vi_mode",
          "toggle_sidebar",
          "get_tokens",
          "get_tokens",
          "extra_condition",
          "create_python_input_window",
          "title_fill",
          "append_category",
          "append",
          "move_cursor_down",
          "move_cursor_up",
          "get_prompt_style",
          "get_prompt",
          "get_continuation_prompt",
          "menu_position",
          "__init__",
          "apply_transformation",
          "select_item",
          "goto_next",
          "testytest"
        ],
        "classes": [
          "CompletionVisualisation",
          "PythonPromptMargin",
          "Control",
          "DisplayMultipleCursors"
        ],
        "imports": [
          "__future__",
          "rp.prompt_toolkit.enums",
          "rp.prompt_toolkit.filters",
          "rp.prompt_toolkit.key_binding.vi_state",
          "rp.prompt_toolkit.layout.containers",
          "rp.prompt_toolkit.layout.controls",
          "rp.prompt_toolkit.layout.dimension",
          "rp.prompt_toolkit.layout.lexers",
          "rp.prompt_toolkit.layout.margins",
          "rp.prompt_toolkit.layout.menus",
          "rp.prompt_toolkit.layout.processors",
          "rp.prompt_toolkit.layout.screen",
          "rp.prompt_toolkit.layout.toolbars",
          "rp.prompt_toolkit.layout.utils",
          "rp.prompt_toolkit.reactive",
          "rp.prompt_toolkit.selection",
          "rp.prompt_toolkit.token",
          "rp.prompt_toolkit.document",
          "rp.prompt_toolkit.selection",
          "filters",
          "utils",
          "pygments.lexers",
          "pygments.token",
          "platform",
          "sys",
          "rp.prompt_toolkit.layout.processors",
          "datetime",
          "rp",
          "rp",
          "rp.r_iterm_comm",
          "rp.r_iterm_comm"
        ],
        "size_lines": 842,
        "has_main": false,
        "docstring": "Creation of the `Layout` instance for the Python input/REPL."
      },
      "repl.py": {
        "functions": [
          "_lex_python_traceback",
          "_lex_python_result",
          "enable_deprecation_warnings",
          "run_config",
          "embed",
          "__init__",
          "_on_start",
          "_process_document",
          "_execute",
          "_handle_exception",
          "_handle_keyboard_interrupt",
          "enter_to_continue",
          "get_globals",
          "get_locals",
          "compile_with_flags",
          "coroutine"
        ],
        "classes": [
          "PythonRepl"
        ],
        "imports": [
          "__future__",
          "pygments.lexers",
          "pygments.styles.default",
          "rp.prompt_toolkit.application",
          "rp.prompt_toolkit.enums",
          "rp.prompt_toolkit.interface",
          "rp.prompt_toolkit.key_binding.vi_state",
          "rp.prompt_toolkit.layout.utils",
          "rp.prompt_toolkit.shortcuts",
          "rp.prompt_toolkit.styles",
          "rp.prompt_toolkit.utils",
          "python_input",
          "eventloop",
          "os",
          "six",
          "sys",
          "traceback",
          "warnings"
        ],
        "size_lines": 321,
        "has_main": false,
        "docstring": "Utility for creating a Python repl.\n\n::\n\n    from ptpython.repl import embed\n    embed(globals(), locals(), vi_mode=False)"
      },
      "completerbackup.py": {
        "functions": [
          "ryan_completion_matches",
          "__init__",
          "_path_completer",
          "_path_completer_grammar",
          "_create_path_completer_grammar",
          "_complete_path_while_typing",
          "_complete_python_while_typing",
          "_get_completions",
          "get_completions",
          "match",
          "unwrapper",
          "single_quoted_wrapper",
          "double_quoted_wrapper",
          "match_char"
        ],
        "classes": [
          "PythonCompleter"
        ],
        "imports": [
          "__future__",
          "rp.prompt_toolkit.completion",
          "rp.prompt_toolkit.document",
          "rp.prompt_toolkit.contrib.completers",
          "rp.prompt_toolkit.contrib.regular_languages.compiler",
          "rp.prompt_toolkit.contrib.regular_languages.completion",
          "rp.rp_ptpython.utils",
          "re",
          "rp.r_iterm_comm",
          "rp",
          "rp.r_iterm_comm",
          "rp.r_iterm_comm",
          "rp",
          "rp",
          "rp",
          "rp",
          "rp"
        ],
        "size_lines": 305,
        "has_main": false,
        "docstring": null
      },
      "__init__.py": {
        "functions": [],
        "classes": [],
        "imports": [],
        "size_lines": 1,
        "has_main": false,
        "docstring": null
      },
      "eventloop.py": {
        "functions": [
          "_inputhook_tk",
          "_inputhook",
          "create_eventloop",
          "wait_using_filehandler",
          "wait_using_polling",
          "done"
        ],
        "classes": [],
        "imports": [
          "rp.prompt_toolkit.shortcuts",
          "sys",
          "time",
          "_tkinter",
          "six.moves"
        ],
        "size_lines": 76,
        "has_main": false,
        "docstring": "Wrapper around the eventloop that gives some time to the Tkinter GUI to process\nevents when it's loaded and while we are waiting for input at the REPL. This\nway we don't block the UI of for instance ``turtle`` and other Tk libraries.\n\n(Normally Tkinter registeres it's callbacks in ``PyOS_InputHook`` to integrate\nin readline. ``prompt-toolkit`` doesn't understand that input hook, but this\nwill fix it for Tk.)"
      },
      "completer.py": {
        "functions": [
          "get_all_importable_module_names",
          "get_apt_completions",
          "ryan_completion_matches",
          "__init__",
          "_path_completer",
          "_path_completer_grammar",
          "_create_path_completer_grammar",
          "_complete_path_while_typing",
          "_complete_python_while_typing",
          "_get_completions",
          "get_completions",
          "match",
          "update_thread",
          "unwrapper",
          "single_quoted_wrapper",
          "double_quoted_wrapper",
          "match_char",
          "yield_from_candidates",
          "pathmod",
          "pathsmod",
          "get_path_before_cursor",
          "scandir_path_before_cursor",
          "get_module_names",
          "sorting_key",
          "unhidden_path",
          "update_parso_grammars",
          "keys",
          "evall"
        ],
        "classes": [
          "PythonCompleter"
        ],
        "imports": [
          "__future__",
          "rp.prompt_toolkit.completion",
          "rp.prompt_toolkit.document",
          "rp.prompt_toolkit.contrib.completers",
          "rp.prompt_toolkit.contrib.regular_languages.compiler",
          "rp.prompt_toolkit.contrib.regular_languages.completion",
          "rp.rp_ptpython.utils",
          "re",
          "sys",
          "threading",
          "functools",
          "pkgutil",
          "rp",
          "rp",
          "re",
          "threading",
          "subprocess",
          "warnings",
          "rp",
          "rp.r_iterm_comm",
          "rp.r_iterm_comm",
          "re",
          "rp",
          "re",
          "rp",
          "re",
          "warnings",
          "rp",
          "os",
          "rp",
          "os",
          "rp",
          "rp",
          "os",
          "rp",
          "os",
          "rp",
          "os",
          "rp",
          "os",
          "os",
          "rp",
          "rp",
          "rp",
          "os",
          "os",
          "rp",
          "rp",
          "rp",
          "rp.r_iterm_comm",
          "rp",
          "pkgutil",
          "rp",
          "os",
          "rp",
          "rp",
          "rp",
          "rp",
          "rp",
          "os",
          "rp"
        ],
        "size_lines": 864,
        "has_main": false,
        "docstring": null
      },
      "completer_stable.py": {
        "functions": [
          "ryan_completion_matches",
          "__init__",
          "_path_completer",
          "_path_completer_grammar",
          "_create_path_completer_grammar",
          "_complete_path_while_typing",
          "_complete_python_while_typing",
          "_get_completions",
          "get_completions",
          "match",
          "unwrapper",
          "single_quoted_wrapper",
          "double_quoted_wrapper",
          "match_char"
        ],
        "classes": [
          "PythonCompleter"
        ],
        "imports": [
          "__future__",
          "rp.prompt_toolkit.completion",
          "rp.prompt_toolkit.document",
          "rp.prompt_toolkit.contrib.completers",
          "rp.prompt_toolkit.contrib.regular_languages.compiler",
          "rp.prompt_toolkit.contrib.regular_languages.completion",
          "rp.rp_ptpython.utils",
          "re",
          "rp.r_iterm_comm",
          "rp.r_iterm_comm",
          "rp.r_iterm_comm",
          "rp",
          "rp",
          "rp",
          "rp"
        ],
        "size_lines": 276,
        "has_main": false,
        "docstring": null
      },
      "ipython.py": {
        "functions": [
          "create_ipython_grammar",
          "create_completer",
          "create_lexer",
          "initialize_extensions",
          "embed",
          "__init__",
          "in_tokens",
          "in2_tokens",
          "out_tokens",
          "__init__",
          "in_tokens",
          "in2_tokens",
          "out_tokens",
          "__init__",
          "validate",
          "__init__",
          "get_completions",
          "__init__",
          "get_completions",
          "__init__",
          "__init__",
          "prompt_for_code",
          "raw_input",
          "get_globals"
        ],
        "classes": [
          "IPythonPrompt",
          "IPython5Prompt",
          "IPythonValidator",
          "MagicsCompleter",
          "AliasCompleter",
          "IPythonInput",
          "InteractiveShellEmbed"
        ],
        "imports": [
          "__future__",
          "rp.prompt_toolkit.completion",
          "rp.prompt_toolkit.contrib.completers",
          "rp.prompt_toolkit.contrib.regular_languages.compiler",
          "rp.prompt_toolkit.contrib.regular_languages.completion",
          "rp.prompt_toolkit.contrib.regular_languages.lexer",
          "rp.prompt_toolkit.document",
          "rp.prompt_toolkit.interface",
          "rp.prompt_toolkit.layout.lexers",
          "python_input",
          "eventloop",
          "style",
          "IPython.terminal.embed",
          "IPython.terminal.ipapp",
          "IPython",
          "IPython.core.inputsplitter",
          "pygments.lexers",
          "pygments.token",
          "rp.rp_ptpython.prompt_style"
        ],
        "size_lines": 304,
        "has_main": false,
        "docstring": "Adaptor for using the input system of `rp.prompt_toolkit` with the IPython\nbackend.\n\nThis gives a powerful interactive shell that has a nice user interface, but\nalso the power of for instance all the %-magic functions that IPython has to\noffer."
      },
      "utils.py": {
        "functions": [
          "has_unclosed_brackets",
          "get_jedi_script_from_document",
          "document_is_multiline_python",
          "if_mousedown",
          "ends_in_multiline_string",
          "line_ends_with_colon",
          "handle_if_mouse_down"
        ],
        "classes": [],
        "imports": [
          "__future__",
          "rp.prompt_toolkit.mouse_events",
          "re",
          "rp.libs.jedi"
        ],
        "size_lines": 133,
        "has_main": false,
        "docstring": "For internal use only."
      },
      "history_browser.py": {
        "functions": [
          "get_HISTORY_COUNT",
          "should_highlight_history",
          "create_popup_window",
          "create_layout",
          "_get_top_toolbar_tokens",
          "_get_bottom_toolbar_tokens",
          "_toggle_help",
          "_select_other_window",
          "create_key_bindings",
          "create_history_application",
          "f1",
          "tab",
          "__init__",
          "get_width",
          "create_margin",
          "__init__",
          "get_width",
          "create_margin",
          "invalidation_hash",
          "__init__",
          "apply_transformation",
          "__init__",
          "get_new_document",
          "update_default_buffer",
          "_",
          "_",
          "_",
          "_",
          "_",
          "_",
          "_",
          "_",
          "default_buffer_pos_changed",
          "history_buffer_pos_changed"
        ],
        "classes": [
          "BORDER",
          "HistoryMargin",
          "ResultMargin",
          "GrayExistingText",
          "HistoryMapping"
        ],
        "imports": [
          "__future__",
          "rp.prompt_toolkit.application",
          "rp.prompt_toolkit.buffer",
          "rp.prompt_toolkit.buffer_mapping",
          "rp.prompt_toolkit.document",
          "rp.prompt_toolkit.enums",
          "rp.prompt_toolkit.filters",
          "rp.prompt_toolkit.key_binding.defaults",
          "rp.prompt_toolkit.keys",
          "rp.prompt_toolkit.layout.containers",
          "rp.prompt_toolkit.layout.controls",
          "rp.prompt_toolkit.layout.dimension",
          "rp.prompt_toolkit.layout.lexers",
          "rp.prompt_toolkit.layout.margins",
          "rp.prompt_toolkit.layout.processors",
          "rp.prompt_toolkit.layout.screen",
          "rp.prompt_toolkit.layout.toolbars",
          "rp.prompt_toolkit.layout.toolbars",
          "rp.prompt_toolkit.layout.utils",
          "pygments.lexers",
          "pygments.token",
          "utils",
          "rp.rp_ptpython.layout",
          "functools",
          "six",
          "pygments.lexers",
          "pygments.lexers",
          "rp.r",
          "rp.r"
        ],
        "size_lines": 609,
        "has_main": false,
        "docstring": "Utility to easily select lines from the history and execute them again.\n\n`create_history_application` creates an `Application` instance that runs will\nrun as a sub application of the Repl/PythonInput."
      },
      "completer_arpy.py": {
        "functions": [
          "get_all_importable_module_names",
          "ryan_completion_matches",
          "__init__",
          "_path_completer",
          "_path_completer_grammar",
          "_create_path_completer_grammar",
          "_complete_path_while_typing",
          "_complete_python_while_typing",
          "_get_completions",
          "get_completions",
          "match",
          "update_thread",
          "unwrapper",
          "single_quoted_wrapper",
          "double_quoted_wrapper",
          "match_char",
          "yield_from_candidates",
          "keys",
          "evall"
        ],
        "classes": [
          "PythonCompleter"
        ],
        "imports": [
          "__future__",
          "rp.prompt_toolkit.completion",
          "rp.prompt_toolkit.document",
          "rp.prompt_toolkit.contrib.completers",
          "rp.prompt_toolkit.contrib.regular_languages.compiler",
          "rp.prompt_toolkit.contrib.regular_languages.completion",
          "rp.rp_ptpython.utils",
          "re",
          "sys",
          "threading",
          "functools",
          "pkgutil",
          "rp",
          "rp",
          "re",
          "threading",
          "warnings",
          "warnings",
          "rp.r_iterm_comm",
          "rp.r_iterm_comm",
          "re",
          "rp",
          "re",
          "re",
          "rp",
          "rp.r_iterm_comm",
          "rp",
          "os",
          "rp",
          "os",
          "rp",
          "os",
          "os",
          "rp",
          "rp",
          "rp",
          "rp",
          "rp"
        ],
        "size_lines": 468,
        "has_main": false,
        "docstring": null
      },
      "__main__.py": {
        "functions": [],
        "classes": [],
        "imports": [
          "__future__",
          "entry_points.run_ptpython"
        ],
        "size_lines": 8,
        "has_main": false,
        "docstring": "Make `python -m ptpython` an alias for running `./ptpython`."
      },
      "untitled.py": {
        "functions": [
          "min_pinch",
          "pinch_test",
          "squeezyness",
          "descriptor",
          "min_dist"
        ],
        "classes": [],
        "imports": [],
        "size_lines": 62,
        "has_main": false,
        "docstring": null
      },
      "filters.py": {
        "functions": [
          "__init__",
          "__call__",
          "__call__",
          "__call__",
          "__call__",
          "__call__",
          "__call__",
          "__call__",
          "__call__",
          "__call__",
          "__call__",
          "__call__",
          "__call__"
        ],
        "classes": [
          "PythonInputFilter",
          "HasSignature",
          "ShowSidebar",
          "ShowSignature",
          "ShowDocstring",
          "ShowRealtimeInput",
          "ShowVarSpace",
          "ShowVarSpaceOrShowRealtimeInput",
          "ShowVarSpaceAndShowRealtimeInput",
          "ShowParenthesisAutomator",
          "ShowLastAssignable",
          "ShowBatteryLife"
        ],
        "imports": [
          "__future__",
          "rp.prompt_toolkit.filters"
        ],
        "size_lines": 59,
        "has_main": false,
        "docstring": null
      },
      "python_input.py": {
        "functions": [
          "set_debug_height",
          "set_history_line_limit",
          "get_history_line_limit",
          "__init__",
          "options",
          "__init__",
          "values",
          "activate_next",
          "activate_previous",
          "__init__",
          "options",
          "option_count",
          "selected_option",
          "get_compiler_flags",
          "add_key_binding",
          "install_code_colorscheme",
          "use_code_colorscheme",
          "install_ui_colorscheme",
          "use_ui_colorscheme",
          "_generate_style",
          "_update_style",
          "_create_options",
          "create_application",
          "_create_buffer",
          "_on_cli_initialize",
          "_on_input_timeout",
          "on_reset",
          "enter_history",
          "__init__",
          "height_is_known",
          "__getattr__",
          "__init__",
          "get_size",
          "get_real_size",
          "fileno",
          "encoding",
          "write",
          "write_raw",
          "set_title",
          "clear_title",
          "flush",
          "erase_screen",
          "enter_alternate_screen",
          "quit_alternate_screen",
          "enable_mouse_support",
          "disable_mouse_support",
          "erase_end_of_line",
          "erase_down",
          "reset_attributes",
          "set_attributes",
          "disable_autowrap",
          "enable_autowrap",
          "cursor_goto",
          "cursor_up",
          "cursor_down",
          "cursor_forward",
          "cursor_backward",
          "hide_cursor",
          "show_cursor",
          "ask_for_cpr",
          "bell",
          "enable_bracketed_paste",
          "disable_bracketed_paste",
          "__init__",
          "add_binding_decorator",
          "enable",
          "disable",
          "simple_option",
          "doge",
          "is_buffer_multiline",
          "synchronize",
          "run",
          "done",
          "get_current_value",
          "get_values"
        ],
        "classes": [
          "OptionCategory",
          "Option",
          "PythonInput",
          "ConstrainedHeightRenderer",
          "ConstrainedHeightOutput",
          "PythonCommandLineInterface"
        ],
        "imports": [
          "__future__",
          "rp.r_iterm_comm",
          "rp.prompt_toolkit",
          "rp.prompt_toolkit.auto_suggest",
          "rp.prompt_toolkit.buffer",
          "rp.prompt_toolkit.document",
          "rp.prompt_toolkit.enums",
          "rp.prompt_toolkit.filters",
          "rp.prompt_toolkit.history",
          "rp.prompt_toolkit.interface",
          "rp.prompt_toolkit.key_binding.defaults",
          "rp.prompt_toolkit.key_binding.vi_state",
          "rp.prompt_toolkit.key_binding.registry",
          "rp.prompt_toolkit.layout.lexers",
          "rp.prompt_toolkit.shortcuts",
          "rp.prompt_toolkit.styles",
          "rp.prompt_toolkit.utils",
          "rp.prompt_toolkit.validation",
          "rp.prompt_toolkit.output",
          "completer",
          "history_browser",
          "key_bindings",
          "layout",
          "prompt_style",
          "style",
          "utils",
          "validator",
          "functools",
          "rp.r_iterm_comm",
          "six",
          "__future__",
          "rp.r_iterm_comm",
          "rp.r",
          "rp.r",
          "rp.r_iterm_comm",
          "inspect",
          "rp.prompt_toolkit.layout.screen",
          "rp.prompt_toolkit.layout.lexers",
          "rp.r_iterm_comm",
          "rp.r_iterm_comm",
          "rp",
          "rp.r_iterm_comm"
        ],
        "size_lines": 1414,
        "has_main": false,
        "docstring": "CommandLineInterface for reading Python input.\nThis can be used for creation of Python REPLs.\n\n::\n\n    cli = PythonCommandLineInterface()\n    cli.run()"
      }
    },
    "prompt_toolkit": {
      "enums.py": {
        "functions": [],
        "classes": [
          "IncrementalSearchDirection",
          "EditingMode"
        ],
        "imports": [
          "__future__"
        ],
        "size_lines": 30,
        "has_main": false,
        "docstring": null
      },
      "token.py": {
        "functions": [
          "__getattr__",
          "__repr__"
        ],
        "classes": [
          "_TokenType"
        ],
        "imports": [
          "pygments.token"
        ],
        "size_lines": 48,
        "has_main": false,
        "docstring": "The Token class, interchangeable with ``pygments.token``.\n\nA `Token` has some semantics for a piece of text that is given a style through\na :class:`~prompt_toolkit.styles.Style` class. A pygments lexer for instance,\nreturns a list of (Token, text) tuples. Each fragment of text has a token\nassigned, which when combined with a style sheet, will determine the fine\nstyle."
      },
      "mouse_events.py": {
        "functions": [
          "__init__",
          "__repr__"
        ],
        "classes": [
          "MouseEventType",
          "MouseEvent"
        ],
        "imports": [
          "__future__"
        ],
        "size_lines": 49,
        "has_main": false,
        "docstring": "Mouse events.\n\n\nHow it works\n------------\n\nThe renderer has a 2 dimensional grid of mouse event handlers.\n(`prompt_toolkit.layout.MouseHandlers`.) When the layout is rendered, the\n`Window` class will make sure that this grid will also be filled with\ncallbacks. For vt100 terminals, mouse events are received through stdin, just\nlike any other key press. There is a handler among the key bindings that\ncatches these events and forwards them to such a mouse event handler. It passes\nthrough the `Window` class where the coordinates are translated from absolute\ncoordinates to coordinates relative to the user control, and there\n`UIControl.mouse_handler` is called."
      },
      "completion.py": {
        "functions": [
          "get_common_complete_suffix",
          "_commonprefix",
          "__init__",
          "__repr__",
          "__eq__",
          "__hash__",
          "display_meta",
          "new_completion_from_position",
          "__init__",
          "__repr__",
          "get_completions",
          "doesnt_change_before_cursor",
          "get_suffix"
        ],
        "classes": [
          "Completion",
          "CompleteEvent",
          "Completer"
        ],
        "imports": [
          "__future__",
          "abc",
          "six"
        ],
        "size_lines": 171,
        "has_main": false,
        "docstring": ""
      },
      "shortcuts.py": {
        "functions": [
          "create_eventloop",
          "create_output",
          "create_asyncio_eventloop",
          "_split_multiline_prompt",
          "create_prompt_layout",
          "create_prompt_application",
          "prompt",
          "run_application",
          "prompt_async",
          "create_confirm_application",
          "confirm",
          "print_tokens",
          "clear",
          "has_before_tokens",
          "before",
          "first_input_line",
          "__init__",
          "get_height",
          "_",
          "_",
          "start_refresh_loop",
          "stop_refresh_loop",
          "run"
        ],
        "classes": [
          "_RPrompt"
        ],
        "imports": [
          "__future__",
          "buffer",
          "document",
          "enums",
          "filters",
          "history",
          "interface",
          "key_binding.defaults",
          "key_binding.registry",
          "keys",
          "layout",
          "layout.containers",
          "layout.controls",
          "layout.dimension",
          "layout.lexers",
          "layout.margins",
          "layout.menus",
          "layout.processors",
          "layout.prompt",
          "layout.screen",
          "layout.toolbars",
          "layout.utils",
          "renderer",
          "styles",
          "token",
          "utils",
          "six",
          "os",
          "sys",
          "textwrap",
          "threading",
          "time",
          "pygments.lexer",
          "pygments.style",
          "terminal.win32_output",
          "terminal.conemu_output",
          "terminal.vt100_output",
          "rp.prompt_toolkit.eventloop.win32",
          "rp.prompt_toolkit.eventloop.posix",
          "rp.prompt_toolkit.eventloop.asyncio_win32",
          "rp.prompt_toolkit.eventloop.asyncio_posix"
        ],
        "size_lines": 718,
        "has_main": false,
        "docstring": "Shortcuts for retrieving input from the user.\n\nIf you are using this library for retrieving some input from the user (as a\npure Python replacement for GNU readline), probably for 90% of the use cases,\nthe :func:`.prompt` function is all you need. It's the easiest shortcut which\ndoes a lot of the underlying work like creating a\n:class:`~prompt_toolkit.interface.CommandLineInterface` instance for you.\n\nWhen is this not sufficient:\n    - When you want to have more complicated layouts (maybe with sidebars or\n      multiple toolbars. Or visibility of certain user interface controls\n      according to some conditions.)\n    - When you wish to have multiple input buffers. (If you would create an\n      editor like a Vi clone.)\n    - Something else that requires more customization than what is possible\n      with the parameters of `prompt`.\n\nIn that case, study the code in this file and build your own\n`CommandLineInterface` instance. It's not too complicated."
      },
      "renderer.py": {
        "functions": [
          "_output_screen_diff",
          "print_tokens",
          "reset_attributes",
          "move_cursor",
          "output_char",
          "__init__",
          "__missing__",
          "__init__",
          "reset",
          "height_is_known",
          "rows_above_layout",
          "request_absolute_cursor_position",
          "report_absolute_cursor_row",
          "render",
          "erase",
          "clear"
        ],
        "classes": [
          "HeightIsUnknownError",
          "_TokenToAttrsCache",
          "Renderer"
        ],
        "imports": [
          "__future__",
          "rp.prompt_toolkit.filters",
          "rp.prompt_toolkit.layout.mouse_handlers",
          "rp.prompt_toolkit.layout.screen",
          "rp.prompt_toolkit.output",
          "rp.prompt_toolkit.styles",
          "rp.prompt_toolkit.token",
          "rp.prompt_toolkit.utils",
          "six.moves"
        ],
        "size_lines": 536,
        "has_main": false,
        "docstring": "Renders the command line on the console.\n(Redraws parts of the input line that were changed.)"
      },
      "auto_suggest.py": {
        "functions": [
          "__init__",
          "__repr__",
          "get_suggestion",
          "get_suggestion",
          "__init__",
          "get_suggestion"
        ],
        "classes": [
          "Suggestion",
          "AutoSuggest",
          "AutoSuggestFromHistory",
          "ConditionalAutoSuggest"
        ],
        "imports": [
          "__future__",
          "abc",
          "six",
          "filters"
        ],
        "size_lines": 89,
        "has_main": false,
        "docstring": "`Fish-style <http://fishshell.com/>`_  like auto-suggestion.\n\nWhile a user types input in a certain buffer, suggestions are generated\n(asynchronously.) Usually, they are displayed after the input. When the cursor\npresses the right arrow and the cursor is at the end of the input, the\nsuggestion will be inserted."
      },
      "win32_types.py": {
        "functions": [
          "__repr__",
          "__str__"
        ],
        "classes": [
          "COORD",
          "UNICODE_OR_ASCII",
          "KEY_EVENT_RECORD",
          "MOUSE_EVENT_RECORD",
          "WINDOW_BUFFER_SIZE_RECORD",
          "MENU_EVENT_RECORD",
          "FOCUS_EVENT_RECORD",
          "EVENT_RECORD",
          "INPUT_RECORD",
          "SMALL_RECT",
          "CONSOLE_SCREEN_BUFFER_INFO",
          "SECURITY_ATTRIBUTES"
        ],
        "imports": [
          "ctypes",
          "ctypes.wintypes"
        ],
        "size_lines": 156,
        "has_main": false,
        "docstring": null
      },
      "interface.py": {
        "functions": [
          "__init__",
          "layout",
          "clipboard",
          "pre_run_callables",
          "add_buffer",
          "start_completion",
          "current_buffer_name",
          "current_buffer",
          "focus",
          "push_focus",
          "pop_focus",
          "terminal_title",
          "is_searching",
          "reset",
          "in_paste_mode",
          "is_ignoring_case",
          "invalidate",
          "_redraw",
          "_on_resize",
          "_load_next_buffer_indexes",
          "_pre_run",
          "run",
          "run_sub_application",
          "exit",
          "abort",
          "set_return_value",
          "_set_return_callable",
          "run_in_terminal",
          "run_application_generator",
          "run_system_command",
          "suspend_to_background",
          "print_tokens",
          "is_exiting",
          "is_aborting",
          "is_returning",
          "return_value",
          "is_done",
          "_create_async_completer",
          "_create_auto_suggest_function",
          "stdout_proxy",
          "patch_stdout_context",
          "create_eventloop_callbacks",
          "__init__",
          "_active_cli",
          "terminal_size_changed",
          "input_timeout",
          "feed_key",
          "__init__",
          "__enter__",
          "__exit__",
          "__init__",
          "_do",
          "_write",
          "write",
          "_flush",
          "flush",
          "__init__",
          "stop",
          "close",
          "run_in_executor",
          "call_from_executor",
          "add_reader",
          "remove_reader",
          "create_on_insert_handler",
          "buffer_changed",
          "done",
          "step_next",
          "done",
          "wait_for_enter",
          "run",
          "completion_does_nothing",
          "async_completer",
          "async_suggestor",
          "run",
          "on_text_insert",
          "redraw",
          "run_async",
          "eof_error",
          "keyboard_interrupt",
          "_",
          "run",
          "run",
          "run",
          "run",
          "callback",
          "callback"
        ],
        "classes": [
          "CommandLineInterface",
          "_InterfaceEventLoopCallbacks",
          "_PatchStdoutContext",
          "_StdoutProxy",
          "_SubApplicationEventLoop"
        ],
        "imports": [
          "__future__",
          "functools",
          "os",
          "signal",
          "six",
          "sys",
          "textwrap",
          "threading",
          "time",
          "types",
          "weakref",
          "subprocess",
          "application",
          "buffer",
          "buffer_mapping",
          "completion",
          "enums",
          "eventloop.base",
          "eventloop.callbacks",
          "filters",
          "input",
          "key_binding.input_processor",
          "key_binding.input_processor",
          "key_binding.registry",
          "key_binding.vi_state",
          "keys",
          "output",
          "renderer",
          "search_state",
          "utils",
          "buffer",
          "shortcuts",
          "shortcuts",
          "rp"
        ],
        "size_lines": 1194,
        "has_main": false,
        "docstring": "The main `CommandLineInterface` class and logic."
      },
      "reactive.py": {
        "functions": [
          "__int__",
          "from_callable",
          "__init__",
          "__repr__",
          "__int__"
        ],
        "classes": [
          "Integer",
          "_IntegerFromCallable"
        ],
        "imports": [
          "__future__",
          "abc",
          "six"
        ],
        "size_lines": 57,
        "has_main": false,
        "docstring": "Prompt_toolkit is designed a way that the amount of changing state is reduced\nto a minimum. Where possible, code is written in a pure functional way. In\ngeneral, this results in code where the flow is very easy to follow: the value\nof a variable can be deducted from its first assignment.\n\nHowever, often, practicality and performance beat purity and some classes still\nhave a changing state. In order to not having to care too much about\ntransferring states between several components we use some reactive\nprogramming. Actually some kind of data binding.\n\nWe introduce two types:\n\n- Filter: for binding a boolean state. They can be chained using & and |\n  operators. Have a look in the ``filters`` module. Resolving the actual value\n  of a filter happens by calling it.\n\n- Integer: for binding integer values. Reactive operations (like addition and\n  substraction) are not suppported. Resolving the actual value happens by\n  casting it to int, like  ``int(integer)``. This way, it is possible to use\n  normal integers as well for static values."
      },
      "cache.py": {
        "functions": [
          "memoized",
          "__init__",
          "get",
          "clear",
          "__init__",
          "__missing__",
          "decorator",
          "new_callable",
          "create_new"
        ],
        "classes": [
          "SimpleCache",
          "FastDictCache"
        ],
        "imports": [
          "__future__",
          "collections",
          "functools"
        ],
        "size_lines": 112,
        "has_main": false,
        "docstring": null
      },
      "__init__.py": {
        "functions": [],
        "classes": [],
        "imports": [
          "interface",
          "application",
          "shortcuts"
        ],
        "size_lines": 23,
        "has_main": false,
        "docstring": "prompt_toolkit\n==============\n\nAuthor: Jonathan Slenders\n\nDescription: prompt_toolkit is a Library for building powerful interactive\n             command lines in Python.  It can be a replacement for GNU\n             readline, but it can be much more than that.\n\nSee the examples directory to learn about the usage.\n\nProbably, to get started, you meight also want to have a look at\n`prompt_toolkit.shortcuts.prompt`."
      },
      "keys.py": {
        "functions": [
          "__init__",
          "__repr__"
        ],
        "classes": [
          "Key",
          "Keys"
        ],
        "imports": [
          "__future__"
        ],
        "size_lines": 130,
        "has_main": false,
        "docstring": null
      },
      "search_state.py": {
        "functions": [
          "__init__",
          "__repr__",
          "__invert__"
        ],
        "classes": [
          "SearchState"
        ],
        "imports": [
          "enums",
          "filters"
        ],
        "size_lines": 37,
        "has_main": false,
        "docstring": null
      },
      "application.py": {
        "functions": [
          "__init__",
          "dummy_handler"
        ],
        "classes": [
          "AbortAction",
          "Application"
        ],
        "imports": [
          "__future__",
          "buffer",
          "buffer_mapping",
          "clipboard",
          "enums",
          "filters",
          "key_binding.bindings.basic",
          "key_binding.bindings.emacs",
          "key_binding.bindings.vi",
          "key_binding.registry",
          "key_binding.defaults",
          "layout",
          "layout.containers",
          "layout.controls",
          "styles",
          "six"
        ],
        "size_lines": 193,
        "has_main": false,
        "docstring": null
      },
      "utils.py": {
        "functions": [
          "test_callable_args",
          "get_cwidth",
          "suspend_to_background_supported",
          "is_windows",
          "is_conemu_ansi",
          "in_main_thread",
          "take_using_weights",
          "__init__",
          "__call__",
          "fire",
          "__iadd__",
          "__isub__",
          "__enter__",
          "__exit__",
          "__missing__",
          "drop_self"
        ],
        "classes": [
          "Event",
          "DummyContext",
          "_CharSizesCache"
        ],
        "imports": [
          "__future__",
          "inspect",
          "os",
          "signal",
          "sys",
          "threading",
          "weakref",
          "wcwidth",
          "six.moves"
        ],
        "size_lines": 241,
        "has_main": false,
        "docstring": null
      },
      "input.py": {
        "functions": [
          "fileno",
          "read",
          "raw_mode",
          "cooked_mode",
          "__init__",
          "__repr__",
          "raw_mode",
          "cooked_mode",
          "fileno",
          "read",
          "__init__",
          "fileno",
          "read",
          "send_text",
          "raw_mode",
          "cooked_mode",
          "close"
        ],
        "classes": [
          "Input",
          "StdinInput",
          "PipeInput"
        ],
        "imports": [
          "__future__",
          "utils",
          "abc",
          "six",
          "io",
          "os",
          "sys",
          "terminal.win32_input",
          "terminal.vt100_input"
        ],
        "size_lines": 136,
        "has_main": false,
        "docstring": "Abstraction of CLI Input."
      },
      "buffer.py": {
        "functions": [
          "profile",
          "_return_document_handler",
          "indent",
          "unindent",
          "reshape_text",
          "out",
          "__init__",
          "run_in_terminal",
          "is_returnable",
          "validate_and_handle",
          "reset_this_buffer",
          "__init__",
          "__repr__",
          "go_to_index",
          "new_text_and_position",
          "current_completion",
          "__init__",
          "__repr__",
          "__init__",
          "reset",
          "_set_text",
          "_set_cursor_position",
          "text",
          "text",
          "cursor_position",
          "cursor_position",
          "working_index",
          "working_index",
          "_text_changed",
          "_cursor_position_changed",
          "document",
          "document",
          "set_document",
          "save_to_undo_stack",
          "transform_lines",
          "transform_current_line",
          "transform_region",
          "cursor_left",
          "cursor_right",
          "cursor_up",
          "cursor_down",
          "auto_up",
          "auto_down",
          "delete_before_cursor",
          "set_cursor_column",
          "set_cursor_row",
          "delete_line_at_cursor",
          "delete",
          "delete_line_above_cursor",
          "delete_line_below_cursor",
          "join_next_line",
          "join_selected_lines",
          "swap_characters_before_cursor",
          "go_to_history",
          "complete_next",
          "complete_previous",
          "cancel_completion",
          "set_completions",
          "start_history_lines_completion",
          "go_to_completion",
          "apply_completion",
          "_set_history_search",
          "_history_matches",
          "history_forward",
          "history_backward",
          "yank_nth_arg",
          "yank_last_arg",
          "start_selection",
          "copy_selection",
          "cut_selection",
          "paste_clipboard_data",
          "newline",
          "insert_line_above",
          "insert_line_below",
          "insert_text",
          "undo",
          "redo",
          "validate",
          "append_to_history",
          "_search",
          "document_for_search",
          "get_search_position",
          "apply_search",
          "exit_selection",
          "open_in_editor",
          "_open_file_in_editor",
          "transform",
          "_handler",
          "delete_current_line",
          "search_once"
        ],
        "classes": [
          "EditReadOnlyBuffer",
          "AcceptAction",
          "ValidationState",
          "CompletionState",
          "YankNthArgState",
          "Buffer"
        ],
        "imports": [
          "__future__",
          "auto_suggest",
          "clipboard",
          "completion",
          "document",
          "enums",
          "filters",
          "history",
          "search_state",
          "selection",
          "utils",
          "cache",
          "validation",
          "six.moves",
          "os",
          "re",
          "shlex",
          "six",
          "subprocess",
          "tempfile",
          "time",
          "rp.r_iterm_comm",
          "rp"
        ],
        "size_lines": 1507,
        "has_main": false,
        "docstring": "Data structures for the Buffer.\nIt holds the text, cursor position, history, etc..."
      },
      "document.py": {
        "functions": [
          "_error",
          "__init__",
          "__init__",
          "__repr__",
          "text",
          "cursor_position",
          "selection",
          "current_char",
          "char_before_cursor",
          "text_before_cursor",
          "text_after_cursor",
          "current_line_before_cursor",
          "current_line_after_cursor",
          "lines",
          "_line_start_indexes",
          "lines_from_current",
          "line_count",
          "current_line",
          "current_line_above",
          "current_line_below",
          "leading_whitespace_in_current_line",
          "_get_char_relative_to_cursor",
          "on_first_line",
          "on_last_line",
          "cursor_position_row",
          "cursor_position_col",
          "_find_line_start_index",
          "translate_index_to_position",
          "translate_row_col_to_index",
          "is_cursor_at_the_end",
          "is_cursor_at_the_end_of_line",
          "has_match_at_current_position",
          "find",
          "find_all",
          "find_backwards",
          "get_word_before_cursor",
          "find_start_of_previous_word",
          "find_boundaries_of_current_word",
          "get_word_under_cursor",
          "find_next_word_beginning",
          "find_next_word_ending",
          "find_previous_word_beginning",
          "find_previous_word_ending",
          "find_next_matching_line",
          "find_previous_matching_line",
          "get_cursor_left_position",
          "get_cursor_right_position",
          "get_cursor_up_position",
          "get_cursor_down_position",
          "find_enclosing_bracket_right",
          "find_enclosing_bracket_left",
          "find_matching_bracket_position",
          "get_start_of_document_position",
          "get_end_of_document_position",
          "get_start_of_line_position",
          "get_end_of_line_position",
          "last_non_blank_of_current_line_position",
          "get_column_cursor_position",
          "selection_range",
          "selection_ranges",
          "selection_range_at_line",
          "cut_selection",
          "paste_clipboard_data",
          "empty_line_count_at_the_end",
          "start_of_paragraph",
          "end_of_paragraph",
          "insert_after",
          "insert_before",
          "get_regex",
          "match_func",
          "match_func"
        ],
        "classes": [
          "_ImmutableLineList",
          "_DocumentCache",
          "Document"
        ],
        "imports": [
          "__future__",
          "bisect",
          "re",
          "six",
          "string",
          "weakref",
          "six.moves",
          "selection",
          "clipboard"
        ],
        "size_lines": 1036,
        "has_main": false,
        "docstring": "The `Document` that implements all the text operations/querying."
      },
      "selection.py": {
        "functions": [
          "__init__",
          "__repr__"
        ],
        "classes": [
          "SelectionType",
          "PasteMode",
          "SelectionState"
        ],
        "imports": [
          "__future__"
        ],
        "size_lines": 48,
        "has_main": false,
        "docstring": "Data structures for the selection."
      },
      "buffer_mapping.py": {
        "functions": [
          "__init__",
          "current",
          "current_name",
          "previous",
          "focus",
          "push_focus",
          "pop_focus"
        ],
        "classes": [
          "BufferMapping"
        ],
        "imports": [
          "__future__",
          "enums",
          "buffer",
          "history",
          "six"
        ],
        "size_lines": 93,
        "has_main": false,
        "docstring": "The BufferMapping contains all the buffers for a command line interface, and it\nkeeps track of which buffer gets the focus."
      },
      "output.py": {
        "functions": [
          "fileno",
          "encoding",
          "write",
          "write_raw",
          "set_title",
          "clear_title",
          "flush",
          "erase_screen",
          "enter_alternate_screen",
          "quit_alternate_screen",
          "enable_mouse_support",
          "disable_mouse_support",
          "erase_end_of_line",
          "erase_down",
          "reset_attributes",
          "set_attributes",
          "disable_autowrap",
          "enable_autowrap",
          "cursor_goto",
          "cursor_up",
          "cursor_down",
          "cursor_forward",
          "cursor_backward",
          "hide_cursor",
          "show_cursor",
          "ask_for_cpr",
          "bell",
          "enable_bracketed_paste",
          "disable_bracketed_paste",
          "fileno",
          "encoding",
          "write",
          "write_raw",
          "set_title",
          "clear_title",
          "flush",
          "erase_screen",
          "enter_alternate_screen",
          "quit_alternate_screen",
          "enable_mouse_support",
          "disable_mouse_support",
          "erase_end_of_line",
          "erase_down",
          "reset_attributes",
          "set_attributes",
          "disable_autowrap",
          "enable_autowrap",
          "cursor_goto",
          "cursor_up",
          "cursor_down",
          "cursor_forward",
          "cursor_backward",
          "hide_cursor",
          "show_cursor",
          "ask_for_cpr",
          "bell",
          "enable_bracketed_paste",
          "disable_bracketed_paste",
          "get_size"
        ],
        "classes": [
          "Output",
          "DummyOutput"
        ],
        "imports": [
          "__future__",
          "abc",
          "six",
          "rp.prompt_toolkit.layout.screen"
        ],
        "size_lines": 193,
        "has_main": false,
        "docstring": "Interface for an output."
      },
      "history.py": {
        "functions": [
          "run_task",
          "append",
          "__getitem__",
          "__iter__",
          "__len__",
          "__bool__",
          "__init__",
          "append",
          "__getitem__",
          "__iter__",
          "__len__",
          "append_with_metadata",
          "__init__",
          "_load",
          "append",
          "get_all_metadata",
          "update_metadata",
          "get_metadata_entry",
          "get_parent_document",
          "append_with_metadata",
          "__getitem__",
          "__iter__",
          "__len__",
          "history_task_thread",
          "load_history",
          "task",
          "write"
        ],
        "classes": [
          "History",
          "InMemoryHistory",
          "FileHistory"
        ],
        "imports": [
          "__future__",
          "abc",
          "six",
          "document",
          "datetime",
          "os",
          "rp",
          "rp",
          "json",
          "json",
          "json",
          "time",
          "time",
          "rp",
          "rp",
          "rp"
        ],
        "size_lines": 299,
        "has_main": false,
        "docstring": null
      },
      "validation.py": {
        "functions": [
          "__init__",
          "__repr__",
          "validate",
          "__init__",
          "validate"
        ],
        "classes": [
          "ValidationError",
          "Validator",
          "ConditionalValidator"
        ],
        "imports": [
          "__future__",
          "filters",
          "abc",
          "six"
        ],
        "size_lines": 65,
        "has_main": false,
        "docstring": "Input validation for a `Buffer`.\n(Validators will be called before accepting input.)"
      },
      "filters": {
        "__init__.py": {
          "functions": [],
          "classes": [],
          "imports": [
            "__future__",
            "base",
            "cli",
            "types",
            "utils"
          ],
          "size_lines": 37,
          "has_main": false,
          "docstring": "Filters decide whether something is active or not (they decide about a boolean\nstate). This is used to enable/disable features, like key bindings, parts of\nthe layout and other stuff. For instance, we could have a `HasSearch` filter\nattached to some part of the layout, in order to show that part of the user\ninterface only while the user is searching.\n\nFilters are made to avoid having to attach callbacks to all event in order to\npropagate state. However, they are lazy, they don't automatically propagate the\nstate of what they are observing. Only when a filter is called (it's actually a\ncallable), it will calculate its value. So, its not really reactive\nprogramming, but it's made to fit for this framework.\n\nOne class of filters observe a `CommandLineInterface` instance. However, they\nare not attached to such an instance. (We have to pass this instance to the\nfilter when calling it.) The reason for this is to allow declarative\nprogramming: for key bindings, we can attach a filter to a key binding without\nknowing yet which `CommandLineInterface` instance it will observe in the end.\nExamples are `HasSearch` or `IsExiting`.\n\nAnother class of filters doesn't take anything as input. And a third class of\nfilters are universal, for instance `Always` and `Never`.\nIt is impossible to mix the first and the second class, because that would mean\nmixing filters with a different signature.\n\nFilters can be chained using ``&`` and ``|`` operations, and inverted using the\n``~`` operator, for instance::\n\n    filter = HasFocus('default') & ~ HasSelection()"
        },
        "types.py": {
          "functions": [
            "__instancecheck__",
            "__new__",
            "get"
          ],
          "classes": [
            "_FilterTypeMeta",
            "_FilterType",
            "CLIFilter",
            "SimpleFilter"
          ],
          "imports": [
            "__future__",
            "six",
            "collections",
            "weakref"
          ],
          "size_lines": 56,
          "has_main": false,
          "docstring": null
        },
        "cli.py": {
          "functions": [
            "__init__",
            "buffer_name",
            "__call__",
            "__repr__",
            "__init__",
            "buffer_name",
            "__call__",
            "__repr__",
            "__call__",
            "__repr__",
            "__call__",
            "__repr__",
            "__call__",
            "__repr__",
            "__call__",
            "__repr__",
            "__call__",
            "__repr__",
            "__call__",
            "__repr__",
            "__call__",
            "__repr__",
            "__call__",
            "__repr__",
            "__call__",
            "__repr__",
            "__call__",
            "__repr__",
            "__call__",
            "__repr__",
            "__call__",
            "__repr__",
            "__init__",
            "editing_mode",
            "__call__",
            "__repr__",
            "__call__",
            "__repr__",
            "__call__",
            "__repr__",
            "__call__",
            "__repr__",
            "__call__",
            "__repr__",
            "__call__",
            "__repr__",
            "__call__",
            "__repr__",
            "__call__",
            "__repr__",
            "__call__",
            "__repr__",
            "__call__",
            "__repr__",
            "__call__",
            "__repr__",
            "__call__",
            "__repr__"
          ],
          "classes": [
            "HasFocus",
            "InFocusStack",
            "HasSelection",
            "HasCompletions",
            "IsMultiline",
            "IsReadOnly",
            "HasValidationError",
            "HasArg",
            "HasSearch",
            "IsReturning",
            "IsAborting",
            "IsExiting",
            "IsDone",
            "RendererHeightIsKnown",
            "InEditingMode",
            "ViMode",
            "ViNavigationMode",
            "ViInsertMode",
            "ViInsertMultipleMode",
            "ViReplaceMode",
            "ViSelectionMode",
            "ViWaitingForTextObjectMode",
            "ViDigraphMode",
            "EmacsMode",
            "EmacsInsertMode",
            "EmacsSelectionMode"
          ],
          "imports": [
            "__future__",
            "base",
            "rp.prompt_toolkit.enums",
            "rp.prompt_toolkit.key_binding.vi_state",
            "rp.prompt_toolkit.cache"
          ],
          "size_lines": 396,
          "has_main": false,
          "docstring": "Filters that accept a `CommandLineInterface` as argument."
        },
        "utils.py": {
          "functions": [
            "to_simple_filter",
            "to_cli_filter"
          ],
          "classes": [],
          "imports": [
            "__future__",
            "base",
            "types"
          ],
          "size_lines": 42,
          "has_main": false,
          "docstring": null
        },
        "base.py": {
          "functions": [
            "__call__",
            "__and__",
            "__or__",
            "__invert__",
            "__bool__",
            "test_args",
            "__missing__",
            "__missing__",
            "__missing__",
            "__init__",
            "test_args",
            "__call__",
            "__repr__",
            "__init__",
            "test_args",
            "__call__",
            "__repr__",
            "__init__",
            "__call__",
            "__repr__",
            "test_args",
            "__call__",
            "__invert__",
            "__call__",
            "__invert__",
            "__init__",
            "__call__",
            "__repr__",
            "test_args"
          ],
          "classes": [
            "Filter",
            "_AndCache",
            "_OrCache",
            "_InvertCache",
            "_AndList",
            "_OrList",
            "_Invert",
            "Always",
            "Never",
            "Condition"
          ],
          "imports": [
            "__future__",
            "abc",
            "six",
            "rp.prompt_toolkit.utils"
          ],
          "size_lines": 235,
          "has_main": false,
          "docstring": null
        }
      },
      "layout": {
        "screen.py": {
          "functions": [
            "__init__",
            "__eq__",
            "__ne__",
            "__repr__",
            "__init__",
            "replace_all_tokens",
            "__init__",
            "__repr__"
          ],
          "classes": [
            "Char",
            "Screen",
            "WritePosition"
          ],
          "imports": [
            "__future__",
            "rp.prompt_toolkit.cache",
            "rp.prompt_toolkit.token",
            "rp.prompt_toolkit.utils",
            "collections"
          ],
          "size_lines": 153,
          "has_main": false,
          "docstring": null
        },
        "controls.py": {
          "functions": [
            "reset",
            "preferred_width",
            "preferred_height",
            "has_focus",
            "create_content",
            "mouse_handler",
            "move_cursor_down",
            "move_cursor_up",
            "__init__",
            "__getitem__",
            "get_height_for_line",
            "get_height_for_text",
            "__init__",
            "reset",
            "__repr__",
            "_get_tokens_cached",
            "has_focus",
            "preferred_width",
            "preferred_height",
            "create_content",
            "static",
            "mouse_handler",
            "__init__",
            "__repr__",
            "reset",
            "has_focus",
            "create_content",
            "__init__",
            "_buffer",
            "has_focus",
            "preferred_width",
            "preferred_height",
            "_get_tokens_for_line_func",
            "_create_get_processed_line_func",
            "create_content",
            "mouse_handler",
            "move_cursor_down",
            "move_cursor_up",
            "process_line",
            "get_cursor_position",
            "get_content",
            "get_static_tokens",
            "get_line",
            "get_tokens_for_line",
            "transform",
            "create_func",
            "preview_now",
            "translate_rowcol",
            "get_line",
            "source_to_display",
            "display_to_source",
            "get_processed_line"
          ],
          "classes": [
            "UIControl",
            "UIContent",
            "TokenListControl",
            "FillControl",
            "BufferControl"
          ],
          "imports": [
            "__future__",
            "abc",
            "collections",
            "six",
            "six.moves",
            "rp.prompt_toolkit.cache",
            "rp.prompt_toolkit.enums",
            "rp.prompt_toolkit.filters",
            "rp.prompt_toolkit.mouse_events",
            "rp.prompt_toolkit.search_state",
            "rp.prompt_toolkit.selection",
            "rp.prompt_toolkit.token",
            "rp.prompt_toolkit.utils",
            "lexers",
            "processors",
            "screen",
            "utils",
            "six",
            "time",
            "rp.prompt_toolkit.token"
          ],
          "size_lines": 747,
          "has_main": false,
          "docstring": "User interface Controls for the layout."
        },
        "toolbars.py": {
          "functions": [
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "create_content",
            "__init__",
            "__init__",
            "__init__",
            "get_tokens",
            "get_before_input",
            "get_line",
            "get_tokens"
          ],
          "classes": [
            "TokenListToolbar",
            "SystemToolbarControl",
            "SystemToolbar",
            "ArgToolbarControl",
            "ArgToolbar",
            "SearchToolbarControl",
            "SearchToolbar",
            "CompletionsToolbarControl",
            "CompletionsToolbar",
            "ValidationToolbarControl",
            "ValidationToolbar"
          ],
          "imports": [
            "__future__",
            "enums",
            "processors",
            "lexers",
            "dimension",
            "controls",
            "containers",
            "screen",
            "utils",
            "rp.prompt_toolkit.enums",
            "rp.prompt_toolkit.filters",
            "rp.prompt_toolkit.token"
          ],
          "size_lines": 210,
          "has_main": false,
          "docstring": null
        },
        "containers.py": {
          "functions": [
            "_window_too_small",
            "reset",
            "preferred_width",
            "preferred_height",
            "write_to_screen",
            "walk",
            "__init__",
            "preferred_width",
            "preferred_height",
            "reset",
            "write_to_screen",
            "_divide_heigths",
            "walk",
            "__init__",
            "preferred_width",
            "preferred_height",
            "reset",
            "_divide_widths",
            "write_to_screen",
            "walk",
            "__init__",
            "reset",
            "preferred_width",
            "preferred_height",
            "write_to_screen",
            "_area_is_empty",
            "walk",
            "__init__",
            "get_width",
            "get_height",
            "__repr__",
            "__init__",
            "visible_line_to_input_line",
            "cursor_position",
            "applied_scroll_offsets",
            "displayed_lines",
            "input_line_to_visible_line",
            "first_visible_line",
            "last_visible_line",
            "center_visible_line",
            "content_height",
            "full_height_visible",
            "top_visible",
            "bottom_visible",
            "vertical_scroll_percentage",
            "get_height_for_line",
            "__init__",
            "top",
            "bottom",
            "left",
            "right",
            "__repr__",
            "__init__",
            "__init__",
            "__repr__",
            "reset",
            "_get_margin_width",
            "preferred_width",
            "preferred_height",
            "_merge_dimensions",
            "_get_ui_content",
            "_get_digraph_char",
            "write_to_screen",
            "_copy_body",
            "_highlight_digraph",
            "_show_input_processor_key_buffer",
            "_highlight_cursorlines",
            "_copy_margin",
            "_scroll_when_linewrapping",
            "_scroll_without_linewrapping",
            "_mouse_handler",
            "_scroll_down",
            "_scroll_up",
            "walk",
            "__init__",
            "__repr__",
            "reset",
            "preferred_width",
            "preferred_height",
            "write_to_screen",
            "walk",
            "get_dimension_for_child",
            "get_dimension_for_child",
            "get_ui_content",
            "get_width",
            "get_content",
            "mouse_handler",
            "render_margin",
            "copy",
            "cursor_pos_to_screen_pos",
            "get_min_vertical_scroll",
            "get_max_vertical_scroll",
            "get_topmost_visible",
            "do_scroll"
          ],
          "classes": [
            "Container",
            "HSplit",
            "VSplit",
            "FloatContainer",
            "Float",
            "WindowRenderInfo",
            "ScrollOffsets",
            "ColorColumn",
            "Window",
            "ConditionalContainer"
          ],
          "imports": [
            "__future__",
            "abc",
            "six",
            "six.moves",
            "controls",
            "dimension",
            "margins",
            "screen",
            "utils",
            "rp.prompt_toolkit.cache",
            "rp.prompt_toolkit.filters",
            "rp.prompt_toolkit.mouse_events",
            "rp.prompt_toolkit.reactive",
            "rp.prompt_toolkit.token",
            "rp.prompt_toolkit.utils"
          ],
          "size_lines": 1666,
          "has_main": false,
          "docstring": "Container for the layout.\n(Containers can contain other containers or user interface controls.)"
        },
        "mouse_handlers.py": {
          "functions": [
            "__init__",
            "contains",
            "__init__",
            "__getitem__",
            "__setitem__",
            "__init__",
            "set_mouse_handler_for_range",
            "dummy_callback"
          ],
          "classes": [
            "_Rect",
            "RectDict",
            "MouseHandlers"
          ],
          "imports": [
            "__future__",
            "collections"
          ],
          "size_lines": 82,
          "has_main": false,
          "docstring": null
        },
        "__init__.py": {
          "functions": [],
          "classes": [],
          "imports": [
            "__future__",
            "containers",
            "controls"
          ],
          "size_lines": 52,
          "has_main": false,
          "docstring": "Command line layout definitions\n-------------------------------\n\nThe layout of a command line interface is defined by a Container instance.\nThere are two main groups of classes here. Containers and controls:\n\n- A container can contain other containers or controls, it can have multiple\n  children and it decides about the dimensions.\n- A control is responsible for rendering the actual content to a screen.\n  A control can propose some dimensions, but it's the container who decides\n  about the dimensions -- or when the control consumes more space -- which part\n  of the control will be visible.\n\n\nContainer classes::\n\n    - Container (Abstract base class)\n       |- HSplit (Horizontal split)\n       |- VSplit (Vertical split)\n       |- FloatContainer (Container which can also contain menus and other floats)\n       `- Window (Container which contains one actual control\n\nControl classes::\n\n    - UIControl (Abstract base class)\n       |- TokenListControl (Renders a simple list of tokens)\n       |- FillControl (Fills control with one token/character.)\n       `- BufferControl (Renders an input buffer.)\n\n\nUsually, you end up wrapping every control inside a `Window` object, because\nthat's the only way to render it in a layout.\n\nThere are some prepared toolbars which are ready to use::\n\n- SystemToolbar (Shows the 'system' input buffer, for entering system commands.)\n- ArgToolbar (Shows the input 'arg', for repetition of input commands.)\n- SearchToolbar (Shows the 'search' input buffer, for incremental search.)\n- CompletionsToolbar (Shows the completions of the current buffer.)\n- ValidationToolbar (Shows validation errors of the current buffer.)\n\nAnd one prepared menu:\n\n- CompletionsMenu"
        },
        "margins.py": {
          "functions": [
            "get_width",
            "create_margin",
            "__init__",
            "get_width",
            "create_margin",
            "__init__",
            "get_width",
            "create_margin",
            "__init__",
            "get_width",
            "create_margin",
            "__init__",
            "get_width",
            "create_margin",
            "is_scroll_button"
          ],
          "classes": [
            "Margin",
            "NumberredMargin",
            "ConditionalMargin",
            "ScrollbarMargin",
            "PromptMargin"
          ],
          "imports": [
            "__future__",
            "abc",
            "six",
            "six.moves",
            "rp.prompt_toolkit.filters",
            "rp.prompt_toolkit.token",
            "rp.prompt_toolkit.utils",
            "utils"
          ],
          "size_lines": 254,
          "has_main": false,
          "docstring": "Margin implementations for a :class:`~prompt_toolkit.layout.containers.Window`."
        },
        "utils.py": {
          "functions": [
            "token_list_len",
            "token_list_width",
            "token_list_to_text",
            "iter_token_lines",
            "split_lines",
            "explode_tokens",
            "find_window_for_buffer_name",
            "__init__",
            "append",
            "extend",
            "insert",
            "__setitem__"
          ],
          "classes": [
            "_ExplodedList"
          ],
          "imports": [
            "__future__",
            "rp.prompt_toolkit.utils",
            "rp.prompt_toolkit.token",
            "rp.prompt_toolkit.interface",
            "containers",
            "controls"
          ],
          "size_lines": 221,
          "has_main": false,
          "docstring": null
        },
        "prompt.py": {
          "functions": [
            "_get_isearch_tokens",
            "_get_arg_tokens",
            "__init__",
            "from_message",
            "apply_transformation",
            "has_focus",
            "before",
            "text",
            "after",
            "get_message_tokens"
          ],
          "classes": [
            "DefaultPrompt"
          ],
          "imports": [
            "__future__",
            "six",
            "rp.prompt_toolkit.enums",
            "rp.prompt_toolkit.token",
            "utils",
            "processors"
          ],
          "size_lines": 112,
          "has_main": false,
          "docstring": null
        },
        "processors.py": {
          "functions": [
            "apply_transformation",
            "has_focus",
            "__init__",
            "__init__",
            "_get_search_text",
            "apply_transformation",
            "apply_transformation",
            "__init__",
            "apply_transformation",
            "__init__",
            "_get_positions_to_highlight",
            "apply_transformation",
            "__init__",
            "apply_transformation",
            "__init__",
            "apply_transformation",
            "static",
            "__repr__",
            "__init__",
            "apply_transformation",
            "static",
            "__repr__",
            "__init__",
            "_get_buffer",
            "apply_transformation",
            "__init__",
            "apply_transformation",
            "__init__",
            "apply_transformation",
            "__init__",
            "apply_transformation",
            "__init__",
            "apply_transformation",
            "has_focus",
            "__repr__",
            "__init__",
            "_get_propagated_indentation",
            "apply_transformation",
            "__init__",
            "_default_get_word_at_cursor",
            "_get_positions_to_highlight",
            "apply_transformation",
            "__init__",
            "apply_transformation",
            "get_static_tokens",
            "get_static_tokens",
            "source_to_display",
            "display_to_source",
            "get_char",
            "get_char"
          ],
          "classes": [
            "Processor",
            "Transformation",
            "HighlightSearchProcessor",
            "HighlightSelectionProcessor",
            "PasswordProcessor",
            "HighlightMatchingBracketProcessor",
            "DisplayMultipleCursors",
            "BeforeInput",
            "AfterInput",
            "AppendAutoSuggestion",
            "ShowLeadingWhiteSpaceProcessor",
            "ShowTrailingWhiteSpaceProcessor",
            "TabsProcessor",
            "ConditionalProcessor",
            "IndentGuideProcessor",
            "HighlightWordOccurrencesProcessor",
            "ShowWhitespaceProcessor"
          ],
          "imports": [
            "__future__",
            "abc",
            "six",
            "six.moves",
            "re",
            "rp.prompt_toolkit.cache",
            "rp.prompt_toolkit.document",
            "rp.prompt_toolkit.enums",
            "rp.prompt_toolkit.filters",
            "rp.prompt_toolkit.layout.utils",
            "rp.prompt_toolkit.reactive",
            "rp.prompt_toolkit.token",
            "utils",
            "re",
            "keyword",
            "re"
          ],
          "size_lines": 951,
          "has_main": false,
          "docstring": "Processors are little transformation blocks that transform the token list from\na buffer before the BufferControl will render it to the screen.\n\nThey can insert tokens before or after, or highlight fragments by replacing the\ntoken types."
        },
        "menus.py": {
          "functions": [
            "_trim_text",
            "__init__",
            "has_focus",
            "preferred_width",
            "preferred_height",
            "create_content",
            "_show_meta",
            "_get_menu_width",
            "_get_menu_meta_width",
            "_get_menu_item_tokens",
            "_get_menu_item_meta_tokens",
            "mouse_handler",
            "__init__",
            "__init__",
            "reset",
            "has_focus",
            "preferred_width",
            "preferred_height",
            "create_content",
            "_get_column_width",
            "_get_menu_item_tokens",
            "mouse_handler",
            "__init__",
            "preferred_width",
            "preferred_height",
            "create_content",
            "_get_tokens",
            "grouper",
            "is_current_completion",
            "get_line",
            "scroll_left",
            "scroll_right",
            "get_line",
            "get_line"
          ],
          "classes": [
            "CompletionsMenuControl",
            "CompletionsMenu",
            "MultiColumnCompletionMenuControl",
            "MultiColumnCompletionsMenu",
            "_SelectedCompletionMetaControl"
          ],
          "imports": [
            "__future__",
            "six.moves",
            "rp.prompt_toolkit.filters",
            "rp.prompt_toolkit.mouse_events",
            "rp.prompt_toolkit.token",
            "rp.prompt_toolkit.utils",
            "containers",
            "controls",
            "dimension",
            "margins",
            "screen",
            "math"
          ],
          "size_lines": 497,
          "has_main": false,
          "docstring": null
        },
        "lexers.py": {
          "functions": [
            "longest_common_prefix",
            "lex_document",
            "__init__",
            "lex_document",
            "get_sync_start_position",
            "get_sync_start_position",
            "__init__",
            "get_sync_start_position",
            "from_pygments_lexer_cls",
            "__init__",
            "_get_lexer_class",
            "_get_lexer",
            "get_tokens_unprocessed",
            "__getattr__",
            "_get_lexer",
            "_add_system_commands_to_pterm_bash_highlighter",
            "__init__",
            "_set_new_text",
            "get_tokens_unprocessed",
            "__init__",
            "fast_bash_lexer",
            "fast_bash_tokenizer",
            "get_lexer",
            "get_tokenizer",
            "from_filename",
            "lex_document",
            "__init__",
            "_get_real_lexer",
            "lex_document",
            "__getattr__",
            "get_line",
            "get_syntax_sync",
            "find_closest_generator",
            "create_line_generator",
            "get_generator",
            "get_line",
            "get_tokens"
          ],
          "classes": [
            "Lexer",
            "SimpleLexer",
            "SyntaxSync",
            "SyncFromStart",
            "RegexSync",
            "LazyLexer",
            "LazyBashLexer",
            "FastPygmentsTokenizer",
            "PygmentsLexer",
            "LazyPygmentsLexer"
          ],
          "imports": [
            "__future__",
            "abc",
            "six",
            "six.moves",
            "rp.prompt_toolkit.token",
            "rp.prompt_toolkit.filters",
            "utils",
            "re",
            "six",
            "pygments.lexers.shell",
            "re",
            "rp",
            "bisect",
            "pygments.util",
            "pygments.lexers",
            "importlib",
            "six",
            "six",
            "pygments.lexers",
            "pygments.lexers",
            "pygments.lexers",
            "pygments.lexers"
          ],
          "size_lines": 940,
          "has_main": false,
          "docstring": "Lexer interface and implementation.\nUsed for syntax highlighting."
        },
        "untitled.py": {
          "error": "unindent does not match any outer indentation level (<unknown>, line 21)"
        },
        "dimension.py": {
          "functions": [
            "sum_layout_dimensions",
            "max_layout_dimensions",
            "__init__",
            "exact",
            "__repr__",
            "__add__"
          ],
          "classes": [
            "LayoutDimension"
          ],
          "imports": [
            "__future__"
          ],
          "size_lines": 93,
          "has_main": false,
          "docstring": "Layout dimensions are used to give the minimum, maximum and preferred\ndimensions for containers and controls."
        }
      },
      "terminal": {
        "vt100_output.py": {
          "functions": [
            "_get_closest_ansi_color",
            "_get_size",
            "__init__",
            "get_code",
            "_get",
            "__init__",
            "__missing__",
            "__init__",
            "__missing__",
            "_color_name_to_rgb",
            "_colors_to_code",
            "__init__",
            "from_pty",
            "fileno",
            "encoding",
            "write_raw",
            "write",
            "set_title",
            "clear_title",
            "erase_screen",
            "enter_alternate_screen",
            "quit_alternate_screen",
            "enable_mouse_support",
            "disable_mouse_support",
            "erase_end_of_line",
            "erase_down",
            "reset_attributes",
            "set_attributes",
            "disable_autowrap",
            "enable_autowrap",
            "enable_bracketed_paste",
            "disable_bracketed_paste",
            "cursor_goto",
            "cursor_up",
            "cursor_down",
            "cursor_forward",
            "cursor_backward",
            "hide_cursor",
            "show_cursor",
            "flush",
            "ask_for_cpr",
            "bell",
            "get",
            "get_size",
            "ansi_colors_only"
          ],
          "classes": [
            "_16ColorCache",
            "_256ColorCache",
            "_EscapeCodeCache",
            "Vt100_Output"
          ],
          "imports": [
            "__future__",
            "rp.prompt_toolkit.filters",
            "rp.prompt_toolkit.layout.screen",
            "rp.prompt_toolkit.renderer",
            "rp.prompt_toolkit.styles",
            "six.moves",
            "array",
            "errno",
            "os",
            "six",
            "fcntl",
            "termios"
          ],
          "size_lines": 633,
          "has_main": false,
          "docstring": "Output for vt100 terminals.\n\nA lot of thanks, regarding outputting of colors, goes to the Pygments project:\n(We don't rely on Pygments anymore, because many things are very custom, and\neverything has been highly optimized.)\nhttp://pygments.org/"
        },
        "__init__.py": {
          "functions": [],
          "classes": [],
          "imports": [],
          "size_lines": 1,
          "has_main": false,
          "docstring": null
        },
        "win32_output.py": {
          "functions": [
            "_coord_byval",
            "_create_ansi_color_dict",
            "__init__",
            "__init__",
            "fileno",
            "encoding",
            "write",
            "write_raw",
            "get_size",
            "_winapi",
            "get_win32_screen_buffer_info",
            "set_title",
            "clear_title",
            "erase_screen",
            "erase_down",
            "erase_end_of_line",
            "_erase",
            "reset_attributes",
            "set_attributes",
            "disable_autowrap",
            "enable_autowrap",
            "cursor_goto",
            "cursor_up",
            "cursor_down",
            "cursor_forward",
            "cursor_backward",
            "flush",
            "get_rows_below_cursor_position",
            "scroll_buffer_to_prompt",
            "enter_alternate_screen",
            "quit_alternate_screen",
            "enable_mouse_support",
            "disable_mouse_support",
            "hide_cursor",
            "show_cursor",
            "win32_refresh_window",
            "__init__",
            "_build_color_table",
            "_closest_color",
            "_color_indexes",
            "lookup_fg_color",
            "lookup_bg_color"
          ],
          "classes": [
            "NoConsoleScreenBufferError",
            "Win32Output",
            "FOREGROUND_COLOR",
            "BACKROUND_COLOR",
            "ColorLookupTable"
          ],
          "imports": [
            "__future__",
            "ctypes",
            "ctypes.wintypes",
            "rp.prompt_toolkit.renderer",
            "rp.prompt_toolkit.styles",
            "rp.prompt_toolkit.win32_types",
            "os",
            "six",
            "rp.prompt_toolkit.layout.screen"
          ],
          "size_lines": 557,
          "has_main": false,
          "docstring": null
        },
        "win32_input.py": {
          "functions": [
            "__init__",
            "close",
            "read",
            "_get_keys",
            "_is_paste",
            "_event_to_key_presses",
            "_handle_mouse",
            "__init__",
            "__enter__",
            "_patch",
            "__exit__",
            "_patch"
          ],
          "classes": [
            "ConsoleInputReader",
            "raw_mode",
            "cooked_mode"
          ],
          "imports": [
            "__future__",
            "ctypes",
            "ctypes.wintypes",
            "six.moves",
            "rp.prompt_toolkit.key_binding.input_processor",
            "rp.prompt_toolkit.keys",
            "rp.prompt_toolkit.mouse_events",
            "rp.prompt_toolkit.win32_types",
            "msvcrt",
            "os",
            "sys",
            "six"
          ],
          "size_lines": 365,
          "has_main": false,
          "docstring": null
        },
        "vt100_input.py": {
          "functions": [
            "__missing__",
            "__init__",
            "reset",
            "_start_parser",
            "_get_match",
            "_input_parser_generator",
            "_call_handler",
            "feed",
            "flush",
            "feed_and_flush",
            "__init__",
            "__enter__",
            "_patch_lflag",
            "_patch_iflag",
            "__exit__",
            "_patch_lflag",
            "_patch_iflag"
          ],
          "classes": [
            "_Flush",
            "_IsPrefixOfLongerMatchCache",
            "InputStream",
            "raw_mode",
            "cooked_mode"
          ],
          "imports": [
            "__future__",
            "os",
            "re",
            "six",
            "termios",
            "tty",
            "six.moves",
            "keys",
            "key_binding.input_processor"
          ],
          "size_lines": 521,
          "has_main": false,
          "docstring": "Parser for VT100 input stream."
        },
        "conemu_output.py": {
          "functions": [
            "__init__",
            "__getattr__"
          ],
          "classes": [
            "ConEmuOutput"
          ],
          "imports": [
            "__future__",
            "rp.prompt_toolkit.renderer",
            "win32_output",
            "vt100_output"
          ],
          "size_lines": 43,
          "has_main": false,
          "docstring": null
        }
      },
      "contrib": {
        "__init__.py": {
          "functions": [],
          "classes": [],
          "imports": [],
          "size_lines": 1,
          "has_main": false,
          "docstring": null
        },
        "completers": {
          "system.py": {
            "functions": [
              "__init__"
            ],
            "classes": [
              "SystemCompleter"
            ],
            "imports": [
              "__future__",
              "rp.prompt_toolkit.contrib.regular_languages.completion",
              "rp.prompt_toolkit.contrib.regular_languages.compiler",
              "filesystem"
            ],
            "size_lines": 57,
            "has_main": false,
            "docstring": null
          },
          "filesystem.py": {
            "functions": [
              "__init__",
              "get_completions",
              "__init__"
            ],
            "classes": [
              "PathCompleter",
              "ExecutableCompleter"
            ],
            "imports": [
              "__future__",
              "rp.prompt_toolkit.completion",
              "os"
            ],
            "size_lines": 106,
            "has_main": false,
            "docstring": null
          },
          "__init__.py": {
            "functions": [],
            "classes": [],
            "imports": [
              "__future__",
              "filesystem",
              "base",
              "system"
            ],
            "size_lines": 6,
            "has_main": false,
            "docstring": null
          },
          "base.py": {
            "functions": [
              "__init__",
              "get_completions",
              "word_matches"
            ],
            "classes": [
              "WordCompleter"
            ],
            "imports": [
              "__future__",
              "six",
              "rp.prompt_toolkit.completion"
            ],
            "size_lines": 62,
            "has_main": false,
            "docstring": null
          }
        },
        "regular_languages": {
          "compiler.py": {
            "functions": [
              "compile",
              "_compile_from_parse_tree",
              "__init__",
              "escape",
              "unescape",
              "_transform",
              "_transform_prefix",
              "match",
              "match_prefix",
              "__init__",
              "_nodes_to_regs",
              "_nodes_to_values",
              "_unescape",
              "variables",
              "trailing_input",
              "end_nodes",
              "__init__",
              "__repr__",
              "get",
              "getall",
              "__getitem__",
              "__iter__",
              "__init__",
              "__repr__",
              "create_group_func",
              "transform",
              "transform",
              "get_tuples",
              "is_none",
              "get"
            ],
            "classes": [
              "_CompiledGrammar",
              "Match",
              "Variables",
              "MatchVariable"
            ],
            "imports": [
              "__future__",
              "re",
              "six.moves",
              "regex_parser",
              "regex_parser"
            ],
            "size_lines": 419,
            "has_main": false,
            "docstring": "Compiler for a regular grammar.\n\nExample usage::\n\n    # Create and compile grammar.\n    p = compile('add \\s+ (?P<var1>[^\\s]+)  \\s+  (?P<var2>[^\\s]+)')\n\n    # Match input string.\n    m = p.match('add 23 432')\n\n    # Get variables.\n    m.variables().get('var1')  # Returns \"23\"\n    m.variables().get('var2')  # Returns \"432\"\n\n\nPartial matches are possible::\n\n    # Create and compile grammar.\n    p = compile('''\n        # Operators with two arguments.\n        ((?P<operator1>[^\\s]+)  \\s+ (?P<var1>[^\\s]+)  \\s+  (?P<var2>[^\\s]+)) |\n\n        # Operators with only one arguments.\n        ((?P<operator2>[^\\s]+)  \\s+ (?P<var1>[^\\s]+))\n    ''')\n\n    # Match partial input string.\n    m = p.match_prefix('add 23')\n\n    # Get variables. (Notice that both operator1 and operator2 contain the\n    # value \"add\".) This is because our input is incomplete, and we don't know\n    # yet in which rule of the regex we we'll end up. It could also be that\n    # `operator1` and `operator2` have a different autocompleter and we want to\n    # call all possible autocompleters that would result in valid input.)\n    m.variables().get('var1')  # Returns \"23\"\n    m.variables().get('operator1')  # Returns \"add\"\n    m.variables().get('operator2')  # Returns \"add\""
          },
          "completion.py": {
            "functions": [
              "__init__",
              "get_completions",
              "_get_completions_for_match",
              "_remove_duplicates"
            ],
            "classes": [
              "GrammarCompleter"
            ],
            "imports": [
              "__future__",
              "rp.prompt_toolkit.completion",
              "rp.prompt_toolkit.document",
              "compiler"
            ],
            "size_lines": 86,
            "has_main": false,
            "docstring": "Completer for a regular grammar."
          },
          "__init__.py": {
            "functions": [],
            "classes": [],
            "imports": [
              "compiler"
            ],
            "size_lines": 77,
            "has_main": false,
            "docstring": "Tool for expressing the grammar of an input as a regular language.\n==================================================================\n\nThe grammar for the input of many simple command line interfaces can be\nexpressed by a regular language. Examples are PDB (the Python debugger); a\nsimple (bash-like) shell with \"pwd\", \"cd\", \"cat\" and \"ls\" commands; arguments\nthat you can pass to an executable; etc. It is possible to use regular\nexpressions for validation and parsing of such a grammar. (More about regular\nlanguages: http://en.wikipedia.org/wiki/Regular_language)\n\nExample\n-------\n\nLet's take the pwd/cd/cat/ls example. We want to have a shell that accepts\nthese three commands. \"cd\" is followed by a quoted directory name and \"cat\" is\nfollowed by a quoted file name. (We allow quotes inside the filename when\nthey're escaped with a backslash.) We could define the grammar using the\nfollowing regular expression::\n\n    grammar = \\s* (\n        pwd |\n        ls |\n        (cd  \\s+ \" ([^\"]|\\.)+ \") |\n        (cat \\s+ \" ([^\"]|\\.)+ \")\n    ) \\s*\n\n\nWhat can we do with this grammar?\n---------------------------------\n\n- Syntax highlighting: We could use this for instance to give file names\n                       different colour.\n- Parse the result: .. We can extract the file names and commands by using a\n                       regular expression with named groups.\n- Input validation: .. Don't accept anything that does not match this grammar.\n                       When combined with a parser, we can also recursively do\n                       filename validation (and accept only existing files.)\n- Autocompletion: .... Each part of the grammar can have its own autocompleter.\n                       \"cat\" has to be completed using file names, while \"cd\"\n                       has to be completed using directory names.\n\nHow does it work?\n-----------------\n\nAs a user of this library, you have to define the grammar of the input as a\nregular expression. The parts of this grammar where autocompletion, validation\nor any other processing is required need to be marked using a regex named\ngroup. Like ``(?P<varname>...)`` for instance.\n\nWhen the input is processed for validation (for instance), the regex will\nexecute, the named group is captured, and the validator associated with this\nnamed group will test the captured string.\n\nThere is one tricky bit:\n\n    Ofter we operate on incomplete input (this is by definition the case for\n    autocompletion) and we have to decide for the cursor position in which\n    possible state the grammar it could be and in which way variables could be\n    matched up to that point.\n\nTo solve this problem, the compiler takes the original regular expression and\ntranslates it into a set of other regular expressions which each match prefixes\nof strings that would match the first expression. (We translate it into\nmultiple expression, because we want to have each possible state the regex\ncould be in -- in case there are several or-clauses with each different\ncompleters.)\n\n\nTODO: some examples of:\n    - How to create a highlighter from this grammar.\n    - How to create a validator from this grammar.\n    - How to create an autocompleter from this grammar.\n    - How to create a parser from this grammar."
          },
          "lexer.py": {
            "functions": [
              "__init__",
              "_get_tokens",
              "lex_document",
              "get_line"
            ],
            "classes": [
              "GrammarLexer"
            ],
            "imports": [
              "__future__",
              "rp.prompt_toolkit.document",
              "rp.prompt_toolkit.layout.lexers",
              "rp.prompt_toolkit.layout.utils",
              "rp.prompt_toolkit.token",
              "compiler",
              "six.moves"
            ],
            "size_lines": 91,
            "has_main": false,
            "docstring": "`GrammarLexer` is compatible with Pygments lexers and can be used to highlight\nthe input using a regular grammar with token annotations."
          },
          "regex_parser.py": {
            "functions": [
              "tokenize_regex",
              "parse_regex",
              "__add__",
              "__or__",
              "__init__",
              "__or__",
              "__repr__",
              "__init__",
              "__add__",
              "__repr__",
              "__init__",
              "__repr__",
              "__init__",
              "__repr__",
              "__init__",
              "__repr__",
              "__init__",
              "__repr__",
              "wrap",
              "_parse",
              "wrapped_result"
            ],
            "classes": [
              "Node",
              "Any",
              "Sequence",
              "Regex",
              "Lookahead",
              "Variable",
              "Repeat"
            ],
            "imports": [
              "__future__",
              "re"
            ],
            "size_lines": 263,
            "has_main": false,
            "docstring": "Parser for parsing a regular expression.\nTake a string representing a regular expression and return the root node of its\nparse tree.\n\nusage::\n\n    root_node = parse_regex('(hello|world)')\n\nRemarks:\n- The regex parser processes multiline, it ignores all whitespace and supports\n  multiple named groups with the same name and #-style comments.\n\nLimitations:\n- Lookahead is not supported."
          },
          "validation.py": {
            "functions": [
              "__init__",
              "validate"
            ],
            "classes": [
              "GrammarValidator"
            ],
            "imports": [
              "__future__",
              "rp.prompt_toolkit.validation",
              "rp.prompt_toolkit.document",
              "compiler"
            ],
            "size_lines": 58,
            "has_main": false,
            "docstring": "Validator for a regular langage."
          }
        },
        "validators": {
          "__init__.py": {
            "functions": [],
            "classes": [],
            "imports": [],
            "size_lines": 1,
            "has_main": false,
            "docstring": null
          },
          "base.py": {
            "functions": [
              "__init__",
              "validate"
            ],
            "classes": [
              "SentenceValidator"
            ],
            "imports": [
              "__future__",
              "rp.prompt_toolkit.validation",
              "six"
            ],
            "size_lines": 35,
            "has_main": false,
            "docstring": null
          }
        },
        "telnet": {
          "server.py": {
            "functions": [
              "_initialize_telnet",
              "__init__",
              "write",
              "flush",
              "__init__",
              "set_application",
              "feed",
              "_handle_command",
              "erase_screen",
              "send",
              "close",
              "__init__",
              "close",
              "stop",
              "run_in_executor",
              "call_from_executor",
              "add_reader",
              "remove_reader",
              "__init__",
              "create_socket",
              "run_in_executor",
              "call_from_executor",
              "_process_callbacks",
              "run",
              "_accept",
              "_handle_incoming_data",
              "get_size",
              "data_received",
              "size_received",
              "in_executor",
              "done"
            ],
            "classes": [
              "_ConnectionStdout",
              "TelnetConnection",
              "_TelnetEventLoopInterface",
              "TelnetServer"
            ],
            "imports": [
              "__future__",
              "socket",
              "select",
              "threading",
              "os",
              "fcntl",
              "six",
              "codecs",
              "rp.prompt_toolkit.enums",
              "rp.prompt_toolkit.eventloop.base",
              "rp.prompt_toolkit.interface",
              "rp.prompt_toolkit.layout.screen",
              "rp.prompt_toolkit.shortcuts",
              "rp.prompt_toolkit.terminal.vt100_input",
              "rp.prompt_toolkit.terminal.vt100_output",
              "log",
              "protocol",
              "protocol",
              "application"
            ],
            "size_lines": 408,
            "has_main": false,
            "docstring": "Telnet server.\n\nExample usage::\n\n    class MyTelnetApplication(TelnetApplication):\n        def client_connected(self, telnet_connection):\n            # Set CLI with simple prompt.\n            telnet_connection.set_application(\n                telnet_connection.create_prompt_application(...))\n\n        def handle_command(self, telnet_connection, document):\n            # When the client enters a command, just reply.\n            telnet_connection.send('You said: %r\n\n' % document.text)\n\n        ...\n\n    a = MyTelnetApplication()\n    TelnetServer(application=a, host='127.0.0.1', port=23).run()"
          },
          "log.py": {
            "functions": [],
            "classes": [],
            "imports": [
              "__future__",
              "logging"
            ],
            "size_lines": 12,
            "has_main": false,
            "docstring": "Python logger for the telnet server."
          },
          "protocol.py": {
            "functions": [
              "__init__",
              "received_data",
              "do_received",
              "dont_received",
              "will_received",
              "wont_received",
              "command_received",
              "naws",
              "negotiate",
              "_parse_coroutine",
              "feed"
            ],
            "classes": [
              "TelnetProtocolParser"
            ],
            "imports": [
              "__future__",
              "struct",
              "six",
              "log"
            ],
            "size_lines": 182,
            "has_main": false,
            "docstring": "Parser for the Telnet protocol. (Not a complete implementation of the telnet\nspecification, but sufficient for a command line interface.)\n\nInspired by `Twisted.conch.telnet`."
          },
          "__init__.py": {
            "functions": [],
            "classes": [],
            "imports": [
              "server",
              "application"
            ],
            "size_lines": 3,
            "has_main": false,
            "docstring": null
          },
          "application.py": {
            "functions": [
              "client_connected",
              "client_leaving"
            ],
            "classes": [
              "TelnetApplication"
            ],
            "imports": [
              "__future__",
              "abc",
              "six"
            ],
            "size_lines": 33,
            "has_main": false,
            "docstring": "Interface for Telnet applications."
          }
        }
      },
      "key_binding": {
        "registry.py": {
          "functions": [
            "__init__",
            "call",
            "__repr__",
            "get_bindings_for_keys",
            "get_bindings_starting_with_keys",
            "__init__",
            "_clear_cache",
            "add_binding",
            "remove_binding",
            "get_bindings_for_keys",
            "get_bindings_starting_with_keys",
            "__init__",
            "_update_cache",
            "add_binding",
            "remove_binding",
            "key_bindings",
            "_version",
            "get_bindings_for_keys",
            "get_bindings_starting_with_keys",
            "__init__",
            "_update_cache",
            "__init__",
            "_update_cache",
            "get",
            "get",
            "decorator",
            "decorator"
          ],
          "classes": [
            "_Binding",
            "BaseRegistry",
            "Registry",
            "_AddRemoveMixin",
            "ConditionalRegistry",
            "MergedRegistry"
          ],
          "imports": [
            "__future__",
            "abc",
            "rp.prompt_toolkit.cache",
            "rp.prompt_toolkit.filters",
            "rp.prompt_toolkit.keys",
            "six"
          ],
          "size_lines": 363,
          "has_main": false,
          "docstring": "Key bindings registry.\n\nA `Registry` object is a container that holds a list of key bindings. It has a\nvery efficient internal data structure for checking which key bindings apply\nfor a pressed key.\n\nTypical usage::\n\n    r = Registry()\n\n    @r.add_binding(Keys.ControlX, Keys.ControlC, filter=INSERT)\n    def handler(event):\n        # Handle ControlX-ControlC key sequence.\n        pass\n\n\nIt is also possible to combine multiple registries. We do this in the default\nkey bindings. There are some registries that contain Emacs bindings, while\nothers contain the Vi bindings. They are merged together using a\n`MergedRegistry`.\n\nWe also have a `ConditionalRegistry` object that can enable/disable a group of\nkey bindings at once."
        },
        "__init__.py": {
          "functions": [],
          "classes": [],
          "imports": [
            "__future__"
          ],
          "size_lines": 2,
          "has_main": false,
          "docstring": null
        },
        "input_processor.py": {
          "functions": [
            "profile",
            "out",
            "__init__",
            "__repr__",
            "__eq__",
            "__init__",
            "reset",
            "start_macro",
            "end_macro",
            "call_macro",
            "_get_matches",
            "_is_prefix_of_longer_match",
            "_process",
            "feed",
            "process_keys",
            "_call_handler",
            "_fix_vi_cursor_position",
            "__init__",
            "__repr__",
            "data",
            "input_processor",
            "cli",
            "current_buffer",
            "arg",
            "arg_present",
            "append_to_arg_count"
          ],
          "classes": [
            "KeyPress",
            "InputProcessor",
            "KeyPressEvent"
          ],
          "imports": [
            "__future__",
            "rp.prompt_toolkit.buffer",
            "rp.prompt_toolkit.filters.cli",
            "rp.prompt_toolkit.keys",
            "rp.prompt_toolkit.utils",
            "registry",
            "collections",
            "six.moves",
            "weakref",
            "six",
            "rp",
            "rp"
          ],
          "size_lines": 389,
          "has_main": false,
          "docstring": "An :class:`~.InputProcessor` receives callbacks for the keystrokes parsed from\nthe input in the :class:`~prompt_toolkit.inputstream.InputStream` instance.\n\nThe `InputProcessor` will according to the implemented keybindings call the\ncorrect callbacks when new key presses are feed through `feed`."
        },
        "defaults.py": {
          "functions": [
            "load_key_bindings",
            "load_key_bindings_for_prompt"
          ],
          "classes": [],
          "imports": [
            "__future__",
            "rp.prompt_toolkit.key_binding.registry",
            "rp.prompt_toolkit.key_binding.bindings.basic",
            "rp.prompt_toolkit.key_binding.bindings.emacs",
            "rp.prompt_toolkit.key_binding.bindings.vi",
            "rp.prompt_toolkit.filters"
          ],
          "size_lines": 120,
          "has_main": false,
          "docstring": "Default key bindings.::\n\n    registry = load_key_bindings()\n    app = Application(key_bindings_registry=registry)"
        },
        "vi_state.py": {
          "functions": [
            "__init__",
            "__init__",
            "reset"
          ],
          "classes": [
            "InputMode",
            "CharacterFind",
            "ViState"
          ],
          "imports": [
            "__future__"
          ],
          "size_lines": 62,
          "has_main": false,
          "docstring": null
        },
        "digraphs.py": {
          "functions": [],
          "classes": [],
          "imports": [
            "__future__"
          ],
          "size_lines": 1379,
          "has_main": false,
          "docstring": null
        },
        "manager.py": {
          "functions": [
            "__init__",
            "for_prompt",
            "reset",
            "get_vi_state"
          ],
          "classes": [
            "KeyBindingManager"
          ],
          "imports": [
            "__future__",
            "defaults",
            "rp.prompt_toolkit.filters",
            "rp.prompt_toolkit.key_binding.registry"
          ],
          "size_lines": 97,
          "has_main": false,
          "docstring": "DEPRECATED:\nUse `prompt_toolkit.key_binding.defaults.load_key_bindings` instead.\n\n:class:`KeyBindingManager` is a utility (or shortcut) for loading all the key\nbindings in a key binding registry, with a logic set of filters to quickly to\nquickly change from Vi to Emacs key bindings at runtime.\n\nYou don't have to use this, but it's practical.\n\nUsage::\n\n    manager = KeyBindingManager()\n    app = Application(key_bindings_registry=manager.registry)"
        },
        "bindings": {
          "named_commands.py": {
            "functions": [
              "register",
              "get_by_name",
              "beginning_of_line",
              "end_of_line",
              "forward_char",
              "backward_char",
              "forward_word",
              "backward_word",
              "clear_screen",
              "redraw_current_line",
              "accept_line",
              "previous_history",
              "next_history",
              "beginning_of_history",
              "end_of_history",
              "reverse_search_history",
              "end_of_file",
              "delete_char",
              "backward_delete_char",
              "self_insert",
              "transpose_chars",
              "uppercase_word",
              "downcase_word",
              "capitalize_word",
              "quoted_insert",
              "kill_line",
              "kill_word",
              "unix_word_rubout",
              "backward_kill_word",
              "delete_horizontal_space",
              "unix_line_discard",
              "yank",
              "yank_nth_arg",
              "yank_last_arg",
              "yank_pop",
              "complete",
              "menu_complete",
              "menu_complete_backward",
              "start_kbd_macro",
              "start_kbd_macro",
              "start_kbd_macro",
              "print_last_kbd_macro",
              "undo",
              "insert_comment",
              "vi_editing_mode",
              "emacs_editing_mode",
              "prefix_meta",
              "operate_and_get_next",
              "edit_and_execute",
              "decorator",
              "print_macro",
              "set_working_index",
              "change",
              "change"
            ],
            "classes": [],
            "imports": [
              "__future__",
              "rp.prompt_toolkit.enums",
              "rp.prompt_toolkit.selection",
              "six.moves",
              "six",
              "completion",
              "rp.prompt_toolkit.document",
              "rp.prompt_toolkit.enums",
              "rp.prompt_toolkit.key_binding.input_processor",
              "rp.prompt_toolkit.keys"
            ],
            "size_lines": 579,
            "has_main": false,
            "docstring": "Key bindings which are also known by GNU readline by the given names.\n\nSee: http://www.delorie.com/gnu/docs/readline/rlman_13.html"
          },
          "completion.py": {
            "functions": [
              "generate_completions",
              "display_completions_like_readline",
              "_display_completions_like_readline",
              "_create_more_application",
              "display",
              "run",
              "_",
              "_"
            ],
            "classes": [],
            "imports": [
              "__future__",
              "rp.prompt_toolkit.completion",
              "rp.prompt_toolkit.utils",
              "rp.prompt_toolkit.keys",
              "rp.prompt_toolkit.key_binding.registry",
              "math",
              "rp.prompt_toolkit.shortcuts",
              "rp.prompt_toolkit.shortcuts"
            ],
            "size_lines": 162,
            "has_main": false,
            "docstring": "Key binding handlers for displaying completions."
          },
          "scroll.py": {
            "functions": [
              "_current_window_for_event",
              "scroll_forward",
              "scroll_backward",
              "scroll_half_page_down",
              "scroll_half_page_up",
              "scroll_one_line_down",
              "scroll_one_line_up",
              "scroll_page_down",
              "scroll_page_up"
            ],
            "classes": [],
            "imports": [
              "__future__",
              "rp.prompt_toolkit.layout.utils",
              "six.moves"
            ],
            "size_lines": 186,
            "has_main": false,
            "docstring": "Key bindings, for scrolling up and down through pages.\n\nThis are separate bindings, because GNU readline doesn't have them, but\nthey are very useful for navigating through long multiline buffers, like in\nVi, Emacs, etc..."
          },
          "vi.py": {
            "functions": [
              "create_text_object_decorator",
              "create_operator_decorator",
              "load_vi_bindings",
              "load_vi_open_in_editor_bindings",
              "ryan_go_to_vim_navigation_mode",
              "load_vi_system_bindings",
              "load_vi_search_bindings",
              "load_extra_vi_page_navigation_bindings",
              "__init__",
              "selection_type",
              "sorted",
              "operator_range",
              "get_line_numbers",
              "cut",
              "text_object_decorator",
              "operator_decorator",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "in_block_selection",
              "go_to_block_selection",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "create_delete_and_change_operators",
              "create_transform_handler",
              "yank_handler",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "key_dollar",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "key_circumflex",
              "key_zero",
              "create_ci_ca_handles",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "repeat",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "digraph_symbol_1_given",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "incremental_search",
              "_",
              "_",
              "search_buffer_is_empty",
              "_",
              "__init__",
              "__call__",
              "accumulate",
              "decorator",
              "decorator",
              "get_search_state",
              "delete_or_change_operator",
              "_",
              "handler",
              "_",
              "_",
              "get_search_state",
              "_",
              "_",
              "_",
              "get_pos",
              "get_pos",
              "_",
              "_"
            ],
            "classes": [
              "TextObjectType",
              "TextObject",
              "ViStateFilter"
            ],
            "imports": [
              "__future__",
              "rp.prompt_toolkit.buffer",
              "rp.prompt_toolkit.document",
              "rp.prompt_toolkit.enums",
              "rp.prompt_toolkit.filters",
              "rp.prompt_toolkit.filters.cli",
              "rp.prompt_toolkit.key_binding.digraphs",
              "rp.prompt_toolkit.key_binding.vi_state",
              "rp.prompt_toolkit.keys",
              "rp.prompt_toolkit.layout.utils",
              "rp.prompt_toolkit.selection",
              "scroll",
              "named_commands",
              "registry",
              "six.moves",
              "codecs",
              "six",
              "string",
              "itertools"
            ],
            "size_lines": 1906,
            "has_main": false,
            "docstring": null
          },
          "__init__.py": {
            "functions": [],
            "classes": [],
            "imports": [],
            "size_lines": 1,
            "has_main": false,
            "docstring": null
          },
          "emacs.py": {
            "functions": [
              "load_emacs_bindings",
              "load_emacs_open_in_editor_bindings",
              "load_emacs_system_bindings",
              "load_emacs_search_bindings",
              "load_extra_emacs_page_navigation_bindings",
              "_",
              "_",
              "_",
              "handle_digit",
              "_",
              "_",
              "character_search",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "incremental_search",
              "_",
              "_",
              "_",
              "get_search_state"
            ],
            "classes": [],
            "imports": [
              "__future__",
              "rp.prompt_toolkit.buffer",
              "rp.prompt_toolkit.keys",
              "rp.prompt_toolkit.enums",
              "rp.prompt_toolkit.filters",
              "rp.prompt_toolkit.completion",
              "scroll",
              "named_commands",
              "registry"
            ],
            "size_lines": 453,
            "has_main": false,
            "docstring": null
          },
          "basic.py": {
            "functions": [
              "if_no_repeat",
              "load_basic_bindings",
              "load_mouse_bindings",
              "load_abort_and_exit_bindings",
              "load_basic_system_bindings",
              "load_auto_suggestion_bindings",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "_",
              "ctrl_d_condition",
              "_",
              "_"
            ],
            "classes": [],
            "imports": [
              "__future__",
              "rp.prompt_toolkit.enums",
              "rp.prompt_toolkit.filters",
              "rp.prompt_toolkit.keys",
              "rp.prompt_toolkit.layout.screen",
              "rp.prompt_toolkit.mouse_events",
              "rp.prompt_toolkit.renderer",
              "rp.prompt_toolkit.utils",
              "named_commands",
              "registry"
            ],
            "size_lines": 408,
            "has_main": false,
            "docstring": null
          }
        }
      },
      "styles": {
        "__init__.py": {
          "functions": [],
          "classes": [],
          "imports": [
            "__future__",
            "base",
            "defaults",
            "from_dict",
            "from_pygments",
            "utils",
            "pygments"
          ],
          "size_lines": 22,
          "has_main": false,
          "docstring": "Styling for prompt_toolkit applications."
        },
        "utils.py": {
          "functions": [
            "split_token_in_parts",
            "merge_attrs"
          ],
          "classes": [],
          "imports": [
            "__future__",
            "base"
          ],
          "size_lines": 46,
          "has_main": false,
          "docstring": null
        },
        "from_dict.py": {
          "functions": [
            "_colorformat",
            "style_from_dict",
            "__init__",
            "get_attrs_for_token",
            "invalidation_hash"
          ],
          "classes": [
            "_StyleFromDict"
          ],
          "imports": [
            "base",
            "defaults",
            "utils",
            "six.moves",
            "collections.abc",
            "collections"
          ],
          "size_lines": 152,
          "has_main": false,
          "docstring": "Tool for creating styles from a dictionary.\n\nThis is very similar to the Pygments style dictionary, with some additions:\n- Support for reverse and blink.\n- Support for ANSI color names. (These will map directly to the 16 terminal\n  colors.)"
        },
        "defaults.py": {
          "functions": [],
          "classes": [],
          "imports": [
            "__future__",
            "rp.prompt_toolkit.token"
          ],
          "size_lines": 105,
          "has_main": false,
          "docstring": "The default styling."
        },
        "from_pygments.py": {
          "functions": [
            "style_from_pygments",
            "__new__",
            "invalidation_hash",
            "from_defaults"
          ],
          "classes": [
            "PygmentsStyle"
          ],
          "imports": [
            "__future__",
            "base",
            "from_dict",
            "pygments.style",
            "pygments.styles.default"
          ],
          "size_lines": 78,
          "has_main": false,
          "docstring": "Adaptor for building prompt_toolkit styles, starting from a Pygments style.\n\nUsage::\n\n    from pygments.styles.tango import TangoStyle\n    style = style_from_pygments(pygments_style_cls=TangoStyle)"
        },
        "base.py": {
          "functions": [
            "get_attrs_for_token",
            "invalidation_hash",
            "__init__",
            "get_attrs_for_token",
            "invalidation_hash"
          ],
          "classes": [
            "Style",
            "DynamicStyle"
          ],
          "imports": [
            "__future__",
            "abc",
            "collections",
            "six"
          ],
          "size_lines": 87,
          "has_main": false,
          "docstring": "The base classes for the styling."
        }
      },
      "eventloop": {
        "posix_utils.py": {
          "functions": [
            "__init__",
            "read"
          ],
          "classes": [
            "PosixStdinReader"
          ],
          "imports": [
            "__future__",
            "codecs",
            "os",
            "six"
          ],
          "size_lines": 83,
          "has_main": false,
          "docstring": null
        },
        "asyncio_posix.py": {
          "functions": [
            "__init__",
            "run_as_coroutine",
            "stop",
            "close",
            "run_in_executor",
            "call_from_executor",
            "add_reader",
            "remove_reader",
            "timeout_handler",
            "received_winch",
            "stdin_ready"
          ],
          "classes": [
            "PosixAsyncioEventLoop"
          ],
          "imports": [
            "__future__",
            "terminal.vt100_input",
            "asyncio_base",
            "base",
            "callbacks",
            "posix_utils",
            "asyncio",
            "signal"
          ],
          "size_lines": 114,
          "has_main": false,
          "docstring": "Posix asyncio event loop."
        },
        "asyncio_base.py": {
          "functions": [
            "__init__",
            "reset",
            "stop",
            "timer_timeout"
          ],
          "classes": [
            "AsyncioTimeout"
          ],
          "imports": [
            "__future__"
          ],
          "size_lines": 47,
          "has_main": false,
          "docstring": "Eventloop for integration with Python3 asyncio.\n\nNote that we can't use \"yield from\", because the package should be installable\nunder Python 2.6 as well, and it should contain syntactically valid Python 2.6\ncode."
        },
        "__init__.py": {
          "functions": [],
          "classes": [],
          "imports": [],
          "size_lines": 1,
          "has_main": false,
          "docstring": null
        },
        "win32.py": {
          "functions": [
            "_wait_for_handles",
            "_create_event",
            "__init__",
            "run",
            "_ready_for_reading",
            "stop",
            "close",
            "run_in_executor",
            "call_from_executor",
            "_process_queued_calls_from_executor",
            "add_reader",
            "remove_reader",
            "start_executor",
            "ready"
          ],
          "classes": [
            "Win32EventLoop"
          ],
          "imports": [
            "__future__",
            "terminal.win32_input",
            "win32_types",
            "base",
            "inputhook",
            "utils",
            "ctypes",
            "ctypes.wintypes",
            "msvcrt",
            "threading"
          ],
          "size_lines": 188,
          "has_main": false,
          "docstring": "Win32 event loop.\n\nWindows notes:\n    - Somehow it doesn't seem to work with the 'ProactorEventLoop'."
        },
        "utils.py": {
          "functions": [
            "__init__",
            "__enter__",
            "__exit__"
          ],
          "classes": [
            "TimeIt"
          ],
          "imports": [
            "__future__",
            "time"
          ],
          "size_lines": 24,
          "has_main": false,
          "docstring": null
        },
        "asyncio_win32.py": {
          "functions": [
            "__init__",
            "run_as_coroutine",
            "stop",
            "close",
            "run_in_executor",
            "call_from_executor",
            "add_reader",
            "remove_reader"
          ],
          "classes": [
            "Win32AsyncioEventLoop"
          ],
          "imports": [
            "__future__",
            "base",
            "terminal.win32_input",
            "callbacks",
            "asyncio_base",
            "asyncio"
          ],
          "size_lines": 84,
          "has_main": false,
          "docstring": "Win32 asyncio event loop.\n\nWindows notes:\n- Somehow it doesn't seem to work with the 'ProactorEventLoop'."
        },
        "callbacks.py": {
          "functions": [
            "terminal_size_changed",
            "input_timeout",
            "feed_key"
          ],
          "classes": [
            "EventLoopCallbacks"
          ],
          "imports": [
            "__future__",
            "abc",
            "six"
          ],
          "size_lines": 30,
          "has_main": false,
          "docstring": null
        },
        "inputhook.py": {
          "functions": [
            "__init__",
            "input_is_ready",
            "fileno",
            "call_inputhook",
            "close",
            "thread"
          ],
          "classes": [
            "InputHookContext"
          ],
          "imports": [
            "__future__",
            "os",
            "threading",
            "rp.prompt_toolkit.utils",
            "select"
          ],
          "size_lines": 108,
          "has_main": false,
          "docstring": "Similar to `PyOS_InputHook` of the Python API. Some eventloops can have an\ninputhook to allow easy integration with other event loops.\n\nWhen the eventloop of prompt-toolkit is idle, it can call such a hook. This\nhook can call another eventloop that runs for a short while, for instance to\nkeep a graphical user interface responsive.\n\nIt's the responsibility of this hook to exit when there is input ready.\nThere are two ways to detect when input is ready:\n\n- Call the `input_is_ready` method periodically. Quit when this returns `True`.\n\n- Add the `fileno` as a watch to the external eventloop. Quit when file descriptor\n  becomes readable. (But don't read from it.)\n\n  Note that this is not the same as checking for `sys.stdin.fileno()`. The\n  eventloop of prompt-toolkit allows thread-based executors, for example for\n  asynchronous autocompletion. When the completion for instance is ready, we\n  also want prompt-toolkit to gain control again in order to display that.\n\nAn alternative to using input hooks, is to create a custom `EventLoop` class that\ncontrols everything."
        },
        "posix.py": {
          "functions": [
            "__init__",
            "run",
            "_ready_for_reading",
            "received_winch",
            "run_in_executor",
            "call_from_executor",
            "stop",
            "close",
            "add_reader",
            "remove_reader",
            "__init__",
            "__enter__",
            "__exit__",
            "read_from_stdin",
            "process_winch",
            "start_executor",
            "ready"
          ],
          "classes": [
            "PosixEventLoop",
            "call_on_sigwinch"
          ],
          "imports": [
            "__future__",
            "fcntl",
            "os",
            "signal",
            "threading",
            "time",
            "rp.prompt_toolkit.terminal.vt100_input",
            "rp.prompt_toolkit.utils",
            "rp.prompt_toolkit.input",
            "base",
            "callbacks",
            "inputhook",
            "posix_utils",
            "utils",
            "select"
          ],
          "size_lines": 307,
          "has_main": false,
          "docstring": null
        },
        "select.py": {
          "functions": [
            "fd_to_int",
            "select_fds",
            "register",
            "unregister",
            "select",
            "close",
            "__init__",
            "register",
            "unregister",
            "select",
            "close",
            "__init__",
            "register",
            "unregister",
            "select",
            "close",
            "__init__",
            "register",
            "unregister",
            "select",
            "close",
            "__init__",
            "register",
            "unregister",
            "select",
            "close"
          ],
          "classes": [
            "Selector",
            "AutoSelector",
            "Python3Selector",
            "PollSelector",
            "SelectSelector"
          ],
          "imports": [
            "__future__",
            "sys",
            "abc",
            "errno",
            "select",
            "six",
            "selectors",
            "selectors"
          ],
          "size_lines": 217,
          "has_main": false,
          "docstring": "Selectors for the Posix event loop."
        },
        "base.py": {
          "functions": [
            "run",
            "run_as_coroutine",
            "stop",
            "close",
            "add_reader",
            "remove_reader",
            "run_in_executor",
            "call_from_executor"
          ],
          "classes": [
            "EventLoop"
          ],
          "imports": [
            "__future__",
            "abc",
            "six"
          ],
          "size_lines": 86,
          "has_main": false,
          "docstring": null
        }
      },
      "clipboard": {
        "pyperclip.py": {
          "functions": [
            "__init__",
            "set_data",
            "get_data"
          ],
          "classes": [
            "PyperclipClipboard"
          ],
          "imports": [
            "__future__",
            "pyperclip",
            "rp.prompt_toolkit.selection",
            "base"
          ],
          "size_lines": 40,
          "has_main": false,
          "docstring": null
        },
        "__init__.py": {
          "functions": [],
          "classes": [],
          "imports": [
            "base",
            "in_memory"
          ],
          "size_lines": 9,
          "has_main": false,
          "docstring": null
        },
        "base.py": {
          "functions": [
            "__init__",
            "set_data",
            "set_text",
            "rotate",
            "get_data"
          ],
          "classes": [
            "ClipboardData",
            "Clipboard"
          ],
          "imports": [
            "__future__",
            "abc",
            "six",
            "six",
            "rp.prompt_toolkit.selection"
          ],
          "size_lines": 63,
          "has_main": false,
          "docstring": "Clipboard for command line interface."
        },
        "in_memory.py": {
          "functions": [
            "__init__",
            "set_data",
            "get_data",
            "rotate"
          ],
          "classes": [
            "InMemoryClipboard"
          ],
          "imports": [
            "base",
            "collections"
          ],
          "size_lines": 43,
          "has_main": false,
          "docstring": null
        }
      }
    },
    "rp_ptpdb": {
      "key_bindings.py": {
        "functions": [
          "load_custom_pdb_key_bindings",
          "return_text",
          "_",
          "_",
          "_",
          "_",
          "_",
          "_",
          "_",
          "_",
          "_",
          "_"
        ],
        "classes": [],
        "imports": [
          "__future__",
          "rp.prompt_toolkit.document",
          "rp.prompt_toolkit.enums",
          "rp.prompt_toolkit.filters",
          "rp.prompt_toolkit.key_binding.vi_state",
          "rp.prompt_toolkit.keys"
        ],
        "size_lines": 141,
        "has_main": false,
        "docstring": null
      },
      "style.py": {
        "functions": [
          "get_ui_style"
        ],
        "classes": [],
        "imports": [
          "__future__",
          "rp.rp_ptpython.style",
          "pygments.token"
        ],
        "size_lines": 47,
        "has_main": false,
        "docstring": null
      },
      "toolbars.py": {
        "functions": [
          "__init__",
          "__init__",
          "__init__",
          "__init__",
          "get_tokens",
          "get_tokens",
          "get_tokens",
          "get_break",
          "get_tokens"
        ],
        "classes": [
          "PdbShortcutsToolbar",
          "SourceTitlebar",
          "StackTitlebar",
          "BreakPointInfoToolbar"
        ],
        "imports": [
          "__future__",
          "pygments.token",
          "rp.prompt_toolkit.layout.toolbars",
          "rp.prompt_toolkit.layout.screen",
          "rp.prompt_toolkit.filters",
          "bdb"
        ],
        "size_lines": 155,
        "has_main": false,
        "docstring": null
      },
      "layout.py": {
        "functions": [
          "format_stack_entry",
          "__init__",
          "in_tokens",
          "in2_tokens",
          "out_tokens",
          "__init__",
          "get_tokens"
        ],
        "classes": [
          "PdbPromptStyle",
          "CallStack"
        ],
        "imports": [
          "__future__",
          "rp.prompt_toolkit.enums",
          "rp.prompt_toolkit.filters",
          "rp.prompt_toolkit.layout.controls",
          "rp.rp_ptpython.prompt_style",
          "pygments.token",
          "pygments.lexers",
          "linecache",
          "os"
        ],
        "size_lines": 129,
        "has_main": false,
        "docstring": null
      },
      "__init__.py": {
        "functions": [
          "get_line_prefix_tokens",
          "width",
          "set_trace",
          "set_trace_post_mortem",
          "set_trace_shallow",
          "__init__",
          "get_completions",
          "__init__",
          "validate",
          "__init__",
          "lex_document",
          "__init__",
          "get_width",
          "create_margin",
          "invalidation_hash",
          "__init__",
          "_create_accept_action",
          "cmdloop",
          "_get_current_pdb_commands",
          "_create_grammar",
          "_get_input",
          "_show_source_code",
          "_get_source_code_document",
          "postcmd",
          "preloop",
          "do_interact",
          "error",
          "print_stack_entry",
          "do_list",
          "_print_lines_2",
          "message",
          "handler",
          "pre_run",
          "add_margin",
          "get_line"
        ],
        "classes": [
          "DynamicCompleter",
          "DynamicValidator",
          "PdbLexer",
          "SourceCodeMargin",
          "PtPdb"
        ],
        "imports": [
          "__future__",
          "pygments.lexers",
          "pygments.token",
          "rp.prompt_toolkit.buffer",
          "rp.prompt_toolkit.completion",
          "rp.prompt_toolkit.contrib.regular_languages.completion",
          "rp.prompt_toolkit.contrib.regular_languages.validation",
          "rp.prompt_toolkit.document",
          "rp.prompt_toolkit.enums",
          "rp.prompt_toolkit.filters",
          "rp.prompt_toolkit.interface",
          "rp.prompt_toolkit.layout.containers",
          "rp.prompt_toolkit.layout.controls",
          "rp.prompt_toolkit.layout.dimension",
          "rp.prompt_toolkit.layout.lexers",
          "rp.prompt_toolkit.layout.margins",
          "rp.prompt_toolkit.layout.processors",
          "rp.prompt_toolkit.layout.utils",
          "rp.prompt_toolkit.shortcuts",
          "rp.prompt_toolkit.validation",
          "rp.rp_ptpython.completer",
          "rp.rp_ptpython.layout",
          "rp.rp_ptpython.python_input",
          "rp.rp_ptpython.repl",
          "rp.rp_ptpython.validator",
          "commands",
          "completers",
          "grammar",
          "key_bindings",
          "layout",
          "toolbars",
          "completion_hints",
          "style",
          "linecache",
          "os",
          "pdb",
          "six",
          "sys",
          "weakref",
          "rp.r_iterm_comm",
          "rp"
        ],
        "size_lines": 576,
        "has_main": false,
        "docstring": "Python debugger prompt.\nEnhanced version of Pdb, using a prompt-toolkit front-end.\n\nUsage::\n\n    from rp.prompt_toolkit.contrib.pdb import set_trace\n    set_trace()"
      },
      "grammar.py": {
        "functions": [
          "create_pdb_grammar",
          "create_grammar"
        ],
        "classes": [],
        "imports": [
          "__future__",
          "rp.prompt_toolkit.contrib.regular_languages.compiler",
          "re"
        ],
        "size_lines": 59,
        "has_main": false,
        "docstring": null
      },
      "completion_hints.py": {
        "functions": [
          "__init__",
          "_highlight_completion",
          "get_tokens",
          "highlight_char"
        ],
        "classes": [
          "CompletionHint"
        ],
        "imports": [
          "__future__",
          "pygments.token",
          "rp.prompt_toolkit.enums",
          "rp.prompt_toolkit.layout.processors",
          "rp.rp_ptpdb.commands"
        ],
        "size_lines": 39,
        "has_main": false,
        "docstring": null
      },
      "completers.py": {
        "functions": [
          "__init__",
          "get_completions",
          "__init__",
          "get_completions",
          "__init__",
          "__init__",
          "filter"
        ],
        "classes": [
          "PdbCommandsCompleter",
          "PythonFileCompleter",
          "PythonFunctionCompleter",
          "BreakPointListCompleter",
          "AliasCompleter"
        ],
        "imports": [
          "__future__",
          "rp.prompt_toolkit.completion",
          "rp.prompt_toolkit.contrib.completers",
          "rp.prompt_toolkit.document",
          "rp.rp_ptpdb.commands",
          "bdb",
          "os",
          "re",
          "sys"
        ],
        "size_lines": 110,
        "has_main": false,
        "docstring": null
      },
      "commands.py": {
        "functions": [],
        "classes": [],
        "imports": [
          "__future__"
        ],
        "size_lines": 81,
        "has_main": false,
        "docstring": null
      }
    },
    "downloads": {
      "pyflow.git": {
        "setup.py": {
          "functions": [],
          "classes": [],
          "imports": [
            "__future__",
            "__future__",
            "__future__",
            "distutils.core",
            "Cython.Build",
            "distutils.extension",
            "glob",
            "numpy"
          ],
          "size_lines": 25,
          "has_main": false,
          "docstring": null
        },
        "demo.py": {
          "functions": [],
          "classes": [],
          "imports": [
            "__future__",
            "__future__",
            "__future__",
            "numpy",
            "PIL",
            "time",
            "argparse",
            "pyflow",
            "cv2"
          ],
          "size_lines": 55,
          "has_main": false,
          "docstring": null
        }
      },
      "ml-depth-pro": {
        "src": {
          "depth_pro": {
            "__init__.py": {
              "functions": [],
              "classes": [],
              "imports": [
                "depth_pro",
                "utils"
              ],
              "size_lines": 6,
              "has_main": false,
              "docstring": "Depth Pro package."
            },
            "utils.py": {
              "functions": [
                "extract_exif",
                "fpx_from_f35",
                "load_rgb"
              ],
              "classes": [],
              "imports": [
                "logging",
                "pathlib",
                "typing",
                "numpy",
                "pillow_heif",
                "PIL",
                "pillow_heif"
              ],
              "size_lines": 113,
              "has_main": false,
              "docstring": null
            },
            "depth_pro.py": {
              "functions": [
                "create_backbone_model",
                "create_model_and_transforms",
                "__init__",
                "img_size",
                "forward",
                "infer"
              ],
              "classes": [
                "DepthProConfig",
                "DepthPro"
              ],
              "imports": [
                "__future__",
                "dataclasses",
                "typing",
                "torch",
                "torch",
                "torchvision.transforms",
                "network.decoder",
                "network.encoder",
                "network.fov",
                "network.vit_factory"
              ],
              "size_lines": 299,
              "has_main": false,
              "docstring": null
            },
            "network": {
              "decoder.py": {
                "functions": [
                  "__init__",
                  "forward",
                  "__init__",
                  "forward",
                  "__init__",
                  "forward",
                  "_residual_block",
                  "_create_block"
                ],
                "classes": [
                  "MultiresConvDecoder",
                  "ResidualBlock",
                  "FeatureFusionBlock2d"
                ],
                "imports": [
                  "__future__",
                  "typing",
                  "torch",
                  "torch"
                ],
                "size_lines": 207,
                "has_main": false,
                "docstring": "Copyright (C) 2024 Apple Inc. All Rights Reserved.\n\nDense Prediction Transformer Decoder architecture.\n\nImplements a variant of Vision Transformers for Dense Prediction, https://arxiv.org/abs/2103.13413"
              },
              "vit_factory.py": {
                "functions": [
                  "create_vit"
                ],
                "classes": [
                  "ViTConfig"
                ],
                "imports": [
                  "__future__",
                  "logging",
                  "types",
                  "dataclasses",
                  "typing",
                  "timm",
                  "torch",
                  "torch.nn",
                  "vit"
                ],
                "size_lines": 125,
                "has_main": false,
                "docstring": null
              },
              "__init__.py": {
                "functions": [],
                "classes": [],
                "imports": [],
                "size_lines": 3,
                "has_main": false,
                "docstring": "Depth Pro network blocks."
              },
              "encoder.py": {
                "functions": [
                  "__init__",
                  "_hook0",
                  "_hook1",
                  "img_size",
                  "_create_pyramid",
                  "split",
                  "merge",
                  "reshape_feature",
                  "forward",
                  "_create_project_upsample_block"
                ],
                "classes": [
                  "DepthProEncoder"
                ],
                "imports": [
                  "__future__",
                  "math",
                  "typing",
                  "torch",
                  "torch.nn",
                  "torch.nn.functional"
                ],
                "size_lines": 333,
                "has_main": false,
                "docstring": null
              },
              "vit.py": {
                "functions": [
                  "make_vit_b16_backbone",
                  "forward_features_eva_fixed",
                  "resize_vit",
                  "resize_patch_embed"
                ],
                "classes": [],
                "imports": [
                  "torch",
                  "torch.nn",
                  "torch.utils.checkpoint",
                  "timm.layers"
                ],
                "size_lines": 124,
                "has_main": false,
                "docstring": null
              },
              "fov.py": {
                "functions": [
                  "__init__",
                  "forward"
                ],
                "classes": [
                  "FOVNetwork"
                ],
                "imports": [
                  "typing",
                  "torch",
                  "torch",
                  "torch.nn"
                ],
                "size_lines": 83,
                "has_main": false,
                "docstring": null
              }
            },
            "cli": {
              "run.py": {
                "functions": [
                  "get_torch_device",
                  "run",
                  "main"
                ],
                "classes": [],
                "imports": [
                  "argparse",
                  "logging",
                  "pathlib",
                  "numpy",
                  "PIL.Image",
                  "torch",
                  "matplotlib",
                  "tqdm",
                  "depth_pro"
                ],
                "size_lines": 155,
                "has_main": true,
                "docstring": "Sample script to run DepthPro.\n\nCopyright (C) 2024 Apple Inc. All Rights Reserved."
              },
              "__init__.py": {
                "functions": [],
                "classes": [],
                "imports": [
                  "run"
                ],
                "size_lines": 5,
                "has_main": false,
                "docstring": "Depth Pro CLI and tools."
              }
            },
            "eval": {
              "boundary_metrics.py": {
                "functions": [
                  "connected_component",
                  "nms_horizontal",
                  "nms_vertical",
                  "fgbg_depth",
                  "fgbg_depth_thinned",
                  "fgbg_binary_mask",
                  "edge_recall_matting",
                  "boundary_f1",
                  "get_thresholds_and_weights",
                  "invert_depth",
                  "SI_boundary_F1",
                  "SI_boundary_Recall"
                ],
                "classes": [],
                "imports": [
                  "typing",
                  "numpy"
                ],
                "size_lines": 333,
                "has_main": false,
                "docstring": null
              }
            }
          }
        }
      },
      "pytorch_hed": {
        "datasets.py": {
          "functions": [
            "__init__",
            "__len__",
            "__getitem__"
          ],
          "classes": [
            "BsdsDataset"
          ],
          "imports": [
            "torch.utils",
            "os.path",
            "os",
            "cv2",
            "numpy"
          ],
          "size_lines": 68,
          "has_main": false,
          "docstring": null
        },
        "simple_hed.py": {
          "functions": [
            "run_hed"
          ],
          "classes": [],
          "imports": [
            "torch",
            "numpy",
            "einops",
            "networks",
            "matplotlib.pyplot",
            "PIL"
          ],
          "size_lines": 96,
          "has_main": true,
          "docstring": null
        },
        "networks.py": {
          "functions": [
            "make_bilinear_weights",
            "__init__",
            "prepare_aligned_crop",
            "forward",
            "map_inv",
            "map_compose",
            "deconv_map",
            "conv_map",
            "pool_map"
          ],
          "classes": [
            "HED"
          ],
          "imports": [
            "torch",
            "torch.nn",
            "torch.nn.functional",
            "numpy"
          ],
          "size_lines": 204,
          "has_main": false,
          "docstring": null
        },
        "hed.py": {
          "functions": [
            "main",
            "train",
            "test",
            "weighted_cross_entropy_loss",
            "weights_init"
          ],
          "classes": [],
          "imports": [
            "os",
            "sys",
            "torch",
            "argparse",
            "torchvision",
            "numpy",
            "torch.nn",
            "scipy.io",
            "PIL",
            "tqdm",
            "datetime",
            "collections",
            "torch.optim",
            "torch.utils.data",
            "os.path",
            "networks",
            "datasets",
            "utils"
          ],
          "size_lines": 303,
          "has_main": true,
          "docstring": null
        },
        "utils.py": {
          "functions": [
            "save_checkpoint",
            "load_checkpoint",
            "load_vgg16_caffe",
            "load_pretrained_caffe",
            "__init__",
            "__del__",
            "__enter__",
            "__exit__",
            "write",
            "flush",
            "close",
            "__init__",
            "reset",
            "update"
          ],
          "classes": [
            "Logger",
            "AverageMeter"
          ],
          "imports": [
            "os",
            "sys",
            "torch",
            "pickle"
          ],
          "size_lines": 106,
          "has_main": false,
          "docstring": null
        },
        "data": {
          "BSDS500": {
            "grouping": {
              "source": {
                "gpb_src": {
                  "scripts": {
                    "doc": {
                      "doxygen_comments.py": {
                        "functions": [
                          "top_comment_locations",
                          "param_comment_locations",
                          "convert_comments"
                        ],
                        "classes": [],
                        "imports": [
                          "os",
                          "string",
                          "sys"
                        ],
                        "size_lines": 198,
                        "has_main": false,
                        "docstring": null
                      }
                    },
                    "build": {
                      "depend_o.py": {
                        "functions": [
                          "hh_list_from_d",
                          "cc_from_hh",
                          "cc_list_from_hh_list",
                          "d_from_cc",
                          "o_from_cc",
                          "cc_file_exists",
                          "d_get_filename",
                          "o_list_from_d",
                          "__init__",
                          "display"
                        ],
                        "classes": [
                          "PathInfo"
                        ],
                        "imports": [
                          "os",
                          "string",
                          "sys"
                        ],
                        "size_lines": 145,
                        "has_main": false,
                        "docstring": null
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "perlin-numpy": {
        "setup.py": {
          "functions": [],
          "classes": [],
          "imports": [
            "setuptools"
          ],
          "size_lines": 16,
          "has_main": false,
          "docstring": null
        },
        "perlin_numpy": {
          "__init__.py": {
            "functions": [],
            "classes": [],
            "imports": [
              "perlin3d",
              "perlin2d"
            ],
            "size_lines": 3,
            "has_main": false,
            "docstring": null
          },
          "perlin2d.py": {
            "functions": [
              "interpolant",
              "generate_perlin_noise_2d",
              "_generate_perlin_noise_2d_numpy",
              "_generate_perlin_noise_2d_torch",
              "generate_fractal_noise_2d"
            ],
            "classes": [],
            "imports": [
              "numpy",
              "importlib.util",
              "torch"
            ],
            "size_lines": 184,
            "has_main": false,
            "docstring": null
          },
          "perlin3d.py": {
            "functions": [
              "generate_perlin_noise_3d",
              "generate_fractal_noise_3d"
            ],
            "classes": [],
            "imports": [
              "numpy",
              "perlin2d"
            ],
            "size_lines": 117,
            "has_main": false,
            "docstring": null
          }
        }
      }
    },
    "outputs": {
      "claudecode": {
        "workspace_1753405911726": {
          "editme.py": {
            "functions": [
              "get_arxiv_bibliography"
            ],
            "classes": [],
            "imports": [
              "urllib.request",
              "xml.dom"
            ],
            "size_lines": 58,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1747019939205": {
          "editme.py": {
            "functions": [],
            "classes": [],
            "imports": [],
            "size_lines": 25,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1753312820162": {
          "editme.py": {
            "error": "unexpected indent (<unknown>, line 1)"
          }
        },
        "workspace_1753405793873": {
          "editme.py": {
            "functions": [
              "get_arxiv_bibliography"
            ],
            "classes": [],
            "imports": [
              "urllib.request",
              "xml.dom"
            ],
            "size_lines": 51,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1742755757079": {
          "editme.py": {
            "error": "unexpected indent (<unknown>, line 1)"
          }
        },
        "workspace_1743390165194": {
          "editme.py": {
            "functions": [
              "varargs",
              "longest_common_prefix",
              "longest_common_suffix",
              "longest_common_substring",
              "wrapper"
            ],
            "classes": [],
            "imports": [
              "functools",
              "pylcs"
            ],
            "size_lines": 101,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1747852022258": {
          "editme.py": {
            "functions": [],
            "classes": [],
            "imports": [
              "gdown"
            ],
            "size_lines": 11,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1747592634160": {
          "editme.py": {
            "error": "unexpected indent (<unknown>, line 1)"
          }
        },
        "workspace_1743052796150": {
          "editme.py": {
            "functions": [],
            "classes": [],
            "imports": [],
            "size_lines": 1,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1743051703421": {
          "editme.py": {
            "functions": [],
            "classes": [],
            "imports": [],
            "size_lines": 1,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1752328252268": {
          "editme.py": {
            "functions": [
              "_skia_get_text_alignment",
              "_skia_get_text_decoration_style",
              "_skia_get_text_decoration_type",
              "_skia_get_text_decoration_mode",
              "skia_text_to_image"
            ],
            "classes": [],
            "imports": [
              "skia",
              "numpy",
              "math",
              "skia",
              "skia",
              "skia",
              "skia"
            ],
            "size_lines": 185,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1750208977285": {
          "editme.py": {
            "functions": [
              "add_drift",
              "zoom_tracks",
              "horz_mirror_tracks",
              "horz_mirror_origins",
              "reverse_tracks"
            ],
            "classes": [],
            "imports": [
              "torch",
              "torch",
              "torch"
            ],
            "size_lines": 126,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1742716219637": {
          "editme.py": {
            "error": "':' expected after dictionary key (<unknown>, line 1)"
          }
        },
        "workspace_1750373011106": {
          "editme.py": {
            "functions": [
              "_skia_text_to_image"
            ],
            "classes": [],
            "imports": [
              "skia"
            ],
            "size_lines": 114,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1742719016495": {
          "editme.py": {
            "functions": [
              "_string_diff_helper",
              "dunk_string_diff",
              "view_string_diff"
            ],
            "classes": [],
            "imports": [
              "os",
              "subprocess",
              "ydiff",
              "subprocess",
              "ydiff",
              "subprocess"
            ],
            "size_lines": 46,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1750465207026": {
          "editme.py": {
            "functions": [
              "index_linterp"
            ],
            "classes": [],
            "imports": [
              "numpy"
            ],
            "size_lines": 49,
            "has_main": false,
            "docstring": null
          }
        },
        "streaming_video": {
          "frame_level_codec.py": {
            "functions": [
              "__init__",
              "encode_frame",
              "_extract_sps_pps",
              "close",
              "__init__",
              "decode_chunk",
              "flush",
              "close",
              "__init__",
              "push_bytes",
              "flush",
              "close"
            ],
            "classes": [
              "FrameLevelH264Encoder",
              "FrameLevelH264Decoder",
              "VideoDecoderBytes"
            ],
            "imports": [
              "numpy",
              "struct",
              "av",
              "io"
            ],
            "size_lines": 306,
            "has_main": true,
            "docstring": null
          },
          "streaming_demo.py": {
            "functions": [
              "main",
              "__init__",
              "generate_and_encode",
              "_generate_frame",
              "decode_and_display",
              "_add_stats_overlay",
              "run_demo"
            ],
            "classes": [
              "StreamingDemo"
            ],
            "imports": [
              "cv2",
              "numpy",
              "time",
              "threading",
              "queue",
              "frame_level_codec",
              "rp"
            ],
            "size_lines": 215,
            "has_main": true,
            "docstring": null
          }
        },
        "workspace_1749923645487": {
          "editme.py": {
            "functions": [],
            "classes": [],
            "imports": [],
            "size_lines": 1,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1743052073411": {
          "editme.py": {
            "functions": [],
            "classes": [],
            "imports": [],
            "size_lines": 1,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1745914812939": {
          "editme.py": {
            "functions": [
              "add_noise",
              "get_velocity",
              "get_epsilon",
              "get_clean_sample",
              "_reconcile_hidden_overlays_initial",
              "reconcile_hidden_overlays",
              "demo_reconcile_hidden_overlays",
              "get_pipeline",
              "__init__",
              "timesteps",
              "latent_shape",
              "alphas_cumprod",
              "get_text_embedding",
              "_encode_image",
              "encode_image",
              "decode_latent",
              "decode_latents",
              "encode_images",
              "correct_encoding_order1",
              "pred_noise",
              "_get_time_ids",
              "random_latent",
              "random_latents",
              "sample",
              "apply_image_func_to_clean_latent",
              "apply_image_func_to_noisy_latent",
              "image_filter",
              "sample",
              "image_filter",
              "image_filter",
              "reconcile_targets",
              "num_derived_images",
              "sample",
              "reconcile_targets",
              "reconcile_targets",
              "identity",
              "flip_image"
            ],
            "classes": [
              "Diffusion",
              "ImageFilterDiffusion",
              "GrayscaleFilterDiffusion",
              "PixelArtDiffusion",
              "DiffusionIllusion",
              "FlipIllusion",
              "HiddenOverlayIllusion"
            ],
            "imports": [
              "diffusers",
              "diffusers",
              "torch",
              "torch.nn",
              "inspect",
              "tqdm",
              "rp"
            ],
            "size_lines": 797,
            "has_main": true,
            "docstring": null
          }
        },
        "workspace_1747541015488": {
          "editme.py": {
            "functions": [
              "quality_imports",
              "__init__",
              "visit_ImportFrom",
              "visit_Name"
            ],
            "classes": [
              "ImportTransformer"
            ],
            "imports": [
              "ast"
            ],
            "size_lines": 59,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1753309527039": {
          "editme.py": {
            "functions": [
              "add_noise",
              "get_velocity",
              "get_epsilon",
              "get_clean_sample",
              "demo_ddim_inversion",
              "edict_inversion_demo",
              "_reconcile_hidden_overlays_initial",
              "reconcile_hidden_overlays",
              "demo_reconcile_hidden_overlays",
              "get_pipeline",
              "__init__",
              "timesteps",
              "alphas_cumprod",
              "get_text_embedding",
              "_encode_image",
              "encode_image",
              "encode_if_image",
              "decode_latent",
              "decode_latents",
              "encode_images",
              "correct_encoding_order1",
              "pred_noise",
              "inverse_scheduler",
              "ddim_inversion",
              "edict_inversion",
              "sample",
              "roll_image",
              "random_roll",
              "sample",
              "demo",
              "apply_image_func_to_clean_latent",
              "apply_image_func_to_noisy_latent",
              "image_filter",
              "sample",
              "image_filter",
              "image_filter",
              "__init__",
              "primary_diffusion",
              "reconcile_targets",
              "num_derived_images",
              "encode_images_in_parallel",
              "decode_latents_in_parallel",
              "edict_inversion_in_parallel",
              "ddim_inversion_in_parallel",
              "sample",
              "reconcile_targets",
              "reconcile_targets",
              "noise_mixing_layer",
              "_get_alpha_and_beta",
              "noise_step",
              "encode",
              "decode",
              "edict_invert",
              "ddim_invert",
              "flip_image",
              "pred",
              "blend_noise",
              "mix_new_noise"
            ],
            "classes": [
              "Diffusion",
              "SeamlessGenerator",
              "ImageFilterDiffusion",
              "GrayscaleFilterDiffusion",
              "PixelArtDiffusion",
              "DiffusionIllusion",
              "FlipIllusion",
              "HiddenOverlayIllusion"
            ],
            "imports": [
              "inspect",
              "functools",
              "torch",
              "torch.nn",
              "diffusers",
              "tqdm",
              "rp",
              "torch"
            ],
            "size_lines": 1068,
            "has_main": true,
            "docstring": null
          }
        },
        "workspace_1743314742540": {
          "editme.py": {
            "functions": [
              "_terminal_move_cursor_to_top_left",
              "_terminal_move_cursor_to_bottom_and_new_line"
            ],
            "classes": [],
            "imports": [],
            "size_lines": 17,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1747541997936": {
          "editme.py": {
            "functions": [
              "qualify_imports",
              "helper",
              "__init__",
              "visit_ImportFrom",
              "__init__",
              "leave_ImportFrom",
              "leave_Name"
            ],
            "classes": [
              "ImportCollector",
              "ImportTransformer"
            ],
            "imports": [
              "libcst"
            ],
            "size_lines": 107,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1742724893011": {
          "editme.py": {
            "functions": [],
            "classes": [],
            "imports": [],
            "size_lines": 1,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1747859729653": {
          "editme.py": {
            "functions": [],
            "classes": [],
            "imports": [],
            "size_lines": 1,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1743052440230": {
          "editme.py": {
            "functions": [],
            "classes": [],
            "imports": [],
            "size_lines": 1,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1744511547246": {
          "editme.py": {
            "functions": [
              "convert_audio_file"
            ],
            "classes": [],
            "imports": [
              "subprocess",
              "os"
            ],
            "size_lines": 56,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1748836870966": {
          "editme.py": {
            "functions": [
              "dot",
              "min_pos"
            ],
            "classes": [],
            "imports": [
              "rp"
            ],
            "size_lines": 27,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1747770105159": {
          "editme.py": {
            "functions": [
              "laplacian_blend"
            ],
            "classes": [],
            "imports": [
              "cv2",
              "numpy"
            ],
            "size_lines": 52,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1743306470650": {
          "editme.py": {
            "functions": [
              "_eta",
              "_extract_archive_via_pyunpack",
              "extract_zip_file",
              "__init__",
              "__call__",
              "__iter__",
              "__len__",
              "fansi_progress",
              "display_eta",
              "out"
            ],
            "classes": [
              "eta"
            ],
            "imports": [
              "datetime",
              "pyunpack",
              "zipfile",
              "tarfile"
            ],
            "size_lines": 226,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1743053834815": {
          "editme.py": {
            "functions": [
              "new_cursor_pos",
              "insert_cursor",
              "test_cursor_movement"
            ],
            "classes": [],
            "imports": [
              "difflib"
            ],
            "size_lines": 154,
            "has_main": true,
            "docstring": null
          }
        },
        "workspace_1743052701880": {
          "editme.py": {
            "functions": [],
            "classes": [],
            "imports": [],
            "size_lines": 1,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1753405693150": {
          "editme.py": {
            "functions": [],
            "classes": [],
            "imports": [
              "sys",
              "string",
              "urllib.request",
              "urllib.parse",
              "urllib.error",
              "xml.dom"
            ],
            "size_lines": 55,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1747772366997": {
          "editme.py": {
            "functions": [
              "laplacian_blend"
            ],
            "classes": [],
            "imports": [
              "cv2",
              "numpy"
            ],
            "size_lines": 127,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1747771064518": {
          "editme.py": {
            "functions": [
              "laplacian_blend"
            ],
            "classes": [],
            "imports": [
              "cv2",
              "numpy"
            ],
            "size_lines": 81,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1743057507832": {
          "editme.py": {
            "functions": [
              "clear_screen",
              "rgb_to_ansi",
              "hsv_to_rgb",
              "rainbow_color",
              "get_ascii_text",
              "main",
              "__init__",
              "update",
              "explode",
              "is_dead",
              "render",
              "__init__",
              "render"
            ],
            "classes": [
              "Firework",
              "WavyText"
            ],
            "imports": [
              "math",
              "os",
              "random",
              "time",
              "typing"
            ],
            "size_lines": 244,
            "has_main": true,
            "docstring": null
          }
        },
        "workspace_1752046758180": {
          "editme.py": {
            "functions": [
              "skia_text_to_image"
            ],
            "classes": [],
            "imports": [
              "skia",
              "numpy",
              "math"
            ],
            "size_lines": 67,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1747773406843": {
          "editme.py": {
            "functions": [
              "laplacian_blend"
            ],
            "classes": [],
            "imports": [
              "cv2",
              "numpy"
            ],
            "size_lines": 86,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1747070247418": {
          "editme.py": {
            "functions": [],
            "classes": [],
            "imports": [],
            "size_lines": 1,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1743054052760": {
          "editme.py": {
            "error": "'utf-8' codec can't decode byte 0xb7 in position 3882: invalid start byte"
          }
        },
        "workspace_1743096784494": {
          "editme.py": {
            "functions": [],
            "classes": [],
            "imports": [],
            "size_lines": 1,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1747594512275": {
          "editme.py": {
            "functions": [
              "seed_everything"
            ],
            "classes": [],
            "imports": [
              "random",
              "numpy",
              "torch",
              "tensorflow",
              "jax",
              "jax.random",
              "sklearn",
              "pytorch_lightning",
              "transformers"
            ],
            "size_lines": 63,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1750208891767": {
          "editme.py": {
            "functions": [
              "add_drift",
              "zoom_tracks",
              "horz_mirror_tracks",
              "horz_mirror_origins",
              "reverse_tracks"
            ],
            "classes": [],
            "imports": [
              "torch",
              "torch",
              "torch"
            ],
            "size_lines": 112,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1752328944299": {
          "editme.py": {
            "functions": [
              "_skia_get_text_alignment",
              "_skia_get_text_decoration_style",
              "_skia_get_text_decoration_type",
              "_skia_get_text_decoration_mode",
              "skia_text_to_image"
            ],
            "classes": [],
            "imports": [
              "skia",
              "numpy",
              "math",
              "skia",
              "skia",
              "skia",
              "skia"
            ],
            "size_lines": 250,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1744541823520": {
          "editme.py": {
            "functions": [
              "closure"
            ],
            "classes": [],
            "imports": [],
            "size_lines": 27,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1742724796006": {
          "editme.py": {
            "error": "invalid syntax (<unknown>, line 1)"
          }
        },
        "workspace_1745533943882": {
          "editme.py": {
            "error": "positional argument follows keyword argument (<unknown>, line 50)"
          }
        },
        "workspace_1750508061181": {
          "thread_isolated_wrapper.py": {
            "functions": [
              "test_thread_isolation",
              "__init__",
              "__getattribute__",
              "__setattr__",
              "__hasattr__",
              "_set_thread_override",
              "_clear_thread_override",
              "__init__",
              "__enter__",
              "__exit__",
              "thread_test",
              "__init__"
            ],
            "classes": [
              "ThreadIsolatedObject",
              "ThreadCompatibleTemporarilySetAttr",
              "TestObj"
            ],
            "imports": [
              "threading",
              "editme",
              "time"
            ],
            "size_lines": 145,
            "has_main": true,
            "docstring": null
          },
          "test_thread_compatibility.py": {
            "functions": [
              "thread_test",
              "main",
              "__init__"
            ],
            "classes": [
              "TestObj"
            ],
            "imports": [
              "threading",
              "time",
              "editme"
            ],
            "size_lines": 68,
            "has_main": true,
            "docstring": null
          },
          "debug_inheritance.py": {
            "functions": [
              "simple_test",
              "__init__",
              "child_thread",
              "parent_thread"
            ],
            "classes": [
              "TestObj"
            ],
            "imports": [
              "threading",
              "time",
              "editme"
            ],
            "size_lines": 52,
            "has_main": true,
            "docstring": null
          },
          "debug_methods.py": {
            "functions": [
              "test_method_debug",
              "__init__",
              "calculate",
              "get_multiplier"
            ],
            "classes": [
              "MethodObj"
            ],
            "imports": [
              "editme",
              "traceback"
            ],
            "size_lines": 34,
            "has_main": true,
            "docstring": null
          },
          "debug_edge_cases.py": {
            "functions": [
              "debug_property_issue",
              "debug_circular_issue",
              "__init__",
              "value",
              "value",
              "get_internal",
              "__init__"
            ],
            "classes": [
              "PropertyObj",
              "CircularObj"
            ],
            "imports": [
              "editme"
            ],
            "size_lines": 69,
            "has_main": true,
            "docstring": null
          },
          "test_final.py": {
            "functions": [
              "test_thread_inheritance",
              "test_nested_inheritance",
              "test_property_and_method_support",
              "__init__",
              "computed",
              "doubled",
              "get_value",
              "child_thread",
              "parent_thread",
              "grandchild_thread",
              "child_thread",
              "parent_thread"
            ],
            "classes": [
              "TestObj"
            ],
            "imports": [
              "threading",
              "time",
              "editme_final"
            ],
            "size_lines": 191,
            "has_main": true,
            "docstring": null
          },
          "test_thread_inheritance.py": {
            "functions": [
              "test_current_behavior",
              "test_nested_thread_tree",
              "test_thread_inheritance_with_timing",
              "__init__",
              "child_thread",
              "parent_thread",
              "deep_nested_thread",
              "timed_child",
              "timed_parent"
            ],
            "classes": [
              "TestObj"
            ],
            "imports": [
              "threading",
              "time",
              "editme"
            ],
            "size_lines": 191,
            "has_main": true,
            "docstring": null
          },
          "stress_test.py": {
            "functions": [
              "test_nested_contexts",
              "test_exception_handling",
              "test_concurrent_access_chaos",
              "test_attribute_types",
              "test_method_calls",
              "test_thread_isolation_comprehensive",
              "test_memory_leaks",
              "test_edge_cases",
              "main",
              "__init__",
              "chaos_thread",
              "isolated_thread",
              "__init__",
              "__init__",
              "calculate",
              "get_multiplier"
            ],
            "classes": [
              "TestObj",
              "ComplexObj",
              "MethodObj"
            ],
            "imports": [
              "threading",
              "time",
              "random",
              "editme"
            ],
            "size_lines": 364,
            "has_main": true,
            "docstring": null
          },
          "editme_final.py": {
            "functions": [
              "_patch_threading",
              "_get_thread_value",
              "_set_thread_value",
              "_clear_thread_values",
              "_patch_object",
              "__init__",
              "__enter__",
              "__exit__",
              "new_thread_init",
              "new_thread_run",
              "thread_aware_getattribute",
              "method_wrapper"
            ],
            "classes": [
              "TemporarilySetAttr"
            ],
            "imports": [
              "threading",
              "weakref",
              "types"
            ],
            "size_lines": 236,
            "has_main": false,
            "docstring": null
          },
          "test_summary.py": {
            "functions": [
              "demonstrate_working_functionality",
              "demonstrate_limitations",
              "worker_thread",
              "__init__",
              "process_data",
              "__init__",
              "result",
              "__init__"
            ],
            "classes": [
              "ExampleObject",
              "PropertyObj",
              "RefObj"
            ],
            "imports": [
              "editme",
              "threading",
              "time"
            ],
            "size_lines": 131,
            "has_main": true,
            "docstring": "COMPREHENSIVE TEST SUMMARY FOR TemporarilySetAttr\n\n\u2705 PASSED TESTS (Core Functionality):\n- Thread isolation: Multiple threads can use the same object with different temporary values\n- Nested contexts: Deep nesting works correctly with proper restoration\n- Exception handling: Cleanup happens even when exceptions occur\n- Method calls: Methods see overridden attributes correctly\n- Various attribute types: strings, numbers, lists, dicts, etc.\n- Memory management: No leaks detected with extensive usage\n- Massive concurrency: 100+ threads work correctly\n- Edge cases: Empty contexts, same values, weird attribute names\n- Stress testing: Thousands of operations complete successfully\n\n\u26a0\ufe0f KNOWN LIMITATIONS:\n1. Properties: Property getters/setters don't see overridden attributes they depend on\n   - Properties are descriptors that bypass our __getattribute__ interception\n   - Workaround: Override the property itself if needed\n\n2. Object references: Referenced objects aren't automatically wrapped\n   - If obj1.reference = obj2, accessing obj1.reference.attr gets unwrapped obj2\n   - Workaround: Manually wrap referenced objects if thread isolation is needed\n\n\ud83c\udfaf CONCLUSION:\nThe implementation is robust and thread-compatible for its intended use case:\ntemporarily overriding object attributes with per-thread isolation.\n\nThe limitations are edge cases that don't affect typical usage patterns."
          },
          "editme.py": {
            "functions": [
              "_patched_thread_init",
              "_patched_thread_run",
              "register_child_thread",
              "set_thread_values",
              "get_inherited_values",
              "cleanup_thread",
              "__init__",
              "__getattribute__",
              "_get_effective_value",
              "_get_all_effective_overrides",
              "__setattr__",
              "__hasattr__",
              "_set_thread_override",
              "_clear_thread_override",
              "__init__",
              "__enter__",
              "__exit__",
              "method_wrapper"
            ],
            "classes": [
              "_ThreadInheritance",
              "_ThreadIsolatedWrapper",
              "TemporarilySetAttr"
            ],
            "imports": [
              "threading",
              "weakref"
            ],
            "size_lines": 316,
            "has_main": false,
            "docstring": null
          },
          "editme_v2.py": {
            "functions": [
              "_setup_thread_tracking",
              "_get_inherited_values",
              "_set_thread_values",
              "_cleanup_thread",
              "__init__",
              "_create_wrapper",
              "__enter__",
              "__exit__",
              "patched_init",
              "patched_run",
              "__init__",
              "__getattribute__",
              "__setattr__",
              "__hasattr__",
              "method_wrapper"
            ],
            "classes": [
              "TemporarilySetAttr",
              "ThreadAwareWrapper"
            ],
            "imports": [
              "threading",
              "weakref",
              "types"
            ],
            "size_lines": 251,
            "has_main": false,
            "docstring": null
          },
          "extreme_test.py": {
            "functions": [
              "test_recursive_method_calls",
              "test_property_access",
              "test_circular_references",
              "test_massive_thread_storm",
              "test_memory_pressure",
              "test_weird_attribute_names",
              "test_thread_cleanup_on_exception",
              "main",
              "storm_thread",
              "dying_thread",
              "__init__",
              "recursive_calc",
              "__init__",
              "value",
              "value",
              "get_internal",
              "__init__",
              "__init__",
              "__init__"
            ],
            "classes": [
              "RecursiveObj",
              "PropertyObj",
              "CircularObj",
              "LargeObj",
              "WeirdObj"
            ],
            "imports": [
              "threading",
              "time",
              "gc",
              "editme",
              "traceback"
            ],
            "size_lines": 291,
            "has_main": true,
            "docstring": null
          },
          "test_v2.py": {
            "functions": [
              "test_basic_functionality",
              "test_property_support",
              "test_thread_inheritance",
              "test_nested_inheritance",
              "test_circular_references",
              "__init__",
              "computed",
              "doubled",
              "get_value",
              "child_thread",
              "parent_thread",
              "grandchild_thread",
              "child_thread",
              "parent_thread",
              "__init__"
            ],
            "classes": [
              "TestObj",
              "CircularObj"
            ],
            "imports": [
              "threading",
              "time",
              "editme_v2",
              "traceback"
            ],
            "size_lines": 197,
            "has_main": true,
            "docstring": null
          }
        },
        "workspace_1747287009428": {
          "editme.py": {
            "functions": [
              "save_safetensors"
            ],
            "classes": [],
            "imports": [
              "os",
              "rp.r",
              "safetensors.torch"
            ],
            "size_lines": 49,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1747071502905": {
          "editme.py": {
            "functions": [
              "printer",
              "run_as_new_thread",
              "get_id",
              "interrupt"
            ],
            "classes": [],
            "imports": [
              "time",
              "threading",
              "ctypes"
            ],
            "size_lines": 67,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1747377892764": {
          "editme.py": {
            "functions": [],
            "classes": [],
            "imports": [],
            "size_lines": 1,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1752188317573": {
          "frame_level_codec.py": {
            "functions": [
              "__init__",
              "encode_frame",
              "_extract_sps_pps",
              "close",
              "__init__",
              "decode_chunk",
              "flush",
              "close",
              "__init__",
              "push_bytes",
              "flush",
              "close"
            ],
            "classes": [
              "FrameLevelH264Encoder",
              "FrameLevelH264Decoder",
              "VideoDecoderBytes"
            ],
            "imports": [
              "numpy",
              "struct",
              "av",
              "io"
            ],
            "size_lines": 267,
            "has_main": false,
            "docstring": null
          },
          "profile_demo.py": {
            "functions": [
              "profile_encoding",
              "profile_frame_generation",
              "profile_with_cProfile",
              "generate_complex_frame",
              "run_encoding_test"
            ],
            "classes": [],
            "imports": [
              "time",
              "cProfile",
              "pstats",
              "numpy",
              "frame_level_codec"
            ],
            "size_lines": 152,
            "has_main": true,
            "docstring": null
          },
          "streaming_demo.py": {
            "functions": [
              "main",
              "__init__",
              "generate_and_encode",
              "_generate_motion_frame",
              "decode_and_display",
              "_add_stats_overlay",
              "run_demo"
            ],
            "classes": [
              "StreamingDemo"
            ],
            "imports": [
              "cv2",
              "numpy",
              "time",
              "threading",
              "queue",
              "frame_level_codec"
            ],
            "size_lines": 232,
            "has_main": true,
            "docstring": null
          }
        },
        "workspace_1748668743888": {
          "editme.py": {
            "functions": [
              "_parse_origin",
              "_get_bilinear_corners_and_weights",
              "_get_bounding_box",
              "_stamp_bilinear",
              "_stamp_nearest",
              "_stamp_with_wrapping",
              "_get_proportional_offset",
              "stamp_tensor",
              "test_stamp_tensor",
              "generate_wrapped_offsets"
            ],
            "classes": [],
            "imports": [
              "math",
              "numpy"
            ],
            "size_lines": 623,
            "has_main": true,
            "docstring": null
          }
        },
        "workspace_1747022490996": {
          "editme.py": {
            "functions": [
              "download_url_to_cache"
            ],
            "classes": [],
            "imports": [
              "shutil",
              "shutil",
              "os"
            ],
            "size_lines": 57,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1750274604957": {
          "editme.py": {
            "functions": [
              "get_text_fonts",
              "get_font_supported_chars",
              "skia_text_to_image",
              "get_best_font_for_char"
            ],
            "classes": [],
            "imports": [
              "rp",
              "skia",
              "skia"
            ],
            "size_lines": 253,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1744541383461": {
          "editme.py": {
            "functions": [],
            "classes": [],
            "imports": [],
            "size_lines": 19,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1742725541494": {
          "editme.py": {
            "functions": [
              "_run_claude_code",
              "commit_thread"
            ],
            "classes": [],
            "imports": [
              "subprocess"
            ],
            "size_lines": 71,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1747772012375": {
          "editme.py": {
            "functions": [
              "laplacian_blend"
            ],
            "classes": [],
            "imports": [
              "cv2",
              "numpy"
            ],
            "size_lines": 129,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1743054930290": {
          "editme.py": {
            "functions": [
              "_disable_terminal_mouse_reporting"
            ],
            "classes": [],
            "imports": [],
            "size_lines": 19,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1747790367280": {
          "editme.py": {
            "functions": [
              "add_noise",
              "get_velocity",
              "get_epsilon",
              "get_clean_sample",
              "_reconcile_hidden_overlays_initial",
              "reconcile_hidden_overlays",
              "demo_reconcile_hidden_overlays",
              "get_pipeline",
              "__init__",
              "timesteps",
              "alphas_cumprod",
              "get_text_embedding",
              "_encode_image",
              "ddim_inversion",
              "encode_image",
              "decode_latent",
              "decode_latents",
              "encode_images",
              "correct_encoding_order1",
              "pred_noise",
              "sample",
              "roll_image",
              "random_roll",
              "sample",
              "apply_image_func_to_clean_latent",
              "apply_image_func_to_noisy_latent",
              "image_filter",
              "sample",
              "image_filter",
              "image_filter",
              "__init__",
              "primary_diffusion",
              "reconcile_targets",
              "num_derived_images",
              "encode_images_in_parallel",
              "decode_latents_in_parallel",
              "sample",
              "reconcile_targets",
              "reconcile_targets",
              "encode",
              "decode",
              "flip_image",
              "pred"
            ],
            "classes": [
              "Diffusion",
              "SeamlessGenerator",
              "ImageFilterDiffusion",
              "GrayscaleFilterDiffusion",
              "PixelArtDiffusion",
              "DiffusionIllusion",
              "FlipIllusion",
              "HiddenOverlayIllusion"
            ],
            "imports": [
              "diffusers",
              "diffusers",
              "torch",
              "torch.nn",
              "inspect",
              "tqdm",
              "rp"
            ],
            "size_lines": 880,
            "has_main": true,
            "docstring": null
          }
        },
        "workspace_1748701095555": {
          "editme.py": {
            "functions": [
              "get_factor",
              "draw_gaussian_blobs"
            ],
            "classes": [],
            "imports": [],
            "size_lines": 70,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1751567930674": {
          "editme.py": {
            "functions": [],
            "classes": [],
            "imports": [],
            "size_lines": 1,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1747540708996": {
          "editme.py": {
            "functions": [
              "use_prefix_import",
              "clean_imports",
              "clean_code",
              "__init__",
              "visit_ImportFrom",
              "visit_Name",
              "visit_ImportFrom"
            ],
            "classes": [
              "ImportTransformer",
              "StarImportFinder"
            ],
            "imports": [
              "ast",
              "removestar"
            ],
            "size_lines": 218,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1743051784486": {
          "editme.py": {
            "functions": [],
            "classes": [],
            "imports": [
              "diffusers",
              "rp",
              "torch"
            ],
            "size_lines": 15,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1745958228670": {
          "editme.py": {
            "functions": [
              "laplacian_blend"
            ],
            "classes": [],
            "imports": [
              "torch",
              "torch.nn.functional"
            ],
            "size_lines": 97,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1744540824898": {
          "editme.py": {
            "functions": [
              "f",
              "__init__"
            ],
            "classes": [
              "Sample"
            ],
            "imports": [
              "torch",
              "torch.nn",
              "torch.nn.functional",
              "rp"
            ],
            "size_lines": 52,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1744510920568": {
          "editme.py": {
            "functions": [
              "convert_audio_file"
            ],
            "classes": [],
            "imports": [
              "subprocess",
              "os"
            ],
            "size_lines": 44,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1753573334573": {
          "editme.py": {
            "functions": [],
            "classes": [],
            "imports": [],
            "size_lines": 1,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1743055968037": {
          "editme.py": {
            "functions": [
              "clear_screen",
              "rgb_to_ansi",
              "hsv_to_rgb",
              "rainbow_color",
              "get_ascii_text",
              "main",
              "__init__",
              "update",
              "explode",
              "is_dead",
              "render",
              "__init__",
              "render"
            ],
            "classes": [
              "Firework",
              "WavyText"
            ],
            "imports": [
              "math",
              "os",
              "random",
              "sys",
              "time",
              "typing"
            ],
            "size_lines": 259,
            "has_main": true,
            "docstring": null
          }
        },
        "workspace_1743317046368": {
          "editme.py": {
            "functions": [
              "_render_all_progress_bars",
              "demonstrate_parallel_progress",
              "__init__",
              "__call__",
              "format_progress_text",
              "__init__",
              "__call__",
              "__iter__",
              "__len__",
              "task",
              "remove_after_delay"
            ],
            "classes": [
              "_multi_eta",
              "eta"
            ],
            "imports": [
              "rp",
              "time",
              "threading",
              "sys",
              "datetime",
              "random"
            ],
            "size_lines": 215,
            "has_main": true,
            "docstring": null
          }
        },
        "workspace_1743052200115": {
          "editme.py": {
            "functions": [],
            "classes": [],
            "imports": [],
            "size_lines": 1,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1743097758136": {
          "editme.py": {
            "functions": [
              "little_red_riding_hood",
              "grandmother_house"
            ],
            "classes": [],
            "imports": [],
            "size_lines": 230,
            "has_main": true,
            "docstring": null
          }
        },
        "workspace_1743052677417": {
          "editme.py": {
            "functions": [],
            "classes": [],
            "imports": [],
            "size_lines": 1,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1748639568491": {
          "editme.py": {
            "functions": [
              "draw_gaussian_blobs"
            ],
            "classes": [],
            "imports": [
              "numpy"
            ],
            "size_lines": 52,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1747532392088": {
          "test_safetensors.py": {
            "functions": [
              "setUp",
              "tearDown",
              "test_save_load_basic",
              "test_save_load_with_metadata",
              "test_keys_only",
              "test_verbose_flag"
            ],
            "classes": [
              "TestSafetensors"
            ],
            "imports": [
              "rp",
              "unittest",
              "os",
              "torch",
              "tempfile",
              "editme"
            ],
            "size_lines": 82,
            "has_main": true,
            "docstring": null
          },
          "editme.py": {
            "functions": [
              "save_safetensors"
            ],
            "classes": [],
            "imports": [
              "rp",
              "os",
              "rp.r",
              "safetensors.torch"
            ],
            "size_lines": 45,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1747595896789": {
          "editme.py": {
            "functions": [
              "temporary_torch_random_seed",
              "seed_all",
              "temporary_seed_all"
            ],
            "classes": [],
            "imports": [
              "torch",
              "random",
              "numpy",
              "torch"
            ],
            "size_lines": 99,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1748838261835": {
          "editme.py": {
            "functions": [
              "min_pos"
            ],
            "classes": [],
            "imports": [
              "rp"
            ],
            "size_lines": 41,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1742725235122": {
          "editme.py": {
            "functions": [
              "_run_claude_code",
              "commit_thread"
            ],
            "classes": [],
            "imports": [
              "subprocess"
            ],
            "size_lines": 67,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1743054892902": {
          "editme.py": {
            "functions": [
              "_disable_terminal_mouse_reporting"
            ],
            "classes": [],
            "imports": [],
            "size_lines": 19,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1743056589837": {
          "editme.py": {
            "functions": [
              "load_image",
              "display_image",
              "display_image_in_notebook",
              "display_video_in_notebook_webp",
              "display_video",
              "display_video_in_notebook",
              "save_video",
              "loop_wrapper"
            ],
            "classes": [],
            "imports": [
              "torch"
            ],
            "size_lines": 218,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1748637955901": {
          "editme.py": {
            "functions": [
              "unwarped_perspective_image",
              "unwarped_perspective_contour",
              "demo_function"
            ],
            "classes": [],
            "imports": [
              "rp",
              "cv2",
              "cv2"
            ],
            "size_lines": 138,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1749537492575": {
          "editme.py": {
            "functions": [
              "load_tsv"
            ],
            "classes": [],
            "imports": [
              "pandas",
              "csv",
              "tqdm"
            ],
            "size_lines": 124,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1743053370044": {
          "editme.py": {
            "functions": [
              "insert_cursor",
              "test_cursor_movement"
            ],
            "classes": [],
            "imports": [],
            "size_lines": 83,
            "has_main": true,
            "docstring": null
          }
        },
        "workspace_1743052528337": {
          "editme.py": {
            "functions": [],
            "classes": [],
            "imports": [],
            "size_lines": 1,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1748836593719": {
          "editme.py": {
            "functions": [
              "cv_distance_transform"
            ],
            "classes": [],
            "imports": [
              "cv2"
            ],
            "size_lines": 50,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1750276451049": {
          "editme.py": {
            "functions": [
              "skia_text_to_image"
            ],
            "classes": [],
            "imports": [
              "skia"
            ],
            "size_lines": 120,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1748827138559": {
          "editme.py": {
            "functions": [],
            "classes": [],
            "imports": [],
            "size_lines": 1,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1745957842204": {
          "editme.py": {
            "functions": [
              "to_grayscale",
              "laplacian_blend",
              "build_pyramid"
            ],
            "classes": [],
            "imports": [
              "torch",
              "torch",
              "torch.nn.functional"
            ],
            "size_lines": 146,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1752030100192": {
          "editme.py": {
            "functions": [
              "skia_text_with_fallback"
            ],
            "classes": [],
            "imports": [
              "skia",
              "numpy",
              "math",
              "regex"
            ],
            "size_lines": 61,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1743052830369": {
          "editme.py": {
            "functions": [],
            "classes": [],
            "imports": [],
            "size_lines": 1,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1742690093596": {
          "editme.py": {
            "functions": [
              "render_html"
            ],
            "classes": [],
            "imports": [
              "requests",
              "io",
              "base64",
              "tempfile",
              "os"
            ],
            "size_lines": 54,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1748837569070": {
          "editme.py": {
            "functions": [
              "dot",
              "min_pos"
            ],
            "classes": [],
            "imports": [
              "rp"
            ],
            "size_lines": 42,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1747772405405": {
          "editme.py": {
            "functions": [
              "laplacian_blend"
            ],
            "classes": [],
            "imports": [
              "cv2",
              "numpy"
            ],
            "size_lines": 128,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1752047329326": {
          "editme.py": {
            "functions": [
              "skia_text_to_image"
            ],
            "classes": [],
            "imports": [
              "skia",
              "numpy",
              "math"
            ],
            "size_lines": 67,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1744532663233": {
          "editme.py": {
            "functions": [
              "random_color_video"
            ],
            "classes": [],
            "imports": [],
            "size_lines": 4,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1749490278814": {
          "editme.py": {
            "functions": [
              "split_into_sublists"
            ],
            "classes": [],
            "imports": [],
            "size_lines": 41,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1743306613873": {
          "editme.py": {
            "functions": [
              "_eta",
              "_extract_archive_via_pyunpack",
              "extract_zip_file",
              "__init__",
              "__call__",
              "__iter__",
              "__len__",
              "fansi_progress",
              "display_eta",
              "out"
            ],
            "classes": [
              "eta"
            ],
            "imports": [
              "datetime",
              "pyunpack",
              "zipfile",
              "tarfile"
            ],
            "size_lines": 222,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1746134979284": {
          "editme.py": {
            "functions": [
              "send_text_message"
            ],
            "classes": [],
            "imports": [
              "smtplib",
              "email.message"
            ],
            "size_lines": 64,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1743378918199": {
          "editme.py": {
            "functions": [
              "download_files"
            ],
            "classes": [],
            "imports": [
              "os",
              "argparse"
            ],
            "size_lines": 63,
            "has_main": true,
            "docstring": null
          }
        },
        "workspace_1743052695847": {
          "editme.py": {
            "functions": [],
            "classes": [],
            "imports": [],
            "size_lines": 1,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1743378315510": {
          "test_download_unzip.py": {
            "functions": [
              "test_memory_usage"
            ],
            "classes": [],
            "imports": [
              "rp",
              "editme",
              "tracemalloc",
              "os"
            ],
            "size_lines": 42,
            "has_main": true,
            "docstring": null
          },
          "editme.py": {
            "functions": [
              "extract_zip_file",
              "download_and_unzip",
              "download_url"
            ],
            "classes": [],
            "imports": [
              "rp",
              "io",
              "requests",
              "zipfile",
              "tqdm",
              "subprocess",
              "tarfile",
              "zipfile",
              "tarfile",
              "subprocess",
              "subprocess",
              "requests",
              "tqdm"
            ],
            "size_lines": 302,
            "has_main": false,
            "docstring": null
          },
          "download_unzip_test_simplified.py": {
            "functions": [
              "download_and_unzip_direct"
            ],
            "classes": [],
            "imports": [
              "rp",
              "io",
              "zipfile",
              "requests",
              "os",
              "os",
              "tqdm",
              "tqdm"
            ],
            "size_lines": 93,
            "has_main": true,
            "docstring": null
          },
          "test_output": {
            "superset-master": {
              "setup.py": {
                "functions": [
                  "get_git_sha"
                ],
                "classes": [],
                "imports": [
                  "json",
                  "os",
                  "subprocess",
                  "setuptools"
                ],
                "size_lines": 74,
                "has_main": false,
                "docstring": null
              },
              "docker": {
                "pythonpath_dev": {
                  "superset_config.py": {
                    "functions": [],
                    "classes": [
                      "CeleryConfig"
                    ],
                    "imports": [
                      "logging",
                      "os",
                      "sys",
                      "celery.schedules",
                      "flask_caching.backends.filesystemcache",
                      "superset_test_config",
                      "superset_config_docker",
                      "superset_config_docker"
                    ],
                    "size_lines": 136,
                    "has_main": false,
                    "docstring": null
                  }
                }
              },
              "tests": {
                "conftest.py": {
                  "functions": [
                    "example_db_provider",
                    "example_db_engine",
                    "pandas_loader_configuration",
                    "support_datetime_type",
                    "table_to_df_convertor",
                    "data_loader",
                    "with_config",
                    "mock_provider",
                    "decorate",
                    "wrapper"
                  ],
                  "classes": [],
                  "imports": [
                    "__future__",
                    "functools",
                    "typing",
                    "unittest.mock",
                    "pytest",
                    "tests.example_data.data_loading.pandas.pandas_data_loader",
                    "tests.example_data.data_loading.pandas.pands_data_loading_conf",
                    "tests.example_data.data_loading.pandas.table_df_convertor",
                    "tests.integration_tests.test_app",
                    "sqlalchemy.engine",
                    "superset.connectors.sqla.models",
                    "tests.example_data.data_loading.base_data_loader",
                    "tests.example_data.data_loading.pandas.pandas_data_loader",
                    "flask"
                  ],
                  "size_lines": 142,
                  "has_main": false,
                  "docstring": null
                },
                "__init__.py": {
                  "functions": [],
                  "classes": [],
                  "imports": [],
                  "size_lines": 17,
                  "has_main": false,
                  "docstring": null
                },
                "unit_tests": {
                  "conftest.py": {
                    "functions": [
                      "get_session",
                      "session",
                      "app",
                      "client",
                      "app_context",
                      "full_api_access",
                      "dummy_query_object",
                      "with_feature_flags",
                      "get_session",
                      "mock_get_feature_flags",
                      "decorate",
                      "wrapper"
                    ],
                    "classes": [],
                    "imports": [
                      "functools",
                      "importlib",
                      "os",
                      "unittest.mock",
                      "collections.abc",
                      "typing",
                      "unittest.mock",
                      "pytest",
                      "_pytest.fixtures",
                      "pytest_mock",
                      "sqlalchemy",
                      "sqlalchemy.orm",
                      "sqlalchemy.orm.session",
                      "superset",
                      "superset.app",
                      "superset.common.chart_data",
                      "superset.common.query_object_factory",
                      "superset.extensions",
                      "superset.initialization",
                      "superset.views.base"
                    ],
                    "size_lines": 218,
                    "has_main": false,
                    "docstring": null
                  },
                  "core_tests.py": {
                    "functions": [
                      "test_get_metric_name_saved_metric",
                      "test_get_metric_name_adhoc",
                      "test_get_metric_name_invalid_metric",
                      "test_get_metric_names",
                      "test_get_column_name_physical_column",
                      "test_get_column_name_adhoc",
                      "test_get_column_names",
                      "test_get_column_name_invalid_metric",
                      "test_is_adhoc_metric",
                      "test_get_time_filter_status_time_col",
                      "test_get_time_filter_status_time_range",
                      "test_get_time_filter_status_time_grain",
                      "test_get_time_filter_status_no_temporal_col"
                    ],
                    "classes": [],
                    "imports": [
                      "copy",
                      "pytest",
                      "superset.utils.core",
                      "tests.unit_tests.fixtures.datasets"
                    ],
                    "size_lines": 236,
                    "has_main": false,
                    "docstring": null
                  },
                  "jinja_context_test.py": {
                    "functions": [
                      "test_filter_values_adhoc_filters",
                      "test_filter_values_extra_filters",
                      "test_filter_values_default",
                      "test_filter_values_remove_not_present",
                      "test_filter_values_no_default",
                      "test_get_filters_adhoc_filters",
                      "test_get_filters_remove_not_present",
                      "test_url_param_query",
                      "test_url_param_default",
                      "test_url_param_no_default",
                      "test_url_param_form_data",
                      "test_url_param_escaped_form_data",
                      "test_url_param_escaped_default_form_data",
                      "test_url_param_unescaped_form_data",
                      "test_url_param_unescaped_default_form_data",
                      "test_safe_proxy_primitive",
                      "test_safe_proxy_dict",
                      "test_safe_proxy_lambda",
                      "test_safe_proxy_nested_lambda",
                      "test_user_macros",
                      "test_user_macros_without_cache_key_inclusion",
                      "test_user_macros_without_user_info",
                      "test_where_in",
                      "test_where_in_empty_list",
                      "test_to_datetime",
                      "test_to_datetime_raises",
                      "test_dataset_macro",
                      "test_dataset_macro_mutator_with_comments",
                      "test_metric_macro_with_dataset_id",
                      "test_metric_macro_recursive",
                      "test_metric_macro_expansion",
                      "test_metric_macro_recursive_compound",
                      "test_metric_macro_recursive_cyclic",
                      "test_metric_macro_recursive_infinite",
                      "test_metric_macro_with_dataset_id_invalid_key",
                      "test_metric_macro_invalid_dataset_id",
                      "test_metric_macro_no_dataset_id_no_context",
                      "test_metric_macro_no_dataset_id_with_context_missing_info",
                      "test_metric_macro_no_dataset_id_with_context_datasource_id",
                      "test_metric_macro_no_dataset_id_with_context_datasource_id_none",
                      "test_metric_macro_no_dataset_id_with_context_chart_id",
                      "test_metric_macro_no_dataset_id_with_context_slice_id_none",
                      "test_metric_macro_no_dataset_id_with_context_deleted_chart",
                      "test_metric_macro_no_dataset_id_available_in_request_form_data",
                      "test_get_time_filter",
                      "func",
                      "func",
                      "func",
                      "func",
                      "mutator"
                    ],
                    "classes": [],
                    "imports": [
                      "__future__",
                      "datetime",
                      "typing",
                      "pytest",
                      "flask_appbuilder.security.sqla.models",
                      "freezegun",
                      "jinja2",
                      "jinja2.sandbox",
                      "pytest_mock",
                      "sqlalchemy.dialects",
                      "sqlalchemy.dialects.postgresql",
                      "superset",
                      "superset.commands.dataset.exceptions",
                      "superset.connectors.sqla.models",
                      "superset.exceptions",
                      "superset.jinja_context",
                      "superset.models.core",
                      "superset.models.slice",
                      "superset.utils"
                    ],
                    "size_lines": 1361,
                    "has_main": false,
                    "docstring": null
                  },
                  "__init__.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 17,
                    "has_main": false,
                    "docstring": null
                  },
                  "legacy_tests.py": {
                    "functions": [
                      "test_update_time_range_since_until",
                      "test_update_time_range_granularity_sqla_with_feature_flag"
                    ],
                    "classes": [],
                    "imports": [
                      "copy",
                      "typing",
                      "superset.legacy",
                      "tests.unit_tests.conftest"
                    ],
                    "size_lines": 90,
                    "has_main": false,
                    "docstring": null
                  },
                  "dataframe_test.py": {
                    "functions": [
                      "test_df_to_records",
                      "test_df_to_records_NaT_type",
                      "test_df_to_records_mixed_emoji_type",
                      "test_df_to_records_mixed_accent_type",
                      "test_js_max_int",
                      "test_max_pandas_timestamp"
                    ],
                    "classes": [],
                    "imports": [
                      "datetime",
                      "pytest",
                      "pandas",
                      "pandas._libs.tslibs",
                      "superset.dataframe",
                      "superset.superset_typing",
                      "superset.db_engine_specs",
                      "superset.result_set",
                      "superset.db_engine_specs",
                      "superset.result_set",
                      "superset.db_engine_specs",
                      "superset.result_set",
                      "superset.db_engine_specs",
                      "superset.result_set",
                      "superset.db_engine_specs",
                      "superset.result_set",
                      "superset.db_engine_specs",
                      "superset.result_set"
                    ],
                    "size_lines": 206,
                    "has_main": false,
                    "docstring": null
                  },
                  "feature_flag_test.py": {
                    "functions": [
                      "dummy_is_feature_enabled",
                      "test_existing_feature_flags",
                      "test_nonexistent_feature_flags",
                      "test_is_feature_enabled"
                    ],
                    "classes": [],
                    "imports": [
                      "pytest_mock",
                      "superset"
                    ],
                    "size_lines": 66,
                    "has_main": false,
                    "docstring": null
                  },
                  "sql_lab_test.py": {
                    "functions": [
                      "test_execute_sql_statement",
                      "test_execute_sql_statement_with_rls",
                      "test_execute_sql_statement_exceeds_payload_limit",
                      "test_execute_sql_statement_within_payload_limit",
                      "test_sql_lab_insert_rls_as_subquery",
                      "test_get_sql_results_oauth2",
                      "mock_serialize_payload",
                      "mock_serialize_payload"
                    ],
                    "classes": [],
                    "imports": [
                      "json",
                      "unittest",
                      "uuid",
                      "pytest",
                      "sqlparse",
                      "freezegun",
                      "pytest_mock",
                      "sqlalchemy.orm.session",
                      "superset",
                      "superset.common.db_query_status",
                      "superset.errors",
                      "superset.exceptions",
                      "superset.models.core",
                      "superset.sql_lab",
                      "superset.utils.core",
                      "tests.unit_tests.models.core_test",
                      "superset.sql_lab",
                      "superset.sql_lab",
                      "flask_appbuilder.security.sqla.models",
                      "superset.connectors.sqla.models",
                      "superset.models.core",
                      "superset.models.sql_lab",
                      "superset.security.manager",
                      "superset.sql_lab",
                      "superset.utils.core"
                    ],
                    "size_lines": 394,
                    "has_main": false,
                    "docstring": null
                  },
                  "extension_tests.py": {
                    "functions": [
                      "test_get_manifest_with_prefix",
                      "test_get_manifest_no_prefix"
                    ],
                    "classes": [],
                    "imports": [
                      "os.path",
                      "unittest.mock",
                      "superset.extensions"
                    ],
                    "size_lines": 52,
                    "has_main": false,
                    "docstring": null
                  },
                  "result_set_test.py": {
                    "functions": [
                      "test_column_names_as_bytes",
                      "test_stringify_with_null_integers",
                      "test_stringify_with_null_timestamps",
                      "test_timezone_series"
                    ],
                    "classes": [],
                    "imports": [
                      "datetime",
                      "numpy",
                      "pandas",
                      "numpy.core.multiarray",
                      "pytest_mock",
                      "superset.db_engine_specs.base",
                      "superset.result_set",
                      "superset.db_engine_specs.redshift",
                      "superset.result_set"
                    ],
                    "size_lines": 167,
                    "has_main": false,
                    "docstring": null
                  },
                  "config_test.py": {
                    "functions": [
                      "apply_dttm_defaults",
                      "test_table",
                      "test_main_dttm_col",
                      "test_main_dttm_col_nonexistent",
                      "test_main_dttm_col_nondttm",
                      "test_python_date_format_by_column_name",
                      "test_expression_by_column_name",
                      "test_full_setting"
                    ],
                    "classes": [],
                    "imports": [
                      "functools",
                      "typing",
                      "pytest",
                      "pytest_mock",
                      "sqlalchemy.orm.session",
                      "superset",
                      "superset.connectors.sqla.models",
                      "superset.connectors.sqla.models",
                      "superset.models.core"
                    ],
                    "size_lines": 325,
                    "has_main": false,
                    "docstring": null
                  },
                  "sql_lab_execution_context.py": {
                    "functions": [
                      "query_params",
                      "test_sql_json_execution_context_init",
                      "test_sql_json_execution_context_feature_flag_false",
                      "test_sql_json_execution_context_feature_flag_true",
                      "test_create_table_as_select"
                    ],
                    "classes": [],
                    "imports": [
                      "pytest",
                      "superset.sqllab.sqllab_execution_context",
                      "tests.unit_tests.conftest"
                    ],
                    "size_lines": 103,
                    "has_main": false,
                    "docstring": null
                  },
                  "sql_parse_tests.py": {
                    "functions": [
                      "extract_tables",
                      "test_table",
                      "test_extract_tables",
                      "test_extract_tables_subselect",
                      "test_extract_tables_select_in_expression",
                      "test_extract_tables_parenthesis",
                      "test_extract_tables_with_schema",
                      "test_extract_tables_union",
                      "test_extract_tables_select_from_values",
                      "test_extract_tables_select_array",
                      "test_extract_tables_select_if",
                      "test_extract_tables_with_catalog",
                      "test_extract_tables_illdefined",
                      "test_extract_tables_show_tables_from",
                      "test_extract_tables_show_columns_from",
                      "test_extract_tables_where_subquery",
                      "test_extract_tables_describe",
                      "test_extract_tables_show_partitions",
                      "test_extract_tables_join",
                      "test_extract_tables_semi_join",
                      "test_extract_tables_combinations",
                      "test_extract_tables_with",
                      "test_extract_tables_reusing_aliases",
                      "test_extract_tables_multistatement",
                      "test_extract_tables_complex",
                      "test_extract_tables_mixed_from_clause",
                      "test_extract_tables_nested_select",
                      "test_extract_tables_complex_cte_with_prefix",
                      "test_extract_tables_identifier_list_with_keyword_as_alias",
                      "test_update",
                      "test_set",
                      "test_show",
                      "test_is_explain",
                      "test_is_valid_ctas",
                      "test_is_valid_cvas",
                      "test_is_select_cte_with_comments",
                      "test_cte_is_select",
                      "test_cte_is_select_lowercase",
                      "test_cte_insert_is_not_select",
                      "test_cte_delete_is_not_select",
                      "test_cte_is_not_select_lowercase",
                      "test_cte_with_multiple_selects",
                      "test_cte_with_multiple_with_non_select",
                      "test_unknown_select",
                      "test_get_query_with_new_limit_comment",
                      "test_get_query_with_new_limit_comment_with_limit",
                      "test_get_query_with_new_limit_lower",
                      "test_get_query_with_new_limit_upper",
                      "test_basic_breakdown_statements",
                      "test_messy_breakdown_statements",
                      "test_sqlparse_formatting",
                      "test_strip_comments_from_sql",
                      "test_check_sql_functions_exist",
                      "test_sanitize_clause_valid",
                      "test_sanitize_clause_closing_unclosed",
                      "test_sanitize_clause_unclosed",
                      "test_sanitize_clause_closing_and_unclosed",
                      "test_sanitize_clause_closing_and_unclosed_nested",
                      "test_sanitize_clause_multiple",
                      "test_sqlparse_issue_652",
                      "test_has_table_query",
                      "test_insert_rls_as_subquery",
                      "test_insert_rls_in_predicate",
                      "test_add_table_name",
                      "test_get_rls_for_table",
                      "test_extract_table_references",
                      "test_is_select",
                      "test_extract_tables_from_jinja_sql",
                      "test_extract_tables_from_jinja_sql_disabled",
                      "get_rls_for_table",
                      "get_rls_for_table"
                    ],
                    "classes": [],
                    "imports": [
                      "typing",
                      "unittest",
                      "pytest",
                      "sqlparse",
                      "pytest_mock",
                      "sqlalchemy",
                      "sqlparse.sql",
                      "sqlparse.tokens",
                      "superset.exceptions",
                      "superset.sql.parse",
                      "superset.sql_parse"
                    ],
                    "size_lines": 1923,
                    "has_main": false,
                    "docstring": null
                  },
                  "connectors": {
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "sqla": {
                      "models_test.py": {
                        "functions": [
                          "test_query_bubbles_errors",
                          "test_permissions_without_catalog",
                          "test_permissions_with_catalog",
                          "test_query_datasources_by_name",
                          "test_query_datasources_by_permissions",
                          "test_query_datasources_by_permissions_with_catalog_schema",
                          "test_dataset_uniqueness",
                          "test_normalize_prequery_result_type_custom_sql"
                        ],
                        "classes": [],
                        "imports": [
                          "pandas",
                          "pytest",
                          "pytest_mock",
                          "sqlalchemy",
                          "sqlalchemy.exc",
                          "sqlalchemy.orm.session",
                          "superset.connectors.sqla.models",
                          "superset.daos.dataset",
                          "superset.exceptions",
                          "superset.models.core",
                          "superset.sql_parse",
                          "superset.superset_typing"
                        ],
                        "size_lines": 290,
                        "has_main": false,
                        "docstring": null
                      },
                      "utils_test.py": {
                        "functions": [
                          "test_returns_column_descriptions",
                          "test_get_virtual_table_metadata",
                          "test_get_virtual_table_metadata_mutating",
                          "test_get_virtual_table_metadata_multiple"
                        ],
                        "classes": [],
                        "imports": [
                          "pytest",
                          "pytest_mock",
                          "superset.connectors.sqla.utils",
                          "superset.exceptions"
                        ],
                        "size_lines": 140,
                        "has_main": false,
                        "docstring": null
                      },
                      "__init__.py": {
                        "functions": [],
                        "classes": [],
                        "imports": [],
                        "size_lines": 17,
                        "has_main": false,
                        "docstring": null
                      }
                    }
                  },
                  "datasource": {
                    "dao_tests.py": {
                      "functions": [
                        "session_with_data",
                        "test_get_datasource_sqlatable",
                        "test_get_datasource_query",
                        "test_get_datasource_saved_query",
                        "test_get_datasource_w_str_param",
                        "test_get_all_datasources",
                        "test_not_found_datasource"
                      ],
                      "classes": [],
                      "imports": [
                        "collections.abc",
                        "pytest",
                        "sqlalchemy.orm.session",
                        "superset.utils.core",
                        "superset.connectors.sqla.models",
                        "superset.models.core",
                        "superset.models.sql_lab",
                        "superset.connectors.sqla.models",
                        "superset.daos.datasource",
                        "superset.daos.datasource",
                        "superset.models.sql_lab",
                        "superset.daos.datasource",
                        "superset.models.sql_lab",
                        "superset.connectors.sqla.models",
                        "superset.daos.datasource",
                        "superset.connectors.sqla.models",
                        "superset.daos.datasource",
                        "superset.daos.exceptions"
                      ],
                      "size_lines": 141,
                      "has_main": false,
                      "docstring": null
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    }
                  },
                  "tables": {
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    }
                  },
                  "distributed_lock": {
                    "distributed_lock_tests.py": {
                      "functions": [
                        "_get_lock",
                        "_get_other_session",
                        "test_key_value_distributed_lock_happy_path",
                        "test_key_value_distributed_lock_expired"
                      ],
                      "classes": [],
                      "imports": [
                        "typing",
                        "uuid",
                        "pytest",
                        "freezegun",
                        "sqlalchemy.orm",
                        "superset",
                        "superset.distributed_lock",
                        "superset.distributed_lock.types",
                        "superset.distributed_lock.utils",
                        "superset.exceptions",
                        "superset.key_value.types",
                        "superset.key_value.models",
                        "superset"
                      ],
                      "size_lines": 102,
                      "has_main": false,
                      "docstring": null
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 1,
                      "has_main": false,
                      "docstring": null
                    }
                  },
                  "migrations": {
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "shared": {
                      "__init__.py": {
                        "functions": [],
                        "classes": [],
                        "imports": [],
                        "size_lines": 17,
                        "has_main": false,
                        "docstring": null
                      },
                      "catalogs_test.py": {
                        "functions": [
                          "oauth2_config",
                          "test_upgrade_catalog_perms",
                          "test_upgrade_catalog_perms_graceful",
                          "test_upgrade_catalog_perms_oauth_connection",
                          "test_upgrade_catalog_perms_simplified_migration"
                        ],
                        "classes": [],
                        "imports": [
                          "json",
                          "pytest",
                          "pytest_mock",
                          "sqlalchemy.orm.session",
                          "superset",
                          "superset.migrations.shared.catalogs",
                          "superset.migrations.shared.security_converge",
                          "superset.superset_typing",
                          "superset.connectors.sqla.models",
                          "superset.models.core",
                          "superset.models.slice",
                          "superset.models.sql_lab",
                          "superset.connectors.sqla.models",
                          "superset.models.core",
                          "superset.models.slice",
                          "superset.models.sql_lab",
                          "superset.connectors.sqla.models",
                          "superset.models.core",
                          "superset.models.slice",
                          "superset.models.sql_lab",
                          "superset.connectors.sqla.models",
                          "superset.models.core",
                          "superset.models.slice",
                          "superset.models.sql_lab"
                        ],
                        "size_lines": 609,
                        "has_main": false,
                        "docstring": null
                      }
                    },
                    "viz": {
                      "histogram_v1_v2_test.py": {
                        "functions": [
                          "test_migration"
                        ],
                        "classes": [],
                        "imports": [
                          "typing",
                          "superset.migrations.shared.migrate_viz",
                          "tests.unit_tests.migrations.viz.utils"
                        ],
                        "size_lines": 53,
                        "has_main": false,
                        "docstring": null
                      },
                      "__init__.py": {
                        "functions": [],
                        "classes": [],
                        "imports": [],
                        "size_lines": 17,
                        "has_main": false,
                        "docstring": null
                      },
                      "nvd3_bubble_chart_to_echarts_test.py": {
                        "functions": [
                          "test_migration"
                        ],
                        "classes": [],
                        "imports": [
                          "typing",
                          "superset.migrations.shared.migrate_viz",
                          "tests.unit_tests.migrations.viz.utils"
                        ],
                        "size_lines": 77,
                        "has_main": false,
                        "docstring": null
                      },
                      "nvd3_bar_chart_to_echarts_test.py": {
                        "functions": [
                          "test_bar_migration",
                          "test_dist_bar_migration"
                        ],
                        "classes": [],
                        "imports": [
                          "typing",
                          "superset.migrations.shared.migrate_viz",
                          "tests.unit_tests.migrations.viz.utils"
                        ],
                        "size_lines": 65,
                        "has_main": false,
                        "docstring": null
                      },
                      "time_related_fields_test.py": {
                        "functions": [
                          "test_migration",
                          "test_custom_sql_time_column",
                          "upgrade_downgrade"
                        ],
                        "classes": [],
                        "imports": [
                          "typing",
                          "superset.migrations.shared.migrate_viz",
                          "tests.unit_tests.migrations.viz.utils"
                        ],
                        "size_lines": 80,
                        "has_main": false,
                        "docstring": null
                      },
                      "pivot_table_v1_v2_test.py": {
                        "functions": [
                          "test_migration"
                        ],
                        "classes": [],
                        "imports": [
                          "typing",
                          "superset.migrations.shared.migrate_viz",
                          "tests.unit_tests.migrations.viz.utils"
                        ],
                        "size_lines": 54,
                        "has_main": false,
                        "docstring": null
                      },
                      "utils.py": {
                        "functions": [
                          "migrate_and_assert"
                        ],
                        "classes": [],
                        "imports": [
                          "typing",
                          "superset.migrations.shared.migrate_viz",
                          "superset.utils",
                          "superset.models.slice"
                        ],
                        "size_lines": 97,
                        "has_main": false,
                        "docstring": null
                      },
                      "dual_line_to_mixed_chart_test.py": {
                        "functions": [
                          "test_migration"
                        ],
                        "classes": [],
                        "imports": [
                          "typing",
                          "superset.migrations.shared.migrate_viz",
                          "tests.unit_tests.migrations.viz.utils"
                        ],
                        "size_lines": 69,
                        "has_main": false,
                        "docstring": null
                      },
                      "nvd3_line_chart_to_echarts_test.py": {
                        "functions": [
                          "test_migration"
                        ],
                        "classes": [],
                        "imports": [
                          "typing",
                          "superset.migrations.shared.migrate_viz",
                          "tests.unit_tests.migrations.viz.utils"
                        ],
                        "size_lines": 40,
                        "has_main": false,
                        "docstring": null
                      },
                      "nvd3_area_chart_to_echarts_test.py": {
                        "functions": [
                          "test_migration"
                        ],
                        "classes": [],
                        "imports": [
                          "typing",
                          "superset.migrations.shared.migrate_viz",
                          "tests.unit_tests.migrations.viz.utils"
                        ],
                        "size_lines": 43,
                        "has_main": false,
                        "docstring": null
                      },
                      "heatmap_v1_v2_test.py": {
                        "functions": [
                          "test_migration"
                        ],
                        "classes": [],
                        "imports": [
                          "typing",
                          "superset.migrations.shared.migrate_viz",
                          "tests.unit_tests.migrations.viz.utils"
                        ],
                        "size_lines": 79,
                        "has_main": false,
                        "docstring": null
                      }
                    }
                  },
                  "pandas_postprocessing": {
                    "test_boxplot.py": {
                      "functions": [
                        "test_boxplot_tukey",
                        "test_boxplot_min_max",
                        "test_boxplot_percentile",
                        "test_boxplot_percentile_incorrect_params",
                        "test_boxplot_type_coercion"
                      ],
                      "classes": [],
                      "imports": [
                        "pytest",
                        "superset.exceptions",
                        "superset.utils.core",
                        "superset.utils.pandas_postprocessing",
                        "tests.unit_tests.fixtures.dataframes"
                      ],
                      "size_lines": 152,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_flatten.py": {
                      "functions": [
                        "test_flat_should_not_change",
                        "test_flat_should_not_reset_index",
                        "test_flat_should_flat_datetime_index",
                        "test_flat_should_flat_multiple_index",
                        "test_flat_should_drop_index_level",
                        "test_flat_should_not_droplevel",
                        "test_flat_integer_column_name",
                        "test_escape_column_name"
                      ],
                      "classes": [],
                      "imports": [
                        "pandas",
                        "superset.utils",
                        "superset.utils.pandas_postprocessing.utils",
                        "tests.unit_tests.fixtures.dataframes"
                      ],
                      "size_lines": 184,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_utils.py": {
                      "functions": [
                        "test_escape_separator"
                      ],
                      "classes": [],
                      "imports": [
                        "superset.utils.pandas_postprocessing"
                      ],
                      "size_lines": 31,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_cum.py": {
                      "functions": [
                        "test_cum_should_not_side_effect",
                        "test_cum",
                        "test_cum_with_gap",
                        "test_cum_after_pivot_with_single_metric",
                        "test_cum_after_pivot_with_multiple_metrics"
                      ],
                      "classes": [],
                      "imports": [
                        "pandas",
                        "pytest",
                        "superset.exceptions",
                        "superset.utils",
                        "superset.utils.pandas_postprocessing.utils",
                        "tests.unit_tests.fixtures.dataframes",
                        "tests.unit_tests.pandas_postprocessing.utils"
                      ],
                      "size_lines": 179,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_select.py": {
                      "functions": [
                        "test_select"
                      ],
                      "classes": [],
                      "imports": [
                        "pytest",
                        "superset.exceptions",
                        "superset.utils.pandas_postprocessing.select",
                        "tests.unit_tests.fixtures.dataframes"
                      ],
                      "size_lines": 56,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_rolling.py": {
                      "functions": [
                        "test_rolling_should_not_side_effect",
                        "test_rolling",
                        "test_rolling_min_periods_trims_correctly",
                        "test_rolling_after_pivot_with_single_metric",
                        "test_rolling_after_pivot_with_multiple_metrics"
                      ],
                      "classes": [],
                      "imports": [
                        "pandas",
                        "pytest",
                        "superset.exceptions",
                        "superset.utils",
                        "superset.utils.pandas_postprocessing.utils",
                        "tests.unit_tests.fixtures.dataframes",
                        "tests.unit_tests.pandas_postprocessing.utils"
                      ],
                      "size_lines": 223,
                      "has_main": false,
                      "docstring": null
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_pivot.py": {
                      "functions": [
                        "test_pivot_without_columns",
                        "test_pivot_with_single_column",
                        "test_pivot_with_multiple_columns",
                        "test_pivot_fill_values",
                        "test_pivot_fill_column_values",
                        "test_pivot_exceptions",
                        "test_pivot_eliminate_cartesian_product_columns"
                      ],
                      "classes": [],
                      "imports": [
                        "numpy",
                        "pytest",
                        "pandas",
                        "superset.exceptions",
                        "superset.utils.pandas_postprocessing",
                        "tests.unit_tests.fixtures.dataframes",
                        "tests.unit_tests.pandas_postprocessing.utils"
                      ],
                      "size_lines": 206,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_contribution.py": {
                      "functions": [
                        "test_non_numeric_columns",
                        "test_rename_should_have_same_length",
                        "test_cell_contribution_across_row",
                        "test_cell_contribution_across_column_without_temporal_column",
                        "test_contribution_on_selected_columns",
                        "test_contribution_with_time_shift_columns"
                      ],
                      "classes": [],
                      "imports": [
                        "datetime",
                        "pytest",
                        "numpy",
                        "numpy.testing",
                        "pandas",
                        "superset.exceptions",
                        "superset.utils.core",
                        "superset.utils.pandas_postprocessing"
                      ],
                      "size_lines": 127,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_resample.py": {
                      "functions": [
                        "test_resample_should_not_side_effect",
                        "test_resample",
                        "test_resample_ffill_with_gaps",
                        "test_resample_zero_fill",
                        "test_resample_zero_fill_with_gaps",
                        "test_resample_after_pivot",
                        "test_resample_should_raise_ex",
                        "test_resample_linear"
                      ],
                      "classes": [],
                      "imports": [
                        "numpy",
                        "pandas",
                        "pytest",
                        "pandas",
                        "superset.exceptions",
                        "superset.utils",
                        "tests.unit_tests.fixtures.dataframes"
                      ],
                      "size_lines": 261,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_sort.py": {
                      "functions": [
                        "test_sort"
                      ],
                      "classes": [],
                      "imports": [
                        "pytest",
                        "dateutil.parser",
                        "superset.exceptions",
                        "superset.utils.pandas_postprocessing",
                        "tests.unit_tests.fixtures.dataframes",
                        "tests.unit_tests.pandas_postprocessing.utils"
                      ],
                      "size_lines": 54,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_geography.py": {
                      "functions": [
                        "test_geohash_decode",
                        "test_geohash_encode",
                        "test_geodetic_parse"
                      ],
                      "classes": [],
                      "imports": [
                        "superset.utils.pandas_postprocessing",
                        "tests.unit_tests.fixtures.dataframes",
                        "tests.unit_tests.pandas_postprocessing.utils"
                      ],
                      "size_lines": 91,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_diff.py": {
                      "functions": [
                        "test_diff"
                      ],
                      "classes": [],
                      "imports": [
                        "pytest",
                        "superset.exceptions",
                        "superset.utils.pandas_postprocessing",
                        "tests.unit_tests.fixtures.dataframes",
                        "tests.unit_tests.pandas_postprocessing.utils"
                      ],
                      "size_lines": 52,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_prophet.py": {
                      "functions": [
                        "test_prophet_valid",
                        "test_prophet_valid_zero_periods",
                        "test_prophet_import",
                        "test_prophet_missing_temporal_column",
                        "test_prophet_incorrect_confidence_interval",
                        "test_prophet_incorrect_periods",
                        "test_prophet_incorrect_time_grain"
                      ],
                      "classes": [],
                      "imports": [
                        "datetime",
                        "importlib.util",
                        "pandas",
                        "pytest",
                        "superset.exceptions",
                        "superset.utils.core",
                        "superset.utils.pandas_postprocessing",
                        "tests.unit_tests.fixtures.dataframes"
                      ],
                      "size_lines": 187,
                      "has_main": false,
                      "docstring": null
                    },
                    "utils.py": {
                      "functions": [
                        "series_to_list",
                        "round_floats"
                      ],
                      "classes": [],
                      "imports": [
                        "math",
                        "typing",
                        "pandas"
                      ],
                      "size_lines": 56,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_aggregate.py": {
                      "functions": [
                        "test_aggregate"
                      ],
                      "classes": [],
                      "imports": [
                        "superset.utils.pandas_postprocessing",
                        "tests.unit_tests.fixtures.dataframes",
                        "tests.unit_tests.pandas_postprocessing.utils"
                      ],
                      "size_lines": 41,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_rename.py": {
                      "functions": [
                        "test_rename_should_not_side_effect",
                        "test_rename",
                        "test_should_inplace_rename",
                        "test_should_rename_on_level",
                        "test_should_raise_exception_no_column",
                        "test_should_raise_exception_duplication",
                        "test_should_raise_exception_duplication_on_multiindex",
                        "test_should_raise_exception_invalid_level",
                        "test_should_return_df_empty_columns"
                      ],
                      "classes": [],
                      "imports": [
                        "pandas",
                        "pytest",
                        "superset.exceptions",
                        "superset.utils",
                        "tests.unit_tests.fixtures.dataframes"
                      ],
                      "size_lines": 176,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_compare.py": {
                      "functions": [
                        "test_compare_should_not_side_effect",
                        "test_compare_diff",
                        "test_compare_percentage",
                        "test_compare_ratio",
                        "test_compare_multi_index_column",
                        "test_compare_multi_index_column_non_lex_sorted",
                        "test_compare_after_pivot"
                      ],
                      "classes": [],
                      "imports": [
                        "io",
                        "sys",
                        "pandas",
                        "superset.constants",
                        "superset.utils",
                        "superset.utils.pandas_postprocessing.utils",
                        "tests.unit_tests.fixtures.dataframes"
                      ],
                      "size_lines": 299,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_histogram.py": {
                      "functions": [
                        "test_histogram_no_groupby",
                        "test_histogram_with_groupby",
                        "test_histogram_with_groupby_and_normalize",
                        "test_histogram_with_groupby_and_cumulative",
                        "test_histogram_with_groupby_and_cumulative_and_normalize",
                        "test_histogram_with_non_numeric_column",
                        "test_histogram_with_some_non_numeric_values"
                      ],
                      "classes": [],
                      "imports": [
                        "pandas",
                        "superset.utils.pandas_postprocessing"
                      ],
                      "size_lines": 143,
                      "has_main": false,
                      "docstring": null
                    }
                  },
                  "databases": {
                    "utils_test.py": {
                      "functions": [
                        "test_make_url_safe_string",
                        "test_make_url_safe_url"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy.engine.url",
                        "sqlalchemy.orm.session",
                        "superset.databases.utils"
                      ],
                      "size_lines": 41,
                      "has_main": false,
                      "docstring": null
                    },
                    "filters_test.py": {
                      "functions": [
                        "test_can_access_databases",
                        "test_database_filter_full_db_access",
                        "test_database_filter"
                      ],
                      "classes": [],
                      "imports": [
                        "flask_appbuilder.models.sqla.interface",
                        "pytest_mock",
                        "sqlalchemy",
                        "sqlalchemy.orm",
                        "superset.databases.filters",
                        "superset.extensions",
                        "superset.models.core",
                        "superset.models.core"
                      ],
                      "size_lines": 129,
                      "has_main": false,
                      "docstring": null
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "schema_tests.py": {
                      "functions": [
                        "dummy_schema",
                        "dummy_engine",
                        "test_database_parameters_schema_mixin",
                        "test_database_parameters_schema_mixin_no_engine",
                        "test_database_parameters_schema_mixin_invalid_engine",
                        "test_database_parameters_schema_no_mixin",
                        "test_database_parameters_schema_mixin_invalid_type",
                        "test_rename_encrypted_extra",
                        "test_oauth2_schema_success",
                        "test_oauth2_schema_error",
                        "test_oauth2_schema_extra"
                      ],
                      "classes": [
                        "InvalidEngine",
                        "DummySchema",
                        "DummyEngine"
                      ],
                      "imports": [
                        "typing",
                        "pytest",
                        "marshmallow",
                        "pytest_mock",
                        "superset.databases.schemas",
                        "superset.databases.schemas",
                        "superset.db_engine_specs.base",
                        "superset.models.core",
                        "superset.models.core",
                        "superset.models.core",
                        "superset.models.core",
                        "superset.models.core",
                        "superset.databases.schemas",
                        "superset.databases.schemas",
                        "superset.databases.schemas",
                        "superset.databases.schemas"
                      ],
                      "size_lines": 275,
                      "has_main": false,
                      "docstring": null
                    },
                    "api_test.py": {
                      "functions": [
                        "test_filter_by_uuid",
                        "test_post_with_uuid",
                        "test_password_mask",
                        "test_database_connection",
                        "test_update_with_password_mask",
                        "test_import",
                        "test_non_zip_import",
                        "test_delete_ssh_tunnel",
                        "test_delete_ssh_tunnel_not_found",
                        "test_apply_dynamic_database_filter",
                        "test_oauth2_happy_path",
                        "test_oauth2_permissions",
                        "test_oauth2_multiple_tokens",
                        "test_oauth2_error",
                        "test_csv_upload",
                        "test_csv_upload_validation",
                        "test_csv_upload_file_extension_invalid",
                        "test_csv_upload_file_extension_valid",
                        "test_excel_upload",
                        "test_excel_upload_validation",
                        "test_excel_upload_file_extension_invalid",
                        "test_columnar_upload",
                        "test_columnar_upload_validation",
                        "test_columnar_upload_file_extension_valid",
                        "test_columnar_upload_file_extension_invalid",
                        "test_csv_metadata",
                        "test_csv_metadata_bad_extension",
                        "test_csv_metadata_validation",
                        "test_excel_metadata",
                        "test_excel_metadata_bad_extension",
                        "test_excel_metadata_validation",
                        "test_columnar_metadata",
                        "test_columnar_metadata_bad_extension",
                        "test_columnar_metadata_validation",
                        "test_table_metadata_happy_path",
                        "test_table_metadata_no_table",
                        "test_table_metadata_slashes",
                        "test_table_metadata_invalid_database",
                        "test_table_metadata_unauthorized",
                        "test_table_extra_metadata_happy_path",
                        "test_table_extra_metadata_no_table",
                        "test_table_extra_metadata_slashes",
                        "test_table_extra_metadata_invalid_database",
                        "test_table_extra_metadata_unauthorized",
                        "test_catalogs",
                        "test_catalogs_with_oauth2",
                        "test_schemas",
                        "test_schemas_with_oauth2",
                        "_base_filter"
                      ],
                      "classes": [],
                      "imports": [
                        "__future__",
                        "datetime",
                        "io",
                        "typing",
                        "unittest.mock",
                        "uuid",
                        "pytest",
                        "yaml",
                        "flask",
                        "freezegun",
                        "pytest_mock",
                        "sqlalchemy.orm.session",
                        "superset",
                        "superset.commands.database.uploaders.base",
                        "superset.commands.database.uploaders.columnar_reader",
                        "superset.commands.database.uploaders.csv_reader",
                        "superset.commands.database.uploaders.excel_reader",
                        "superset.db_engine_specs.sqlite",
                        "superset.errors",
                        "superset.exceptions",
                        "superset.sql_parse",
                        "superset.superset_typing",
                        "superset.utils",
                        "superset.utils.oauth2",
                        "tests.unit_tests.fixtures.common",
                        "superset.databases.api",
                        "superset.models.core",
                        "superset.models.core",
                        "superset.databases.api",
                        "superset.models.core",
                        "superset.databases.api",
                        "superset.models.core",
                        "superset.databases.api",
                        "superset.models.core",
                        "superset.databases.api",
                        "superset.models.core",
                        "superset.databases.api",
                        "superset.models.core",
                        "superset.databases.api",
                        "superset.models.core",
                        "superset.databases.api",
                        "superset.databases.api",
                        "superset.daos.database",
                        "superset.databases.api",
                        "superset.databases.ssh_tunnel.models",
                        "superset.models.core",
                        "superset.daos.database",
                        "superset.databases.api",
                        "superset.databases.ssh_tunnel.models",
                        "superset.models.core",
                        "superset.daos.database",
                        "superset.databases.api",
                        "superset.models.core",
                        "superset.models.core"
                      ],
                      "size_lines": 2429,
                      "has_main": false,
                      "docstring": null
                    },
                    "dao": {
                      "dao_tests.py": {
                        "functions": [
                          "session_with_data",
                          "test_database_get_ssh_tunnel",
                          "test_database_get_ssh_tunnel_not_found"
                        ],
                        "classes": [],
                        "imports": [
                          "collections.abc",
                          "pytest",
                          "sqlalchemy.orm.session",
                          "superset.connectors.sqla.models",
                          "superset.databases.ssh_tunnel.models",
                          "superset.models.core",
                          "superset.daos.database",
                          "superset.databases.ssh_tunnel.models",
                          "superset.daos.database"
                        ],
                        "size_lines": 70,
                        "has_main": false,
                        "docstring": null
                      },
                      "__init__.py": {
                        "functions": [],
                        "classes": [],
                        "imports": [],
                        "size_lines": 17,
                        "has_main": false,
                        "docstring": null
                      }
                    },
                    "ssh_tunnel": {
                      "dao_tests.py": {
                        "functions": [
                          "test_create_ssh_tunnel"
                        ],
                        "classes": [],
                        "imports": [
                          "superset.daos.database",
                          "superset.databases.ssh_tunnel.models",
                          "superset.models.core"
                        ],
                        "size_lines": 38,
                        "has_main": false,
                        "docstring": null
                      },
                      "__init__.py": {
                        "functions": [],
                        "classes": [],
                        "imports": [],
                        "size_lines": 17,
                        "has_main": false,
                        "docstring": null
                      },
                      "commands": {
                        "__init__.py": {
                          "functions": [],
                          "classes": [],
                          "imports": [],
                          "size_lines": 17,
                          "has_main": false,
                          "docstring": null
                        },
                        "create_test.py": {
                          "functions": [
                            "test_create_ssh_tunnel_command",
                            "test_create_ssh_tunnel_command_invalid_params",
                            "test_create_ssh_tunnel_command_no_port",
                            "test_create_ssh_tunnel_command_no_port_no_default"
                          ],
                          "classes": [],
                          "imports": [
                            "pytest",
                            "sqlalchemy.orm.session",
                            "superset.commands.database.ssh_tunnel.exceptions",
                            "superset",
                            "superset.commands.database.ssh_tunnel.create",
                            "superset.databases.ssh_tunnel.models",
                            "superset.models.core",
                            "superset",
                            "superset.commands.database.ssh_tunnel.create",
                            "superset.models.core",
                            "superset",
                            "superset.commands.database.ssh_tunnel.create",
                            "superset.databases.ssh_tunnel.models",
                            "superset.models.core",
                            "superset",
                            "superset.commands.database.ssh_tunnel.create",
                            "superset.models.core"
                          ],
                          "size_lines": 149,
                          "has_main": false,
                          "docstring": null
                        },
                        "update_test.py": {
                          "functions": [
                            "session_with_data",
                            "test_update_shh_tunnel_command",
                            "test_update_shh_tunnel_invalid_params",
                            "test_update_shh_tunnel_no_port",
                            "test_update_shh_tunnel_no_port_no_default"
                          ],
                          "classes": [],
                          "imports": [
                            "collections.abc",
                            "pytest",
                            "sqlalchemy.orm.session",
                            "superset.commands.database.ssh_tunnel.exceptions",
                            "superset.connectors.sqla.models",
                            "superset.databases.ssh_tunnel.models",
                            "superset.models.core",
                            "superset.commands.database.ssh_tunnel.update",
                            "superset.daos.database",
                            "superset.databases.ssh_tunnel.models",
                            "superset.commands.database.ssh_tunnel.update",
                            "superset.daos.database",
                            "superset.databases.ssh_tunnel.models",
                            "superset.commands.database.ssh_tunnel.update",
                            "superset.daos.database",
                            "superset.databases.ssh_tunnel.models",
                            "superset.commands.database.ssh_tunnel.update",
                            "superset.daos.database",
                            "superset.databases.ssh_tunnel.models"
                          ],
                          "size_lines": 156,
                          "has_main": false,
                          "docstring": null
                        },
                        "delete_test.py": {
                          "functions": [
                            "session_with_data",
                            "test_delete_ssh_tunnel_command"
                          ],
                          "classes": [],
                          "imports": [
                            "collections.abc",
                            "pytest",
                            "pytest_mock",
                            "sqlalchemy.orm.session",
                            "superset.connectors.sqla.models",
                            "superset.databases.ssh_tunnel.models",
                            "superset.models.core",
                            "superset.commands.database.ssh_tunnel.delete",
                            "superset.daos.database",
                            "superset.databases.ssh_tunnel.models"
                          ],
                          "size_lines": 74,
                          "has_main": false,
                          "docstring": null
                        }
                      }
                    },
                    "commands": {
                      "utils_test.py": {
                        "functions": [
                          "test_add_permissions",
                          "test_add_permissions_handle_failures"
                        ],
                        "classes": [],
                        "imports": [
                          "pytest_mock",
                          "superset.commands.database.utils"
                        ],
                        "size_lines": 77,
                        "has_main": false,
                        "docstring": null
                      },
                      "__init__.py": {
                        "functions": [],
                        "classes": [],
                        "imports": [],
                        "size_lines": 17,
                        "has_main": false,
                        "docstring": null
                      },
                      "test_connection_test.py": {
                        "functions": [
                          "test_get_log_connection_action"
                        ],
                        "classes": [],
                        "imports": [
                          "parameterized",
                          "superset.commands.database.test_connection",
                          "superset.databases.ssh_tunnel.models"
                        ],
                        "size_lines": 33,
                        "has_main": false,
                        "docstring": null
                      },
                      "importers": {
                        "__init__.py": {
                          "functions": [],
                          "classes": [],
                          "imports": [],
                          "size_lines": 17,
                          "has_main": false,
                          "docstring": null
                        },
                        "v1": {
                          "__init__.py": {
                            "functions": [],
                            "classes": [],
                            "imports": [],
                            "size_lines": 17,
                            "has_main": false,
                            "docstring": null
                          },
                          "import_test.py": {
                            "functions": [
                              "test_import_database",
                              "test_import_database_no_creds",
                              "test_import_database_sqlite_invalid",
                              "test_import_database_managed_externally",
                              "test_import_database_without_permission",
                              "test_import_database_with_version",
                              "test_import_database_with_user_impersonation"
                            ],
                            "classes": [],
                            "imports": [
                              "copy",
                              "pytest",
                              "pytest_mock",
                              "sqlalchemy.orm.session",
                              "superset",
                              "superset.commands.exceptions",
                              "superset.utils",
                              "superset",
                              "superset.commands.database.importers.v1.utils",
                              "superset.models.core",
                              "tests.integration_tests.fixtures.importexport",
                              "superset",
                              "superset.commands.database.importers.v1.utils",
                              "superset.models.core",
                              "tests.integration_tests.fixtures.importexport",
                              "superset",
                              "superset.commands.database.importers.v1.utils",
                              "superset.models.core",
                              "tests.integration_tests.fixtures.importexport",
                              "superset",
                              "superset.commands.database.importers.v1.utils",
                              "superset.models.core",
                              "tests.integration_tests.fixtures.importexport",
                              "superset",
                              "superset.commands.database.importers.v1.utils",
                              "superset.models.core",
                              "tests.integration_tests.fixtures.importexport",
                              "superset",
                              "superset.commands.database.importers.v1.utils",
                              "superset.models.core",
                              "tests.integration_tests.fixtures.importexport",
                              "superset",
                              "superset.commands.database.importers.v1.utils",
                              "superset.models.core",
                              "tests.integration_tests.fixtures.importexport"
                            ],
                            "size_lines": 218,
                            "has_main": false,
                            "docstring": null
                          }
                        }
                      }
                    }
                  },
                  "tasks": {
                    "test_utils.py": {
                      "functions": [
                        "_get_users",
                        "test_get_executor"
                      ],
                      "classes": [
                        "ModelConfig",
                        "ModelType"
                      ],
                      "imports": [
                        "contextlib",
                        "dataclasses",
                        "enum",
                        "typing",
                        "pytest",
                        "flask_appbuilder.security.sqla.models",
                        "superset.tasks.exceptions",
                        "superset.tasks.types",
                        "superset.models.dashboard",
                        "superset.models.slice",
                        "superset.reports.models",
                        "superset.tasks.utils"
                      ],
                      "size_lines": 333,
                      "has_main": false,
                      "docstring": null
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_async_queries.py": {
                      "functions": [
                        "test_load_chart_data_into_cache_with_error"
                      ],
                      "classes": [],
                      "imports": [
                        "unittest",
                        "pytest",
                        "flask_babel",
                        "superset.commands.chart.exceptions",
                        "superset.tasks.async_queries"
                      ],
                      "size_lines": 56,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_cron_util.py": {
                      "functions": [
                        "test_cron_schedule_window_los_angeles",
                        "test_cron_schedule_window_invalid_timezone",
                        "test_cron_schedule_window_new_york",
                        "test_cron_schedule_window_chicago",
                        "test_cron_schedule_window_chicago_daylight"
                      ],
                      "classes": [],
                      "imports": [
                        "datetime",
                        "pytest",
                        "freezegun.api",
                        "superset.tasks.cron_util"
                      ],
                      "size_lines": 238,
                      "has_main": false,
                      "docstring": null
                    }
                  },
                  "security": {
                    "manager_test.py": {
                      "functions": [
                        "test_security_manager",
                        "stored_metrics",
                        "stored_columns",
                        "test_raise_for_access_guest_user_ok",
                        "test_raise_for_access_guest_user_ok_subset",
                        "test_raise_for_access_guest_user_tampered_id",
                        "test_raise_for_access_guest_user_tampered_form_data_metrics",
                        "test_raise_for_access_guest_user_tampered_form_data_columns",
                        "test_raise_for_access_guest_user_tampered_form_data_groupby",
                        "test_raise_for_access_guest_user_tampered_queries_metrics",
                        "test_raise_for_access_guest_user_tampered_queries_columns",
                        "test_raise_for_access_query_default_schema",
                        "test_raise_for_access_jinja_sql",
                        "test_raise_for_access_chart_for_datasource_permission",
                        "test_raise_for_access_chart_on_admin",
                        "test_raise_for_access_chart_owner",
                        "test_query_context_modified",
                        "test_query_context_modified_tampered",
                        "test_query_context_modified_native_filter",
                        "test_query_context_modified_mixed_chart",
                        "test_query_context_modified_sankey_tampered",
                        "test_query_context_modified_orderby",
                        "test_get_catalog_perm",
                        "test_get_schema_perm",
                        "test_raise_for_access_catalog",
                        "test_get_datasources_accessible_by_user_schema_access",
                        "test_get_catalogs_accessible_by_user_schema_access"
                      ],
                      "classes": [],
                      "imports": [
                        "json",
                        "pytest",
                        "flask_appbuilder.security.sqla.models",
                        "pytest_mock",
                        "superset.common.query_object",
                        "superset.connectors.sqla.models",
                        "superset.exceptions",
                        "superset.extensions",
                        "superset.models.slice",
                        "superset.security.manager",
                        "superset.sql_parse",
                        "superset.superset_typing",
                        "superset.utils.core",
                        "flask_appbuilder.security.sqla.models",
                        "superset.models.slice",
                        "superset.utils.core"
                      ],
                      "size_lines": 1172,
                      "has_main": false,
                      "docstring": null
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "api_test.py": {
                      "functions": [
                        "test_csrf_not_exempt"
                      ],
                      "classes": [],
                      "imports": [
                        "pytest",
                        "superset.extensions"
                      ],
                      "size_lines": 36,
                      "has_main": false,
                      "docstring": null
                    }
                  },
                  "datasets": {
                    "conftest.py": {
                      "functions": [
                        "columns_default",
                        "sample_columns",
                        "sample_metrics"
                      ],
                      "classes": [],
                      "imports": [
                        "typing",
                        "pytest",
                        "superset.connectors.sqla.models",
                        "superset.connectors.sqla.models",
                        "superset.connectors.sqla.models"
                      ],
                      "size_lines": 125,
                      "has_main": false,
                      "docstring": null
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "schema_tests.py": {
                      "functions": [
                        "test_validate_python_date_format",
                        "test_validate_python_date_format_raises"
                      ],
                      "classes": [],
                      "imports": [
                        "pytest",
                        "marshmallow",
                        "superset.datasets.schemas"
                      ],
                      "size_lines": 49,
                      "has_main": false,
                      "docstring": null
                    },
                    "api_tests.py": {
                      "functions": [
                        "test_put_invalid_dataset"
                      ],
                      "classes": [],
                      "imports": [
                        "typing",
                        "sqlalchemy.orm.session",
                        "superset",
                        "superset.connectors.sqla.models",
                        "superset.models.core"
                      ],
                      "size_lines": 75,
                      "has_main": false,
                      "docstring": null
                    },
                    "dao": {
                      "dao_tests.py": {
                        "functions": [
                          "session_with_data",
                          "test_datasource_find_by_id_skip_base_filter",
                          "test_datasource_find_by_id_skip_base_filter_not_found",
                          "test_datasource_find_by_ids_skip_base_filter",
                          "test_datasource_find_by_ids_skip_base_filter_not_found"
                        ],
                        "classes": [],
                        "imports": [
                          "collections.abc",
                          "pytest",
                          "sqlalchemy.orm.session",
                          "superset.connectors.sqla.models",
                          "superset.models.core",
                          "superset.connectors.sqla.models",
                          "superset.daos.dataset",
                          "superset.daos.dataset",
                          "superset.connectors.sqla.models",
                          "superset.daos.dataset",
                          "superset.daos.dataset"
                        ],
                        "size_lines": 100,
                        "has_main": false,
                        "docstring": null
                      },
                      "__init__.py": {
                        "functions": [],
                        "classes": [],
                        "imports": [],
                        "size_lines": 17,
                        "has_main": false,
                        "docstring": null
                      }
                    },
                    "commands": {
                      "__init__.py": {
                        "functions": [],
                        "classes": [],
                        "imports": [],
                        "size_lines": 17,
                        "has_main": false,
                        "docstring": null
                      },
                      "export_test.py": {
                        "functions": [
                          "test_export"
                        ],
                        "classes": [],
                        "imports": [
                          "sqlalchemy.orm.session",
                          "superset",
                          "superset.utils",
                          "superset.commands.dataset.export",
                          "superset.connectors.sqla.models",
                          "superset.models.core"
                        ],
                        "size_lines": 229,
                        "has_main": false,
                        "docstring": null
                      },
                      "importers": {
                        "__init__.py": {
                          "functions": [],
                          "classes": [],
                          "imports": [],
                          "size_lines": 17,
                          "has_main": false,
                          "docstring": null
                        },
                        "v1": {
                          "__init__.py": {
                            "functions": [],
                            "classes": [],
                            "imports": [],
                            "size_lines": 17,
                            "has_main": false,
                            "docstring": null
                          },
                          "import_test.py": {
                            "functions": [
                              "test_import_dataset",
                              "test_import_dataset_duplicate_column",
                              "test_import_column_extra_is_string",
                              "test_import_dataset_extra_empty_string",
                              "test_import_column_allowed_data_url",
                              "test_import_dataset_managed_externally",
                              "test_import_dataset_without_owner_permission",
                              "test_validate_data_uri"
                            ],
                            "classes": [],
                            "imports": [
                              "copy",
                              "re",
                              "uuid",
                              "typing",
                              "unittest.mock",
                              "pytest",
                              "flask",
                              "flask_appbuilder.security.sqla.models",
                              "pytest_mock",
                              "sqlalchemy.orm.session",
                              "superset",
                              "superset.commands.dataset.exceptions",
                              "superset.commands.dataset.importers.v1.utils",
                              "superset.commands.exceptions",
                              "superset.utils",
                              "superset.utils.core",
                              "superset",
                              "superset.commands.dataset.importers.v1.utils",
                              "superset.connectors.sqla.models",
                              "superset.models.core",
                              "superset",
                              "superset.commands.dataset.importers.v1.utils",
                              "superset.connectors.sqla.models",
                              "superset.models.core",
                              "superset",
                              "superset.commands.dataset.importers.v1.utils",
                              "superset.connectors.sqla.models",
                              "superset.datasets.schemas",
                              "superset.models.core",
                              "superset",
                              "superset.commands.dataset.importers.v1.utils",
                              "superset.connectors.sqla.models",
                              "superset.datasets.schemas",
                              "superset.models.core",
                              "io",
                              "superset",
                              "superset.commands.dataset.importers.v1.utils",
                              "superset.connectors.sqla.models",
                              "superset.datasets.schemas",
                              "superset.models.core",
                              "superset",
                              "superset.commands.dataset.importers.v1.utils",
                              "superset.connectors.sqla.models",
                              "superset.models.core",
                              "tests.integration_tests.fixtures.importexport",
                              "superset",
                              "superset.commands.dataset.importers.v1.utils",
                              "superset.connectors.sqla.models",
                              "superset.models.core",
                              "tests.integration_tests.fixtures.importexport"
                            ],
                            "size_lines": 630,
                            "has_main": false,
                            "docstring": null
                          }
                        }
                      }
                    }
                  },
                  "dao": {
                    "user_test.py": {
                      "functions": [
                        "test_get_by_id_found",
                        "test_get_by_id_not_found",
                        "test_set_avatar_url_with_existing_attributes",
                        "test_set_avatar_url_without_existing_attributes",
                        "test_get_by_id_custom_user_class"
                      ],
                      "classes": [
                        "CustomUserModel"
                      ],
                      "imports": [
                        "__future__",
                        "pytest",
                        "flask_appbuilder.security.sqla.models",
                        "sqlalchemy.exc",
                        "superset",
                        "superset.daos.user",
                        "superset.extensions",
                        "superset.models.user_attributes",
                        "tests.unit_tests.fixtures.common"
                      ],
                      "size_lines": 79,
                      "has_main": false,
                      "docstring": null
                    },
                    "queries_test.py": {
                      "functions": [
                        "test_query_dao_save_metadata",
                        "test_query_dao_get_queries_changed_after",
                        "test_query_dao_stop_query_not_found",
                        "test_query_dao_stop_query_not_running",
                        "test_query_dao_stop_query_failed",
                        "test_query_dao_stop_query"
                      ],
                      "classes": [],
                      "imports": [
                        "datetime",
                        "typing",
                        "pytest",
                        "pytest_mock",
                        "sqlalchemy.orm.session",
                        "superset.exceptions",
                        "superset",
                        "superset.models.core",
                        "superset.models.sql_lab",
                        "superset.daos.query",
                        "superset",
                        "superset.models.core",
                        "superset.models.sql_lab",
                        "superset.daos.query",
                        "superset",
                        "superset.common.db_query_status",
                        "superset.models.core",
                        "superset.models.sql_lab",
                        "superset.daos.query",
                        "superset",
                        "superset.common.db_query_status",
                        "superset.models.core",
                        "superset.models.sql_lab",
                        "superset.daos.query",
                        "superset",
                        "superset.common.db_query_status",
                        "superset.models.core",
                        "superset.models.sql_lab",
                        "superset.daos.query",
                        "superset",
                        "superset.common.db_query_status",
                        "superset.models.core",
                        "superset.models.sql_lab",
                        "superset.daos.query"
                      ],
                      "size_lines": 282,
                      "has_main": false,
                      "docstring": null
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "dataset_test.py": {
                      "functions": [
                        "test_validate_update_uniqueness"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy.orm.session",
                        "superset.daos.dataset",
                        "superset.sql_parse",
                        "superset",
                        "superset.connectors.sqla.models",
                        "superset.models.core"
                      ],
                      "size_lines": 80,
                      "has_main": false,
                      "docstring": null
                    },
                    "tag_test.py": {
                      "functions": [
                        "test_user_favorite_tag",
                        "test_remove_user_favorite_tag",
                        "test_remove_user_favorite_tag_no_user",
                        "test_remove_user_favorite_tag_exc_raise",
                        "test_user_favorite_tag_no_user",
                        "test_user_favorite_tag_exc_raise",
                        "test_create_tag_relationship"
                      ],
                      "classes": [],
                      "imports": [
                        "pytest",
                        "superset.daos.tag",
                        "superset.daos.tag",
                        "superset.daos.tag",
                        "superset.exceptions",
                        "superset.daos.tag",
                        "superset.daos.tag",
                        "superset.exceptions",
                        "superset.daos.tag",
                        "superset.daos.tag",
                        "superset.tags.models"
                      ],
                      "size_lines": 164,
                      "has_main": false,
                      "docstring": null
                    },
                    "key_value_test.py": {
                      "functions": [
                        "key_value_entry",
                        "test_create_id_entry",
                        "test_create_uuid_entry",
                        "test_create_fail_json_entry",
                        "test_create_pickle_entry",
                        "test_get_value",
                        "test_get_id_entry",
                        "test_get_uuid_entry",
                        "test_get_id_entry_missing",
                        "test_get_expired_entry",
                        "test_get_future_expiring_entry",
                        "test_update_id_entry",
                        "test_update_uuid_entry",
                        "test_update_missing_entry",
                        "test_upsert_id_entry",
                        "test_upsert_uuid_entry",
                        "test_upsert_missing_entry",
                        "test_delete_id_entry",
                        "test_delete_uuid_entry",
                        "test_delete_entry_missing"
                      ],
                      "classes": [],
                      "imports": [
                        "__future__",
                        "pickle",
                        "datetime",
                        "typing",
                        "uuid",
                        "pytest",
                        "flask.ctx",
                        "flask_appbuilder.security.sqla.models",
                        "superset.extensions",
                        "superset.key_value.exceptions",
                        "superset.key_value.types",
                        "superset.utils",
                        "superset.utils.core",
                        "tests.unit_tests.fixtures.common",
                        "superset.key_value.models",
                        "superset.key_value.models",
                        "superset.daos.key_value",
                        "superset.key_value.models",
                        "superset.daos.key_value",
                        "superset.key_value.models",
                        "superset.daos.key_value",
                        "superset.daos.key_value",
                        "superset.key_value.models",
                        "superset.daos.key_value",
                        "superset.daos.key_value",
                        "superset.daos.key_value",
                        "superset.daos.key_value",
                        "superset.daos.key_value",
                        "superset.daos.key_value",
                        "superset.daos.key_value",
                        "superset.daos.key_value",
                        "superset.daos.key_value",
                        "superset.daos.key_value",
                        "superset.daos.key_value",
                        "superset.daos.key_value",
                        "superset.daos.key_value",
                        "superset.daos.key_value",
                        "superset.daos.key_value"
                      ],
                      "size_lines": 396,
                      "has_main": false,
                      "docstring": null
                    }
                  },
                  "queries": {
                    "query_object_test.py": {
                      "functions": [
                        "cache_impersonation_flag_side_effect",
                        "cache_query_by_user_flag_side_effect",
                        "test_default_query_object_to_dict",
                        "test_cache_key_consistent_for_query_object",
                        "test_cache_key_changes_for_new_query_object_different_params",
                        "test_cache_key_changes_for_new_query_object_same_params",
                        "test_cache_key_cache_query_by_user_on_no_datasource",
                        "test_cache_key_cache_query_by_user_on_no_user",
                        "test_cache_key_cache_query_by_user_on_with_user",
                        "test_cache_key_cache_query_by_user_on_with_different_user",
                        "test_cache_key_cache_impersonation_on_no_user",
                        "test_cache_key_cache_impersonation_on_with_user",
                        "test_cache_key_cache_impersonation_on_with_different_user",
                        "test_cache_key_cache_impersonation_on_with_different_user_and_db_impersonation",
                        "feature_flag_side_effect"
                      ],
                      "classes": [],
                      "imports": [
                        "unittest.mock",
                        "flask_appbuilder.security.sqla.models",
                        "superset.common.query_object",
                        "superset.connectors.sqla.models",
                        "superset.models.core",
                        "superset.utils.core"
                      ],
                      "size_lines": 345,
                      "has_main": false,
                      "docstring": null
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "dao_test.py": {
                      "functions": [
                        "test_column_attributes_on_query"
                      ],
                      "classes": [],
                      "imports": [
                        "superset.utils",
                        "superset.daos.query",
                        "superset.models.core",
                        "superset.models.sql_lab"
                      ],
                      "size_lines": 46,
                      "has_main": false,
                      "docstring": null
                    }
                  },
                  "charts": {
                    "test_client_processing.py": {
                      "functions": [
                        "test_pivot_df_no_cols_no_rows_single_metric",
                        "test_pivot_df_no_cols_no_rows_two_metrics",
                        "test_pivot_df_single_row_two_metrics",
                        "test_pivot_df_single_row_null_values",
                        "test_pivot_df_single_row_null_mix_values_strings",
                        "test_pivot_df_single_row_null_mix_values_numbers",
                        "test_pivot_df_complex",
                        "test_pivot_df_multi_column",
                        "test_pivot_df_complex_null_values",
                        "test_table",
                        "test_apply_client_processing_no_form_invalid_viz_type",
                        "test_apply_client_processing_without_result_format",
                        "test_apply_client_processing_json_format",
                        "test_apply_client_processing_csv_format",
                        "test_apply_client_processing_csv_format_empty_string",
                        "test_apply_client_processing_csv_format_no_data",
                        "test_apply_client_processing_csv_format_no_data_multiple_queries",
                        "test_apply_client_processing_json_format_empty_string",
                        "test_apply_client_processing_json_format_data_is_none",
                        "test_apply_client_processing_verbose_map",
                        "test_pivot_multi_level_index"
                      ],
                      "classes": [],
                      "imports": [
                        "pandas",
                        "pytest",
                        "flask_babel",
                        "sqlalchemy.orm.session",
                        "superset.charts.client_processing",
                        "superset.common.chart_data",
                        "superset.utils.core",
                        "superset",
                        "superset.connectors.sqla.models",
                        "superset.models.core"
                      ],
                      "size_lines": 2565,
                      "has_main": false,
                      "docstring": null
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "dao": {
                      "dao_tests.py": {
                        "functions": [
                          "session_with_data",
                          "test_slice_find_by_id_skip_base_filter",
                          "test_datasource_find_by_id_skip_base_filter_not_found",
                          "test_add_favorite",
                          "test_remove_favorite"
                        ],
                        "classes": [],
                        "imports": [
                          "collections.abc",
                          "pytest",
                          "sqlalchemy.orm.session",
                          "superset.utils.core",
                          "superset.models.slice",
                          "superset.daos.chart",
                          "superset.models.slice",
                          "superset.daos.chart",
                          "superset.daos.chart",
                          "superset.daos.chart"
                        ],
                        "size_lines": 99,
                        "has_main": false,
                        "docstring": null
                      },
                      "__init__.py": {
                        "functions": [],
                        "classes": [],
                        "imports": [],
                        "size_lines": 17,
                        "has_main": false,
                        "docstring": null
                      }
                    },
                    "commands": {
                      "__init__.py": {
                        "functions": [],
                        "classes": [],
                        "imports": [],
                        "size_lines": 17,
                        "has_main": false,
                        "docstring": null
                      },
                      "importers": {
                        "__init__.py": {
                          "functions": [],
                          "classes": [],
                          "imports": [],
                          "size_lines": 17,
                          "has_main": false,
                          "docstring": null
                        },
                        "v1": {
                          "utils_test.py": {
                            "functions": [
                              "test_migrate_chart_area",
                              "test_migrate_pivot_table"
                            ],
                            "classes": [],
                            "imports": [
                              "superset.commands.chart.importers.v1.utils",
                              "superset.utils"
                            ],
                            "size_lines": 174,
                            "has_main": false,
                            "docstring": null
                          },
                          "__init__.py": {
                            "functions": [],
                            "classes": [],
                            "imports": [],
                            "size_lines": 17,
                            "has_main": false,
                            "docstring": null
                          },
                          "import_test.py": {
                            "functions": [
                              "session_with_data",
                              "session_with_schema",
                              "test_import_chart",
                              "test_import_chart_managed_externally",
                              "test_import_chart_without_permission",
                              "test_filter_chart_annotations",
                              "test_import_existing_chart_without_permission",
                              "test_import_existing_chart_without_owner_permission",
                              "test_import_existing_chart_with_permission"
                            ],
                            "classes": [],
                            "imports": [
                              "copy",
                              "collections.abc",
                              "pytest",
                              "flask_appbuilder.security.sqla.models",
                              "pytest_mock",
                              "sqlalchemy.orm.session",
                              "superset",
                              "superset.commands.chart.importers.v1.utils",
                              "superset.commands.exceptions",
                              "superset.connectors.sqla.models",
                              "superset.models.slice",
                              "superset.utils.core",
                              "tests.integration_tests.fixtures.importexport",
                              "superset.connectors.sqla.models",
                              "superset.commands.chart.importers.v1.utils",
                              "tests.integration_tests.fixtures.importexport"
                            ],
                            "size_lines": 283,
                            "has_main": false,
                            "docstring": null
                          }
                        }
                      }
                    }
                  },
                  "utils": {
                    "excel_tests.py": {
                      "functions": [
                        "test_timezone_conversion",
                        "test_quote_formulas",
                        "test_column_data_types_with_one_numeric_column",
                        "test_column_data_types_with_failing_conversion",
                        "test_column_data_types_with_large_numeric_values"
                      ],
                      "classes": [],
                      "imports": [
                        "datetime",
                        "pandas",
                        "pandas.api.types",
                        "superset.utils.core",
                        "superset.utils.excel"
                      ],
                      "size_lines": 132,
                      "has_main": false,
                      "docstring": null
                    },
                    "cache_test.py": {
                      "functions": [
                        "test_memoized_func"
                      ],
                      "classes": [],
                      "imports": [
                        "pytest_mock",
                        "superset.utils.cache"
                      ],
                      "size_lines": 52,
                      "has_main": false,
                      "docstring": null
                    },
                    "log_tests.py": {
                      "functions": [
                        "test_log_from_status_exception",
                        "test_log_from_status_warning",
                        "test_log_from_status_info"
                      ],
                      "classes": [],
                      "imports": [
                        "superset.utils.log"
                      ],
                      "size_lines": 38,
                      "has_main": false,
                      "docstring": null
                    },
                    "date_parser_tests.py": {
                      "functions": [
                        "mock_parse_human_datetime",
                        "test_get_since_until",
                        "test_get_since_until_instant_time_comparison_enabled",
                        "test_previous_calendar_quarter",
                        "test_datetime_eval",
                        "test_parse_human_timedelta",
                        "test_parse_past_timedelta",
                        "test_get_past_or_future",
                        "test_parse_human_datetime",
                        "test_date_range_migration"
                      ],
                      "classes": [],
                      "imports": [
                        "re",
                        "datetime",
                        "typing",
                        "unittest.mock",
                        "freezegun",
                        "pytest",
                        "dateutil.relativedelta",
                        "superset.commands.chart.exceptions",
                        "superset.utils.date_parser",
                        "tests.unit_tests.conftest"
                      ],
                      "size_lines": 594,
                      "has_main": false,
                      "docstring": null
                    },
                    "db.py": {
                      "functions": [
                        "get_test_user"
                      ],
                      "classes": [],
                      "imports": [
                        "typing",
                        "superset"
                      ],
                      "size_lines": 31,
                      "has_main": false,
                      "docstring": null
                    },
                    "csv_tests.py": {
                      "functions": [
                        "test_escape_value",
                        "test_df_to_escaped_csv"
                      ],
                      "classes": [],
                      "imports": [
                        "pandas",
                        "pyarrow",
                        "pytest",
                        "superset.utils"
                      ],
                      "size_lines": 98,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_decorators.py": {
                      "functions": [
                        "test_debounce",
                        "test_statsd_gauge",
                        "test_context_decorator",
                        "test_suppress_logging",
                        "test_transacation_commit",
                        "test_transacation_rollback",
                        "test_transacation_nested",
                        "myfunc",
                        "my_func",
                        "myfunc",
                        "myfunc_with_kwargs",
                        "myfunc_with_dissallowed_kwargs",
                        "myfunc_with_context",
                        "myfunc_with_extra_keys_context",
                        "myfunc_with_bad_return_value",
                        "context_func_not_callable",
                        "__init__",
                        "emit",
                        "reset",
                        "func",
                        "func",
                        "func",
                        "func",
                        "nested"
                      ],
                      "classes": [
                        "ResponseValues",
                        "ListHandler"
                      ],
                      "imports": [
                        "logging",
                        "uuid",
                        "contextlib",
                        "inspect",
                        "typing",
                        "unittest.mock",
                        "pytest",
                        "pytest_mock",
                        "superset",
                        "superset.utils",
                        "superset.utils.backports"
                      ],
                      "size_lines": 350,
                      "has_main": false,
                      "docstring": null
                    },
                    "filters_test.py": {
                      "functions": [
                        "test_get_dataset_access_filters"
                      ],
                      "classes": [],
                      "imports": [
                        "pytest_mock",
                        "sqlalchemy",
                        "superset.utils.filters",
                        "superset.connectors.sqla.models",
                        "superset.extensions"
                      ],
                      "size_lines": 55,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_core.py": {
                      "functions": [
                        "test_remove_extra_adhoc_filters",
                        "test_is_test",
                        "test_parse_boolean_string",
                        "test_int_values",
                        "test_float_values",
                        "test_string_values",
                        "test_none_value",
                        "test_boolean_values",
                        "test_other_values",
                        "test_normalize_dttm_col",
                        "test_normalize_dttm_col_epoch_seconds",
                        "test_normalize_dttm_col_epoch_milliseconds",
                        "test_normalize_dttm_col_formatted_date",
                        "test_normalize_dttm_col_with_offset",
                        "test_normalize_dttm_col_with_time_shift",
                        "test_normalize_dttm_col_with_offset_and_time_shift",
                        "test_normalize_dttm_col_invalid_date_coerced",
                        "test_normalize_dttm_col_invalid_epoch_coerced",
                        "test_normalize_dttm_col_non_existing_column",
                        "test_normalize_dttm_col_multiple_columns",
                        "test_normalize_dttm_col_already_datetime_series",
                        "test_check_if_safe_zip_success",
                        "test_check_if_safe_zip_high_rate",
                        "test_check_if_safe_zip_hidden_bomb",
                        "test_generic_constraint_name_exists",
                        "test_generic_constraint_name_not_found",
                        "test_generic_find_fk_constraint_exists",
                        "test_generic_find_fk_constraint_none_exist",
                        "test_get_datasource_full_name",
                        "test_get_query_source_from_request",
                        "test_get_user_agent",
                        "test_merge_extra_filters",
                        "test_merge_extra_filters_ignores_empty_filters",
                        "test_merge_extra_filters_ignores_nones",
                        "test_merge_extra_filters_ignores_equal_filters",
                        "test_merge_extra_filters_merges_different_val_types",
                        "test_merge_extra_filters_adds_unequal_lists",
                        "test_merge_extra_filters_when_applied_time_extras_predefined",
                        "test_merge_request_params_when_url_params_undefined",
                        "test_merge_request_params_when_url_params_predefined",
                        "test_parse_js_uri_path_items_eval_undefined",
                        "test_parse_js_uri_path_items_unquote",
                        "test_parse_js_uri_path_items_item_optional",
                        "test_get_stacktrace"
                      ],
                      "classes": [
                        "MockZipInfo"
                      ],
                      "imports": [
                        "os",
                        "dataclasses",
                        "typing",
                        "unittest.mock",
                        "numpy",
                        "pandas",
                        "pytest",
                        "flask",
                        "pandas.api.types",
                        "pytest_mock",
                        "superset.exceptions",
                        "superset.utils.core"
                      ],
                      "size_lines": 1111,
                      "has_main": false,
                      "docstring": null
                    },
                    "slack_test.py": {
                      "functions": [
                        "__init__",
                        "data",
                        "test_fetch_all_channels_no_search_string",
                        "test_handle_empty_search_string",
                        "test_handle_exact_match_search_string_single_channel",
                        "test_handle_exact_match_search_string_multiple_channels",
                        "test_handle_loose_match_search_string_multiple_channels",
                        "test_handle_slack_client_error_listing_channels",
                        "test_filter_channels_by_specified_types",
                        "test_handle_pagination_multiple_pages"
                      ],
                      "classes": [
                        "MockResponse",
                        "TestGetChannelsWithSearch"
                      ],
                      "imports": [
                        "pytest",
                        "superset.utils.slack",
                        "slack_sdk.errors",
                        "superset.exceptions"
                      ],
                      "size_lines": 206,
                      "has_main": false,
                      "docstring": null
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "urls_tests.py": {
                      "functions": [
                        "test_convert_chart_link",
                        "test_convert_dashboard_link",
                        "test_convert_dashboard_link_with_integer"
                      ],
                      "classes": [],
                      "imports": [
                        "superset.utils.urls"
                      ],
                      "size_lines": 41,
                      "has_main": false,
                      "docstring": null
                    },
                    "json_tests.py": {
                      "functions": [
                        "test_json_loads",
                        "test_json_loads_exception",
                        "test_json_loads_encoding",
                        "test_json_loads_allow_nan",
                        "test_json_dumps",
                        "test_json_dumps_encoding",
                        "test_json_iso_dttm_ser",
                        "test_pessimistic_json_iso_dttm_ser",
                        "test_pessimistic_json_iso_dttm_ser_nonutf8",
                        "test_pessimistic_json_iso_dttm_ser_utf16",
                        "test_validate_json",
                        "test_sensitive_fields",
                        "test_base_json_conv",
                        "test_zlib_compression",
                        "test_json_int_dttm_ser",
                        "test_format_timedelta"
                      ],
                      "classes": [],
                      "imports": [
                        "copy",
                        "math",
                        "uuid",
                        "datetime",
                        "decimal",
                        "unittest.mock",
                        "numpy",
                        "pandas",
                        "pytest",
                        "superset.utils",
                        "superset.utils.core"
                      ],
                      "size_lines": 273,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_file.py": {
                      "functions": [
                        "test_get_filename"
                      ],
                      "classes": [],
                      "imports": [
                        "pytest",
                        "superset.utils.file"
                      ],
                      "size_lines": 44,
                      "has_main": false,
                      "docstring": null
                    },
                    "screenshot_test.py": {
                      "functions": [
                        "mock_user",
                        "screenshot_obj",
                        "test_get_screenshot",
                        "test_get_cache_key",
                        "test_get_from_cache_key",
                        "__init__",
                        "set",
                        "get",
                        "_setup_compute_and_cache",
                        "test_happy_path",
                        "test_screenshot_error",
                        "test_resize_error",
                        "test_skips_if_computing",
                        "test_skips_if_updated",
                        "test_resize"
                      ],
                      "classes": [
                        "MockCache",
                        "TestComputeAndCache"
                      ],
                      "imports": [
                        "unittest.mock",
                        "pytest",
                        "pytest_mock",
                        "superset.utils.hashing",
                        "superset.utils.screenshots"
                      ],
                      "size_lines": 195,
                      "has_main": false,
                      "docstring": null
                    },
                    "oauth2_tests.py": {
                      "functions": [
                        "test_get_oauth2_access_token_base_no_token",
                        "test_get_oauth2_access_token_base_token_valid",
                        "test_get_oauth2_access_token_base_refresh",
                        "test_get_oauth2_access_token_base_no_refresh"
                      ],
                      "classes": [],
                      "imports": [
                        "datetime",
                        "freezegun",
                        "pytest_mock",
                        "superset.utils.oauth2"
                      ],
                      "size_lines": 96,
                      "has_main": false,
                      "docstring": null
                    }
                  },
                  "importexport": {
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "api_test.py": {
                      "functions": [
                        "test_export_assets",
                        "test_import_assets",
                        "test_import_assets_not_zip",
                        "test_import_assets_no_form_data",
                        "test_import_assets_incorrect_form_data",
                        "test_import_assets_no_contents"
                      ],
                      "classes": [],
                      "imports": [
                        "io",
                        "pathlib",
                        "typing",
                        "zipfile",
                        "pytest_mock",
                        "superset",
                        "superset.utils",
                        "superset.commands.importers.v1.utils"
                      ],
                      "size_lines": 260,
                      "has_main": false,
                      "docstring": null
                    }
                  },
                  "models": {
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "core_test.py": {
                      "functions": [
                        "query",
                        "test_get_metrics",
                        "test_get_db_engine_spec",
                        "test_dttm_sql_literal",
                        "test_table_column_database",
                        "test_get_prequeries",
                        "test_catalog_cache",
                        "test_get_default_catalog",
                        "test_get_default_schema",
                        "test_get_all_catalog_names",
                        "test_get_all_schema_names_needs_oauth2",
                        "test_get_all_catalog_names_needs_oauth2",
                        "test_get_sqla_engine",
                        "test_get_sqla_engine_user_impersonation",
                        "test_add_database_to_signature",
                        "test_get_sqla_engine_user_impersonation_email",
                        "test_is_oauth2_enabled",
                        "test_get_oauth2_config",
                        "test_raw_connection_oauth_engine",
                        "test_raw_connection_oauth_connection",
                        "test_raw_connection_oauth_execute",
                        "test_get_schema_access_for_file_upload",
                        "test_engine_context_manager",
                        "test_engine_oauth2",
                        "test_purge_oauth2_tokens",
                        "test_compile_sqla_query_no_optimization",
                        "test_compile_sqla_query",
                        "test_get_all_table_names_in_schema",
                        "test_get_all_view_names_in_schema",
                        "func_without_db",
                        "func_with_db_start",
                        "func_with_db_end",
                        "get_metrics"
                      ],
                      "classes": [
                        "CustomSqliteEngineSpec",
                        "PostgresDBEngineSpec",
                        "OldDBEngineSpec",
                        "DriverSpecificError",
                        "DriverSpecificError"
                      ],
                      "imports": [
                        "datetime",
                        "pytest",
                        "pytest_mock",
                        "sqlalchemy",
                        "sqlalchemy.engine.reflection",
                        "sqlalchemy.engine.url",
                        "sqlalchemy.orm.session",
                        "sqlalchemy.sql",
                        "superset.connectors.sqla.models",
                        "superset.errors",
                        "superset.exceptions",
                        "superset.models.core",
                        "superset.sql_parse",
                        "superset.utils",
                        "tests.unit_tests.conftest",
                        "superset.db_engine_specs.base",
                        "superset.db_engine_specs.sqlite",
                        "superset.models.core",
                        "superset.db_engine_specs",
                        "superset.models.core",
                        "superset.models.core",
                        "superset.models.core",
                        "superset.models.core",
                        "flask_appbuilder.security.sqla.models",
                        "superset.models.core",
                        "superset.models.core",
                        "superset.models.core"
                      ],
                      "size_lines": 913,
                      "has_main": false,
                      "docstring": null
                    },
                    "helpers_test.py": {
                      "functions": [
                        "database",
                        "test_values_for_column",
                        "test_values_for_column_with_rls",
                        "test_values_for_column_with_rls_no_values",
                        "test_values_for_column_calculated",
                        "test_values_for_column_double_percents",
                        "mock_get_sqla_engine"
                      ],
                      "classes": [],
                      "imports": [
                        "__future__",
                        "contextlib",
                        "typing",
                        "unittest.mock",
                        "pytest",
                        "pytest_mock",
                        "sqlalchemy",
                        "sqlalchemy.orm.session",
                        "sqlalchemy.pool",
                        "superset.models.core",
                        "superset.connectors.sqla.models",
                        "superset.models.core",
                        "superset.connectors.sqla.models",
                        "sqlalchemy.sql.elements",
                        "superset.connectors.sqla.models",
                        "sqlalchemy.sql.elements",
                        "superset.connectors.sqla.models",
                        "superset.connectors.sqla.models",
                        "superset.connectors.sqla.models"
                      ],
                      "size_lines": 213,
                      "has_main": false,
                      "docstring": null
                    },
                    "sql_lab_test.py": {
                      "functions": [
                        "test_sql_tables_mixin_sql_tables_exception"
                      ],
                      "classes": [],
                      "imports": [
                        "unittest.mock",
                        "pytest",
                        "flask_appbuilder",
                        "jinja2.exceptions",
                        "pytest_mock",
                        "superset.errors",
                        "superset.exceptions",
                        "superset.models.sql_lab"
                      ],
                      "size_lines": 60,
                      "has_main": false,
                      "docstring": null
                    }
                  },
                  "explore": {
                    "utils_test.py": {
                      "functions": [
                        "test_unsaved_chart_no_dataset_id",
                        "test_unsaved_chart_unknown_dataset_id",
                        "test_unsaved_chart_unknown_query_id",
                        "test_unsaved_chart_unauthorized_dataset",
                        "test_unsaved_chart_authorized_dataset",
                        "test_saved_chart_unknown_chart_id",
                        "test_saved_chart_unauthorized_dataset",
                        "test_saved_chart_is_admin",
                        "test_saved_chart_is_owner",
                        "test_saved_chart_has_access",
                        "test_saved_chart_no_access",
                        "test_dataset_has_access",
                        "test_query_has_access",
                        "test_query_no_access"
                      ],
                      "classes": [],
                      "imports": [
                        "flask_appbuilder.security.sqla.models",
                        "pytest",
                        "pytest_mock",
                        "superset.commands.chart.exceptions",
                        "superset.commands.dataset.exceptions",
                        "superset.commands.exceptions",
                        "superset.exceptions",
                        "superset.utils.core",
                        "superset.explore.utils",
                        "superset.explore.utils",
                        "superset.explore.utils",
                        "superset.connectors.sqla.models",
                        "superset.explore.utils",
                        "superset.connectors.sqla.models",
                        "superset.explore.utils",
                        "superset.connectors.sqla.models",
                        "superset.explore.utils",
                        "superset.connectors.sqla.models",
                        "superset.explore.utils",
                        "superset.connectors.sqla.models",
                        "superset.explore.utils",
                        "superset.models.slice",
                        "superset.connectors.sqla.models",
                        "superset.explore.utils",
                        "superset.models.slice",
                        "superset.connectors.sqla.models",
                        "superset.explore.utils",
                        "superset.models.slice",
                        "superset.connectors.sqla.models",
                        "superset.explore.utils",
                        "superset.models.slice",
                        "superset.connectors.sqla.models",
                        "superset.explore.utils",
                        "superset.explore.utils",
                        "superset.models.sql_lab",
                        "superset.connectors.sqla.models",
                        "superset.explore.utils",
                        "superset.models.sql_lab"
                      ],
                      "size_lines": 291,
                      "has_main": false,
                      "docstring": null
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "api_test.py": {
                      "functions": [
                        "test_explore_datasource_not_found"
                      ],
                      "classes": [],
                      "imports": [
                        "typing"
                      ],
                      "size_lines": 29,
                      "has_main": false,
                      "docstring": null
                    }
                  },
                  "extensions": {
                    "ssh_test.py": {
                      "functions": [
                        "test_ssh_tunnel_timeout_setting"
                      ],
                      "classes": [],
                      "imports": [
                        "unittest.mock",
                        "sshtunnel",
                        "superset.extensions.ssh"
                      ],
                      "size_lines": 37,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_sqlalchemy.py": {
                      "functions": [
                        "database1",
                        "table1",
                        "database2",
                        "table2",
                        "test_superset",
                        "test_superset_limit",
                        "test_superset_joins",
                        "test_dml",
                        "test_security_manager",
                        "test_allowed_dbs"
                      ],
                      "classes": [],
                      "imports": [
                        "os",
                        "collections.abc",
                        "typing",
                        "pytest",
                        "pytest_mock",
                        "sqlalchemy.engine",
                        "sqlalchemy.exc",
                        "sqlalchemy.orm.session",
                        "superset",
                        "superset.errors",
                        "superset.exceptions",
                        "tests.unit_tests.conftest",
                        "superset.models.core",
                        "superset.models.core",
                        "superset.models.core"
                      ],
                      "size_lines": 258,
                      "has_main": false,
                      "docstring": null
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    }
                  },
                  "tags": {
                    "filters_test.py": {
                      "functions": [
                        "test_base_tag_filter_by_name",
                        "test_base_tag_filter_by_id"
                      ],
                      "classes": [],
                      "imports": [
                        "pytest",
                        "flask_appbuilder",
                        "flask_appbuilder.models.sqla.interface",
                        "sqlalchemy.orm.session",
                        "superset.models.dashboard",
                        "superset.models.slice",
                        "superset.models.sql_lab",
                        "superset.tags.filters"
                      ],
                      "size_lines": 86,
                      "has_main": false,
                      "docstring": null
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "commands": {
                      "create_test.py": {
                        "functions": [
                          "session_with_data",
                          "test_create_command_success",
                          "test_create_command_success_clear"
                        ],
                        "classes": [],
                        "imports": [
                          "pytest",
                          "pytest_mock",
                          "sqlalchemy.orm.session",
                          "superset",
                          "superset.utils.core",
                          "superset.connectors.sqla.models",
                          "superset.models.core",
                          "superset.models.dashboard",
                          "superset.models.slice",
                          "superset.models.sql_lab",
                          "superset.commands.tag.create",
                          "superset.models.dashboard",
                          "superset.models.slice",
                          "superset.models.sql_lab",
                          "superset.tags.models",
                          "superset.commands.tag.create",
                          "superset.models.dashboard",
                          "superset.models.slice",
                          "superset.models.sql_lab",
                          "superset.tags.models"
                        ],
                        "size_lines": 147,
                        "has_main": false,
                        "docstring": null
                      },
                      "update_test.py": {
                        "functions": [
                          "session_with_data",
                          "test_update_command_success",
                          "test_update_command_success_duplicates",
                          "test_update_command_failed_validation"
                        ],
                        "classes": [],
                        "imports": [
                          "pytest",
                          "pytest_mock",
                          "sqlalchemy.orm.session",
                          "superset",
                          "superset.utils.core",
                          "superset.connectors.sqla.models",
                          "superset.models.core",
                          "superset.models.dashboard",
                          "superset.models.slice",
                          "superset.models.sql_lab",
                          "superset.tags.models",
                          "superset.commands.tag.update",
                          "superset.daos.tag",
                          "superset.models.dashboard",
                          "superset.tags.models",
                          "superset.commands.tag.create",
                          "superset.commands.tag.update",
                          "superset.daos.tag",
                          "superset.models.dashboard",
                          "superset.models.slice",
                          "superset.tags.models",
                          "superset.commands.tag.create",
                          "superset.commands.tag.exceptions",
                          "superset.commands.tag.update",
                          "superset.daos.tag",
                          "superset.models.dashboard",
                          "superset.models.slice",
                          "superset.tags.models"
                        ],
                        "size_lines": 207,
                        "has_main": false,
                        "docstring": null
                      }
                    }
                  },
                  "common": {
                    "test_process_time_range.py": {
                      "functions": [
                        "test_process_time_range"
                      ],
                      "classes": [],
                      "imports": [
                        "superset.common.query_object_factory",
                        "superset.constants"
                      ],
                      "size_lines": 49,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_dataframe_utils.py": {
                      "functions": [
                        "test_is_datetime_series"
                      ],
                      "classes": [],
                      "imports": [
                        "datetime",
                        "pandas",
                        "superset.common.utils"
                      ],
                      "size_lines": 51,
                      "has_main": false,
                      "docstring": null
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_time_shifts.py": {
                      "functions": [
                        "make_join_column_producer",
                        "test_join_column",
                        "test_join_column_producer",
                        "test_join_offset_dfs_no_offsets",
                        "test_join_offset_dfs_with_offsets",
                        "test_join_offset_dfs_with_multiple_offsets",
                        "test_join_offset_dfs_with_month_granularity",
                        "join_column_producer"
                      ],
                      "classes": [],
                      "imports": [
                        "pandas",
                        "pandas.testing",
                        "pytest",
                        "superset.common.chart_data",
                        "superset.common.query_context",
                        "superset.common.query_context_processor",
                        "superset.connectors.sqla.models",
                        "superset.constants"
                      ],
                      "size_lines": 188,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_query_object_factory.py": {
                      "functions": [
                        "create_app_config",
                        "app_config",
                        "connector_registry",
                        "apply_max_row_limit",
                        "query_object_factory",
                        "raw_query_context",
                        "metric_label_raw_query_context",
                        "test_query_context_limit_and_offset_defaults",
                        "test_query_context_limit",
                        "test_query_context_null_post_processing_op",
                        "test_query_context_metric_names"
                      ],
                      "classes": [
                        "TestQueryObjectFactory"
                      ],
                      "imports": [
                        "typing",
                        "unittest.mock",
                        "pytest",
                        "superset.common.query_object_factory",
                        "tests.common.query_context_generator",
                        "superset.common.query_object_factory"
                      ],
                      "size_lines": 135,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_time_range_utils.py": {
                      "functions": [
                        "test__get_since_until_from_time_range",
                        "test__since_until_from_time_range",
                        "test__since_until_from_adhoc_filters"
                      ],
                      "classes": [],
                      "imports": [
                        "datetime",
                        "unittest",
                        "pytest",
                        "superset.common.utils.time_range_utils"
                      ],
                      "size_lines": 95,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_query_context_processor.py": {
                      "functions": [
                        "mock_query_context",
                        "processor",
                        "test_get_data_table_like",
                        "test_get_data_csv",
                        "test_get_data_xlsx",
                        "test_get_data_json",
                        "test_get_data_invalid_dataframe",
                        "test_get_data_non_unique_columns",
                        "test_get_data_empty_dataframe_json",
                        "test_get_data_empty_dataframe_csv",
                        "test_get_data_empty_dataframe_xlsx",
                        "test_get_data_nan_values_json",
                        "test_get_data_invalid_input",
                        "test_get_data_default_format_when_result_format_is_none",
                        "fake_apply_column_types",
                        "test_get_data_invalid_coltypes_length_xlsx",
                        "test_get_data_does_not_mutate_dataframe",
                        "test_get_data_xlsx_apply_column_types_error"
                      ],
                      "classes": [],
                      "imports": [
                        "unittest.mock",
                        "numpy",
                        "pandas",
                        "pytest",
                        "superset.common.chart_data",
                        "superset.common.query_context_processor",
                        "superset.utils.core"
                      ],
                      "size_lines": 239,
                      "has_main": false,
                      "docstring": null
                    }
                  },
                  "db_engine_specs": {
                    "test_kusto.py": {
                      "functions": [
                        "test_sql_has_mutation",
                        "test_kql_is_select_query",
                        "test_kql_has_mutation",
                        "test_kql_parse_sql",
                        "test_kql_convert_dttm",
                        "test_sql_convert_dttm",
                        "test_timegrain_expressions"
                      ],
                      "classes": [],
                      "imports": [
                        "datetime",
                        "typing",
                        "pytest",
                        "sqlalchemy",
                        "superset.db_engine_specs.kusto",
                        "superset.sql.parse",
                        "superset.sql_parse",
                        "tests.unit_tests.db_engine_specs.utils",
                        "tests.unit_tests.fixtures.common",
                        "superset.db_engine_specs.kusto",
                        "superset.db_engine_specs.kusto",
                        "superset.db_engine_specs.kusto",
                        "superset.db_engine_specs.kusto",
                        "superset.db_engine_specs.kusto",
                        "superset.db_engine_specs.kusto"
                      ],
                      "size_lines": 176,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_doris.py": {
                      "functions": [
                        "test_get_column_spec",
                        "test_adjust_engine_params",
                        "test_get_schema_from_engine_params",
                        "test_get_default_catalog",
                        "test_get_catalog_names"
                      ],
                      "classes": [],
                      "imports": [
                        "typing",
                        "unittest.mock",
                        "pytest",
                        "sqlalchemy",
                        "sqlalchemy.engine.url",
                        "superset.db_engine_specs.doris",
                        "superset.utils.core",
                        "tests.unit_tests.db_engine_specs.utils",
                        "superset.db_engine_specs.doris",
                        "superset.db_engine_specs.doris",
                        "superset.db_engine_specs.doris",
                        "superset.db_engine_specs.doris",
                        "superset.models.core",
                        "superset.db_engine_specs.doris",
                        "superset.models.core"
                      ],
                      "size_lines": 217,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_snowflake.py": {
                      "functions": [
                        "test_convert_dttm",
                        "test_database_connection_test_mutator",
                        "test_extract_errors",
                        "test_get_cancel_query_id",
                        "test_cancel_query",
                        "test_cancel_query_failed",
                        "test_get_extra_params",
                        "test_get_schema_from_engine_params",
                        "test_adjust_engine_params_fully_qualified",
                        "test_adjust_engine_params_catalog_only",
                        "test_get_default_catalog",
                        "test_mask_encrypted_extra",
                        "test_mask_encrypted_extra_no_fields",
                        "test_unmask_encrypted_extra"
                      ],
                      "classes": [],
                      "imports": [
                        "datetime",
                        "typing",
                        "unittest",
                        "pytest",
                        "pytest_mock",
                        "sqlalchemy.engine.url",
                        "superset.errors",
                        "superset.utils",
                        "tests.unit_tests.db_engine_specs.utils",
                        "tests.unit_tests.fixtures.common",
                        "superset.db_engine_specs.snowflake",
                        "superset.db_engine_specs.snowflake",
                        "superset.models.core",
                        "superset.db_engine_specs.snowflake",
                        "superset.db_engine_specs.snowflake",
                        "superset.models.sql_lab",
                        "superset.db_engine_specs.snowflake",
                        "superset.models.sql_lab",
                        "superset.db_engine_specs.snowflake",
                        "superset.models.sql_lab",
                        "superset.db_engine_specs.snowflake",
                        "superset.db_engine_specs.snowflake",
                        "superset.db_engine_specs.snowflake",
                        "superset.db_engine_specs.snowflake",
                        "superset.db_engine_specs.snowflake",
                        "superset.models.core",
                        "superset.db_engine_specs.snowflake",
                        "superset.db_engine_specs.snowflake",
                        "superset.db_engine_specs.snowflake"
                      ],
                      "size_lines": 399,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_databricks.py": {
                      "functions": [
                        "test_get_parameters_from_uri",
                        "test_build_sqlalchemy_uri",
                        "test_parameters_json_schema",
                        "test_get_extra_params",
                        "test_extract_errors",
                        "test_extract_errors_with_context",
                        "test_convert_dttm",
                        "test_get_prequeries"
                      ],
                      "classes": [],
                      "imports": [
                        "datetime",
                        "typing",
                        "pytest",
                        "pytest_mock",
                        "superset.db_engine_specs.databricks",
                        "superset.errors",
                        "superset.utils",
                        "tests.unit_tests.db_engine_specs.utils",
                        "tests.unit_tests.fixtures.common",
                        "superset.db_engine_specs.databricks",
                        "superset.db_engine_specs.databricks",
                        "superset.db_engine_specs.databricks",
                        "superset.db_engine_specs.databricks",
                        "superset.db_engine_specs.databricks",
                        "superset.db_engine_specs.databricks"
                      ],
                      "size_lines": 287,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_elasticsearch.py": {
                      "functions": [
                        "test_elasticsearch_convert_dttm",
                        "test_opendistro_convert_dttm",
                        "test_opendistro_sqla_column_label",
                        "test_opendistro_strip_comments"
                      ],
                      "classes": [],
                      "imports": [
                        "datetime",
                        "typing",
                        "unittest.mock",
                        "pytest",
                        "sqlalchemy",
                        "tests.unit_tests.db_engine_specs.utils",
                        "tests.unit_tests.fixtures.common",
                        "superset.db_engine_specs.elasticsearch",
                        "superset.db_engine_specs.elasticsearch",
                        "superset.db_engine_specs.elasticsearch",
                        "superset.db_engine_specs.elasticsearch"
                      ],
                      "size_lines": 114,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_crdb.py": {
                      "functions": [
                        "test_convert_dttm"
                      ],
                      "classes": [],
                      "imports": [
                        "datetime",
                        "typing",
                        "pytest",
                        "tests.unit_tests.db_engine_specs.utils",
                        "tests.unit_tests.fixtures.common",
                        "superset.db_engine_specs.cockroachdb"
                      ],
                      "size_lines": 45,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_druid.py": {
                      "functions": [
                        "test_convert_dttm",
                        "test_timegrain_expressions",
                        "test_extras_without_ssl",
                        "test_extras_with_ssl"
                      ],
                      "classes": [],
                      "imports": [
                        "datetime",
                        "typing",
                        "unittest",
                        "pytest",
                        "sqlalchemy",
                        "tests.unit_tests.db_engine_specs.utils",
                        "tests.unit_tests.fixtures.common",
                        "superset.db_engine_specs.druid",
                        "superset.db_engine_specs.druid",
                        "superset.db_engine_specs.druid",
                        "tests.integration_tests.fixtures.database",
                        "superset.db_engine_specs.druid",
                        "tests.integration_tests.fixtures.certificates",
                        "tests.integration_tests.fixtures.database"
                      ],
                      "size_lines": 98,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_impala.py": {
                      "functions": [
                        "test_convert_dttm",
                        "test_get_cancel_query_id",
                        "test_cancel_query",
                        "test_cancel_query_failed",
                        "test_cancel_query_exception"
                      ],
                      "classes": [],
                      "imports": [
                        "datetime",
                        "typing",
                        "unittest.mock",
                        "pytest",
                        "superset.db_engine_specs.impala",
                        "superset.models.core",
                        "superset.models.sql_lab",
                        "tests.unit_tests.db_engine_specs.utils",
                        "tests.unit_tests.fixtures.common"
                      ],
                      "size_lines": 118,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_bigquery.py": {
                      "functions": [
                        "test_get_fields",
                        "test_select_star",
                        "test_get_parameters_from_uri_serializable",
                        "test_unmask_encrypted_extra",
                        "test_unmask_encrypted_extra_field_changeed",
                        "test_unmask_encrypted_extra_when_old_is_none",
                        "test_unmask_encrypted_extra_when_new_is_none",
                        "test_mask_encrypted_extra",
                        "test_mask_encrypted_extra_when_empty",
                        "test_parse_error_message",
                        "test_parse_error_raises_exception",
                        "test_convert_dttm",
                        "test_get_default_catalog",
                        "test_adjust_engine_params_catalog_as_host",
                        "test_adjust_engine_params_catalog_as_database",
                        "test_adjust_engine_params_no_catalog"
                      ],
                      "classes": [],
                      "imports": [
                        "datetime",
                        "typing",
                        "pytest",
                        "pytest_mock",
                        "sqlalchemy",
                        "sqlalchemy.engine.url",
                        "sqlalchemy.sql",
                        "sqlalchemy_bigquery",
                        "superset.sql_parse",
                        "superset.superset_typing",
                        "superset.utils",
                        "tests.unit_tests.db_engine_specs.utils",
                        "tests.unit_tests.fixtures.common",
                        "superset.db_engine_specs.bigquery",
                        "superset.db_engine_specs.bigquery",
                        "superset.db_engine_specs.bigquery",
                        "superset.db_engine_specs.bigquery",
                        "superset.db_engine_specs.bigquery",
                        "superset.db_engine_specs.bigquery",
                        "superset.db_engine_specs.bigquery",
                        "superset.db_engine_specs.bigquery",
                        "superset.db_engine_specs.bigquery",
                        "superset.db_engine_specs.bigquery",
                        "superset.db_engine_specs.bigquery",
                        "superset.db_engine_specs.bigquery",
                        "superset.db_engine_specs.bigquery",
                        "superset.models.core",
                        "superset.db_engine_specs.bigquery",
                        "superset.db_engine_specs.bigquery",
                        "superset.db_engine_specs.bigquery"
                      ],
                      "size_lines": 494,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_drill.py": {
                      "functions": [
                        "test_odbc_impersonation",
                        "test_jdbc_impersonation",
                        "test_sadrill_impersonation",
                        "test_invalid_impersonation",
                        "test_convert_dttm",
                        "test_get_schema_from_engine_params"
                      ],
                      "classes": [],
                      "imports": [
                        "datetime",
                        "typing",
                        "pytest",
                        "pytest_mock",
                        "sqlalchemy.engine.url",
                        "tests.unit_tests.db_engine_specs.utils",
                        "tests.unit_tests.fixtures.common",
                        "sqlalchemy.engine.url",
                        "superset.db_engine_specs.drill",
                        "sqlalchemy.engine.url",
                        "superset.db_engine_specs.drill",
                        "sqlalchemy.engine.url",
                        "superset.db_engine_specs.drill",
                        "sqlalchemy.engine.url",
                        "superset.db_engine_specs.drill",
                        "superset.db_engine_specs.exceptions",
                        "superset.db_engine_specs.drill",
                        "superset.db_engine_specs.drill"
                      ],
                      "size_lines": 160,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_crate.py": {
                      "functions": [
                        "test_epoch_to_dttm",
                        "test_epoch_ms_to_dttm",
                        "test_alter_new_orm_column",
                        "test_convert_dttm"
                      ],
                      "classes": [],
                      "imports": [
                        "datetime",
                        "typing",
                        "pytest",
                        "tests.unit_tests.db_engine_specs.utils",
                        "tests.unit_tests.fixtures.common",
                        "superset.db_engine_specs.crate",
                        "superset.db_engine_specs.crate",
                        "superset.connectors.sqla.models",
                        "superset.db_engine_specs.crate",
                        "superset.models.core",
                        "superset.db_engine_specs.crate"
                      ],
                      "size_lines": 74,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_presto.py": {
                      "functions": [
                        "test_convert_dttm",
                        "test_get_column_spec",
                        "test_get_schema_from_engine_params",
                        "test_where_latest_partition",
                        "test_adjust_engine_params_fully_qualified",
                        "test_adjust_engine_params_catalog_only",
                        "test_get_default_catalog",
                        "test_timegrain_expressions"
                      ],
                      "classes": [],
                      "imports": [
                        "datetime",
                        "typing",
                        "unittest",
                        "pytest",
                        "pytz",
                        "pyhive.sqlalchemy_presto",
                        "sqlalchemy",
                        "sqlalchemy.engine.url",
                        "superset.sql_parse",
                        "superset.utils.core",
                        "tests.unit_tests.db_engine_specs.utils",
                        "superset.db_engine_specs.presto",
                        "superset.db_engine_specs.presto",
                        "superset.db_engine_specs.presto",
                        "superset.db_engine_specs.presto",
                        "superset.db_engine_specs.presto",
                        "superset.db_engine_specs.presto",
                        "superset.db_engine_specs.presto",
                        "superset.models.core",
                        "superset.db_engine_specs.presto"
                      ],
                      "size_lines": 306,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_firebird.py": {
                      "functions": [
                        "test_time_grain_expressions",
                        "test_epoch_to_dttm",
                        "test_convert_dttm"
                      ],
                      "classes": [],
                      "imports": [
                        "datetime",
                        "typing",
                        "pytest",
                        "tests.unit_tests.db_engine_specs.utils",
                        "tests.unit_tests.fixtures.common",
                        "superset.db_engine_specs.firebird",
                        "superset.db_engine_specs.firebird",
                        "superset.db_engine_specs.firebird"
                      ],
                      "size_lines": 107,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_couchbase.py": {
                      "functions": [
                        "test_epoch_to_dttm",
                        "test_epoch_ms_to_dttm",
                        "test_convert_dttm",
                        "test_get_column_spec"
                      ],
                      "classes": [],
                      "imports": [
                        "datetime",
                        "typing",
                        "pytest",
                        "sqlalchemy",
                        "superset.utils.core",
                        "tests.unit_tests.db_engine_specs.utils",
                        "tests.unit_tests.fixtures.common",
                        "superset.db_engine_specs.couchbase",
                        "superset.db_engine_specs.couchbase",
                        "superset.db_engine_specs.couchbase",
                        "superset.db_engine_specs.couchbase"
                      ],
                      "size_lines": 98,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_redshift.py": {
                      "functions": [
                        "test_convert_dttm"
                      ],
                      "classes": [],
                      "imports": [
                        "datetime",
                        "typing",
                        "pytest",
                        "tests.unit_tests.db_engine_specs.utils",
                        "tests.unit_tests.fixtures.common",
                        "superset.db_engine_specs.redshift"
                      ],
                      "size_lines": 52,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_firebolt.py": {
                      "functions": [
                        "test_convert_dttm",
                        "test_epoch_to_dttm"
                      ],
                      "classes": [],
                      "imports": [
                        "datetime",
                        "typing",
                        "pytest",
                        "tests.unit_tests.db_engine_specs.utils",
                        "tests.unit_tests.fixtures.common",
                        "superset.db_engine_specs.firebolt",
                        "superset.db_engine_specs.firebolt"
                      ],
                      "size_lines": 62,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_pinot.py": {
                      "functions": [
                        "test_timegrain_expressions",
                        "test_extras_without_ssl"
                      ],
                      "classes": [],
                      "imports": [
                        "unittest",
                        "pytest",
                        "sqlalchemy",
                        "superset.db_engine_specs.pinot",
                        "superset.db_engine_specs.pinot",
                        "tests.integration_tests.fixtures.database"
                      ],
                      "size_lines": 58,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_oracle.py": {
                      "functions": [
                        "test_oracle_sqla_column_name_length_exceeded",
                        "test_oracle_time_expression_reserved_keyword_1m_grain",
                        "test_column_datatype_to_string",
                        "test_fetch_data_no_description",
                        "test_fetch_data",
                        "test_convert_dttm",
                        "test_denormalize_name"
                      ],
                      "classes": [],
                      "imports": [
                        "datetime",
                        "typing",
                        "unittest",
                        "pytest",
                        "sqlalchemy",
                        "sqlalchemy.dialects",
                        "sqlalchemy.dialects.oracle",
                        "sqlalchemy.sql",
                        "tests.unit_tests.db_engine_specs.utils",
                        "tests.unit_tests.fixtures.common",
                        "superset.db_engine_specs.oracle",
                        "superset.db_engine_specs.oracle",
                        "superset.db_engine_specs.oracle",
                        "superset.db_engine_specs.oracle",
                        "superset.db_engine_specs.oracle",
                        "superset.db_engine_specs.oracle",
                        "superset.db_engine_specs.oracle"
                      ],
                      "size_lines": 130,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_athena.py": {
                      "functions": [
                        "test_convert_dttm",
                        "test_extract_errors",
                        "test_get_text_clause_with_colon"
                      ],
                      "classes": [],
                      "imports": [
                        "re",
                        "datetime",
                        "typing",
                        "pytest",
                        "superset.errors",
                        "tests.unit_tests.db_engine_specs.utils",
                        "tests.unit_tests.fixtures.common",
                        "superset.db_engine_specs.athena",
                        "superset.db_engine_specs.athena",
                        "superset.db_engine_specs.athena"
                      ],
                      "size_lines": 90,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_duckdb.py": {
                      "functions": [
                        "test_convert_dttm",
                        "test_get_extra_params",
                        "test_build_sqlalchemy_uri",
                        "test_md_build_sqlalchemy_uri",
                        "test_get_parameters_from_uri"
                      ],
                      "classes": [],
                      "imports": [
                        "datetime",
                        "typing",
                        "pytest",
                        "pytest_mock",
                        "superset.config",
                        "superset.utils",
                        "tests.unit_tests.db_engine_specs.utils",
                        "tests.unit_tests.fixtures.common",
                        "superset.db_engine_specs.duckdb",
                        "superset.db_engine_specs.duckdb",
                        "superset.db_engine_specs.duckdb",
                        "superset.db_engine_specs.duckdb",
                        "superset.db_engine_specs.duckdb"
                      ],
                      "size_lines": 130,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_kylin.py": {
                      "functions": [
                        "test_convert_dttm"
                      ],
                      "classes": [],
                      "imports": [
                        "datetime",
                        "typing",
                        "pytest",
                        "tests.unit_tests.db_engine_specs.utils",
                        "tests.unit_tests.fixtures.common",
                        "superset.db_engine_specs.kylin"
                      ],
                      "size_lines": 43,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_oceanbase.py": {
                      "functions": [
                        "test_get_column_spec"
                      ],
                      "classes": [],
                      "imports": [
                        "typing",
                        "pytest",
                        "sqlalchemy",
                        "superset.db_engine_specs.oceanbase",
                        "superset.utils.core",
                        "tests.unit_tests.db_engine_specs.utils",
                        "superset.db_engine_specs.oceanbase"
                      ],
                      "size_lines": 62,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_starrocks.py": {
                      "functions": [
                        "test_get_column_spec",
                        "test_adjust_engine_params",
                        "test_get_schema_from_engine_params",
                        "test_impersonation_username",
                        "test_impersonation_disabled"
                      ],
                      "classes": [],
                      "imports": [
                        "typing",
                        "pytest",
                        "pytest_mock",
                        "sqlalchemy",
                        "sqlalchemy.engine.url",
                        "superset.db_engine_specs.starrocks",
                        "superset.utils.core",
                        "tests.unit_tests.db_engine_specs.utils",
                        "superset.db_engine_specs.starrocks",
                        "superset.db_engine_specs.starrocks",
                        "superset.db_engine_specs.starrocks",
                        "superset.db_engine_specs.starrocks",
                        "superset.db_engine_specs.starrocks"
                      ],
                      "size_lines": 176,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_dynamodb.py": {
                      "functions": [
                        "test_convert_dttm"
                      ],
                      "classes": [],
                      "imports": [
                        "datetime",
                        "typing",
                        "pytest",
                        "tests.unit_tests.db_engine_specs.utils",
                        "tests.unit_tests.fixtures.common",
                        "superset.db_engine_specs.dynamodb"
                      ],
                      "size_lines": 45,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_databend.py": {
                      "functions": [
                        "test_convert_dttm",
                        "test_execute_connection_error",
                        "test_get_column_spec",
                        "test_make_label_compatible"
                      ],
                      "classes": [],
                      "imports": [
                        "datetime",
                        "typing",
                        "unittest.mock",
                        "pytest",
                        "sqlalchemy.types",
                        "urllib3.connection",
                        "superset.utils.core",
                        "tests.unit_tests.db_engine_specs.utils",
                        "tests.unit_tests.fixtures.common",
                        "superset.db_engine_specs.databend",
                        "urllib3.exceptions",
                        "superset.db_engine_specs.databend",
                        "superset.db_engine_specs.exceptions",
                        "superset.db_engine_specs.databend",
                        "superset.db_engine_specs.databend"
                      ],
                      "size_lines": 141,
                      "has_main": false,
                      "docstring": null
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_mysql.py": {
                      "functions": [
                        "test_get_column_spec",
                        "test_convert_dttm",
                        "test_validate_database_uri",
                        "test_adjust_engine_params",
                        "test_get_cancel_query_id",
                        "test_cancel_query",
                        "test_cancel_query_failed",
                        "test_get_schema_from_engine_params",
                        "test_column_type_mutator"
                      ],
                      "classes": [],
                      "imports": [
                        "datetime",
                        "decimal",
                        "typing",
                        "unittest.mock",
                        "pytest",
                        "sqlalchemy",
                        "sqlalchemy.dialects.mysql",
                        "sqlalchemy.engine.url",
                        "superset.utils.core",
                        "tests.unit_tests.db_engine_specs.utils",
                        "tests.unit_tests.fixtures.common",
                        "superset.db_engine_specs.mysql",
                        "superset.db_engine_specs.mysql",
                        "superset.db_engine_specs.mysql",
                        "superset.db_engine_specs.mysql",
                        "superset.db_engine_specs.mysql",
                        "superset.models.sql_lab",
                        "superset.db_engine_specs.mysql",
                        "superset.models.sql_lab",
                        "superset.db_engine_specs.mysql",
                        "superset.models.sql_lab",
                        "superset.db_engine_specs.mysql",
                        "superset.db_engine_specs.mysql"
                      ],
                      "size_lines": 265,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_tdengine.py": {
                      "functions": [
                        "test_get_schema_from_engine_params"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy.engine.url",
                        "superset.db_engine_specs.tdengine"
                      ],
                      "size_lines": 35,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_ydb.py": {
                      "functions": [
                        "test_epoch_to_dttm",
                        "test_convert_dttm",
                        "test_specify_protocol",
                        "test_specify_credentials"
                      ],
                      "classes": [],
                      "imports": [
                        "__future__",
                        "datetime",
                        "typing",
                        "unittest.mock",
                        "pytest",
                        "superset.utils",
                        "tests.unit_tests.db_engine_specs.utils",
                        "tests.unit_tests.fixtures.common",
                        "superset.db_engine_specs.ydb",
                        "superset.db_engine_specs.ydb",
                        "superset.db_engine_specs.ydb",
                        "superset.db_engine_specs.ydb"
                      ],
                      "size_lines": 84,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_ocient.py": {
                      "functions": [
                        "ocient_is_installed",
                        "test_connection_errors",
                        "_generate_gis_type_sanitization_test_cases",
                        "test_gis_type_sanitization",
                        "test_point_list_to_wkt",
                        "die"
                      ],
                      "classes": [],
                      "imports": [
                        "typing",
                        "pytest",
                        "superset.db_engine_specs.ocient",
                        "superset.errors",
                        "superset.db_engine_specs.ocient",
                        "pyocient",
                        "pyocient"
                      ],
                      "size_lines": 409,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_teradata.py": {
                      "functions": [
                        "test_apply_top_to_sql_limit"
                      ],
                      "classes": [],
                      "imports": [
                        "pytest",
                        "superset.db_engine_specs.teradata"
                      ],
                      "size_lines": 44,
                      "has_main": false,
                      "docstring": null
                    },
                    "utils.py": {
                      "functions": [
                        "assert_convert_dttm",
                        "assert_column_spec"
                      ],
                      "classes": [],
                      "imports": [
                        "__future__",
                        "datetime",
                        "typing",
                        "sqlalchemy",
                        "superset.utils.core",
                        "superset.db_engine_specs.base"
                      ],
                      "size_lines": 68,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_trino.py": {
                      "functions": [
                        "_assert_columns_equal",
                        "test_get_extra_params",
                        "test_get_extra_params_with_server_cert",
                        "test_auth_basic",
                        "test_auth_kerberos",
                        "test_auth_certificate",
                        "test_auth_jwt",
                        "test_auth_custom_auth",
                        "test_auth_custom_auth_denied",
                        "test_get_column_spec",
                        "test_convert_dttm",
                        "test_get_extra_table_metadata",
                        "test_cancel_query_success",
                        "test_cancel_query_failed",
                        "test_prepare_cancel_query",
                        "test_handle_cursor_early_cancel",
                        "test_execute_with_cursor_in_parallel",
                        "test_execute_with_cursor_app_context",
                        "test_get_columns",
                        "test_get_columns_error",
                        "test_get_columns_expand_rows",
                        "test_get_indexes_no_table",
                        "test_get_dbapi_exception_mapping",
                        "test_adjust_engine_params_fully_qualified",
                        "test_adjust_engine_params_catalog_only",
                        "test_get_default_catalog",
                        "test_where_latest_partition",
                        "oauth2_config",
                        "test_get_oauth2_token",
                        "test_timegrain_expressions",
                        "_mock_execute",
                        "_mock_execute"
                      ],
                      "classes": [],
                      "imports": [
                        "__future__",
                        "copy",
                        "collections",
                        "datetime",
                        "typing",
                        "unittest.mock",
                        "pandas",
                        "pytest",
                        "flask",
                        "pytest_mock",
                        "requests.exceptions",
                        "sqlalchemy",
                        "sqlalchemy.dialects",
                        "sqlalchemy.engine.url",
                        "sqlalchemy.exc",
                        "trino.exceptions",
                        "trino.sqlalchemy",
                        "trino.sqlalchemy.dialect",
                        "superset.config",
                        "superset.constants",
                        "superset.db_engine_specs.exceptions",
                        "superset.sql_parse",
                        "superset.superset_typing",
                        "superset.utils",
                        "superset.utils.core",
                        "tests.unit_tests.db_engine_specs.utils",
                        "tests.unit_tests.fixtures.common",
                        "superset.db_engine_specs.trino",
                        "superset.db_engine_specs.trino",
                        "superset.db_engine_specs.trino",
                        "superset.db_engine_specs.trino",
                        "superset.db_engine_specs.trino",
                        "superset.db_engine_specs.trino",
                        "superset.db_engine_specs.trino",
                        "superset.db_engine_specs.trino",
                        "superset.db_engine_specs.trino",
                        "superset.db_engine_specs.trino",
                        "superset.db_engine_specs.trino",
                        "superset.db_engine_specs.trino",
                        "superset.models.sql_lab",
                        "superset.db_engine_specs.trino",
                        "superset.models.sql_lab",
                        "superset.db_engine_specs.trino",
                        "superset.models.sql_lab",
                        "superset.db_engine_specs.trino",
                        "superset.models.sql_lab",
                        "superset.db_engine_specs.trino",
                        "superset.db_engine_specs.trino",
                        "superset.db_engine_specs.trino",
                        "superset.db_engine_specs.trino",
                        "superset.db_engine_specs.trino",
                        "superset.db_engine_specs.trino",
                        "superset.db_engine_specs.trino",
                        "superset.db_engine_specs.trino",
                        "superset.db_engine_specs.trino",
                        "superset.db_engine_specs.trino",
                        "superset.models.core",
                        "superset.db_engine_specs.trino",
                        "superset.db_engine_specs.trino",
                        "superset.db_engine_specs.trino"
                      ],
                      "size_lines": 914,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_mssql.py": {
                      "functions": [
                        "test_get_column_spec",
                        "test_where_clause_n_prefix",
                        "test_time_exp_mixed_case_col_1y",
                        "test_convert_dttm",
                        "test_extract_error_message",
                        "test_fetch_data_no_description",
                        "test_fetch_data",
                        "test_column_datatype_to_string",
                        "test_cte_query_parsing",
                        "test_top_query_parsing",
                        "test_extract_errors",
                        "test_denormalize_name"
                      ],
                      "classes": [],
                      "imports": [
                        "unittest.mock",
                        "datetime",
                        "textwrap",
                        "typing",
                        "pytest",
                        "sqlalchemy",
                        "sqlalchemy.dialects",
                        "sqlalchemy.dialects.mssql",
                        "sqlalchemy.sql",
                        "sqlalchemy.types",
                        "superset.errors",
                        "superset.models.sql_types.mssql_sql_types",
                        "superset.utils.core",
                        "tests.unit_tests.db_engine_specs.utils",
                        "tests.unit_tests.fixtures.common",
                        "superset.db_engine_specs.mssql",
                        "superset.db_engine_specs.mssql",
                        "superset.db_engine_specs.mssql",
                        "superset.db_engine_specs.mssql",
                        "superset.db_engine_specs.mssql",
                        "superset.db_engine_specs.mssql",
                        "superset.db_engine_specs.base",
                        "superset.db_engine_specs.mssql",
                        "superset.db_engine_specs.mssql",
                        "superset.db_engine_specs.mssql",
                        "superset.db_engine_specs.mssql",
                        "superset.db_engine_specs.mssql",
                        "superset.db_engine_specs.mssql"
                      ],
                      "size_lines": 459,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_dremio.py": {
                      "functions": [
                        "test_convert_dttm",
                        "test_get_allows_alias_in_select"
                      ],
                      "classes": [],
                      "imports": [
                        "datetime",
                        "typing",
                        "pytest",
                        "pytest_mock",
                        "tests.unit_tests.db_engine_specs.utils",
                        "tests.unit_tests.fixtures.common",
                        "superset.db_engine_specs.dremio",
                        "superset.db_engine_specs.dremio"
                      ],
                      "size_lines": 61,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_denodo.py": {
                      "functions": [
                        "test_convert_dttm",
                        "test_epoch_to_dttm",
                        "test_get_column_spec",
                        "test_get_schema_from_engine_params",
                        "test_get_default_catalog",
                        "test_timegrain_expressions"
                      ],
                      "classes": [],
                      "imports": [
                        "datetime",
                        "typing",
                        "pytest",
                        "sqlalchemy",
                        "sqlalchemy.engine.url",
                        "superset.db_engine_specs.denodo",
                        "superset.utils.core",
                        "tests.unit_tests.db_engine_specs.utils",
                        "tests.unit_tests.fixtures.common",
                        "superset.models.core"
                      ],
                      "size_lines": 147,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_hive.py": {
                      "functions": [
                        "test_convert_dttm",
                        "test_get_schema_from_engine_params"
                      ],
                      "classes": [],
                      "imports": [
                        "datetime",
                        "typing",
                        "pytest",
                        "sqlalchemy.engine.url",
                        "tests.unit_tests.db_engine_specs.utils",
                        "tests.unit_tests.fixtures.common",
                        "superset.db_engine_specs.hive",
                        "superset.db_engine_specs.hive"
                      ],
                      "size_lines": 62,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_hana.py": {
                      "functions": [
                        "test_convert_dttm"
                      ],
                      "classes": [],
                      "imports": [
                        "datetime",
                        "typing",
                        "pytest",
                        "tests.unit_tests.db_engine_specs.utils",
                        "tests.unit_tests.fixtures.common",
                        "superset.db_engine_specs.hana"
                      ],
                      "size_lines": 46,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_rockset.py": {
                      "functions": [
                        "test_convert_dttm"
                      ],
                      "classes": [],
                      "imports": [
                        "datetime",
                        "typing",
                        "pytest",
                        "tests.unit_tests.db_engine_specs.utils",
                        "tests.unit_tests.fixtures.common",
                        "superset.db_engine_specs.rockset"
                      ],
                      "size_lines": 44,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_db2.py": {
                      "functions": [
                        "test_epoch_to_dttm",
                        "test_get_table_comment",
                        "test_get_table_comment_empty",
                        "test_get_prequeries"
                      ],
                      "classes": [],
                      "imports": [
                        "pytest",
                        "pytest_mock",
                        "superset.sql_parse",
                        "superset.db_engine_specs.db2",
                        "superset.db_engine_specs.db2",
                        "superset.db_engine_specs.db2",
                        "superset.db_engine_specs.db2"
                      ],
                      "size_lines": 81,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_base.py": {
                      "functions": [
                        "test_get_text_clause_with_colon",
                        "test_parse_sql_single_statement",
                        "test_parse_sql_multi_statement",
                        "test_validate_db_uri",
                        "test_cte_query_parsing",
                        "test_get_column_spec",
                        "test_convert_inspector_columns",
                        "test_select_star",
                        "test_extra_table_metadata",
                        "test_get_default_catalog",
                        "test_quote_table",
                        "test_mask_encrypted_extra",
                        "test_unmask_encrypted_extra",
                        "test_impersonate_user_backwards_compatible",
                        "test_impersonate_user_no_database",
                        "mock_validate",
                        "extra_table_metadata"
                      ],
                      "classes": [
                        "NoLimitDBEngineSpec",
                        "ThirdPartyDBEngineSpec"
                      ],
                      "imports": [
                        "__future__",
                        "json",
                        "textwrap",
                        "typing",
                        "pytest",
                        "pytest_mock",
                        "sqlalchemy",
                        "sqlalchemy.dialects",
                        "sqlalchemy.engine.url",
                        "sqlalchemy.sql",
                        "superset.sql_parse",
                        "superset.superset_typing",
                        "superset.utils.core",
                        "tests.unit_tests.db_engine_specs.utils",
                        "superset.db_engine_specs.base",
                        "superset.db_engine_specs.base",
                        "superset.db_engine_specs.base",
                        "superset.db_engine_specs.base",
                        "superset.db_engine_specs.base",
                        "superset.db_engine_specs.databricks",
                        "superset.db_engine_specs.base",
                        "superset.db_engine_specs.base",
                        "superset.db_engine_specs.base",
                        "superset.models.core",
                        "superset.db_engine_specs.base",
                        "superset.db_engine_specs.base",
                        "superset.db_engine_specs.base",
                        "superset.db_engine_specs.base",
                        "superset.db_engine_specs.base",
                        "superset.db_engine_specs.base"
                      ],
                      "size_lines": 467,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_init.py": {
                      "functions": [
                        "test_get_available_engine_specs",
                        "test_get_available_engine_specs_with_denylist"
                      ],
                      "classes": [],
                      "imports": [
                        "pytest",
                        "pytest_mock",
                        "superset.db_engine_specs",
                        "superset.db_engine_specs.databricks",
                        "superset.db_engine_specs.databricks"
                      ],
                      "size_lines": 80,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_parseable.py": {
                      "functions": [
                        "test_epoch_to_dttm",
                        "test_epoch_ms_to_dttm",
                        "test_alter_new_orm_column",
                        "test_convert_dttm"
                      ],
                      "classes": [],
                      "imports": [
                        "datetime",
                        "typing",
                        "pytest",
                        "tests.unit_tests.db_engine_specs.utils",
                        "tests.unit_tests.fixtures.common",
                        "superset.db_engine_specs.parseable",
                        "superset.db_engine_specs.parseable",
                        "superset.connectors.sqla.models",
                        "superset.db_engine_specs.parseable",
                        "superset.models.core",
                        "superset.db_engine_specs.parseable"
                      ],
                      "size_lines": 78,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_sqlite.py": {
                      "functions": [
                        "test_convert_dttm",
                        "test_time_grain_expressions"
                      ],
                      "classes": [],
                      "imports": [
                        "datetime",
                        "typing",
                        "pytest",
                        "sqlalchemy.engine",
                        "superset.constants",
                        "tests.unit_tests.db_engine_specs.utils",
                        "tests.unit_tests.fixtures.common",
                        "superset.db_engine_specs.sqlite",
                        "superset.db_engine_specs.sqlite"
                      ],
                      "size_lines": 132,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_clickhouse.py": {
                      "functions": [
                        "test_convert_dttm",
                        "test_execute_connection_error",
                        "test_connect_convert_dttm",
                        "test_connect_get_column_spec",
                        "test_connect_make_label_compatible"
                      ],
                      "classes": [],
                      "imports": [
                        "datetime",
                        "typing",
                        "unittest.mock",
                        "pytest",
                        "sqlalchemy.types",
                        "urllib3.connection",
                        "urllib3.exceptions",
                        "superset.utils.core",
                        "tests.unit_tests.db_engine_specs.utils",
                        "tests.unit_tests.fixtures.common",
                        "superset.db_engine_specs.clickhouse",
                        "superset.db_engine_specs.clickhouse",
                        "superset.db_engine_specs.exceptions",
                        "superset.db_engine_specs.clickhouse",
                        "superset.db_engine_specs.clickhouse",
                        "superset.db_engine_specs.clickhouse"
                      ],
                      "size_lines": 228,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_gsheets.py": {
                      "functions": [
                        "test_validate_parameters_simple",
                        "test_validate_parameters_no_catalog",
                        "test_validate_parameters_simple_with_in_root_catalog",
                        "test_validate_parameters_catalog",
                        "test_validate_parameters_catalog_and_credentials",
                        "test_mask_encrypted_extra",
                        "test_unmask_encrypted_extra",
                        "test_unmask_encrypted_extra_field_changeed",
                        "test_unmask_encrypted_extra_when_old_is_none",
                        "test_unmask_encrypted_extra_when_new_is_none",
                        "test_upload_new",
                        "test_upload_existing",
                        "test_impersonate_user_username",
                        "test_impersonate_user_access_token",
                        "test_is_oauth2_enabled_no_config",
                        "test_is_oauth2_enabled_config",
                        "oauth2_config",
                        "test_get_oauth2_authorization_uri",
                        "test_get_oauth2_token",
                        "test_get_oauth2_fresh_token",
                        "test_update_params_from_encrypted_extra"
                      ],
                      "classes": [
                        "ProgrammingError"
                      ],
                      "imports": [
                        "typing",
                        "urllib.parse",
                        "pandas",
                        "pytest",
                        "pytest_mock",
                        "sqlalchemy.engine.url",
                        "superset.errors",
                        "superset.exceptions",
                        "superset.sql_parse",
                        "superset.superset_typing",
                        "superset.utils",
                        "superset.utils.oauth2",
                        "superset.db_engine_specs.base",
                        "superset.db_engine_specs.gsheets",
                        "superset.db_engine_specs.gsheets",
                        "superset.db_engine_specs.gsheets",
                        "superset.db_engine_specs.gsheets",
                        "superset.db_engine_specs.gsheets",
                        "superset.db_engine_specs.gsheets",
                        "superset.db_engine_specs.gsheets",
                        "superset.db_engine_specs.gsheets",
                        "superset.db_engine_specs.gsheets",
                        "superset.db_engine_specs.gsheets",
                        "superset.db_engine_specs.gsheets",
                        "superset.db_engine_specs.gsheets",
                        "superset.db_engine_specs.gsheets",
                        "superset.db_engine_specs.gsheets",
                        "superset.db_engine_specs.gsheets",
                        "superset.db_engine_specs.gsheets",
                        "superset.db_engine_specs.gsheets",
                        "superset.db_engine_specs.gsheets",
                        "superset.db_engine_specs.gsheets",
                        "superset.db_engine_specs.gsheets"
                      ],
                      "size_lines": 720,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_postgres.py": {
                      "functions": [
                        "test_convert_dttm",
                        "test_get_column_spec",
                        "test_get_schema_from_engine_params",
                        "test_get_prequeries",
                        "test_get_default_schema_for_query",
                        "test_adjust_engine_params",
                        "test_get_default_catalog",
                        "test_timegrain_expressions"
                      ],
                      "classes": [],
                      "imports": [
                        "datetime",
                        "typing",
                        "pytest",
                        "pytest_mock",
                        "sqlalchemy",
                        "sqlalchemy.dialects.postgresql",
                        "sqlalchemy.engine.url",
                        "superset.db_engine_specs.postgres",
                        "superset.exceptions",
                        "superset.utils.core",
                        "tests.unit_tests.db_engine_specs.utils",
                        "tests.unit_tests.fixtures.common",
                        "superset.models.core"
                      ],
                      "size_lines": 246,
                      "has_main": false,
                      "docstring": null
                    }
                  },
                  "async_events": {
                    "async_query_manager_tests.py": {
                      "functions": [
                        "async_query_manager",
                        "set_current_as_guest_user",
                        "test_parse_channel_id_from_request",
                        "test_parse_channel_id_from_request_no_cookie",
                        "test_parse_channel_id_from_request_bad_jwt",
                        "test_submit_chart_data_job_as_guest_user",
                        "test_submit_explore_json_job_as_guest_user"
                      ],
                      "classes": [],
                      "imports": [
                        "unittest",
                        "unittest.mock",
                        "flask",
                        "jwt",
                        "pytest",
                        "superset",
                        "superset.async_events.async_query_manager",
                        "superset.async_events.cache_backend"
                      ],
                      "size_lines": 169,
                      "has_main": false,
                      "docstring": null
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    }
                  },
                  "dashboards": {
                    "dao_tests.py": {
                      "functions": [
                        "session_with_data",
                        "test_add_favorite",
                        "test_remove_favorite"
                      ],
                      "classes": [],
                      "imports": [
                        "collections.abc",
                        "pytest",
                        "sqlalchemy.orm.session",
                        "superset.models.dashboard",
                        "superset.daos.dashboard",
                        "superset.daos.dashboard"
                      ],
                      "size_lines": 76,
                      "has_main": false,
                      "docstring": null
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "commands": {
                      "__init__.py": {
                        "functions": [],
                        "classes": [],
                        "imports": [],
                        "size_lines": 17,
                        "has_main": false,
                        "docstring": null
                      },
                      "importers": {
                        "__init__.py": {
                          "functions": [],
                          "classes": [],
                          "imports": [],
                          "size_lines": 17,
                          "has_main": false,
                          "docstring": null
                        },
                        "v1": {
                          "utils_test.py": {
                            "functions": [
                              "test_update_id_refs_immune_missing",
                              "test_update_native_filter_config_scope_excluded"
                            ],
                            "classes": [],
                            "imports": [
                              "typing",
                              "superset.commands.dashboard.importers.v1.utils",
                              "superset.commands.dashboard.importers.v1.utils"
                            ],
                            "size_lines": 124,
                            "has_main": false,
                            "docstring": null
                          },
                          "__init__.py": {
                            "functions": [],
                            "classes": [],
                            "imports": [],
                            "size_lines": 17,
                            "has_main": false,
                            "docstring": null
                          },
                          "import_test.py": {
                            "functions": [
                              "session_with_data",
                              "session_with_schema",
                              "test_import_dashboard",
                              "test_import_dashboard_managed_externally",
                              "test_import_dashboard_without_permission",
                              "test_import_existing_dashboard_without_access_permission",
                              "test_import_existing_dashboard_without_owner_permission",
                              "test_import_existing_dashboard_with_permission"
                            ],
                            "classes": [],
                            "imports": [
                              "copy",
                              "collections.abc",
                              "pytest",
                              "flask_appbuilder.security.sqla.models",
                              "pytest_mock",
                              "sqlalchemy.orm.session",
                              "superset",
                              "superset.commands.dashboard.importers.v1.utils",
                              "superset.commands.exceptions",
                              "superset.models.dashboard",
                              "superset.utils.core",
                              "tests.integration_tests.fixtures.importexport"
                            ],
                            "size_lines": 241,
                            "has_main": false,
                            "docstring": null
                          }
                        }
                      }
                    }
                  },
                  "scripts": {
                    "tag_latest_release_test.py": {
                      "functions": [
                        "wrapped",
                        "test_tag_latest_release"
                      ],
                      "classes": [],
                      "imports": [
                        "subprocess",
                        "unittest",
                        "pytest",
                        "tests.unit_tests.fixtures.bash_mock"
                      ],
                      "size_lines": 65,
                      "has_main": false,
                      "docstring": null
                    }
                  },
                  "annotation_layers": {
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "schema_tests.py": {
                      "functions": [
                        "test_annotation_layer_post_schema_with_name",
                        "test_annotation_layer_post_schema_with_name_and_descr",
                        "test_annotation_layer_post_schema_with_null_name",
                        "test_annotation_layer_post_schema_empty",
                        "test_annotation_layer_put_schema_empty",
                        "test_annotation_layer_put_schema_with_null_name",
                        "test_annotation_layer_put_schema_with_null_descr",
                        "test_annotation_post_schema_basic",
                        "test_annotation_post_schema_full",
                        "test_annotation_post_schema_short_descr_null",
                        "test_annotation_post_schema_start_dttm_null",
                        "test_annotation_post_schema_end_dttm_null",
                        "test_annotation_put_schema_empty",
                        "test_annotation_put_schema_short_descr_null",
                        "test_annotation_put_schema_start_dttm_null",
                        "test_annotation_put_schema_end_dttm_null",
                        "test_annotation_put_schema_json_metadata",
                        "test_annotation_put_schema_json_metadata_null",
                        "test_annotation_put_schema_json_metadata_empty",
                        "test_annotation_put_schema_json_metadata_invalid"
                      ],
                      "classes": [],
                      "imports": [
                        "pytest",
                        "marshmallow.exceptions",
                        "superset.annotation_layers.annotations.schemas",
                        "superset.annotation_layers.schemas",
                        "tests.unit_tests.annotation_layers.fixtures"
                      ],
                      "size_lines": 158,
                      "has_main": false,
                      "docstring": null
                    },
                    "fixtures.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [
                        "dateutil.parser"
                      ],
                      "size_lines": 25,
                      "has_main": false,
                      "docstring": null
                    }
                  },
                  "fixtures": {
                    "assets_configs.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [
                        "typing"
                      ],
                      "size_lines": 261,
                      "has_main": false,
                      "docstring": null
                    },
                    "bash_mock.py": {
                      "functions": [
                        "tag_latest_release"
                      ],
                      "classes": [
                        "BashMock"
                      ],
                      "imports": [
                        "subprocess"
                      ],
                      "size_lines": 33,
                      "has_main": false,
                      "docstring": null
                    },
                    "datasets.py": {
                      "functions": [
                        "get_column_mock",
                        "get_metric_mock",
                        "get_dataset_mock"
                      ],
                      "classes": [],
                      "imports": [
                        "typing",
                        "unittest.mock"
                      ],
                      "size_lines": 207,
                      "has_main": false,
                      "docstring": null
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "common.py": {
                      "functions": [
                        "dttm",
                        "create_csv_file",
                        "create_excel_file",
                        "create_columnar_file",
                        "admin_user",
                        "after_each"
                      ],
                      "classes": [],
                      "imports": [
                        "__future__",
                        "csv",
                        "datetime",
                        "io",
                        "typing",
                        "pandas",
                        "pytest",
                        "flask_appbuilder.security.sqla.models",
                        "werkzeug.datastructures",
                        "superset"
                      ],
                      "size_lines": 100,
                      "has_main": false,
                      "docstring": null
                    },
                    "dataframes.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [
                        "datetime",
                        "pandas"
                      ],
                      "size_lines": 203,
                      "has_main": false,
                      "docstring": null
                    }
                  },
                  "commands": {
                    "test_utils.py": {
                      "functions": [
                        "test_populate_owner_list_default_to_user",
                        "test_populate_owner_list_default_to_user_handle_none",
                        "test_populate_owner_list_admin_user",
                        "test_populate_owner_list_admin_user_empty_list",
                        "test_populate_owner_list_non_admin",
                        "test_compute_owner_list_new_owners",
                        "test_compute_owner_list_no_new_owners",
                        "test_compute_owner_list_new_owner_empty_list",
                        "test_compute_owner_list_no_owners",
                        "test_compute_owner_list_no_owners_handle_none",
                        "test_validate_tags_new_tags_is_none",
                        "test_validate_tags_empty_list_can_write_on_tag",
                        "test_validate_tags_empty_list_can_tag_on_object",
                        "test_validate_tags_empty_list_missing_permission",
                        "test_validate_tags_no_changes_can_write_on_tag",
                        "test_validate_tags_no_changes_can_tag_on_object",
                        "test_validate_tags_no_changes_missing_permission",
                        "test_validate_tags_add_new_tags_can_write_on_tag",
                        "test_validate_tags_add_new_tags_can_tag_on_object",
                        "test_validate_tags_can_write_on_tag_unable_to_find_tag",
                        "test_validate_tags_can_tag_on_object_unable_to_find_tag",
                        "test_update_tags_adding_tags",
                        "test_update_tags_removing_tags",
                        "test_update_tags_adding_and_removing_tags",
                        "test_update_tags_removing_all_tags",
                        "test_update_tags_no_tags"
                      ],
                      "classes": [],
                      "imports": [
                        "unittest.mock",
                        "pytest",
                        "superset.commands.exceptions",
                        "superset.commands.utils",
                        "superset.tags.models"
                      ],
                      "size_lines": 480,
                      "has_main": false,
                      "docstring": null
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "export_test.py": {
                      "functions": [
                        "test_export_assets_command"
                      ],
                      "classes": [],
                      "imports": [
                        "freezegun",
                        "pytest_mock",
                        "superset.commands.export.assets"
                      ],
                      "size_lines": 95,
                      "has_main": false,
                      "docstring": null
                    },
                    "databases": {
                      "tables_test.py": {
                        "functions": [
                          "database_with_catalog",
                          "database_without_catalog",
                          "test_tables_with_catalog",
                          "test_tables_without_catalog"
                        ],
                        "classes": [],
                        "imports": [
                          "unittest.mock",
                          "pytest",
                          "pytest_mock",
                          "superset.commands.database.tables",
                          "superset.extensions",
                          "superset.utils.core"
                        ],
                        "size_lines": 204,
                        "has_main": false,
                        "docstring": null
                      },
                      "conftest.py": {
                        "functions": [
                          "database_with_catalog",
                          "database_without_catalog",
                          "database_needs_oauth2"
                        ],
                        "classes": [],
                        "imports": [
                          "unittest.mock",
                          "pytest",
                          "pytest_mock",
                          "superset.db_engine_specs.base",
                          "superset.exceptions",
                          "superset.utils"
                        ],
                        "size_lines": 91,
                        "has_main": false,
                        "docstring": null
                      },
                      "sync_permissions_test.py": {
                        "functions": [
                          "test_sync_permissions_command_sync_mode",
                          "test_sync_permissions_command_async_mode",
                          "test_sync_permissions_command_passing_all_values",
                          "test_sync_permissions_command_raise",
                          "test_sync_permissions_command_new_db_name",
                          "test_sync_permissions_command_async_mode_new_db_name",
                          "test_resync_permissions_command_get_catalogs",
                          "test_resync_permissions_command_raise_on_getting_catalogs",
                          "test_resync_permissions_command_get_schemas",
                          "test_resync_permissions_command_raise_on_getting_schemas",
                          "test_resync_permissions_command_refresh_schemas",
                          "test_resync_permissions_command_rename_db_in_perms"
                        ],
                        "classes": [],
                        "imports": [
                          "__future__",
                          "unittest.mock",
                          "pytest",
                          "pytest_mock",
                          "superset",
                          "superset.commands.database.exceptions",
                          "superset.commands.database.sync_permissions",
                          "superset.db_engine_specs.base",
                          "superset.exceptions",
                          "superset.extensions",
                          "tests.conftest"
                        ],
                        "size_lines": 390,
                        "has_main": false,
                        "docstring": null
                      },
                      "utils_test.py": {
                        "functions": [
                          "mock_engine",
                          "test_ping_success",
                          "test_ping_sqlite_exception",
                          "test_ping_runtime_exception",
                          "db_session",
                          "test_add_vm",
                          "test_add_vm_existing",
                          "test_add_perm",
                          "test_add_perm_existing",
                          "test_add_pvm",
                          "test_add_pvm_missing_data",
                          "test_add_pvm_existing"
                        ],
                        "classes": [],
                        "imports": [
                          "__future__",
                          "datetime",
                          "sqlite3",
                          "unittest.mock",
                          "pytest",
                          "flask_appbuilder.security.sqla.models",
                          "pytest_mock",
                          "sqlalchemy.orm",
                          "superset.commands.database.utils",
                          "tests.conftest"
                        ],
                        "size_lines": 213,
                        "has_main": false,
                        "docstring": null
                      },
                      "csv_reader_test.py": {
                        "functions": [
                          "test_csv_reader_file_to_dataframe",
                          "test_csv_reader_index_column",
                          "test_csv_reader_wrong_index_column",
                          "test_csv_reader_broken_file_no_columns",
                          "test_csv_reader_wrong_columns_to_read",
                          "test_csv_reader_invalid_file",
                          "test_csv_reader_invalid_encoding",
                          "test_csv_reader_file_metadata",
                          "test_csv_reader_file_metadata_invalid_file"
                        ],
                        "classes": [],
                        "imports": [
                          "io",
                          "datetime",
                          "numpy",
                          "pytest",
                          "werkzeug.datastructures",
                          "superset.commands.database.exceptions",
                          "superset.commands.database.uploaders.csv_reader",
                          "tests.unit_tests.fixtures.common"
                        ],
                        "size_lines": 374,
                        "has_main": false,
                        "docstring": null
                      },
                      "excel_reader_test.py": {
                        "functions": [
                          "write_data_to_worksheet",
                          "test_excel_reader_file_to_dataframe",
                          "test_excel_reader_index_column",
                          "test_excel_reader_wrong_index_column",
                          "test_excel_reader_wrong_columns_to_read",
                          "test_excel_reader_wrong_date",
                          "test_excel_reader_invalid_file",
                          "test_excel_reader_metadata",
                          "test_excel_reader_metadata_mul_sheets",
                          "test_excel_reader_file_metadata_invalid_file"
                        ],
                        "classes": [],
                        "imports": [
                          "io",
                          "datetime",
                          "typing",
                          "numpy",
                          "pytest",
                          "xlsxwriter",
                          "werkzeug.datastructures",
                          "xlsxwriter.workbook",
                          "superset.commands.database.exceptions",
                          "superset.commands.database.uploaders.excel_reader",
                          "tests.unit_tests.fixtures.common"
                        ],
                        "size_lines": 295,
                        "has_main": false,
                        "docstring": null
                      },
                      "__init__.py": {
                        "functions": [],
                        "classes": [],
                        "imports": [],
                        "size_lines": 17,
                        "has_main": false,
                        "docstring": null
                      },
                      "create_test.py": {
                        "functions": [
                          "database_with_catalog",
                          "database_without_catalog",
                          "test_create_permissions_with_catalog",
                          "test_create_permissions_without_catalog",
                          "test_create_with_oauth2"
                        ],
                        "classes": [],
                        "imports": [
                          "unittest.mock",
                          "pytest",
                          "pytest_mock",
                          "superset.commands.database.create",
                          "superset.exceptions",
                          "superset.extensions"
                        ],
                        "size_lines": 158,
                        "has_main": false,
                        "docstring": null
                      },
                      "validate_test.py": {
                        "functions": [
                          "test_command",
                          "test_command_invalid",
                          "test_command_no_ping",
                          "test_command_with_oauth2",
                          "test_command_with_oauth2_not_configured"
                        ],
                        "classes": [],
                        "imports": [
                          "pytest",
                          "pytest_mock",
                          "superset.commands.database.exceptions",
                          "superset.commands.database.validate",
                          "superset.errors"
                        ],
                        "size_lines": 208,
                        "has_main": false,
                        "docstring": null
                      },
                      "update_test.py": {
                        "functions": [
                          "test_update_with_catalog",
                          "test_update_sync_perms_in_async_mode",
                          "test_update_without_catalog",
                          "test_rename_with_catalog",
                          "test_rename_without_catalog",
                          "test_rename_without_catalog_with_assets",
                          "test_update_with_oauth2",
                          "test_update_with_oauth2_changed",
                          "test_remove_oauth_config_purges_tokens",
                          "test_update_oauth2_removes_masked_encrypted_extra_key",
                          "test_update_other_fields_dont_affect_oauth",
                          "test_update_with_catalog_change",
                          "test_update_without_catalog_change"
                        ],
                        "classes": [],
                        "imports": [
                          "unittest.mock",
                          "pytest_mock",
                          "superset",
                          "superset.commands.database.update",
                          "superset.extensions",
                          "superset.utils",
                          "tests.conftest",
                          "tests.unit_tests.commands.databases.conftest"
                        ],
                        "size_lines": 645,
                        "has_main": false,
                        "docstring": null
                      },
                      "columnar_reader_test.py": {
                        "functions": [
                          "test_columnar_reader_file_to_dataframe",
                          "test_excel_reader_wrong_columns_to_read",
                          "test_columnar_reader_invalid_file",
                          "test_columnar_reader_zip",
                          "test_columnar_reader_bad_parquet_in_zip",
                          "test_columnar_reader_bad_zip",
                          "test_columnar_reader_metadata",
                          "test_columnar_reader_metadata_invalid_file"
                        ],
                        "classes": [],
                        "imports": [
                          "io",
                          "tempfile",
                          "typing",
                          "zipfile",
                          "numpy",
                          "pytest",
                          "werkzeug.datastructures",
                          "superset.commands.database.exceptions",
                          "superset.commands.database.uploaders.columnar_reader",
                          "tests.unit_tests.fixtures.common"
                        ],
                        "size_lines": 254,
                        "has_main": false,
                        "docstring": null
                      },
                      "test_connection_test.py": {
                        "functions": [
                          "test_command",
                          "test_command_with_oauth2"
                        ],
                        "classes": [],
                        "imports": [
                          "pytest",
                          "pytest_mock",
                          "superset.commands.database.test_connection",
                          "superset.errors",
                          "superset.exceptions"
                        ],
                        "size_lines": 92,
                        "has_main": false,
                        "docstring": null
                      },
                      "oauth2_test.py": {
                        "functions": [
                          "mock_database",
                          "mock_state",
                          "mock_parameters",
                          "test_validate_success",
                          "test_validate_database_not_found",
                          "test_validate_oauth2_error",
                          "test_run_success",
                          "test_run_existing_token"
                        ],
                        "classes": [],
                        "imports": [
                          "typing",
                          "unittest.mock",
                          "pytest",
                          "pytest_mock",
                          "superset.commands.database.exceptions",
                          "superset.commands.database.oauth2",
                          "superset.daos.database",
                          "superset.databases.schemas",
                          "superset.exceptions",
                          "superset.models.core",
                          "superset.utils.oauth2"
                        ],
                        "size_lines": 169,
                        "has_main": false,
                        "docstring": null
                      },
                      "importers": {
                        "__init__.py": {
                          "functions": [],
                          "classes": [],
                          "imports": [],
                          "size_lines": 17,
                          "has_main": false,
                          "docstring": null
                        },
                        "v1": {
                          "__init__.py": {
                            "functions": [],
                            "classes": [],
                            "imports": [],
                            "size_lines": 17,
                            "has_main": false,
                            "docstring": null
                          },
                          "command_test.py": {
                            "functions": [
                              "test_import_database_with_encrypted_extra"
                            ],
                            "classes": [],
                            "imports": [
                              "copy",
                              "json",
                              "pytest_mock",
                              "sqlalchemy.orm.session",
                              "tests.unit_tests.fixtures.assets_configs",
                              "superset",
                              "superset.commands.database.importers.v1",
                              "superset.models.core"
                            ],
                            "size_lines": 51,
                            "has_main": false,
                            "docstring": null
                          }
                        }
                      }
                    },
                    "importers": {
                      "__init__.py": {
                        "functions": [],
                        "classes": [],
                        "imports": [],
                        "size_lines": 17,
                        "has_main": false,
                        "docstring": null
                      },
                      "v1": {
                        "__init__.py": {
                          "functions": [],
                          "classes": [],
                          "imports": [],
                          "size_lines": 17,
                          "has_main": false,
                          "docstring": null
                        },
                        "assets_test.py": {
                          "functions": [
                            "test_import_new_assets",
                            "test_import_adds_dashboard_charts",
                            "test_import_removes_dashboard_charts"
                          ],
                          "classes": [],
                          "imports": [
                            "copy",
                            "pytest_mock",
                            "sqlalchemy.orm.session",
                            "sqlalchemy.sql",
                            "tests.unit_tests.fixtures.assets_configs",
                            "superset",
                            "superset.commands.importers.v1.assets",
                            "superset.models.dashboard",
                            "superset.models.slice",
                            "superset",
                            "superset.commands.importers.v1.assets",
                            "superset.models.dashboard",
                            "superset.models.slice",
                            "superset",
                            "superset.commands.importers.v1.assets",
                            "superset.models.dashboard",
                            "superset.models.slice"
                          ],
                          "size_lines": 144,
                          "has_main": false,
                          "docstring": null
                        }
                      }
                    },
                    "dataset": {
                      "__init__.py": {
                        "functions": [],
                        "classes": [],
                        "imports": [],
                        "size_lines": 17,
                        "has_main": false,
                        "docstring": null
                      },
                      "test_update.py": {
                        "functions": [
                          "test_update_uniqueness_error"
                        ],
                        "classes": [],
                        "imports": [
                          "unittest.mock",
                          "pytest",
                          "pytest_mock",
                          "superset",
                          "superset.commands.dataset.exceptions",
                          "superset.commands.dataset.update",
                          "superset.connectors.sqla.models",
                          "superset.models.core"
                        ],
                        "size_lines": 61,
                        "has_main": false,
                        "docstring": null
                      }
                    },
                    "dashboard": {
                      "__init__.py": {
                        "functions": [],
                        "classes": [],
                        "imports": [],
                        "size_lines": 17,
                        "has_main": false,
                        "docstring": null
                      },
                      "create_test.py": {
                        "functions": [
                          "test_validate_custom_role_class",
                          "test_validate_custom_user_class",
                          "test_validate_custom_role_and_user_class"
                        ],
                        "classes": [
                          "CustomRoleModel",
                          "CustomUserModel",
                          "CustomRoleModel",
                          "CustomUserModel"
                        ],
                        "imports": [
                          "__future__",
                          "pytest",
                          "flask_appbuilder.security.sqla.models",
                          "pytest_mock",
                          "superset.commands.dashboard.create",
                          "superset.extensions",
                          "tests.unit_tests.fixtures.common"
                        ],
                        "size_lines": 99,
                        "has_main": false,
                        "docstring": null
                      }
                    },
                    "report": {
                      "base_test.py": {
                        "functions": [
                          "dynamic_alert_minimum_interval",
                          "dynamic_report_minimum_interval",
                          "app_custom_config",
                          "test_validate_report_frequency",
                          "test_validate_report_frequency_minimum_set",
                          "test_validate_report_frequency_invalid_schedule",
                          "test_validate_report_frequency_alert_only",
                          "test_validate_report_frequency_report_only",
                          "test_validate_report_frequency_accepts_every_minute_with_one",
                          "test_validate_report_frequency_accepts_every_minute_with_two",
                          "test_validate_report_frequency_accepts_every_minute_with_two_raises",
                          "test_validate_report_frequency_invalid_config",
                          "test_validate_report_frequency_using_callable",
                          "decorator",
                          "wrapper"
                        ],
                        "classes": [],
                        "imports": [
                          "__future__",
                          "logging",
                          "datetime",
                          "functools",
                          "typing",
                          "unittest.mock",
                          "pytest",
                          "superset.commands.report.base",
                          "superset.commands.report.exceptions",
                          "superset.reports.models"
                        ],
                        "size_lines": 298,
                        "has_main": false,
                        "docstring": null
                      },
                      "execute_test.py": {
                        "functions": [
                          "test_log_data_with_chart",
                          "test_log_data_with_dashboard",
                          "test_log_data_with_email_recipients",
                          "test_log_data_with_slack_recipients",
                          "test_log_data_no_owners",
                          "test_log_data_with_missing_values",
                          "test_get_dashboard_urls_with_multiple_tabs",
                          "test_get_dashboard_urls_with_exporting_dashboard_only",
                          "test_get_tab_urls",
                          "test_get_tab_url",
                          "create_report_schedule",
                          "test_screenshot_width_calculation",
                          "test_update_recipient_to_slack_v2",
                          "test_update_recipient_to_slack_v2_missing_channels"
                        ],
                        "classes": [],
                        "imports": [
                          "json",
                          "datetime",
                          "unittest.mock",
                          "uuid",
                          "pytest",
                          "pytest_mock",
                          "superset.app",
                          "superset.commands.exceptions",
                          "superset.commands.report.execute",
                          "superset.dashboards.permalink.types",
                          "superset.reports.models",
                          "superset.utils.core",
                          "superset.utils.screenshots",
                          "tests.integration_tests.conftest",
                          "superset.commands.report.execute"
                        ],
                        "size_lines": 560,
                        "has_main": false,
                        "docstring": null
                      }
                    }
                  },
                  "key_value": {
                    "utils_test.py": {
                      "functions": [
                        "test_get_filter_uuid",
                        "test_get_filter_id",
                        "test_encode_permalink_id_valid",
                        "test_decode_permalink_id_invalid"
                      ],
                      "classes": [],
                      "imports": [
                        "__future__",
                        "uuid",
                        "pytest",
                        "superset.key_value.exceptions",
                        "superset.key_value.types",
                        "superset.key_value.utils",
                        "superset.key_value.utils",
                        "superset.key_value.utils",
                        "superset.key_value.utils"
                      ],
                      "size_lines": 61,
                      "has_main": false,
                      "docstring": null
                    },
                    "codec_test.py": {
                      "functions": [
                        "test_json_codec",
                        "test_marshmallow_codec",
                        "test_pickle_codec"
                      ],
                      "classes": [],
                      "imports": [
                        "contextlib",
                        "typing",
                        "pytest",
                        "marshmallow",
                        "superset.dashboards.permalink.schemas",
                        "superset.key_value.exceptions",
                        "superset.key_value.types"
                      ],
                      "size_lines": 123,
                      "has_main": false,
                      "docstring": null
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    }
                  },
                  "columns": {
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    }
                  },
                  "advanced_data_type": {
                    "types_tests.py": {
                      "functions": [
                        "test_ip_func_valid_ip",
                        "test_cidr_func_invalid_ip",
                        "test_cidr_func_empty_ip",
                        "test_port_translation_func_valid_port_number",
                        "test_port_translation_func_valid_port_name",
                        "test_port_translation_func_invalid_port_name",
                        "test_port_translation_func_invalid_port_number",
                        "test_port_translation_func_empty_port_number",
                        "test_cidr_translate_filter_func_equals",
                        "test_cidr_translate_filter_func_not_equals",
                        "test_cidr_translate_filter_func_greater_than_or_equals",
                        "test_cidr_translate_filter_func_greater_than",
                        "test_cidr_translate_filter_func_less_than",
                        "test_cidr_translate_filter_func_less_than_or_equals",
                        "test_cidr_translate_filter_func_in_single",
                        "test_cidr_translate_filter_func_in_double",
                        "test_cidr_translate_filter_func_not_in_single",
                        "test_cidr_translate_filter_func_not_in_double",
                        "test_port_translate_filter_func_equals",
                        "test_port_translate_filter_func_not_equals",
                        "test_port_translate_filter_func_greater_than_or_equals",
                        "test_port_translate_filter_func_greater_than",
                        "test_port_translate_filter_func_less_than_or_equals",
                        "test_port_translate_filter_func_less_than",
                        "test_port_translate_filter_func_in_single",
                        "test_port_translate_filter_func_in_double",
                        "test_port_translate_filter_func_not_in_single",
                        "test_port_translate_filter_func_not_in_double"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "sqlalchemy",
                        "superset.advanced_data_type.types",
                        "superset.utils.core",
                        "superset.advanced_data_type.plugins.internet_address",
                        "superset.advanced_data_type.plugins.internet_port"
                      ],
                      "size_lines": 559,
                      "has_main": false,
                      "docstring": "Unit tests for Superset"
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    }
                  },
                  "reports": {
                    "schemas_test.py": {
                      "functions": [
                        "test_report_post_schema_custom_width_validation"
                      ],
                      "classes": [],
                      "imports": [
                        "pytest",
                        "marshmallow",
                        "pytest_mock",
                        "superset.reports.schemas"
                      ],
                      "size_lines": 76,
                      "has_main": false,
                      "docstring": null
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "notifications": {
                      "email_tests.py": {
                        "functions": [
                          "test_render_description_with_html",
                          "test_email_subject_with_datetime"
                        ],
                        "classes": [],
                        "imports": [
                          "datetime",
                          "pandas",
                          "pytz",
                          "tests.unit_tests.conftest",
                          "superset.reports.models",
                          "superset.reports.notifications.base",
                          "superset.reports.notifications.email",
                          "superset.reports.models",
                          "superset.reports.notifications.base",
                          "superset.reports.notifications.email"
                        ],
                        "size_lines": 101,
                        "has_main": false,
                        "docstring": null
                      },
                      "slack_tests.py": {
                        "functions": [
                          "mock_header_data",
                          "test_get_channel_with_multi_recipients",
                          "test_valid_recipient_config_json_slackv2",
                          "test_get_inline_files_with_screenshots",
                          "test_get_inline_files_with_no_screenshots_or_csv",
                          "test_send_slackv2",
                          "test_send_slack",
                          "test_send_slack_no_feature_flag"
                        ],
                        "classes": [],
                        "imports": [
                          "uuid",
                          "unittest.mock",
                          "pandas",
                          "pytest",
                          "slack_sdk.errors",
                          "superset.reports.notifications.slackv2",
                          "superset.utils.core",
                          "superset.reports.models",
                          "superset.reports.notifications.base",
                          "superset.reports.notifications.slack",
                          "superset.reports.models",
                          "superset.reports.notifications.base",
                          "superset.reports.notifications.slack",
                          "superset.reports.models",
                          "superset.reports.notifications.base",
                          "superset.reports.notifications.slack",
                          "superset.reports.models",
                          "superset.reports.notifications.base",
                          "superset.reports.notifications.slack",
                          "superset.reports.models",
                          "superset.reports.notifications.base",
                          "superset.reports.models",
                          "superset.reports.notifications.base",
                          "superset.reports.notifications.slack",
                          "superset.reports.models",
                          "superset.reports.notifications.base",
                          "superset.reports.notifications.slack"
                        ],
                        "size_lines": 379,
                        "has_main": false,
                        "docstring": null
                      }
                    }
                  },
                  "thumbnails": {
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_digest.py": {
                      "functions": [
                        "CUSTOM_DASHBOARD_FUNC",
                        "CUSTOM_CHART_FUNC",
                        "prepare_datasource_mock",
                        "test_dashboard_digest",
                        "test_chart_digest"
                      ],
                      "classes": [],
                      "imports": [
                        "__future__",
                        "contextlib",
                        "typing",
                        "unittest.mock",
                        "pytest",
                        "flask_appbuilder.security.sqla.models",
                        "superset.connectors.sqla.models",
                        "superset.tasks.exceptions",
                        "superset.tasks.types",
                        "superset.utils.core",
                        "superset.models.dashboard",
                        "superset.models.slice",
                        "superset",
                        "superset.models.dashboard",
                        "superset.models.slice",
                        "superset.thumbnails.digest",
                        "superset",
                        "superset.models.slice",
                        "superset.thumbnails.digest"
                      ],
                      "size_lines": 422,
                      "has_main": false,
                      "docstring": null
                    }
                  },
                  "sql": {
                    "parse_tests.py": {
                      "functions": [
                        "test_table",
                        "extract_tables_from_sql",
                        "test_extract_tables_from_sql",
                        "test_extract_tables_subselect",
                        "test_extract_tables_select_in_expression",
                        "test_extract_tables_parenthesis",
                        "test_extract_tables_with_schema",
                        "test_extract_tables_union",
                        "test_extract_tables_select_from_values",
                        "test_extract_tables_select_array",
                        "test_extract_tables_select_if",
                        "test_extract_tables_with_catalog",
                        "test_extract_tables_illdefined",
                        "test_extract_tables_show_tables_from",
                        "test_format_show_tables",
                        "test_format_no_dialect",
                        "test_split_no_dialect",
                        "test_extract_tables_show_columns_from",
                        "test_extract_tables_where_subquery",
                        "test_extract_tables_describe",
                        "test_extract_tables_show_partitions",
                        "test_extract_tables_join",
                        "test_extract_tables_semi_join",
                        "test_extract_tables_combinations",
                        "test_extract_tables_with",
                        "test_extract_tables_reusing_aliases",
                        "test_extract_tables_multistatement",
                        "test_extract_tables_complex",
                        "test_extract_tables_mixed_from_clause",
                        "test_extract_tables_nested_select",
                        "test_extract_tables_complex_cte_with_prefix",
                        "test_extract_tables_identifier_list_with_keyword_as_alias",
                        "test_sqlscript",
                        "test_sqlstatement",
                        "test_kustokqlstatement_split_script",
                        "test_kustokqlstatement_with_program",
                        "test_kustokqlstatement_with_set",
                        "test_kustokql_statement_split_special",
                        "test_split_kql",
                        "test_has_mutation",
                        "test_get_settings",
                        "test_custom_dialect",
                        "test_is_mutating",
                        "test_optimize",
                        "test_firebolt",
                        "test_firebolt_old",
                        "test_firebolt_old_escape_string"
                      ],
                      "classes": [],
                      "imports": [
                        "pytest",
                        "sqlglot",
                        "superset.exceptions",
                        "superset.sql.parse",
                        "superset.sql.dialects",
                        "superset.sql.parse",
                        "superset.sql.dialects",
                        "superset.sql.parse"
                      ],
                      "size_lines": 1188,
                      "has_main": false,
                      "docstring": null
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    }
                  }
                },
                "integration_tests": {
                  "superset_test_config_thumbnails.py": {
                    "functions": [
                      "GET_FEATURE_FLAGS_FUNC"
                    ],
                    "classes": [
                      "CeleryConfig"
                    ],
                    "imports": [
                      "copy",
                      "sqlalchemy.engine",
                      "superset.config",
                      "superset.config"
                    ],
                    "size_lines": 89,
                    "has_main": false,
                    "docstring": null
                  },
                  "conftest.py": {
                    "functions": [
                      "app_context",
                      "test_client",
                      "login_as",
                      "login_as_admin",
                      "create_user",
                      "get_user",
                      "get_or_create_user",
                      "setup_sample_data",
                      "drop_from_schema",
                      "example_db_provider",
                      "setup_presto_if_needed",
                      "with_feature_flags",
                      "virtual_dataset",
                      "virtual_dataset_with_comments",
                      "physical_dataset",
                      "virtual_dataset_comma_in_column_value",
                      "_login_as",
                      "_create_user",
                      "_get_user",
                      "_get_user",
                      "mock_get_feature_flags",
                      "decorate",
                      "__call__",
                      "_load_lazy_data_to_decouple_from_session",
                      "remove",
                      "wrapper"
                    ],
                    "classes": [
                      "_example_db_provider"
                    ],
                    "imports": [
                      "__future__",
                      "contextlib",
                      "functools",
                      "os",
                      "textwrap",
                      "typing",
                      "unittest.mock",
                      "pytest",
                      "flask.ctx",
                      "flask_appbuilder.security.sqla",
                      "sqlalchemy.engine",
                      "superset",
                      "superset.extensions",
                      "superset.utils.database",
                      "superset.utils.json",
                      "tests.integration_tests.test_app",
                      "flask.testing",
                      "superset.connectors.sqla.models",
                      "superset.connectors.sqla.models",
                      "superset.connectors.sqla.models",
                      "superset.connectors.sqla.models",
                      "superset.connectors.sqla.utils",
                      "superset.connectors.sqla.models",
                      "superset.examples.css_templates",
                      "sqlalchemy.ext"
                    ],
                    "size_lines": 462,
                    "has_main": false,
                    "docstring": null
                  },
                  "celery_tests.py": {
                    "functions": [
                      "get_query_by_id",
                      "setup_sqllab",
                      "run_sql",
                      "drop_table_if_exists",
                      "quote_f",
                      "cta_result",
                      "get_select_star",
                      "test_run_sync_query_dont_exist",
                      "test_run_sync_query_cta",
                      "test_run_sync_query_cta_no_data",
                      "test_run_sync_query_cta_config",
                      "test_run_async_query_cta_config",
                      "test_run_async_cta_query",
                      "test_run_async_cta_query_with_lower_limit",
                      "test_default_data_serialization",
                      "test_new_data_serialization",
                      "test_default_payload_serialization",
                      "test_msgpack_payload_serialization",
                      "test_create_table_as",
                      "test_in_app_context",
                      "delete_tmp_view_or_table",
                      "wait_for_success",
                      "my_task"
                    ],
                    "classes": [],
                    "imports": [
                      "datetime",
                      "random",
                      "string",
                      "time",
                      "unittest.mock",
                      "typing",
                      "tests.integration_tests.fixtures.birth_names_dashboard",
                      "pytest",
                      "flask",
                      "flask",
                      "superset",
                      "superset.common.db_query_status",
                      "superset.result_set",
                      "superset.db_engine_specs.base",
                      "superset.errors",
                      "superset.extensions",
                      "superset.models.sql_lab",
                      "superset.sql_parse",
                      "superset.utils.core",
                      "superset.utils.database",
                      "tests.integration_tests.conftest",
                      "tests.integration_tests.test_app"
                    ],
                    "size_lines": 498,
                    "has_main": false,
                    "docstring": "Unit tests for Superset Celery worker"
                  },
                  "core_tests.py": {
                    "functions": [
                      "cleanup",
                      "setUp",
                      "tearDown",
                      "insert_dashboard_created_by",
                      "insert_dashboard_created_by_gamma",
                      "test_login",
                      "test_dashboard_endpoint",
                      "test_slice_endpoint",
                      "test_viz_cache_key",
                      "test_admin_only_menu_views",
                      "test_save_slice",
                      "test_slice_data",
                      "test_slices",
                      "test_add_slice",
                      "test_slices_V2",
                      "test_doctests",
                      "test_misc",
                      "test_custom_password_store",
                      "test_warm_up_cache_error",
                      "test_gamma",
                      "test_templated_sql_json",
                      "test_fetch_datasource_metadata",
                      "test_slice_id_is_always_logged_correctly_on_web_request",
                      "create_sample_csvfile",
                      "create_sample_excelfile",
                      "enable_csv_upload",
                      "test_dataframe_timezone",
                      "test_mssql_engine_spec_pymssql",
                      "test_comments_in_sqlatable_query",
                      "test_slice_payload_no_datasource",
                      "test_explore_json_data_invalid_cache_key",
                      "test_results_default_deserialization",
                      "test_results_msgpack_deserialization",
                      "test_feature_flag_serialization",
                      "test_tabstate_with_name",
                      "test_tabstate_update",
                      "test_virtual_table_explore_visibility",
                      "test_data_preview_visibility",
                      "test_disable_drill_to_detail",
                      "test_explore_database_id",
                      "test_get_column_names_from_metric",
                      "test_explore_injected_exceptions",
                      "test_dashboard_injected_exceptions",
                      "test_explore_redirect",
                      "test_has_table",
                      "test_dashboard_permalink",
                      "assert_admin_view_menus_in",
                      "custom_password_store"
                    ],
                    "classes": [
                      "TestCore"
                    ],
                    "imports": [
                      "datetime",
                      "doctest",
                      "html",
                      "logging",
                      "random",
                      "unittest",
                      "unittest",
                      "urllib.parse",
                      "pandas",
                      "pytest",
                      "pytz",
                      "sqlalchemy",
                      "flask_babel",
                      "sqlalchemy.exc",
                      "superset.utils.database",
                      "superset.views.utils",
                      "superset",
                      "superset.commands.chart.data.get_data_command",
                      "superset.commands.chart.exceptions",
                      "superset.common.db_query_status",
                      "superset.connectors.sqla.models",
                      "superset.db_engine_specs.base",
                      "superset.db_engine_specs.mssql",
                      "superset.exceptions",
                      "superset.extensions",
                      "superset.models",
                      "superset.models.dashboard",
                      "superset.models.slice",
                      "superset.models.sql_lab",
                      "superset.result_set",
                      "superset.sql_parse",
                      "superset.utils",
                      "superset.utils.core",
                      "superset.utils.database",
                      "tests.integration_tests.constants",
                      "tests.integration_tests.fixtures.birth_names_dashboard",
                      "tests.integration_tests.fixtures.energy_dashboard",
                      "tests.integration_tests.fixtures.world_bank_dashboard",
                      "tests.integration_tests.test_app",
                      "base_tests"
                    ],
                    "size_lines": 877,
                    "has_main": true,
                    "docstring": "Unit tests for Superset"
                  },
                  "base_tests.py": {
                    "functions": [
                      "get_resp",
                      "post_assert_metric",
                      "db_insert_temp_object",
                      "tearDown",
                      "create_app",
                      "get_nonexistent_numeric_id",
                      "get_birth_names_dataset",
                      "create_user_with_roles",
                      "temporary_user",
                      "create_user",
                      "get_user",
                      "get_role",
                      "get_table_by_id",
                      "is_module_installed",
                      "get_or_create",
                      "login",
                      "get_slice",
                      "get_table",
                      "get_database_by_id",
                      "get_database_by_name",
                      "get_datasource_mock",
                      "get_resp",
                      "get_json_resp",
                      "logout",
                      "grant_public_access_to_table",
                      "grant_role_access_to_table",
                      "revoke_public_access_to_table",
                      "revoke_role_access_to_table",
                      "run_sql",
                      "create_fake_db",
                      "delete_fake_db",
                      "create_fake_db_for_macros",
                      "delete_fake_db_for_macros",
                      "get_dash_by_slug",
                      "get_assert_metric",
                      "delete_assert_metric",
                      "post_assert_metric",
                      "put_assert_metric",
                      "get_dttm",
                      "insert_dashboard",
                      "get_list",
                      "mock_get_dialect"
                    ],
                    "classes": [
                      "SupersetTestCase"
                    ],
                    "imports": [
                      "datetime",
                      "importlib.util",
                      "contextlib",
                      "typing",
                      "unittest.mock",
                      "pandas",
                      "prison",
                      "flask",
                      "flask_appbuilder.security.sqla",
                      "flask_testing",
                      "sqlalchemy.engine.interfaces",
                      "sqlalchemy.ext.declarative",
                      "sqlalchemy.orm",
                      "sqlalchemy.sql",
                      "sqlalchemy.dialects.mysql",
                      "tests.integration_tests.constants",
                      "tests.integration_tests.test_app",
                      "superset.sql_parse",
                      "superset",
                      "superset.connectors.sqla.models",
                      "superset.models",
                      "superset.models.slice",
                      "superset.models.core",
                      "superset.models.dashboard",
                      "superset.utils.core",
                      "superset.utils",
                      "superset.utils.database",
                      "superset.views.base_api"
                    ],
                    "size_lines": 620,
                    "has_main": false,
                    "docstring": "Unit tests for Superset"
                  },
                  "stats_logger_tests.py": {
                    "functions": [
                      "verify_client_calls",
                      "test_init_with_statsd_client",
                      "test_init_with_params"
                    ],
                    "classes": [
                      "TestStatsdStatsLogger"
                    ],
                    "imports": [
                      "unittest",
                      "unittest.mock",
                      "superset.stats_logger"
                    ],
                    "size_lines": 51,
                    "has_main": false,
                    "docstring": "Unit tests for Superset"
                  },
                  "viz_tests.py": {
                    "functions": [
                      "test_constructor_exception_no_datasource",
                      "test_process_metrics",
                      "test_get_df_returns_empty_df",
                      "test_get_df_handles_dttm_col",
                      "test_cache_timeout",
                      "test_get_data_transforms_dataframe",
                      "test_get_data_empty_null_keys",
                      "test_query_obj_time_series_option",
                      "test_levels_for_computes_levels",
                      "test_levels_for_diff_computes_difference",
                      "test_levels_for_time_calls_process_data_and_drops_cols",
                      "test_nest_values_returns_hierarchy",
                      "test_nest_values_returns_hierarchy_when_more_dimensions",
                      "test_nest_procs_returns_hierarchy",
                      "test_get_data_calls_correct_method",
                      "test_rose_vis_get_data",
                      "test_get_data_metrics",
                      "test_get_data_group_by",
                      "test_query_obj_throws_metrics_and_groupby",
                      "test_query_obj_order_by",
                      "test_get_metrics",
                      "test_scatterviz_get_metrics",
                      "test_get_js_columns",
                      "test_get_properties",
                      "test_process_spatial_query_obj",
                      "test_geojson_query_obj",
                      "test_parse_coordinates",
                      "test_parse_coordinates_raises",
                      "test_filter_nulls",
                      "test_timeseries_unicode_data",
                      "test_process_data_resample",
                      "test_apply_rolling",
                      "test_apply_rolling_without_data",
                      "return_args"
                    ],
                    "classes": [
                      "TestBaseViz",
                      "TestPairedTTest",
                      "TestPartitionViz",
                      "TestRoseVis",
                      "TestTimeSeriesTableViz",
                      "TestBaseDeckGLViz",
                      "TestTimeSeriesViz"
                    ],
                    "imports": [
                      "datetime",
                      "logging",
                      "unittest.mock",
                      "numpy",
                      "pandas",
                      "pytest",
                      "tests.integration_tests.test_app",
                      "superset.viz",
                      "superset",
                      "superset.exceptions",
                      "superset.utils.core",
                      "base_tests",
                      "utils",
                      "logging"
                    ],
                    "size_lines": 939,
                    "has_main": false,
                    "docstring": null
                  },
                  "log_api_tests.py": {
                    "functions": [
                      "insert_log",
                      "test_not_enabled",
                      "test_get_list",
                      "test_get_list_not_allowed",
                      "test_get_item",
                      "test_delete_log",
                      "test_update_log",
                      "test_get_recent_activity",
                      "test_get_recent_activity_actions_filter",
                      "test_get_recent_activity_distinct_false",
                      "test_get_recent_activity_pagination"
                    ],
                    "classes": [
                      "TestLogApi"
                    ],
                    "imports": [
                      "datetime",
                      "typing",
                      "unittest.mock",
                      "flask_appbuilder.security.sqla.models",
                      "prison",
                      "unittest.mock",
                      "superset",
                      "superset.models.core",
                      "superset.views.log.api",
                      "superset.utils",
                      "tests.integration_tests.base_tests",
                      "tests.integration_tests.conftest",
                      "tests.integration_tests.constants",
                      "tests.integration_tests.dashboard_utils",
                      "tests.integration_tests.test_app"
                    ],
                    "size_lines": 363,
                    "has_main": false,
                    "docstring": "Unit tests for Superset"
                  },
                  "logging_configurator_tests.py": {
                    "functions": [
                      "reset_logging",
                      "test_configurator_adding_handler",
                      "__init__",
                      "handle",
                      "__init__",
                      "configure_logging"
                    ],
                    "classes": [
                      "TestLoggingConfigurator",
                      "MyEventHandler",
                      "MyConfigurator"
                    ],
                    "imports": [
                      "logging",
                      "unittest",
                      "unittest.mock",
                      "superset.utils.logging_configurator"
                    ],
                    "size_lines": 56,
                    "has_main": false,
                    "docstring": null
                  },
                  "base_api_tests.py": {
                    "functions": [
                      "test_open_api_spec",
                      "test_default_missing_declaration_get",
                      "test_default_missing_declaration_put_spec",
                      "test_default_missing_declaration_post",
                      "test_refuse_invalid_format_request",
                      "test_default_missing_declaration_put",
                      "test_get_related_owners",
                      "test_get_related_owners_with_extra_filters",
                      "test_get_related_owners_paginated",
                      "test_get_ids_related_owners_paginated",
                      "test_get_filter_related_owners",
                      "test_get_base_filter_related_owners",
                      "test_get_base_filter_related_owners_on_sm",
                      "test_get_ids_related_owners",
                      "test_get_repeated_ids_related_owners",
                      "test_get_related_fail",
                      "_base_filter"
                    ],
                    "classes": [
                      "Model1Api",
                      "TestOpenApiSpec",
                      "TestBaseModelRestApi",
                      "ApiOwnersTestCaseMixin"
                    ],
                    "imports": [
                      "unittest.mock",
                      "tests.integration_tests.fixtures.world_bank_dashboard",
                      "pytest",
                      "flask_appbuilder.models.sqla.interface",
                      "prison",
                      "tests.integration_tests.test_app",
                      "superset",
                      "superset.extensions",
                      "superset.models.dashboard",
                      "superset.views.base_api",
                      "superset.utils",
                      "tests.conftest",
                      "tests.integration_tests.base_tests",
                      "tests.integration_tests.constants",
                      "openapi_spec_validator"
                    ],
                    "size_lines": 428,
                    "has_main": false,
                    "docstring": null
                  },
                  "utils_tests.py": {
                    "functions": [
                      "test_convert_legacy_filters_into_adhoc_where",
                      "test_convert_legacy_filters_into_adhoc_filters",
                      "test_convert_legacy_filters_into_adhoc_present_and_empty",
                      "test_convert_legacy_filters_into_adhoc_having",
                      "test_convert_legacy_filters_into_adhoc_present_and_nonempty",
                      "test_split",
                      "test_get_or_create_db",
                      "test_get_or_create_db_invalid_uri",
                      "test_get_or_create_db_existing_invalid_uri",
                      "test_as_list",
                      "test_merge_extra_filters_with_no_extras",
                      "test_merge_extra_filters_with_unset_legacy_time_range",
                      "test_merge_extra_filters_with_extras",
                      "test_ssl_certificate_parse",
                      "test_ssl_certificate_file_creation",
                      "test_recipients_string_to_list",
                      "test_get_form_data_default",
                      "test_get_form_data_request_args",
                      "test_get_form_data_request_form",
                      "test_get_form_data_request_form_with_queries",
                      "test_get_form_data_request_args_and_form",
                      "test_get_form_data_globals",
                      "test_get_form_data_corrupted_json",
                      "test_log_this",
                      "test_schema_validate_json",
                      "test_schema_one_of_case_insensitive",
                      "test_cast_to_num",
                      "test_get_form_data_token",
                      "test_extract_dataframe_dtypes",
                      "test_normalize_dttm_col",
                      "normalize_col"
                    ],
                    "classes": [
                      "TestUtils"
                    ],
                    "imports": [
                      "datetime",
                      "os",
                      "re",
                      "typing",
                      "unittest.mock",
                      "superset.commands.database.exceptions",
                      "tests.integration_tests.fixtures.birth_names_dashboard",
                      "pandas",
                      "pytest",
                      "flask",
                      "marshmallow",
                      "sqlalchemy.exc",
                      "tests.integration_tests.test_app",
                      "superset",
                      "superset.constants",
                      "superset.exceptions",
                      "superset.models.core",
                      "superset.models.dashboard",
                      "superset.models.slice",
                      "superset.utils.core",
                      "superset.utils",
                      "superset.utils.database",
                      "superset.utils",
                      "superset.utils.hashing",
                      "superset.views.utils",
                      "tests.integration_tests.base_tests",
                      "tests.integration_tests.constants",
                      "tests.integration_tests.fixtures.world_bank_dashboard",
                      "fixtures.certificates"
                    ],
                    "size_lines": 486,
                    "has_main": false,
                    "docstring": null
                  },
                  "datasource_tests.py": {
                    "functions": [
                      "create_test_table_context",
                      "create_and_cleanup_table",
                      "test_get_samples",
                      "test_get_samples_with_incorrect_cc",
                      "test_get_samples_on_physical_dataset",
                      "test_get_samples_with_filters",
                      "test_get_samples_with_time_filter",
                      "test_get_samples_with_multiple_filters",
                      "test_get_samples_pagination",
                      "setUp",
                      "tearDown",
                      "test_external_metadata_for_physical_table",
                      "test_always_filter_main_dttm",
                      "test_external_metadata_for_virtual_table",
                      "test_external_metadata_by_name_for_physical_table",
                      "test_external_metadata_by_name_for_virtual_table",
                      "test_external_metadata_by_name_for_virtual_table_uses_mutator",
                      "test_external_metadata_by_name_from_sqla_inspector",
                      "test_external_metadata_for_virtual_table_template_params",
                      "test_external_metadata_for_malicious_virtual_table",
                      "test_external_metadata_for_multistatement_virtual_table",
                      "test_external_metadata_error_return_400",
                      "compare_lists",
                      "test_save",
                      "test_save_default_endpoint_validation_success",
                      "save_datasource_from_dict",
                      "test_change_database",
                      "test_save_duplicate_key",
                      "test_get_datasource",
                      "test_get_datasource_with_health_check",
                      "test_get_datasource_failed",
                      "test_get_datasource_invalid_datasource_failed",
                      "my_check"
                    ],
                    "classes": [
                      "TestDatasource"
                    ],
                    "imports": [
                      "contextlib",
                      "datetime",
                      "unittest",
                      "prison",
                      "pytest",
                      "superset",
                      "superset.commands.dataset.exceptions",
                      "superset.common.utils.query_cache_manager",
                      "superset.connectors.sqla.models",
                      "superset.constants",
                      "superset.daos.exceptions",
                      "superset.exceptions",
                      "superset.models.core",
                      "superset.utils",
                      "superset.utils.core",
                      "superset.utils.database",
                      "tests.integration_tests.base_tests",
                      "tests.integration_tests.conftest",
                      "tests.integration_tests.constants",
                      "tests.integration_tests.fixtures.birth_names_dashboard",
                      "tests.integration_tests.fixtures.datasource",
                      "superset.daos.datasource",
                      "superset.daos.datasource"
                    ],
                    "size_lines": 760,
                    "has_main": false,
                    "docstring": "Unit tests for Superset"
                  },
                  "model_tests.py": {
                    "functions": [
                      "test_database_schema_presto",
                      "test_database_schema_postgres",
                      "test_database_schema_hive",
                      "test_database_schema_mysql",
                      "test_database_impersonate_user",
                      "test_impersonate_user_presto",
                      "test_adjust_engine_params_mysql",
                      "test_impersonate_user_trino",
                      "test_impersonate_user_hive",
                      "test_select_star",
                      "test_select_star_fully_qualified_names",
                      "test_single_statement",
                      "test_multi_statement",
                      "test_get_sqla_engine",
                      "test_get_timestamp_expression",
                      "test_get_timestamp_expression_epoch",
                      "query_with_expr_helper",
                      "test_query_with_expr_groupby_timeseries",
                      "test_query_with_expr_groupby",
                      "test_sql_mutator",
                      "test_sql_mutator_different_params",
                      "test_query_with_non_existent_metrics",
                      "test_query_label_without_group_by",
                      "test_data_for_slices_with_no_query_context",
                      "test_data_for_slices_with_query_context",
                      "test_data_for_slices_with_adhoc_column",
                      "test_table_column_database",
                      "canonicalize_df",
                      "mutator",
                      "mutator"
                    ],
                    "classes": [
                      "TestDatabaseModel",
                      "TestSqlaTableModel"
                    ],
                    "imports": [
                      "re",
                      "superset.utils.core",
                      "superset.utils",
                      "unittest",
                      "unittest",
                      "superset",
                      "superset.connectors.sqla.models",
                      "superset.exceptions",
                      "superset.utils.core",
                      "tests.integration_tests.fixtures.birth_names_dashboard",
                      "pytest",
                      "sqlalchemy.engine.url",
                      "sqlalchemy.types",
                      "tests.integration_tests.test_app",
                      "superset",
                      "superset.db_engine_specs.postgres",
                      "superset.common.db_query_status",
                      "superset.models.core",
                      "superset.models.slice",
                      "superset.sql_parse",
                      "superset.utils.database",
                      "base_tests",
                      "fixtures.energy_dashboard"
                    ],
                    "size_lines": 683,
                    "has_main": false,
                    "docstring": null
                  },
                  "superset_test_custom_template_processors.py": {
                    "functions": [
                      "DATE",
                      "process_template",
                      "replacer"
                    ],
                    "classes": [
                      "CustomPrestoTemplateProcessor"
                    ],
                    "imports": [
                      "re",
                      "datetime",
                      "functools",
                      "typing",
                      "superset.jinja_context"
                    ],
                    "size_lines": 60,
                    "has_main": false,
                    "docstring": null
                  },
                  "dynamic_plugins_tests.py": {
                    "functions": [
                      "test_dynamic_plugins_disabled",
                      "test_dynamic_plugins_enabled"
                    ],
                    "classes": [
                      "TestDynamicPlugins"
                    ],
                    "imports": [
                      "tests.integration_tests.base_tests",
                      "tests.integration_tests.conftest",
                      "tests.integration_tests.constants"
                    ],
                    "size_lines": 42,
                    "has_main": false,
                    "docstring": null
                  },
                  "cli_tests.py": {
                    "functions": [
                      "assert_cli_fails_properly",
                      "test_export_dashboards_versioned_export",
                      "test_failing_export_dashboards_versioned_export",
                      "test_export_datasources_versioned_export",
                      "test_failing_export_datasources_versioned_export",
                      "test_import_dashboards_versioned_export",
                      "test_failing_import_dashboards_versioned_export",
                      "test_import_datasets_versioned_export",
                      "test_failing_import_datasets_versioned_export",
                      "test_compute_thumbnails"
                    ],
                    "classes": [],
                    "imports": [
                      "importlib",
                      "logging",
                      "pathlib",
                      "unittest",
                      "zipfile",
                      "pytest",
                      "yaml",
                      "freezegun",
                      "superset.cli.importexport",
                      "superset.cli.thumbnails",
                      "superset",
                      "superset.models.dashboard",
                      "tests.integration_tests.fixtures.birth_names_dashboard",
                      "superset.cli.importexport",
                      "superset.cli.importexport",
                      "superset.cli.importexport",
                      "superset.cli.importexport",
                      "superset.cli.importexport",
                      "superset.cli.importexport",
                      "superset.cli.importexport",
                      "superset.cli.importexport"
                    ],
                    "size_lines": 324,
                    "has_main": false,
                    "docstring": null
                  },
                  "constants.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 23,
                    "has_main": false,
                    "docstring": null
                  },
                  "sqla_models_tests.py": {
                    "functions": [
                      "text_column_table",
                      "test_values_for_column_on_text_column",
                      "test_values_for_column_on_text_column_with_rls",
                      "test_values_for_column_on_text_column_with_rls_no_values",
                      "test_filter_on_text_column",
                      "test_should_generate_closed_and_open_time_filter_range",
                      "test_none_operand_in_filter",
                      "test_extra_cache_keys",
                      "test_extra_cache_keys_in_sql_expression",
                      "test_extra_cache_keys_in_adhoc_metrics_and_columns",
                      "test_extra_cache_keys_in_dataset_metrics_and_columns",
                      "test__normalize_prequery_result_type",
                      "test__temporal_range_operator_in_adhoc_filter",
                      "test_is_time_druid_time_col",
                      "test_temporal_varchar",
                      "test_db_column_types",
                      "test_jinja_metrics_and_calc_columns",
                      "test_jinja_metric_macro",
                      "test_adhoc_metrics_and_calc_columns",
                      "test_where_operators",
                      "test_boolean_type_where_operators",
                      "test_incorrect_jinja_syntax_raises_correct_exception",
                      "test_query_format_strip_trailing_semicolon",
                      "test_multiple_sql_statements_raises_exception",
                      "test_dml_statement_raises_exception",
                      "test_fetch_metadata_for_updated_virtual_table",
                      "test_labels_expected_on_mutated_query",
                      "_convert_dttm"
                    ],
                    "classes": [
                      "FilterTestCase",
                      "TestDatabaseModel"
                    ],
                    "imports": [
                      "__future__",
                      "re",
                      "datetime",
                      "typing",
                      "re",
                      "unittest.mock",
                      "pytest",
                      "numpy",
                      "pandas",
                      "flask.ctx",
                      "flask_appbuilder.security.sqla.models",
                      "pytest_mock",
                      "sqlalchemy.sql",
                      "sqlalchemy.sql.elements",
                      "superset",
                      "superset.connectors.sqla.models",
                      "superset.constants",
                      "superset.db_engine_specs.bigquery",
                      "superset.db_engine_specs.druid",
                      "superset.exceptions",
                      "superset.models.core",
                      "superset.utils.core",
                      "superset.utils.database",
                      "tests.integration_tests.fixtures.birth_names_dashboard",
                      "base_tests",
                      "conftest"
                    ],
                    "size_lines": 1138,
                    "has_main": false,
                    "docstring": null
                  },
                  "sql_validator_tests.py": {
                    "functions": [
                      "setUp",
                      "test_validator_success",
                      "test_validator_db_error",
                      "test_validator_unexpected_error",
                      "test_validator_query_error",
                      "test_valid_syntax",
                      "test_invalid_syntax"
                    ],
                    "classes": [
                      "TestPrestoValidator",
                      "TestPostgreSQLValidator"
                    ],
                    "imports": [
                      "unittest",
                      "unittest.mock",
                      "pyhive.exc",
                      "superset.sql_validators.postgres",
                      "superset.sql_validators.presto_db",
                      "superset.utils.database",
                      "base_tests"
                    ],
                    "size_lines": 137,
                    "has_main": true,
                    "docstring": "Unit tests for Sql Lab"
                  },
                  "superset_test_config_sqllab_backend_persist_off.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [
                      "superset_test_config"
                    ],
                    "size_lines": 23,
                    "has_main": false,
                    "docstring": null
                  },
                  "__init__.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 17,
                    "has_main": false,
                    "docstring": null
                  },
                  "result_set_tests.py": {
                    "functions": [
                      "test_dedup",
                      "test_get_columns_basic",
                      "test_get_columns_with_int",
                      "test_get_columns_type_inference",
                      "test_is_date",
                      "test_dedup_with_data",
                      "test_int64_with_missing_data",
                      "test_data_as_list_of_lists",
                      "test_nullable_bool",
                      "test_nested_types",
                      "test_single_column_multidim_nested_types",
                      "test_nested_list_types",
                      "test_empty_datetime",
                      "test_no_type_coercion",
                      "test_empty_data"
                    ],
                    "classes": [
                      "TestSupersetResultSet"
                    ],
                    "imports": [
                      "datetime",
                      "tests.integration_tests.test_app",
                      "superset.dataframe",
                      "superset.db_engine_specs",
                      "superset.result_set",
                      "superset.utils.core",
                      "base_tests"
                    ],
                    "size_lines": 312,
                    "has_main": false,
                    "docstring": null
                  },
                  "tagging_tests.py": {
                    "functions": [
                      "query_tagged_object_table",
                      "clear_tagged_object_table",
                      "test_dataset_tagging",
                      "test_chart_tagging",
                      "test_dashboard_tagging",
                      "test_saved_query_tagging",
                      "test_favorite_tagging",
                      "test_tagging_system"
                    ],
                    "classes": [
                      "TestTagging"
                    ],
                    "imports": [
                      "pytest",
                      "superset.connectors.sqla.models",
                      "superset.extensions",
                      "superset.models.core",
                      "superset.models.dashboard",
                      "superset.models.slice",
                      "superset.models.sql_lab",
                      "superset.tags.models",
                      "superset.utils.core",
                      "superset.utils.database",
                      "tests.integration_tests.base_tests",
                      "tests.integration_tests.conftest",
                      "tests.integration_tests.fixtures.tags"
                    ],
                    "size_lines": 297,
                    "has_main": false,
                    "docstring": null
                  },
                  "insert_chart_mixin.py": {
                    "functions": [
                      "insert_chart"
                    ],
                    "classes": [
                      "InsertChartMixin"
                    ],
                    "imports": [
                      "typing",
                      "superset",
                      "superset.connectors.sqla.models",
                      "superset.models.slice"
                    ],
                    "size_lines": 67,
                    "has_main": false,
                    "docstring": null
                  },
                  "commands_test.py": {
                    "functions": [
                      "test_command_invalid_error",
                      "test_is_valid_config",
                      "setUp",
                      "test_import_assets",
                      "test_import_v1_dashboard_overwrite"
                    ],
                    "classes": [
                      "TestCommandsExceptions",
                      "TestImportersV1Utils",
                      "TestImportAssetsCommand"
                    ],
                    "imports": [
                      "copy",
                      "unittest.mock",
                      "yaml",
                      "flask",
                      "superset",
                      "superset.commands.exceptions",
                      "superset.commands.importers.v1.assets",
                      "superset.commands.importers.v1.utils",
                      "superset.models.dashboard",
                      "superset.models.slice",
                      "superset.utils",
                      "tests.integration_tests.base_tests",
                      "tests.integration_tests.fixtures.importexport"
                    ],
                    "size_lines": 224,
                    "has_main": false,
                    "docstring": null
                  },
                  "email_tests.py": {
                    "functions": [
                      "setUp",
                      "test_send_smtp",
                      "test_send_smtp_with_email_mutator",
                      "test_send_smtp_with_email_mutator_changing_recipients",
                      "test_send_smtp_data",
                      "test_send_smtp_inline_images",
                      "test_send_bcc_smtp",
                      "test_send_mime",
                      "test_send_mime_ssl",
                      "test_send_mime_ssl_server_auth",
                      "test_send_mime_tls_server_auth",
                      "test_send_mime_noauth",
                      "test_send_mime_dryrun",
                      "mutator",
                      "mutator"
                    ],
                    "classes": [
                      "TestEmailSmtp"
                    ],
                    "imports": [
                      "logging",
                      "ssl",
                      "tempfile",
                      "unittest",
                      "email.mime.application",
                      "email.mime.image",
                      "email.mime.multipart",
                      "unittest",
                      "superset",
                      "superset.utils",
                      "tests.integration_tests.base_tests",
                      "utils"
                    ],
                    "size_lines": 268,
                    "has_main": true,
                    "docstring": "Unit tests for email service in Superset"
                  },
                  "dashboard_tests.py": {
                    "functions": [
                      "load_dashboard",
                      "get_mock_positions",
                      "test_get_dashboard",
                      "test_superset_dashboard_url",
                      "test_new_dashboard",
                      "test_public_user_dashboard_access",
                      "test_dashboard_with_created_by_can_be_accessed_by_public_users",
                      "test_users_can_list_published_dashboard",
                      "test_users_can_view_own_dashboard",
                      "test_user_can_not_view_unpublished_dash"
                    ],
                    "classes": [
                      "TestDashboard"
                    ],
                    "imports": [
                      "re",
                      "unittest",
                      "random",
                      "pytest",
                      "flask",
                      "sqlalchemy",
                      "superset",
                      "superset.connectors.sqla.models",
                      "superset.models.dashboard",
                      "superset.models.slice",
                      "tests.integration_tests.constants",
                      "tests.integration_tests.fixtures.birth_names_dashboard",
                      "tests.integration_tests.fixtures.energy_dashboard",
                      "tests.integration_tests.fixtures.public_role",
                      "tests.integration_tests.fixtures.unicode_dashboard",
                      "tests.integration_tests.fixtures.world_bank_dashboard",
                      "base_tests"
                    ],
                    "size_lines": 255,
                    "has_main": true,
                    "docstring": "Unit tests for Superset"
                  },
                  "thumbnails_tests.py": {
                    "functions": [
                      "create_app",
                      "url_open_auth",
                      "test_get_async_dashboard_screenshot",
                      "test_not_call_find_unexpected_errors_if_feature_disabled",
                      "test_call_find_unexpected_errors_if_feature_enabled",
                      "test_find_unexpected_errors_no_alert",
                      "test_find_unexpected_errors",
                      "test_screenshot_selenium_headstart",
                      "test_screenshot_selenium_locate_wait",
                      "test_screenshot_selenium_load_wait",
                      "test_screenshot_selenium_animation_wait",
                      "_get_id_and_thumbnail_url",
                      "test_dashboard_thumbnail_disabled",
                      "test_chart_thumbnail_disabled",
                      "test_get_async_dashboard_screenshot_as_fixed_user",
                      "test_get_async_dashboard_screenshot_as_current_user",
                      "test_get_async_dashboard_notfound",
                      "test_get_async_dashboard_created",
                      "test_get_async_chart_screenshot_as_fixed_user",
                      "test_get_async_chart_screenshot_as_current_user",
                      "test_get_async_chart_notfound",
                      "test_get_cached_chart_wrong_digest",
                      "test_get_cached_dashboard_screenshot",
                      "test_get_cached_chart_screenshot",
                      "test_get_cached_dashboard_wrong_digest"
                    ],
                    "classes": [
                      "TestThumbnailsSeleniumLive",
                      "TestWebDriverScreenshotErrorDetector",
                      "TestWebDriverSelenium",
                      "TestThumbnails"
                    ],
                    "imports": [
                      "urllib.request",
                      "unittest",
                      "unittest.mock",
                      "pytest",
                      "flask_testing",
                      "sqlalchemy.sql",
                      "superset",
                      "superset.extensions",
                      "superset.models.dashboard",
                      "superset.models.slice",
                      "superset.tasks.types",
                      "superset.utils",
                      "superset.utils.screenshots",
                      "superset.utils.urls",
                      "superset.utils.webdriver",
                      "tests.integration_tests.base_tests",
                      "tests.integration_tests.conftest",
                      "tests.integration_tests.constants",
                      "tests.integration_tests.fixtures.birth_names_dashboard",
                      "tests.integration_tests.test_app"
                    ],
                    "size_lines": 436,
                    "has_main": false,
                    "docstring": null
                  },
                  "event_logger_tests.py": {
                    "functions": [
                      "test_correct_config_object",
                      "test_config_class_deprecation",
                      "test_raises_typeerror_if_not_abc",
                      "test_log_this",
                      "test_log_this_with_extra_payload",
                      "test_context_manager_log",
                      "test_context_manager_log_with_context",
                      "test_log_with_context_user_null",
                      "test_func",
                      "test_func",
                      "__init__",
                      "log",
                      "__init__",
                      "log",
                      "__init__",
                      "log"
                    ],
                    "classes": [
                      "TestEventLogger",
                      "DummyEventLogger",
                      "DummyEventLogger",
                      "DummyEventLogger"
                    ],
                    "imports": [
                      "logging",
                      "time",
                      "unittest",
                      "datetime",
                      "typing",
                      "unittest.mock",
                      "flask",
                      "freezegun",
                      "superset",
                      "superset.utils.log",
                      "tests.integration_tests.test_app"
                    ],
                    "size_lines": 233,
                    "has_main": false,
                    "docstring": null
                  },
                  "strategy_tests.py": {
                    "functions": [
                      "test_top_n_dashboards_strategy",
                      "reset_tag",
                      "test_dashboard_tags_strategy"
                    ],
                    "classes": [
                      "TestCacheWarmUp"
                    ],
                    "imports": [
                      "unittest.mock",
                      "tests.integration_tests.fixtures.birth_names_dashboard",
                      "sqlalchemy",
                      "pytest",
                      "pandas",
                      "superset.models.slice",
                      "superset.utils.database",
                      "superset",
                      "superset.models.core",
                      "superset.tags.models",
                      "superset.tasks.cache",
                      "superset.utils.urls",
                      "tests.integration_tests.base_tests",
                      "tests.integration_tests.constants",
                      "tests.integration_tests.dashboard_utils",
                      "tests.integration_tests.fixtures.unicode_dashboard"
                    ],
                    "size_lines": 147,
                    "has_main": false,
                    "docstring": "Unit tests for Superset cache warmup"
                  },
                  "security_tests.py": {
                    "functions": [
                      "get_perm_tuples",
                      "create_schema_perm",
                      "delete_schema_perm",
                      "setUp",
                      "tearDown",
                      "test_after_insert_dataset",
                      "test_after_insert_dataset_rollback",
                      "test_after_insert_dataset_table_none",
                      "test_after_insert_database",
                      "test_after_insert_database_rollback",
                      "test_after_update_database__perm_database_access",
                      "test_after_update_database_rollback",
                      "test_after_update_database__perm_database_access_exists",
                      "test_after_update_database__perm_datasource_access",
                      "test_after_delete_database",
                      "test_after_delete_database_rollback",
                      "test_after_delete_dataset",
                      "test_after_delete_dataset_rollback",
                      "test_after_update_dataset__name_changes",
                      "test_after_update_dataset_rollback",
                      "test_after_update_dataset__db_changes",
                      "test_after_update_dataset__schema_changes",
                      "test_after_update_dataset__schema_none",
                      "test_after_update_dataset__name_db_changes",
                      "test_hybrid_perm_database",
                      "test_set_perm_slice",
                      "test_schemas_accessible_by_user_admin",
                      "test_schemas_accessible_by_user_schema_access",
                      "test_schemas_accessible_by_user_datasource_access",
                      "test_schemas_accessible_by_user_datasource_and_schema_access",
                      "test_gamma_user_schema_access_to_dashboards",
                      "test_public_sync_role_data_perms",
                      "test_public_sync_role_builtin_perms",
                      "test_sqllab_gamma_user_schema_access_to_sqllab",
                      "assert_can_read",
                      "assert_can_write",
                      "assert_cannot_write",
                      "assert_can_all",
                      "assert_can_menu",
                      "assert_cannot_menu",
                      "assert_cannot_gamma",
                      "assert_can_gamma",
                      "assert_can_alpha",
                      "assert_cannot_alpha",
                      "assert_can_admin",
                      "test_is_admin_only",
                      "test_is_alpha_only",
                      "test_is_gamma_pvm",
                      "test_gamma_permissions_basic",
                      "test_public_permissions_basic",
                      "test_alpha_permissions",
                      "test_admin_permissions",
                      "test_sql_lab_permissions",
                      "test_gamma_permissions",
                      "test_views_are_secured",
                      "test_can_access_datasource",
                      "test_can_access_table",
                      "test_raise_for_access_datasource",
                      "test_raise_for_access_query",
                      "test_raise_for_access_sql_fails",
                      "test_raise_for_access_sql",
                      "test_raise_for_access_query_context",
                      "test_raise_for_access_table",
                      "test_raise_for_access_viz",
                      "test_raise_for_access_rbac",
                      "test_get_admin_user_roles",
                      "test_get_gamma_user_roles",
                      "test_get_user_roles_with_groups",
                      "test_get_user_roles_with_groups_dar",
                      "test_user_view_menu_names_with_groups_dar",
                      "test_gamma_user_view_menu_names_with_groups_dar",
                      "test_get_anonymous_roles",
                      "test_all_database_access",
                      "test_get_user_datasources_admin",
                      "test_get_user_datasources_gamma",
                      "test_get_user_datasources_gamma_with_schema",
                      "create_guest_token",
                      "test_create_guest_access_token",
                      "test_get_guest_user",
                      "test_get_guest_user_with_request_form",
                      "test_get_guest_user_expired_token",
                      "test_get_guest_user_no_user",
                      "test_get_guest_user_no_resource",
                      "test_get_guest_user_not_guest_type",
                      "test_get_guest_user_bad_audience",
                      "test_create_guest_access_token_callable_audience"
                    ],
                    "classes": [
                      "TestRolePermission",
                      "TestSecurityManager",
                      "TestDatasources",
                      "FakeRequest",
                      "TestGuestTokens"
                    ],
                    "imports": [
                      "inspect",
                      "time",
                      "unittest",
                      "collections",
                      "unittest",
                      "unittest.mock",
                      "typing",
                      "jwt",
                      "prison",
                      "pytest",
                      "flask",
                      "flask_appbuilder.security.sqla.models",
                      "superset.daos.datasource",
                      "superset.models.dashboard",
                      "superset",
                      "superset.connectors.sqla.models",
                      "superset.errors",
                      "superset.exceptions",
                      "superset.models.core",
                      "superset.models.slice",
                      "superset.sql_parse",
                      "superset.utils.core",
                      "superset.utils",
                      "superset.utils.database",
                      "superset.utils.urls",
                      "tests.integration_tests.base_tests",
                      "tests.integration_tests.constants",
                      "tests.integration_tests.conftest",
                      "tests.integration_tests.fixtures.public_role",
                      "tests.integration_tests.fixtures.birth_names_dashboard",
                      "tests.integration_tests.fixtures.world_bank_dashboard",
                      "tests.integration_tests.fixtures.users"
                    ],
                    "size_lines": 2201,
                    "has_main": false,
                    "docstring": null
                  },
                  "dict_import_export_tests.py": {
                    "functions": [
                      "delete_imports",
                      "setUpClass",
                      "tearDownClass",
                      "create_table",
                      "yaml_compare",
                      "assert_table_equals",
                      "assert_datasource_equals",
                      "test_import_table_no_metadata",
                      "test_import_table_1_col_1_met",
                      "test_import_table_2_col_2_met",
                      "test_import_table_override_append",
                      "test_import_table_override_sync",
                      "test_import_table_override_identical"
                    ],
                    "classes": [
                      "TestDictImportExport"
                    ],
                    "imports": [
                      "unittest",
                      "uuid",
                      "yaml",
                      "tests.integration_tests.test_app",
                      "superset",
                      "superset.connectors.sqla.models",
                      "superset.utils.database",
                      "superset.utils",
                      "base_tests"
                    ],
                    "size_lines": 253,
                    "has_main": true,
                    "docstring": "Unit tests for Superset"
                  },
                  "form_tests.py": {
                    "functions": [
                      "test_comma_separated_list_field",
                      "test_filter_not_empty_values"
                    ],
                    "classes": [
                      "TestForm"
                    ],
                    "imports": [
                      "wtforms.form",
                      "superset.forms",
                      "tests.integration_tests.base_tests"
                    ],
                    "size_lines": 37,
                    "has_main": false,
                    "docstring": null
                  },
                  "test_jinja_context.py": {
                    "functions": [
                      "test_process_template",
                      "test_get_template_kwarg",
                      "test_template_kwarg",
                      "test_get_template_kwarg_dict",
                      "test_template_kwarg_dict",
                      "test_get_template_kwarg_lambda",
                      "test_template_kwarg_lambda",
                      "test_get_template_kwarg_module",
                      "test_template_kwarg_module",
                      "test_get_template_kwarg_nested_module",
                      "test_template_kwarg_nested_module",
                      "test_template_hive",
                      "test_template_spark",
                      "test_template_trino",
                      "test_template_context_addons",
                      "test_custom_process_template",
                      "test_custom_get_template_kwarg",
                      "test_custom_template_kwarg",
                      "test_custom_template_processors_overwrite",
                      "test_custom_template_processors_ignored"
                    ],
                    "classes": [],
                    "imports": [
                      "datetime",
                      "unittest",
                      "pytest",
                      "flask.ctx",
                      "pytest_mock",
                      "superset.utils.database",
                      "superset.exceptions",
                      "superset.jinja_context"
                    ],
                    "size_lines": 229,
                    "has_main": false,
                    "docstring": null
                  },
                  "dashboard_utils.py": {
                    "functions": [
                      "get_table",
                      "create_table_metadata",
                      "create_slice",
                      "create_dashboard"
                    ],
                    "classes": [],
                    "imports": [
                      "typing",
                      "pandas",
                      "superset",
                      "superset.connectors.sqla.models",
                      "superset.models.core",
                      "superset.models.dashboard",
                      "superset.models.slice",
                      "superset.utils",
                      "superset.utils.core"
                    ],
                    "size_lines": 103,
                    "has_main": false,
                    "docstring": "Utils to provide dashboards for tests"
                  },
                  "cache_tests.py": {
                    "functions": [
                      "setUp",
                      "tearDown",
                      "test_no_data_cache",
                      "test_slice_data_cache"
                    ],
                    "classes": [
                      "TestCache"
                    ],
                    "imports": [
                      "pytest",
                      "superset",
                      "superset.common.db_query_status",
                      "superset.extensions",
                      "superset.utils",
                      "tests.integration_tests.base_tests",
                      "tests.integration_tests.constants",
                      "tests.integration_tests.fixtures.birth_names_dashboard"
                    ],
                    "size_lines": 130,
                    "has_main": false,
                    "docstring": "Unit tests for Superset with caching"
                  },
                  "access_tests.py": {
                    "functions": [
                      "test_get_user_id",
                      "test_get_username",
                      "test_override_user"
                    ],
                    "classes": [],
                    "imports": [
                      "unittest",
                      "typing",
                      "pytest",
                      "flask.ctx",
                      "pytest_mock",
                      "sqlalchemy",
                      "tests.integration_tests.fixtures.birth_names_dashboard",
                      "tests.integration_tests.fixtures.world_bank_dashboard",
                      "tests.integration_tests.fixtures.energy_dashboard",
                      "superset",
                      "superset.connectors.sqla.models",
                      "superset.models",
                      "superset.utils.core",
                      "superset.utils.database"
                    ],
                    "size_lines": 154,
                    "has_main": true,
                    "docstring": "Unit tests for Superset"
                  },
                  "query_context_tests.py": {
                    "functions": [
                      "get_sql_text",
                      "test_get_label_map",
                      "test_time_column_with_time_grain",
                      "test_non_time_column_with_time_grain",
                      "test_special_chars_in_column_name",
                      "test_date_adhoc_column",
                      "test_non_date_adhoc_column",
                      "test_time_grain_and_time_offset_with_base_axis",
                      "test_time_grain_and_time_offset_on_legacy_query",
                      "test_time_offset_with_temporal_range_filter",
                      "test_virtual_dataset_with_comments",
                      "test_schema_deserialization",
                      "test_cache",
                      "test_query_cache_key_changes_when_datasource_is_updated",
                      "test_query_cache_key_changes_when_metric_is_updated",
                      "test_query_cache_key_does_not_change_for_non_existent_or_null",
                      "test_query_cache_key_changes_when_post_processing_is_updated",
                      "test_query_cache_key_changes_when_time_offsets_is_updated",
                      "test_handle_metrics_field",
                      "test_convert_deprecated_fields",
                      "test_csv_response_format",
                      "test_sql_injection_via_groupby",
                      "test_sql_injection_via_columns",
                      "test_sql_injection_via_metrics",
                      "test_samples_response_type",
                      "test_query_response_type",
                      "test_handle_sort_by_metrics",
                      "test_fetch_values_predicate",
                      "test_query_object_unknown_fields",
                      "test_time_offsets_in_query_object",
                      "test_processing_time_offsets_cache",
                      "test_time_offsets_sql",
                      "test_time_offsets_accuracy",
                      "test_time_offsets_in_query_object_no_limit"
                    ],
                    "classes": [
                      "TestQueryContext"
                    ],
                    "imports": [
                      "re",
                      "time",
                      "typing",
                      "unittest.mock",
                      "numpy",
                      "pandas",
                      "pytest",
                      "pandas",
                      "superset",
                      "superset.charts.schemas",
                      "superset.common.chart_data",
                      "superset.common.query_context",
                      "superset.common.query_context_factory",
                      "superset.common.query_object",
                      "superset.connectors.sqla.models",
                      "superset.daos.datasource",
                      "superset.extensions",
                      "superset.superset_typing",
                      "superset.utils.core",
                      "superset.utils.pandas_postprocessing.utils",
                      "tests.integration_tests.base_tests",
                      "tests.integration_tests.conftest",
                      "tests.integration_tests.fixtures.birth_names_dashboard",
                      "tests.integration_tests.fixtures.query_context"
                    ],
                    "size_lines": 1209,
                    "has_main": false,
                    "docstring": null
                  },
                  "sqllab_tests.py": {
                    "functions": [
                      "test_cancel_query_implicit",
                      "run_some_queries",
                      "tearDown",
                      "test_sql_json",
                      "test_sql_json_dml_disallowed",
                      "test_sql_json_cta_dynamic_db",
                      "test_multi_sql",
                      "test_explain",
                      "test_sql_json_has_access",
                      "test_sqllab_has_access",
                      "test_sqllab_no_access",
                      "test_sql_json_schema_access",
                      "test_alias_duplicate",
                      "test_ps_conversion_no_dict",
                      "test_pa_conversion_tuple",
                      "test_pa_conversion_dict",
                      "test_sql_limit",
                      "test_query_api_filter",
                      "test_query_api_can_access_all_queries",
                      "test_query_api_can_access_sql_editor_id_associated_queries",
                      "test_query_admin_can_access_all_queries",
                      "test_api_database",
                      "test_sql_json_parameter_error",
                      "test_sql_json_parameter_authorized",
                      "test_sql_json_parameter_forbidden",
                      "test_execute_sql_statements",
                      "test_execute_sql_statements_no_results_backend",
                      "test_execute_sql_statements_ctas",
                      "test_sql_json_soft_timeout",
                      "test_apply_limit_if_exists_when_incremented_limit_is_none",
                      "test_apply_limit_if_exists_when_increased_limit"
                    ],
                    "classes": [
                      "TestSqlLab"
                    ],
                    "imports": [
                      "textwrap",
                      "pytest",
                      "celery.exceptions",
                      "parameterized",
                      "unittest",
                      "prison",
                      "superset",
                      "superset.connectors.sqla.models",
                      "superset.db_engine_specs",
                      "superset.db_engine_specs.hive",
                      "superset.db_engine_specs.presto",
                      "superset.errors",
                      "superset.exceptions",
                      "superset.models.sql_lab",
                      "superset.result_set",
                      "superset.sqllab.limiting_factor",
                      "superset.sql_lab",
                      "superset.sql_parse",
                      "superset.utils.core",
                      "superset.utils",
                      "superset.utils.json",
                      "superset.utils.database",
                      "tests.integration_tests.base_tests",
                      "tests.integration_tests.conftest",
                      "tests.integration_tests.constants",
                      "tests.integration_tests.fixtures.birth_names_dashboard",
                      "tests.integration_tests.fixtures.users"
                    ],
                    "size_lines": 902,
                    "has_main": false,
                    "docstring": "Unit tests for Sql Lab"
                  },
                  "test_app.py": {
                    "functions": [
                      "login"
                    ],
                    "classes": [],
                    "imports": [
                      "os",
                      "typing",
                      "superset.app",
                      "typing",
                      "flask.testing"
                    ],
                    "size_lines": 45,
                    "has_main": false,
                    "docstring": null
                  },
                  "superset_test_config.py": {
                    "functions": [
                      "GET_FEATURE_FLAGS_FUNC"
                    ],
                    "classes": [
                      "CeleryConfig"
                    ],
                    "imports": [
                      "logging",
                      "math",
                      "copy",
                      "datetime",
                      "sqlalchemy.engine",
                      "superset.config",
                      "superset.config",
                      "tests.integration_tests.superset_test_custom_template_processors"
                    ],
                    "size_lines": 152,
                    "has_main": false,
                    "docstring": null
                  },
                  "import_export_tests.py": {
                    "functions": [
                      "delete_imports",
                      "clean_imports",
                      "create_slice",
                      "create_dashboard",
                      "create_table",
                      "get_slice",
                      "get_slice_by_name",
                      "get_dash",
                      "assert_dash_equals",
                      "assert_table_equals",
                      "assert_datasource_equals",
                      "assert_slice_equals",
                      "assert_only_exported_slc_fields",
                      "test_export_1_dashboard",
                      "test_export_2_dashboards",
                      "test_import_1_slice",
                      "test_import_2_slices_for_same_table",
                      "test_import_slices_override",
                      "test_import_empty_dashboard",
                      "test_import_dashboard_1_slice",
                      "test_import_dashboard_2_slices",
                      "test_import_override_dashboard_2_slices",
                      "test_import_new_dashboard_slice_reset_ownership",
                      "test_import_override_dashboard_slice_reset_ownership",
                      "_create_dashboard_for_import",
                      "test_import_table_no_metadata",
                      "test_import_table_1_col_1_met",
                      "test_import_table_2_col_2_met",
                      "test_import_table_override",
                      "test_import_table_override_identical"
                    ],
                    "classes": [
                      "TestImportExport"
                    ],
                    "imports": [
                      "unittest",
                      "tests.integration_tests.fixtures.birth_names_dashboard",
                      "pytest",
                      "flask",
                      "sqlalchemy.orm.session",
                      "tests.integration_tests.fixtures.energy_dashboard",
                      "tests.integration_tests.test_app",
                      "superset.commands.dashboard.importers.v0",
                      "superset",
                      "superset.connectors.sqla.models",
                      "superset.commands.dashboard.importers.v0",
                      "superset.commands.dataset.importers.v0",
                      "superset.models.dashboard",
                      "superset.models.slice",
                      "superset.utils.core",
                      "superset.utils.database",
                      "superset.utils",
                      "tests.integration_tests.base_tests",
                      "tests.integration_tests.constants",
                      "tests.integration_tests.fixtures.world_bank_dashboard"
                    ],
                    "size_lines": 672,
                    "has_main": true,
                    "docstring": "Unit tests for Superset"
                  },
                  "log_model_view_tests.py": {
                    "functions": [
                      "test_disabled",
                      "test_enabled"
                    ],
                    "classes": [
                      "TestLogModelView"
                    ],
                    "imports": [
                      "unittest.mock",
                      "superset.views.log.views",
                      "tests.integration_tests.base_tests",
                      "tests.integration_tests.constants"
                    ],
                    "size_lines": 38,
                    "has_main": false,
                    "docstring": null
                  },
                  "datasource": {
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "api_tests.py": {
                      "functions": [
                        "get_virtual_dataset",
                        "test_get_column_values_ints",
                        "test_get_column_values_strs",
                        "test_get_column_values_floats",
                        "test_get_column_values_nulls",
                        "test_get_column_values_integers_with_nulls",
                        "test_get_column_values_invalid_datasource_type",
                        "test_get_column_values_datasource_type_not_supported",
                        "test_get_column_values_datasource_not_found",
                        "test_get_column_values_no_datasource_access",
                        "test_get_column_values_normalize_columns_enabled",
                        "test_get_column_values_not_denormalize_column",
                        "test_get_column_values_normalize_columns_disabled",
                        "test_get_column_values_denormalize_column",
                        "test_get_column_values_with_rls",
                        "test_get_column_values_with_rls_no_values"
                      ],
                      "classes": [
                        "TestDatasourceApi"
                      ],
                      "imports": [
                        "unittest.mock",
                        "pytest",
                        "sqlalchemy.sql.elements",
                        "superset",
                        "superset.connectors.sqla.models",
                        "superset.daos.exceptions",
                        "superset.utils",
                        "tests.integration_tests.base_tests",
                        "tests.integration_tests.constants"
                      ],
                      "size_lines": 207,
                      "has_main": false,
                      "docstring": null
                    }
                  },
                  "migrations": {
                    "7e67aecbf3f1_chart_ds_constraint__tests.py": {
                      "functions": [
                        "test_upgrade",
                        "test_upgrade_bad_json"
                      ],
                      "classes": [],
                      "imports": [
                        "importlib",
                        "superset.utils"
                      ],
                      "size_lines": 58,
                      "has_main": false,
                      "docstring": null
                    },
                    "87d38ad83218_migrate_can_view_and_drill_permission__tests.py": {
                      "functions": [
                        "test_migration_upgrade",
                        "test_migration_downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "importlib",
                        "pytest",
                        "superset",
                        "superset.migrations.shared.security_converge"
                      ],
                      "size_lines": 63,
                      "has_main": false,
                      "docstring": null
                    },
                    "ad07e4fdbaba_rm_time_range_endpoints_from_qc_3__test.py": {
                      "functions": [
                        "test_upgrade",
                        "test_upgrade_bad_json"
                      ],
                      "classes": [],
                      "imports": [
                        "importlib",
                        "superset.utils"
                      ],
                      "size_lines": 138,
                      "has_main": false,
                      "docstring": null
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "f1410ed7ec95_migrate_native_filters_to_new_schema__tests.py": {
                      "functions": [
                        "test_upgrade_dashboard",
                        "test_downgrade_dashboard"
                      ],
                      "classes": [],
                      "imports": [
                        "copy",
                        "importlib"
                      ],
                      "size_lines": 99,
                      "has_main": false,
                      "docstring": null
                    },
                    "c747c78868b6_migrating_legacy_treemap__tests.py": {
                      "functions": [
                        "test_treemap_migrate"
                      ],
                      "classes": [],
                      "imports": [
                        "superset.app",
                        "superset.migrations.shared.migrate_viz",
                        "superset.utils",
                        "superset.models.slice"
                      ],
                      "size_lines": 92,
                      "has_main": false,
                      "docstring": null
                    },
                    "fc3a3a8ff221_migrate_filter_sets_to_new_format__tests.py": {
                      "functions": [
                        "test_upgrade_select_filters",
                        "test_upgrade_filter_sets",
                        "test_downgrade_filter_set"
                      ],
                      "classes": [],
                      "imports": [
                        "copy",
                        "importlib"
                      ],
                      "size_lines": 368,
                      "has_main": false,
                      "docstring": null
                    },
                    "0769ef90fddd_fix_schema_perm_for_datasets__tests.py": {
                      "functions": [
                        "test_fix_schema_perm"
                      ],
                      "classes": [],
                      "imports": [
                        "importlib",
                        "pytest",
                        "superset",
                        "superset.connectors.sqla.models",
                        "superset.models.slice",
                        "superset.utils.core",
                        "tests.integration_tests.fixtures.birth_names_dashboard"
                      ],
                      "size_lines": 57,
                      "has_main": false,
                      "docstring": null
                    },
                    "f84fde59123a_update_charts_with_old_time_comparison__test.py": {
                      "functions": [
                        "test_upgrade_chart_params_with_custom",
                        "test_downgrade_chart_params_with_custom",
                        "test_upgrade_chart_params_other_than_custom",
                        "test_downgrade_chart_params_other_than_custom",
                        "test_upgrade_chart_params_other_than_custom_false",
                        "test_downgrade_chart_params_other_than_custom_false",
                        "test_upgrade_chart_params_empty",
                        "test_upgrade_chart_params_with_custom_no_comparator"
                      ],
                      "classes": [],
                      "imports": [
                        "copy",
                        "importlib",
                        "typing"
                      ],
                      "size_lines": 272,
                      "has_main": false,
                      "docstring": null
                    },
                    "fb13d49b72f9_better_filters__tests.py": {
                      "functions": [
                        "test_upgrade_slice"
                      ],
                      "classes": [],
                      "imports": [
                        "importlib",
                        "superset.utils"
                      ],
                      "size_lines": 41,
                      "has_main": false,
                      "docstring": null
                    }
                  },
                  "databases": {
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "api_tests.py": {
                      "functions": [
                        "insert_database",
                        "create_database_with_report",
                        "create_database_with_dataset",
                        "create_database_import",
                        "test_get_items",
                        "test_get_items_filter",
                        "test_get_items_not_allowed",
                        "test_get_items_gamma_group",
                        "test_create_database",
                        "test_create_database_with_ssh_tunnel",
                        "test_create_database_with_ssh_tunnel_no_port",
                        "test_create_database_with_ssh_tunnel_no_port_no_default",
                        "test_update_database_with_ssh_tunnel",
                        "test_update_database_with_ssh_tunnel_no_port",
                        "test_update_database_no_port_no_default",
                        "test_delete_ssh_tunnel",
                        "test_update_ssh_tunnel_via_database_api",
                        "test_cascade_delete_ssh_tunnel",
                        "test_do_not_create_database_if_ssh_tunnel_creation_fails",
                        "test_get_database_returns_related_ssh_tunnel",
                        "test_if_ssh_tunneling_flag_is_not_active_it_raises_new_exception",
                        "test_get_table_details_with_slash_in_table_name",
                        "test_create_database_invalid_configuration_method",
                        "test_create_database_no_configuration_method",
                        "test_create_database_server_cert_validate",
                        "test_create_database_json_validate",
                        "test_create_database_extra_metadata_validate",
                        "test_create_database_unique_validate",
                        "test_create_database_uri_validate",
                        "test_create_database_fail_sqlite",
                        "test_create_database_conn_fail",
                        "test_update_database",
                        "test_update_database_conn_fail",
                        "test_update_database_uniqueness",
                        "test_update_database_invalid",
                        "test_update_database_uri_validate",
                        "test_update_database_with_invalid_configuration_method",
                        "test_update_database_with_no_configuration_method",
                        "test_delete_database",
                        "test_delete_database_not_found",
                        "test_delete_database_with_datasets",
                        "test_delete_database_with_report",
                        "test_get_table_metadata",
                        "test_info_security_database",
                        "test_get_invalid_database_table_metadata",
                        "test_get_invalid_table_table_metadata",
                        "test_get_table_metadata_no_db_permission",
                        "test_get_table_extra_metadata_deprecated",
                        "test_get_invalid_database_table_extra_metadata_deprecated",
                        "test_get_invalid_table_table_extra_metadata_deprecated",
                        "test_get_select_star",
                        "test_get_select_star_not_allowed",
                        "test_get_select_star_not_found_database",
                        "test_get_select_star_not_found_table",
                        "test_get_allow_file_upload_filter",
                        "test_get_allow_file_upload_filter_no_schema",
                        "test_get_allow_file_upload_filter_allow_file_false",
                        "test_get_allow_file_upload_false",
                        "test_get_allow_file_upload_false_no_extra",
                        "mock_csv_function",
                        "test_get_allow_file_upload_true_csv",
                        "test_get_allow_file_upload_filter_no_permission",
                        "test_get_allow_file_upload_filter_with_permission",
                        "test_database_schemas",
                        "test_database_schemas_not_found",
                        "test_database_schemas_invalid_query",
                        "test_database_schemas_upload_allowed_filter",
                        "test_database_schemas_upload_allowed_filter_specific_schemas",
                        "test_database_schemas_upload_allowed_filter_disabled",
                        "test_database_tables",
                        "test_database_tables_not_found",
                        "test_database_tables_invalid_query",
                        "test_database_tables_unexpected_error",
                        "test_test_connection",
                        "test_test_connection_failed",
                        "test_test_connection_unsafe_uri",
                        "test_test_connection_failed_invalid_hostname",
                        "test_get_database_related_objects",
                        "test_get_database_related_objects_not_found",
                        "test_get_database_related_objects_gamma_group",
                        "test_export_database",
                        "test_export_database_not_allowed",
                        "test_export_database_non_existing",
                        "test_import_database",
                        "test_import_database_overwrite",
                        "test_import_database_invalid",
                        "test_import_database_masked_password",
                        "test_import_database_masked_password_provided",
                        "test_import_database_masked_ssh_tunnel_password",
                        "test_import_database_masked_ssh_tunnel_password_provided",
                        "test_import_database_masked_ssh_tunnel_private_key_and_password",
                        "test_import_database_masked_ssh_tunnel_private_key_and_password_provided",
                        "test_import_database_masked_ssh_tunnel_feature_flag_disabled",
                        "test_import_database_masked_ssh_tunnel_feature_no_credentials",
                        "test_import_database_masked_ssh_tunnel_feature_mix_credentials",
                        "test_import_database_masked_ssh_tunnel_feature_only_pk_passwd",
                        "test_import_database_row_expansion_enabled",
                        "test_function_names",
                        "test_function_names_sqlite",
                        "test_available",
                        "test_available_no_default",
                        "test_validate_parameters_invalid_payload_format",
                        "test_validate_parameters_invalid_payload_schema",
                        "test_validate_parameters_missing_fields",
                        "test_validate_parameters_valid_payload",
                        "test_validate_parameters_invalid_port",
                        "test_validate_parameters_invalid_host",
                        "test_validate_parameters_invalid_port_range",
                        "test_get_related_objects",
                        "test_validate_sql",
                        "test_validate_sql_errors",
                        "test_validate_sql_not_found",
                        "test_validate_sql_validation_fails",
                        "test_validate_sql_endpoint_noconfig",
                        "test_validate_sql_endpoint_failure",
                        "test_get_databases_with_extra_filters",
                        "test_sync_db_perms_sync",
                        "test_sync_db_perms_sync_db_not_found",
                        "test_sync_db_perms_sync_db_connection_failed",
                        "test_sync_db_perms_async",
                        "test_sync_db_perms_async_db_not_found",
                        "test_sync_db_perms_async_db_connection_failed",
                        "test_sync_db_perms_async_user_not_found",
                        "test_sync_db_perms_no_access",
                        "_base_filter"
                      ],
                      "classes": [
                        "TestDatabaseApi"
                      ],
                      "imports": [
                        "dataclasses",
                        "collections",
                        "io",
                        "unittest",
                        "unittest.mock",
                        "zipfile",
                        "prison",
                        "pytest",
                        "yaml",
                        "unittest.mock",
                        "sqlalchemy.engine.url",
                        "sqlalchemy.exc",
                        "sqlalchemy.sql",
                        "superset",
                        "superset.connectors.sqla.models",
                        "superset.databases.ssh_tunnel.models",
                        "superset.databases.utils",
                        "superset.db_engine_specs.mysql",
                        "superset.db_engine_specs.postgres",
                        "superset.db_engine_specs.redshift",
                        "superset.db_engine_specs.bigquery",
                        "superset.db_engine_specs.gsheets",
                        "superset.db_engine_specs.hana",
                        "superset.errors",
                        "superset.models.core",
                        "superset.reports.models",
                        "superset.utils.database",
                        "superset.utils",
                        "tests.conftest",
                        "tests.integration_tests.base_tests",
                        "tests.integration_tests.constants",
                        "tests.integration_tests.conftest",
                        "tests.integration_tests.fixtures.birth_names_dashboard",
                        "tests.integration_tests.fixtures.energy_dashboard",
                        "tests.integration_tests.fixtures.world_bank_dashboard",
                        "tests.integration_tests.fixtures.importexport",
                        "tests.integration_tests.fixtures.unicode_dashboard",
                        "tests.integration_tests.fixtures.users",
                        "tests.integration_tests.test_app",
                        "superset.models.core"
                      ],
                      "size_lines": 4554,
                      "has_main": false,
                      "docstring": "Unit tests for Superset"
                    },
                    "commands_tests.py": {
                      "functions": [
                        "test_validate",
                        "test_validate_partial",
                        "test_validate_partial_invalid_hostname",
                        "test_create_duplicate_error",
                        "test_multiple_error_logging",
                        "test_export_database_command",
                        "test_export_database_command_no_access",
                        "test_export_database_command_invalid_database",
                        "test_export_database_command_key_order",
                        "test_export_database_command_no_related",
                        "test_import_v1_database",
                        "test_import_v1_database_broken_csv_fields",
                        "test_import_v1_database_multiple",
                        "test_import_v1_database_with_dataset",
                        "test_import_v1_database_with_dataset_multiple",
                        "test_import_v1_database_validation",
                        "test_import_v1_database_masked_password",
                        "test_import_v1_database_masked_ssh_tunnel_password",
                        "test_import_v1_database_masked_ssh_tunnel_private_key_and_password",
                        "test_import_v1_database_with_ssh_tunnel_password",
                        "test_import_v1_database_with_ssh_tunnel_private_key_and_password",
                        "test_import_v1_database_masked_ssh_tunnel_no_credentials",
                        "test_import_v1_database_masked_ssh_tunnel_multiple_credentials",
                        "test_import_v1_database_masked_ssh_tunnel_only_priv_key_psswd",
                        "test_import_v1_rollback",
                        "test_connection_db_exception",
                        "test_connection_do_ping_exception",
                        "test_connection_do_ping_timeout",
                        "test_connection_superset_security_connection",
                        "test_connection_db_api_exc",
                        "test_database_tables_list_with_unknown_database",
                        "test_database_tables_superset_exception",
                        "test_database_tables_exception",
                        "test_database_tables_list_tables"
                      ],
                      "classes": [
                        "TestCreateDatabaseCommand",
                        "TestExportDatabasesCommand",
                        "TestImportDatabasesCommand",
                        "TestTestConnectionDatabaseCommand",
                        "TestTablesDatabaseCommand"
                      ],
                      "imports": [
                        "unittest",
                        "unittest.mock",
                        "pytest",
                        "yaml",
                        "sqlalchemy.exc",
                        "superset",
                        "superset.commands.database.create",
                        "superset.commands.database.exceptions",
                        "superset.commands.database.export",
                        "superset.commands.database.importers.v1",
                        "superset.commands.database.tables",
                        "superset.commands.database.test_connection",
                        "superset.commands.database.validate",
                        "superset.commands.exceptions",
                        "superset.commands.importers.exceptions",
                        "superset.connectors.sqla.models",
                        "superset.databases.schemas",
                        "superset.databases.ssh_tunnel.models",
                        "superset.errors",
                        "superset.exceptions",
                        "superset.models.core",
                        "superset.utils.core",
                        "superset.utils.database",
                        "tests.integration_tests.base_tests",
                        "tests.integration_tests.fixtures.birth_names_dashboard",
                        "tests.integration_tests.fixtures.energy_dashboard",
                        "tests.integration_tests.fixtures.importexport"
                      ],
                      "size_lines": 1196,
                      "has_main": false,
                      "docstring": null
                    },
                    "ssh_tunnel": {
                      "__init__.py": {
                        "functions": [],
                        "classes": [],
                        "imports": [],
                        "size_lines": 17,
                        "has_main": false,
                        "docstring": null
                      },
                      "commands": {
                        "__init__.py": {
                          "functions": [],
                          "classes": [],
                          "imports": [],
                          "size_lines": 17,
                          "has_main": false,
                          "docstring": null
                        },
                        "commands_tests.py": {
                          "functions": [
                            "test_update_ssh_tunnel_not_found",
                            "test_delete_ssh_tunnel_not_found"
                          ],
                          "classes": [
                            "TestUpdateSSHTunnelCommand",
                            "TestDeleteSSHTunnelCommand"
                          ],
                          "imports": [
                            "unittest",
                            "pytest",
                            "superset",
                            "superset.commands.database.ssh_tunnel.delete",
                            "superset.commands.database.ssh_tunnel.exceptions",
                            "superset.commands.database.ssh_tunnel.update",
                            "tests.integration_tests.base_tests"
                          ],
                          "size_lines": 59,
                          "has_main": false,
                          "docstring": null
                        }
                      }
                    },
                    "commands": {
                      "upload_test.py": {
                        "functions": [
                          "_setup_csv_upload",
                          "get_upload_db",
                          "setup_csv_upload_with_context",
                          "setup_csv_upload_with_context_schema",
                          "test_csv_upload_with_nulls",
                          "test_csv_upload_dataset",
                          "test_csv_upload_with_index",
                          "test_csv_upload_database_not_found",
                          "test_csv_upload_database_not_supported",
                          "test_csv_upload_schema_not_allowed"
                        ],
                        "classes": [],
                        "imports": [
                          "__future__",
                          "pytest",
                          "flask.ctx",
                          "superset",
                          "superset.commands.database.exceptions",
                          "superset.commands.database.uploaders.base",
                          "superset.commands.database.uploaders.csv_reader",
                          "superset.connectors.sqla.models",
                          "superset.models.core",
                          "superset.utils",
                          "superset.utils.core",
                          "superset.utils.database",
                          "tests.integration_tests.conftest",
                          "tests.integration_tests.test_app",
                          "tests.unit_tests.fixtures.common"
                        ],
                        "size_lines": 236,
                        "has_main": false,
                        "docstring": null
                      },
                      "__init__.py": {
                        "functions": [],
                        "classes": [],
                        "imports": [],
                        "size_lines": 17,
                        "has_main": false,
                        "docstring": null
                      }
                    }
                  },
                  "tasks": {
                    "test_utils.py": {
                      "functions": [
                        "test_fetch_csrf_token"
                      ],
                      "classes": [],
                      "imports": [
                        "unittest",
                        "pytest",
                        "tests.integration_tests.test_app",
                        "superset.tasks.utils"
                      ],
                      "size_lines": 78,
                      "has_main": false,
                      "docstring": null
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "async_queries_tests.py": {
                      "functions": [
                        "test_load_chart_data_into_cache",
                        "test_load_chart_data_into_cache_error",
                        "test_soft_timeout_load_chart_data_into_cache",
                        "test_load_explore_json_into_cache",
                        "test_load_explore_json_into_cache_error",
                        "test_soft_timeout_load_explore_json_into_cache"
                      ],
                      "classes": [
                        "TestAsyncQueries"
                      ],
                      "imports": [
                        "unittest",
                        "uuid",
                        "pytest",
                        "celery.exceptions",
                        "parameterized",
                        "superset.async_events.cache_backend",
                        "superset.commands.chart.data.get_data_command",
                        "superset.commands.chart.exceptions",
                        "superset.exceptions",
                        "superset.extensions",
                        "tests.integration_tests.base_tests",
                        "tests.integration_tests.fixtures.birth_names_dashboard",
                        "tests.integration_tests.fixtures.query_context",
                        "tests.integration_tests.fixtures.tags",
                        "tests.integration_tests.test_app",
                        "superset.tasks.async_queries",
                        "superset.tasks.async_queries",
                        "superset.tasks.async_queries",
                        "superset.tasks.async_queries",
                        "superset.tasks.async_queries",
                        "superset.tasks.async_queries"
                      ],
                      "size_lines": 274,
                      "has_main": false,
                      "docstring": "Unit tests for async query celery jobs in Superset"
                    },
                    "test_cache.py": {
                      "functions": [
                        "test_fetch_url"
                      ],
                      "classes": [],
                      "imports": [
                        "unittest",
                        "pytest",
                        "tests.integration_tests.test_app",
                        "superset.tasks.cache"
                      ],
                      "size_lines": 96,
                      "has_main": false,
                      "docstring": null
                    }
                  },
                  "security": {
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "migrate_roles_tests.py": {
                      "functions": [
                        "create_old_role",
                        "test_migrate_role"
                      ],
                      "classes": [],
                      "imports": [
                        "logging",
                        "contextlib",
                        "unittest.mock",
                        "pytest",
                        "flask_appbuilder.security.sqla.models",
                        "superset.extensions",
                        "superset.migrations.shared.security_converge",
                        "tests.integration_tests.test_app"
                      ],
                      "size_lines": 279,
                      "has_main": false,
                      "docstring": "Unit tests for alerting in Superset"
                    },
                    "api_tests.py": {
                      "functions": [
                        "_assert_get_csrf_token",
                        "test_get_csrf_token",
                        "test_get_csrf_token_gamma",
                        "test_get_csrf_unauthorized",
                        "test_login",
                        "test_post_guest_token_unauthenticated",
                        "test_post_guest_token_unauthorized",
                        "test_post_guest_token_authorized",
                        "test_post_guest_token_bad_resources",
                        "_get_guest_token_with_rls",
                        "test_guest_token_validator_hook_denied",
                        "test_guest_token_validator_hook_denied_allowed",
                        "test_guest_validator_hook_not_callable",
                        "test_guest_validator_hook_throws_exception",
                        "test_guest_validator_hook_real_world_example_positive",
                        "test_guest_validator_hook_real_world_example_negative",
                        "test_get_security_roles_admin",
                        "test_get_security_roles_gamma",
                        "test_post_security_roles_gamma",
                        "test_put_security_roles_gamma",
                        "test_delete_security_roles_gamma"
                      ],
                      "classes": [
                        "TestSecurityCsrfApi",
                        "TestSecurityGuestTokenApi",
                        "TestSecurityGuestTokenApiTokenValidator",
                        "TestSecurityRolesApi"
                      ],
                      "imports": [
                        "jwt",
                        "pytest",
                        "flask_wtf.csrf",
                        "superset",
                        "superset.daos.dashboard",
                        "superset.models.dashboard",
                        "superset.utils.urls",
                        "superset.utils",
                        "tests.conftest",
                        "tests.integration_tests.base_tests",
                        "tests.integration_tests.constants",
                        "tests.integration_tests.fixtures.birth_names_dashboard"
                      ],
                      "size_lines": 279,
                      "has_main": false,
                      "docstring": "Tests for security api methods"
                    },
                    "guest_token_security_tests.py": {
                      "functions": [
                        "authorized_guest",
                        "test_is_guest_user__regular_user",
                        "test_is_guest_user__anonymous",
                        "test_is_guest_user__guest_user",
                        "test_is_guest_user__flag_off",
                        "test_get_guest_user__regular_user",
                        "test_get_guest_user__anonymous_user",
                        "test_get_guest_user__guest_user",
                        "test_get_guest_user_roles_explicit",
                        "test_get_guest_user_roles_implicit",
                        "setUp",
                        "test_has_guest_access__regular_user",
                        "test_has_guest_access__anonymous_user",
                        "test_has_guest_access__authorized_guest_user",
                        "test_has_guest_access__authorized_guest_user__non_zero_resource_index",
                        "test_has_guest_access__unauthorized_guest_user__different_resource_id",
                        "test_has_guest_access__unauthorized_guest_user__different_resource_type",
                        "test_raise_for_dashboard_access_as_guest",
                        "test_raise_for_access_dashboard_as_unauthorized_guest",
                        "test_raise_for_access_dashboard_as_guest_no_rbac",
                        "create_dataset",
                        "setUp",
                        "test_raise_for_access__happy_path",
                        "test_raise_for_access__native_filter_happy_path",
                        "test_raise_for_access__no_dashboard_in_form_data",
                        "test_raise_for_access__no_chart_in_form_data",
                        "test_raise_for_access__chart_not_on_dashboard",
                        "test_raise_for_access__chart_doesnt_belong_to_datasource",
                        "test_raise_for_access__native_filter_no_id_in_form_data",
                        "test_raise_for_access__native_filter_datasource_not_associated",
                        "test_raise_for_access__embedded_feature_flag_off",
                        "test_raise_for_access__unauthorized_guest_user"
                      ],
                      "classes": [
                        "TestGuestUserSecurity",
                        "TestGuestUserDashboardAccess",
                        "TestGuestUserDatasourceAccess"
                      ],
                      "imports": [
                        "unittest.mock",
                        "pytest",
                        "flask",
                        "superset",
                        "superset.connectors.sqla.models",
                        "superset.daos.dashboard",
                        "superset.exceptions",
                        "superset.models.dashboard",
                        "superset.security.guest_token",
                        "superset.sql_parse",
                        "superset.utils",
                        "superset.utils.core",
                        "superset.utils.database",
                        "tests.integration_tests.base_tests",
                        "tests.integration_tests.fixtures.birth_names_dashboard",
                        "tests.integration_tests.fixtures.world_bank_dashboard"
                      ],
                      "size_lines": 483,
                      "has_main": false,
                      "docstring": "Unit tests for Superset"
                    },
                    "analytics_db_safety_tests.py": {
                      "functions": [
                        "test_check_sqlalchemy_uri"
                      ],
                      "classes": [],
                      "imports": [
                        "typing",
                        "pytest",
                        "sqlalchemy.engine.url",
                        "superset.exceptions",
                        "superset.security.analytics_db_safety"
                      ],
                      "size_lines": 92,
                      "has_main": false,
                      "docstring": null
                    },
                    "row_level_security_tests.py": {
                      "functions": [
                        "setUp",
                        "tearDown",
                        "create_dataset",
                        "_get_test_dataset",
                        "test_model_view_rls_add_success",
                        "test_model_view_rls_add_name_unique",
                        "test_model_view_rls_add_tables_required",
                        "test_rls_filter_alters_energy_query",
                        "test_rls_filter_doesnt_alter_energy_query",
                        "test_multiple_table_filter_alters_another_tables_query",
                        "test_rls_filter_alters_gamma_birth_names_query",
                        "test_rls_filter_alters_no_role_user_birth_names_query",
                        "test_rls_filter_doesnt_alter_admin_birth_names_query",
                        "test_get_rls_cache_key",
                        "test_invalid_role_failure",
                        "test_invalid_table_failure",
                        "test_post_success",
                        "test_invalid_id_failure",
                        "test_invalid_role_failure",
                        "test_invalid_table_failure",
                        "test_put_success",
                        "test_invalid_id_failure",
                        "test_bulk_delete_success",
                        "test_rls_tables_related_api",
                        "test_rls_roles_related_api",
                        "test_table_related_filter",
                        "test_get_all_related_roles_with_with_extra_filters",
                        "default_rls_rule",
                        "guest_user_with_rls",
                        "test_rls_filter_alters_query",
                        "test_rls_filter_does_not_alter_unrelated_query",
                        "test_multiple_rls_filters_are_unionized",
                        "test_rls_filter_for_all_datasets",
                        "test_dataset_id_can_be_string",
                        "_base_filter"
                      ],
                      "classes": [
                        "TestRowLevelSecurity",
                        "TestRowLevelSecurityCreateAPI",
                        "TestRowLevelSecurityUpdateAPI",
                        "TestRowLevelSecurityDeleteAPI",
                        "TestRowLevelSecurityWithRelatedAPI",
                        "GuestTokenRowLevelSecurityTests"
                      ],
                      "imports": [
                        "re",
                        "typing",
                        "unittest",
                        "pytest",
                        "flask",
                        "prison",
                        "superset",
                        "superset.connectors.sqla.models",
                        "superset.security.guest_token",
                        "superset.utils",
                        "flask_babel",
                        "flask_appbuilder.models.sqla",
                        "tests.integration_tests.base_tests",
                        "tests.integration_tests.constants",
                        "tests.integration_tests.fixtures.birth_names_dashboard",
                        "tests.integration_tests.fixtures.energy_dashboard",
                        "tests.integration_tests.fixtures.unicode_dashboard"
                      ],
                      "size_lines": 724,
                      "has_main": false,
                      "docstring": null
                    }
                  },
                  "available_domains": {
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "api_tests.py": {
                      "functions": [
                        "test_get_available_domains"
                      ],
                      "classes": [],
                      "imports": [
                        "superset.utils",
                        "tests.integration_tests.test_app"
                      ],
                      "size_lines": 30,
                      "has_main": false,
                      "docstring": null
                    }
                  },
                  "datasets": {
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "api_tests.py": {
                      "functions": [
                        "insert_dataset",
                        "insert_default_dataset",
                        "get_fixture_datasets",
                        "get_fixture_virtual_datasets",
                        "create_virtual_datasets",
                        "create_datasets",
                        "get_energy_usage_dataset",
                        "create_dataset_import",
                        "test_user_gets_all_datasets",
                        "test_get_dataset_list",
                        "test_get_dataset_list_gamma",
                        "test_get_dataset_list_gamma_has_database_access",
                        "test_get_dataset_related_database_gamma",
                        "test_get_dataset_item",
                        "test_get_dataset_render_jinja",
                        "test_get_dataset_render_jinja_exceptions",
                        "test_get_dataset_distinct_schema",
                        "test_get_dataset_distinct_not_allowed",
                        "test_get_dataset_distinct_gamma",
                        "test_get_dataset_info",
                        "test_info_security_dataset",
                        "test_create_dataset_item",
                        "test_create_dataset_item_normalize",
                        "test_create_dataset_item_gamma",
                        "test_create_dataset_item_owner",
                        "test_create_dataset_item_owners_invalid",
                        "test_create_dataset_with_sql",
                        "test_create_dataset_same_name_different_schema",
                        "test_create_dataset_validate_database",
                        "test_create_dataset_validate_tables_exists",
                        "test_create_dataset_validate_view_exists",
                        "test_create_dataset_sqlalchemy_error",
                        "test_update_dataset_preserve_ownership",
                        "test_update_dataset_clear_owner_list",
                        "test_update_dataset_populate_owner",
                        "test_update_dataset_item",
                        "test_update_dataset_item_w_override_columns",
                        "test_update_dataset_item_w_override_columns_same_columns",
                        "test_update_dataset_create_column_and_metric",
                        "test_update_dataset_delete_column",
                        "test_update_dataset_update_column",
                        "test_update_dataset_delete_metric",
                        "test_update_dataset_update_column_uniqueness",
                        "test_update_dataset_update_metric_uniqueness",
                        "test_update_dataset_update_column_duplicate",
                        "test_update_dataset_update_metric_duplicate",
                        "test_update_dataset_item_gamma",
                        "test_dataset_get_list_no_username",
                        "test_dataset_get_no_username",
                        "test_update_dataset_item_not_owned",
                        "test_update_dataset_item_owners_invalid",
                        "test_update_dataset_sqlalchemy_error",
                        "test_delete_dataset_item",
                        "test_delete_item_dataset_not_owned",
                        "test_delete_dataset_item_not_authorized",
                        "test_delete_dataset_sqlalchemy_error",
                        "test_delete_dataset_column",
                        "test_delete_dataset_column_not_found",
                        "test_delete_dataset_column_not_owned",
                        "test_delete_dataset_column_fail",
                        "test_delete_dataset_metric",
                        "test_delete_dataset_metric_not_found",
                        "test_delete_dataset_metric_not_owned",
                        "test_delete_dataset_metric_fail",
                        "test_bulk_delete_dataset_items",
                        "test_bulk_delete_item_dataset_not_owned",
                        "test_bulk_delete_item_not_found",
                        "test_bulk_delete_dataset_item_not_authorized",
                        "test_bulk_delete_dataset_item_incorrect",
                        "test_dataset_item_refresh",
                        "test_dataset_item_refresh_not_found",
                        "test_dataset_item_refresh_not_owned",
                        "test_export_dataset",
                        "test_export_dataset_not_found",
                        "test_export_dataset_gamma",
                        "test_export_dataset_bundle",
                        "test_export_dataset_bundle_not_found",
                        "test_export_dataset_bundle_gamma",
                        "test_get_dataset_related_objects",
                        "test_get_dataset_related_objects_not_found",
                        "test_get_datasets_custom_filter_sql",
                        "test_import_dataset",
                        "test_import_dataset_v0_export",
                        "test_import_dataset_overwrite",
                        "test_import_dataset_invalid",
                        "test_import_dataset_invalid_v0_validation",
                        "test_get_datasets_is_certified_filter",
                        "test_duplicate_virtual_dataset",
                        "test_duplicate_physical_dataset",
                        "test_duplicate_existing_dataset",
                        "test_duplicate_invalid_dataset",
                        "test_get_or_create_dataset_already_exists",
                        "test_get_or_create_dataset_database_not_found",
                        "test_get_or_create_dataset_create_fails",
                        "test_get_or_create_dataset_creates_table",
                        "test_warm_up_cache",
                        "test_warm_up_cache_db_and_table_name_required",
                        "test_warm_up_cache_table_not_found",
                        "count_datasets",
                        "pg_test_query_parameter"
                      ],
                      "classes": [
                        "TestDatasetApi"
                      ],
                      "imports": [
                        "unittest",
                        "io",
                        "typing",
                        "unittest.mock",
                        "zipfile",
                        "prison",
                        "pytest",
                        "yaml",
                        "sqlalchemy",
                        "sqlalchemy.exc",
                        "sqlalchemy.orm",
                        "sqlalchemy.sql",
                        "superset",
                        "superset.commands.dataset.exceptions",
                        "superset.connectors.sqla.models",
                        "superset.extensions",
                        "superset.models.core",
                        "superset.models.slice",
                        "superset.utils",
                        "superset.utils.core",
                        "superset.utils.database",
                        "superset.utils.dict_import_export",
                        "tests.integration_tests.base_tests",
                        "tests.integration_tests.conftest",
                        "tests.integration_tests.constants",
                        "tests.integration_tests.fixtures.birth_names_dashboard",
                        "tests.integration_tests.fixtures.energy_dashboard",
                        "tests.integration_tests.fixtures.importexport"
                      ],
                      "size_lines": 2630,
                      "has_main": false,
                      "docstring": "Unit tests for Superset"
                    },
                    "commands_tests.py": {
                      "functions": [
                        "_get_table_from_list_by_name",
                        "test_export_dataset_command",
                        "test_export_dataset_command_no_access",
                        "test_export_dataset_command_invalid_dataset",
                        "test_export_dataset_command_key_order",
                        "test_export_dataset_command_no_related",
                        "test_import_v0_dataset_cli_export",
                        "test_import_v0_dataset_ui_export",
                        "test_import_v1_dataset",
                        "test_import_v1_dataset_multiple",
                        "test_import_v1_dataset_validation",
                        "test_import_v1_dataset_existing_database",
                        "test_database_not_found",
                        "test_get_table_from_database_error",
                        "test_create_dataset_command",
                        "test_create_dataset_command_not_allowed",
                        "test_warm_up_cache_command_table_not_found",
                        "test_warm_up_cache"
                      ],
                      "classes": [
                        "TestExportDatasetsCommand",
                        "TestImportDatasetsCommand",
                        "TestCreateDatasetCommand",
                        "TestDatasetWarmUpCacheCommand"
                      ],
                      "imports": [
                        "operator",
                        "typing",
                        "unittest.mock",
                        "pytest",
                        "yaml",
                        "sqlalchemy.exc",
                        "superset",
                        "superset.commands.database.importers.v1",
                        "superset.commands.dataset.create",
                        "superset.commands.dataset.exceptions",
                        "superset.commands.dataset.export",
                        "superset.commands.dataset.importers",
                        "superset.commands.dataset.warm_up_cache",
                        "superset.commands.exceptions",
                        "superset.commands.importers.exceptions",
                        "superset.connectors.sqla.models",
                        "superset.models.core",
                        "superset.models.slice",
                        "superset.utils.core",
                        "superset.utils.database",
                        "tests.integration_tests.base_tests",
                        "tests.integration_tests.fixtures.birth_names_dashboard",
                        "tests.integration_tests.fixtures.energy_dashboard",
                        "tests.integration_tests.fixtures.importexport",
                        "tests.integration_tests.fixtures.world_bank_dashboard"
                      ],
                      "size_lines": 634,
                      "has_main": false,
                      "docstring": null
                    }
                  },
                  "queries": {
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "api_tests.py": {
                      "functions": [
                        "insert_query",
                        "create_queries",
                        "get_random_string",
                        "test_get_query",
                        "test_get_query_not_found",
                        "test_get_query_no_data_access",
                        "test_get_list_query",
                        "test_get_list_query_filter_sql",
                        "test_get_list_query_filter_database",
                        "test_get_list_query_filter_user",
                        "test_get_list_query_filter_changed_on",
                        "test_get_list_query_order",
                        "test_get_list_query_no_data_access",
                        "test_get_updated_since",
                        "test_stop_query_not_found",
                        "test_stop_query"
                      ],
                      "classes": [
                        "TestQueryApi"
                      ],
                      "imports": [
                        "datetime",
                        "unittest",
                        "random",
                        "string",
                        "pytest",
                        "prison",
                        "sqlalchemy.sql",
                        "tests.integration_tests.test_app",
                        "superset",
                        "superset.common.db_query_status",
                        "superset.models.core",
                        "superset.utils.database",
                        "superset.utils",
                        "superset.models.sql_lab",
                        "tests.integration_tests.base_tests",
                        "tests.integration_tests.constants"
                      ],
                      "size_lines": 506,
                      "has_main": false,
                      "docstring": "Unit tests for Superset"
                    },
                    "saved_queries": {
                      "__init__.py": {
                        "functions": [],
                        "classes": [],
                        "imports": [],
                        "size_lines": 17,
                        "has_main": false,
                        "docstring": null
                      },
                      "api_tests.py": {
                        "functions": [
                          "insert_saved_query",
                          "insert_default_saved_query",
                          "create_saved_queries",
                          "create_saved_queries_some_with_tags",
                          "test_get_list_saved_query",
                          "test_get_list_saved_query_gamma",
                          "test_get_list_sort_saved_query",
                          "test_get_list_filter_saved_query",
                          "test_get_list_filter_database_saved_query",
                          "test_get_list_filter_schema_saved_query",
                          "test_get_list_custom_filter_schema_saved_query",
                          "test_get_list_custom_filter_label_saved_query",
                          "test_get_list_custom_filter_sql_saved_query",
                          "test_get_list_custom_filter_description_saved_query",
                          "test_get_saved_queries_tag_filters",
                          "test_get_saved_query_favorite_filter",
                          "test_info_saved_query",
                          "test_info_security_saved_query",
                          "test_related_saved_query",
                          "test_related_saved_query_not_found",
                          "test_distinct_saved_query",
                          "test_get_saved_query_not_allowed",
                          "test_get_saved_query",
                          "test_get_saved_query_not_found",
                          "test_create_saved_query",
                          "test_update_saved_query",
                          "test_update_saved_query_not_found",
                          "test_delete_saved_query",
                          "test_delete_saved_query_not_found",
                          "test_delete_bulk_saved_queries",
                          "test_delete_one_bulk_saved_queries",
                          "test_delete_bulk_saved_query_bad_request",
                          "test_delete_bulk_saved_query_not_found",
                          "test_export",
                          "test_export_not_found",
                          "test_export_not_allowed",
                          "create_saved_query_import",
                          "test_import_saved_queries"
                        ],
                        "classes": [
                          "TestSavedQueryApi"
                        ],
                        "imports": [
                          "datetime",
                          "io",
                          "typing",
                          "unittest.mock",
                          "zipfile",
                          "yaml",
                          "pytest",
                          "prison",
                          "freezegun",
                          "sqlalchemy.sql",
                          "superset",
                          "superset.models.core",
                          "superset.models.core",
                          "superset.models.sql_lab",
                          "superset.tags.models",
                          "superset.utils.database",
                          "superset.utils",
                          "tests.integration_tests.base_tests",
                          "tests.integration_tests.constants",
                          "tests.integration_tests.fixtures.importexport",
                          "tests.integration_tests.fixtures.tags"
                        ],
                        "size_lines": 930,
                        "has_main": false,
                        "docstring": "Unit tests for Superset"
                      },
                      "commands_tests.py": {
                        "functions": [
                          "setUp",
                          "tearDown",
                          "test_export_query_command",
                          "test_export_query_command_no_related",
                          "test_export_query_command_no_access",
                          "test_export_query_command_invalid_dataset",
                          "test_export_query_command_key_order",
                          "test_import_v1_saved_queries",
                          "test_import_v1_saved_queries_multiple",
                          "test_import_v1_saved_queries_validation"
                        ],
                        "classes": [
                          "TestExportSavedQueriesCommand",
                          "TestImportSavedQueriesCommand"
                        ],
                        "imports": [
                          "unittest.mock",
                          "pytest",
                          "yaml",
                          "superset",
                          "superset.commands.exceptions",
                          "superset.commands.importers.exceptions",
                          "superset.commands.query.exceptions",
                          "superset.commands.query.export",
                          "superset.commands.query.importers.v1",
                          "superset.models.core",
                          "superset.models.sql_lab",
                          "superset.utils.database",
                          "tests.integration_tests.base_tests",
                          "tests.integration_tests.fixtures.importexport"
                        ],
                        "size_lines": 254,
                        "has_main": false,
                        "docstring": null
                      }
                    }
                  },
                  "charts": {
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "schema_tests.py": {
                      "functions": [
                        "test_query_context_limit_and_offset",
                        "test_query_context_null_timegrain",
                        "test_query_context_series_limit"
                      ],
                      "classes": [
                        "TestSchema"
                      ],
                      "imports": [
                        "unittest",
                        "pytest",
                        "marshmallow",
                        "tests.integration_tests.test_app",
                        "superset.charts.schemas",
                        "tests.integration_tests.base_tests",
                        "tests.integration_tests.fixtures.birth_names_dashboard",
                        "tests.integration_tests.fixtures.query_context"
                      ],
                      "size_lines": 78,
                      "has_main": false,
                      "docstring": "Unit tests for Superset"
                    },
                    "api_tests.py": {
                      "functions": [
                        "clear_data_cache",
                        "create_charts",
                        "create_charts_created_by_gamma",
                        "create_certified_charts",
                        "create_chart_with_report",
                        "add_dashboard_to_chart",
                        "create_chart_with_tag",
                        "create_charts_some_with_tags",
                        "test_info_security_chart",
                        "create_chart_import",
                        "test_delete_chart",
                        "test_delete_bulk_charts",
                        "test_delete_bulk_chart_bad_request",
                        "test_delete_not_found_chart",
                        "test_delete_chart_with_report",
                        "test_delete_bulk_charts_not_found",
                        "test_bulk_delete_chart_with_report",
                        "test_delete_chart_admin_not_owned",
                        "test_delete_bulk_chart_admin_not_owned",
                        "test_delete_chart_not_owned",
                        "test_delete_bulk_chart_not_owned",
                        "test_create_chart",
                        "test_create_simple_chart",
                        "test_create_chart_validate_owners",
                        "test_create_chart_validate_params",
                        "test_create_chart_validate_datasource",
                        "test_create_chart_validate_user_is_dashboard_owner",
                        "test_update_chart",
                        "test_chart_get_list_no_username",
                        "test_chart_get_no_username",
                        "test_update_chart_new_owner_not_admin",
                        "test_update_chart_new_owner_admin",
                        "test_update_chart_preserve_ownership",
                        "test_update_chart_clear_owner_list",
                        "test_update_chart_populate_owner",
                        "test_update_chart_new_dashboards",
                        "test_not_update_chart_none_dashboards",
                        "test_update_chart_not_owned",
                        "test_update_chart_linked_with_not_owned_dashboard",
                        "test_update_chart_validate_datasource",
                        "test_update_chart_validate_owners",
                        "test_get_chart",
                        "test_get_chart_not_found",
                        "test_get_chart_no_data_access",
                        "test_get_charts",
                        "test_get_charts_dashboards",
                        "test_get_charts_dashboard_filter",
                        "test_get_charts_tag_filters",
                        "test_get_charts_changed_on",
                        "test_get_charts_filter",
                        "load_energy_charts",
                        "test_get_charts_custom_filter",
                        "test_admin_gets_filtered_energy_slices",
                        "test_gets_certified_charts_filter",
                        "test_gets_not_certified_charts_filter",
                        "test_user_gets_none_filtered_energy_slices",
                        "test_user_gets_all_charts",
                        "test_get_charts_favorite_filter",
                        "test_get_charts_created_by_me_filter",
                        "test_get_current_user_favorite_status",
                        "test_add_favorite",
                        "test_remove_favorite",
                        "test_get_time_range",
                        "test_query_form_data",
                        "test_get_charts_page",
                        "test_get_charts_no_data_access",
                        "test_export_chart",
                        "test_export_chart_not_found",
                        "test_export_chart_gamma",
                        "test_import_chart",
                        "test_import_chart_overwrite",
                        "test_import_chart_invalid",
                        "test_gets_created_by_user_charts_filter",
                        "test_gets_not_created_by_user_charts_filter",
                        "test_gets_owned_created_favorited_by_me_filter",
                        "test_warm_up_cache",
                        "test_warm_up_cache_chart_id_required",
                        "test_warm_up_cache_chart_not_found",
                        "test_warm_up_cache_payload_validation",
                        "test_warm_up_cache_error",
                        "test_warm_up_cache_no_query_context",
                        "test_warm_up_cache_no_datasource",
                        "test_update_chart_add_tags_can_write_on_tag",
                        "test_update_chart_remove_tags_can_write_on_tag",
                        "test_update_chart_add_tags_can_tag_on_chart",
                        "test_update_chart_remove_tags_can_tag_on_chart",
                        "test_update_chart_add_tags_missing_permission",
                        "test_update_chart_remove_tags_missing_permission",
                        "test_update_chart_no_tag_changes",
                        "count_charts"
                      ],
                      "classes": [
                        "TestChartApi"
                      ],
                      "imports": [
                        "io",
                        "unittest",
                        "unittest.mock",
                        "zipfile",
                        "prison",
                        "pytest",
                        "yaml",
                        "flask_babel",
                        "parameterized",
                        "sqlalchemy",
                        "sqlalchemy.sql",
                        "superset.commands.chart.data.get_data_command",
                        "superset.commands.chart.exceptions",
                        "superset.connectors.sqla.models",
                        "superset.extensions",
                        "superset.models.core",
                        "superset.models.dashboard",
                        "superset.models.slice",
                        "superset.reports.models",
                        "superset.tags.models",
                        "superset.utils",
                        "superset.utils.core",
                        "tests.integration_tests.base_api_tests",
                        "tests.integration_tests.base_tests",
                        "tests.integration_tests.constants",
                        "tests.integration_tests.fixtures.birth_names_dashboard",
                        "tests.integration_tests.fixtures.energy_dashboard",
                        "tests.integration_tests.fixtures.importexport",
                        "tests.integration_tests.fixtures.tags",
                        "tests.integration_tests.fixtures.unicode_dashboard",
                        "tests.integration_tests.fixtures.world_bank_dashboard",
                        "tests.integration_tests.insert_chart_mixin",
                        "tests.integration_tests.test_app",
                        "tests.integration_tests.utils.get_dashboards"
                      ],
                      "size_lines": 2329,
                      "has_main": false,
                      "docstring": null
                    },
                    "commands_tests.py": {
                      "functions": [
                        "test_export_chart_command",
                        "test_export_chart_command_no_access",
                        "test_export_chart_command_invalid_dataset",
                        "test_export_chart_command_key_order",
                        "test_export_chart_command_no_related",
                        "test_import_v1_chart",
                        "test_import_v1_chart_multiple",
                        "test_import_v1_chart_validation",
                        "test_create_v1_response",
                        "test_update_v1_response",
                        "test_query_context_update_command",
                        "test_warm_up_cache_command_chart_not_found",
                        "test_warm_up_cache",
                        "test_fave_unfave_chart_command",
                        "test_fave_unfave_chart_command_not_found",
                        "test_fave_unfave_chart_command_forbidden"
                      ],
                      "classes": [
                        "TestExportChartsCommand",
                        "TestImportChartsCommand",
                        "TestChartsCreateCommand",
                        "TestChartsUpdateCommand",
                        "TestChartWarmUpCacheCommand",
                        "TestFavoriteChartCommand"
                      ],
                      "imports": [
                        "unittest.mock",
                        "pytest",
                        "yaml",
                        "flask",
                        "superset",
                        "superset.commands.chart.create",
                        "superset.commands.chart.exceptions",
                        "superset.commands.chart.export",
                        "superset.commands.chart.fave",
                        "superset.commands.chart.importers.v1",
                        "superset.commands.chart.unfave",
                        "superset.commands.chart.update",
                        "superset.commands.chart.warm_up_cache",
                        "superset.commands.exceptions",
                        "superset.commands.importers.exceptions",
                        "superset.connectors.sqla.models",
                        "superset.daos.chart",
                        "superset.models.core",
                        "superset.models.slice",
                        "superset.utils",
                        "superset.utils.core",
                        "tests.integration_tests.base_tests",
                        "tests.integration_tests.fixtures.birth_names_dashboard",
                        "tests.integration_tests.fixtures.energy_dashboard",
                        "tests.integration_tests.fixtures.importexport"
                      ],
                      "size_lines": 499,
                      "has_main": false,
                      "docstring": null
                    },
                    "data": {
                      "__init__.py": {
                        "functions": [],
                        "classes": [],
                        "imports": [],
                        "size_lines": 17,
                        "has_main": false,
                        "docstring": null
                      },
                      "api_tests.py": {
                        "functions": [
                          "skip_by_backend",
                          "physical_query_context",
                          "test_cache_default_timeout",
                          "test_custom_cache_timeout",
                          "test_time_filter_with_grain",
                          "test_force_cache_timeout",
                          "test_data_cache_default_timeout",
                          "test_chart_cache_timeout",
                          "test_chart_cache_timeout_not_present",
                          "test_chart_cache_timeout_chart_not_found",
                          "test_chart_data_subquery_not_allowed",
                          "test_chart_data_subquery_allowed",
                          "setUp",
                          "get_expected_row_count",
                          "quote_name",
                          "test__map_form_data_datasource_to_dataset_id",
                          "test_with_valid_qc__data_is_returned",
                          "assert_row_count",
                          "test_without_row_limit__row_count_as_default_row_limit",
                          "test_as_samples_without_row_limit__row_count_as_default_samples_row_limit",
                          "test_with_row_limit_bigger_then_sql_max_row__rowcount_as_sql_max_row",
                          "test_as_samples_with_row_limit_bigger_then_sql_max_row_rowcount_as_sql_max_row",
                          "test_with_row_limit_as_samples__rowcount_as_row_limit",
                          "test_with_incorrect_result_type__400",
                          "test_with_incorrect_result_format__400",
                          "test_with_invalid_payload__400",
                          "test_with_query_result_type__200",
                          "test_empty_request_with_csv_result_format",
                          "test_empty_request_with_excel_result_format",
                          "test_with_csv_result_format",
                          "test_with_excel_result_format",
                          "test_with_multi_query_csv_result_format",
                          "test_with_multi_query_excel_result_format",
                          "test_with_csv_result_format_when_actor_not_permitted_for_csv__403",
                          "test_with_excel_result_format_when_actor_not_permitted_for_excel__403",
                          "test_with_row_limit_and_offset__row_limit_and_offset_were_applied",
                          "test_chart_data_applied_time_extras",
                          "test_with_in_op_filter__data_is_returned",
                          "test_chart_data_dttm_filter",
                          "test_chart_data_prophet",
                          "test_chart_data_invalid_post_processing",
                          "test_with_query_result_type_and_non_existent_filter__filter_omitted",
                          "test_with_filter_suppose_to_return_empty_data__no_data_returned",
                          "test_with_invalid_where_parameter__400",
                          "test_with_invalid_where_parameter_closing_unclosed__400",
                          "test_with_where_parameter_including_comment___200",
                          "test_with_orderby_parameter_with_second_query__400",
                          "test_with_invalid_having_parameter_closing_and_comment__400",
                          "test_with_invalid_datasource__400",
                          "test_with_not_permitted_actor__403",
                          "test_when_where_parameter_is_template_and_query_result_type__query_is_templated",
                          "test_chart_data_async",
                          "test_chart_data_async_cached_sync_response",
                          "test_chart_data_async_results_type",
                          "test_chart_data_async_invalid_token",
                          "test_chart_data_rowcount",
                          "test_with_timegrains_and_columns_result_types",
                          "test_with_series_limit",
                          "test_with_annotations_layers__annotations_data_returned",
                          "test_with_virtual_table_with_colons_as_datasource",
                          "test_with_table_columns_without_metrics",
                          "test_with_adhoc_column_without_metrics",
                          "test_get_data_when_query_context_is_null",
                          "test_chart_data_get",
                          "test_chart_data_get_with_x_axis_using_custom_sql",
                          "test_chart_data_get_forced",
                          "test_chart_data_cache",
                          "test_chart_data_cache_run_failed",
                          "test_chart_data_cache_no_login",
                          "test_chart_data_cache_key_error",
                          "test_chart_data_with_adhoc_column",
                          "test_chart_data_with_incompatible_adhoc_column",
                          "test_chart_data_as_guest_user",
                          "test_chart_data_table_chart_with_time_grain_filter",
                          "mock_run",
                          "mock_run"
                        ],
                        "classes": [
                          "BaseTestChartDataApi",
                          "TestPostChartDataApi",
                          "TestGetChartDataApi",
                          "QueryContext"
                        ],
                        "imports": [
                          "copy",
                          "time",
                          "unittest",
                          "datetime",
                          "io",
                          "typing",
                          "unittest",
                          "zipfile",
                          "pytest",
                          "flask",
                          "flask.ctx",
                          "superset.charts.data.api",
                          "superset.commands.chart.data.get_data_command",
                          "superset.common.chart_data",
                          "superset.connectors.sqla.models",
                          "superset.errors",
                          "superset.extensions",
                          "superset.models.annotations",
                          "superset.models.slice",
                          "superset.models.sql_lab",
                          "superset.superset_typing",
                          "superset.utils",
                          "superset.utils.core",
                          "superset.utils.database",
                          "tests.common.query_context_generator",
                          "tests.integration_tests.annotation_layers.fixtures",
                          "tests.integration_tests.base_tests",
                          "tests.integration_tests.conftest",
                          "tests.integration_tests.constants",
                          "tests.integration_tests.fixtures.birth_names_dashboard",
                          "tests.integration_tests.fixtures.energy_dashboard",
                          "tests.integration_tests.fixtures.query_context",
                          "tests.integration_tests.test_app"
                        ],
                        "size_lines": 1553,
                        "has_main": false,
                        "docstring": null
                      }
                    }
                  },
                  "utils": {
                    "machine_auth_tests.py": {
                      "functions": [
                        "test_get_auth_cookies",
                        "test_auth_driver_user",
                        "test_auth_driver_request"
                      ],
                      "classes": [
                        "MachineAuthProviderTests"
                      ],
                      "imports": [
                        "unittest.mock",
                        "superset.extensions",
                        "tests.integration_tests.base_tests"
                      ],
                      "size_lines": 57,
                      "has_main": false,
                      "docstring": null
                    },
                    "core_tests.py": {
                      "functions": [
                        "test_simple_filter_to_adhoc_generates_deterministic_values",
                        "test_form_data_to_adhoc_generates_deterministic_values",
                        "test_form_data_to_adhoc_incorrect_clause_type"
                      ],
                      "classes": [],
                      "imports": [
                        "pytest",
                        "superset.utils.core"
                      ],
                      "size_lines": 85,
                      "has_main": false,
                      "docstring": null
                    },
                    "get_dashboards.py": {
                      "functions": [
                        "get_dashboards_ids"
                      ],
                      "classes": [],
                      "imports": [
                        "superset",
                        "superset.models.dashboard"
                      ],
                      "size_lines": 27,
                      "has_main": false,
                      "docstring": null
                    },
                    "encrypt_tests.py": {
                      "functions": [
                        "create",
                        "setUp",
                        "test_create_field",
                        "test_custom_adapter",
                        "test_ensure_encrypted_field_factory_is_used"
                      ],
                      "classes": [
                        "CustomEncFieldAdapter",
                        "EncryptedFieldTest"
                      ],
                      "imports": [
                        "typing",
                        "sqlalchemy",
                        "sqlalchemy_utils",
                        "sqlalchemy_utils.types.encrypted.encrypted_type",
                        "superset.extensions",
                        "superset.utils.encrypt",
                        "tests.integration_tests.base_tests",
                        "superset.extensions"
                      ],
                      "size_lines": 89,
                      "has_main": false,
                      "docstring": null
                    },
                    "__init__.py": {
                      "functions": [
                        "read_fixture",
                        "load_fixture"
                      ],
                      "classes": [],
                      "imports": [
                        "os",
                        "superset.utils"
                      ],
                      "size_lines": 31,
                      "has_main": false,
                      "docstring": null
                    },
                    "cache_manager_tests.py": {
                      "functions": [
                        "test_get_set_explore_form_data_cache",
                        "test_get_same_context_twice",
                        "test_get_set_explore_form_data_cache_no_datasource_type",
                        "test_get_explore_form_data_cache_invalid_key"
                      ],
                      "classes": [
                        "UtilsCacheManagerTests"
                      ],
                      "imports": [
                        "pytest",
                        "superset.extensions",
                        "superset.utils.core",
                        "tests.integration_tests.base_tests"
                      ],
                      "size_lines": 50,
                      "has_main": false,
                      "docstring": null
                    },
                    "hashing_tests.py": {
                      "functions": [
                        "test_basic_md5_sha",
                        "test_sort_order_md5_sha",
                        "test_custom_default_md5_sha",
                        "test_ignore_nan_md5_sha",
                        "custom_datetime_serializer"
                      ],
                      "classes": [],
                      "imports": [
                        "datetime",
                        "math",
                        "typing",
                        "pytest",
                        "superset.utils.hashing"
                      ],
                      "size_lines": 97,
                      "has_main": false,
                      "docstring": null
                    },
                    "public_interfaces_test.py": {
                      "functions": [
                        "test_public_interfaces",
                        "test_func_hash",
                        "test_class_hash",
                        "some_function",
                        "some_function",
                        "__init__",
                        "add",
                        "__init__",
                        "add",
                        "__init__",
                        "sum",
                        "__init__",
                        "add",
                        "_sum"
                      ],
                      "classes": [
                        "SomeClass",
                        "SomeClass",
                        "SomeClass",
                        "SomeClass"
                      ],
                      "imports": [
                        "typing",
                        "pytest",
                        "superset.utils.public_interfaces"
                      ],
                      "size_lines": 104,
                      "has_main": false,
                      "docstring": null
                    }
                  },
                  "importexport": {
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "commands_tests.py": {
                      "functions": [
                        "test_export_models_command"
                      ],
                      "classes": [
                        "TestExportModelsCommand"
                      ],
                      "imports": [
                        "unittest.mock",
                        "yaml",
                        "freezegun",
                        "superset",
                        "superset.commands.database.export",
                        "superset.utils.database",
                        "tests.integration_tests.base_tests"
                      ],
                      "size_lines": 49,
                      "has_main": false,
                      "docstring": null
                    }
                  },
                  "explore": {
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "api_tests.py": {
                      "functions": [
                        "chart_id",
                        "admin_id",
                        "dataset",
                        "cache",
                        "assert_dataset",
                        "assert_slice",
                        "test_no_params_provided",
                        "test_get_from_cache",
                        "test_get_from_cache_unknown_key_chart_id",
                        "test_get_from_cache_unknown_key_dataset",
                        "test_get_from_cache_unknown_key_no_extra_parameters",
                        "test_get_from_permalink",
                        "test_get_from_permalink_unknown_key",
                        "test_get_dataset_access_denied_with_form_data_key",
                        "test_get_dataset_access_denied",
                        "test_wrong_endpoint",
                        "test_get_url_params"
                      ],
                      "classes": [],
                      "imports": [
                        "unittest.mock",
                        "pytest",
                        "flask_appbuilder.security.sqla.models",
                        "sqlalchemy.orm",
                        "superset",
                        "superset.commands.explore.form_data.state",
                        "superset.connectors.sqla.models",
                        "superset.explore.exceptions",
                        "superset.extensions",
                        "superset.models.slice",
                        "superset.utils",
                        "tests.integration_tests.fixtures.world_bank_dashboard",
                        "tests.integration_tests.test_app"
                      ],
                      "size_lines": 257,
                      "has_main": false,
                      "docstring": null
                    },
                    "permalink": {
                      "__init__.py": {
                        "functions": [],
                        "classes": [],
                        "imports": [],
                        "size_lines": 17,
                        "has_main": false,
                        "docstring": null
                      },
                      "api_tests.py": {
                        "functions": [
                          "chart",
                          "form_data",
                          "permalink_salt",
                          "test_post",
                          "test_post_access_denied",
                          "test_get_missing_chart",
                          "test_post_invalid_schema",
                          "test_get"
                        ],
                        "classes": [],
                        "imports": [
                          "collections.abc",
                          "typing",
                          "uuid",
                          "pytest",
                          "sqlalchemy.orm",
                          "superset",
                          "superset.explore.permalink.schemas",
                          "superset.key_value.models",
                          "superset.key_value.types",
                          "superset.key_value.utils",
                          "superset.models.slice",
                          "superset.utils",
                          "superset.utils.core",
                          "tests.integration_tests.fixtures.world_bank_dashboard",
                          "tests.integration_tests.test_app",
                          "superset.key_value.shared_entries",
                          "superset.key_value.types",
                          "superset.key_value.models"
                        ],
                        "size_lines": 140,
                        "has_main": false,
                        "docstring": null
                      },
                      "commands_tests.py": {
                        "functions": [
                          "create_dataset",
                          "create_slice",
                          "create_query",
                          "test_create_permalink_command",
                          "test_get_permalink_command",
                          "test_get_permalink_command_with_old_dataset_key"
                        ],
                        "classes": [
                          "TestCreatePermalinkDataCommand"
                        ],
                        "imports": [
                          "unittest.mock",
                          "pytest",
                          "superset",
                          "superset.commands.explore.permalink.create",
                          "superset.commands.explore.permalink.get",
                          "superset.connectors.sqla.models",
                          "superset.models.slice",
                          "superset.models.sql_lab",
                          "superset.utils.core",
                          "superset.utils.database",
                          "tests.integration_tests.base_tests"
                        ],
                        "size_lines": 168,
                        "has_main": false,
                        "docstring": null
                      }
                    },
                    "form_data": {
                      "__init__.py": {
                        "functions": [],
                        "classes": [],
                        "imports": [],
                        "size_lines": 17,
                        "has_main": false,
                        "docstring": null
                      },
                      "api_tests.py": {
                        "functions": [
                          "chart_id",
                          "admin_id",
                          "datasource",
                          "cache",
                          "test_post",
                          "test_post_bad_request_non_string",
                          "test_post_bad_request_non_json_string",
                          "test_post_access_denied",
                          "test_post_same_key_for_same_context",
                          "test_post_different_key_for_different_context",
                          "test_post_same_key_for_same_tab_id",
                          "test_post_different_key_for_different_tab_id",
                          "test_post_different_key_for_no_tab_id",
                          "test_put",
                          "test_put_same_key_for_same_tab_id",
                          "test_put_different_key_for_different_tab_id",
                          "test_put_different_key_for_no_tab_id",
                          "test_put_bad_request",
                          "test_put_bad_request_non_string",
                          "test_put_bad_request_non_json_string",
                          "test_put_access_denied",
                          "test_put_not_owner",
                          "test_get_key_not_found",
                          "test_get",
                          "test_get_access_denied",
                          "test_get_dataset_access_denied",
                          "test_delete",
                          "test_delete_access_denied",
                          "test_delete_not_owner"
                        ],
                        "classes": [],
                        "imports": [
                          "unittest.mock",
                          "pytest",
                          "flask_appbuilder.security.sqla.models",
                          "sqlalchemy.orm",
                          "superset",
                          "superset.commands.dataset.exceptions",
                          "superset.commands.explore.form_data.state",
                          "superset.connectors.sqla.models",
                          "superset.extensions",
                          "superset.models.slice",
                          "superset.utils",
                          "superset.utils.core",
                          "tests.integration_tests.fixtures.world_bank_dashboard",
                          "tests.integration_tests.test_app"
                        ],
                        "size_lines": 406,
                        "has_main": false,
                        "docstring": null
                      },
                      "commands_tests.py": {
                        "functions": [
                          "create_dataset",
                          "create_slice",
                          "create_query",
                          "test_create_form_data_command",
                          "test_create_form_data_command_invalid_type",
                          "test_create_form_data_command_type_as_string",
                          "test_get_form_data_command",
                          "test_update_form_data_command",
                          "test_update_form_data_command_same_form_data",
                          "test_delete_form_data_command",
                          "test_delete_form_data_command_key_expired"
                        ],
                        "classes": [
                          "TestCreateFormDataCommand"
                        ],
                        "imports": [
                          "unittest.mock",
                          "pytest",
                          "superset",
                          "superset.commands.exceptions",
                          "superset.commands.explore.form_data.create",
                          "superset.commands.explore.form_data.delete",
                          "superset.commands.explore.form_data.get",
                          "superset.commands.explore.form_data.parameters",
                          "superset.commands.explore.form_data.update",
                          "superset.connectors.sqla.models",
                          "superset.models.slice",
                          "superset.models.sql_lab",
                          "superset.utils",
                          "superset.utils.core",
                          "superset.utils.database",
                          "tests.integration_tests.base_tests"
                        ],
                        "size_lines": 347,
                        "has_main": false,
                        "docstring": null
                      }
                    }
                  },
                  "extensions": {
                    "metastore_cache_test.py": {
                      "functions": [
                        "cache",
                        "test_caching_flow",
                        "test_expiry",
                        "test_codec"
                      ],
                      "classes": [],
                      "imports": [
                        "__future__",
                        "contextlib",
                        "datetime",
                        "typing",
                        "uuid",
                        "pytest",
                        "flask.ctx",
                        "freezegun",
                        "superset.extensions.metastore_cache",
                        "superset.key_value.exceptions",
                        "superset.key_value.types",
                        "superset.extensions.metastore_cache"
                      ],
                      "size_lines": 133,
                      "has_main": false,
                      "docstring": null
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    }
                  },
                  "tags": {
                    "dao_tests.py": {
                      "functions": [
                        "insert_tag",
                        "insert_tagged_object",
                        "create_tags",
                        "create_tagged_objects",
                        "test_create_tagged_objects",
                        "test_get_objects_from_tag",
                        "test_get_objects_from_tag_with_id",
                        "test_find_tagged_object",
                        "test_find_by_name",
                        "test_get_by_name",
                        "test_delete_tags",
                        "test_delete_tagged_object"
                      ],
                      "classes": [
                        "TestTagsDAO"
                      ],
                      "imports": [
                        "operator",
                        "unittest.mock",
                        "pytest",
                        "superset.models.slice",
                        "superset.models.sql_lab",
                        "superset.daos.tag",
                        "superset.tags.exceptions",
                        "superset.tags.models",
                        "tests.integration_tests.tags.api_tests",
                        "tests.integration_tests.test_app",
                        "superset",
                        "superset.daos.dashboard",
                        "superset.models.dashboard",
                        "tests.integration_tests.base_tests",
                        "tests.integration_tests.fixtures.world_bank_dashboard",
                        "tests.integration_tests.fixtures.tags"
                      ],
                      "size_lines": 330,
                      "has_main": false,
                      "docstring": null
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "api_tests.py": {
                      "functions": [
                        "insert_tag",
                        "insert_tagged_object",
                        "create_tags",
                        "test_get_tag",
                        "test_get_tag_not_found",
                        "test_get_list_tag",
                        "test_get_list_tag_filtered",
                        "test_add_tagged_objects",
                        "test_delete_tagged_objects",
                        "test_get_objects_by_tag",
                        "test_get_all_objects",
                        "test_delete_tags",
                        "test_delete_favorite_tag",
                        "test_add_tag_not_found",
                        "test_delete_favorite_tag_not_found",
                        "test_add_tag_user_not_found",
                        "test_delete_favorite_tag_user_not_found",
                        "test_post_tag",
                        "test_post_tag_no_name_400",
                        "test_put_tag",
                        "test_failed_put_tag",
                        "test_post_bulk_tag",
                        "test_post_bulk_tag_skipped_tags_perm"
                      ],
                      "classes": [
                        "TestTagApi"
                      ],
                      "imports": [
                        "prison",
                        "datetime",
                        "flask",
                        "pytest",
                        "prison",
                        "freezegun",
                        "sqlalchemy.sql",
                        "sqlalchemy",
                        "superset.models.dashboard",
                        "superset.models.slice",
                        "superset.models.sql_lab",
                        "superset.tags.models",
                        "unittest.mock",
                        "urllib",
                        "tests.integration_tests.test_app",
                        "superset",
                        "superset.common.db_query_status",
                        "superset.models.core",
                        "superset.utils.database",
                        "superset.utils",
                        "superset.tags.models",
                        "tests.integration_tests.constants",
                        "tests.integration_tests.fixtures.birth_names_dashboard",
                        "tests.integration_tests.fixtures.world_bank_dashboard",
                        "tests.integration_tests.fixtures.tags",
                        "tests.integration_tests.base_tests",
                        "superset.daos.tag",
                        "superset.tags.models",
                        "sqlalchemy",
                        "superset.tags.models",
                        "flask"
                      ],
                      "size_lines": 704,
                      "has_main": false,
                      "docstring": "Unit tests for Superset"
                    },
                    "commands_tests.py": {
                      "functions": [
                        "test_create_custom_tag_command",
                        "test_delete_tags_command",
                        "test_delete_tags_command"
                      ],
                      "classes": [
                        "TestCreateCustomTagCommand",
                        "TestDeleteTagsCommand",
                        "TestDeleteTaggedObjectCommand"
                      ],
                      "imports": [
                        "itertools",
                        "unittest.mock",
                        "pytest",
                        "yaml",
                        "werkzeug.utils",
                        "superset",
                        "superset.commands.dashboard.exceptions",
                        "superset.commands.dashboard.export",
                        "superset.commands.dashboard.importers",
                        "superset.commands.exceptions",
                        "superset.commands.importers.exceptions",
                        "superset.commands.tag.create",
                        "superset.commands.tag.delete",
                        "superset.connectors.sqla.models",
                        "superset.models.core",
                        "superset.models.dashboard",
                        "superset.models.slice",
                        "superset.tags.models",
                        "tests.integration_tests.base_tests",
                        "tests.integration_tests.fixtures.importexport",
                        "tests.integration_tests.fixtures.tags",
                        "tests.integration_tests.fixtures.world_bank_dashboard"
                      ],
                      "size_lines": 178,
                      "has_main": false,
                      "docstring": null
                    }
                  },
                  "css_templates": {
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "api_tests.py": {
                      "functions": [
                        "insert_css_template",
                        "create_css_templates",
                        "test_get_list_css_template",
                        "test_get_list_sort_css_template",
                        "test_get_list_custom_filter_css_template",
                        "test_info_css_template",
                        "test_info_security_css_template",
                        "test_get_css_template",
                        "test_get_css_template_not_found",
                        "test_create_css_template",
                        "test_update_css_template",
                        "test_update_css_template_not_found",
                        "test_delete_css_template",
                        "test_delete_css_template_not_found",
                        "test_delete_bulk_css_templates",
                        "test_delete_one_bulk_css_templates",
                        "test_delete_bulk_css_template_bad_request",
                        "test_delete_bulk_css_template_not_found"
                      ],
                      "classes": [
                        "TestCssTemplateApi"
                      ],
                      "imports": [
                        "pytest",
                        "prison",
                        "datetime",
                        "freezegun",
                        "sqlalchemy.sql",
                        "tests.integration_tests.test_app",
                        "superset",
                        "superset.models.core",
                        "superset.utils.database",
                        "superset.utils",
                        "tests.integration_tests.base_tests",
                        "tests.integration_tests.constants"
                      ],
                      "size_lines": 393,
                      "has_main": false,
                      "docstring": "Unit tests for Superset"
                    }
                  },
                  "sql_lab": {
                    "conftest.py": {
                      "functions": [
                        "force_async_run",
                        "non_async_example_db",
                        "async_example_db",
                        "example_query"
                      ],
                      "classes": [],
                      "imports": [
                        "contextlib",
                        "typing",
                        "pytest",
                        "flask_appbuilder.security.sqla",
                        "superset",
                        "superset.models.sql_lab",
                        "superset.utils.core",
                        "superset.utils.database"
                      ],
                      "size_lines": 69,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_execute_sql_statements.py": {
                      "functions": [
                        "test_non_async_execute"
                      ],
                      "classes": [],
                      "imports": [
                        "superset",
                        "superset.common.db_query_status",
                        "superset.models.core",
                        "superset.models.sql_lab",
                        "superset.sql_lab",
                        "superset.utils.dates"
                      ],
                      "size_lines": 56,
                      "has_main": false,
                      "docstring": null
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "api_tests.py": {
                      "functions": [
                        "test_get_from_empty_bootstrap_data",
                        "test_get_from_bootstrap_data_for_non_persisted_tab_state",
                        "test_get_from_bootstrap_data_with_latest_query",
                        "test_deleted_tab",
                        "test_delete_tab_already_removed",
                        "test_get_access_denied",
                        "test_estimate_required_params",
                        "test_estimate_valid_request",
                        "test_format_sql_request",
                        "test_execute_required_params",
                        "test_execute_valid_request",
                        "test_execute_custom_templated",
                        "test_get_results_with_display_limit",
                        "test_export_results"
                      ],
                      "classes": [
                        "TestSqlLabApi"
                      ],
                      "imports": [
                        "datetime",
                        "random",
                        "csv",
                        "pandas",
                        "io",
                        "pytest",
                        "prison",
                        "sqlalchemy.sql",
                        "unittest",
                        "flask_appbuilder.security.sqla.models",
                        "tests.integration_tests.test_app",
                        "superset",
                        "superset.common.db_query_status",
                        "superset.models.core",
                        "superset.utils.database",
                        "superset.utils",
                        "superset.models.sql_lab",
                        "tests.integration_tests.base_tests",
                        "tests.integration_tests.constants",
                        "tests.integration_tests.fixtures.birth_names_dashboard",
                        "tests.integration_tests.fixtures.users",
                        "superset",
                        "superset.commands.sql_lab"
                      ],
                      "size_lines": 460,
                      "has_main": false,
                      "docstring": "Unit tests for Superset"
                    },
                    "commands_tests.py": {
                      "functions": [
                        "test_validation_no_database",
                        "test_run_timeout",
                        "test_run_success",
                        "create_database_and_query",
                        "test_validation_query_not_found",
                        "test_validation_invalid_access",
                        "test_run_no_results_backend_select_sql",
                        "test_run_no_results_backend_executed_sql",
                        "test_run_no_results_backend_executed_sql_limiting_factor",
                        "test_run_with_results_backend",
                        "create_database_and_query",
                        "test_validation_no_results_backend",
                        "test_validation_data_cannot_be_retrieved",
                        "test_validation_data_not_found",
                        "test_validation_query_not_found",
                        "test_run_succeeds"
                      ],
                      "classes": [
                        "TestQueryEstimationCommand",
                        "TestSqlResultExportCommand",
                        "TestSqlExecutionResultsCommand"
                      ],
                      "imports": [
                        "unittest",
                        "unittest.mock",
                        "pandas",
                        "pytest",
                        "flask_babel",
                        "superset",
                        "superset.commands.sql_lab",
                        "superset.common.db_query_status",
                        "superset.errors",
                        "superset.exceptions",
                        "superset.models.core",
                        "superset.models.sql_lab",
                        "superset.sqllab.limiting_factor",
                        "superset.sqllab.schemas",
                        "superset.utils",
                        "superset.utils.database",
                        "tests.integration_tests.base_tests"
                      ],
                      "size_lines": 367,
                      "has_main": false,
                      "docstring": null
                    },
                    "permalink": {
                      "__init__.py": {
                        "functions": [],
                        "classes": [],
                        "imports": [],
                        "size_lines": 17,
                        "has_main": false,
                        "docstring": null
                      },
                      "api_tests.py": {
                        "functions": [
                          "tab_state_data",
                          "permalink_salt",
                          "test_sqllab_user_can_access_shared_query",
                          "test_post",
                          "test_post_access_denied",
                          "test_post_invalid_schema",
                          "test_get"
                        ],
                        "classes": [],
                        "imports": [
                          "json",
                          "collections.abc",
                          "typing",
                          "uuid",
                          "pytest",
                          "superset",
                          "superset.key_value.models",
                          "superset.key_value.types",
                          "superset.key_value.utils",
                          "tests.integration_tests.constants",
                          "superset.key_value.shared_entries",
                          "superset.key_value.types"
                        ],
                        "size_lines": 125,
                        "has_main": false,
                        "docstring": null
                      }
                    }
                  },
                  "db_engine_specs": {
                    "base_engine_spec_tests.py": {
                      "functions": [
                        "test_time_grain_denylist",
                        "test_time_grain_addons",
                        "test_get_time_grain_with_config",
                        "test_get_time_grain_with_unknown_values",
                        "test_validate",
                        "test_validate_parameters_missing",
                        "test_validate_parameters_invalid_host",
                        "test_validate_parameters_port_closed",
                        "test_get_indexes",
                        "test_extract_limit_from_query",
                        "test_wrapped_semi_tabs",
                        "test_simple_limit_query",
                        "test_modify_limit_query",
                        "test_limit_query_with_limit_subquery",
                        "test_limit_query_without_force",
                        "test_limit_query_with_force",
                        "test_limit_with_expr",
                        "test_limit_expr_and_semicolon",
                        "test_get_datatype",
                        "test_limit_with_implicit_offset",
                        "test_limit_with_explicit_offset",
                        "test_limit_with_non_token_limit",
                        "test_limit_with_fetch_many",
                        "test_engine_time_grain_validity",
                        "test_get_time_grain_expressions",
                        "test_get_table_names",
                        "test_column_datatype_to_string",
                        "test_convert_dttm",
                        "test_pyodbc_rows_to_tuples",
                        "test_pyodbc_rows_to_tuples_passthrough",
                        "test_calculated_column_in_order_by_base_engine_spec"
                      ],
                      "classes": [
                        "TestDbEngineSpecs",
                        "DummyEngineSpec"
                      ],
                      "imports": [
                        "datetime",
                        "unittest",
                        "pytest",
                        "superset.connectors.sqla.models",
                        "superset.db_engine_specs",
                        "superset.db_engine_specs.base",
                        "superset.db_engine_specs.mysql",
                        "superset.db_engine_specs.sqlite",
                        "superset.errors",
                        "superset.sql_parse",
                        "superset.utils.database",
                        "tests.integration_tests.db_engine_specs.base_tests",
                        "tests.integration_tests.test_app",
                        "fixtures.birth_names_dashboard",
                        "fixtures.energy_dashboard",
                        "fixtures.pyodbcRow"
                      ],
                      "size_lines": 529,
                      "has_main": false,
                      "docstring": null
                    },
                    "ascend_tests.py": {
                      "functions": [
                        "test_convert_dttm"
                      ],
                      "classes": [
                        "TestAscendDbEngineSpec"
                      ],
                      "imports": [
                        "superset.db_engine_specs.ascend",
                        "tests.integration_tests.db_engine_specs.base_tests"
                      ],
                      "size_lines": 33,
                      "has_main": false,
                      "docstring": null
                    },
                    "base_tests.py": {
                      "functions": [
                        "sql_limit_regex"
                      ],
                      "classes": [
                        "TestDbEngineSpec"
                      ],
                      "imports": [
                        "tests.integration_tests.test_app",
                        "tests.integration_tests.base_tests",
                        "superset.db_engine_specs.base",
                        "superset.models.core"
                      ],
                      "size_lines": 37,
                      "has_main": false,
                      "docstring": null
                    },
                    "postgres_tests.py": {
                      "functions": [
                        "test_base_parameters_mixin",
                        "test_get_catalog_names",
                        "test_get_table_names",
                        "test_time_exp_literal_no_grain",
                        "test_time_exp_literal_1y_grain",
                        "test_time_ex_lowr_col_no_grain",
                        "test_time_exp_lowr_col_sec_1y",
                        "test_time_exp_mixed_case_col_1y",
                        "test_empty_dbapi_cursor_description",
                        "test_engine_alias_name",
                        "test_extras_without_ssl",
                        "test_extras_with_ssl_default",
                        "test_extras_with_ssl_custom",
                        "test_estimate_statement_cost_select_star",
                        "test_estimate_statement_invalid_syntax",
                        "test_query_cost_formatter_example_costs",
                        "test_extract_errors",
                        "test_get_cancel_query_id",
                        "test_cancel_query",
                        "test_cancel_query_failed"
                      ],
                      "classes": [
                        "TestPostgresDbEngineSpec"
                      ],
                      "imports": [
                        "textwrap",
                        "unittest",
                        "flask.ctx",
                        "sqlalchemy",
                        "sqlalchemy.dialects",
                        "superset.db_engine_specs",
                        "superset.db_engine_specs.postgres",
                        "superset.errors",
                        "superset.models.sql_lab",
                        "superset.utils.core",
                        "superset.utils.database",
                        "tests.integration_tests.db_engine_specs.base_tests",
                        "tests.integration_tests.fixtures.certificates",
                        "tests.integration_tests.fixtures.database",
                        "psycopg2"
                      ],
                      "size_lines": 524,
                      "has_main": false,
                      "docstring": null
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "hive_tests.py": {
                      "functions": [
                        "test_0_progress",
                        "test_number_of_jobs_progress",
                        "test_job_1_launched_progress",
                        "test_job_1_launched_stage_1",
                        "test_job_1_launched_stage_1_map_40_progress",
                        "test_job_1_launched_stage_1_map_80_reduce_40_progress",
                        "test_job_1_launched_stage_2_stages_progress",
                        "test_job_2_launched_stage_2_stages_progress",
                        "test_hive_error_msg",
                        "test_df_to_csv",
                        "test_df_to_sql_if_exists_fail",
                        "test_df_to_sql_if_exists_fail_with_schema",
                        "test_df_to_sql_if_exists_replace",
                        "test_df_to_sql_if_exists_replace_with_schema",
                        "test_s3_upload_prefix",
                        "test_upload_to_s3_no_bucket_path",
                        "test_upload_to_s3_client_error",
                        "test_upload_to_s3_success",
                        "test_fetch_data_query_error",
                        "test_fetch_data_programming_error",
                        "test_fetch_data_success",
                        "test_where_latest_partition",
                        "test_where_latest_partition_super_method_exception",
                        "test_where_latest_partition_no_columns_no_values",
                        "test__latest_partition_from_df",
                        "test_get_view_names_with_schema",
                        "test_get_view_names_without_schema",
                        "test_get_table_names",
                        "is_correct_result"
                      ],
                      "classes": [],
                      "imports": [
                        "unittest",
                        "unittest",
                        "base_tests",
                        "pytest",
                        "pandas",
                        "sqlalchemy.sql",
                        "superset.db_engine_specs.hive",
                        "superset.exceptions",
                        "superset.sql_parse",
                        "tests.integration_tests.test_app",
                        "botocore.exceptions",
                        "TCLIService",
                        "pyhive.exc"
                      ],
                      "size_lines": 438,
                      "has_main": false,
                      "docstring": null
                    },
                    "mysql_tests.py": {
                      "functions": [
                        "test_get_datatype_mysql",
                        "test_column_datatype_to_string",
                        "test_extract_error_message",
                        "test_extract_errors"
                      ],
                      "classes": [
                        "TestMySQLEngineSpecsDbEngineSpec"
                      ],
                      "imports": [
                        "unittest",
                        "sqlalchemy.dialects",
                        "sqlalchemy.dialects.mysql",
                        "superset.db_engine_specs.mysql",
                        "superset.errors",
                        "tests.integration_tests.db_engine_specs.base_tests",
                        "MySQLdb._exceptions"
                      ],
                      "size_lines": 198,
                      "has_main": false,
                      "docstring": null
                    },
                    "pinot_tests.py": {
                      "functions": [
                        "test_pinot_time_expression_sec_one_1d_grain",
                        "test_pinot_time_expression_simple_date_format_1d_grain",
                        "test_pinot_time_expression_simple_date_format_10m_grain",
                        "test_pinot_time_expression_simple_date_format_1w_grain",
                        "test_pinot_time_expression_sec_one_1m_grain",
                        "test_pinot_time_expression_millisec_one_1m_grain",
                        "test_invalid_get_time_expression_arguments"
                      ],
                      "classes": [
                        "TestPinotDbEngineSpec"
                      ],
                      "imports": [
                        "sqlalchemy",
                        "superset.db_engine_specs.pinot",
                        "tests.integration_tests.db_engine_specs.base_tests"
                      ],
                      "size_lines": 91,
                      "has_main": false,
                      "docstring": null
                    },
                    "bigquery_tests.py": {
                      "functions": [
                        "test_bigquery_sqla_column_label",
                        "test_timegrain_expressions",
                        "test_custom_minute_timegrain_expressions",
                        "test_fetch_data",
                        "test_get_extra_table_metadata",
                        "test_get_indexes",
                        "test_df_to_sql",
                        "test_extract_errors",
                        "test_calculated_column_in_order_by",
                        "__init__",
                        "values"
                      ],
                      "classes": [
                        "TestBigQueryDbEngineSpec",
                        "Row"
                      ],
                      "imports": [
                        "unittest.mock",
                        "pytest",
                        "pandas",
                        "sqlalchemy",
                        "superset.connectors.sqla.models",
                        "superset.db_engine_specs.base",
                        "superset.db_engine_specs.bigquery",
                        "superset.errors",
                        "superset.sql_parse",
                        "tests.integration_tests.db_engine_specs.base_tests",
                        "tests.integration_tests.fixtures.birth_names_dashboard"
                      ],
                      "size_lines": 384,
                      "has_main": false,
                      "docstring": null
                    },
                    "presto_tests.py": {
                      "functions": [
                        "test_get_catalog_names",
                        "test_get_datatype_presto",
                        "test_get_view_names_with_schema",
                        "test_get_view_names_without_schema",
                        "verify_presto_column",
                        "test_presto_get_column",
                        "test_presto_get_simple_row_column",
                        "test_presto_get_simple_row_column_with_name_containing_whitespace",
                        "test_presto_get_simple_row_column_with_tricky_nested_field_name",
                        "test_presto_get_simple_array_column",
                        "test_presto_get_row_within_array_within_row_column",
                        "test_presto_get_array_within_row_within_array_column",
                        "test_presto_get_fields",
                        "test_presto_expand_data_with_simple_structural_columns",
                        "test_presto_expand_data_with_complex_row_columns",
                        "test_presto_expand_data_with_complex_row_columns_and_null_values",
                        "test_presto_expand_data_with_complex_array_columns",
                        "test_presto_get_extra_table_metadata",
                        "test_presto_where_latest_partition",
                        "test_query_cost_formatter",
                        "test_presto_expand_data_array",
                        "test_get_table_names",
                        "test_get_full_name",
                        "test_get_full_name_empty_tuple",
                        "test_split_data_type",
                        "test_show_columns",
                        "test_show_columns_with_schema",
                        "test_is_column_name_quoted",
                        "test_select_star_no_presto_expand_data",
                        "test_select_star_presto_expand_data",
                        "test_estimate_statement_cost",
                        "test_estimate_statement_cost_invalid_syntax",
                        "test_get_create_view",
                        "test_get_create_view_exception",
                        "test_get_create_view_database_error",
                        "test_extract_error_message_orig",
                        "test_extract_error_message_db_error",
                        "test_extract_error_message_general_exception",
                        "test_extract_errors"
                      ],
                      "classes": [
                        "TestPrestoDbEngineSpec"
                      ],
                      "imports": [
                        "collections",
                        "textwrap",
                        "unittest",
                        "pandas",
                        "flask.ctx",
                        "sqlalchemy",
                        "sqlalchemy.sql",
                        "superset.db_engine_specs.presto",
                        "superset.errors",
                        "superset.sql_parse",
                        "superset.utils.database",
                        "tests.integration_tests.db_engine_specs.base_tests",
                        "pyhive.exc",
                        "pyhive.exc"
                      ],
                      "size_lines": 1194,
                      "has_main": false,
                      "docstring": null
                    },
                    "databricks_tests.py": {
                      "functions": [
                        "test_get_engine_spec",
                        "test_extras_without_ssl",
                        "test_extras_with_ssl_custom"
                      ],
                      "classes": [
                        "TestDatabricksDbEngineSpec"
                      ],
                      "imports": [
                        "unittest",
                        "superset.db_engine_specs",
                        "superset.db_engine_specs.databricks",
                        "tests.integration_tests.db_engine_specs.base_tests",
                        "tests.integration_tests.fixtures.certificates",
                        "tests.integration_tests.fixtures.database"
                      ],
                      "size_lines": 62,
                      "has_main": false,
                      "docstring": null
                    },
                    "redshift_tests.py": {
                      "functions": [
                        "test_extract_errors",
                        "test_df_to_sql_no_dtype",
                        "test_df_to_sql_with_string_dtype"
                      ],
                      "classes": [
                        "TestRedshiftDbEngineSpec"
                      ],
                      "imports": [
                        "unittest.mock",
                        "textwrap",
                        "numpy",
                        "pandas",
                        "sqlalchemy.types",
                        "superset.db_engine_specs.redshift",
                        "superset.errors",
                        "superset.sql_parse",
                        "tests.integration_tests.db_engine_specs.base_tests",
                        "tests.integration_tests.test_app"
                      ],
                      "size_lines": 247,
                      "has_main": false,
                      "docstring": null
                    },
                    "elasticsearch_tests.py": {
                      "functions": [
                        "test_time_grain_expressions"
                      ],
                      "classes": [
                        "TestElasticsearchDbEngineSpec"
                      ],
                      "imports": [
                        "parameterized",
                        "sqlalchemy",
                        "superset.constants",
                        "superset.db_engine_specs.elasticsearch",
                        "tests.integration_tests.db_engine_specs.base_tests"
                      ],
                      "size_lines": 44,
                      "has_main": false,
                      "docstring": null
                    },
                    "gsheets_tests.py": {
                      "functions": [
                        "test_extract_errors"
                      ],
                      "classes": [
                        "TestGsheetsDbEngineSpec"
                      ],
                      "imports": [
                        "superset.db_engine_specs.gsheets",
                        "superset.errors",
                        "tests.integration_tests.db_engine_specs.base_tests"
                      ],
                      "size_lines": 45,
                      "has_main": false,
                      "docstring": null
                    }
                  },
                  "async_events": {
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "api_tests.py": {
                      "functions": [
                        "fetch_events",
                        "run_test_with_cache_backend",
                        "_test_events_logic",
                        "_test_events_last_id_logic",
                        "_test_events_results_logic",
                        "test_events_redis_cache_backend",
                        "test_events_redis_sentinel_cache_backend",
                        "test_events_no_login",
                        "test_events_no_token"
                      ],
                      "classes": [
                        "TestAsyncEventApi"
                      ],
                      "imports": [
                        "typing",
                        "unittest",
                        "superset.async_events.cache_backend",
                        "superset.extensions",
                        "superset.utils",
                        "tests.integration_tests.base_tests",
                        "tests.integration_tests.constants",
                        "tests.integration_tests.test_app"
                      ],
                      "size_lines": 139,
                      "has_main": false,
                      "docstring": null
                    }
                  },
                  "dashboards": {
                    "dashboard_test_utils.py": {
                      "functions": [
                        "get_mock_positions",
                        "build_save_dash_parts",
                        "get_all_dashboards",
                        "get_dashboard_by_slug",
                        "get_slice_by_name",
                        "get_sql_table_by_name",
                        "count_dashboards",
                        "random_title",
                        "random_slug",
                        "get_random_string",
                        "random_str",
                        "grant_access_to_dashboard",
                        "revoke_access_to_dashboard"
                      ],
                      "classes": [],
                      "imports": [
                        "logging",
                        "random",
                        "string",
                        "typing",
                        "sqlalchemy",
                        "superset",
                        "superset.connectors.sqla.models",
                        "superset.models.dashboard",
                        "superset.models.slice",
                        "tests.integration_tests.dashboards.consts"
                      ],
                      "size_lines": 120,
                      "has_main": false,
                      "docstring": null
                    },
                    "dao_tests.py": {
                      "functions": [
                        "test_get_dashboard_changed_on",
                        "test_copy_dashboard",
                        "test_copy_dashboard_copies_native_filters",
                        "test_copy_dashboard_duplicate_slices"
                      ],
                      "classes": [
                        "TestDashboardDAO"
                      ],
                      "imports": [
                        "copy",
                        "time",
                        "unittest.mock",
                        "pytest",
                        "tests.integration_tests.test_app",
                        "superset",
                        "superset.utils",
                        "superset.daos.dashboard",
                        "superset.models.dashboard",
                        "tests.integration_tests.base_tests",
                        "tests.integration_tests.fixtures.world_bank_dashboard"
                      ],
                      "size_lines": 156,
                      "has_main": false,
                      "docstring": null
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "consts.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 38,
                      "has_main": false,
                      "docstring": null
                    },
                    "api_tests.py": {
                      "functions": [
                        "create_dashboards",
                        "create_created_by_gamma_dashboards",
                        "create_dashboard_with_report",
                        "create_dashboard_with_tag",
                        "create_dashboards_some_with_tags",
                        "test_get_dashboard_datasets",
                        "test_get_dashboard_datasets_as_guest",
                        "test_get_dashboard_datasets_not_found",
                        "test_get_dashboard_datasets_invalid_schema",
                        "test_get_gamma_dashboard_datasets",
                        "get_dashboard_by_slug",
                        "get_dashboard_by_bad_slug",
                        "get_draft_dashboard_by_slug",
                        "test_get_dashboard_charts",
                        "test_get_dashboard_charts_by_slug",
                        "test_get_dashboard_charts_not_found",
                        "test_get_dashboard_datasets_not_allowed",
                        "test_get_gamma_dashboard_charts",
                        "test_get_dashboard_charts_empty",
                        "test_get_dashboard",
                        "test_get_dashboard_as_guest",
                        "test_info_dashboard",
                        "test_info_security_dashboard",
                        "test_get_dashboard_not_found",
                        "test_get_dashboard_no_data_access",
                        "test_get_dashboards_changed_on",
                        "test_get_dashboards_filter",
                        "test_get_dashboards_title_or_slug_filter",
                        "test_get_dashboards_favorite_filter",
                        "test_get_dashboards_tag_filters",
                        "test_get_current_user_favorite_status",
                        "test_add_favorite",
                        "test_remove_favorite",
                        "test_get_dashboards_not_favorite_filter",
                        "test_gets_certified_dashboards_filter",
                        "test_gets_not_certified_dashboards_filter",
                        "test_get_dashboards_created_by_me",
                        "test_get_dashboard_tabs",
                        "test_get_dashboard_tabs_not_found",
                        "create_dashboard_import",
                        "create_invalid_dashboard_import",
                        "test_delete_dashboard",
                        "test_delete_bulk_dashboards",
                        "test_delete_bulk_embedded_dashboards",
                        "test_delete_bulk_dashboards_bad_request",
                        "test_delete_not_found_dashboard",
                        "test_delete_dashboard_with_report",
                        "test_delete_bulk_dashboards_not_found",
                        "test_delete_bulk_dashboard_with_report",
                        "test_delete_dashboard_admin_not_owned",
                        "test_delete_bulk_dashboard_admin_not_owned",
                        "test_delete_dashboard_not_owned",
                        "test_delete_bulk_dashboard_not_owned",
                        "test_create_dashboard",
                        "test_create_simple_dashboard",
                        "test_create_dashboard_empty",
                        "test_create_dashboard_validate_title",
                        "test_create_dashboard_validate_slug",
                        "test_create_dashboard_validate_owners",
                        "test_create_dashboard_validate_roles",
                        "test_create_dashboard_validate_json",
                        "test_update_dashboard",
                        "test_add_dashboard_filters",
                        "test_modify_dashboard_filters_values",
                        "test_modfify_dashboard_filters_order",
                        "test_dashboard_filters_deleted",
                        "test_modify_dashboard_filters_invalid_data",
                        "test_dashboard_get_list_no_username",
                        "test_dashboard_get_no_username",
                        "test_update_dashboard_chart_owners_propagation",
                        "test_update_partial_dashboard",
                        "test_update_dashboard_new_owner_not_admin",
                        "test_update_dashboard_new_owner_admin",
                        "test_update_dashboard_clear_owner_list",
                        "test_update_dashboard_populate_owner",
                        "test_update_dashboard_slug_formatting",
                        "test_update_dashboard_validate_slug",
                        "test_update_published",
                        "test_update_dashboard_not_owned",
                        "test_export",
                        "test_export_not_found",
                        "test_export_not_allowed",
                        "test_export_bundle",
                        "test_export_bundle_not_found",
                        "test_export_bundle_not_allowed",
                        "test_import_dashboard",
                        "test_import_dashboard_invalid_file",
                        "test_import_dashboard_v0_export",
                        "test_import_dashboard_overwrite",
                        "test_import_dashboard_invalid",
                        "test_get_all_related_roles",
                        "test_get_filter_related_roles",
                        "test_get_all_related_roles_with_with_extra_filters",
                        "test_embedded_dashboards",
                        "test_gets_created_by_user_dashboards_filter",
                        "test_gets_not_created_by_user_dashboards_filter",
                        "test_copy_dashboard",
                        "test_copy_dashboard_duplicate_slices",
                        "test_update_dashboard_add_tags_can_write_on_tag",
                        "test_update_dashboard_remove_tags_can_write_on_tag",
                        "test_update_dashboard_add_tags_can_tag_on_dashboard",
                        "test_update_dashboard_remove_tags_can_tag_on_dashboard",
                        "test_update_dashboard_add_tags_missing_permission",
                        "test_update_dashboard_remove_tags_missing_permission",
                        "test_update_dashboard_no_tag_changes",
                        "_cache_screenshot",
                        "_get_screenshot",
                        "test_cache_dashboard_screenshot_success",
                        "test_cache_dashboard_screenshot_dashboard_validation",
                        "test_cache_dashboard_screenshot_dashboard_not_found",
                        "test_screenshot_success_png",
                        "test_screenshot_success_pdf",
                        "test_screenshot_not_in_cache",
                        "test_screenshot_dashboard_not_found",
                        "test_screenshot_invalid_download_format",
                        "test_cache_dashboard_screenshot_feature_thumbnails_ff_disabled",
                        "test_cache_dashboard_screenshot_feature_screenshot_ff_disabled",
                        "test_cache_dashboard_screenshot_feature_both_ff_disabled",
                        "test_put_dashboard_colors",
                        "test_put_dashboard_colors_no_mark_updated",
                        "test_put_dashboard_colors_not_found",
                        "test_put_dashboard_colors_invalid",
                        "test_put_dashboard_colors_not_authorized",
                        "_base_filter"
                      ],
                      "classes": [
                        "TestDashboardApi"
                      ],
                      "imports": [
                        "io",
                        "time",
                        "unittest.mock",
                        "zipfile",
                        "tests.integration_tests.insert_chart_mixin",
                        "pytest",
                        "prison",
                        "yaml",
                        "freezegun",
                        "sqlalchemy",
                        "superset",
                        "superset.models.dashboard",
                        "superset.models.core",
                        "superset.reports.models",
                        "superset.models.slice",
                        "superset.tags.models",
                        "superset.utils.core",
                        "superset.utils.screenshots",
                        "superset.utils",
                        "tests.integration_tests.base_api_tests",
                        "tests.integration_tests.base_tests",
                        "tests.integration_tests.conftest",
                        "tests.integration_tests.constants",
                        "tests.integration_tests.fixtures.importexport",
                        "tests.integration_tests.fixtures.tags",
                        "tests.integration_tests.utils.get_dashboards",
                        "tests.integration_tests.fixtures.birth_names_dashboard",
                        "tests.integration_tests.fixtures.world_bank_dashboard",
                        "superset.connectors.sqla.models",
                        "superset.connectors.sqla.models",
                        "datetime",
                        "humanize"
                      ],
                      "size_lines": 3351,
                      "has_main": false,
                      "docstring": "Unit tests for Superset"
                    },
                    "update_tabs_test.py": {
                      "functions": [
                        "initial_report_cleanup",
                        "remove_tabs_from_dashboard",
                        "test_tab_deletion_single_report",
                        "test_tab_deletion_multiple_reports",
                        "test_multitple_tabs_removed"
                      ],
                      "classes": [],
                      "imports": [
                        "unittest.mock",
                        "pytest",
                        "superset",
                        "superset.commands.dashboard.update",
                        "superset.models.dashboard",
                        "superset.utils.json",
                        "tests.integration_tests.fixtures.tabbed_dashboard",
                        "tests.integration_tests.reports.utils",
                        "tests.integration_tests.test_app"
                      ],
                      "size_lines": 220,
                      "has_main": false,
                      "docstring": null
                    },
                    "base_case.py": {
                      "functions": [
                        "get_dashboard_via_api_by_id",
                        "get_dashboard_view_response",
                        "get_dashboard_api_response",
                        "get_dashboards_list_response",
                        "get_dashboards_api_response",
                        "delete_dashboard_via_view",
                        "delete_dashboard_via_api",
                        "bulk_delete_dashboard_via_api",
                        "delete_dashboard",
                        "assert_permission_was_created",
                        "assert_permission_kept_and_changed",
                        "assert_permissions_were_deleted",
                        "clean_created_objects"
                      ],
                      "classes": [
                        "DashboardTestCase"
                      ],
                      "imports": [
                        "prison",
                        "flask",
                        "superset",
                        "tests.integration_tests.base_tests",
                        "tests.integration_tests.dashboards.consts",
                        "tests.integration_tests.dashboards.dashboard_test_utils",
                        "tests.integration_tests.dashboards.superset_factory_util"
                      ],
                      "size_lines": 83,
                      "has_main": false,
                      "docstring": null
                    },
                    "superset_factory_util.py": {
                      "functions": [
                        "create_dashboard_to_db",
                        "create_dashboard",
                        "insert_model",
                        "create_slice_to_db",
                        "create_slice",
                        "create_datasource_table_to_db",
                        "create_datasource_table",
                        "create_database_to_db",
                        "create_database",
                        "delete_all_inserted_objects",
                        "delete_all_inserted_dashboards",
                        "delete_dashboard",
                        "delete_dashboard_users_associations",
                        "delete_dashboard_roles_associations",
                        "delete_dashboard_slices_associations",
                        "delete_all_inserted_slices",
                        "delete_slice",
                        "delete_slice_users_associations",
                        "delete_all_inserted_tables",
                        "delete_sqltable",
                        "delete_table_users_associations",
                        "delete_all_inserted_dbs",
                        "delete_database"
                      ],
                      "classes": [],
                      "imports": [
                        "logging",
                        "typing",
                        "flask_appbuilder",
                        "flask_appbuilder.security.sqla.models",
                        "superset",
                        "superset.connectors.sqla.models",
                        "superset.models.core",
                        "superset.models.dashboard",
                        "superset.models.slice",
                        "tests.integration_tests.dashboards.dashboard_test_utils"
                      ],
                      "size_lines": 332,
                      "has_main": false,
                      "docstring": null
                    },
                    "commands_tests.py": {
                      "functions": [
                        "test_export_dashboard_command",
                        "test_export_dashboard_command_dataset_references",
                        "test_export_dashboard_command_no_access",
                        "test_export_dashboard_command_invalid_dataset",
                        "test_export_dashboard_command_key_order",
                        "test_append_charts",
                        "test_export_dashboard_command_no_related",
                        "test_import_v0_dashboard_cli_export",
                        "test_import_v1_dashboard",
                        "test_import_v1_dashboard_multiple",
                        "test_import_v1_dashboard_validation",
                        "test_copy_dashboard_command",
                        "test_copy_dashboard_command_no_access",
                        "test_copy_dashboard_command_invalid_data",
                        "test_delete_embedded_dashboard_command",
                        "test_fave_unfave_dashboard_command",
                        "test_fave_unfave_dashboard_command_not_found",
                        "test_fave_unfave_dashboard_command_forbidden"
                      ],
                      "classes": [
                        "TestExportDashboardsCommand",
                        "TestImportDashboardsCommand",
                        "TestCopyDashboardCommand",
                        "TestDeleteEmbeddedDashboardCommand",
                        "TestFavoriteDashboardCommand"
                      ],
                      "imports": [
                        "itertools",
                        "unittest.mock",
                        "pytest",
                        "yaml",
                        "werkzeug.utils",
                        "superset",
                        "superset.commands.dashboard.copy",
                        "superset.commands.dashboard.delete",
                        "superset.commands.dashboard.exceptions",
                        "superset.commands.dashboard.export",
                        "superset.commands.dashboard.fave",
                        "superset.commands.dashboard.importers",
                        "superset.commands.dashboard.unfave",
                        "superset.commands.exceptions",
                        "superset.commands.importers.exceptions",
                        "superset.connectors.sqla.models",
                        "superset.daos.dashboard",
                        "superset.models.core",
                        "superset.models.dashboard",
                        "superset.models.embedded_dashboard",
                        "superset.models.slice",
                        "superset.utils",
                        "superset.utils.core",
                        "tests.integration_tests.base_tests",
                        "tests.integration_tests.fixtures.importexport",
                        "tests.integration_tests.fixtures.world_bank_dashboard"
                      ],
                      "size_lines": 897,
                      "has_main": false,
                      "docstring": null
                    },
                    "permalink": {
                      "__init__.py": {
                        "functions": [],
                        "classes": [],
                        "imports": [],
                        "size_lines": 17,
                        "has_main": false,
                        "docstring": null
                      },
                      "api_tests.py": {
                        "functions": [
                          "dashboard_id",
                          "permalink_salt",
                          "test_post",
                          "test_post_access_denied",
                          "test_post_invalid_schema",
                          "test_get"
                        ],
                        "classes": [],
                        "imports": [
                          "collections.abc",
                          "unittest.mock",
                          "uuid",
                          "pytest",
                          "flask_appbuilder.security.sqla.models",
                          "sqlalchemy.orm",
                          "superset",
                          "superset.commands.dashboard.exceptions",
                          "superset.key_value.models",
                          "superset.key_value.types",
                          "superset.key_value.utils",
                          "superset.models.dashboard",
                          "tests.integration_tests.fixtures.world_bank_dashboard",
                          "tests.integration_tests.test_app",
                          "superset.key_value.shared_entries",
                          "superset.key_value.types"
                        ],
                        "size_lines": 115,
                        "has_main": false,
                        "docstring": null
                      }
                    },
                    "security": {
                      "security_dataset_tests.py": {
                        "functions": [
                          "load_dashboard",
                          "test_dashboard_access__admin_can_access_all",
                          "test_get_dashboards__users_are_dashboards_owners",
                          "test_get_dashboards__owners_can_view_empty_dashboard",
                          "test_get_dashboards__user_can_not_view_unpublished_dash",
                          "test_get_dashboards__users_can_view_permitted_dashboard",
                          "test_get_dashboards_api_no_data_access"
                        ],
                        "classes": [
                          "TestDashboardDatasetSecurity"
                        ],
                        "imports": [
                          "prison",
                          "pytest",
                          "flask",
                          "superset",
                          "superset.daos.dashboard",
                          "superset.utils",
                          "tests.integration_tests.constants",
                          "tests.integration_tests.dashboards.base_case",
                          "tests.integration_tests.dashboards.consts",
                          "tests.integration_tests.dashboards.dashboard_test_utils",
                          "tests.integration_tests.dashboards.superset_factory_util",
                          "tests.integration_tests.fixtures.energy_dashboard"
                        ],
                        "size_lines": 196,
                        "has_main": false,
                        "docstring": "Unit tests for Superset"
                      },
                      "__init__.py": {
                        "functions": [],
                        "classes": [],
                        "imports": [],
                        "size_lines": 17,
                        "has_main": false,
                        "docstring": null
                      },
                      "base_case.py": {
                        "functions": [
                          "tearDown",
                          "assert_dashboard_api_response",
                          "assert_dashboards_api_response"
                        ],
                        "classes": [
                          "BaseTestDashboardSecurity"
                        ],
                        "imports": [
                          "typing",
                          "flask",
                          "superset.models.dashboard",
                          "tests.integration_tests.dashboards.base_case"
                        ],
                        "size_lines": 55,
                        "has_main": false,
                        "docstring": null
                      },
                      "security_rbac_tests.py": {
                        "functions": [
                          "test_get_dashboard_view__admin_can_access",
                          "test_get_dashboard_view__owner_can_access",
                          "test_get_dashboard_view__user_can_not_access_without_permission",
                          "test_get_dashboard_view__user_with_dashboard_permission_can_not_access_draft",
                          "test_get_dashboard_view__user_no_access_regular_rbac",
                          "test_get_dashboard_view__user_access_regular_rbac",
                          "test_get_dashboard_view__user_access_with_dashboard_permission",
                          "test_get_dashboard_view__public_user_can_not_access_without_permission",
                          "test_get_dashboard_view__public_user_with_dashboard_permission_can_not_access_draft",
                          "test_get_dashboard_view__public_user_access_with_dashboard_permission",
                          "_create_sample_dashboards_with_owner_access",
                          "_create_sample_only_published_dashboard_with_roles",
                          "test_get_dashboards_api__admin_get_all_dashboards",
                          "test_get_dashboards_api__owner_get_all_owned_dashboards",
                          "test_get_dashboards_api__user_without_any_permissions_get_empty_list",
                          "test_get_dashboards_api__user_get_only_published_permitted_dashboards",
                          "test_get_dashboards_api__public_user_without_any_permissions_get_empty_list",
                          "test_get_dashboards_api__public_user_get_only_published_permitted_dashboards",
                          "test_cannot_get_draft_dashboard_without_roles_by_uuid",
                          "test_cannot_get_draft_dashboard_with_roles_by_uuid",
                          "test_copy_dashboard_via_api",
                          "test_copy_dashboard_via_dao"
                        ],
                        "classes": [
                          "TestDashboardRoleBasedSecurity"
                        ],
                        "imports": [
                          "unittest",
                          "unittest.mock",
                          "pytest",
                          "superset.commands.dashboard.exceptions",
                          "superset.daos.dashboard",
                          "superset.utils",
                          "superset.utils.core",
                          "tests.integration_tests.conftest",
                          "tests.integration_tests.constants",
                          "tests.integration_tests.dashboards.dashboard_test_utils",
                          "tests.integration_tests.dashboards.security.base_case",
                          "tests.integration_tests.dashboards.superset_factory_util",
                          "tests.integration_tests.fixtures.birth_names_dashboard",
                          "tests.integration_tests.fixtures.public_role",
                          "tests.integration_tests.fixtures.query_context",
                          "tests.integration_tests.fixtures.world_bank_dashboard"
                        ],
                        "size_lines": 532,
                        "has_main": false,
                        "docstring": "Unit tests for Superset"
                      }
                    },
                    "filter_state": {
                      "__init__.py": {
                        "functions": [],
                        "classes": [],
                        "imports": [],
                        "size_lines": 17,
                        "has_main": false,
                        "docstring": null
                      },
                      "api_tests.py": {
                        "functions": [
                          "dashboard_id",
                          "admin_id",
                          "cache",
                          "test_post",
                          "test_post_bad_request_non_string",
                          "test_post_bad_request_non_json_string",
                          "test_post_access_denied",
                          "test_post_same_key_for_same_tab_id",
                          "test_post_different_key_for_different_tab_id",
                          "test_post_different_key_for_no_tab_id",
                          "test_put",
                          "test_put_same_key_for_same_tab_id",
                          "test_put_different_key_for_different_tab_id",
                          "test_put_different_key_for_no_tab_id",
                          "test_put_bad_request_non_string",
                          "test_put_bad_request_non_json_string",
                          "test_put_access_denied",
                          "test_get_key_not_found",
                          "test_get_dashboard_not_found",
                          "test_get_dashboard_filter_state",
                          "test_get_access_denied",
                          "test_delete",
                          "test_delete_access_denied",
                          "test_delete_not_owner"
                        ],
                        "classes": [],
                        "imports": [
                          "unittest.mock",
                          "pytest",
                          "flask.ctx",
                          "flask_appbuilder.security.sqla.models",
                          "sqlalchemy.orm",
                          "superset",
                          "superset.commands.dashboard.exceptions",
                          "superset.commands.temporary_cache.entry",
                          "superset.extensions",
                          "superset.models.dashboard",
                          "superset.temporary_cache.utils",
                          "superset.utils",
                          "tests.integration_tests.fixtures.world_bank_dashboard",
                          "tests.integration_tests.test_app"
                        ],
                        "size_lines": 296,
                        "has_main": false,
                        "docstring": null
                      }
                    }
                  },
                  "users": {
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "api_tests.py": {
                      "functions": [
                        "test_get_me_logged_in",
                        "test_get_me_with_roles",
                        "test_get_my_roles_anonymous",
                        "test_get_me_unauthorized",
                        "test_get_me_anonymous",
                        "test_avatar_with_invalid_user",
                        "test_avatar_valid_user_no_avatar",
                        "test_avatar_with_valid_user"
                      ],
                      "classes": [
                        "TestCurrentUserApi",
                        "TestUserApi"
                      ],
                      "imports": [
                        "unittest.mock",
                        "superset",
                        "superset.utils",
                        "tests.conftest",
                        "tests.integration_tests.base_tests",
                        "tests.integration_tests.conftest",
                        "tests.integration_tests.constants"
                      ],
                      "size_lines": 94,
                      "has_main": false,
                      "docstring": "Unit tests for Superset"
                    }
                  },
                  "annotation_layers": {
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "api_tests.py": {
                      "functions": [
                        "get_layer_with_annotation",
                        "test_get_annotation_layer",
                        "test_info_annotation",
                        "test_info_security_query",
                        "test_get_annotation_layer_not_found",
                        "test_get_list_annotation_layer",
                        "test_get_list_annotation_layer_sorting",
                        "test_get_list_annotation_layer_filter",
                        "test_create_annotation_layer",
                        "test_create_incorrect_annotation_layer",
                        "test_create_annotation_layer_uniqueness",
                        "test_update_annotation_layer",
                        "test_update_annotation_layer_uniqueness",
                        "test_update_annotation_layer_not_found",
                        "test_delete_annotation_layer",
                        "test_delete_annotation_layer_not_found",
                        "test_delete_annotation_layer_integrity",
                        "test_bulk_delete_annotation_layer",
                        "test_bulk_delete_annotation_layer_not_found",
                        "test_get_annotation",
                        "test_get_annotation_not_found",
                        "test_get_list_annotation",
                        "test_get_list_annotation_sorting",
                        "test_get_list_annotation_filter",
                        "test_create_annotation",
                        "test_create_incorrect_annotation",
                        "test_create_annotation_uniqueness",
                        "test_update_annotation",
                        "test_update_annotation_null_datetime",
                        "test_update_annotation_uniqueness",
                        "test_update_annotation_not_found",
                        "test_delete_annotation",
                        "test_delete_annotation_not_found",
                        "test_bulk_delete_annotation",
                        "test_bulk_delete_annotation_not_found"
                      ],
                      "classes": [
                        "TestAnnotationLayerApi"
                      ],
                      "imports": [
                        "pytest",
                        "prison",
                        "sqlalchemy.sql",
                        "tests.integration_tests.test_app",
                        "superset",
                        "superset.utils",
                        "superset.models.annotations",
                        "tests.integration_tests.base_tests",
                        "tests.integration_tests.annotation_layers.fixtures",
                        "tests.unit_tests.annotation_layers.fixtures",
                        "tests.integration_tests.constants"
                      ],
                      "size_lines": 751,
                      "has_main": false,
                      "docstring": "Unit tests for Superset"
                    },
                    "fixtures.py": {
                      "functions": [
                        "get_start_dttm",
                        "get_end_dttm",
                        "_insert_annotation_layer",
                        "_insert_annotation",
                        "create_annotation_layers"
                      ],
                      "classes": [],
                      "imports": [
                        "datetime",
                        "typing",
                        "pytest",
                        "flask.ctx",
                        "superset",
                        "superset.models.annotations"
                      ],
                      "size_lines": 102,
                      "has_main": false,
                      "docstring": null
                    }
                  },
                  "fixtures": {
                    "tags.py": {
                      "functions": [
                        "with_tagging_system_feature",
                        "create_custom_tags",
                        "get_filter_params"
                      ],
                      "classes": [],
                      "imports": [
                        "pytest",
                        "superset",
                        "superset.tags.core",
                        "superset.tags.models",
                        "tests.integration_tests.test_app"
                      ],
                      "size_lines": 68,
                      "has_main": false,
                      "docstring": null
                    },
                    "query_context.py": {
                      "functions": [
                        "get_query_context",
                        "get_table"
                      ],
                      "classes": [
                        "QueryContextGeneratorInteg"
                      ],
                      "imports": [
                        "typing",
                        "tests.common.query_context_generator",
                        "tests.integration_tests.base_tests"
                      ],
                      "size_lines": 51,
                      "has_main": false,
                      "docstring": null
                    },
                    "birth_names_dashboard.py": {
                      "functions": [
                        "load_birth_names_data",
                        "load_birth_names_dashboard_with_slices",
                        "load_birth_names_dashboard_with_slices_module_scope",
                        "load_birth_names_dashboard_with_slices_class_scope",
                        "_create_dashboards",
                        "_create_table",
                        "_cleanup"
                      ],
                      "classes": [],
                      "imports": [
                        "typing",
                        "pytest",
                        "superset",
                        "superset.connectors.sqla.models",
                        "superset.models.core",
                        "superset.models.dashboard",
                        "superset.models.slice",
                        "superset.utils.core",
                        "superset.utils.database",
                        "tests.example_data.data_loading.base_data_loader",
                        "tests.example_data.data_loading.data_definitions.types",
                        "tests.integration_tests.dashboard_utils",
                        "tests.integration_tests.test_app",
                        "superset.examples.birth_names",
                        "superset.examples.birth_names"
                      ],
                      "size_lines": 117,
                      "has_main": false,
                      "docstring": null
                    },
                    "users.py": {
                      "functions": [
                        "create_role_with_permissions",
                        "create_user_and_group",
                        "cleanup",
                        "create_gamma_user_group",
                        "create_user_group_with_dar",
                        "create_gamma_user_group_with_dar",
                        "create_gamma_user_group_with_all_database",
                        "create_gamma_sqllab_no_data"
                      ],
                      "classes": [],
                      "imports": [
                        "pytest",
                        "flask.ctx",
                        "flask_appbuilder.security.sqla.models",
                        "superset",
                        "tests.integration_tests.constants"
                      ],
                      "size_lines": 127,
                      "has_main": false,
                      "docstring": null
                    },
                    "database.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 23,
                      "has_main": false,
                      "docstring": null
                    },
                    "client.py": {
                      "functions": [
                        "client"
                      ],
                      "classes": [],
                      "imports": [
                        "pytest",
                        "tests.integration_tests.test_app"
                      ],
                      "size_lines": 27,
                      "has_main": false,
                      "docstring": null
                    },
                    "importexport.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [
                        "copy",
                        "typing"
                      ],
                      "size_lines": 694,
                      "has_main": false,
                      "docstring": null
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [
                        "birth_names_dashboard",
                        "energy_dashboard",
                        "public_role",
                        "unicode_dashboard",
                        "world_bank_dashboard"
                      ],
                      "size_lines": 38,
                      "has_main": false,
                      "docstring": null
                    },
                    "certificates.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 39,
                      "has_main": false,
                      "docstring": null
                    },
                    "world_bank_dashboard.py": {
                      "functions": [
                        "load_world_bank_data",
                        "load_world_bank_dashboard_with_slices",
                        "load_world_bank_dashboard_with_slices_module_scope",
                        "load_world_bank_dashboard_with_slices_class_scope",
                        "create_dashboard_for_loaded_data",
                        "_create_world_bank_slices",
                        "_commit_slices",
                        "_create_world_bank_dashboard",
                        "_cleanup",
                        "_cleanup_reports",
                        "_get_dataframe",
                        "_get_world_bank_data",
                        "get_random_float_or_none"
                      ],
                      "classes": [],
                      "imports": [
                        "string",
                        "operator",
                        "random",
                        "typing",
                        "pandas",
                        "pytest",
                        "pandas",
                        "sqlalchemy",
                        "superset",
                        "superset.connectors.sqla.models",
                        "superset.models.core",
                        "superset.models.dashboard",
                        "superset.models.slice",
                        "superset.reports.models",
                        "superset.utils",
                        "superset.utils.core",
                        "superset.utils.database",
                        "tests.integration_tests.dashboard_utils",
                        "tests.integration_tests.test_app",
                        "superset.examples.world_bank",
                        "superset.examples.helpers",
                        "superset.examples.world_bank"
                      ],
                      "size_lines": 529,
                      "has_main": false,
                      "docstring": null
                    },
                    "datasource.py": {
                      "functions": [
                        "get_datasource_post",
                        "load_dataset_with_columns"
                      ],
                      "classes": [],
                      "imports": [
                        "collections.abc",
                        "typing",
                        "pytest",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "superset.connectors.sqla.models",
                        "superset.extensions",
                        "superset.models.core",
                        "superset.utils.core",
                        "superset.utils.database",
                        "tests.integration_tests.test_app"
                      ],
                      "size_lines": 209,
                      "has_main": false,
                      "docstring": "Fixtures for test_datasource.py"
                    },
                    "public_role.py": {
                      "functions": [
                        "public_role_like_gamma",
                        "public_role_like_test_role"
                      ],
                      "classes": [],
                      "imports": [
                        "pytest",
                        "flask.ctx",
                        "superset.extensions",
                        "tests.integration_tests.test_app"
                      ],
                      "size_lines": 44,
                      "has_main": false,
                      "docstring": null
                    },
                    "pyodbcRow.py": {
                      "functions": [
                        "__init__",
                        "__name__",
                        "__iter__"
                      ],
                      "classes": [
                        "Row"
                      ],
                      "imports": [],
                      "size_lines": 26,
                      "has_main": false,
                      "docstring": null
                    },
                    "unicode_dashboard.py": {
                      "functions": [
                        "load_unicode_data",
                        "load_unicode_dashboard_with_slice",
                        "load_unicode_dashboard_with_position",
                        "_get_dataframe",
                        "_get_unicode_data",
                        "_create_unicode_dashboard",
                        "_create_and_commit_unicode_slice",
                        "_cleanup"
                      ],
                      "classes": [],
                      "imports": [
                        "pandas",
                        "pytest",
                        "sqlalchemy",
                        "superset",
                        "superset.connectors.sqla.models",
                        "superset.models.dashboard",
                        "superset.models.slice",
                        "superset.utils.core",
                        "superset.utils.database",
                        "tests.integration_tests.dashboard_utils",
                        "tests.integration_tests.test_app"
                      ],
                      "size_lines": 122,
                      "has_main": false,
                      "docstring": null
                    },
                    "dashboard_with_tabs.py": {
                      "functions": [
                        "load_mutltiple_tabs_dashboard"
                      ],
                      "classes": [],
                      "imports": [
                        "json",
                        "pytest",
                        "tests.integration_tests.dashboard_utils",
                        "tests.integration_tests.test_app"
                      ],
                      "size_lines": 652,
                      "has_main": false,
                      "docstring": null
                    },
                    "energy_dashboard.py": {
                      "functions": [
                        "load_energy_table_data",
                        "load_energy_table_with_slice",
                        "_get_dataframe",
                        "_create_energy_table",
                        "_create_and_commit_energy_slice",
                        "_cleanup",
                        "_get_energy_data",
                        "_get_energy_slices"
                      ],
                      "classes": [],
                      "imports": [
                        "random",
                        "pandas",
                        "pytest",
                        "sqlalchemy",
                        "superset",
                        "superset.connectors.sqla.models",
                        "superset.models.slice",
                        "superset.utils.core",
                        "superset.utils.database",
                        "tests.integration_tests.dashboard_utils",
                        "tests.integration_tests.test_app"
                      ],
                      "size_lines": 192,
                      "has_main": false,
                      "docstring": null
                    },
                    "tabbed_dashboard.py": {
                      "functions": [
                        "tabbed_dashboard"
                      ],
                      "classes": [],
                      "imports": [
                        "pytest",
                        "superset",
                        "superset.models.dashboard",
                        "superset.utils",
                        "superset.utils.core",
                        "tests.integration_tests.dashboards.superset_factory_util"
                      ],
                      "size_lines": 142,
                      "has_main": false,
                      "docstring": null
                    }
                  },
                  "cachekeys": {
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "api_tests.py": {
                      "functions": [
                        "invalidate",
                        "test_invalidate_cache",
                        "test_invalidate_existing_cache",
                        "test_invalidate_cache_empty_input",
                        "test_invalidate_cache_bad_request",
                        "test_invalidate_existing_caches",
                        "_invalidate"
                      ],
                      "classes": [],
                      "imports": [
                        "typing",
                        "pytest",
                        "superset.extensions",
                        "superset.models.cache",
                        "superset.utils.core",
                        "tests.integration_tests.base_tests",
                        "tests.integration_tests.fixtures.birth_names_dashboard"
                      ],
                      "size_lines": 174,
                      "has_main": false,
                      "docstring": "Unit tests for Superset"
                    }
                  },
                  "advanced_data_type": {
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "api_tests.py": {
                      "functions": [
                        "translation_func",
                        "translate_filter_func",
                        "test_types_type_request",
                        "test_types_convert_bad_request_no_vals",
                        "test_types_convert_bad_request_no_type",
                        "test_types_convert_bad_request_type_not_found",
                        "test_types_convert_request"
                      ],
                      "classes": [],
                      "imports": [
                        "prison",
                        "superset.utils.core",
                        "tests.integration_tests.utils.get_dashboards",
                        "unittest",
                        "sqlalchemy",
                        "typing",
                        "superset.advanced_data_type.types",
                        "superset.utils.core",
                        "superset.utils"
                      ],
                      "size_lines": 137,
                      "has_main": false,
                      "docstring": "Unit tests for Superset"
                    }
                  },
                  "embedded": {
                    "dao_tests.py": {
                      "functions": [
                        "test_upsert",
                        "test_get_by_uuid"
                      ],
                      "classes": [
                        "TestEmbeddedDashboardDAO"
                      ],
                      "imports": [
                        "pytest",
                        "tests.integration_tests.test_app",
                        "superset",
                        "superset.daos.dashboard",
                        "superset.models.dashboard",
                        "tests.integration_tests.base_tests",
                        "tests.integration_tests.fixtures.world_bank_dashboard"
                      ],
                      "size_lines": 55,
                      "has_main": false,
                      "docstring": null
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_view.py": {
                      "functions": [
                        "test_get_embedded_dashboard",
                        "test_get_embedded_dashboard_referrer_not_allowed",
                        "test_get_embedded_dashboard_non_found"
                      ],
                      "classes": [],
                      "imports": [
                        "__future__",
                        "typing",
                        "unittest",
                        "pytest",
                        "superset",
                        "superset.daos.dashboard",
                        "superset.models.dashboard",
                        "tests.integration_tests.fixtures.birth_names_dashboard",
                        "tests.integration_tests.fixtures.client",
                        "typing",
                        "flask.testing"
                      ],
                      "size_lines": 75,
                      "has_main": false,
                      "docstring": null
                    },
                    "api_tests.py": {
                      "functions": [
                        "test_get_embedded_dashboard",
                        "test_get_embedded_dashboard_non_found"
                      ],
                      "classes": [
                        "TestEmbeddedDashboardApi"
                      ],
                      "imports": [
                        "unittest",
                        "pytest",
                        "superset",
                        "superset.daos.dashboard",
                        "superset.models.dashboard",
                        "tests.integration_tests.base_tests",
                        "tests.integration_tests.constants",
                        "tests.integration_tests.fixtures.birth_names_dashboard"
                      ],
                      "size_lines": 57,
                      "has_main": false,
                      "docstring": "Tests for security api methods"
                    }
                  },
                  "reports": {
                    "alert_tests.py": {
                      "functions": [
                        "test_execute_query_as_report_executor",
                        "test_execute_query_mutate_query_enabled",
                        "test_execute_query_mutate_query_disabled",
                        "test_execute_query_succeeded_no_retry",
                        "test_execute_query_succeeded_with_retries",
                        "test_execute_query_failed_no_retry",
                        "test_execute_query_failed_max_retries",
                        "test_get_alert_metadata_from_object",
                        "_mocked_execute_query",
                        "_mocked_execute_query",
                        "_mocked_execute_query"
                      ],
                      "classes": [],
                      "imports": [
                        "uuid",
                        "contextlib",
                        "typing",
                        "pandas",
                        "pytest",
                        "flask.ctx",
                        "pytest_mock",
                        "superset.commands.report.exceptions",
                        "superset.reports.models",
                        "superset.tasks.types",
                        "superset.utils.database",
                        "tests.integration_tests.test_app",
                        "superset.commands.report.alert",
                        "superset.reports.models",
                        "superset.commands.report.alert",
                        "superset.reports.models",
                        "superset.commands.report.alert",
                        "superset.reports.models",
                        "superset.commands.report.alert",
                        "superset.commands.report.alert",
                        "superset.commands.report.alert",
                        "superset.commands.report.alert",
                        "superset.commands.report.alert",
                        "superset.reports.models"
                      ],
                      "size_lines": 304,
                      "has_main": false,
                      "docstring": null
                    },
                    "scheduler_tests.py": {
                      "functions": [
                        "owners",
                        "test_scheduler_celery_timeout_ny",
                        "test_scheduler_celery_no_timeout_ny",
                        "test_scheduler_celery_timeout_utc",
                        "test_scheduler_celery_no_timeout_utc",
                        "test_scheduler_feature_flag_off",
                        "test_execute_task",
                        "test_execute_task_with_command_exception"
                      ],
                      "classes": [],
                      "imports": [
                        "random",
                        "unittest.mock",
                        "pytest",
                        "flask_appbuilder.security.sqla.models",
                        "freezegun",
                        "freezegun.api",
                        "superset.extensions",
                        "superset.reports.models",
                        "superset.tasks.scheduler",
                        "tests.integration_tests.reports.utils",
                        "tests.integration_tests.test_app",
                        "superset.commands.report.exceptions",
                        "superset.commands.exceptions"
                      ],
                      "size_lines": 204,
                      "has_main": false,
                      "docstring": null
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "utils.py": {
                      "functions": [
                        "insert_report_schedule",
                        "create_report_notification",
                        "cleanup_report_schedule",
                        "create_dashboard_report",
                        "reset_key_values"
                      ],
                      "classes": [],
                      "imports": [
                        "contextlib",
                        "typing",
                        "uuid",
                        "flask_appbuilder.security.sqla.models",
                        "superset",
                        "superset.key_value.models",
                        "superset.models.core",
                        "superset.models.dashboard",
                        "superset.models.slice",
                        "superset.reports.models",
                        "superset.utils",
                        "superset.utils.core",
                        "tests.integration_tests.test_app",
                        "tests.integration_tests.utils"
                      ],
                      "size_lines": 220,
                      "has_main": false,
                      "docstring": null
                    },
                    "api_tests.py": {
                      "functions": [
                        "gamma_user_with_alerts_role",
                        "create_working_admin_report_schedule",
                        "create_working_gamma_report_schedule",
                        "create_working_shared_report_schedule",
                        "create_report_schedules",
                        "create_alpha_users",
                        "test_get_report_schedule_disabled",
                        "test_get_report_schedule",
                        "test_info_report_schedule",
                        "test_info_security_report",
                        "test_get_report_schedule_not_found",
                        "test_get_list_report_schedule",
                        "test_get_list_report_schedule_perms",
                        "test_get_list_report_schedule_gamma",
                        "test_get_list_report_schedule_sorting",
                        "test_get_list_report_schedule_filter_name",
                        "test_get_list_report_schedule_filter_custom",
                        "test_get_list_report_schedule_filter_active",
                        "test_get_list_report_schedule_filter_type",
                        "test_get_related_report_schedule",
                        "test_create_report_schedule",
                        "test_create_report_schedule_uniqueness",
                        "test_create_report_schedule_schema",
                        "test_unsaved_report_schedule_schema",
                        "test_no_dashboard_report_schedule_schema",
                        "test_create_multiple_creation_method_report_schedule_charts",
                        "test_create_multiple_creation_method_report_schedule_dashboards",
                        "test_create_report_schedule_chart_dash_validation",
                        "test_create_report_schedule_chart_db_validation",
                        "test_create_report_schedule_relations_exist",
                        "test_create_report_schedule_invalid_creation_method",
                        "test_create_report_schedule_valid_schedule",
                        "test_create_report_schedule_invalid_schedule",
                        "test_update_report_schedule_valid_schedule",
                        "test_update_report_schedule_invalid_schedule",
                        "test_update_report_schedule",
                        "test_update_report_schedule_state_working",
                        "test_update_report_schedule_uniqueness",
                        "test_update_report_schedule_not_found",
                        "test_update_report_schedule_chart_dash_validation",
                        "test_update_report_schedule_relations_exist",
                        "test_update_report_not_owned",
                        "test_update_report_preserve_ownership",
                        "test_update_report_clear_owner_list",
                        "test_update_report_populate_owner",
                        "test_delete_report_schedule",
                        "test_delete_report_schedule_not_found",
                        "test_delete_report_not_owned",
                        "test_bulk_delete_report_schedule",
                        "test_bulk_delete_report_schedule_not_found",
                        "test_bulk_delete_report_not_owned",
                        "test_get_list_report_schedule_logs",
                        "test_get_list_report_schedule_logs_sorting",
                        "test_get_list_report_schedule_logs_filters",
                        "test_report_schedule_logs_no_mutations",
                        "test_create_report_schedule_with_invalid_anchors",
                        "test_create_report_schedule_with_multiple_anchors"
                      ],
                      "classes": [
                        "TestReportSchedulesApi"
                      ],
                      "imports": [
                        "datetime",
                        "unittest.mock",
                        "pytz",
                        "pytest",
                        "prison",
                        "parameterized",
                        "sqlalchemy.sql",
                        "superset",
                        "superset.models.core",
                        "superset.models.slice",
                        "superset.models.dashboard",
                        "superset.reports.models",
                        "superset.utils.database",
                        "superset.utils",
                        "tests.integration_tests.base_tests",
                        "tests.integration_tests.conftest",
                        "tests.integration_tests.constants",
                        "tests.integration_tests.fixtures.birth_names_dashboard",
                        "tests.integration_tests.fixtures.dashboard_with_tabs",
                        "tests.integration_tests.reports.utils"
                      ],
                      "size_lines": 2052,
                      "has_main": false,
                      "docstring": "Unit tests for Superset"
                    },
                    "commands_tests.py": {
                      "functions": [
                        "get_target_from_report_schedule",
                        "get_cctarget_from_report_schedule",
                        "get_bcctarget_from_report_schedule",
                        "get_error_logs_query",
                        "get_notification_error_sent_count",
                        "assert_log",
                        "create_test_table_context",
                        "create_report_email_chart",
                        "create_report_email_chart_with_cc_and_bcc",
                        "create_report_email_chart_alpha_owner",
                        "create_report_email_chart_force_screenshot",
                        "create_report_email_chart_with_csv",
                        "create_report_email_chart_with_text",
                        "create_report_email_chart_with_csv_no_query_context",
                        "create_report_email_dashboard",
                        "create_report_email_dashboard_force_screenshot",
                        "create_report_slack_chart",
                        "create_report_slack_chartv2",
                        "create_report_slack_chart_with_csv",
                        "create_report_slack_chart_with_text",
                        "create_report_slack_chart_working",
                        "create_alert_slack_chart_success",
                        "create_alert_slack_chart_grace",
                        "create_alert_email_chart",
                        "create_no_alert_email_chart",
                        "create_mul_alert_email_chart",
                        "create_invalid_sql_alert_email_chart",
                        "test_email_chart_report_schedule_with_cc_bcc",
                        "test_email_chart_report_schedule",
                        "test_email_chart_report_schedule_alpha_owner",
                        "test_email_chart_report_schedule_force_screenshot",
                        "test_email_chart_alert_schedule",
                        "test_email_chart_report_dry_run",
                        "test_email_chart_report_schedule_with_csv",
                        "test_email_chart_report_schedule_with_csv_no_query_context",
                        "test_email_chart_report_schedule_with_text",
                        "test_email_dashboard_report_schedule",
                        "test_email_dashboard_report_schedule_with_tab_anchor",
                        "test_email_dashboard_report_schedule_disabled_tabs",
                        "test_email_dashboard_report_schedule_force_screenshot",
                        "test_slack_chart_report_schedule_converts_to_v2",
                        "test_slack_chart_report_schedule_converts_to_v2_channel_with_hash",
                        "test_slack_chart_report_schedule_fails_to_converts_to_v2",
                        "test_slack_chart_report_schedule_v2",
                        "test_slack_chart_report_schedule_with_errors",
                        "test_slack_chart_report_schedule_with_csv",
                        "test_slack_chart_report_schedule_with_text",
                        "test_report_schedule_not_found",
                        "test_report_schedule_working",
                        "test_report_schedule_working_timeout",
                        "test_report_schedule_success_grace",
                        "test_report_schedule_success_grace_end",
                        "test_alert_limit_is_applied",
                        "test_email_dashboard_report_fails",
                        "test_email_dashboard_report_fails_uncaught_exception",
                        "test_slack_chart_alert",
                        "test_slack_chart_alert_no_attachment",
                        "test_slack_token_callable_chart_report",
                        "test_email_chart_no_alert",
                        "test_email_mul_alert",
                        "test_soft_timeout_alert",
                        "test_soft_timeout_screenshot",
                        "test_soft_timeout_csv",
                        "test_generate_no_csv",
                        "test_fail_screenshot",
                        "test_fail_csv",
                        "test_email_disable_screenshot",
                        "test_invalid_sql_alert",
                        "test_grace_period_error",
                        "test_grace_period_error_flap",
                        "test_prune_log_soft_time_out",
                        "test__send_with_client_errors",
                        "test__send_with_multiple_errors",
                        "test__send_with_server_errors",
                        "_screenshot_side_effect"
                      ],
                      "classes": [],
                      "imports": [
                        "contextlib",
                        "datetime",
                        "typing",
                        "unittest.mock",
                        "uuid",
                        "pytest",
                        "flask",
                        "flask.ctx",
                        "flask_appbuilder.security.sqla.models",
                        "flask_sqlalchemy",
                        "freezegun",
                        "slack_sdk.errors",
                        "sqlalchemy.sql",
                        "superset",
                        "superset.commands.report.exceptions",
                        "superset.commands.report.execute",
                        "superset.commands.report.log_prune",
                        "superset.exceptions",
                        "superset.key_value.models",
                        "superset.models.core",
                        "superset.models.dashboard",
                        "superset.models.slice",
                        "superset.reports.models",
                        "superset.reports.notifications.exceptions",
                        "superset.tasks.types",
                        "superset.utils",
                        "superset.utils.database",
                        "tests.integration_tests.fixtures.birth_names_dashboard",
                        "tests.integration_tests.fixtures.tabbed_dashboard",
                        "tests.integration_tests.fixtures.world_bank_dashboard",
                        "tests.integration_tests.reports.utils",
                        "tests.integration_tests.test_app",
                        "smtplib",
                        "smtplib",
                        "celery.exceptions",
                        "superset.commands.report.exceptions",
                        "celery.exceptions",
                        "celery.exceptions",
                        "celery.exceptions",
                        "superset.commands.report.exceptions",
                        "celery.exceptions"
                      ],
                      "size_lines": 2437,
                      "has_main": false,
                      "docstring": null
                    },
                    "commands": {
                      "create_dashboard_report_tests.py": {
                        "functions": [
                          "test_accept_valid_tab_ids",
                          "test_raise_exception_for_invalid_tab_ids"
                        ],
                        "classes": [],
                        "imports": [
                          "pytest",
                          "superset",
                          "superset.commands.report.create",
                          "superset.commands.report.exceptions",
                          "superset.models.dashboard",
                          "superset.reports.models",
                          "tests.integration_tests.fixtures.tabbed_dashboard"
                        ],
                        "size_lines": 94,
                        "has_main": false,
                        "docstring": null
                      },
                      "execute_dashboard_report_tests.py": {
                        "functions": [
                          "test_report_for_dashboard_with_tabs",
                          "test_report_with_header_data"
                        ],
                        "classes": [],
                        "imports": [
                          "datetime",
                          "unittest.mock",
                          "uuid",
                          "pytest",
                          "flask",
                          "superset.commands.dashboard.permalink.create",
                          "superset.commands.report.execute",
                          "superset.models.dashboard",
                          "superset.reports.models",
                          "superset.utils.urls",
                          "tests.integration_tests.fixtures.tabbed_dashboard",
                          "tests.integration_tests.reports.utils"
                        ],
                        "size_lines": 116,
                        "has_main": false,
                        "docstring": null
                      }
                    }
                  }
                },
                "example_data": {
                  "__init__.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 17,
                    "has_main": false,
                    "docstring": null
                  },
                  "data_loading": {
                    "base_data_loader.py": {
                      "functions": [
                        "load_table",
                        "remove_table"
                      ],
                      "classes": [
                        "DataLoader"
                      ],
                      "imports": [
                        "__future__",
                        "abc",
                        "typing",
                        "tests.common.example_data.data_loading.data_definitions.types"
                      ],
                      "size_lines": 32,
                      "has_main": false,
                      "docstring": null
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "data_definitions": {
                      "__init__.py": {
                        "functions": [],
                        "classes": [],
                        "imports": [],
                        "size_lines": 17,
                        "has_main": false,
                        "docstring": null
                      },
                      "types.py": {
                        "functions": [
                          "make",
                          "make_table"
                        ],
                        "classes": [
                          "TableMetaData",
                          "Table",
                          "TableMetaDataFactory"
                        ],
                        "imports": [
                          "abc",
                          "collections.abc",
                          "dataclasses",
                          "typing",
                          "sqlalchemy.types"
                        ],
                        "size_lines": 54,
                        "has_main": false,
                        "docstring": null
                      },
                      "birth_names.py": {
                        "functions": [
                          "__init__",
                          "make"
                        ],
                        "classes": [
                          "BirthNamesMetaDataFactory"
                        ],
                        "imports": [
                          "sqlalchemy",
                          "tests.consts.birth_names",
                          "tests.example_data.data_loading.data_definitions.types"
                        ],
                        "size_lines": 65,
                        "has_main": false,
                        "docstring": null
                      }
                    },
                    "pandas": {
                      "__init__.py": {
                        "functions": [],
                        "classes": [],
                        "imports": [],
                        "size_lines": 17,
                        "has_main": false,
                        "docstring": null
                      },
                      "pands_data_loading_conf.py": {
                        "functions": [
                          "__init__",
                          "make_from_dict",
                          "make_default"
                        ],
                        "classes": [
                          "PandasLoaderConfigurations"
                        ],
                        "imports": [
                          "__future__",
                          "typing"
                        ],
                        "size_lines": 65,
                        "has_main": false,
                        "docstring": null
                      },
                      "table_df_convertor.py": {
                        "functions": [
                          "__init__",
                          "convert",
                          "_should_convert_datetime_to_str"
                        ],
                        "classes": [
                          "TableToDfConvertorImpl"
                        ],
                        "imports": [
                          "__future__",
                          "typing",
                          "pandas",
                          "tests.common.logger_utils",
                          "tests.example_data.data_loading.pandas.pandas_data_loader",
                          "tests.example_data.data_loading.data_definitions.types"
                        ],
                        "size_lines": 49,
                        "has_main": false,
                        "docstring": null
                      },
                      "pandas_data_loader.py": {
                        "functions": [
                          "__init__",
                          "load_table",
                          "_detect_schema_name",
                          "_take_data_types",
                          "remove_table",
                          "convert"
                        ],
                        "classes": [
                          "PandasDataLoader",
                          "TableToDfConvertor"
                        ],
                        "imports": [
                          "__future__",
                          "abc",
                          "typing",
                          "pandas",
                          "sqlalchemy.inspection",
                          "tests.common.logger_utils",
                          "tests.example_data.data_loading.base_data_loader",
                          "sqlalchemy.engine",
                          "tests.example_data.data_loading.data_definitions.types",
                          "tests.example_data.data_loading.pandas.pands_data_loading_conf"
                        ],
                        "size_lines": 83,
                        "has_main": false,
                        "docstring": null
                      }
                    }
                  },
                  "data_generator": {
                    "string_generator.py": {
                      "functions": [
                        "__init__",
                        "generate"
                      ],
                      "classes": [
                        "StringGenerator"
                      ],
                      "imports": [
                        "random"
                      ],
                      "size_lines": 34,
                      "has_main": false,
                      "docstring": null
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 26,
                      "has_main": false,
                      "docstring": null
                    },
                    "base_generator.py": {
                      "functions": [
                        "generate"
                      ],
                      "classes": [
                        "ExampleDataGenerator"
                      ],
                      "imports": [
                        "abc",
                        "collections.abc",
                        "typing"
                      ],
                      "size_lines": 25,
                      "has_main": false,
                      "docstring": null
                    },
                    "consts.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 70,
                      "has_main": false,
                      "docstring": null
                    },
                    "string_generator_factory.py": {
                      "functions": [
                        "make",
                        "make_lowercase_based",
                        "make_ascii_letters_based",
                        "__validate_arguments"
                      ],
                      "classes": [
                        "StringGeneratorFactory"
                      ],
                      "imports": [
                        "string",
                        "tests.example_data.data_generator.string_generator"
                      ],
                      "size_lines": 47,
                      "has_main": false,
                      "docstring": null
                    },
                    "tests": {
                      "__init__.py": {
                        "functions": [],
                        "classes": [],
                        "imports": [],
                        "size_lines": 26,
                        "has_main": false,
                        "docstring": null
                      },
                      "test_string_generator.py": {
                        "functions": [
                          "test_string_generator"
                        ],
                        "classes": [],
                        "imports": [
                          "unittest.mock",
                          "tests.example_data.data_generator.string_generator"
                        ],
                        "size_lines": 36,
                        "has_main": false,
                        "docstring": null
                      }
                    },
                    "birth_names": {
                      "birth_names_generator.py": {
                        "functions": [
                          "__init__",
                          "generate",
                          "_make_year",
                          "generate_row"
                        ],
                        "classes": [
                          "BirthNamesGenerator"
                        ],
                        "imports": [
                          "__future__",
                          "collections.abc",
                          "datetime",
                          "random",
                          "typing",
                          "tests.consts.birth_names",
                          "tests.consts.us_states",
                          "tests.example_data.data_generator.base_generator",
                          "tests.example_data.data_generator.string_generator"
                        ],
                        "size_lines": 83,
                        "has_main": false,
                        "docstring": null
                      },
                      "__init__.py": {
                        "functions": [],
                        "classes": [],
                        "imports": [],
                        "size_lines": 17,
                        "has_main": false,
                        "docstring": null
                      },
                      "birth_names_generator_factory.py": {
                        "functions": [
                          "_make",
                          "make",
                          "set_instance",
                          "_get_instance",
                          "_make"
                        ],
                        "classes": [
                          "BirthNamesGeneratorFactory",
                          "BirthNamesGeneratorFactoryImpl"
                        ],
                        "imports": [
                          "__future__",
                          "abc",
                          "tests.example_data.data_generator.birth_names.birth_names_generator",
                          "tests.example_data.data_generator.string_generator_factory"
                        ],
                        "size_lines": 65,
                        "has_main": false,
                        "docstring": null
                      }
                    }
                  }
                },
                "common": {
                  "__init__.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 17,
                    "has_main": false,
                    "docstring": null
                  },
                  "query_context_generator.py": {
                    "functions": [
                      "get_query_object",
                      "_get_postprocessing_operation",
                      "generate",
                      "get_table"
                    ],
                    "classes": [
                      "Table",
                      "QueryContextGenerator"
                    ],
                    "imports": [
                      "copy",
                      "dataclasses",
                      "typing",
                      "superset.common.chart_data",
                      "superset.utils.core"
                    ],
                    "size_lines": 272,
                    "has_main": false,
                    "docstring": null
                  },
                  "logger_utils.py": {
                    "functions": [
                      "log",
                      "_make_decorator",
                      "_get_logger",
                      "decorator",
                      "decorator_class",
                      "_decorate_class_members_with_logs",
                      "decorator_func",
                      "_wrapper_func",
                      "_log_enter_to_function",
                      "_is_log_info",
                      "_is_under_info",
                      "_is_debug_enable",
                      "_log_debug",
                      "_log_exit_of_function"
                    ],
                    "classes": [],
                    "imports": [
                      "__future__",
                      "logging",
                      "functools",
                      "inspect",
                      "logging",
                      "typing"
                    ],
                    "size_lines": 175,
                    "has_main": false,
                    "docstring": null
                  }
                },
                "fixtures": {
                  "__init__.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 19,
                    "has_main": false,
                    "docstring": null
                  },
                  "birth_names.py": {
                    "functions": [
                      "birth_names_data_generator",
                      "birth_names_table_factory",
                      "_birth_names_table_factory"
                    ],
                    "classes": [],
                    "imports": [
                      "__future__",
                      "typing",
                      "pytest",
                      "tests.example_data.data_generator.birth_names.birth_names_generator_factory",
                      "tests.example_data.data_loading.data_definitions.birth_names",
                      "tests.example_data.data_generator.birth_names.birth_names_generator",
                      "tests.example_data.data_loading.data_definitions.types"
                    ],
                    "size_lines": 53,
                    "has_main": false,
                    "docstring": null
                  }
                },
                "consts": {
                  "__init__.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 17,
                    "has_main": false,
                    "docstring": null
                  },
                  "birth_names.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 27,
                    "has_main": false,
                    "docstring": null
                  },
                  "us_states.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 87,
                    "has_main": false,
                    "docstring": null
                  }
                }
              },
              "scripts": {
                "cypress_run.py": {
                  "functions": [
                    "generate_build_id",
                    "run_cypress_for_test_file",
                    "main"
                  ],
                  "classes": [],
                  "imports": [
                    "argparse",
                    "os",
                    "subprocess",
                    "datetime"
                  ],
                  "size_lines": 181,
                  "has_main": true,
                  "docstring": null
                },
                "cancel_github_workflows.py": {
                  "functions": [
                    "request",
                    "list_runs",
                    "cancel_run",
                    "get_pull_request",
                    "get_runs",
                    "print_commit",
                    "cancel_github_workflows"
                  ],
                  "classes": [],
                  "imports": [
                    "os",
                    "collections.abc",
                    "typing",
                    "click",
                    "requests",
                    "click.exceptions",
                    "dateutil"
                  ],
                  "size_lines": 254,
                  "has_main": true,
                  "docstring": "Manually cancel previous GitHub Action workflow runs in queue.\n\nExample:\n  # Set up\n  export GITHUB_TOKEN={{ your personal github access token }}\n  export GITHUB_REPOSITORY=apache/superset\n\n  # cancel previous jobs for a PR, will even cancel the running ones\n  ./cancel_github_workflows.py 1042\n\n  # cancel previous jobs for a branch\n  ./cancel_github_workflows.py my-branch\n\n  # cancel all jobs of a PR, including the latest runs\n  ./cancel_github_workflows.py 1024 --include-last"
                },
                "benchmark_migration.py": {
                  "functions": [
                    "import_migration_script",
                    "extract_modified_tables",
                    "find_models",
                    "main"
                  ],
                  "classes": [],
                  "imports": [
                    "importlib.util",
                    "logging",
                    "re",
                    "time",
                    "collections",
                    "graphlib",
                    "inspect",
                    "pathlib",
                    "types",
                    "typing",
                    "click",
                    "flask",
                    "flask_appbuilder",
                    "flask_migrate",
                    "progress.bar",
                    "sqlalchemy",
                    "sqlalchemy.ext.automap",
                    "superset",
                    "superset.utils.mock_data",
                    "superset.app"
                  ],
                  "size_lines": 245,
                  "has_main": true,
                  "docstring": null
                },
                "check-env.py": {
                  "functions": [
                    "check_memory",
                    "get_cpu_info",
                    "get_docker_platform",
                    "main",
                    "__init__",
                    "get_version",
                    "check_version",
                    "format_result"
                  ],
                  "classes": [
                    "Requirement"
                  ],
                  "imports": [
                    "platform",
                    "subprocess",
                    "sys",
                    "typing",
                    "click",
                    "psutil",
                    "packaging.version"
                  ],
                  "size_lines": 224,
                  "has_main": true,
                  "docstring": null
                },
                "change_detector.py": {
                  "functions": [
                    "fetch_files_github_api",
                    "fetch_changed_files_pr",
                    "fetch_changed_files_push",
                    "detect_changes",
                    "print_files",
                    "is_int",
                    "main",
                    "get_git_sha"
                  ],
                  "classes": [],
                  "imports": [
                    "argparse",
                    "json",
                    "os",
                    "re",
                    "subprocess",
                    "typing",
                    "urllib.request"
                  ],
                  "size_lines": 169,
                  "has_main": true,
                  "docstring": null
                },
                "permissions_cleanup.py": {
                  "functions": [
                    "cleanup_permissions"
                  ],
                  "classes": [],
                  "imports": [
                    "collections",
                    "superset",
                    "superset.utils.decorators"
                  ],
                  "size_lines": 75,
                  "has_main": false,
                  "docstring": null
                },
                "erd": {
                  "erd.py": {
                    "functions": [
                      "sort_data_structure",
                      "introspect_sqla_model",
                      "introspect_models",
                      "generate_erd",
                      "erd"
                    ],
                    "classes": [],
                    "imports": [
                      "json",
                      "os",
                      "collections",
                      "collections.abc",
                      "typing",
                      "click",
                      "jinja2",
                      "superset",
                      "superset.app"
                    ],
                    "size_lines": 212,
                    "has_main": true,
                    "docstring": "This module contains utilities to auto-generate an\nEntity-Relationship Diagram (ERD) from SQLAlchemy\nand onto a plantuml file."
                  }
                }
              },
              "superset": {
                "config.py": {
                  "functions": [
                    "_try_json_readversion",
                    "_try_json_readsha",
                    "CSV_TO_HIVE_UPLOAD_DIRECTORY_FUNC",
                    "allowed_schemas_for_csv_upload",
                    "engine_context_manager",
                    "SQL_QUERY_MUTATOR",
                    "EMAIL_HEADER_MUTATOR"
                  ],
                  "classes": [
                    "D3Format",
                    "D3TimeFormat",
                    "CeleryConfig",
                    "ExtraRelatedQueryFilters",
                    "ExtraDynamicQueryFilters"
                  ],
                  "imports": [
                    "__future__",
                    "importlib.util",
                    "json",
                    "logging",
                    "os",
                    "re",
                    "sys",
                    "collections",
                    "contextlib",
                    "datetime",
                    "email.mime.multipart",
                    "importlib.resources",
                    "typing",
                    "click",
                    "celery.schedules",
                    "flask",
                    "flask_appbuilder.security.manager",
                    "flask_caching.backends.base",
                    "pandas",
                    "pandas._libs.parsers",
                    "sqlalchemy.engine.url",
                    "sqlalchemy.orm.query",
                    "superset.advanced_data_type.plugins.internet_address",
                    "superset.advanced_data_type.plugins.internet_port",
                    "superset.advanced_data_type.types",
                    "superset.constants",
                    "superset.jinja_context",
                    "superset.key_value.types",
                    "superset.stats_logger",
                    "superset.superset_typing",
                    "superset.tasks.types",
                    "superset.utils",
                    "superset.utils.core",
                    "superset.utils.encrypt",
                    "superset.utils.log",
                    "superset.utils.logging_configurator",
                    "flask_appbuilder.security.sqla",
                    "sqlglot",
                    "superset.connectors.sqla.models",
                    "superset.models.core",
                    "superset.models.dashboard",
                    "superset.models.slice",
                    "superset_config",
                    "superset_config"
                  ],
                  "size_lines": 1980,
                  "has_main": false,
                  "docstring": "The main config file for Superset\n\nAll configuration in this file can be overridden by providing a superset_config\nin your PYTHONPATH as there is a ``from superset_config import *``\nat the end of this file."
                },
                "stats_logger.py": {
                  "functions": [
                    "__init__",
                    "key",
                    "incr",
                    "decr",
                    "timing",
                    "gauge",
                    "incr",
                    "decr",
                    "timing",
                    "gauge",
                    "__init__",
                    "incr",
                    "decr",
                    "timing",
                    "gauge"
                  ],
                  "classes": [
                    "BaseStatsLogger",
                    "DummyStatsLogger",
                    "StatsdStatsLogger"
                  ],
                  "imports": [
                    "logging",
                    "typing",
                    "colorama",
                    "statsd"
                  ],
                  "size_lines": 110,
                  "has_main": false,
                  "docstring": null
                },
                "legacy.py": {
                  "functions": [
                    "update_time_range"
                  ],
                  "classes": [],
                  "imports": [
                    "typing"
                  ],
                  "size_lines": 42,
                  "has_main": false,
                  "docstring": "Code related with dealing with legacy / change management"
                },
                "dataframe.py": {
                  "functions": [
                    "_convert_big_integers",
                    "df_to_records"
                  ],
                  "classes": [],
                  "imports": [
                    "logging",
                    "typing",
                    "pandas",
                    "superset.utils.core"
                  ],
                  "size_lines": 58,
                  "has_main": false,
                  "docstring": "Superset utilities for pandas.DataFrame."
                },
                "constants.py": {
                  "functions": [],
                  "classes": [
                    "InstantTimeComparison",
                    "RouteMethod",
                    "TimeGrain",
                    "PandasAxis",
                    "PandasPostprocessingCompare",
                    "CacheRegion"
                  ],
                  "imports": [
                    "enum",
                    "superset.utils.backports"
                  ],
                  "size_lines": 246,
                  "has_main": false,
                  "docstring": null
                },
                "__init__.py": {
                  "functions": [],
                  "classes": [],
                  "imports": [
                    "flask",
                    "werkzeug.local",
                    "superset.app",
                    "superset.extensions",
                    "superset.security"
                  ],
                  "size_lines": 50,
                  "has_main": false,
                  "docstring": null
                },
                "forms.py": {
                  "functions": [
                    "filter_not_empty_values",
                    "_value",
                    "process_formdata",
                    "_value",
                    "process_formdata"
                  ],
                  "classes": [
                    "JsonListField",
                    "CommaSeparatedListField"
                  ],
                  "imports": [
                    "typing",
                    "flask_appbuilder.fieldwidgets",
                    "wtforms",
                    "superset.utils"
                  ],
                  "size_lines": 66,
                  "has_main": false,
                  "docstring": "Contains the logic to create cohesive forms on the explore view"
                },
                "schemas.py": {
                  "functions": [],
                  "classes": [],
                  "imports": [
                    "superset.errors"
                  ],
                  "size_lines": 50,
                  "has_main": false,
                  "docstring": null
                },
                "sql_parse.py": {
                  "functions": [
                    "_extract_limit_from_query",
                    "extract_top_from_query",
                    "get_cte_remainder_query",
                    "check_sql_functions_exist",
                    "strip_comments_from_sql",
                    "sanitize_clause",
                    "has_table_query",
                    "add_table_name",
                    "get_rls_for_table",
                    "insert_rls_as_subquery",
                    "insert_rls_in_predicate",
                    "extract_table_references",
                    "extract_tables_from_jinja_sql",
                    "__init__",
                    "tables",
                    "_check_functions_exist_in_token",
                    "check_functions_exist",
                    "_extract_tables_from_sql",
                    "limit",
                    "_get_cte_tables",
                    "_check_cte_is_select",
                    "is_select",
                    "get_inner_cte_expression",
                    "is_valid_ctas",
                    "is_valid_cvas",
                    "is_explain",
                    "is_show",
                    "is_set",
                    "is_unknown",
                    "stripped",
                    "strip_comments",
                    "get_statements",
                    "get_table",
                    "_is_identifier",
                    "as_create_table",
                    "set_or_update_query_limit",
                    "find_nodes_by_key",
                    "is_body_select"
                  ],
                  "classes": [
                    "CtasMethod",
                    "ParsedQuery",
                    "InsertRLSState"
                  ],
                  "imports": [
                    "__future__",
                    "logging",
                    "re",
                    "collections.abc",
                    "typing",
                    "sqlparse",
                    "flask_babel",
                    "jinja2",
                    "sqlalchemy",
                    "sqlparse",
                    "sqlparse.lexer",
                    "sqlparse.sql",
                    "sqlparse.tokens",
                    "sqlparse.utils",
                    "superset.errors",
                    "superset.exceptions",
                    "superset.sql.parse",
                    "superset.utils.backports",
                    "sqloxide",
                    "superset.models.core",
                    "superset",
                    "superset.connectors.sqla.models",
                    "superset.jinja_context"
                  ],
                  "size_lines": 1012,
                  "has_main": false,
                  "docstring": null
                },
                "sql_lab.py": {
                  "functions": [
                    "handle_query_error",
                    "get_query_backoff_handler",
                    "get_query_giveup_handler",
                    "get_query",
                    "get_sql_results",
                    "execute_sql_statement",
                    "apply_limit_if_exists",
                    "_serialize_payload",
                    "_serialize_and_expand_data",
                    "execute_sql_statements",
                    "cancel_query"
                  ],
                  "classes": [
                    "SqlLabException",
                    "SqlLabSecurityException",
                    "SqlLabQueryStoppedException"
                  ],
                  "imports": [
                    "dataclasses",
                    "logging",
                    "sys",
                    "uuid",
                    "contextlib",
                    "datetime",
                    "sys",
                    "typing",
                    "backoff",
                    "msgpack",
                    "celery.exceptions",
                    "flask",
                    "flask_babel",
                    "superset",
                    "superset.common.db_query_status",
                    "superset.constants",
                    "superset.dataframe",
                    "superset.db_engine_specs",
                    "superset.errors",
                    "superset.exceptions",
                    "superset.extensions",
                    "superset.models.core",
                    "superset.models.sql_lab",
                    "superset.result_set",
                    "superset.sql.parse",
                    "superset.sql_parse",
                    "superset.sqllab.limiting_factor",
                    "superset.sqllab.utils",
                    "superset.utils",
                    "superset.utils.core",
                    "superset.utils.dates",
                    "superset.utils.decorators"
                  ],
                  "size_lines": 716,
                  "has_main": false,
                  "docstring": null
                },
                "app.py": {
                  "functions": [
                    "create_app"
                  ],
                  "classes": [
                    "SupersetApp"
                  ],
                  "imports": [
                    "logging",
                    "os",
                    "typing",
                    "flask",
                    "superset.initialization"
                  ],
                  "size_lines": 52,
                  "has_main": false,
                  "docstring": null
                },
                "superset_typing.py": {
                  "functions": [],
                  "classes": [
                    "LegacyMetric",
                    "AdhocMetricColumn",
                    "AdhocMetric",
                    "AdhocColumn",
                    "SQLAColumnType",
                    "ResultSetColumnType",
                    "OAuth2ClientConfig",
                    "OAuth2TokenResponse",
                    "OAuth2State"
                  ],
                  "imports": [
                    "collections.abc",
                    "datetime",
                    "typing",
                    "sqlalchemy.sql.type_api",
                    "typing_extensions",
                    "werkzeug.wrappers",
                    "superset.utils.core"
                  ],
                  "size_lines": 180,
                  "has_main": false,
                  "docstring": null
                },
                "exceptions.py": {
                  "functions": [
                    "__init__",
                    "exception",
                    "error_type",
                    "to_dict",
                    "__init__",
                    "to_dict",
                    "__init__",
                    "__init__",
                    "__init__",
                    "__init__",
                    "__init__",
                    "__init__",
                    "__init__",
                    "__init__",
                    "__init__",
                    "__init__",
                    "__init__",
                    "__init__",
                    "__init__",
                    "__init__",
                    "__init__",
                    "__init__"
                  ],
                  "classes": [
                    "SupersetException",
                    "SupersetErrorException",
                    "SupersetGenericErrorException",
                    "SupersetErrorFromParamsException",
                    "SupersetErrorsException",
                    "SupersetSyntaxErrorException",
                    "SupersetTimeoutException",
                    "SupersetGenericDBErrorException",
                    "SupersetTemplateParamsErrorException",
                    "SupersetSecurityException",
                    "SupersetVizException",
                    "NoDataException",
                    "NullValueException",
                    "SupersetTemplateException",
                    "SpatialException",
                    "CertificateException",
                    "DatabaseNotFound",
                    "MissingUserContextException",
                    "QueryObjectValidationError",
                    "AdvancedDataTypeResponseError",
                    "InvalidPostProcessingError",
                    "CacheLoadError",
                    "QueryClauseValidationException",
                    "DashboardImportException",
                    "DatasetInvalidPermissionEvaluationException",
                    "SerializationError",
                    "InvalidPayloadFormatError",
                    "InvalidPayloadSchemaError",
                    "SupersetCancelQueryException",
                    "QueryNotFoundException",
                    "ColumnNotFoundException",
                    "SupersetMarshmallowValidationError",
                    "SupersetParseError",
                    "OAuth2RedirectError",
                    "OAuth2Error",
                    "DisallowedSQLFunction",
                    "CreateKeyValueDistributedLockFailedException",
                    "DeleteKeyValueDistributedLockFailedException",
                    "DatabaseNotFoundException",
                    "TableNotFoundException"
                  ],
                  "imports": [
                    "__future__",
                    "collections",
                    "typing",
                    "flask_babel",
                    "marshmallow",
                    "superset.errors"
                  ],
                  "size_lines": 435,
                  "has_main": false,
                  "docstring": null
                },
                "errors.py": {
                  "functions": [
                    "__post_init__",
                    "to_dict"
                  ],
                  "classes": [
                    "SupersetErrorType",
                    "ErrorLevel",
                    "SupersetError"
                  ],
                  "imports": [
                    "dataclasses",
                    "typing",
                    "flask_babel",
                    "superset.utils.backports"
                  ],
                  "size_lines": 248,
                  "has_main": false,
                  "docstring": null
                },
                "result_set.py": {
                  "functions": [
                    "dedup",
                    "stringify",
                    "stringify_values",
                    "destringify",
                    "convert_to_string",
                    "__init__",
                    "convert_pa_dtype",
                    "convert_table_to_df",
                    "first_nonempty",
                    "is_temporal",
                    "type_generic",
                    "data_type",
                    "to_pandas_df",
                    "pa_table",
                    "size",
                    "columns"
                  ],
                  "classes": [
                    "SupersetResultSet"
                  ],
                  "imports": [
                    "datetime",
                    "logging",
                    "typing",
                    "numpy",
                    "pandas",
                    "pyarrow",
                    "numpy.typing",
                    "superset.db_engine_specs",
                    "superset.superset_typing",
                    "superset.utils",
                    "superset.utils.core"
                  ],
                  "size_lines": 277,
                  "has_main": false,
                  "docstring": "Superset wrapper around pyarrow.Table."
                },
                "viz.py": {
                  "functions": [
                    "geohash_to_json",
                    "get_subclasses",
                    "__init__",
                    "force_cached",
                    "process_metrics",
                    "handle_js_int_overflow",
                    "run_extra_queries",
                    "apply_rolling",
                    "get_samples",
                    "get_df",
                    "df_metrics_to_num",
                    "process_query_filters",
                    "dedup_columns",
                    "query_obj",
                    "cache_timeout",
                    "get_json",
                    "cache_key",
                    "get_payload",
                    "get_df_payload",
                    "json_dumps",
                    "has_error",
                    "payload_json_and_has_error",
                    "data",
                    "get_csv",
                    "get_data",
                    "json_data",
                    "raise_for_access",
                    "query_obj",
                    "get_data",
                    "get_data",
                    "query_obj",
                    "query_obj",
                    "get_data",
                    "query_obj",
                    "get_data",
                    "query_obj",
                    "to_series",
                    "process_data",
                    "run_extra_queries",
                    "get_data",
                    "query_obj",
                    "get_data",
                    "query_obj",
                    "get_data",
                    "query_obj",
                    "get_data",
                    "query_obj",
                    "get_data",
                    "query_obj",
                    "get_data",
                    "query_obj",
                    "get_data",
                    "query_obj",
                    "get_data",
                    "get_metrics",
                    "process_spatial_query_obj",
                    "get_spatial_columns",
                    "parse_coordinates",
                    "reverse_geohash_decode",
                    "reverse_latlong",
                    "process_spatial_data_obj",
                    "add_null_filters",
                    "query_obj",
                    "get_js_columns",
                    "get_data",
                    "get_properties",
                    "query_obj",
                    "get_metrics",
                    "get_properties",
                    "get_data",
                    "query_obj",
                    "get_properties",
                    "get_data",
                    "get_properties",
                    "get_data",
                    "query_obj",
                    "get_properties",
                    "get_data",
                    "query_obj",
                    "get_metrics",
                    "get_properties",
                    "get_properties",
                    "get_data",
                    "get_properties",
                    "get_data",
                    "get_properties",
                    "get_data",
                    "query_obj",
                    "get_properties",
                    "query_obj",
                    "get_properties",
                    "get_data",
                    "query_obj",
                    "get_data",
                    "query_obj",
                    "get_data",
                    "get_data",
                    "query_obj",
                    "levels_for",
                    "levels_for_diff",
                    "levels_for_time",
                    "nest_values",
                    "nest_procs",
                    "get_data"
                  ],
                  "classes": [
                    "BaseViz",
                    "TimeTableViz",
                    "CalHeatmapViz",
                    "NVD3Viz",
                    "BubbleViz",
                    "BulletViz",
                    "NVD3TimeSeriesViz",
                    "NVD3TimePivotViz",
                    "NVD3CompareTimeSeriesViz",
                    "ChordViz",
                    "CountryMapViz",
                    "WorldMapViz",
                    "ParallelCoordinatesViz",
                    "HorizonViz",
                    "MapboxViz",
                    "DeckGLMultiLayer",
                    "BaseDeckGLViz",
                    "DeckScatterViz",
                    "DeckScreengrid",
                    "DeckGrid",
                    "DeckPathViz",
                    "DeckPolygon",
                    "DeckHex",
                    "DeckHeatmap",
                    "DeckContour",
                    "DeckGeoJson",
                    "DeckArc",
                    "EventFlowViz",
                    "PairedTTestViz",
                    "RoseViz",
                    "PartitionViz"
                  ],
                  "imports": [
                    "__future__",
                    "copy",
                    "dataclasses",
                    "logging",
                    "math",
                    "collections",
                    "datetime",
                    "itertools",
                    "typing",
                    "geohash",
                    "numpy",
                    "pandas",
                    "polyline",
                    "dateutil",
                    "deprecation",
                    "flask",
                    "flask_babel",
                    "geopy.point",
                    "pandas.tseries.frequencies",
                    "superset",
                    "superset.common.db_query_status",
                    "superset.errors",
                    "superset.exceptions",
                    "superset.extensions",
                    "superset.models.helpers",
                    "superset.sql_parse",
                    "superset.superset_typing",
                    "superset.utils",
                    "superset.utils.cache",
                    "superset.utils.core",
                    "superset.utils.date_parser",
                    "superset.utils.hashing",
                    "superset.connectors.sqla.models",
                    "superset.examples",
                    "superset",
                    "superset.models.slice"
                  ],
                  "size_lines": 2380,
                  "has_main": false,
                  "docstring": "This module contains the 'Viz' objects\n\nThese objects represent the backend of all the visualizations that\nSuperset can render."
                },
                "jinja_context.py": {
                  "functions": [
                    "context_addons",
                    "safe_proxy",
                    "validate_context_types",
                    "validate_template_context",
                    "to_datetime",
                    "get_template_processors",
                    "get_template_processor",
                    "dataset_macro",
                    "get_dataset_id_from_context",
                    "metric_macro",
                    "__init__",
                    "current_user_id",
                    "current_username",
                    "current_user_email",
                    "current_user_roles",
                    "cache_key_wrapper",
                    "url_param",
                    "filter_values",
                    "get_filters",
                    "get_time_filter",
                    "__init__",
                    "__call__",
                    "__init__",
                    "set_context",
                    "process_template",
                    "_parse_datetime",
                    "set_context",
                    "process_template",
                    "set_context",
                    "_schema_table",
                    "first_latest_partition",
                    "latest_partitions",
                    "latest_sub_partition",
                    "process_template",
                    "process_template",
                    "_format_dttm"
                  ],
                  "classes": [
                    "Filter",
                    "TimeFilter",
                    "ExtraCache",
                    "WhereInMacro",
                    "BaseTemplateProcessor",
                    "JinjaTemplateProcessor",
                    "NoOpTemplateProcessor",
                    "PrestoTemplateProcessor",
                    "HiveTemplateProcessor",
                    "SparkTemplateProcessor",
                    "TrinoTemplateProcessor"
                  ],
                  "imports": [
                    "__future__",
                    "re",
                    "dataclasses",
                    "datetime",
                    "functools",
                    "typing",
                    "dateutil",
                    "flask",
                    "flask_babel",
                    "jinja2",
                    "jinja2.sandbox",
                    "sqlalchemy.engine.interfaces",
                    "sqlalchemy.sql.expression",
                    "sqlalchemy.types",
                    "superset",
                    "superset.commands.dataset.exceptions",
                    "superset.common.utils.time_range_utils",
                    "superset.constants",
                    "superset.exceptions",
                    "superset.extensions",
                    "superset.sql_parse",
                    "superset.utils",
                    "superset.utils.core",
                    "superset.connectors.sqla.models",
                    "superset.models.core",
                    "superset.models.sql_lab",
                    "superset.daos.dataset",
                    "superset.daos.chart",
                    "superset.views.utils",
                    "superset.daos.dataset",
                    "superset.views.utils",
                    "superset.views.utils",
                    "superset.views.utils",
                    "superset.db_engine_specs.presto",
                    "superset.db_engine_specs.presto"
                  ],
                  "size_lines": 1000,
                  "has_main": false,
                  "docstring": "Defines the templating context for SQL Lab"
                },
                "connectors": {
                  "__init__.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 17,
                    "has_main": false,
                    "docstring": null
                  },
                  "sqla": {
                    "models.py": {
                      "functions": [
                        "name",
                        "kind",
                        "owners_data",
                        "is_virtual",
                        "slices",
                        "type",
                        "uid",
                        "column_names",
                        "columns_types",
                        "main_dttm_col",
                        "datasource_name",
                        "connection",
                        "catalog",
                        "schema",
                        "filterable_column_names",
                        "dttm_cols",
                        "url",
                        "explore_url",
                        "column_formats",
                        "currency_formats",
                        "add_missing_metrics",
                        "short_data",
                        "select_star",
                        "order_by_choices",
                        "verbose_map",
                        "data",
                        "data_for_slices",
                        "filter_values_handler",
                        "external_metadata",
                        "get_query_str",
                        "query",
                        "default_query",
                        "get_column",
                        "get_fk_many_from_list",
                        "update_from_object",
                        "get_extra_cache_keys",
                        "__hash__",
                        "__eq__",
                        "raise_for_access",
                        "get_datasource_by_name",
                        "get_template_processor",
                        "text",
                        "get_sqla_row_level_filters",
                        "query",
                        "get_query_str",
                        "values_for_column",
                        "__init__",
                        "init_on_load",
                        "__repr__",
                        "is_boolean",
                        "is_numeric",
                        "is_string",
                        "is_temporal",
                        "database",
                        "db_engine_spec",
                        "db_extra",
                        "type_generic",
                        "get_sqla_col",
                        "datasource",
                        "get_timestamp_expression",
                        "data",
                        "__repr__",
                        "get_sqla_col",
                        "perm",
                        "get_perm",
                        "currency_json",
                        "data",
                        "__repr__",
                        "db_extra",
                        "_apply_cte",
                        "db_engine_spec",
                        "changed_by_name",
                        "connection",
                        "description_markeddown",
                        "datasource_name",
                        "datasource_type",
                        "database_name",
                        "get_datasource_by_name",
                        "link",
                        "get_catalog_perm",
                        "get_schema_perm",
                        "get_perm",
                        "name",
                        "full_name",
                        "dttm_cols",
                        "num_cols",
                        "any_dttm_col",
                        "html",
                        "sql_url",
                        "external_metadata",
                        "time_column_grains",
                        "select_star",
                        "health_check_message",
                        "granularity_sqla",
                        "time_grain_sqla",
                        "data",
                        "extra_dict",
                        "get_fetch_values_predicate",
                        "get_template_processor",
                        "get_query_str",
                        "get_sqla_table",
                        "get_from_clause",
                        "adhoc_metric_to_sqla",
                        "adhoc_column_to_sqla",
                        "make_orderby_compatible",
                        "text",
                        "_get_series_orderby",
                        "_normalize_prequery_result_type",
                        "_get_top_groups",
                        "query",
                        "get_sqla_table_object",
                        "fetch_metadata",
                        "query_datasources_by_name",
                        "query_datasources_by_permissions",
                        "get_eager_sqlatable_datasource",
                        "get_all_datasources",
                        "default_query",
                        "has_extra_cache_key_calls",
                        "get_extra_cache_keys",
                        "quote_identifier",
                        "before_update",
                        "update_column",
                        "after_insert",
                        "after_delete",
                        "load_database",
                        "handle_single_value",
                        "is_alias_used_in_orderby",
                        "assign_column_label"
                      ],
                      "classes": [
                        "MetadataResult",
                        "DatasourceKind",
                        "BaseDatasource",
                        "AnnotationDatasource",
                        "TableColumn",
                        "SqlMetric",
                        "SqlaTable",
                        "RowLevelSecurityFilter"
                      ],
                      "imports": [
                        "__future__",
                        "builtins",
                        "dataclasses",
                        "logging",
                        "re",
                        "collections",
                        "collections.abc",
                        "dataclasses",
                        "datetime",
                        "typing",
                        "dateutil.parser",
                        "numpy",
                        "pandas",
                        "sqlalchemy",
                        "flask_appbuilder",
                        "flask_appbuilder.security.sqla.models",
                        "flask_babel",
                        "jinja2.exceptions",
                        "markupsafe",
                        "sqlalchemy",
                        "sqlalchemy.engine.base",
                        "sqlalchemy.ext.declarative",
                        "sqlalchemy.ext.hybrid",
                        "sqlalchemy.orm",
                        "sqlalchemy.orm.mapper",
                        "sqlalchemy.schema",
                        "sqlalchemy.sql",
                        "sqlalchemy.sql.elements",
                        "sqlalchemy.sql.expression",
                        "sqlalchemy.sql.selectable",
                        "superset",
                        "superset.commands.dataset.exceptions",
                        "superset.common.db_query_status",
                        "superset.connectors.sqla.utils",
                        "superset.constants",
                        "superset.db_engine_specs.base",
                        "superset.exceptions",
                        "superset.jinja_context",
                        "superset.models.annotations",
                        "superset.models.core",
                        "superset.models.helpers",
                        "superset.models.slice",
                        "superset.sql_parse",
                        "superset.superset_typing",
                        "superset.utils",
                        "superset.utils.backports"
                      ],
                      "size_lines": 2132,
                      "has_main": false,
                      "docstring": null
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 18,
                      "has_main": false,
                      "docstring": null
                    },
                    "utils.py": {
                      "functions": [
                        "get_physical_table_metadata",
                        "get_virtual_table_metadata",
                        "get_columns_description",
                        "get_dialect_name",
                        "get_identifier_quoter",
                        "find_cached_objects_in_session"
                      ],
                      "classes": [],
                      "imports": [
                        "__future__",
                        "logging",
                        "collections.abc",
                        "functools",
                        "typing",
                        "uuid",
                        "flask_babel",
                        "sqlalchemy.engine.url",
                        "sqlalchemy.exc",
                        "sqlalchemy.ext.declarative",
                        "sqlalchemy.orm.exc",
                        "sqlalchemy.sql.type_api",
                        "superset",
                        "superset.constants",
                        "superset.errors",
                        "superset.exceptions",
                        "superset.models.core",
                        "superset.result_set",
                        "superset.sql.parse",
                        "superset.sql_parse",
                        "superset.superset_typing",
                        "superset.connectors.sqla.models"
                      ],
                      "size_lines": 197,
                      "has_main": false,
                      "docstring": null
                    },
                    "views.py": {
                      "functions": [
                        "list",
                        "list"
                      ],
                      "classes": [
                        "RowLevelSecurityView",
                        "TableModelView"
                      ],
                      "imports": [
                        "flask_appbuilder",
                        "flask_appbuilder.security.decorators",
                        "superset.constants",
                        "superset.superset_typing",
                        "superset.views.base"
                      ],
                      "size_lines": 49,
                      "has_main": false,
                      "docstring": "Views used by the SqlAlchemy connector"
                    }
                  }
                },
                "datasource": {
                  "__init__.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 17,
                    "has_main": false,
                    "docstring": null
                  },
                  "api.py": {
                    "functions": [
                      "get_column_values"
                    ],
                    "classes": [
                      "DatasourceRestApi"
                    ],
                    "imports": [
                      "logging",
                      "flask_appbuilder.api",
                      "superset",
                      "superset.daos.datasource",
                      "superset.daos.exceptions",
                      "superset.exceptions",
                      "superset.superset_typing",
                      "superset.utils.core",
                      "superset.views.base_api"
                    ],
                    "size_lines": 138,
                    "has_main": false,
                    "docstring": null
                  }
                },
                "tables": {
                  "__init__.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 17,
                    "has_main": false,
                    "docstring": null
                  }
                },
                "distributed_lock": {
                  "__init__.py": {
                    "functions": [
                      "KeyValueDistributedLock"
                    ],
                    "classes": [],
                    "imports": [
                      "__future__",
                      "logging",
                      "uuid",
                      "collections.abc",
                      "contextlib",
                      "datetime",
                      "typing",
                      "superset.distributed_lock.utils",
                      "superset.exceptions",
                      "superset.key_value.types",
                      "superset.commands.distributed_lock.create",
                      "superset.commands.distributed_lock.delete",
                      "superset.commands.distributed_lock.get"
                    ],
                    "size_lines": 78,
                    "has_main": false,
                    "docstring": null
                  },
                  "types.py": {
                    "functions": [],
                    "classes": [
                      "LockValue"
                    ],
                    "imports": [
                      "typing"
                    ],
                    "size_lines": 22,
                    "has_main": false,
                    "docstring": null
                  },
                  "utils.py": {
                    "functions": [
                      "serialize",
                      "get_key",
                      "sort"
                    ],
                    "classes": [],
                    "imports": [
                      "uuid",
                      "typing",
                      "superset.utils"
                    ],
                    "size_lines": 46,
                    "has_main": false,
                    "docstring": null
                  }
                },
                "migrations": {
                  "env.py": {
                    "functions": [
                      "print_duration",
                      "run_migrations_offline",
                      "run_migrations_online",
                      "process_revision_directives"
                    ],
                    "classes": [],
                    "imports": [
                      "logging",
                      "time",
                      "logging.config",
                      "alembic",
                      "alembic.operations.ops",
                      "alembic.runtime.migration",
                      "flask",
                      "flask_appbuilder",
                      "sqlalchemy"
                    ],
                    "size_lines": 143,
                    "has_main": false,
                    "docstring": null
                  },
                  "__init__.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [
                      "os",
                      "sys"
                    ],
                    "size_lines": 24,
                    "has_main": false,
                    "docstring": null
                  },
                  "migration_utils.py": {
                    "functions": [
                      "create_unique_constraint",
                      "drop_unique_constraint"
                    ],
                    "classes": [],
                    "imports": [
                      "alembic.operations"
                    ],
                    "size_lines": 47,
                    "has_main": false,
                    "docstring": null
                  },
                  "versions": {
                    "2024-08-13_15-33_48cbb571fa3a_remove_sl_datasets.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic",
                        "superset.migrations.shared.utils"
                      ],
                      "size_lines": 74,
                      "has_main": false,
                      "docstring": "remove sl_datasets\n\nRevision ID: 48cbb571fa3a\nRevises: 007a1abffe7e\nCreate Date: 2024-08-13 15:33:14.551012"
                    },
                    "2020-08-12_00-24_978245563a02_migrate_iframe_to_dash_markdown.py": {
                      "functions": [
                        "create_new_markdown_component",
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "Slice",
                        "Dashboard"
                      ],
                      "imports": [
                        "logging",
                        "uuid",
                        "collections",
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "sqlalchemy.orm",
                        "superset",
                        "superset.utils"
                      ],
                      "size_lines": 202,
                      "has_main": false,
                      "docstring": "Migrate iframe in dashboard to markdown component\n\nRevision ID: 978245563a02\nRevises: f2672aa8350a\nCreate Date: 2020-08-12 00:24:39.617899"
                    },
                    "2019-03-21_10-22_d94d33dbe938_form_strip.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "BaseColumnMixin",
                        "BaseDatasourceMixin",
                        "BaseMetricMixin",
                        "Annotation",
                        "Dashboard",
                        "Database",
                        "DruidCluster",
                        "DruidColumn",
                        "DruidDatasource",
                        "DruidMetric",
                        "Slice",
                        "SqlaTable",
                        "SqlMetric",
                        "TableColumn"
                      ],
                      "imports": [
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "superset",
                        "superset.utils.core"
                      ],
                      "size_lines": 194,
                      "has_main": false,
                      "docstring": "form strip\n\nRevision ID: d94d33dbe938\nRevises: 80aa3f04bc82\nCreate Date: 2019-03-21 10:22:01.610217"
                    },
                    "2020-09-01_16-23_ae19b4ee3692_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [],
                      "size_lines": 36,
                      "has_main": false,
                      "docstring": "empty message\n\nRevision ID: ae19b4ee3692\nRevises: ('175ea3592453', '2e5a0ee25ed4')\nCreate Date: 2020-09-01 16:23:12.203310"
                    },
                    "2018-07-16_18-04_1d9e835a84f9_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic",
                        "sqlalchemy.sql"
                      ],
                      "size_lines": 48,
                      "has_main": false,
                      "docstring": "empty message\n\nRevision ID: 1d9e835a84f9\nRevises: 3dda56f1c4c6\nCreate Date: 2018-07-16 18:04:07.764659"
                    },
                    "2019-06-05_11-35_b4a38aa87893_deprecate_database_expression.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 41,
                      "has_main": false,
                      "docstring": "deprecate database expression\n\nRevision ID: b4a38aa87893\nRevises: ab8c66efdd01\nCreate Date: 2019-06-05 11:35:16.222519"
                    },
                    "2018-11-05_08-42_0b1f1ab473c0_add_extra_column_to_query.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 41,
                      "has_main": false,
                      "docstring": "Add extra column to Query\n\nRevision ID: 0b1f1ab473c0\nRevises: 55e910a74826\nCreate Date: 2018-11-05 08:42:56.181012"
                    },
                    "2017-09-15_15-09_19a814813610_adding_metric_warning_text.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 43,
                      "has_main": false,
                      "docstring": "Adding metric warning_text\n\nRevision ID: 19a814813610\nRevises: ca69c70ec99b\nCreate Date: 2017-09-15 15:09:40.495345"
                    },
                    "2016-01-13_20-24_8e80a26a31db_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 50,
                      "has_main": false,
                      "docstring": "empty message\n\nRevision ID: 8e80a26a31db\nRevises: 2591d77e9831\nCreate Date: 2016-01-13 20:24:45.256437"
                    },
                    "2021-12-02_12-03_abe27eaf93db_add_extra_config_column_to_alerts.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.sql"
                      ],
                      "size_lines": 56,
                      "has_main": false,
                      "docstring": "add_extra_config_column_to_alerts\n\nRevision ID: abe27eaf93db\nRevises: 0ca9e5f1dacd\nCreate Date: 2021-12-02 12:03:20.691171"
                    },
                    "2018-11-12_13-31_4ce8df208545_migrate_time_range_for_default_filters.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "Dashboard"
                      ],
                      "imports": [
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "superset",
                        "superset.utils"
                      ],
                      "size_lines": 116,
                      "has_main": false,
                      "docstring": "empty message\n\nRevision ID: 4ce8df208545\nRevises: 55e910a74826\nCreate Date: 2018-11-12 13:31:07.578090"
                    },
                    "2016-03-22_23-25_d2424a248d63_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [],
                      "size_lines": 36,
                      "has_main": false,
                      "docstring": "empty message\n\nRevision ID: d2424a248d63\nRevises: ('a2d606a761d9', '836c0bf75904')\nCreate Date: 2016-03-22 23:25:02.903273"
                    },
                    "2016-03-13_21-30_18e88e1cc004_making_audit_nullable.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 106,
                      "has_main": false,
                      "docstring": "making audit nullable\n\nRevision ID: 18e88e1cc004\nRevises: 430039611635\nCreate Date: 2016-03-13 21:30:24.833107"
                    },
                    "2023-06-01_13-13_83e1abbe777f_drop_access_request.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 51,
                      "has_main": false,
                      "docstring": "drop access_request\n\nRevision ID: 83e1abbe777f\nRevises: ae58e1e58e5c\nCreate Date: 2023-06-01 13:13:18.147362"
                    },
                    "2024-04-17_14-04_d60591c5515f_mig_new_excel_upload_perm.py": {
                      "functions": [
                        "do_upgrade",
                        "do_downgrade",
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "alembic",
                        "sqlalchemy.exc",
                        "sqlalchemy.orm",
                        "superset.migrations.shared.security_converge"
                      ],
                      "size_lines": 88,
                      "has_main": false,
                      "docstring": "mig new excel upload perm\n\nRevision ID: d60591c5515f\nRevises: 5ad7321c2169\nCreate Date: 2024-04-17 14:04:36.041749"
                    },
                    "2020-12-03_10-11_5daced1f0e76_reports_add_working_timeout_column.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 42,
                      "has_main": false,
                      "docstring": "reports add working_timeout column\n\nRevision ID: 5daced1f0e76\nRevises: e38177dbf641\nCreate Date: 2020-12-03 10:11:22.894977"
                    },
                    "2023-07-12_20-34_e0f6f91c2055_create_user_favorite_table.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 53,
                      "has_main": false,
                      "docstring": "create_user_favorite_table\n\nRevision ID: e0f6f91c2055\nRevises: bf646a0c1501\nCreate Date: 2023-07-12 20:34:57.553981"
                    },
                    "2016-11-14_15-23_e46f2d27a08e_materialize_perms.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 45,
                      "has_main": false,
                      "docstring": "materialize perms\n\nRevision ID: e46f2d27a08e\nRevises: c611f2b591b8\nCreate Date: 2016-11-14 15:23:32.594898"
                    },
                    "2016-09-07_23-50_33d996bcc382_update_slice_model.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "Slice"
                      ],
                      "imports": [
                        "sqlalchemy",
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "superset"
                      ],
                      "size_lines": 75,
                      "has_main": false,
                      "docstring": "update slice model\n\nRevision ID: 33d996bcc382\nRevises: 41f6a59a61f2\nCreate Date: 2016-09-07 23:50:59.366779"
                    },
                    "2022-01-19_07-34_5fd49410a97a_add_columns_for_external_management.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 106,
                      "has_main": false,
                      "docstring": "Add columns for external management\n\nRevision ID: 5fd49410a97a\nRevises: c53bae8f08dd\nCreate Date: 2022-01-19 07:34:20.594786"
                    },
                    "2019-07-15_12-00_190188938582_adding_unique_constraint_on_dashboard_slices_tbl.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "DashboardSlices"
                      ],
                      "imports": [
                        "logging",
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "superset"
                      ],
                      "size_lines": 102,
                      "has_main": false,
                      "docstring": "Remove duplicated entries in dashboard_slices table and add unique constraint\n\nRevision ID: 190188938582\nRevises: d6ffdf31bdd4\nCreate Date: 2019-07-15 12:00:32.267507"
                    },
                    "2021-02-14_11-46_1412ec1e5a7b_legacy_force_directed_to_echart.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "Slice"
                      ],
                      "imports": [
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "superset",
                        "superset.utils"
                      ],
                      "size_lines": 103,
                      "has_main": false,
                      "docstring": "legacy force directed to echart\n\nRevision ID: 1412ec1e5a7b\nRevises: c501b7c653a3\nCreate Date: 2021-02-14 11:46:02.379832"
                    },
                    "2022-08-31_19-30_291f024254b5_drop_column_allow_multi_schema_metadata_fetch.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 49,
                      "has_main": false,
                      "docstring": "drop_column_allow_multi_schema_metadata_fetch\n\n\nRevision ID: 291f024254b5\nRevises: 6d3c6f9d665d\nCreate Date: 2022-08-31 19:30:33.665025"
                    },
                    "2023-07-18_15-30_863adcf72773_delete_obsolete_druid_nosql_slice_parameters.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "Slice"
                      ],
                      "imports": [
                        "logging",
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "superset",
                        "superset.utils"
                      ],
                      "size_lines": 104,
                      "has_main": false,
                      "docstring": "delete obsolete Druid NoSQL slice parameters\n\nRevision ID: 863adcf72773\nRevises: 6d05b0a70c89\nCreate Date: 2023-07-18 15:30:43.695135"
                    },
                    "2018-07-05_15-19_3dda56f1c4c6_migrate_num_period_compare_and_period_.py": {
                      "functions": [
                        "isodate_duration_to_string",
                        "timedelta_to_string",
                        "format_seconds",
                        "compute_time_compare",
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "Slice"
                      ],
                      "imports": [
                        "datetime",
                        "isodate",
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "superset",
                        "superset.utils",
                        "superset.utils.date_parser"
                      ],
                      "size_lines": 178,
                      "has_main": false,
                      "docstring": "Migrate num_period_compare and period_ratio_type\n\nRevision ID: 3dda56f1c4c6\nRevises: bddc498dd179\nCreate Date: 2018-07-05 15:19:14.609299"
                    },
                    "2016-09-12_23-33_4500485bde7d_allow_run_sync_async.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 44,
                      "has_main": false,
                      "docstring": "allow_run_sync_async\n\nRevision ID: 4500485bde7d\nRevises: 41f6a59a61f2\nCreate Date: 2016-09-12 23:33:14.789632"
                    },
                    "2022-06-27_14-59_7fb8bca906d2_permalink_rename_filterstate.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "KeyValueEntry"
                      ],
                      "imports": [
                        "pickle",
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "sqlalchemy.orm",
                        "superset",
                        "superset.migrations.shared.utils"
                      ],
                      "size_lines": 89,
                      "has_main": false,
                      "docstring": "permalink_rename_filterState\n\nRevision ID: 7fb8bca906d2\nRevises: f3afaf1f11f0\nCreate Date: 2022-06-27 14:59:20.740380"
                    },
                    "2021-04-07_07-21_134cea61c5e7_remove_dataset_health_check_message.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "SqlaTable"
                      ],
                      "imports": [
                        "logging",
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "superset",
                        "superset.utils"
                      ],
                      "size_lines": 69,
                      "has_main": false,
                      "docstring": "remove dataset health check message\n\nRevision ID: 134cea61c5e7\nRevises: 301362411006\nCreate Date: 2021-04-07 07:21:27.324983"
                    },
                    "2019-12-03_10-24_817e1c9b09d0_add_not_null_to_dbs_sqlalchemy_url.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 45,
                      "has_main": false,
                      "docstring": "add_not_null_to_dbs_sqlalchemy_url\n\nRevision ID: 817e1c9b09d0\nRevises: db4b49eb0782\nCreate Date: 2019-12-03 10:24:16.201580"
                    },
                    "2018-04-03_08-19_130915240929_is_sqllab_viz_flow.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "Table"
                      ],
                      "imports": [
                        "sqlalchemy",
                        "alembic",
                        "sqlalchemy.ext.declarative",
                        "superset"
                      ],
                      "size_lines": 73,
                      "has_main": false,
                      "docstring": "is_sqllab_view\n\nRevision ID: 130915240929\nRevises: f231d82b9b26\nCreate Date: 2018-04-03 08:19:34.098789"
                    },
                    "2020-12-14_10-49_42b4c9e01447_security_converge_databases.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "alembic",
                        "sqlalchemy.exc",
                        "sqlalchemy.orm",
                        "superset.migrations.shared.security_converge"
                      ],
                      "size_lines": 108,
                      "has_main": false,
                      "docstring": "security converge databases\n\nRevision ID: 42b4c9e01447\nRevises: 5daced1f0e76\nCreate Date: 2020-12-14 10:49:36.110805"
                    },
                    "2020-09-28_17-57_b56500de1855_add_uuid_column_to_import_mixin.py": {
                      "functions": [
                        "update_position_json",
                        "update_dashboards",
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "ImportMixin"
                      ],
                      "imports": [
                        "os",
                        "uuid",
                        "sqlalchemy",
                        "alembic",
                        "sqlalchemy.ext.declarative",
                        "sqlalchemy.orm",
                        "sqlalchemy_utils",
                        "superset",
                        "superset.migrations.shared.utils",
                        "superset.utils"
                      ],
                      "size_lines": 165,
                      "has_main": false,
                      "docstring": "add_uuid_column_to_import_mixin\n\nRevision ID: b56500de1855\nRevises: 18532d70ab98\nCreate Date: 2020-09-28 17:57:23.128142"
                    },
                    "2019-06-28_13-17_ab8c66efdd01_resample.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "Slice"
                      ],
                      "imports": [
                        "logging",
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "superset",
                        "superset.utils"
                      ],
                      "size_lines": 118,
                      "has_main": false,
                      "docstring": "resample\n\nRevision ID: ab8c66efdd01\nRevises: d7c1a0d6f2da\nCreate Date: 2019-06-28 13:17:59.517089"
                    },
                    "2024-08-13_15-29_a6b32d2d07b1_remove_sl_columns.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic",
                        "superset.migrations.shared.utils"
                      ],
                      "size_lines": 82,
                      "has_main": false,
                      "docstring": "remove sl_columns\n\nRevision ID: a6b32d2d07b1\nRevises: e53fd48cc078\nCreate Date: 2024-08-13 15:29:33.135672"
                    },
                    "2018-06-14_14-31_80a67c5192fa_single_pie_chart_metric.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "Slice"
                      ],
                      "imports": [
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "superset",
                        "superset.utils"
                      ],
                      "size_lines": 88,
                      "has_main": false,
                      "docstring": "single pie chart metric\n\nRevision ID: 80a67c5192fa\nRevises: afb7730f6a9c\nCreate Date: 2018-06-14 14:31:06.624370"
                    },
                    "2020-12-14_13-40_4b84f97828aa_security_converge_logs.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "alembic",
                        "sqlalchemy.exc",
                        "sqlalchemy.orm",
                        "superset.migrations.shared.security_converge"
                      ],
                      "size_lines": 83,
                      "has_main": false,
                      "docstring": "security converge logs\n\nRevision ID: 4b84f97828aa\nRevises: 45731db65d9c\nCreate Date: 2020-12-14 13:40:46.492449"
                    },
                    "2020-11-30_17-54_8ee129739cf9_security_converge_css_templates.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "alembic",
                        "sqlalchemy.exc",
                        "sqlalchemy.orm",
                        "superset.migrations.shared.security_converge"
                      ],
                      "size_lines": 105,
                      "has_main": false,
                      "docstring": "security converge css templates\n\nRevision ID: 8ee129739cf9\nRevises: e38177dbf641\nCreate Date: 2020-11-30 17:54:09.118630"
                    },
                    "2016-04-15_08-31_b4456560d4f3_change_table_unique_constraint.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "alembic"
                      ],
                      "size_lines": 49,
                      "has_main": false,
                      "docstring": "change_table_unique_constraint\n\nRevision ID: b4456560d4f3\nRevises: bb51420eaf83\nCreate Date: 2016-04-15 08:31:26.249591"
                    },
                    "2018-12-11_22-03_fb13d49b72f9_better_filters.py": {
                      "functions": [
                        "upgrade_slice",
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "Slice"
                      ],
                      "imports": [
                        "logging",
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "superset",
                        "superset.utils"
                      ],
                      "size_lines": 109,
                      "has_main": false,
                      "docstring": "better_filters\n\nRevision ID: fb13d49b72f9\nRevises: 6c7537a6004a\nCreate Date: 2018-12-11 22:03:21.612516"
                    },
                    "2023-03-17_13-24_b5ea9d343307_bar_chart_stack_options.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "Slice"
                      ],
                      "imports": [
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "superset",
                        "superset.utils"
                      ],
                      "size_lines": 94,
                      "has_main": false,
                      "docstring": "bar_chart_stack_options\n\nRevision ID: b5ea9d343307\nRevises: d0ac08bb5b83\nCreate Date: 2023-03-17 13:24:54.662754"
                    },
                    "2020-09-25_10-56_18532d70ab98_fix_table_unique_constraint_in_mysql.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "alembic",
                        "sqlalchemy.dialects.mysql.base",
                        "sqlalchemy.engine.reflection",
                        "superset.utils.core"
                      ],
                      "size_lines": 51,
                      "has_main": false,
                      "docstring": "Delete table_name unique constraint in mysql\n\nRevision ID: 18532d70ab98\nRevises: 3fbbc6e8d654\nCreate Date: 2020-09-25 10:56:13.711182"
                    },
                    "2016-01-18_23-43_43df8de3a5f4_dash_json.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 39,
                      "has_main": false,
                      "docstring": "empty message\n\nRevision ID: 43df8de3a5f4\nRevises: 7dbf98566af7\nCreate Date: 2016-01-18 23:43:16.073483"
                    },
                    "2017-02-08_14-16_a99f2f7c195a_rewriting_url_from_shortner_with_new_.py": {
                      "functions": [
                        "parse_querystring",
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "Url"
                      ],
                      "imports": [
                        "urllib",
                        "sqlalchemy",
                        "alembic",
                        "sqlalchemy.ext.declarative",
                        "superset",
                        "superset.utils"
                      ],
                      "size_lines": 89,
                      "has_main": false,
                      "docstring": "rewriting url from shortener with new format\n\nRevision ID: a99f2f7c195a\nRevises: 53fc3de270ae\nCreate Date: 2017-02-08 14:16:34.948793"
                    },
                    "2022-07-11_11-26_ffa79af61a56_rename_report_schedule_extra_to_extra_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "alembic",
                        "sqlalchemy.types"
                      ],
                      "size_lines": 54,
                      "has_main": false,
                      "docstring": "rename report_schedule.extra to extra_json\n\nSo we can reuse the ExtraJSONMixin\n\nRevision ID: ffa79af61a56\nRevises: 409c7b420ab0\nCreate Date: 2022-07-11 11:26:00.010714"
                    },
                    "2016-02-03_17-41_d827694c7555_css_templates.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 51,
                      "has_main": false,
                      "docstring": "css templates\n\nRevision ID: d827694c7555\nRevises: 43df8de3a5f4\nCreate Date: 2016-02-03 17:41:10.944019"
                    },
                    "2021-08-09_17-32_07071313dd52_change_fetch_values_predicate_to_text.py": {
                      "functions": [
                        "upgrade",
                        "remove_value_if_too_long",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "logging",
                        "sqlalchemy",
                        "alembic",
                        "sqlalchemy",
                        "superset",
                        "superset.connectors.sqla.models"
                      ],
                      "size_lines": 83,
                      "has_main": false,
                      "docstring": "change_fetch_values_predicate_to_text\n\nRevision ID: 07071313dd52\nRevises: 6d20ba9ecb33\nCreate Date: 2021-08-09 17:32:56.204184"
                    },
                    "2018-07-22_08-49_c829ff0b37d0_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [],
                      "size_lines": 36,
                      "has_main": false,
                      "docstring": "empty message\n\nRevision ID: c829ff0b37d0\nRevises: ('4451805bbaa1', '1d9e835a84f9')\nCreate Date: 2018-07-22 08:49:48.936117"
                    },
                    "2015-09-21_17-30_4e6a06bad7a8_init.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 268,
                      "has_main": false,
                      "docstring": "Init\n\nRevision ID: 4e6a06bad7a8\nRevises: None\nCreate Date: 2015-09-21 17:30:38.442998"
                    },
                    "2016-06-16_14-15_960c69cb1f5b_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 47,
                      "has_main": false,
                      "docstring": "add dttm_format related fields in table_columns\n\nRevision ID: 960c69cb1f5b\nRevises: d8bc074f7aad\nCreate Date: 2016-06-16 14:15:19.573183"
                    },
                    "2019-06-04_10-12_d7c1a0d6f2da_remove_limit_used_from_query_model.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 40,
                      "has_main": false,
                      "docstring": "Remove limit used from query model\n\nRevision ID: d7c1a0d6f2da\nRevises: afc69274c25a\nCreate Date: 2019-06-04 10:12:36.675369"
                    },
                    "2019-10-02_00-29_b6fa807eac07_make_names_non_nullable.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic",
                        "superset.utils.core"
                      ],
                      "size_lines": 125,
                      "has_main": false,
                      "docstring": "make_names_non_nullable\n\nRevision ID: b6fa807eac07\nRevises: 1495eb914ad3\nCreate Date: 2019-10-02 00:29:16.679272"
                    },
                    "2021-10-12_11-15_32646df09c64_update_time_grain_sqla.py": {
                      "functions": [
                        "migrate",
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "Slice"
                      ],
                      "imports": [
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "superset",
                        "superset.utils"
                      ],
                      "size_lines": 71,
                      "has_main": false,
                      "docstring": "update time grain SQLA\n\nRevision ID: 32646df09c64\nRevises: 60dc453f4e2e\nCreate Date: 2021-10-12 11:15:25.559532"
                    },
                    "2018-07-19_23-41_c617da68de7d_form_nullable.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "BaseColumnMixin",
                        "BaseDatasourceMixin",
                        "BaseMetricMixin",
                        "Annotation",
                        "Dashboard",
                        "Database",
                        "DruidCluster",
                        "DruidColumn",
                        "DruidDatasource",
                        "DruidMetric",
                        "Slice",
                        "SqlaTable",
                        "SqlMetric",
                        "TableColumn"
                      ],
                      "imports": [
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "superset",
                        "superset.utils.core"
                      ],
                      "size_lines": 192,
                      "has_main": false,
                      "docstring": "form nullable\n\nRevision ID: c617da68de7d\nRevises: 18dc26817ad2\nCreate Date: 2018-07-19 23:41:32.631556"
                    },
                    "2019-11-13_11-05_db4b49eb0782_add_tables_for_sql_lab_state.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 94,
                      "has_main": false,
                      "docstring": "Add tables for SQL Lab state\n\nRevision ID: db4b49eb0782\nRevises: 78ee127d0d1d\nCreate Date: 2019-11-13 11:05:30.122167"
                    },
                    "2022-07-19_15-16_a39867932713_query_context_to_mediumtext.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "alembic",
                        "sqlalchemy.dialects.mysql.base"
                      ],
                      "size_lines": 45,
                      "has_main": false,
                      "docstring": "query_context_to_mediumtext\n\nRevision ID: a39867932713\nRevises: 06e1e70058c7\nCreate Date: 2022-07-19 15:16:06.091961"
                    },
                    "2020-02-07_14-13_3325d4caccc8_dashboard_scoped_filters.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "Slice",
                        "Dashboard"
                      ],
                      "imports": [
                        "logging",
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "sqlalchemy.orm",
                        "superset",
                        "superset.utils",
                        "superset.utils.dashboard_filter_scopes_converter"
                      ],
                      "size_lines": 111,
                      "has_main": false,
                      "docstring": "empty message\n\nRevision ID: 3325d4caccc8\nRevises: e96dbf2cfef0\nCreate Date: 2020-02-07 14:13:51.714678"
                    },
                    "2023-07-11_15-51_6d05b0a70c89_add_on_delete_cascade_for_owners_references.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "superset.migrations.shared.constraints"
                      ],
                      "size_lines": 79,
                      "has_main": false,
                      "docstring": "add on delete cascade for owners references\n\nRevision ID: 6d05b0a70c89\nRevises: f92a3124dd66\nCreate Date: 2023-07-11 15:51:57.964635"
                    },
                    "2016-09-22_11-31_eca4694defa7_sqllab_setting_defaults.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "Database"
                      ],
                      "imports": [
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "superset"
                      ],
                      "size_lines": 59,
                      "has_main": false,
                      "docstring": "sqllab_setting_defaults\n\nRevision ID: eca4694defa7\nRevises: 5e4a03ef0bf0\nCreate Date: 2016-09-22 11:31:50.543820"
                    },
                    "2021-03-24_09-47_989bbe479899_rename_filter_configuration_in_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "Dashboard"
                      ],
                      "imports": [
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "superset",
                        "superset.utils"
                      ],
                      "size_lines": 103,
                      "has_main": false,
                      "docstring": "rename_filter_configuration_in_dashboard_metadata.py\n\nRevision ID: 989bbe479899\nRevises: 67da9ef1ef9c\nCreate Date: 2021-03-24 09:47:21.569508"
                    },
                    "2017-03-29_15-04_2fcdcb35e487_saved_queries.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 57,
                      "has_main": false,
                      "docstring": "saved_queries\n\nRevision ID: 2fcdcb35e487\nRevises: a6c18f869a4e\nCreate Date: 2017-03-29 15:04:35.734190"
                    },
                    "2022-03-16_21-07_8b841273bec3_sql_lab_models_database_constraint_updates.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic",
                        "superset.utils.core"
                      ],
                      "size_lines": 139,
                      "has_main": false,
                      "docstring": "sql_lab_models_database_constraint_updates\n\nRevision ID: 8b841273bec3\nRevises: 2ed890b36b94\nCreate Date: 2022-03-16 21:07:48.768425"
                    },
                    "2025-03-03_20-52_94e7a3499973_add_folders_column_to_dataset.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "sqlalchemy.types",
                        "superset.migrations.shared.utils"
                      ],
                      "size_lines": 44,
                      "has_main": false,
                      "docstring": "Add folders column to datasets\n\nRevision ID: 94e7a3499973\nRevises: 74ad1125881c\nCreate Date: 2025-03-03 20:52:24.585143"
                    },
                    "2018-07-26_11-10_c82ee8a39623_add_implicit_tags.py": {
                      "functions": [
                        "upgrade",
                        "downgrade",
                        "created_by_fk",
                        "changed_by_fk"
                      ],
                      "classes": [
                        "AuditMixinNullable",
                        "Tag",
                        "TaggedObject",
                        "User"
                      ],
                      "imports": [
                        "datetime",
                        "alembic",
                        "flask_appbuilder.models.mixins",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "superset.tags.models",
                        "superset.utils.core"
                      ],
                      "size_lines": 108,
                      "has_main": false,
                      "docstring": "Add implicit tags\n\nRevision ID: c82ee8a39623\nRevises: c18bd4186f15\nCreate Date: 2018-07-26 11:10:23.653524"
                    },
                    "2019-09-19_13-40_258b5280a45e_form_strip_leading_and_trailing_whitespace.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "BaseColumnMixin",
                        "BaseDatasourceMixin",
                        "BaseMetricMixin",
                        "Annotation",
                        "Dashboard",
                        "Database",
                        "DruidCluster",
                        "DruidColumn",
                        "DruidDatasource",
                        "DruidMetric",
                        "Slice",
                        "SqlaTable",
                        "SqlMetric",
                        "TableColumn"
                      ],
                      "imports": [
                        "re",
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "superset",
                        "superset.utils.core"
                      ],
                      "size_lines": 196,
                      "has_main": false,
                      "docstring": "form strip leading and trailing whitespace\n\nRevision ID: 258b5280a45e\nRevises: 11c737c17cc6\nCreate Date: 2019-09-19 13:40:25.293907"
                    },
                    "2020-06-21_19-50_a72cb0ebeb22_deprecate_dbs_perm_column.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 40,
                      "has_main": false,
                      "docstring": "deprecate dbs.perm column\n\nRevision ID: a72cb0ebeb22\nRevises: ea396d202291\nCreate Date: 2020-06-21 19:50:51.630917"
                    },
                    "2021-02-18_09-13_c501b7c653a3_add_missing_uuid_column.py": {
                      "functions": [
                        "has_uuid_column",
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "logging",
                        "importlib",
                        "uuid",
                        "sqlalchemy",
                        "alembic",
                        "sqlalchemy.engine.reflection",
                        "sqlalchemy.orm",
                        "sqlalchemy_utils",
                        "superset"
                      ],
                      "size_lines": 103,
                      "has_main": false,
                      "docstring": "add missing uuid column\n\nRevision ID: c501b7c653a3\nRevises: 070c043f2fdb\nCreate Date: 2021-02-18 09:13:00.028317"
                    },
                    "2016-09-19_17-22_b347b202819b_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [],
                      "size_lines": 36,
                      "has_main": false,
                      "docstring": "empty message\n\nRevision ID: b347b202819b\nRevises: ('33d996bcc382', '65903709c321')\nCreate Date: 2016-09-19 17:22:40.138601"
                    },
                    "2024-03-01_10-47_be1b217cd8cd_big_number_kpi_single_metric.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "Slice"
                      ],
                      "imports": [
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "superset",
                        "superset.migrations.shared.utils",
                        "superset.utils"
                      ],
                      "size_lines": 93,
                      "has_main": false,
                      "docstring": "big_number_kpi_single_metric\n\nRevision ID: be1b217cd8cd\nRevises: 17fcea065655\nCreate Date: 2024-03-01 10:47:42.373508"
                    },
                    "2016-03-24_14-13_763d4b211ec9_fixing_audit_fk.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 179,
                      "has_main": false,
                      "docstring": "fixing audit fk\n\nRevision ID: 763d4b211ec9\nRevises: d2424a248d63\nCreate Date: 2016-03-24 14:13:44.817723"
                    },
                    "2023-07-19_16-48_a23c6f8b1280_cleanup_erroneous_parent_filter_ids.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "Dashboard"
                      ],
                      "imports": [
                        "logging",
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "superset",
                        "superset.utils"
                      ],
                      "size_lines": 82,
                      "has_main": false,
                      "docstring": "cleanup erroneous parent filter IDs\n\nRevision ID: a23c6f8b1280\nRevises: 863adcf72773\nCreate Date: 2023-07-19 16:48:05.571149"
                    },
                    "2019-01-18_14-56_18dc26817ad2_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [],
                      "size_lines": 36,
                      "has_main": false,
                      "docstring": "empty message\n\nRevision ID: 18dc26817ad2\nRevises: ('8b70aa3d0f87', 'a33a03f16c4a')\nCreate Date: 2019-01-18 14:56:26.307684"
                    },
                    "2024-01-17_13-09_96164e3017c6_tagged_object_unique_constraint.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "ObjectType"
                      ],
                      "imports": [
                        "enum",
                        "migration_utils",
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.sql"
                      ],
                      "size_lines": 89,
                      "has_main": false,
                      "docstring": null
                    },
                    "2021-08-04_17-16_f6196627326f_update_chart_permissions.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "alembic",
                        "sqlalchemy.exc",
                        "sqlalchemy.orm",
                        "superset.migrations.shared.security_converge"
                      ],
                      "size_lines": 74,
                      "has_main": false,
                      "docstring": "update chart permissions\n\nRevision ID: f6196627326f\nRevises: 143b6f2815da\nCreate Date: 2021-08-04 17:16:47.714866"
                    },
                    "2017-12-17_11-06_21e88bc06c02_annotation_migration.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "Slice"
                      ],
                      "imports": [
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "superset",
                        "superset.utils"
                      ],
                      "size_lines": 90,
                      "has_main": false,
                      "docstring": "migrate_old_annotation_layers\n\nRevision ID: 21e88bc06c02\nRevises: 67a6ac9b727b\nCreate Date: 2017-12-17 11:06:30.180267"
                    },
                    "2019-09-11_21-49_5afa9079866a_serialize_schema_permissions_py.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "Sqlatable",
                        "Slice",
                        "Database"
                      ],
                      "imports": [
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "sqlalchemy.orm",
                        "superset"
                      ],
                      "size_lines": 99,
                      "has_main": false,
                      "docstring": "serialize_schema_permissions.py\n\nRevision ID: 5afa9079866a\nRevises: db4b49eb0782\nCreate Date: 2019-09-11 21:49:00.608346"
                    },
                    "2023-03-05_10-06_d0ac08bb5b83_invert_horizontal_bar_chart_order.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "Slice"
                      ],
                      "imports": [
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "superset",
                        "superset.utils"
                      ],
                      "size_lines": 125,
                      "has_main": false,
                      "docstring": "invert_horizontal_bar_chart_order\n\nRevision ID: d0ac08bb5b83\nRevises: c0a3ea245b61\nCreate Date: 2023-03-05 10:06:23.250310"
                    },
                    "2023-08-09_15-39_4448fa6deeb1__dd_on_delete_cascade_for_embedded_dashboards.py.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "superset.migrations.shared.constraints"
                      ],
                      "size_lines": 49,
                      "has_main": false,
                      "docstring": "add on delete cascade for embedded_dashboards\n\nRevision ID: 4448fa6deeb1\nRevises: 8ace289026f3\nCreate Date: 2023-08-09 15:39:58.130228"
                    },
                    "2025-01-08_09-34_d482d51c15ca_remove_legacy_plugins_5_0.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "alembic",
                        "superset",
                        "superset.migrations.shared.migrate_viz.processors"
                      ],
                      "size_lines": 79,
                      "has_main": false,
                      "docstring": "remove_legacy_plugins_5_0\n\nRevision ID: d482d51c15ca\nRevises: eb1c288c71c4\nCreate Date: 2025-01-08 09:34:57.533332"
                    },
                    "2017-03-28_11-28_a6c18f869a4e_query_start_running_time.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 44,
                      "has_main": false,
                      "docstring": "query.start_running_time\n\nRevision ID: a6c18f869a4e\nRevises: 979c03af3341\nCreate Date: 2017-03-28 11:28:41.387182"
                    },
                    "2022-03-16_23-24_58df9d617f14_add_on_saved_query_delete_tab_state_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic",
                        "superset.utils.core"
                      ],
                      "size_lines": 70,
                      "has_main": false,
                      "docstring": "add_on_saved_query_delete_tab_state_null_constraint\"\n\nRevision ID: 58df9d617f14\nRevises: 6766938c6065\nCreate Date: 2022-03-16 23:24:40.278937"
                    },
                    "2022-07-07_14-00_06e1e70058c7_migrating_legacy_area.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "alembic",
                        "superset",
                        "superset.migrations.shared.migrate_viz"
                      ],
                      "size_lines": 45,
                      "has_main": false,
                      "docstring": "Migrating legacy Area\n\nRevision ID: 06e1e70058c7\nRevises: c747c78868b6\nCreate Date: 2022-06-13 14:17:51.872706"
                    },
                    "2019-09-08_21-50_11c737c17cc6_deprecate_restricted_metrics.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 45,
                      "has_main": false,
                      "docstring": "deprecate_restricted_metrics\n\nRevision ID: 11c737c17cc6\nRevises: def97f26fdfb\nCreate Date: 2019-09-08 21:50:58.200229"
                    },
                    "2016-06-27_08-43_27ae655e4247_make_creator_owners.py": {
                      "functions": [
                        "upgrade",
                        "downgrade",
                        "created_by_fk",
                        "created_by"
                      ],
                      "classes": [
                        "User",
                        "AuditMixin",
                        "Slice",
                        "Dashboard"
                      ],
                      "imports": [
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "sqlalchemy.orm",
                        "superset",
                        "superset.utils.core"
                      ],
                      "size_lines": 111,
                      "has_main": false,
                      "docstring": "Make creator owners\n\nRevision ID: 27ae655e4247\nRevises: d8bc074f7aad\nCreate Date: 2016-06-27 08:43:52.592242"
                    },
                    "2023-06-28_19-49_bf646a0c1501_json_metadata.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic",
                        "superset.utils.core"
                      ],
                      "size_lines": 53,
                      "has_main": false,
                      "docstring": "json_metadata\n\nRevision ID: bf646a0c1501\nRevises: a23c6f8b1280\nCreate Date: 2023-06-28 19:49:59.217255"
                    },
                    "2020-10-05_18-10_af30ca79208f_collapse_alerting_models_into_a_single_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade",
                        "alert_id",
                        "alert",
                        "alert_id",
                        "alert"
                      ],
                      "classes": [
                        "Alert",
                        "SQLObserver",
                        "Validator"
                      ],
                      "imports": [
                        "sqlalchemy",
                        "alembic",
                        "sqlalchemy.dialects.sqlite.base",
                        "sqlalchemy.ext.declarative",
                        "sqlalchemy.orm",
                        "superset",
                        "superset.utils.core"
                      ],
                      "size_lines": 315,
                      "has_main": false,
                      "docstring": "Collapse alerting models into a single one\n\nRevision ID: af30ca79208f\nRevises: b56500de1855\nCreate Date: 2020-10-05 18:10:52.272047"
                    },
                    "2024-01-16_13-14_59a1450b3c10_drop_filter_sets_table.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "importlib"
                      ],
                      "size_lines": 42,
                      "has_main": false,
                      "docstring": "drop_filter_sets_table\n\nRevision ID: 59a1450b3c10\nRevises: 65a167d4c62e\nCreate Date: 2023-12-27 13:14:27.268232"
                    },
                    "2016-09-15_08-48_65903709c321_allow_dml.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "logging",
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 45,
                      "has_main": false,
                      "docstring": "allow_dml\n\nRevision ID: 65903709c321\nRevises: 4500485bde7d\nCreate Date: 2016-09-15 08:48:27.284752"
                    },
                    "2022-04-01_14-38_a9422eeaae74_new_dataset_models_take_2.py": {
                      "functions": [
                        "insert_from_select",
                        "find_tables",
                        "copy_tables",
                        "copy_datasets",
                        "copy_columns",
                        "copy_metrics",
                        "postprocess_datasets",
                        "postprocess_columns",
                        "reset_postgres_id_sequence",
                        "upgrade",
                        "downgrade",
                        "created_by_fk",
                        "changed_by_fk",
                        "print_update_count",
                        "get_joined_tables",
                        "print_update_count"
                      ],
                      "classes": [
                        "UUIDMixin",
                        "AuxiliaryColumnsMixin",
                        "Database",
                        "TableColumn",
                        "SqlMetric",
                        "SqlaTable",
                        "NewColumn",
                        "NewTable",
                        "NewDataset"
                      ],
                      "imports": [
                        "os",
                        "datetime",
                        "typing",
                        "uuid",
                        "sqlalchemy",
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "sqlalchemy.orm",
                        "sqlalchemy.schema",
                        "sqlalchemy.sql",
                        "sqlalchemy.sql.expression",
                        "sqlalchemy_utils",
                        "superset.connectors.sqla.models",
                        "superset.connectors.sqla.utils",
                        "superset.extensions",
                        "superset.migrations.shared.utils",
                        "superset.sql_parse",
                        "superset.utils",
                        "superset.utils.core",
                        "sqlalchemy.orm"
                      ],
                      "size_lines": 918,
                      "has_main": false,
                      "docstring": "new_dataset_models_take_2\n\nRevision ID: a9422eeaae74\nRevises: ad07e4fdbaba\nCreate Date: 2022-04-01 14:38:09.499483"
                    },
                    "2025-01-22_14-34_74ad1125881c_converge_upload_permissions.py": {
                      "functions": [
                        "do_upgrade",
                        "do_downgrade",
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "alembic",
                        "sqlalchemy.exc",
                        "sqlalchemy.orm",
                        "superset.migrations.shared.security_converge"
                      ],
                      "size_lines": 85,
                      "has_main": false,
                      "docstring": "converge_upload_permissions\n\nRevision ID: 74ad1125881c\nRevises: d482d51c15ca\nCreate Date: 2025-01-22 14:34:25.610084"
                    },
                    "2021-01-23_16-25_260bf0649a77_migrate_x_dateunit_in_time_range.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "Slice"
                      ],
                      "imports": [
                        "re",
                        "sqlalchemy",
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.dialects.mysql.base",
                        "sqlalchemy.dialects.sqlite.base",
                        "sqlalchemy.exc",
                        "sqlalchemy.ext.declarative",
                        "superset",
                        "superset.utils",
                        "superset.utils.date_parser"
                      ],
                      "size_lines": 109,
                      "has_main": false,
                      "docstring": "migrate [x dateunit] to [x dateunit ago/later]\n\nRevision ID: 260bf0649a77\nRevises: c878781977c6\nCreate Date: 2021-01-23 16:25:14.496774"
                    },
                    "2023-08-14_09-38_9f4a086c2676_add_normalize_columns_to_sqla_model.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "SqlaTable"
                      ],
                      "imports": [
                        "sqlalchemy",
                        "alembic",
                        "sqlalchemy.ext.declarative",
                        "superset",
                        "superset.migrations.shared.utils"
                      ],
                      "size_lines": 67,
                      "has_main": false,
                      "docstring": "add_normalize_columns_to_sqla_model\n\nRevision ID: 9f4a086c2676\nRevises: 4448fa6deeb1\nCreate Date: 2023-08-14 09:38:11.897437"
                    },
                    "2018-06-13_10-20_4451805bbaa1_remove_double_percents.py": {
                      "functions": [
                        "replace",
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "Slice",
                        "Table",
                        "Database"
                      ],
                      "imports": [
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "superset",
                        "superset.utils"
                      ],
                      "size_lines": 110,
                      "has_main": false,
                      "docstring": "remove double percents\n\nRevision ID: 4451805bbaa1\nRevises: afb7730f6a9c\nCreate Date: 2018-06-13 10:20:35.846744"
                    },
                    "2021-11-03_14-07_f9847149153d_add_certifications_columns_to_slice.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 45,
                      "has_main": false,
                      "docstring": "add_certifications_columns_to_slice\n\nRevision ID: f9847149153d\nRevises: 32646df09c64\nCreate Date: 2021-11-03 14:07:09.905194"
                    },
                    "2024-07-19_16-11_df3d7e2eb9a4_remove__customer_location_uc.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "logging",
                        "alembic",
                        "migration_utils",
                        "sqlalchemy.engine.reflection",
                        "superset.utils.core"
                      ],
                      "size_lines": 61,
                      "has_main": false,
                      "docstring": "Remove _customer_location_uc\n\nRevision ID: df3d7e2eb9a4\nRevises: 48cbb571fa3a\nCreate Date: 2024-07-19 16:11:26.740368"
                    },
                    "2019-07-11_19-02_def97f26fdfb_add_index_to_tagged_object.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "alembic"
                      ],
                      "size_lines": 40,
                      "has_main": false,
                      "docstring": "Add index to tagged_object\n\nRevision ID: def97f26fdfb\nRevises: d6ffdf31bdd4\nCreate Date: 2019-07-11 19:02:38.768324"
                    },
                    "2017-09-21_18-37_472d2f73dfd4_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [],
                      "size_lines": 36,
                      "has_main": false,
                      "docstring": "empty message\n\nRevision ID: 472d2f73dfd4\nRevises: ('19a814813610', 'a9c47e2c1547')\nCreate Date: 2017-09-21 18:37:30.844196"
                    },
                    "2020-12-15_09-07_ab104a954a8f_reports_alter_crontab_size.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 51,
                      "has_main": false,
                      "docstring": "reports alter crontab size\n\nRevision ID: ab104a954a8f\nRevises: 5daced1f0e76\nCreate Date: 2020-12-15 09:07:24.730545"
                    },
                    "2023-08-09_14-17_8ace289026f3_add_on_delete_cascade_for_dashboard_slices.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "superset.migrations.shared.constraints"
                      ],
                      "size_lines": 56,
                      "has_main": false,
                      "docstring": "add on delete cascade for dashboard_slices\n\nRevision ID: 8ace289026f3\nRevises: 2e826adca42c\nCreate Date: 2023-08-09 14:17:53.326191"
                    },
                    "2022-11-28_17-51_4ce1d9b25135_remove_filter_bar_orientation.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "Dashboard"
                      ],
                      "imports": [
                        "sqlalchemy",
                        "alembic",
                        "sqlalchemy.ext.declarative",
                        "superset",
                        "superset.utils"
                      ],
                      "size_lines": 65,
                      "has_main": false,
                      "docstring": "remove_filter_bar_orientation\n\nRevision ID: 4ce1d9b25135\nRevises: deb4c9d4a4ef\nCreate Date: 2022-11-28 17:51:08.954439"
                    },
                    "2017-10-03_14-37_4736ec66ce19_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "logging",
                        "sqlalchemy",
                        "alembic",
                        "superset.utils.core"
                      ],
                      "size_lines": 209,
                      "has_main": false,
                      "docstring": "empty message\n\nRevision ID: 4736ec66ce19\nRevises: f959a6652acd\nCreate Date: 2017-10-03 14:37:01.376578"
                    },
                    "2018-07-22_11-50_fc480c87706c_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [],
                      "size_lines": 36,
                      "has_main": false,
                      "docstring": "empty message\n\nRevision ID: fc480c87706c\nRevises: ('4451805bbaa1', '1d9e835a84f9')\nCreate Date: 2018-07-22 11:50:54.174443"
                    },
                    "2020-07-09_17-12_73fd22e742ab_add_dynamic_plugins_py.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 60,
                      "has_main": false,
                      "docstring": "add_dynamic_plugins.py\n\nRevision ID: 73fd22e742ab\nRevises: 0a6f12f60c73\nCreate Date: 2020-07-09 17:12:00.686702"
                    },
                    "2019-11-06_15-23_78ee127d0d1d_reconvert_legacy_filters_into_adhoc.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "Slice"
                      ],
                      "imports": [
                        "copy",
                        "logging",
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "superset",
                        "superset.utils",
                        "superset.utils.core"
                      ],
                      "size_lines": 74,
                      "has_main": false,
                      "docstring": "reconvert legacy filters into adhoc\n\nRevision ID: 78ee127d0d1d\nRevises: c2acd2cf3df2\nCreate Date: 2019-11-06 15:23:26.497876"
                    },
                    "2022-10-03_17-34_deb4c9d4a4ef_parameters_in_saved_queries.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 47,
                      "has_main": false,
                      "docstring": "parameters in saved queries\n\nRevision ID: deb4c9d4a4ef\nRevises: 291f024254b5\nCreate Date: 2022-10-03 17:34:00.721559"
                    },
                    "2022-01-28_16-03_5afbb1a5849b_add_embedded_dahshoard_table.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "uuid",
                        "sqlalchemy",
                        "alembic",
                        "sqlalchemy_utils"
                      ],
                      "size_lines": 53,
                      "has_main": false,
                      "docstring": "add_embedded_dashboard_table\n\nRevision ID: 5afbb1a5849b\nRevises: 5fd49410a97a\nCreate Date: 2022-01-28 16:03:02.944080"
                    },
                    "2024-04-26_12-36_4a33124c18ad_mig_new_columnar_upload_perm.py": {
                      "functions": [
                        "do_upgrade",
                        "do_downgrade",
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "alembic",
                        "sqlalchemy.exc",
                        "sqlalchemy.orm",
                        "superset.migrations.shared.security_converge"
                      ],
                      "size_lines": 89,
                      "has_main": false,
                      "docstring": "mig new columnar upload perm\n\nRevision ID: 4a33124c18ad\nRevises: 5f57af97bc3f\nCreate Date: 2024-04-26 12:36:07.800489"
                    },
                    "2021-07-27_08-25_31b2a1039d4a_drop_tables_constraint.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "alembic",
                        "sqlalchemy",
                        "superset.utils.core"
                      ],
                      "size_lines": 52,
                      "has_main": false,
                      "docstring": "drop tables constraint\n\nRevision ID: 31b2a1039d4a\nRevises: ae1ed299413b\nCreate Date: 2021-07-27 08:25:20.755453"
                    },
                    "2015-12-04_11-16_315b3f4da9b0_adding_log_model.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 48,
                      "has_main": false,
                      "docstring": "adding log model\n\nRevision ID: 315b3f4da9b0\nRevises: 1a48a5411020\nCreate Date: 2015-12-04 11:16:58.226984"
                    },
                    "2018-07-22_11-59_bebcf3fed1fe_convert_dashboard_v1_positions.py": {
                      "functions": [
                        "is_v2_dash",
                        "get_boundary",
                        "generate_id",
                        "has_overlap",
                        "get_empty_layout",
                        "get_header_component",
                        "get_row_container",
                        "get_col_container",
                        "get_chart_holder",
                        "get_children_max",
                        "get_children_sum",
                        "get_wide_column_ids",
                        "is_wide_leaf_component",
                        "can_reduce_column_width",
                        "reduce_row_width",
                        "reduce_component_width",
                        "convert",
                        "convert_to_layout",
                        "merge_position",
                        "scan_dashboard_positions_data",
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "Slice",
                        "Dashboard"
                      ],
                      "imports": [
                        "collections",
                        "sys",
                        "uuid",
                        "functools",
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "sqlalchemy.orm",
                        "superset",
                        "superset.utils"
                      ],
                      "size_lines": 659,
                      "has_main": false,
                      "docstring": "Migrate dashboard position_json data from V1 to V2\n\nRevision ID: bebcf3fed1fe\nRevises: fc480c87706c\nCreate Date: 2018-07-22 11:59:07.025119"
                    },
                    "2015-12-15_17-02_2591d77e9831_user_id.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 43,
                      "has_main": false,
                      "docstring": "user_id\n\nRevision ID: 2591d77e9831\nRevises: 12d55656cbca\nCreate Date: 2015-12-15 17:02:45.128709"
                    },
                    "2021-07-14_10-31_3317e9248280_add_creation_method_to_reports_model.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 51,
                      "has_main": false,
                      "docstring": "add_creation_method_to_reports_model\n\nRevision ID: 3317e9248280\nRevises: 453530256cea\nCreate Date: 2021-07-14 10:31:38.610095"
                    },
                    "2022-04-04_15-04_b0d0249074e4_deprecate_time_range_endpoints_v2.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "Slice"
                      ],
                      "imports": [
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "superset",
                        "superset.utils"
                      ],
                      "size_lines": 60,
                      "has_main": false,
                      "docstring": "deprecate time_range_endpoints v2\n\nRevision ID: b0d0249074e4\nRevises: 2ed890b36b94\nCreate Date: 2022-04-04 15:04:05.606340"
                    },
                    "2016-02-10_08-47_430039611635_log_more.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 41,
                      "has_main": false,
                      "docstring": "log more\n\nRevision ID: 430039611635\nRevises: d827694c7555\nCreate Date: 2016-02-10 08:47:28.950891"
                    },
                    "2023-08-08_14-14_2e826adca42c_log_json.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic",
                        "superset.utils.core"
                      ],
                      "size_lines": 53,
                      "has_main": false,
                      "docstring": "Fix schema for log\n\nRevision ID: 2e826adca42c\nRevises: 0769ef90fddd\nCreate Date: 2023-08-08 14:14:23.381364"
                    },
                    "2023-12-01_12-03_b7851ee5522f_replay_317970b4400c.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "importlib"
                      ],
                      "size_lines": 42,
                      "has_main": false,
                      "docstring": "replay 317970b4400c\n\nRevision ID: b7851ee5522f\nRevises: 4b85906e5b91\nCreate Date: 2023-12-01 12:03:27.538945"
                    },
                    "2022-07-07_00-00_cdcf3d64daf4_add_user_id_dttm_idx_to_log_model.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "alembic"
                      ],
                      "size_lines": 41,
                      "has_main": false,
                      "docstring": "Add user_id and dttm composite index to Log model\n\nRevision ID: cdcf3d64daf4\nRevises: 7fb8bca906d2\nCreate Date: 2022-04-05 13:27:06.028908"
                    },
                    "2023-06-21_14-02_90139bf715e4_add_currency_column_to_metrics.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 43,
                      "has_main": false,
                      "docstring": "add_currency_column_to_metrics\n\nRevision ID: 90139bf715e4\nRevises: 83e1abbe777f\nCreate Date: 2023-06-21 14:02:08.200955"
                    },
                    "2020-05-26_23-21_2f1d15e8a6af_add_alerts.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 98,
                      "has_main": false,
                      "docstring": "add_alerts\n\nRevision ID: 2f1d15e8a6af\nRevises: a72cb0ebeb22\nCreate Date: 2020-05-26 23:21:50.059635"
                    },
                    "2024-02-14_14-43_17fcea065655_change_text_to_mediumtext.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic",
                        "sqlalchemy.dialects.mysql",
                        "sqlalchemy.dialects.mysql.base",
                        "superset.migrations.shared.utils",
                        "superset.utils.core"
                      ],
                      "size_lines": 100,
                      "has_main": false,
                      "docstring": "change_text_to_mediumtext\n\nRevision ID: 17fcea065655\nRevises: 87d38ad83218\nCreate Date: 2024-02-14 14:43:39.898093"
                    },
                    "2019-12-03_13-50_89115a40e8ea_change_table_schema_description_to_long_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic",
                        "sqlalchemy.dialects",
                        "sqlalchemy.dialects.mysql.base"
                      ],
                      "size_lines": 51,
                      "has_main": false,
                      "docstring": "Change table schema description to long text\n\nRevision ID: 89115a40e8ea\nRevises: 5afa9079866a\nCreate Date: 2019-12-03 13:50:24.746867"
                    },
                    "2021-04-30_10-55_453530256cea_add_save_option_column_to_db_model.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 47,
                      "has_main": false,
                      "docstring": "add_save_form_column_to_db_model\n\nRevision ID: 453530256cea\nRevises: f1410ed7ec95\nCreate Date: 2021-04-30 10:55:07.009994"
                    },
                    "2017-02-10_17-58_d6db5a5cdb5d_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [],
                      "size_lines": 36,
                      "has_main": false,
                      "docstring": "empty message\n\nRevision ID: d6db5a5cdb5d\nRevises: ('a99f2f7c195a', 'bcf3126872fc')\nCreate Date: 2017-02-10 17:58:20.149960"
                    },
                    "2024-03-20_16-02_678eefb4ab44_add_access_token_table.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic",
                        "sqlalchemy_utils",
                        "superset.migrations.shared.utils"
                      ],
                      "size_lines": 88,
                      "has_main": false,
                      "docstring": "Add access token table\n\nRevision ID: 678eefb4ab44\nRevises: be1b217cd8cd\nCreate Date: 2024-03-20 16:02:58.515915"
                    },
                    "2020-02-20_08-52_72428d1ea401_add_tmp_schema_name_to_the_query_object.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 45,
                      "has_main": false,
                      "docstring": "Add tmp_schema_name to the query object.\n\nRevision ID: 72428d1ea401\nRevises: 0a6f12f60c73\nCreate Date: 2020-02-20 08:52:22.877902"
                    },
                    "2024-08-13_15-31_007a1abffe7e_remove_sl_tables.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic",
                        "superset.migrations.shared.utils"
                      ],
                      "size_lines": 74,
                      "has_main": false,
                      "docstring": "remove sl_tables\n\nRevision ID: 007a1abffe7e\nRevises: a6b32d2d07b1\nCreate Date: 2024-08-13 15:31:31.478017"
                    },
                    "2016-08-31_10-26_41f6a59a61f2_database_options_for_sql_lab.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 45,
                      "has_main": false,
                      "docstring": "database options for sql lab\n\nRevision ID: 41f6a59a61f2\nRevises: 3c3ffe173e4f\nCreate Date: 2016-08-31 10:26:37.969107"
                    },
                    "2022-07-05_15-48_409c7b420ab0_add_created_by_fk_as_owner.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "Dataset",
                        "DatasetUser",
                        "Slice",
                        "SliceUser",
                        "SqlaTable",
                        "SqlaTableUser"
                      ],
                      "imports": [
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "superset"
                      ],
                      "size_lines": 136,
                      "has_main": false,
                      "docstring": "add created_by_fk as owner\n\nRevision ID: 409c7b420ab0\nRevises: a39867932713\nCreate Date: 2022-07-05 15:48:06.029190"
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "2019-01-17_08-31_8b70aa3d0f87_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [],
                      "size_lines": 36,
                      "has_main": false,
                      "docstring": "empty message\n\nRevision ID: 8b70aa3d0f87\nRevises: ('fbd55e0f83eb', 'fb13d49b72f9')\nCreate Date: 2019-01-17 08:31:55.781032"
                    },
                    "2019-10-10_13-52_1495eb914ad3_time_range.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "Slice"
                      ],
                      "imports": [
                        "logging",
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "superset",
                        "superset.legacy",
                        "superset.utils"
                      ],
                      "size_lines": 87,
                      "has_main": false,
                      "docstring": "time range\n\nRevision ID: 1495eb914ad3\nRevises: 258b5280a45e\nCreate Date: 2019-10-10 13:52:54.544475"
                    },
                    "2022-04-14_17-21_cecc6bf46990_rm_time_range_endpoints_2.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [],
                      "size_lines": 36,
                      "has_main": false,
                      "docstring": "rm_time_range_endpoints_2\n\nRevision ID: cecc6bf46990\nRevises: 9d8a8d575284\nCreate Date: 2022-04-14 17:21:53.996022"
                    },
                    "2018-12-22_17-26_fbd55e0f83eb_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [],
                      "size_lines": 36,
                      "has_main": false,
                      "docstring": "empty message\n\nRevision ID: fbd55e0f83eb\nRevises: ('7467e77870e4', 'de021a1ca60d')\nCreate Date: 2018-12-22 17:26:16.113317"
                    },
                    "2021-01-14_19-12_e11ccdd12658_add_roles_relationship_to_dashboard.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 45,
                      "has_main": false,
                      "docstring": "add roles relationship to dashboard\n\nRevision ID: e11ccdd12658\nRevises: 260bf0649a77\nCreate Date: 2021-01-14 19:12:43.406230"
                    },
                    "2023-09-15_12-58_4b85906e5b91_add_on_delete_cascade_for_dashboard_roles.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "superset.migrations.shared.constraints"
                      ],
                      "size_lines": 56,
                      "has_main": false,
                      "docstring": "add on delete cascade for dashboard_roles\n\nRevision ID: 4b85906e5b91\nRevises: 317970b4400c\nCreate Date: 2023-09-15 12:58:26.772759"
                    },
                    "2017-01-24_12-40_f18570e03440_add_query_result_key_index.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "alembic"
                      ],
                      "size_lines": 40,
                      "has_main": false,
                      "docstring": "Add index on the result key to the query table.\n\nRevision ID: f18570e03440\nRevises: 1296d28ec131\nCreate Date: 2017-01-24 12:40:42.494787"
                    },
                    "2018-06-13_14-54_bddc498dd179_adhoc_filters.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "Slice"
                      ],
                      "imports": [
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "superset",
                        "superset.utils",
                        "superset.utils.core"
                      ],
                      "size_lines": 85,
                      "has_main": false,
                      "docstring": "adhoc filters\n\nRevision ID: bddc498dd179\nRevises: afb7730f6a9c\nCreate Date: 2018-06-13 14:54:47.086507"
                    },
                    "2018-12-13_15-38_cefabc8f7d38_increase_size_of_name_column_in_ab_view_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 53,
                      "has_main": false,
                      "docstring": "Increase size of name column in ab_view_menu\n\nRevision ID: cefabc8f7d38\nRevises: 6c7537a6004a\nCreate Date: 2018-12-13 15:38:36.772750"
                    },
                    "2021-08-24_23-27_181091c0ef16_add_extra_column_to_columns_model.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 41,
                      "has_main": false,
                      "docstring": "add_extra_column_to_columns_model\n\nRevision ID: 181091c0ef16\nRevises: 07071313dd52\nCreate Date: 2021-08-24 23:27:30.403308"
                    },
                    "2015-11-21_11-18_289ce07647b_add_encrypted_password_field.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 39,
                      "has_main": false,
                      "docstring": "Add encrypted password field\n\nRevision ID: 289ce07647b\nRevises: 2929af7925ed\nCreate Date: 2015-11-21 11:18:00.650587"
                    },
                    "2022-03-29_18-03_2ed890b36b94_rm_time_range_endpoints_from_qc.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [],
                      "size_lines": 36,
                      "has_main": false,
                      "docstring": "rm_time_range_endpoints_from_qc\n\nRevision ID: 2ed890b36b94\nRevises: 58df9d617f14\nCreate Date: 2022-03-29 18:03:48.977741"
                    },
                    "2019-02-16_17-44_45e7da7cfeba_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [],
                      "size_lines": 36,
                      "has_main": false,
                      "docstring": "empty message\n\nRevision ID: 45e7da7cfeba\nRevises: ('e553e78e90c5', 'c82ee8a39623')\nCreate Date: 2019-02-16 17:44:44.493427"
                    },
                    "2020-03-25_10-42_f9a30386bd74_cleanup_time_grainularity.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "Slice"
                      ],
                      "imports": [
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "superset",
                        "superset.utils"
                      ],
                      "size_lines": 98,
                      "has_main": false,
                      "docstring": "cleanup_time_granularity\n\nRevision ID: f9a30386bd74\nRevises: b5998378c225\nCreate Date: 2020-03-25 10:42:11.047328"
                    },
                    "2021-11-11_04-18_0ca9e5f1dacd_rename_to_schemas_allowed_for_file_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "Database"
                      ],
                      "imports": [
                        "logging",
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "superset",
                        "superset.utils"
                      ],
                      "size_lines": 89,
                      "has_main": false,
                      "docstring": "rename to schemas_allowed_for_file_upload in dbs.extra\n\nRevision ID: 0ca9e5f1dacd\nRevises: b92d69a6643c\nCreate Date: 2021-11-11 04:18:26.171851"
                    },
                    "2017-09-19_15-09_d39b1e37131d_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [],
                      "size_lines": 36,
                      "has_main": false,
                      "docstring": "empty message\n\nRevision ID: d39b1e37131d\nRevises: ('a9c47e2c1547', 'ddd6ebdd853b')\nCreate Date: 2017-09-19 15:09:14.292633"
                    },
                    "2019-01-14_16-00_a33a03f16c4a_add_extra_column_to_savedquery.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 56,
                      "has_main": false,
                      "docstring": "Add extra column to SavedQuery\n\nLicensed to the Apache Software Foundation (ASF) under one or more\ncontributor license agreements.  See the NOTICE file distributed with\nthis work for additional information regarding copyright ownership.\nThe ASF licenses this file to You under the Apache License, Version 2.0\n(the \"License\"); you may not use this file except in compliance with\nthe License.  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\nRevision ID: a33a03f16c4a\nRevises: fb13d49b72f9\nCreate Date: 2019-01-14 16:00:26.344439"
                    },
                    "2025-01-07_16-03_eb1c288c71c4_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [],
                      "size_lines": 36,
                      "has_main": false,
                      "docstring": "empty message\n\nRevision ID: eb1c288c71c4\nRevises: ('df3d7e2eb9a4', '7b17aa722e30')\nCreate Date: 2025-01-07 16:03:44.936921"
                    },
                    "2017-01-10_11-47_bcf3126872fc_add_keyvalue.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 48,
                      "has_main": false,
                      "docstring": "Add keyvalue table\n\nRevision ID: bcf3126872fc\nRevises: f18570e03440\nCreate Date: 2017-01-10 11:47:56.306938"
                    },
                    "2017-04-25_10-00_a65458420354_add_result_backend_time_logging.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 44,
                      "has_main": false,
                      "docstring": "add_result_backend_time_logging\n\nRevision ID: a65458420354\nRevises: 2fcdcb35e487\nCreate Date: 2017-04-25 10:00:58.053120"
                    },
                    "2021-04-16_17-38_d416d0d715cc_add_limiting_factor_column_to_query_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 47,
                      "has_main": false,
                      "docstring": "add_limiting_factor_column_to_query_model.py\n\nRevision ID: d416d0d715cc\nRevises: 19e978e1b9c3\nCreate Date: 2021-04-16 17:38:40.342260"
                    },
                    "2018-02-13_08-07_e866bd2d4976_smaller_grid.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "Dashboard"
                      ],
                      "imports": [
                        "sqlalchemy",
                        "alembic",
                        "sqlalchemy.ext.declarative",
                        "superset",
                        "superset.utils"
                      ],
                      "size_lines": 88,
                      "has_main": false,
                      "docstring": "smaller_grid\n\nRevision ID: e866bd2d4976\nRevises: 21e88bc06c02\nCreate Date: 2018-02-13 08:07:40.766277"
                    },
                    "2018-04-10_11-19_bf706ae5eb46_cal_heatmap_metric_to_metrics.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "Slice"
                      ],
                      "imports": [
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "superset",
                        "superset.utils"
                      ],
                      "size_lines": 72,
                      "has_main": false,
                      "docstring": "cal_heatmap_metric_to_metrics\n\nRevision ID: bf706ae5eb46\nRevises: f231d82b9b26\nCreate Date: 2018-04-10 11:19:47.621878"
                    },
                    "2015-12-14_13-37_12d55656cbca_is_featured.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 39,
                      "has_main": false,
                      "docstring": "is_featured\n\nRevision ID: 12d55656cbca\nRevises: 55179c7f25c7\nCreate Date: 2015-12-14 13:37:17.374852"
                    },
                    "2018-07-24_14-29_c18bd4186f15_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [],
                      "size_lines": 36,
                      "has_main": false,
                      "docstring": "empty message\n\nRevision ID: c18bd4186f15\nRevises: ('46ba6aaaac97', 'ec1f88a35cc6')\nCreate Date: 2018-07-24 14:29:41.341098"
                    },
                    "2018-07-22_08-50_7467e77870e4_remove_aggs.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 63,
                      "has_main": false,
                      "docstring": "remove_aggs\n\nRevision ID: 7467e77870e4\nRevises: c829ff0b37d0\nCreate Date: 2018-07-22 08:50:01.078218"
                    },
                    "2017-03-21_15-41_979c03af3341_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [],
                      "size_lines": 36,
                      "has_main": false,
                      "docstring": "empty message\n\nRevision ID: 979c03af3341\nRevises: ('db527d8c4c78', 'ea033256294a')\nCreate Date: 2017-03-21 15:41:34.383808"
                    },
                    "2024-05-06_11-37_645bb206f96c_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [],
                      "size_lines": 36,
                      "has_main": false,
                      "docstring": "empty message\n\nRevision ID: 645bb206f96c\nRevises: ('58d051681a3b', '3dfd0e78650e')\nCreate Date: 2024-05-06 11:37:23.089047"
                    },
                    "2021-12-15_15-05_c53bae8f08dd_add_saved_query_foreign_key_to_tab_state.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 44,
                      "has_main": false,
                      "docstring": "add_saved_query_foreign_key_to_tab_state\n\nRevision ID: c53bae8f08dd\nRevises: bb38f40aa3ff\nCreate Date: 2021-12-15 15:05:21.845777"
                    },
                    "2020-05-13_21-01_743a117f0d98_add_slack_to_the_schedule.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 46,
                      "has_main": false,
                      "docstring": "Add slack to the schedule\n\nRevision ID: 743a117f0d98\nRevises: 620241d1153f\nCreate Date: 2020-05-13 21:01:26.163478"
                    },
                    "2024-08-13_15-27_e53fd48cc078_remove_sl_dataset_users.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic",
                        "superset.migrations.shared.utils"
                      ],
                      "size_lines": 58,
                      "has_main": false,
                      "docstring": "remove sl_dataset_users\n\nRevision ID: e53fd48cc078\nRevises: 38f4144e8558\nCreate Date: 2024-08-13 15:27:11.589886"
                    },
                    "2021-02-10_12-32_41ce8799acc3_rename_pie_label_type.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "Slice"
                      ],
                      "imports": [
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "superset",
                        "superset.utils"
                      ],
                      "size_lines": 102,
                      "has_main": false,
                      "docstring": "rename pie label type\n\nRevision ID: 41ce8799acc3\nRevises: e11ccdd12658\nCreate Date: 2021-02-10 12:32:27.385579"
                    },
                    "2020-12-03_16-21_811494c0cc23_remove_path_from_logs.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "alembic",
                        "superset.migrations.shared"
                      ],
                      "size_lines": 46,
                      "has_main": false,
                      "docstring": "Remove path, path_no_int, and ref from logs\n\nRevision ID: 811494c0cc23\nRevises: 8ee129739cf9\nCreate Date: 2020-12-03 16:21:06.771684"
                    },
                    "2020-09-15_18-22_e5ef6828ac4e_add_rls_filter_type_and_grouping_key.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic",
                        "superset.utils"
                      ],
                      "size_lines": 61,
                      "has_main": false,
                      "docstring": "add rls filter type and grouping key\n\nRevision ID: e5ef6828ac4e\nRevises: ae19b4ee3692\nCreate Date: 2020-09-15 18:22:40.130985"
                    },
                    "2015-10-05_10-32_5a7bad26f2a7_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 41,
                      "has_main": false,
                      "docstring": "empty message\n\nRevision ID: 5a7bad26f2a7\nRevises: 4e6a06bad7a8\nCreate Date: 2015-10-05 10:32:15.850753"
                    },
                    "2020-01-08_01-17_e96dbf2cfef0_datasource_cluster_fk.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic",
                        "superset.utils.core"
                      ],
                      "size_lines": 125,
                      "has_main": false,
                      "docstring": "datasource_cluster_fk\n\nRevision ID: e96dbf2cfef0\nRevises: 817e1c9b09d0\nCreate Date: 2020-01-08 01:17:40.127610"
                    },
                    "2021-04-06_21-39_19e978e1b9c3_add_report_format_to_report_schedule_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 44,
                      "has_main": false,
                      "docstring": "add_report_format_to_report_schedule_model.py\n\nRevision ID: 19e978e1b9c3\nRevises: fc3a3a8ff221\nCreate Date: 2021-04-06 21:39:52.259223"
                    },
                    "2024-04-11_15-41_5f57af97bc3f_add_catalog_column.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "superset.migrations.shared.utils"
                      ],
                      "size_lines": 44,
                      "has_main": false,
                      "docstring": "Add catalog column\n\nRevision ID: 5f57af97bc3f\nRevises: d60591c5515f\nCreate Date: 2024-04-11 15:41:34.663989"
                    },
                    "2018-08-06_14-38_0c5070e96b57_add_user_attributes_table.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 53,
                      "has_main": false,
                      "docstring": "add user attributes table\n\nRevision ID: 0c5070e96b57\nRevises: 7fcdcde0761c\nCreate Date: 2018-08-06 14:38:18.965248"
                    },
                    "2015-12-04_09-42_1a48a5411020_adding_slug_to_dash.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 44,
                      "has_main": false,
                      "docstring": "adding slug to dash\n\nRevision ID: 1a48a5411020\nRevises: 289ce07647b\nCreate Date: 2015-12-04 09:42:16.973264"
                    },
                    "2021-11-02_17-44_3ba29ecbaac5_change_datatype_of_type_in_basecolumn.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 45,
                      "has_main": false,
                      "docstring": "Change datatype of type in BaseColumn\n\nRevision ID: 3ba29ecbaac5\nRevises: abe27eaf93db\nCreate Date: 2021-11-02 17:44:51.792138"
                    },
                    "2024-05-10_11-09_9621c6d56ffb_add_subject_column_to_report_schedule.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 42,
                      "has_main": false,
                      "docstring": "add subject column to report schedule\n\nRevision ID: 9621c6d56ffb\nRevises: 87ffc36f9842\nCreate Date: 2024-05-10 11:09:12.046862"
                    },
                    "2021-03-23_05-23_301362411006_add_execution_id_to_report_execution_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic",
                        "sqlalchemy_utils"
                      ],
                      "size_lines": 42,
                      "has_main": false,
                      "docstring": "add_execution_id_to_report_execution_log_model.py\n\nRevision ID: 301362411006\nRevises: 989bbe479899\nCreate Date: 2021-03-23 05:23:15.641856"
                    },
                    "2023-05-11_12-41_4ea966691069_cross_filter_global_scoping.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "Dashboard"
                      ],
                      "imports": [
                        "copy",
                        "logging",
                        "sqlalchemy",
                        "alembic",
                        "sqlalchemy.ext.declarative",
                        "superset",
                        "superset.migrations.shared.utils",
                        "superset.utils"
                      ],
                      "size_lines": 136,
                      "has_main": false,
                      "docstring": "cross-filter-global-scoping\n\nRevision ID: 4ea966691069\nRevises: 7e67aecbf3f1\nCreate Date: 2023-05-11 12:41:38.095717"
                    },
                    "2023-06-08_10-22_4c5da39be729_migrate_treemap_chart.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "alembic",
                        "sqlalchemy.dialects.mysql.base",
                        "superset",
                        "superset.migrations.shared.migrate_viz"
                      ],
                      "size_lines": 55,
                      "has_main": false,
                      "docstring": "migrate_treemap_chart\n\nRevision ID: 4c5da39be729\nRevises: 9ba2ce3086e5\nCreate Date: 2023-06-08 10:22:23.192064"
                    },
                    "2018-07-22_09-32_e3970889f38e_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [],
                      "size_lines": 36,
                      "has_main": false,
                      "docstring": "empty message\n\nRevision ID: e3970889f38e\nRevises: ('4451805bbaa1', '1d9e835a84f9')\nCreate Date: 2018-07-22 09:32:36.986561"
                    },
                    "2018-04-08_07-34_30bb17c0dc76_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "datetime",
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 43,
                      "has_main": false,
                      "docstring": "empty message\n\nRevision ID: 30bb17c0dc76\nRevises: f231d82b9b26\nCreate Date: 2018-04-08 07:34:12.149910"
                    },
                    "2018-12-15_12-34_3e1b21cd94a4_change_owner_to_m2m_relation_on_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic",
                        "superset",
                        "superset.utils.core"
                      ],
                      "size_lines": 130,
                      "has_main": false,
                      "docstring": "change_owner_to_m2m_relation_on_datasources.py\n\nRevision ID: 3e1b21cd94a4\nRevises: 4ce8df208545\nCreate Date: 2018-12-15 12:34:47.228756"
                    },
                    "2020-11-30_15-25_40f16acf1ba7_security_converge_reports.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "alembic",
                        "sqlalchemy.exc",
                        "sqlalchemy.orm",
                        "superset.migrations.shared.security_converge"
                      ],
                      "size_lines": 93,
                      "has_main": false,
                      "docstring": "security converge reports\n\nRevision ID: 40f16acf1ba7\nRevises: e38177dbf641\nCreate Date: 2020-11-30 15:25:47.489419"
                    },
                    "2017-12-08_08-19_67a6ac9b727b_update_spatial_params.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "Slice"
                      ],
                      "imports": [
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "superset",
                        "superset.utils"
                      ],
                      "size_lines": 67,
                      "has_main": false,
                      "docstring": "update_spatial_params\n\nRevision ID: 67a6ac9b727b\nRevises: 4736ec66ce19\nCreate Date: 2017-12-08 08:19:21.148775"
                    },
                    "2017-08-31_17-35_a9c47e2c1547_add_impersonate_user_to_dbs.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 39,
                      "has_main": false,
                      "docstring": "add impersonate_user to dbs\n\nRevision ID: a9c47e2c1547\nRevises: ca69c70ec99b\nCreate Date: 2017-08-31 17:35:58.230723"
                    },
                    "2020-11-15_16-08_a8173232b786_add_path_to_logs.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "alembic",
                        "superset.migrations.shared"
                      ],
                      "size_lines": 48,
                      "has_main": false,
                      "docstring": "Add path to logs\n\nRevision ID: a8173232b786\nRevises: 49b5a32daba5\nCreate Date: 2020-11-15 16:08:24.580764"
                    },
                    "2016-08-18_14-06_3c3ffe173e4f_add_sql_string_to_table.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 39,
                      "has_main": false,
                      "docstring": "add_sql_string_to_table\n\nRevision ID: 3c3ffe173e4f\nRevises: ad82a75afd82\nCreate Date: 2016-08-18 14:06:28.784699"
                    },
                    "2022-05-18_16-07_e786798587de_delete_none_permissions.py": {
                      "functions": [
                        "upgrade",
                        "downgrade",
                        "__repr__",
                        "__repr__",
                        "__repr__",
                        "__repr__"
                      ],
                      "classes": [
                        "Permission",
                        "ViewMenu",
                        "Role",
                        "PermissionView"
                      ],
                      "imports": [
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "sqlalchemy.orm"
                      ],
                      "size_lines": 146,
                      "has_main": false,
                      "docstring": "Delete None permissions\n\nRevision ID: e786798587de\nRevises: 6f139c533bea\nCreate Date: 2022-05-18 16:07:47.648514"
                    },
                    "2020-08-12_15-47_f80a3b88324b_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [],
                      "size_lines": 36,
                      "has_main": false,
                      "docstring": "empty message\n\nRevision ID: f80a3b88324b\nRevises: ('978245563a02', 'f120347acb39')\nCreate Date: 2020-08-12 15:47:56.580191"
                    },
                    "2024-05-10_18-02_f84fde59123a_update_charts_with_old_time_comparison.py": {
                      "functions": [
                        "upgrade_comparison_params",
                        "upgrade",
                        "downgrade_comparison_params",
                        "downgrade"
                      ],
                      "classes": [
                        "Slice"
                      ],
                      "imports": [
                        "logging",
                        "copy",
                        "datetime",
                        "hashlib",
                        "typing",
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "superset",
                        "superset.migrations.shared.utils",
                        "superset.utils",
                        "superset.utils.date_parser"
                      ],
                      "size_lines": 223,
                      "has_main": false,
                      "docstring": "Update charts with old time comparison controls\n\nRevision ID: f84fde59123a\nRevises: 9621c6d56ffb\nCreate Date: 2024-05-10 18:02:38.891060"
                    },
                    "2024-04-08_15-43_5ad7321c2169_mig_new_csv_upload_perm.py": {
                      "functions": [
                        "do_upgrade",
                        "do_downgrade",
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "alembic",
                        "sqlalchemy.exc",
                        "sqlalchemy.orm",
                        "superset.migrations.shared.security_converge"
                      ],
                      "size_lines": 86,
                      "has_main": false,
                      "docstring": "mig new csv upload perm\n\nRevision ID: 5ad7321c2169\nRevises: 678eefb4ab44\nCreate Date: 2024-04-08 15:43:29.682687"
                    },
                    "2020-11-04_11-06_49b5a32daba5_add_report_schedules.py": {
                      "functions": [
                        "upgrade",
                        "has_unique_constraint",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic",
                        "sqlalchemy.engine.reflection"
                      ],
                      "size_lines": 144,
                      "has_main": false,
                      "docstring": "add report schedules\n\nRevision ID: 49b5a32daba5\nRevises: 96e99fb176a0\nCreate Date: 2020-11-04 11:06:59.249758"
                    },
                    "2016-12-13_16-19_525c854f0005_log_this_plus.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 41,
                      "has_main": false,
                      "docstring": "log_this_plus\n\nRevision ID: 525c854f0005\nRevises: e46f2d27a08e\nCreate Date: 2016-12-13 16:19:02.239322"
                    },
                    "2018-04-12_16-00_5ccf602336a0_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [],
                      "size_lines": 36,
                      "has_main": false,
                      "docstring": "empty message\n\nRevision ID: 5ccf602336a0\nRevises: ('130915240929', 'c9495751e314')\nCreate Date: 2018-04-12 16:00:47.639218"
                    },
                    "2023-09-06_13-18_317970b4400c_added_time_secondary_column_to_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "SqlaTable"
                      ],
                      "imports": [
                        "sqlalchemy",
                        "alembic",
                        "sqlalchemy.ext.declarative",
                        "superset",
                        "superset.migrations.shared.utils"
                      ],
                      "size_lines": 72,
                      "has_main": false,
                      "docstring": "Added always_filter_main_dttm to datasource\n\nRevision ID: 317970b4400c\nRevises: ec54aca4c8a2\nCreate Date: 2023-09-06 13:18:59.597259"
                    },
                    "2017-01-24_12-31_db0c65b146bd_update_slice_model_json.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "Slice"
                      ],
                      "imports": [
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "superset",
                        "superset.utils"
                      ],
                      "size_lines": 69,
                      "has_main": false,
                      "docstring": "update_slice_model_json\n\nRevision ID: db0c65b146bd\nRevises: f18570e03440\nCreate Date: 2017-01-24 12:31:06.541746"
                    },
                    "2021-11-11_16-41_b8d3a24d9131_new_dataset_models.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [],
                      "size_lines": 47,
                      "has_main": false,
                      "docstring": "New dataset models\n\nRevision ID: b8d3a24d9131\nRevises: 5afbb1a5849b\nCreate Date: 2021-11-11 16:41:53.266965"
                    },
                    "2024-09-25_17-59_7b17aa722e30_uuidmixin.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "sqlalchemy_utils",
                        "superset.migrations.shared.utils"
                      ],
                      "size_lines": 49,
                      "has_main": false,
                      "docstring": "UUIDMixin\n\nRevision ID: 7b17aa722e30\nRevises: 48cbb571fa3a\nCreate Date: 2024-09-25 17:59:21.028426"
                    },
                    "2018-03-30_14-00_d6ffdf31bdd4_add_published_column_to_dashboards.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 42,
                      "has_main": false,
                      "docstring": "Add published column to dashboards\n\nRevision ID: d6ffdf31bdd4\nRevises: b4a38aa87893\nCreate Date: 2018-03-30 14:00:44.929483"
                    },
                    "2021-12-17_16-56_31bb738bd1d2_move_pivot_table_v2_legacy_order_by_to_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "Slice"
                      ],
                      "imports": [
                        "logging",
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "superset",
                        "superset.utils"
                      ],
                      "size_lines": 96,
                      "has_main": false,
                      "docstring": "move_pivot_table_v2_legacy_order_by_to_timeseries_limit_metric\n\nRevision ID: 31bb738bd1d2\nRevises: fe23025b9441\nCreate Date: 2021-12-17 16:56:55.186285"
                    },
                    "2022-03-04_09-59_6766938c6065_add_key_value_store.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "uuid",
                        "sqlalchemy",
                        "alembic",
                        "sqlalchemy_utils"
                      ],
                      "size_lines": 62,
                      "has_main": false,
                      "docstring": "add key-value store\n\nRevision ID: 6766938c6065\nRevises: 7293b0ca7944\nCreate Date: 2022-03-04 09:59:26.922329"
                    },
                    "2018-08-29_14-35_55e910a74826_add_metadata_column_to_annotation_model_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 39,
                      "has_main": false,
                      "docstring": "add_metadata_column_to_annotation_model.py\n\nRevision ID: 55e910a74826\nRevises: 1a1d627ebd8e\nCreate Date: 2018-08-29 14:35:20.407743"
                    },
                    "2024-05-02_13-40_3dfd0e78650e_add_query_sql_editor_id_index.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "alembic",
                        "superset.migrations.shared.utils"
                      ],
                      "size_lines": 50,
                      "has_main": false,
                      "docstring": "add_query_sql_editor_id_index\n\nRevision ID: 3dfd0e78650e\nRevises: 5f57af97bc3f\nCreate Date: 2024-05-02 13:40:23.126659"
                    },
                    "2016-04-15_17-58_4fa88fe24e94_owners_many_to_many.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 57,
                      "has_main": false,
                      "docstring": "owners_many_to_many\n\nRevision ID: 4fa88fe24e94\nRevises: b4456560d4f3\nCreate Date: 2016-04-15 17:58:33.842012"
                    },
                    "2018-04-10_20-46_c9495751e314_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [],
                      "size_lines": 36,
                      "has_main": false,
                      "docstring": "empty message\n\nRevision ID: c9495751e314\nRevises: ('30bb17c0dc76', 'bf706ae5eb46')\nCreate Date: 2018-04-10 20:46:57.890773"
                    },
                    "2019-10-09_15-05_cca2f5d568c8_add_encrypted_extra_to_dbs.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 39,
                      "has_main": false,
                      "docstring": "add encrypted_extra to dbs\n\nRevision ID: cca2f5d568c8\nRevises: b6fa807eac07\nCreate Date: 2019-10-09 15:05:06.965042"
                    },
                    "2018-07-20_15-57_e9df189e5c7e_update_base_metrics.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "BaseMetricMixin",
                        "DruidMetric",
                        "SqlMetric"
                      ],
                      "imports": [
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "superset",
                        "superset.utils.core"
                      ],
                      "size_lines": 136,
                      "has_main": false,
                      "docstring": "update base metrics\n\nNote that the metrics table was previously partially modifed by revision\nf231d82b9b26.\n\nRevision ID: e9df189e5c7e\nRevises: 7f2635b51f5d\nCreate Date: 2018-07-20 15:57:48.118304"
                    },
                    "2016-03-25_14-35_1d2ddd543133_log_dt.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 39,
                      "has_main": false,
                      "docstring": "log dt\n\nRevision ID: 1d2ddd543133\nRevises: d2424a248d63\nCreate Date: 2016-03-25 14:35:44.642576"
                    },
                    "2016-03-13_09-56_a2d606a761d9_adding_favstar_model.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 48,
                      "has_main": false,
                      "docstring": "adding favstar model\n\nRevision ID: a2d606a761d9\nRevises: 430039611635\nCreate Date: 2016-03-13 09:56:58.329512"
                    },
                    "2016-03-26_15-09_fee7b758c130_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [],
                      "size_lines": 36,
                      "has_main": false,
                      "docstring": "empty message\n\nRevision ID: fee7b758c130\nRevises: ('1d2ddd543133', '763d4b211ec9')\nCreate Date: 2016-03-26 15:09:43.583114"
                    },
                    "2016-07-06_22-04_f162a1dea4c4_d3format_by_metric.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 45,
                      "has_main": false,
                      "docstring": "d3format_by_metric\n\nRevision ID: f162a1dea4c4\nRevises: 960c69cb1f5b\nCreate Date: 2016-07-06 22:04:28.685100"
                    },
                    "2024-05-08_19-33_4081be5b6b74_enable_catalog_in_databricks.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "superset.migrations.shared.catalogs"
                      ],
                      "size_lines": 41,
                      "has_main": false,
                      "docstring": "Enable catalog in Databricks\n\nRevision ID: 4081be5b6b74\nRevises: 645bb206f96c\nCreate Date: 2024-05-08 19:33:18.311411"
                    },
                    "2024-05-09_18-44_87ffc36f9842_enable_catalog_in_bigquery_presto_trino_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "superset.migrations.shared.catalogs"
                      ],
                      "size_lines": 41,
                      "has_main": false,
                      "docstring": "Enable catalog in BigQuery/Presto/Trino/Snowflake\n\nRevision ID: 87ffc36f9842\nRevises: 4081be5b6b74\nCreate Date: 2024-05-09 18:44:43.289445"
                    },
                    "2016-10-02_10-35_ef8843b41dac_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [],
                      "size_lines": 36,
                      "has_main": false,
                      "docstring": "empty message\n\nRevision ID: ef8843b41dac\nRevises: ('3b626e2a6783', 'ab3d66c4246e')\nCreate Date: 2016-10-02 10:35:38.825231"
                    },
                    "2025-03-19_17-46_32bf93dfe2a4_add_on_cascade_in_fab_tables.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "superset.migrations.shared.utils"
                      ],
                      "size_lines": 112,
                      "has_main": false,
                      "docstring": "Add on cascade to foreign keys in ab_permission_view_role and ab_user_role\n\nRevision ID: 32bf93dfe2a4\nRevises: 94e7a3499973\nCreate Date: 2025-03-19 17:46:25.702610"
                    },
                    "2022-10-20_10-48_f3c2d8ec8595_create_ssh_tunnel_credentials_tbl.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "uuid",
                        "sqlalchemy",
                        "alembic",
                        "sqlalchemy_utils",
                        "superset",
                        "superset.extensions"
                      ],
                      "size_lines": 90,
                      "has_main": false,
                      "docstring": "create_ssh_tunnel_credentials_tbl\n\nRevision ID: f3c2d8ec8595\nRevises: 4ce1d9b25135\nCreate Date: 2022-10-20 10:48:08.722861"
                    },
                    "2016-09-22_10-21_3b626e2a6783_sync_db_with_models.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "logging",
                        "sqlalchemy",
                        "alembic",
                        "sqlalchemy.dialects",
                        "superset",
                        "superset.utils.core"
                      ],
                      "size_lines": 136,
                      "has_main": false,
                      "docstring": "Sync DB with the models.py.\n\nSqlite doesn't support alter on tables, that's why most of the operations\nare surrounded with try except.\n\nRevision ID: 3b626e2a6783\nRevises: 5e4a03ef0bf0\nCreate Date: 2016-09-22 10:21:33.618976"
                    },
                    "2024-01-19_10-03_e863403c0c50_drop_url_table.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "importlib",
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 45,
                      "has_main": false,
                      "docstring": "drop_url_table\n\nRevision ID: e863403c0c50\nRevises: 214f580d09c9\nCreate Date: 2023-12-28 16:03:31.691033"
                    },
                    "2024-05-09_19-19_f7b6750b67e8_change_mediumtext_to_longtext.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "alembic",
                        "sqlalchemy.dialects.mysql",
                        "sqlalchemy.dialects.mysql.base",
                        "superset.migrations.shared.utils",
                        "superset.utils.core"
                      ],
                      "size_lines": 55,
                      "has_main": false,
                      "docstring": "change_mediumtext_to_longtext\nRevision ID: f7b6750b67e8\nRevises: f84fde59123a\nCreate Date: 2024-05-09 19:19:46.630140"
                    },
                    "2015-10-05_22-11_1e2841a4128_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 39,
                      "has_main": false,
                      "docstring": "empty message\n\nRevision ID: 1e2841a4128\nRevises: 5a7bad26f2a7\nCreate Date: 2015-10-05 22:11:00.537054"
                    },
                    "2021-08-02_21-14_6d20ba9ecb33_add_last_saved_at_to_slice_model.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 66,
                      "has_main": false,
                      "docstring": "add_last_saved_at_to_slice_model\n\nRevision ID: 6d20ba9ecb33\nRevises: 'f6196627326f'\nCreate Date: 2021-08-02 21:14:58.200438"
                    },
                    "2024-01-18_12-12_15a2c68a2e6b_merging_two_heads.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [],
                      "size_lines": 36,
                      "has_main": false,
                      "docstring": "merging two heads\n\nRevision ID: 15a2c68a2e6b\nRevises: ('96164e3017c6', 'a32e0c4d8646')\nCreate Date: 2024-01-18 12:12:52.174742"
                    },
                    "2021-03-29_11-15_3ebe0993c770_filterset_table.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 57,
                      "has_main": false,
                      "docstring": "add filter set model\n\nRevision ID: 3ebe0993c770\nRevises: 07071313dd52\nCreate Date: 2021-03-29 11:15:48.831225"
                    },
                    "2021-08-02_16-39_e323605f370a_fix_schemas_allowed_for_csv_upload.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "Database"
                      ],
                      "imports": [
                        "logging",
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "superset",
                        "superset.utils"
                      ],
                      "size_lines": 83,
                      "has_main": false,
                      "docstring": "fix schemas_allowed_for_csv_upload\n\nRevision ID: e323605f370a\nRevises: 31b2a1039d4a\nCreate Date: 2021-08-02 16:39:45.329151"
                    },
                    "2015-10-19_20-54_2929af7925ed_tz_offsets_in_data_sources.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 41,
                      "has_main": false,
                      "docstring": "TZ offsets in data sources\n\nRevision ID: 2929af7925ed\nRevises: 1e2841a4128\nCreate Date: 2015-10-19 20:54:00.565633"
                    },
                    "2021-08-31_11-37_021b81fe4fbb_add_type_to_native_filter_configuration.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "Dashboard"
                      ],
                      "imports": [
                        "logging",
                        "sqlalchemy",
                        "alembic",
                        "sqlalchemy.ext.declarative",
                        "superset",
                        "superset.utils"
                      ],
                      "size_lines": 123,
                      "has_main": false,
                      "docstring": "Add type to native filter configuration\n\nRevision ID: 021b81fe4fbb\nRevises: 07071313dd52\nCreate Date: 2021-08-31 11:37:40.604081"
                    },
                    "2019-02-01_16-07_e553e78e90c5_add_druid_auth_py_py.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 47,
                      "has_main": false,
                      "docstring": "add_druid_auth_py.py\n\nRevision ID: e553e78e90c5\nRevises: 18dc26817ad2\nCreate Date: 2019-02-01 16:07:04.268023"
                    },
                    "2020-12-11_17-02_c25cb2c78727_security_converge_annotations.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "alembic",
                        "sqlalchemy.exc",
                        "sqlalchemy.orm",
                        "superset.migrations.shared.security_converge"
                      ],
                      "size_lines": 117,
                      "has_main": false,
                      "docstring": "security converge annotations\n\nRevision ID: c25cb2c78727\nRevises: ccb74baaa89b\nCreate Date: 2020-12-11 17:02:21.213046"
                    },
                    "2019-04-09_16-27_80aa3f04bc82_add_parent_ids_in_dashboard_layout.py": {
                      "functions": [
                        "add_parent_ids",
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "Dashboard"
                      ],
                      "imports": [
                        "logging",
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "superset",
                        "superset.utils"
                      ],
                      "size_lines": 116,
                      "has_main": false,
                      "docstring": "Add Parent ids in dashboard layout metadata\n\nRevision ID: 80aa3f04bc82\nRevises: 45e7da7cfeba\nCreate Date: 2019-04-09 16:27:03.392872"
                    },
                    "2024-04-01_22-44_c22cb5c2e546_user_attr_avatar_url.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "superset.migrations.shared.utils"
                      ],
                      "size_lines": 42,
                      "has_main": false,
                      "docstring": "empty message\n\nRevision ID: c22cb5c2e546\nRevises: be1b217cd8cd\nCreate Date: 2024-04-01 22:44:40.386543"
                    },
                    "2021-04-12_12-38_fc3a3a8ff221_migrate_filter_sets_to_new_format.py": {
                      "functions": [
                        "upgrade_select_filters",
                        "upgrade_filter_set",
                        "downgrade_filter_set",
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "Dashboard"
                      ],
                      "imports": [
                        "collections.abc",
                        "typing",
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "superset",
                        "superset.utils"
                      ],
                      "size_lines": 235,
                      "has_main": false,
                      "docstring": "migrate filter sets to new format\n\nRevision ID: fc3a3a8ff221\nRevises: 085f06488938\nCreate Date: 2021-04-12 12:38:03.913514"
                    },
                    "2024-08-13_15-17_39549add7bfc_remove_sl_table_columns_table.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic",
                        "superset.migrations.shared.utils"
                      ],
                      "size_lines": 58,
                      "has_main": false,
                      "docstring": "remove sl_table_columns_table\n\nRevision ID: 39549add7bfc\nRevises: 02f4f7811799\nCreate Date: 2024-08-13 15:17:23.273168"
                    },
                    "2018-03-20_19-47_f231d82b9b26_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic",
                        "superset.utils.core"
                      ],
                      "size_lines": 78,
                      "has_main": false,
                      "docstring": "empty message\n\nRevision ID: f231d82b9b26\nRevises: e68c4473c581\nCreate Date: 2018-03-20 19:47:54.991259"
                    },
                    "2017-03-16_18-10_db527d8c4c78_add_db_verbose_name.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "logging",
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 56,
                      "has_main": false,
                      "docstring": "Add verbose name to DruidCluster and Database\n\nRevision ID: db527d8c4c78\nRevises: b318dfe5fb6c\nCreate Date: 2017-03-16 18:10:57.193035"
                    },
                    "2018-05-15_20-28_6c7537a6004a_models_for_email_reports.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 115,
                      "has_main": false,
                      "docstring": "models for email reports\n\nRevision ID: 6c7537a6004a\nRevises: e502db2af7be\nCreate Date: 2018-05-15 20:28:51.977572"
                    },
                    "2020-04-24_10-46_e557699a813e_add_tables_relation_to_row_level_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic",
                        "superset.utils.core"
                      ],
                      "size_lines": 125,
                      "has_main": false,
                      "docstring": "add_tables_relation_to_row_level_security\n\nRevision ID: e557699a813e\nRevises: 743a117f0d98\nCreate Date: 2020-04-24 10:46:24.119363"
                    },
                    "2023-07-07_20-06_f92a3124dd66_drop_rouge_constraints_and_tables.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "alembic",
                        "sqlalchemy.engine.reflection",
                        "superset.utils.core"
                      ],
                      "size_lines": 70,
                      "has_main": false,
                      "docstring": "drop rouge constraints and tables\n\nRevision ID: f92a3124dd66\nRevises: 240d23c7f86f\nCreate Date: 2023-07-07 20:06:22.659096"
                    },
                    "2018-08-13_11-30_1a1d627ebd8e_position_json.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic",
                        "superset.utils.core"
                      ],
                      "size_lines": 53,
                      "has_main": false,
                      "docstring": "position_json\n\nRevision ID: 1a1d627ebd8e\nRevises: 0c5070e96b57\nCreate Date: 2018-08-13 11:30:07.101702"
                    },
                    "2023-03-29_20-30_07f9a902af1b_drop_postgres_enum_constrains_for_tags.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "alembic",
                        "sqlalchemy.dialects"
                      ],
                      "size_lines": 48,
                      "has_main": false,
                      "docstring": "drop postgres enum constrains for tags\n\nRevision ID: 07f9a902af1b\nRevises: b5ea9d343307\nCreate Date: 2023-03-29 20:30:10.214951"
                    },
                    "2023-08-02_15-23_0769ef90fddd_fix_schema_perm_for_datasets.py": {
                      "functions": [
                        "fix_datasets_schema_perm",
                        "fix_charts_schema_perm",
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "SqlaTable",
                        "Slice",
                        "Database"
                      ],
                      "imports": [
                        "sqlalchemy",
                        "alembic",
                        "sqlalchemy.dialects.sqlite.base",
                        "sqlalchemy.ext.declarative",
                        "superset"
                      ],
                      "size_lines": 109,
                      "has_main": false,
                      "docstring": "Fix schema perm for datasets\n\nRevision ID: 0769ef90fddd\nRevises: ee179a490af9\nCreate Date: 2023-08-02 15:23:58.242396"
                    },
                    "2016-05-27_15-03_1226819ee0e3_fix_wrong_constraint_on_table_columns.py": {
                      "functions": [
                        "find_constraint_name",
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "logging",
                        "alembic",
                        "superset",
                        "superset.utils.core"
                      ],
                      "size_lines": 79,
                      "has_main": false,
                      "docstring": "Fix wrong constraint on table columns\n\nRevision ID: 1226819ee0e3\nRevises: 956a063c52b3\nCreate Date: 2016-05-27 15:03:32.980343"
                    },
                    "2024-01-18_15-20_214f580d09c9_migrate_filter_boxes_to_native_filters.py": {
                      "functions": [
                        "upgrade",
                        "downgrade",
                        "__repr__",
                        "__repr__"
                      ],
                      "classes": [
                        "Dashboard",
                        "Slice"
                      ],
                      "imports": [
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "sqlalchemy.orm",
                        "superset",
                        "superset.migrations.shared.native_filters",
                        "superset.migrations.shared.utils"
                      ],
                      "size_lines": 87,
                      "has_main": false,
                      "docstring": "migrate_filter_boxes_to_native_filters\n\nRevision ID: 214f580d09c9\nRevises: a32e0c4d8646\nCreate Date: 2024-01-10 09:20:32.233912"
                    },
                    "2018-11-27_11-53_a61b40f9f57f_remove_allow_run_sync.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 48,
                      "has_main": false,
                      "docstring": "remove allow_run_sync\n\nRevision ID: a61b40f9f57f\nRevises: 46f444d8b9b7\nCreate Date: 2018-11-27 11:53:17.512627"
                    },
                    "2021-09-27_11-31_60dc453f4e2e_migrate_timeseries_limit_metric_to_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "Slice"
                      ],
                      "imports": [
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "superset",
                        "superset.utils"
                      ],
                      "size_lines": 73,
                      "has_main": false,
                      "docstring": "migrate timeseries_limit_metric to legacy_order_by in pivot_table_v2\n\nRevision ID: 60dc453f4e2e\nRevises: 3ebe0993c770\nCreate Date: 2021-09-27 11:31:53.453164"
                    },
                    "2023-02-28_14-46_c0a3ea245b61_remove_show_native_filters.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "Dashboard"
                      ],
                      "imports": [
                        "sqlalchemy",
                        "alembic",
                        "sqlalchemy.ext.declarative",
                        "superset",
                        "superset.utils"
                      ],
                      "size_lines": 66,
                      "has_main": false,
                      "docstring": "remove_show_native_filters\n\nRevision ID: c0a3ea245b61\nRevises: 9c2a5681ddfd\nCreate Date: 2023-02-28 14:46:59.597847"
                    },
                    "2020-11-20_14-24_e38177dbf641_security_converge_saved_queries.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "alembic",
                        "sqlalchemy.exc",
                        "sqlalchemy.orm",
                        "superset.migrations.shared.security_converge"
                      ],
                      "size_lines": 121,
                      "has_main": false,
                      "docstring": "security converge saved queries\n\nRevision ID: e38177dbf641\nRevises: a8173232b786\nCreate Date: 2020-11-20 14:24:03.643031"
                    },
                    "2017-03-16_14-55_ea033256294a_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [],
                      "size_lines": 36,
                      "has_main": false,
                      "docstring": "empty message\n\nRevision ID: ea033256294a\nRevises: ('732f1c06bcbf', 'b318dfe5fb6c')\nCreate Date: 2017-03-16 14:55:59.431283"
                    },
                    "2021-09-19_14-42_b92d69a6643c_rename_csv_to_file.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic",
                        "sqlalchemy.engine.reflection"
                      ],
                      "size_lines": 70,
                      "has_main": false,
                      "docstring": "rename_csv_to_file\n\nRevision ID: b92d69a6643c\nRevises: aea15018d53b\nCreate Date: 2021-09-19 14:42:20.130368"
                    },
                    "2018-06-04_11-12_c5756bec8b47_time_grain_sqla.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "Slice"
                      ],
                      "imports": [
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "superset",
                        "superset.utils"
                      ],
                      "size_lines": 80,
                      "has_main": false,
                      "docstring": "Time grain SQLA\n\nRevision ID: c5756bec8b47\nRevises: e502db2af7be\nCreate Date: 2018-06-04 11:12:59.878742"
                    },
                    "2023-07-19_17-54_ee179a490af9_deckgl_path_width_units.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "Slice"
                      ],
                      "imports": [
                        "logging",
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "superset",
                        "superset.utils"
                      ],
                      "size_lines": 72,
                      "has_main": false,
                      "docstring": "deckgl-path-width-units\n\nRevision ID: ee179a490af9\nRevises: e0f6f91c2055\nCreate Date: 2023-07-19 17:54:06.752360"
                    },
                    "2020-08-12_10-01_f120347acb39_add_extra_column_to_tables_and_metrics.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 41,
                      "has_main": false,
                      "docstring": "Add extra column to tables and metrics\n\nRevision ID: f120347acb39\nRevises: f2672aa8350a\nCreate Date: 2020-08-12 10:01:43.531845"
                    },
                    "2022-04-18_11-20_ad07e4fdbaba_rm_time_range_endpoints_from_qc_3.py": {
                      "functions": [
                        "upgrade_slice",
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "Slice"
                      ],
                      "imports": [
                        "sqlalchemy",
                        "alembic",
                        "sqlalchemy.ext.declarative",
                        "superset",
                        "superset.utils"
                      ],
                      "size_lines": 84,
                      "has_main": false,
                      "docstring": "rm_time_range_endpoints_from_qc_3\n\nRevision ID: ad07e4fdbaba\nRevises: cecc6bf46990\nCreate Date: 2022-04-18 11:20:47.390901"
                    },
                    "2021-12-10_19-25_bb38f40aa3ff_add_force_screenshot_to_alerts_reports.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "ReportSchedule"
                      ],
                      "imports": [
                        "sqlalchemy",
                        "alembic",
                        "sqlalchemy.ext.declarative",
                        "superset"
                      ],
                      "size_lines": 66,
                      "has_main": false,
                      "docstring": "Add force_screenshot to alerts/reports\n\nRevision ID: bb38f40aa3ff\nRevises: 31bb738bd1d2\nCreate Date: 2021-12-10 19:25:29.802949"
                    },
                    "2019-05-06_14-30_afc69274c25a_alter_sql_column_data_type_in_query_mysql_table.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic",
                        "sqlalchemy.dialects",
                        "sqlalchemy.dialects.mysql.base"
                      ],
                      "size_lines": 60,
                      "has_main": false,
                      "docstring": "update the sql, select_sql, and executed_sql columns in the\n   query table in mysql dbs to be long text columns\n\nRevision ID: afc69274c25a\nRevises: e9df189e5c7e\nCreate Date: 2019-05-06 14:30:26.181449"
                    },
                    "2020-08-31_20-30_2e5a0ee25ed4_refractor_alerting.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic",
                        "sqlalchemy.dialects"
                      ],
                      "size_lines": 153,
                      "has_main": false,
                      "docstring": "refractor_alerting\n\nRevision ID: 2e5a0ee25ed4\nRevises: f80a3b88324b\nCreate Date: 2020-08-31 20:30:30.781478"
                    },
                    "2018-05-09_23-45_e502db2af7be_add_template_params_to_tables.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 42,
                      "has_main": false,
                      "docstring": "add template_params to tables\n\nRevision ID: e502db2af7be\nRevises: 5ccf602336a0\nCreate Date: 2018-05-09 23:45:14.296283"
                    },
                    "2016-10-14_11-17_7e3ddad2a00b_results_key_to_query.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 41,
                      "has_main": false,
                      "docstring": "results_key to query\n\nRevision ID: 7e3ddad2a00b\nRevises: b46fa1b0b39e\nCreate Date: 2016-10-14 11:17:54.995156"
                    },
                    "2023-12-15_17-58_06dd9ff00fe8_add_percent_calculation_type_funnel_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "Slice"
                      ],
                      "imports": [
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "superset",
                        "superset.migrations.shared.utils",
                        "superset.utils"
                      ],
                      "size_lines": 75,
                      "has_main": false,
                      "docstring": "add_percent_calculation_type_funnel_chart\n\nRevision ID: 06dd9ff00fe8\nRevises: b7851ee5522f\nCreate Date: 2023-12-15 17:58:18.277951"
                    },
                    "2020-12-23_11-34_c878781977c6_alert_reports_shared_uniqueness.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic",
                        "sqlalchemy.dialects.mysql.base",
                        "sqlalchemy.dialects.postgresql.base",
                        "sqlalchemy.dialects.sqlite.base"
                      ],
                      "size_lines": 103,
                      "has_main": false,
                      "docstring": "alert reports shared uniqueness\n\nRevision ID: c878781977c6\nRevises: 73fd22e742ab\nCreate Date: 2020-12-23 11:34:53.882200"
                    },
                    "2022-06-14_15-28_e09b4ae78457_resize_key_value_blob.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 51,
                      "has_main": false,
                      "docstring": "Resize key_value blob\n\nRevision ID: e09b4ae78457\nRevises: e786798587de\nCreate Date: 2022-06-14 15:28:42.746349"
                    },
                    "2022-08-16_15-23_6d3c6f9d665d_fix_table_chart_conditional_formatting_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "Slice"
                      ],
                      "imports": [
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "superset",
                        "superset.utils"
                      ],
                      "size_lines": 82,
                      "has_main": false,
                      "docstring": "fix_table_chart_conditional_formatting_colors\n\nRevision ID: 6d3c6f9d665d\nRevises: ffa79af61a56\nCreate Date: 2022-08-16 15:23:42.860038"
                    },
                    "2017-03-08_11-48_b318dfe5fb6c_adding_verbose_name_to_druid_column.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 41,
                      "has_main": false,
                      "docstring": "adding verbose_name to druid column\n\nRevision ID: b318dfe5fb6c\nRevises: d6db5a5cdb5d\nCreate Date: 2017-03-08 11:48:10.835741"
                    },
                    "2023-03-27_12-30_7e67aecbf3f1_chart_ds_constraint.py": {
                      "functions": [
                        "upgrade_slc",
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "Slice"
                      ],
                      "imports": [
                        "logging",
                        "sqlalchemy",
                        "alembic",
                        "sqlalchemy.ext.declarative",
                        "superset",
                        "superset.utils"
                      ],
                      "size_lines": 113,
                      "has_main": false,
                      "docstring": "chart-ds-constraint\n\nRevision ID: 7e67aecbf3f1\nRevises: b5ea9d343307\nCreate Date: 2023-03-27 12:30:01.164594"
                    },
                    "2022-02-25_08-06_ab9a9d86e695_deprecate_time_range_endpoints.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [],
                      "size_lines": 36,
                      "has_main": false,
                      "docstring": "deprecate time_range_endpoints\n\nRevision ID: ab9a9d86e695\nRevises: b5a422d8e252\nCreate Date: 2022-02-25 08:06:14.835094"
                    },
                    "2016-03-17_08-40_836c0bf75904_cache_timeouts.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 47,
                      "has_main": false,
                      "docstring": "cache_timeouts\n\nRevision ID: 836c0bf75904\nRevises: 18e88e1cc004\nCreate Date: 2016-03-17 08:40:03.186534"
                    },
                    "2018-07-23_11-18_ec1f88a35cc6_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [],
                      "size_lines": 36,
                      "has_main": false,
                      "docstring": "empty message\n\nRevision ID: ec1f88a35cc6\nRevises: ('bebcf3fed1fe', '705732c70154')\nCreate Date: 2018-07-23 11:18:11.866106"
                    },
                    "2021-05-27_16-10_6f139c533bea_add_advanced_data_types_to_column_models.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 67,
                      "has_main": false,
                      "docstring": "adding advanced data type to column models\n\nRevision ID: 6f139c533bea\nRevises: cbe71abde154\nCreate Date: 2021-05-27 16:10:59.567684"
                    },
                    "2024-01-18_14-41_a32e0c4d8646_migrate_sunburst_chart.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "alembic",
                        "superset",
                        "superset.migrations.shared.migrate_viz"
                      ],
                      "size_lines": 45,
                      "has_main": false,
                      "docstring": "migrate-sunburst-chart\n\nRevision ID: a32e0c4d8646\nRevises: 59a1450b3c10\nCreate Date: 2023-12-22 14:41:43.638321"
                    },
                    "2016-11-02_17-36_c611f2b591b8_dim_spec.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 39,
                      "has_main": false,
                      "docstring": "dim_spec\n\nRevision ID: c611f2b591b8\nRevises: ad4d656d92bc\nCreate Date: 2016-11-02 17:36:04.970448"
                    },
                    "2017-07-26_20-09_ca69c70ec99b_tracking_url.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 39,
                      "has_main": false,
                      "docstring": "tracking_url\n\nRevision ID: ca69c70ec99b\nRevises: a65458420354\nCreate Date: 2017-07-26 20:09:52.606416"
                    },
                    "2020-10-20_17-28_585b0b1a7b18_add_exec_info_to_saved_queries.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 41,
                      "has_main": false,
                      "docstring": "add exec info to saved queries\n\nRevision ID: 585b0b1a7b18\nRevises: af30ca79208f\nCreate Date: 2020-10-20 17:28:22.857694"
                    },
                    "2016-04-25_08-54_c3a8f8611885_materializing_permission.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "Slice"
                      ],
                      "imports": [
                        "sqlalchemy",
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "superset"
                      ],
                      "size_lines": 68,
                      "has_main": false,
                      "docstring": "Materializing permission\n\nRevision ID: c3a8f8611885\nRevises: 4fa88fe24e94\nCreate Date: 2016-04-25 08:54:04.303859"
                    },
                    "2018-07-20_15-31_7f2635b51f5d_update_base_columns.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "BaseColumnMixin",
                        "DruidColumn",
                        "TableColumn"
                      ],
                      "imports": [
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "superset",
                        "superset.utils.core"
                      ],
                      "size_lines": 120,
                      "has_main": false,
                      "docstring": "update base columns\n\nNote that the columns table was previously partially modifed by revision\nf231d82b9b26.\n\nRevision ID: 7f2635b51f5d\nRevises: 937d04c16b64\nCreate Date: 2018-07-20 15:31:05.058050"
                    },
                    "2020-12-11_11-45_1f6dca87d1a2_security_converge_dashboards.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "alembic",
                        "sqlalchemy.exc",
                        "sqlalchemy.orm",
                        "superset.migrations.shared.security_converge"
                      ],
                      "size_lines": 129,
                      "has_main": false,
                      "docstring": "security converge dashboards\n\nRevision ID: 1f6dca87d1a2\nRevises: 4b84f97828aa\nCreate Date: 2020-12-11 11:45:25.051084"
                    },
                    "2024-02-07_17-13_87d38ad83218_migrate_can_view_and_drill_permission.py": {
                      "functions": [
                        "do_upgrade",
                        "do_downgrade",
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "alembic",
                        "sqlalchemy.exc",
                        "sqlalchemy.orm",
                        "superset.migrations.shared.security_converge"
                      ],
                      "size_lines": 86,
                      "has_main": false,
                      "docstring": "Migrate can_view_and_drill permission\n\nRevision ID: 87d38ad83218\nRevises: 1cf8e4344e2b\nCreate Date: 2024-02-07 17:13:20.937186"
                    },
                    "2020-12-10_15-05_45731db65d9c_security_converge_datasets.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "alembic",
                        "sqlalchemy.exc",
                        "sqlalchemy.orm",
                        "superset.migrations.shared.security_converge"
                      ],
                      "size_lines": 115,
                      "has_main": false,
                      "docstring": "security converge datasets\n\nRevision ID: 45731db65d9c\nRevises: ccb74baaa89b\nCreate Date: 2020-12-10 15:05:44.928020"
                    },
                    "2024-05-24_11-31_02f4f7811799_remove_sl_dataset_columns_table.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic",
                        "superset.migrations.shared.utils"
                      ],
                      "size_lines": 58,
                      "has_main": false,
                      "docstring": "remove sl_dataset_columns tables\n\nRevision ID: 02f4f7811799\nRevises: f7b6750b67e8\nCreate Date: 2024-05-24 11:31:57.115586"
                    },
                    "2016-10-25_10-16_ad4d656d92bc_add_avg_metric.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 43,
                      "has_main": false,
                      "docstring": "Add avg() to default metrics\n\nRevision ID: ad4d656d92bc\nRevises: b46fa1b0b39e\nCreate Date: 2016-10-25 10:16:39.871078"
                    },
                    "2016-05-01_12-21_f0fbf6129e13_adding_verbose_name_to_tablecolumn.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 42,
                      "has_main": false,
                      "docstring": "Adding verbose_name to tablecolumn\n\nRevision ID: f0fbf6129e13\nRevises: c3a8f8611885\nCreate Date: 2016-05-01 12:21:18.331191"
                    },
                    "2021-02-22_11-22_67da9ef1ef9c_add_hide_left_bar_to_tabstate.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic",
                        "sqlalchemy.sql"
                      ],
                      "size_lines": 49,
                      "has_main": false,
                      "docstring": "add hide_left_bar to tabstate\n\nRevision ID: 67da9ef1ef9c\nRevises: 1412ec1e5a7b\nCreate Date: 2021-02-22 11:22:10.156942"
                    },
                    "2020-05-12_12-59_ea396d202291_ctas_method_in_query.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 43,
                      "has_main": false,
                      "docstring": "Add ctas_method to the Query object\n\nRevision ID: ea396d202291\nRevises: e557699a813e\nCreate Date: 2020-05-12 12:59:26.583276"
                    },
                    "2018-07-22_21-51_705732c70154_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [],
                      "size_lines": 36,
                      "has_main": false,
                      "docstring": "empty message\n\nRevision ID: 705732c70154\nRevises: ('4451805bbaa1', '1d9e835a84f9')\nCreate Date: 2018-07-22 21:51:19.235558"
                    },
                    "2022-06-19_16-17_f3afaf1f11f0_add_unique_name_desc_rls.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "RowLevelSecurityFilter"
                      ],
                      "imports": [
                        "sqlalchemy",
                        "alembic",
                        "sqlalchemy.ext.declarative",
                        "sqlalchemy.orm"
                      ],
                      "size_lines": 79,
                      "has_main": false,
                      "docstring": "add_unique_name_desc_rls\n\nRevision ID: f3afaf1f11f0\nRevises: e09b4ae78457\nCreate Date: 2022-06-19 16:17:23.318618"
                    },
                    "2018-08-01_11-47_7fcdcde0761c_.py": {
                      "functions": [
                        "is_v2_dash",
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "Dashboard"
                      ],
                      "imports": [
                        "re",
                        "sqlalchemy",
                        "alembic",
                        "sqlalchemy.ext.declarative",
                        "superset",
                        "superset.utils"
                      ],
                      "size_lines": 84,
                      "has_main": false,
                      "docstring": "Reduce position_json size by remove extra space and component id prefix\n\nRevision ID: 7fcdcde0761c\nRevises: c18bd4186f15\nCreate Date: 2018-08-01 11:47:02.233971"
                    },
                    "2016-05-11_17-28_956a063c52b3_adjusting_key_length.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 151,
                      "has_main": false,
                      "docstring": "adjusting key length\n\nRevision ID: 956a063c52b3\nRevises: f0fbf6129e13\nCreate Date: 2016-05-11 17:28:32.407340"
                    },
                    "2020-08-08_18-10_f2672aa8350a_add_slack_to_alerts.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 43,
                      "has_main": false,
                      "docstring": "add_slack_to_alerts\n\nRevision ID: f2672aa8350a\nRevises: 2f1d15e8a6af\nCreate Date: 2020-08-08 18:10:51.973551"
                    },
                    "2019-12-04_17-07_0a6f12f60c73_add_role_level_security.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 62,
                      "has_main": false,
                      "docstring": "add_role_level_security\n\nRevision ID: 0a6f12f60c73\nRevises: 3325d4caccc8\nCreate Date: 2019-12-04 17:07:54.390805"
                    },
                    "2020-08-28_17-16_175ea3592453_cache_lookup.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 54,
                      "has_main": false,
                      "docstring": "Add cache to datasource lookup table.\n\nRevision ID: 175ea3592453\nRevises: f80a3b88324b\nCreate Date: 2020-08-28 17:16:57.379425"
                    },
                    "2019-11-01_09-18_c2acd2cf3df2_alter_type_of_dbs_encrypted_extra.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 64,
                      "has_main": false,
                      "docstring": "alter type of dbs encrypted_extra\n\n\nRevision ID: c2acd2cf3df2\nRevises: cca2f5d568c8\nCreate Date: 2019-11-01 09:18:36.953603"
                    },
                    "2021-07-09_12-18_ae1ed299413b_add_timezone_to_report_schedule.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 45,
                      "has_main": false,
                      "docstring": "add_timezone_to_report_schedule\n\nRevision ID: ae1ed299413b\nRevises: 030c840e3a1c\nCreate Date: 2021-07-09 12:18:52.057815"
                    },
                    "2016-09-30_18-01_ab3d66c4246e_add_cache_timeout_to_druid_cluster.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 39,
                      "has_main": false,
                      "docstring": "add_cache_timeout_to_druid_cluster\n\nRevision ID: ab3d66c4246e\nRevises: eca4694defa7\nCreate Date: 2016-09-30 18:01:30.579760"
                    },
                    "2024-01-05_16-20_65a167d4c62e_add_indexes_to_report_models.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "alembic"
                      ],
                      "size_lines": 63,
                      "has_main": false,
                      "docstring": "add indexes to report models\n\nRevision ID: 65a167d4c62e\nRevises: 06dd9ff00fe8\nCreate Date: 2024-01-05 16:20:31.598995"
                    },
                    "2021-12-13_14-06_fe23025b9441_rename_big_viz_total_form_data_fields.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "Slice"
                      ],
                      "imports": [
                        "logging",
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "superset",
                        "superset.utils"
                      ],
                      "size_lines": 101,
                      "has_main": false,
                      "docstring": "rename_big_viz_total_form_data_fields\n\nRevision ID: fe23025b9441\nRevises: 3ba29ecbaac5\nCreate Date: 2021-12-13 14:06:24.426970"
                    },
                    "2018-06-07_09-52_afb7730f6a9c_remove_empty_filters.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "Slice"
                      ],
                      "imports": [
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "superset",
                        "superset.utils"
                      ],
                      "size_lines": 75,
                      "has_main": false,
                      "docstring": "remove empty filters\n\nRevision ID: afb7730f6a9c\nRevises: c5756bec8b47\nCreate Date: 2018-06-07 09:52:54.535961"
                    },
                    "2023-06-22_13-39_6fbe660cac39_add_on_delete_cascade_for_tables_references.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "superset.migrations.shared.constraints"
                      ],
                      "size_lines": 67,
                      "has_main": false,
                      "docstring": "add on delete cascade for tables references\n\nRevision ID: 6fbe660cac39\nRevises: 90139bf715e4\nCreate Date: 2023-06-22 13:39:47.989373"
                    },
                    "2023-06-08_09-02_9ba2ce3086e5_migrate_pivot_table_v1_to_v2.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "alembic",
                        "superset",
                        "superset.migrations.shared.migrate_viz"
                      ],
                      "size_lines": 45,
                      "has_main": false,
                      "docstring": "migrate-pivot-table-v1-to-v2\n\nRevision ID: 9ba2ce3086e5\nRevises: 4ea966691069\nCreate Date: 2023-08-06 09:02:10.148992"
                    },
                    "2015-12-13_08-38_55179c7f25c7_sqla_descr.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 39,
                      "has_main": false,
                      "docstring": "sqla_descr\n\nRevision ID: 55179c7f25c7\nRevises: 315b3f4da9b0\nCreate Date: 2015-12-13 08:38:43.704145"
                    },
                    "2021-07-21_12-09_030c840e3a1c_add_query_context_to_slices.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 41,
                      "has_main": false,
                      "docstring": "Add query context to slices\n\nRevision ID: 030c840e3a1c\nRevises: 3317e9248280\nCreate Date: 2021-07-21 12:09:37.048337"
                    },
                    "2023-05-01_12-03_9c2a5681ddfd_convert_key_value_entries_to_json.py": {
                      "functions": [
                        "upgrade",
                        "downgrade",
                        "find_class"
                      ],
                      "classes": [
                        "RestrictedUnpickler",
                        "KeyValueEntry"
                      ],
                      "imports": [
                        "io",
                        "pickle",
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "sqlalchemy.orm",
                        "superset",
                        "superset.migrations.shared.utils",
                        "superset.utils"
                      ],
                      "size_lines": 97,
                      "has_main": false,
                      "docstring": "convert key-value entries to json\n\nRevision ID: 9c2a5681ddfd\nRevises: f3c2d8ec8595\nCreate Date: 2023-05-01 12:03:17.079862"
                    },
                    "2018-07-20_16-08_937d04c16b64_update_datasources.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 47,
                      "has_main": false,
                      "docstring": "update datasources\n\nRevision ID: 937d04c16b64\nRevises: d94d33dbe938\nCreate Date: 2018-07-20 16:08:10.195843"
                    },
                    "2020-12-16_12-15_e37912a26567_security_converge_queries.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "alembic",
                        "sqlalchemy.exc",
                        "sqlalchemy.orm",
                        "superset.migrations.shared.security_converge"
                      ],
                      "size_lines": 75,
                      "has_main": false,
                      "docstring": "security converge queries\n\nRevision ID: e37912a26567\nRevises: 42b4c9e01447\nCreate Date: 2020-12-16 12:15:28.291777"
                    },
                    "2021-04-29_15-32_f1410ed7ec95_migrate_native_filters_to_new_schema.py": {
                      "functions": [
                        "upgrade_filters",
                        "downgrade_filters",
                        "upgrade_dashboard",
                        "upgrade",
                        "downgrade_dashboard",
                        "downgrade"
                      ],
                      "classes": [
                        "Dashboard"
                      ],
                      "imports": [
                        "collections.abc",
                        "typing",
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "superset",
                        "superset.utils"
                      ],
                      "size_lines": 163,
                      "has_main": false,
                      "docstring": "migrate native filters to new schema\n\nRevision ID: f1410ed7ec95\nRevises: d416d0d715cc\nCreate Date: 2021-04-29 15:32:21.939018"
                    },
                    "2016-09-09_17-39_5e4a03ef0bf0_add_request_access_model.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 51,
                      "has_main": false,
                      "docstring": "Add access_request table to manage requests to access datastores.\n\nRevision ID: 5e4a03ef0bf0\nRevises: 41f6a59a61f2\nCreate Date: 2016-09-09 17:39:57.846309"
                    },
                    "2022-03-02_16-41_7293b0ca7944_change_adhoc_filter_b_from_none_to_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "Slice"
                      ],
                      "imports": [
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "superset",
                        "superset.utils"
                      ],
                      "size_lines": 84,
                      "has_main": false,
                      "docstring": "change_adhoc_filter_b_from_none_to_empty_array\n\nRevision ID: 7293b0ca7944\nRevises: b8d3a24d9131\nCreate Date: 2022-03-02 16:41:36.350540"
                    },
                    "2022-04-06_14-10_9d8a8d575284_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [],
                      "size_lines": 36,
                      "has_main": false,
                      "docstring": "merge point\n\nRevision ID: 9d8a8d575284\nRevises: ('8b841273bec3', 'b0d0249074e4')\nCreate Date: 2022-04-06 14:10:40.433050"
                    },
                    "2020-04-29_09-24_620241d1153f_update_time_grain_sqla.py": {
                      "functions": [
                        "duration_by_name",
                        "upgrade",
                        "downgrade",
                        "grains"
                      ],
                      "classes": [
                        "Database",
                        "Table",
                        "Slice"
                      ],
                      "imports": [
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "superset",
                        "superset.databases.utils",
                        "superset.utils"
                      ],
                      "size_lines": 105,
                      "has_main": false,
                      "docstring": "update time_grain_sqla\n\nRevision ID: 620241d1153f\nRevises: f9a30386bd74\nCreate Date: 2020-04-29 09:24:04.952368"
                    },
                    "2021-02-04_09-34_070c043f2fdb_add_granularity_to_charts_where_missing.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "Slice",
                        "SqlaTable",
                        "TableColumn"
                      ],
                      "imports": [
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "superset",
                        "superset.utils"
                      ],
                      "size_lines": 134,
                      "has_main": false,
                      "docstring": "add granularity to charts where missing\n\nRevision ID: 070c043f2fdb\nRevises: 41ce8799acc3\nCreate Date: 2021-02-04 09:34:13.608891"
                    },
                    "2023-06-29_18-38_240d23c7f86f_update_tag_model_w_description.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 39,
                      "has_main": false,
                      "docstring": "update_tag_model_w_description\n\nRevision ID: 240d23c7f86f\nRevises: 8e5b0fb85b9a\nCreate Date: 2023-06-29 18:38:30.033529"
                    },
                    "2018-07-23_11-20_46ba6aaaac97_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [],
                      "size_lines": 36,
                      "has_main": false,
                      "docstring": "empty message\n\nRevision ID: 46ba6aaaac97\nRevises: ('705732c70154', 'e3970889f38e')\nCreate Date: 2018-07-23 11:20:54.929246"
                    },
                    "2017-09-24_20-18_f959a6652acd_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [],
                      "size_lines": 36,
                      "has_main": false,
                      "docstring": "empty message\n\nRevision ID: f959a6652acd\nRevises: ('472d2f73dfd4', 'd39b1e37131d')\nCreate Date: 2017-09-24 20:18:35.791707"
                    },
                    "2023-06-08_11-34_ae58e1e58e5c_migrate_dual_line_to_mixed_chart.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "alembic",
                        "superset",
                        "superset.migrations.shared.migrate_viz.processors"
                      ],
                      "size_lines": 47,
                      "has_main": false,
                      "docstring": "migrate_dual_line_to_mixed_chart\n\nRevision ID: ae58e1e58e5c\nRevises: 4c5da39be729\nCreate Date: 2023-06-08 11:34:36.241939"
                    },
                    "2023-06-27_16-54_8e5b0fb85b9a_add_custom_size_columns_to_report.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 47,
                      "has_main": false,
                      "docstring": "Add custom size columns to report schedule\n\nRevision ID: 8e5b0fb85b9a\nRevises: 6fbe660cac39\nCreate Date: 2023-06-27 16:54:57.161475"
                    },
                    "2016-12-19_09-57_6414e83d82b7_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [],
                      "size_lines": 36,
                      "has_main": false,
                      "docstring": "empty message\n\nRevision ID: 6414e83d82b7\nRevises: ('525c854f0005', 'f1f2d4af5b90')\nCreate Date: 2016-12-19 09:57:05.814013"
                    },
                    "2016-12-06_17-40_1296d28ec131_druid_exports.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 41,
                      "has_main": false,
                      "docstring": "Adds params to the datasource (druid) table\n\nRevision ID: 1296d28ec131\nRevises: 6414e83d82b7\nCreate Date: 2016-12-06 17:40:40.389652"
                    },
                    "2022-07-07_13-00_c747c78868b6_migrating_legacy_treemap.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "alembic",
                        "sqlalchemy.dialects.mysql.base",
                        "superset",
                        "superset.migrations.shared.migrate_viz"
                      ],
                      "size_lines": 55,
                      "has_main": false,
                      "docstring": "Migrating legacy TreeMap\n\nRevision ID: c747c78868b6\nRevises: cdcf3d64daf4\nCreate Date: 2022-06-30 22:04:17.686635"
                    },
                    "2018-11-26_00-01_46f444d8b9b7_remove_coordinator_from_druid_cluster_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 51,
                      "has_main": false,
                      "docstring": "remove_coordinator_from_druid_cluster_model.py\n\nRevision ID: 46f444d8b9b7\nRevises: 4ce8df208545\nCreate Date: 2018-11-26 00:01:04.781119"
                    },
                    "2016-04-03_15-23_867bf4f117f9_adding_extra_field_to_database_model.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 39,
                      "has_main": false,
                      "docstring": "Adding extra field to Database model\n\nRevision ID: 867bf4f117f9\nRevises: fee7b758c130\nCreate Date: 2016-04-03 15:23:20.280841"
                    },
                    "2018-12-18_22-45_de021a1ca60d_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [],
                      "size_lines": 36,
                      "has_main": false,
                      "docstring": "empty message\n\nRevision ID: de021a1ca60d\nRevises: ('0b1f1ab473c0', 'cefabc8f7d38')\nCreate Date: 2018-12-18 22:45:55.783083"
                    },
                    "2020-12-09_14-13_ccb74baaa89b_security_converge_charts.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "alembic",
                        "sqlalchemy.exc",
                        "sqlalchemy.orm",
                        "superset.migrations.shared.security_converge"
                      ],
                      "size_lines": 129,
                      "has_main": false,
                      "docstring": "security converge charts\n\nRevision ID: ccb74baaa89b\nRevises: 811494c0cc23\nCreate Date: 2020-12-09 14:13:48.058003"
                    },
                    "2016-07-25_17-48_ad82a75afd82_add_query_model.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 74,
                      "has_main": false,
                      "docstring": "Update models to support storing the queries.\n\nRevision ID: ad82a75afd82\nRevises: f162a1dea4c4\nCreate Date: 2016-07-25 17:48:12.771103"
                    },
                    "2021-08-03_15-36_143b6f2815da_migrate_pivot_table_v2_heatmaps_to_new_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "Slice"
                      ],
                      "imports": [
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "superset",
                        "superset.utils"
                      ],
                      "size_lines": 107,
                      "has_main": false,
                      "docstring": "migrate pivot table v2 heatmaps to new format\n\nRevision ID: 143b6f2815da\nRevises: e323605f370a\nCreate Date: 2021-08-03 15:36:35.925420"
                    },
                    "2021-04-09_16-14_085f06488938_country_map_use_lowercase_country_name.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "Slice"
                      ],
                      "imports": [
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "superset",
                        "superset.utils"
                      ],
                      "size_lines": 86,
                      "has_main": false,
                      "docstring": "Country map use lowercase country name\n\nRevision ID: 085f06488938\nRevises: 134cea61c5e7\nCreate Date: 2021-04-09 16:14:19.040884"
                    },
                    "2023-08-22_11-09_ec54aca4c8a2_increase_ab_user_email_field_size.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 53,
                      "has_main": false,
                      "docstring": "Increase ab_user.email field size\n\nRevision ID: ec54aca4c8a2\nRevises: 9f4a086c2676\nCreate Date: 2023-08-22 11:09:48.577457"
                    },
                    "2017-03-03_09-15_732f1c06bcbf_add_fetch_values_predicate.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 47,
                      "has_main": false,
                      "docstring": "add fetch values predicate\n\nRevision ID: 732f1c06bcbf\nRevises: d6db5a5cdb5d\nCreate Date: 2017-03-03 09:15:56.800930"
                    },
                    "2016-04-11_22-41_bb51420eaf83_add_schema_to_table_model.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 39,
                      "has_main": false,
                      "docstring": "add schema to table model\n\nRevision ID: bb51420eaf83\nRevises: 867bf4f117f9\nCreate Date: 2016-04-11 22:41:06.185955"
                    },
                    "2016-06-07_12-33_d8bc074f7aad_add_new_field_is_restricted_to_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "DruidMetric",
                        "SqlMetric"
                      ],
                      "imports": [
                        "sqlalchemy",
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "superset"
                      ],
                      "size_lines": 82,
                      "has_main": false,
                      "docstring": "Add new field 'is_restricted' to SqlMetric and DruidMetric\n\nRevision ID: d8bc074f7aad\nRevises: 1226819ee0e3\nCreate Date: 2016-06-07 12:33:25.756640"
                    },
                    "2020-10-21_21-09_96e99fb176a0_add_import_mixing_to_saved_query.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "ImportMixin",
                        "SavedQuery"
                      ],
                      "imports": [
                        "os",
                        "uuid",
                        "sqlalchemy",
                        "alembic",
                        "sqlalchemy.exc",
                        "sqlalchemy.ext.declarative",
                        "sqlalchemy_utils",
                        "superset",
                        "superset.migrations.shared.utils"
                      ],
                      "size_lines": 95,
                      "has_main": false,
                      "docstring": "add_import_mixing_to_saved_query\n\nRevision ID: 96e99fb176a0\nRevises: 585b0b1a7b18\nCreate Date: 2020-10-21 21:09:55.945956"
                    },
                    "2024-01-19_08-42_1cf8e4344e2b_merging.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [],
                      "size_lines": 36,
                      "has_main": false,
                      "docstring": "merging\n\nRevision ID: 1cf8e4344e2b\nRevises: ('e863403c0c50', '15a2c68a2e6b')\nCreate Date: 2024-01-19 08:42:37.694192"
                    },
                    "2024-08-13_15-23_38f4144e8558_remove_sl_dataset_tables.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic",
                        "superset.migrations.shared.utils"
                      ],
                      "size_lines": 58,
                      "has_main": false,
                      "docstring": "remove sl_dataset_tables\n\nRevision ID: 38f4144e8558\nRevises: 39549add7bfc\nCreate Date: 2024-08-13 15:23:28.768963"
                    },
                    "2022-05-03_19-39_cbe71abde154_fix_report_schedule_and_log.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "ReportExecutionLog",
                        "ReportSchedule"
                      ],
                      "imports": [
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "superset",
                        "superset.reports.models"
                      ],
                      "size_lines": 85,
                      "has_main": false,
                      "docstring": "fix report schedule and execution log\n\nRevision ID: cbe71abde154\nRevises: a9422eeaae74\nCreate Date: 2022-05-03 19:39:32.074608"
                    },
                    "2016-10-05_11-30_b46fa1b0b39e_add_params_to_tables.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "logging",
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 44,
                      "has_main": false,
                      "docstring": "Add json_metadata to the tables table.\n\nRevision ID: b46fa1b0b39e\nRevises: ef8843b41dac\nCreate Date: 2016-10-05 11:30:31.748238"
                    },
                    "2020-03-25_10-49_b5998378c225_add_certificate_to_dbs.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 45,
                      "has_main": false,
                      "docstring": "add certificate to dbs\n\nRevision ID: b5998378c225\nRevises: 72428d1ea401\nCreate Date: 2020-03-25 10:49:10.883065"
                    },
                    "2020-09-24_12-04_3fbbc6e8d654_fix_data_access_permissions_for_virtual_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade",
                        "__eq__",
                        "__neq__",
                        "__repr__",
                        "name",
                        "get_perm"
                      ],
                      "classes": [
                        "Permission",
                        "ViewMenu",
                        "Role",
                        "PermissionView",
                        "Database",
                        "SqlaTable"
                      ],
                      "imports": [
                        "re",
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.exc",
                        "sqlalchemy.ext.declarative",
                        "sqlalchemy.orm"
                      ],
                      "size_lines": 224,
                      "has_main": false,
                      "docstring": "fix data access permissions for virtual datasets\n\nRevision ID: 3fbbc6e8d654\nRevises: e5ef6828ac4e\nCreate Date: 2020-09-24 12:04:33.827436"
                    },
                    "2022-03-02_09-20_b5a422d8e252_fix_query_and_saved_query_null_schema.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [
                        "Query",
                        "SavedQuery"
                      ],
                      "imports": [
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "superset"
                      ],
                      "size_lines": 67,
                      "has_main": false,
                      "docstring": "fix query and saved_query null schema\n\nRevision ID: b5a422d8e252\nRevises: b8d3a24d9131\nCreate Date: 2022-03-02 09:20:02.919490"
                    },
                    "2024-05-01_10-52_58d051681a3b_add_catalog_perm_to_tables.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "superset.migrations.shared.catalogs",
                        "superset.migrations.shared.utils"
                      ],
                      "size_lines": 52,
                      "has_main": false,
                      "docstring": "Add catalog_perm to tables\n\nRevision ID: 58d051681a3b\nRevises: 4a33124c18ad\nCreate Date: 2024-05-01 10:52:31.458433"
                    },
                    "2016-11-23_10-27_f1f2d4af5b90_.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 45,
                      "has_main": false,
                      "docstring": "Enable Filter Select\n\nRevision ID: f1f2d4af5b90\nRevises: e46f2d27a08e\nCreate Date: 2016-11-23 10:27:18.517919"
                    },
                    "2018-03-06_12-24_e68c4473c581_allow_multi_schema_metadata_fetch.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 47,
                      "has_main": false,
                      "docstring": "allow_multi_schema_metadata_fetch\n\nRevision ID: e68c4473c581\nRevises: e866bd2d4976\nCreate Date: 2018-03-06 12:24:30.896293"
                    },
                    "2017-09-13_16-36_ddd6ebdd853b_annotations.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 77,
                      "has_main": false,
                      "docstring": "annotations\n\nRevision ID: ddd6ebdd853b\nRevises: ca69c70ec99b\nCreate Date: 2017-09-13 16:36:39.144489"
                    },
                    "2021-11-05_11-11_aea15018d53b_add_certifications_columns_to_dashboard.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 45,
                      "has_main": false,
                      "docstring": "add_certifications_columns_to_dashboard\n\nRevision ID: aea15018d53b\nRevises: f9847149153d\nCreate Date: 2021-11-05 11:11:55.496618"
                    },
                    "2016-01-17_22-00_7dbf98566af7_slice_description.py": {
                      "functions": [
                        "upgrade",
                        "downgrade"
                      ],
                      "classes": [],
                      "imports": [
                        "sqlalchemy",
                        "alembic"
                      ],
                      "size_lines": 39,
                      "has_main": false,
                      "docstring": "empty message\n\nRevision ID: 7dbf98566af7\nRevises: 8e80a26a31db\nCreate Date: 2016-01-17 22:00:23.640788"
                    }
                  },
                  "shared": {
                    "security_converge.py": {
                      "functions": [
                        "_add_view_menu",
                        "_add_permission",
                        "_add_permission_view",
                        "_find_pvm",
                        "add_pvms",
                        "_delete_old_permissions",
                        "migrate_roles",
                        "get_reversed_new_pvms",
                        "get_reversed_pvm_map",
                        "__repr__",
                        "__repr__",
                        "__eq__",
                        "__neq__",
                        "__repr__",
                        "__repr__"
                      ],
                      "classes": [
                        "Pvm",
                        "Permission",
                        "ViewMenu",
                        "Role",
                        "PermissionView"
                      ],
                      "imports": [
                        "logging",
                        "dataclasses",
                        "sqlalchemy",
                        "sqlalchemy.ext.declarative",
                        "sqlalchemy.orm"
                      ],
                      "size_lines": 274,
                      "has_main": false,
                      "docstring": null
                    },
                    "catalogs.py": {
                      "functions": [
                        "get_known_schemas",
                        "get_batch_size",
                        "print_processed_batch",
                        "update_catalog_column",
                        "update_schema_catalog_perms",
                        "delete_models_non_default_catalog",
                        "upgrade_catalog_perms",
                        "upgrade_database_catalogs",
                        "add_non_default_catalogs",
                        "upgrade_schema_perms",
                        "create_schema_perms",
                        "downgrade_catalog_perms",
                        "downgrade_database_catalogs",
                        "downgrade_schema_perms"
                      ],
                      "classes": [
                        "SqlaTable",
                        "Query",
                        "SavedQuery",
                        "TabState",
                        "TableSchema",
                        "Slice"
                      ],
                      "imports": [
                        "__future__",
                        "logging",
                        "datetime",
                        "typing",
                        "sqlalchemy",
                        "alembic",
                        "flask",
                        "sqlalchemy.ext.declarative",
                        "sqlalchemy.orm",
                        "superset",
                        "superset.db_engine_specs.base",
                        "superset.migrations.shared.security_converge",
                        "superset.models.core"
                      ],
                      "size_lines": 706,
                      "has_main": false,
                      "docstring": null
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "native_filters.py": {
                      "functions": [
                        "convert_filter_scopes_to_native_filters",
                        "migrate_dashboard"
                      ],
                      "classes": [],
                      "imports": [
                        "collections",
                        "textwrap",
                        "typing",
                        "superset.models.dashboard",
                        "superset.models.slice",
                        "superset.utils",
                        "superset.utils.core",
                        "superset.utils.dashboard_filter_scopes_converter"
                      ],
                      "size_lines": 364,
                      "has_main": false,
                      "docstring": null
                    },
                    "utils.py": {
                      "functions": [
                        "get_table_column",
                        "table_has_column",
                        "table_has_index",
                        "assign_uuids",
                        "paginated_update",
                        "try_load_json",
                        "has_table",
                        "drop_fks_for_table",
                        "create_table",
                        "drop_table",
                        "batch_operation",
                        "add_columns",
                        "drop_columns",
                        "create_index",
                        "drop_index",
                        "create_fks_for_table"
                      ],
                      "classes": [],
                      "imports": [
                        "logging",
                        "os",
                        "time",
                        "collections.abc",
                        "typing",
                        "uuid",
                        "alembic",
                        "sqlalchemy",
                        "sqlalchemy.dialects.mysql.base",
                        "sqlalchemy.dialects.postgresql.base",
                        "sqlalchemy.dialects.sqlite.base",
                        "sqlalchemy.engine.reflection",
                        "sqlalchemy.exc",
                        "sqlalchemy.orm",
                        "sqlalchemy.sql.schema",
                        "superset.utils"
                      ],
                      "size_lines": 474,
                      "has_main": false,
                      "docstring": null
                    },
                    "constraints.py": {
                      "functions": [
                        "redefine",
                        "constraint_name"
                      ],
                      "classes": [
                        "ForeignKey"
                      ],
                      "imports": [
                        "__future__",
                        "dataclasses",
                        "alembic",
                        "sqlalchemy.engine.reflection",
                        "superset.utils.core"
                      ],
                      "size_lines": 74,
                      "has_main": false,
                      "docstring": null
                    },
                    "migrate_viz": {
                      "__init__.py": {
                        "functions": [],
                        "classes": [],
                        "imports": [
                          "processors"
                        ],
                        "size_lines": 18,
                        "has_main": false,
                        "docstring": null
                      },
                      "processors.py": {
                        "functions": [
                          "_pre_action",
                          "_pre_action",
                          "_pre_action",
                          "_migrate_temporal_filter",
                          "_pre_action",
                          "_pre_action",
                          "_pre_action",
                          "_pre_action",
                          "_pre_action",
                          "_pre_action",
                          "_pre_action",
                          "_pre_action",
                          "_pre_action"
                        ],
                        "classes": [
                          "MigrateTreeMap",
                          "MigratePivotTable",
                          "MigrateDualLine",
                          "MigrateSunburst",
                          "TimeseriesChart",
                          "MigrateLineChart",
                          "MigrateAreaChart",
                          "MigrateBarChart",
                          "MigrateDistBarChart",
                          "MigrateBubbleChart",
                          "MigrateHeatmapChart",
                          "MigrateHistogramChart",
                          "MigrateSankey"
                        ],
                        "imports": [
                          "typing",
                          "superset.utils.core",
                          "base"
                        ],
                        "size_lines": 318,
                        "has_main": false,
                        "docstring": null
                      },
                      "base.py": {
                        "functions": [
                          "__init__",
                          "_pre_action",
                          "_migrate",
                          "_post_action",
                          "_migrate_temporal_filter",
                          "upgrade_slice",
                          "downgrade_slice",
                          "upgrade",
                          "downgrade"
                        ],
                        "classes": [
                          "Slice",
                          "MigrateViz"
                        ],
                        "imports": [
                          "copy",
                          "typing",
                          "sqlalchemy",
                          "sqlalchemy.ext.declarative",
                          "sqlalchemy.orm",
                          "superset",
                          "superset.constants",
                          "superset.migrations.shared.utils",
                          "superset.utils"
                        ],
                        "size_lines": 175,
                        "has_main": false,
                        "docstring": null
                      }
                    }
                  }
                },
                "databases": {
                  "__init__.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 17,
                    "has_main": false,
                    "docstring": null
                  },
                  "types.py": {
                    "functions": [],
                    "classes": [
                      "EncryptedField",
                      "EncryptedString",
                      "EncryptedDict"
                    ],
                    "imports": [
                      "marshmallow"
                    ],
                    "size_lines": 35,
                    "has_main": false,
                    "docstring": null
                  },
                  "api.py": {
                    "functions": [
                      "get_connection",
                      "get",
                      "post",
                      "put",
                      "delete",
                      "sync_permissions",
                      "catalogs",
                      "schemas",
                      "tables",
                      "table_metadata_deprecated",
                      "table_extra_metadata_deprecated",
                      "table_metadata",
                      "table_extra_metadata",
                      "select_star",
                      "test_connection",
                      "related_objects",
                      "validate_sql",
                      "oauth2",
                      "export",
                      "import_",
                      "upload_metadata",
                      "upload",
                      "function_names",
                      "available",
                      "validate_parameters",
                      "delete_ssh_tunnel",
                      "schemas_access_for_file_upload"
                    ],
                    "classes": [
                      "DatabaseRestApi"
                    ],
                    "imports": [
                      "__future__",
                      "logging",
                      "datetime",
                      "io",
                      "typing",
                      "zipfile",
                      "deprecation",
                      "flask",
                      "flask_appbuilder.api",
                      "flask_appbuilder.models.sqla.interface",
                      "marshmallow",
                      "sqlalchemy.exc",
                      "superset",
                      "superset.commands.database.create",
                      "superset.commands.database.delete",
                      "superset.commands.database.exceptions",
                      "superset.commands.database.export",
                      "superset.commands.database.importers.dispatcher",
                      "superset.commands.database.oauth2",
                      "superset.commands.database.ssh_tunnel.delete",
                      "superset.commands.database.ssh_tunnel.exceptions",
                      "superset.commands.database.sync_permissions",
                      "superset.commands.database.tables",
                      "superset.commands.database.test_connection",
                      "superset.commands.database.update",
                      "superset.commands.database.uploaders.base",
                      "superset.commands.database.uploaders.columnar_reader",
                      "superset.commands.database.uploaders.csv_reader",
                      "superset.commands.database.uploaders.excel_reader",
                      "superset.commands.database.validate",
                      "superset.commands.database.validate_sql",
                      "superset.commands.importers.exceptions",
                      "superset.commands.importers.v1.utils",
                      "superset.constants",
                      "superset.daos.database",
                      "superset.databases.decorators",
                      "superset.databases.filters",
                      "superset.databases.schemas",
                      "superset.databases.utils",
                      "superset.db_engine_specs",
                      "superset.errors",
                      "superset.exceptions",
                      "superset.extensions",
                      "superset.models.core",
                      "superset.sql_parse",
                      "superset.superset_typing",
                      "superset.utils",
                      "superset.utils.core",
                      "superset.utils.decorators",
                      "superset.utils.oauth2",
                      "superset.utils.ssh_tunnel",
                      "superset.views.base_api",
                      "superset.views.error_handling",
                      "superset.views.filters"
                    ],
                    "size_lines": 2101,
                    "has_main": false,
                    "docstring": null
                  },
                  "schemas.py": {
                    "functions": [
                      "sqlalchemy_uri_validator",
                      "server_cert_validator",
                      "encrypted_extra_validator",
                      "extra_validator",
                      "rename_encrypted_extra",
                      "encrypted_field_properties",
                      "build_sqlalchemy_uri",
                      "fix_schemas_allowed_for_csv_upload",
                      "fix_allow_csv_upload",
                      "validate_password",
                      "validate_ssh_tunnel_credentials",
                      "_deserialize",
                      "validate_file_extension",
                      "convert_column_data_types"
                    ],
                    "classes": [
                      "DatabaseParametersSchemaMixin",
                      "DatabaseValidateParametersSchema",
                      "DatabaseSSHTunnel",
                      "DatabasePostSchema",
                      "DatabasePutSchema",
                      "DatabaseTestConnectionSchema",
                      "TableMetadataOptionsResponse",
                      "TableMetadataColumnsResponse",
                      "TableMetadataForeignKeysIndexesResponse",
                      "TableMetadataPrimaryKeyResponse",
                      "TableMetadataResponse",
                      "TableMetadataOptionsResponseSchema",
                      "TableMetadataColumnsResponseSchema",
                      "TableMetadataForeignKeysIndexesResponseSchema",
                      "TableMetadataPrimaryKeyResponseSchema",
                      "TableMetadataResponseSchema",
                      "TableExtraMetadataResponseSchema",
                      "SelectStarResponseSchema",
                      "SchemasResponseSchema",
                      "CatalogsResponseSchema",
                      "DatabaseTablesResponse",
                      "ValidateSQLRequest",
                      "ValidateSQLResponse",
                      "DatabaseRelatedChart",
                      "DatabaseRelatedDashboard",
                      "DatabaseRelatedCharts",
                      "DatabaseRelatedDashboards",
                      "DatabaseRelatedObjectsResponse",
                      "DatabaseFunctionNamesResponse",
                      "ImportV1DatabaseExtraSchema",
                      "ImportV1DatabaseSchema",
                      "DatabaseSchemaAccessForFileUploadResponse",
                      "EngineInformationSchema",
                      "DatabaseConnectionSchema",
                      "DelimitedListField",
                      "BaseUploadFilePostSchemaMixin",
                      "UploadPostSchema",
                      "UploadFileMetadataPostSchema",
                      "UploadFileMetadataItemSchema",
                      "UploadFileMetadata",
                      "OAuth2ProviderResponseSchema",
                      "QualifiedTableSchema",
                      "Meta",
                      "Meta",
                      "Meta",
                      "Meta"
                    ],
                    "imports": [
                      "__future__",
                      "inspect",
                      "pathlib",
                      "typing",
                      "flask",
                      "flask_babel",
                      "marshmallow",
                      "marshmallow.validate",
                      "sqlalchemy",
                      "werkzeug.datastructures",
                      "superset",
                      "superset.commands.database.exceptions",
                      "superset.commands.database.ssh_tunnel.exceptions",
                      "superset.commands.database.uploaders.base",
                      "superset.constants",
                      "superset.databases.types",
                      "superset.databases.utils",
                      "superset.db_engine_specs",
                      "superset.exceptions",
                      "superset.models.core",
                      "superset.security.analytics_db_safety",
                      "superset.utils",
                      "superset.utils.core"
                    ],
                    "size_lines": 1344,
                    "has_main": false,
                    "docstring": null
                  },
                  "utils.py": {
                    "functions": [
                      "get_foreign_keys_metadata",
                      "get_indexes_metadata",
                      "get_col_type",
                      "get_table_metadata",
                      "make_url_safe"
                    ],
                    "classes": [],
                    "imports": [
                      "__future__",
                      "typing",
                      "sqlalchemy.engine.url",
                      "superset.commands.database.exceptions",
                      "superset.sql_parse",
                      "superset.databases.schemas"
                    ],
                    "size_lines": 131,
                    "has_main": false,
                    "docstring": null
                  },
                  "filters.py": {
                    "functions": [
                      "can_access_databases",
                      "apply",
                      "apply"
                    ],
                    "classes": [
                      "DatabaseFilter",
                      "DatabaseUploadEnabledFilter"
                    ],
                    "imports": [
                      "typing",
                      "flask",
                      "flask_babel",
                      "sqlalchemy",
                      "sqlalchemy.orm",
                      "sqlalchemy.sql.expression",
                      "sqlalchemy.sql.sqltypes",
                      "superset",
                      "superset.models.core",
                      "superset.views.base"
                    ],
                    "size_lines": 108,
                    "has_main": false,
                    "docstring": null
                  },
                  "decorators.py": {
                    "functions": [
                      "check_table_access",
                      "wraps"
                    ],
                    "classes": [],
                    "imports": [
                      "functools",
                      "logging",
                      "typing",
                      "flask",
                      "flask_babel",
                      "superset.extensions",
                      "superset.models.core",
                      "superset.sql_parse",
                      "superset.utils.core",
                      "superset.views.base_api"
                    ],
                    "size_lines": 70,
                    "has_main": false,
                    "docstring": null
                  },
                  "ssh_tunnel": {
                    "models.py": {
                      "functions": [
                        "data"
                      ],
                      "classes": [
                        "SSHTunnel"
                      ],
                      "imports": [
                        "typing",
                        "sqlalchemy",
                        "flask",
                        "flask_appbuilder",
                        "sqlalchemy.orm",
                        "sqlalchemy.types",
                        "superset.constants",
                        "superset.extensions",
                        "superset.models.core",
                        "superset.models.helpers"
                      ],
                      "size_lines": 96,
                      "has_main": false,
                      "docstring": null
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    }
                  }
                },
                "tasks": {
                  "celery_app.py": {
                    "functions": [
                      "reset_db_connection_pool",
                      "teardown"
                    ],
                    "classes": [],
                    "imports": [
                      "typing",
                      "celery.signals",
                      "superset",
                      "superset.extensions"
                    ],
                    "size_lines": 72,
                    "has_main": false,
                    "docstring": "This is the main entrypoint used by Celery workers. As such,\nit needs to call create_app() in order to initialize things properly"
                  },
                  "cron_util.py": {
                    "functions": [
                      "cron_schedule_window"
                    ],
                    "classes": [],
                    "imports": [
                      "logging",
                      "collections.abc",
                      "datetime",
                      "croniter",
                      "pytz",
                      "superset"
                    ],
                    "size_lines": 51,
                    "has_main": false,
                    "docstring": null
                  },
                  "async_queries.py": {
                    "functions": [
                      "set_form_data",
                      "_create_query_context_from_form",
                      "_load_user_from_job_metadata",
                      "load_chart_data_into_cache",
                      "load_explore_json_into_cache"
                    ],
                    "classes": [],
                    "imports": [
                      "__future__",
                      "copy",
                      "logging",
                      "typing",
                      "celery.exceptions",
                      "flask",
                      "flask_appbuilder.security.sqla.models",
                      "marshmallow",
                      "superset.charts.schemas",
                      "superset.exceptions",
                      "superset.extensions",
                      "superset.utils.cache",
                      "superset.utils.core",
                      "superset.views.utils",
                      "superset.common.query_context",
                      "superset.commands.chart.data.get_data_command"
                    ],
                    "size_lines": 183,
                    "has_main": false,
                    "docstring": null
                  },
                  "cache.py": {
                    "functions": [
                      "get_task",
                      "fetch_url",
                      "cache_warmup",
                      "__init__",
                      "get_tasks",
                      "get_tasks",
                      "__init__",
                      "get_tasks",
                      "__init__",
                      "get_tasks"
                    ],
                    "classes": [
                      "CacheWarmupPayload",
                      "CacheWarmupTask",
                      "Strategy",
                      "DummyStrategy",
                      "TopNDashboardsStrategy",
                      "DashboardTagsStrategy"
                    ],
                    "imports": [
                      "__future__",
                      "logging",
                      "typing",
                      "urllib",
                      "urllib.error",
                      "celery.beat",
                      "celery.utils.log",
                      "flask",
                      "sqlalchemy",
                      "superset",
                      "superset.extensions",
                      "superset.models.core",
                      "superset.models.dashboard",
                      "superset.models.slice",
                      "superset.tags.models",
                      "superset.tasks.exceptions",
                      "superset.tasks.utils",
                      "superset.utils",
                      "superset.utils.date_parser",
                      "superset.utils.machine_auth",
                      "superset.utils.urls"
                    ],
                    "size_lines": 332,
                    "has_main": false,
                    "docstring": null
                  },
                  "__init__.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 17,
                    "has_main": false,
                    "docstring": null
                  },
                  "types.py": {
                    "functions": [],
                    "classes": [
                      "FixedExecutor",
                      "ExecutorType"
                    ],
                    "imports": [
                      "typing",
                      "superset.utils.backports"
                    ],
                    "size_lines": 58,
                    "has_main": false,
                    "docstring": null
                  },
                  "utils.py": {
                    "functions": [
                      "get_executor",
                      "get_current_user",
                      "fetch_csrf_token"
                    ],
                    "classes": [],
                    "imports": [
                      "__future__",
                      "logging",
                      "http.client",
                      "typing",
                      "urllib",
                      "celery.utils.log",
                      "flask",
                      "superset.tasks.exceptions",
                      "superset.tasks.types",
                      "superset.utils",
                      "superset.utils.urls",
                      "superset.models.dashboard",
                      "superset.models.slice",
                      "superset.reports.models"
                    ],
                    "size_lines": 145,
                    "has_main": false,
                    "docstring": null
                  },
                  "exceptions.py": {
                    "functions": [],
                    "classes": [
                      "ExecutorNotFoundError",
                      "InvalidExecutorError"
                    ],
                    "imports": [
                      "flask_babel",
                      "superset.exceptions"
                    ],
                    "size_lines": 29,
                    "has_main": false,
                    "docstring": null
                  },
                  "scheduler.py": {
                    "functions": [
                      "scheduler",
                      "execute",
                      "prune_log",
                      "prune_query",
                      "prune_logs"
                    ],
                    "classes": [],
                    "imports": [
                      "__future__",
                      "logging",
                      "datetime",
                      "typing",
                      "celery",
                      "celery.exceptions",
                      "superset",
                      "superset.commands.exceptions",
                      "superset.commands.logs.prune",
                      "superset.commands.report.exceptions",
                      "superset.commands.report.execute",
                      "superset.commands.report.log_prune",
                      "superset.commands.sql_lab.query",
                      "superset.daos.report",
                      "superset.extensions",
                      "superset.stats_logger",
                      "superset.tasks.cron_util",
                      "superset.utils.core",
                      "superset.utils.log"
                    ],
                    "size_lines": 173,
                    "has_main": false,
                    "docstring": null
                  },
                  "thumbnails.py": {
                    "functions": [
                      "cache_chart_thumbnail",
                      "cache_dashboard_thumbnail",
                      "cache_dashboard_screenshot"
                    ],
                    "classes": [],
                    "imports": [
                      "logging",
                      "typing",
                      "flask",
                      "superset",
                      "superset.extensions",
                      "superset.security.guest_token",
                      "superset.tasks.utils",
                      "superset.utils.core",
                      "superset.utils.screenshots",
                      "superset.utils.urls",
                      "superset.utils.webdriver",
                      "superset.models.slice",
                      "superset.models.dashboard",
                      "superset.models.dashboard"
                    ],
                    "size_lines": 151,
                    "has_main": false,
                    "docstring": "Utility functions used across Superset"
                  }
                },
                "sql_validators": {
                  "__init__.py": {
                    "functions": [
                      "get_validator_by_name"
                    ],
                    "classes": [],
                    "imports": [
                      "typing",
                      "base"
                    ],
                    "size_lines": 28,
                    "has_main": false,
                    "docstring": null
                  },
                  "postgres.py": {
                    "functions": [
                      "validate"
                    ],
                    "classes": [
                      "PostgreSQLValidator"
                    ],
                    "imports": [
                      "__future__",
                      "re",
                      "pgsanity.pgsanity",
                      "superset.models.core",
                      "superset.sql_validators.base"
                    ],
                    "size_lines": 60,
                    "has_main": false,
                    "docstring": null
                  },
                  "presto_db.py": {
                    "functions": [
                      "validate_statement",
                      "validate"
                    ],
                    "classes": [
                      "PrestoSQLValidationError",
                      "PrestoDBSQLValidator"
                    ],
                    "imports": [
                      "__future__",
                      "logging",
                      "time",
                      "contextlib",
                      "typing",
                      "superset",
                      "superset.models.core",
                      "superset.sql.parse",
                      "superset.sql_validators.base",
                      "superset.utils.core",
                      "pyhive.exc"
                    ],
                    "size_lines": 182,
                    "has_main": false,
                    "docstring": null
                  },
                  "base.py": {
                    "functions": [
                      "__init__",
                      "to_dict",
                      "validate"
                    ],
                    "classes": [
                      "SQLValidationAnnotation",
                      "BaseSQLValidator"
                    ],
                    "imports": [
                      "__future__",
                      "typing",
                      "superset.models.core"
                    ],
                    "size_lines": 66,
                    "has_main": false,
                    "docstring": null
                  }
                },
                "security": {
                  "__init__.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [
                      "superset.security.manager"
                    ],
                    "size_lines": 18,
                    "has_main": false,
                    "docstring": null
                  },
                  "api.py": {
                    "functions": [
                      "convert_enum_to_value",
                      "csrf_token",
                      "guest_token"
                    ],
                    "classes": [
                      "PermissiveSchema",
                      "UserSchema",
                      "ResourceSchema",
                      "RlsRuleSchema",
                      "GuestTokenCreateSchema",
                      "SecurityRestApi",
                      "Meta"
                    ],
                    "imports": [
                      "logging",
                      "typing",
                      "flask",
                      "flask_appbuilder",
                      "flask_appbuilder.api",
                      "flask_appbuilder.security.decorators",
                      "flask_wtf.csrf",
                      "marshmallow",
                      "superset.commands.dashboard.embedded.exceptions",
                      "superset.exceptions",
                      "superset.extensions",
                      "superset.security.guest_token",
                      "superset.views.base_api"
                    ],
                    "size_lines": 175,
                    "has_main": false,
                    "docstring": null
                  },
                  "guest_token.py": {
                    "functions": [
                      "is_authenticated",
                      "is_anonymous",
                      "__init__"
                    ],
                    "classes": [
                      "GuestTokenUser",
                      "GuestTokenResourceType",
                      "GuestTokenResource",
                      "GuestTokenRlsRule",
                      "GuestToken",
                      "GuestUser"
                    ],
                    "imports": [
                      "typing",
                      "flask_appbuilder.security.sqla.models",
                      "flask_login",
                      "superset.utils.backports"
                    ],
                    "size_lines": 90,
                    "has_main": false,
                    "docstring": null
                  },
                  "manager.py": {
                    "functions": [
                      "freeze_value",
                      "query_context_modified",
                      "__init__",
                      "create_login_manager",
                      "request_loader",
                      "get_catalog_perm",
                      "get_schema_perm",
                      "get_database_perm",
                      "get_dataset_perm",
                      "can_access",
                      "can_access_all_queries",
                      "can_access_all_datasources",
                      "can_access_all_databases",
                      "can_access_database",
                      "can_access_catalog",
                      "can_access_schema",
                      "can_access_datasource",
                      "can_access_dashboard",
                      "can_access_chart",
                      "get_dashboard_access_error_object",
                      "get_chart_access_error_object",
                      "get_datasource_access_error_msg",
                      "get_datasource_access_link",
                      "get_datasource_access_error_object",
                      "get_table_access_error_msg",
                      "get_table_access_error_object",
                      "get_table_access_link",
                      "get_user_datasources",
                      "can_access_table",
                      "user_view_menu_names",
                      "get_accessible_databases",
                      "get_schemas_accessible_by_user",
                      "get_catalogs_accessible_by_user",
                      "get_datasources_accessible_by_user",
                      "merge_perm",
                      "_is_user_defined_permission",
                      "create_custom_permissions",
                      "create_missing_perms",
                      "clean_perms",
                      "sync_role_definitions",
                      "_get_all_pvms",
                      "_get_pvms_from_builtin_role",
                      "find_roles_by_id",
                      "copy_role",
                      "set_role",
                      "_is_admin_only",
                      "_is_alpha_only",
                      "_is_accessible_to_all",
                      "_is_admin_pvm",
                      "_is_alpha_pvm",
                      "_is_gamma_pvm",
                      "_is_sql_lab_only",
                      "_is_sql_lab_pvm",
                      "database_after_insert",
                      "database_after_delete",
                      "database_after_update",
                      "_delete_vm_database_access",
                      "_update_vm_database_access",
                      "_update_vm_datasources_access",
                      "dataset_after_insert",
                      "dataset_after_delete",
                      "dataset_before_update",
                      "_update_dataset_catalog_schema_perm",
                      "_update_dataset_perm",
                      "_delete_pvm_on_sqla_event",
                      "_find_permission_on_sqla_event",
                      "_find_view_menu_on_sqla_event",
                      "_insert_pvm_on_sqla_event",
                      "on_role_after_update",
                      "on_view_menu_after_insert",
                      "on_view_menu_after_update",
                      "on_permission_after_insert",
                      "on_permission_view_after_insert",
                      "on_permission_view_after_delete",
                      "get_exclude_users_from_lists",
                      "raise_for_access",
                      "get_user_by_username",
                      "get_anonymous_user",
                      "get_user_roles",
                      "get_guest_rls_filters",
                      "get_rls_filters",
                      "get_rls_sorted",
                      "get_guest_rls_filters_str",
                      "get_rls_cache_key",
                      "_get_current_epoch_time",
                      "_get_guest_token_jwt_audience",
                      "validate_guest_token_resources",
                      "create_guest_access_token",
                      "get_guest_user_from_request",
                      "get_guest_user_from_token",
                      "parse_jwt_guest_token",
                      "is_guest_user",
                      "get_current_guest_user_if_guest",
                      "has_guest_access",
                      "raise_for_ownership",
                      "is_owner",
                      "is_admin",
                      "merge_pv"
                    ],
                    "classes": [
                      "DatabaseCatalogSchema",
                      "SupersetSecurityListWidget",
                      "SupersetRoleListWidget",
                      "SupersetSecurityManager"
                    ],
                    "imports": [
                      "logging",
                      "re",
                      "time",
                      "collections",
                      "typing",
                      "flask",
                      "flask_appbuilder",
                      "flask_appbuilder.security.sqla.manager",
                      "flask_appbuilder.security.sqla.models",
                      "flask_appbuilder.security.views",
                      "flask_appbuilder.widgets",
                      "flask_babel",
                      "flask_login",
                      "jwt.api_jwt",
                      "sqlalchemy",
                      "sqlalchemy.engine.base",
                      "sqlalchemy.orm",
                      "sqlalchemy.orm.mapper",
                      "sqlalchemy.orm.query",
                      "sqlalchemy.sql",
                      "superset.constants",
                      "superset.errors",
                      "superset.exceptions",
                      "superset.security.guest_token",
                      "superset.sql_parse",
                      "superset.tasks.utils",
                      "superset.utils",
                      "superset.utils.core",
                      "superset.utils.filters",
                      "superset.utils.urls",
                      "superset.common.query_context",
                      "superset.connectors.sqla.models",
                      "superset.models.core",
                      "superset.models.dashboard",
                      "superset.models.slice",
                      "superset.models.sql_lab",
                      "superset.viz",
                      "superset.extensions",
                      "superset.connectors.sqla.models",
                      "superset.connectors.sqla.models",
                      "superset.connectors.sqla.models",
                      "superset.connectors.sqla.models",
                      "superset.connectors.sqla.models",
                      "superset.models",
                      "superset.connectors.sqla.models",
                      "superset.models.slice",
                      "superset.models.core",
                      "superset.connectors.sqla.models",
                      "superset.connectors.sqla.models",
                      "superset.models.slice",
                      "superset.connectors.sqla.models",
                      "superset.models.slice",
                      "superset",
                      "superset.connectors.sqla.models",
                      "superset.models.dashboard",
                      "superset.models.slice",
                      "superset.models.sql_lab",
                      "superset.utils.core",
                      "superset.connectors.sqla.models",
                      "superset.commands.dashboard.embedded.exceptions",
                      "superset.daos.dashboard",
                      "superset.models.dashboard",
                      "superset"
                    ],
                    "size_lines": 2752,
                    "has_main": false,
                    "docstring": "A set of constants and methods to manage permissions and security"
                  },
                  "analytics_db_safety.py": {
                    "functions": [
                      "check_sqlalchemy_uri"
                    ],
                    "classes": [],
                    "imports": [
                      "re",
                      "flask_babel",
                      "sqlalchemy.engine.url",
                      "sqlalchemy.exc",
                      "superset",
                      "superset.errors",
                      "superset.exceptions"
                    ],
                    "size_lines": 59,
                    "has_main": false,
                    "docstring": null
                  }
                },
                "available_domains": {
                  "__init__.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 17,
                    "has_main": false,
                    "docstring": null
                  },
                  "api.py": {
                    "functions": [
                      "get"
                    ],
                    "classes": [
                      "AvailableDomainsRestApi"
                    ],
                    "imports": [
                      "logging",
                      "flask",
                      "flask_appbuilder.api",
                      "superset",
                      "superset.available_domains.schemas",
                      "superset.constants",
                      "superset.extensions",
                      "superset.views.base_api"
                    ],
                    "size_lines": 76,
                    "has_main": false,
                    "docstring": null
                  },
                  "schemas.py": {
                    "functions": [],
                    "classes": [
                      "AvailableDomainsSchema"
                    ],
                    "imports": [
                      "marshmallow"
                    ],
                    "size_lines": 22,
                    "has_main": false,
                    "docstring": null
                  }
                },
                "datasets": {
                  "__init__.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 17,
                    "has_main": false,
                    "docstring": null
                  },
                  "api.py": {
                    "functions": [
                      "post",
                      "put",
                      "delete",
                      "export",
                      "duplicate",
                      "refresh",
                      "related_objects",
                      "bulk_delete",
                      "import_",
                      "get_or_create_dataset",
                      "warm_up_cache",
                      "get",
                      "render_dataset_fields",
                      "render_item_list"
                    ],
                    "classes": [
                      "DatasetRestApi"
                    ],
                    "imports": [
                      "__future__",
                      "logging",
                      "datetime",
                      "io",
                      "typing",
                      "zipfile",
                      "flask",
                      "flask_appbuilder.api",
                      "flask_appbuilder.api.schemas",
                      "flask_appbuilder.const",
                      "flask_appbuilder.models.sqla.interface",
                      "flask_babel",
                      "jinja2.exceptions",
                      "marshmallow",
                      "superset",
                      "superset.commands.dataset.create",
                      "superset.commands.dataset.delete",
                      "superset.commands.dataset.duplicate",
                      "superset.commands.dataset.exceptions",
                      "superset.commands.dataset.export",
                      "superset.commands.dataset.importers.dispatcher",
                      "superset.commands.dataset.refresh",
                      "superset.commands.dataset.update",
                      "superset.commands.dataset.warm_up_cache",
                      "superset.commands.exceptions",
                      "superset.commands.importers.exceptions",
                      "superset.commands.importers.v1.utils",
                      "superset.connectors.sqla.models",
                      "superset.constants",
                      "superset.daos.dataset",
                      "superset.databases.filters",
                      "superset.datasets.filters",
                      "superset.datasets.schemas",
                      "superset.exceptions",
                      "superset.jinja_context",
                      "superset.utils",
                      "superset.utils.core",
                      "superset.views.base",
                      "superset.views.base_api",
                      "superset.views.error_handling",
                      "superset.views.filters"
                    ],
                    "size_lines": 1207,
                    "has_main": false,
                    "docstring": null
                  },
                  "schemas.py": {
                    "functions": [
                      "validate_python_date_format",
                      "handle_error",
                      "fix_extra",
                      "fix_extra",
                      "fix_extra"
                    ],
                    "classes": [
                      "DatasetColumnsPutSchema",
                      "DatasetMetricsPutSchema",
                      "DatasetPostSchema",
                      "DatasetPutSchema",
                      "DatasetDuplicateSchema",
                      "DatasetRelatedChart",
                      "DatasetRelatedDashboard",
                      "DatasetRelatedCharts",
                      "DatasetRelatedDashboards",
                      "DatasetRelatedObjectsResponse",
                      "ImportV1ColumnSchema",
                      "ImportV1MetricSchema",
                      "ImportV1DatasetSchema",
                      "GetOrCreateDatasetSchema",
                      "DatasetCacheWarmUpRequestSchema",
                      "DatasetCacheWarmUpResponseSingleSchema",
                      "DatasetCacheWarmUpResponseSchema"
                    ],
                    "imports": [
                      "datetime",
                      "typing",
                      "dateutil.parser",
                      "flask_babel",
                      "marshmallow",
                      "marshmallow.validate",
                      "superset.exceptions",
                      "superset.utils"
                    ],
                    "size_lines": 330,
                    "has_main": false,
                    "docstring": null
                  },
                  "filters.py": {
                    "functions": [
                      "apply",
                      "apply"
                    ],
                    "classes": [
                      "DatasetIsNullOrEmptyFilter",
                      "DatasetCertifiedFilter"
                    ],
                    "imports": [
                      "flask_babel",
                      "sqlalchemy",
                      "sqlalchemy.orm.query",
                      "superset.connectors.sqla.models",
                      "superset.views.base"
                    ],
                    "size_lines": 54,
                    "has_main": false,
                    "docstring": null
                  },
                  "metrics": {
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "api.py": {
                      "functions": [
                        "delete"
                      ],
                      "classes": [
                        "DatasetMetricRestApi"
                      ],
                      "imports": [
                        "logging",
                        "flask",
                        "flask_appbuilder.api",
                        "flask_appbuilder.models.sqla.interface",
                        "superset.commands.dataset.metrics.delete",
                        "superset.commands.dataset.metrics.exceptions",
                        "superset.connectors.sqla.models",
                        "superset.constants",
                        "superset.views.base_api"
                      ],
                      "size_lines": 107,
                      "has_main": false,
                      "docstring": null
                    }
                  },
                  "columns": {
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "api.py": {
                      "functions": [
                        "delete"
                      ],
                      "classes": [
                        "DatasetColumnsRestApi"
                      ],
                      "imports": [
                        "logging",
                        "flask",
                        "flask_appbuilder.api",
                        "flask_appbuilder.models.sqla.interface",
                        "superset.commands.dataset.columns.delete",
                        "superset.commands.dataset.columns.exceptions",
                        "superset.connectors.sqla.models",
                        "superset.constants",
                        "superset.views.base_api"
                      ],
                      "size_lines": 107,
                      "has_main": false,
                      "docstring": null
                    }
                  }
                },
                "queries": {
                  "__init__.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 17,
                    "has_main": false,
                    "docstring": null
                  },
                  "api.py": {
                    "functions": [
                      "get_updated_since",
                      "stop_query"
                    ],
                    "classes": [
                      "QueryRestApi"
                    ],
                    "imports": [
                      "logging",
                      "typing",
                      "backoff",
                      "flask_appbuilder.api",
                      "flask_appbuilder.models.sqla.interface",
                      "superset",
                      "superset.constants",
                      "superset.daos.query",
                      "superset.databases.filters",
                      "superset.exceptions",
                      "superset.models.sql_lab",
                      "superset.queries.filters",
                      "superset.queries.schemas",
                      "superset.superset_typing",
                      "superset.views.base_api",
                      "superset.views.filters"
                    ],
                    "size_lines": 277,
                    "has_main": false,
                    "docstring": null
                  },
                  "schemas.py": {
                    "functions": [
                      "get_sql_tables"
                    ],
                    "classes": [
                      "DatabaseSchema",
                      "QuerySchema",
                      "StopQuerySchema",
                      "Meta"
                    ],
                    "imports": [
                      "marshmallow",
                      "superset.dashboards.schemas",
                      "superset.models.sql_lab",
                      "superset.sql_parse"
                    ],
                    "size_lines": 85,
                    "has_main": false,
                    "docstring": null
                  },
                  "filters.py": {
                    "functions": [
                      "apply"
                    ],
                    "classes": [
                      "QueryFilter"
                    ],
                    "imports": [
                      "typing",
                      "flask_sqlalchemy",
                      "superset",
                      "superset.models.sql_lab",
                      "superset.utils.core",
                      "superset.views.base"
                    ],
                    "size_lines": 38,
                    "has_main": false,
                    "docstring": null
                  },
                  "saved_queries": {
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "api.py": {
                      "functions": [
                        "pre_add",
                        "pre_update",
                        "bulk_delete",
                        "export",
                        "import_"
                      ],
                      "classes": [
                        "SavedQueryRestApi"
                      ],
                      "imports": [
                        "logging",
                        "datetime",
                        "io",
                        "typing",
                        "zipfile",
                        "flask",
                        "flask_appbuilder.api",
                        "flask_appbuilder.models.sqla.interface",
                        "flask_babel",
                        "superset.commands.importers.exceptions",
                        "superset.commands.importers.v1.utils",
                        "superset.commands.query.delete",
                        "superset.commands.query.exceptions",
                        "superset.commands.query.export",
                        "superset.commands.query.importers.dispatcher",
                        "superset.constants",
                        "superset.databases.filters",
                        "superset.extensions",
                        "superset.models.sql_lab",
                        "superset.queries.saved_queries.filters",
                        "superset.queries.saved_queries.schemas",
                        "superset.utils",
                        "superset.views.base_api",
                        "superset.views.filters"
                      ],
                      "size_lines": 433,
                      "has_main": false,
                      "docstring": null
                    },
                    "schemas.py": {
                      "functions": [],
                      "classes": [
                        "ImportV1SavedQuerySchema"
                      ],
                      "imports": [
                        "marshmallow",
                        "marshmallow.validate"
                      ],
                      "size_lines": 50,
                      "has_main": false,
                      "docstring": null
                    },
                    "filters.py": {
                      "functions": [
                        "apply",
                        "apply"
                      ],
                      "classes": [
                        "SavedQueryAllTextFilter",
                        "SavedQueryFavoriteFilter",
                        "SavedQueryTagNameFilter",
                        "SavedQueryTagIdFilter",
                        "SavedQueryFilter"
                      ],
                      "imports": [
                        "typing",
                        "flask",
                        "flask_babel",
                        "flask_sqlalchemy",
                        "sqlalchemy",
                        "sqlalchemy.orm.query",
                        "superset.models.sql_lab",
                        "superset.tags.filters",
                        "superset.views.base",
                        "superset.views.base_api"
                      ],
                      "size_lines": 92,
                      "has_main": false,
                      "docstring": null
                    }
                  }
                },
                "charts": {
                  "__init__.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 17,
                    "has_main": false,
                    "docstring": null
                  },
                  "api.py": {
                    "functions": [
                      "ensure_thumbnails_enabled",
                      "post",
                      "put",
                      "delete",
                      "bulk_delete",
                      "cache_screenshot",
                      "screenshot",
                      "thumbnail",
                      "export",
                      "favorite_status",
                      "add_favorite",
                      "remove_favorite",
                      "warm_up_cache",
                      "import_",
                      "build_response"
                    ],
                    "classes": [
                      "ChartRestApi"
                    ],
                    "imports": [
                      "logging",
                      "datetime",
                      "io",
                      "typing",
                      "zipfile",
                      "flask",
                      "flask_appbuilder.api",
                      "flask_appbuilder.hooks",
                      "flask_appbuilder.models.sqla.interface",
                      "flask_babel",
                      "marshmallow",
                      "werkzeug.wrappers",
                      "werkzeug.wsgi",
                      "superset",
                      "superset.charts.filters",
                      "superset.charts.schemas",
                      "superset.commands.chart.create",
                      "superset.commands.chart.delete",
                      "superset.commands.chart.exceptions",
                      "superset.commands.chart.export",
                      "superset.commands.chart.fave",
                      "superset.commands.chart.importers.dispatcher",
                      "superset.commands.chart.unfave",
                      "superset.commands.chart.update",
                      "superset.commands.chart.warm_up_cache",
                      "superset.commands.exceptions",
                      "superset.commands.importers.exceptions",
                      "superset.commands.importers.v1.utils",
                      "superset.constants",
                      "superset.daos.chart",
                      "superset.extensions",
                      "superset.models.slice",
                      "superset.tasks.thumbnails",
                      "superset.tasks.utils",
                      "superset.utils",
                      "superset.utils.screenshots",
                      "superset.utils.urls",
                      "superset.views.base_api",
                      "superset.views.filters"
                    ],
                    "size_lines": 1154,
                    "has_main": false,
                    "docstring": null
                  },
                  "schemas.py": {
                    "functions": [
                      "__init__",
                      "make_query_context",
                      "get_query_context_factory"
                    ],
                    "classes": [
                      "ChartEntityResponseSchema",
                      "ChartPostSchema",
                      "ChartPutSchema",
                      "ChartGetDatasourceObjectDataResponseSchema",
                      "ChartGetDatasourceObjectResponseSchema",
                      "ChartGetDatasourceResponseSchema",
                      "ChartCacheScreenshotResponseSchema",
                      "ChartGetCachedScreenshotResponseSchema",
                      "ChartDataColumnSchema",
                      "ChartDataAdhocMetricSchema",
                      "ChartDataAggregateConfigField",
                      "ChartDataPostProcessingOperationOptionsSchema",
                      "ChartDataAggregateOptionsSchema",
                      "ChartDataRollingOptionsSchema",
                      "ChartDataSelectOptionsSchema",
                      "ChartDataSortOptionsSchema",
                      "ChartDataContributionOptionsSchema",
                      "ChartDataProphetOptionsSchema",
                      "ChartDataBoxplotOptionsSchema",
                      "ChartDataPivotOptionsSchema",
                      "ChartDataGeohashDecodeOptionsSchema",
                      "ChartDataGeohashEncodeOptionsSchema",
                      "ChartDataGeodeticParseOptionsSchema",
                      "ChartDataPostProcessingOperationSchema",
                      "ChartDataFilterSchema",
                      "ChartDataExtrasSchema",
                      "AnnotationLayerSchema",
                      "ChartDataDatasourceSchema",
                      "ChartDataQueryObjectSchema",
                      "ChartDataQueryContextSchema",
                      "AnnotationDataSchema",
                      "ChartDataResponseResult",
                      "ChartDataResponseSchema",
                      "ChartDataAsyncResponseSchema",
                      "ChartFavStarResponseResult",
                      "GetFavStarIdsSchema",
                      "ImportV1ChartSchema",
                      "ChartCacheWarmUpRequestSchema",
                      "ChartCacheWarmUpResponseSingleSchema",
                      "ChartCacheWarmUpResponseSchema",
                      "Meta"
                    ],
                    "imports": [
                      "__future__",
                      "inspect",
                      "typing",
                      "flask_babel",
                      "marshmallow",
                      "marshmallow.validate",
                      "superset",
                      "superset.common.chart_data",
                      "superset.db_engine_specs.base",
                      "superset.utils",
                      "superset.utils.core",
                      "superset.common.query_context",
                      "superset.common.query_context_factory",
                      "superset.common.query_context_factory"
                    ],
                    "size_lines": 1631,
                    "has_main": false,
                    "docstring": null
                  },
                  "client_processing.py": {
                    "functions": [
                      "get_column_key",
                      "pivot_df",
                      "list_unique_values",
                      "pivot_table_v2",
                      "table",
                      "apply_client_processing"
                    ],
                    "classes": [],
                    "imports": [
                      "logging",
                      "io",
                      "typing",
                      "numpy",
                      "pandas",
                      "flask_babel",
                      "superset.common.chart_data",
                      "superset.extensions",
                      "superset.utils.core",
                      "superset.connectors.sqla.models",
                      "superset.models.sql_lab"
                    ],
                    "size_lines": 388,
                    "has_main": false,
                    "docstring": "Functions to reproduce the client post-processing of data on charts.\n\nSome text-based charts (pivot tables and t-test table) perform post-processing of the\ndata in JavaScript. When sending the data to users in reports we want to show the same\ndata they would see on Explore.\n\nIn order to do that, we reproduce the post-processing in Python for these chart types."
                  },
                  "filters.py": {
                    "functions": [
                      "apply",
                      "apply",
                      "apply",
                      "apply",
                      "apply",
                      "apply"
                    ],
                    "classes": [
                      "ChartAllTextFilter",
                      "ChartFavoriteFilter",
                      "ChartTagNameFilter",
                      "ChartTagIdFilter",
                      "ChartCertifiedFilter",
                      "ChartFilter",
                      "ChartHasCreatedByFilter",
                      "ChartCreatedByMeFilter",
                      "ChartOwnedCreatedFavoredByMeFilter"
                    ],
                    "imports": [
                      "typing",
                      "flask_babel",
                      "sqlalchemy",
                      "sqlalchemy.orm",
                      "sqlalchemy.orm.query",
                      "superset",
                      "superset.connectors.sqla",
                      "superset.connectors.sqla.models",
                      "superset.models.core",
                      "superset.models.slice",
                      "superset.tags.filters",
                      "superset.utils.core",
                      "superset.utils.filters",
                      "superset.views.base",
                      "superset.views.base_api"
                    ],
                    "size_lines": 183,
                    "has_main": false,
                    "docstring": null
                  },
                  "data": {
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "api.py": {
                      "functions": [
                        "get_data",
                        "data",
                        "data_from_cache",
                        "_run_async",
                        "_send_chart_response",
                        "_get_data_response",
                        "_load_query_context_form_from_cache",
                        "_map_form_data_datasource_to_dataset_id",
                        "_create_query_context_from_form",
                        "_process_data"
                      ],
                      "classes": [
                        "ChartDataRestApi"
                      ],
                      "imports": [
                        "__future__",
                        "contextlib",
                        "logging",
                        "typing",
                        "flask",
                        "flask_appbuilder.api",
                        "flask_babel",
                        "marshmallow",
                        "superset",
                        "superset.async_events.async_query_manager",
                        "superset.charts.api",
                        "superset.charts.client_processing",
                        "superset.charts.data.query_context_cache_loader",
                        "superset.charts.schemas",
                        "superset.commands.chart.data.create_async_job_command",
                        "superset.commands.chart.data.get_data_command",
                        "superset.commands.chart.exceptions",
                        "superset.common.chart_data",
                        "superset.connectors.sqla.models",
                        "superset.daos.exceptions",
                        "superset.exceptions",
                        "superset.extensions",
                        "superset.models.sql_lab",
                        "superset.utils",
                        "superset.utils.core",
                        "superset.utils.decorators",
                        "superset.views.base",
                        "superset.views.base_api",
                        "superset.common.query_context"
                      ],
                      "size_lines": 466,
                      "has_main": false,
                      "docstring": null
                    },
                    "query_context_cache_loader.py": {
                      "functions": [
                        "load"
                      ],
                      "classes": [
                        "QueryContextCacheLoader"
                      ],
                      "imports": [
                        "typing",
                        "superset",
                        "superset.commands.chart.exceptions"
                      ],
                      "size_lines": 31,
                      "has_main": false,
                      "docstring": null
                    }
                  }
                },
                "utils": {
                  "encrypt.py": {
                    "functions": [
                      "create",
                      "create",
                      "__init__",
                      "init_app",
                      "create",
                      "created_by_enc_field_factory",
                      "__init__",
                      "discover_encrypted_fields",
                      "_read_bytes",
                      "_select_columns_from_table",
                      "_re_encrypt_row",
                      "run"
                    ],
                    "classes": [
                      "EncryptedType",
                      "AbstractEncryptedFieldAdapter",
                      "SQLAlchemyUtilsAdapter",
                      "EncryptedFieldFactory",
                      "SecretsMigrator"
                    ],
                    "imports": [
                      "logging",
                      "abc",
                      "typing",
                      "flask",
                      "flask_babel",
                      "sqlalchemy",
                      "sqlalchemy.engine",
                      "sqlalchemy_utils",
                      "superset"
                    ],
                    "size_lines": 208,
                    "has_main": false,
                    "docstring": null
                  },
                  "class_utils.py": {
                    "functions": [
                      "load_class_from_name"
                    ],
                    "classes": [],
                    "imports": [
                      "importlib",
                      "typing"
                    ],
                    "size_lines": 40,
                    "has_main": false,
                    "docstring": null
                  },
                  "retries.py": {
                    "functions": [
                      "retry_call"
                    ],
                    "classes": [],
                    "imports": [
                      "logging",
                      "collections.abc",
                      "typing",
                      "backoff"
                    ],
                    "size_lines": 43,
                    "has_main": false,
                    "docstring": null
                  },
                  "url_map_converters.py": {
                    "functions": [
                      "__init__",
                      "to_python",
                      "to_url"
                    ],
                    "classes": [
                      "RegexConverter",
                      "ObjectTypeConverter"
                    ],
                    "imports": [
                      "typing",
                      "werkzeug.routing",
                      "superset.tags.models"
                    ],
                    "size_lines": 38,
                    "has_main": false,
                    "docstring": null
                  },
                  "dict_import_export.py": {
                    "functions": [
                      "export_schema_to_dict",
                      "export_to_dict"
                    ],
                    "classes": [],
                    "imports": [
                      "logging",
                      "typing",
                      "superset",
                      "superset.models.core"
                    ],
                    "size_lines": 58,
                    "has_main": false,
                    "docstring": null
                  },
                  "screenshots.py": {
                    "functions": [
                      "__init__",
                      "from_dict",
                      "to_dict",
                      "update_timestamp",
                      "pending",
                      "computing",
                      "update",
                      "error",
                      "get_image",
                      "get_timestamp",
                      "get_status",
                      "is_error_cache_ttl_expired",
                      "should_trigger_task",
                      "__init__",
                      "driver",
                      "get_screenshot",
                      "get_cache_key",
                      "get_from_cache",
                      "get_from_cache_key",
                      "compute_and_cache",
                      "resize_image",
                      "__init__",
                      "__init__",
                      "get_cache_key"
                    ],
                    "classes": [
                      "StatusValues",
                      "ScreenshotCachePayloadType",
                      "ScreenshotCachePayload",
                      "BaseScreenshot",
                      "ChartScreenshot",
                      "DashboardScreenshot"
                    ],
                    "imports": [
                      "__future__",
                      "base64",
                      "logging",
                      "datetime",
                      "enum",
                      "io",
                      "typing",
                      "flask",
                      "superset",
                      "superset.dashboards.permalink.types",
                      "superset.extensions",
                      "superset.utils.hashing",
                      "superset.utils.urls",
                      "superset.utils.webdriver",
                      "PIL",
                      "flask_appbuilder.security.sqla.models",
                      "flask_caching"
                    ],
                    "size_lines": 365,
                    "has_main": false,
                    "docstring": null
                  },
                  "logging_configurator.py": {
                    "functions": [
                      "configure_logging",
                      "configure_logging"
                    ],
                    "classes": [
                      "LoggingConfigurator",
                      "DefaultLoggingConfigurator"
                    ],
                    "imports": [
                      "abc",
                      "logging",
                      "logging.handlers",
                      "flask.app",
                      "flask.config"
                    ],
                    "size_lines": 59,
                    "has_main": false,
                    "docstring": null
                  },
                  "dashboard_filter_scopes_converter.py": {
                    "functions": [
                      "convert_filter_scopes",
                      "copy_filter_scopes",
                      "add_filter_scope"
                    ],
                    "classes": [],
                    "imports": [
                      "logging",
                      "collections",
                      "typing",
                      "superset.models.slice",
                      "superset.utils"
                    ],
                    "size_lines": 91,
                    "has_main": false,
                    "docstring": null
                  },
                  "cache_manager.py": {
                    "functions": [
                      "get",
                      "__init__",
                      "_init_cache",
                      "init_app",
                      "data_cache",
                      "cache",
                      "thumbnail_cache",
                      "filter_state_cache",
                      "explore_form_data_cache"
                    ],
                    "classes": [
                      "ExploreFormDataCache",
                      "CacheManager"
                    ],
                    "imports": [
                      "logging",
                      "typing",
                      "flask",
                      "flask_caching",
                      "markupsafe",
                      "superset.utils.core"
                    ],
                    "size_lines": 122,
                    "has_main": false,
                    "docstring": null
                  },
                  "log.py": {
                    "functions": [
                      "collect_request_payload",
                      "get_logger_from_status",
                      "get_event_logger_from_cfg_value",
                      "__call__",
                      "__enter__",
                      "__exit__",
                      "curate_payload",
                      "curate_form_data",
                      "log",
                      "log_with_context",
                      "log_context",
                      "_wrapper",
                      "log_this",
                      "log_this_with_context",
                      "log_this_with_extra_payload",
                      "log",
                      "log",
                      "wrapper",
                      "func"
                    ],
                    "classes": [
                      "AbstractEventLogger",
                      "DBEventLogger",
                      "StdOutEventLogger"
                    ],
                    "imports": [
                      "__future__",
                      "functools",
                      "inspect",
                      "logging",
                      "textwrap",
                      "abc",
                      "collections.abc",
                      "contextlib",
                      "datetime",
                      "typing",
                      "flask",
                      "flask_appbuilder.const",
                      "sqlalchemy.exc",
                      "superset.extensions",
                      "superset.utils",
                      "superset.utils.core",
                      "superset",
                      "superset.views.core",
                      "superset",
                      "superset.models.core"
                    ],
                    "size_lines": 440,
                    "has_main": false,
                    "docstring": null
                  },
                  "oauth2.py": {
                    "functions": [
                      "get_oauth2_access_token",
                      "refresh_oauth2_token",
                      "encode_oauth2_state",
                      "decode_oauth2_state",
                      "check_for_oauth2",
                      "make_oauth2_state"
                    ],
                    "classes": [
                      "OAuth2StateSchema",
                      "OAuth2ClientConfigSchema",
                      "Meta"
                    ],
                    "imports": [
                      "__future__",
                      "contextlib",
                      "datetime",
                      "typing",
                      "backoff",
                      "jwt",
                      "flask",
                      "marshmallow",
                      "superset",
                      "superset.distributed_lock",
                      "superset.exceptions",
                      "superset.superset_typing",
                      "superset.db_engine_specs.base",
                      "superset.models.core",
                      "superset.models.core"
                    ],
                    "size_lines": 214,
                    "has_main": false,
                    "docstring": null
                  },
                  "database.py": {
                    "functions": [
                      "get_or_create_db",
                      "get_example_database",
                      "get_main_database",
                      "remove_database"
                    ],
                    "classes": [],
                    "imports": [
                      "__future__",
                      "logging",
                      "typing",
                      "flask",
                      "superset.constants",
                      "superset.connectors.sqla.models",
                      "superset",
                      "superset.models",
                      "superset"
                    ],
                    "size_lines": 83,
                    "has_main": false,
                    "docstring": null
                  },
                  "cache.py": {
                    "functions": [
                      "generate_cache_key",
                      "set_and_log_cache",
                      "memoized_func",
                      "etag_cache",
                      "wrap",
                      "decorator",
                      "wrapped_f",
                      "wrapper"
                    ],
                    "classes": [],
                    "imports": [
                      "__future__",
                      "inspect",
                      "logging",
                      "datetime",
                      "functools",
                      "typing",
                      "flask",
                      "flask_caching",
                      "flask_caching.backends",
                      "werkzeug.wrappers",
                      "superset",
                      "superset.extensions",
                      "superset.models.cache",
                      "superset.utils.hashing",
                      "superset.utils.json",
                      "superset.stats_logger"
                    ],
                    "size_lines": 257,
                    "has_main": false,
                    "docstring": null
                  },
                  "__init__.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 17,
                    "has_main": false,
                    "docstring": null
                  },
                  "core.py": {
                    "functions": [
                      "parse_js_uri_path_item",
                      "cast_to_num",
                      "cast_to_boolean",
                      "error_msg_from_exception",
                      "markdown",
                      "readfile",
                      "generic_find_constraint_name",
                      "generic_find_fk_constraint_name",
                      "generic_find_fk_constraint_names",
                      "generic_find_uq_constraint_name",
                      "get_datasource_full_name",
                      "pessimistic_connection_handling",
                      "send_email_smtp",
                      "send_mime_email",
                      "recipients_string_to_list",
                      "choicify",
                      "zlib_compress",
                      "zlib_decompress",
                      "simple_filter_to_adhoc",
                      "form_data_to_adhoc",
                      "merge_extra_form_data",
                      "merge_extra_filters",
                      "merge_request_params",
                      "user_label",
                      "get_example_default_schema",
                      "backend",
                      "is_adhoc_metric",
                      "is_adhoc_column",
                      "is_base_axis",
                      "get_base_axis_columns",
                      "get_non_base_axis_columns",
                      "get_base_axis_labels",
                      "get_x_axis_label",
                      "get_column_name",
                      "get_metric_name",
                      "get_column_names",
                      "get_metric_names",
                      "get_first_metric_name",
                      "ensure_path_exists",
                      "convert_legacy_filters_into_adhoc",
                      "split_adhoc_filters_into_base_filters",
                      "get_user",
                      "get_username",
                      "get_user_id",
                      "get_user_email",
                      "override_user",
                      "parse_ssl_cert",
                      "create_ssl_cert_file",
                      "time_function",
                      "MediumText",
                      "LongText",
                      "shortid",
                      "get_stacktrace",
                      "split",
                      "as_list",
                      "get_form_data_token",
                      "get_column_name_from_column",
                      "get_column_names_from_columns",
                      "get_column_name_from_metric",
                      "get_column_names_from_metrics",
                      "extract_dataframe_dtypes",
                      "extract_column_dtype",
                      "is_test",
                      "get_time_filter_status",
                      "format_list",
                      "find_duplicates",
                      "remove_duplicates",
                      "normalize_dttm_col",
                      "parse_boolean_string",
                      "apply_max_row_limit",
                      "create_zip",
                      "check_is_safe_zip",
                      "remove_extra_adhoc_filters",
                      "to_int",
                      "get_query_source_from_request",
                      "get_user_agent",
                      "is_standalone_mode",
                      "__init__",
                      "handle_timeout",
                      "__enter__",
                      "__exit__",
                      "__init__",
                      "__enter__",
                      "__exit__",
                      "ping_connection",
                      "__hash__",
                      "__eq__",
                      "get_legacy_time_column",
                      "set_sqlite_pragma",
                      "get_filter_key"
                    ],
                    "classes": [
                      "AdhocMetricExpressionType",
                      "AnnotationType",
                      "GenericDataType",
                      "DatasourceType",
                      "LoggerLevel",
                      "HeaderDataType",
                      "DatasourceDict",
                      "AdhocFilterClause",
                      "QueryObjectFilterClause",
                      "ExtraFiltersTimeColumnType",
                      "ExtraFiltersReasonType",
                      "FilterOperator",
                      "FilterStringOperators",
                      "PostProcessingBoxplotWhiskerType",
                      "PostProcessingContributionOrientation",
                      "QuerySource",
                      "QueryStatus",
                      "DashboardStatus",
                      "ReservedUrlParameters",
                      "RowLevelSecurityFilterType",
                      "ColumnTypeSource",
                      "ColumnSpec",
                      "SigalrmTimeout",
                      "TimerTimeout",
                      "DatasourceName",
                      "DateColumn"
                    ],
                    "imports": [
                      "__future__",
                      "_thread",
                      "collections",
                      "errno",
                      "logging",
                      "os",
                      "platform",
                      "re",
                      "signal",
                      "smtplib",
                      "sqlite3",
                      "ssl",
                      "tempfile",
                      "threading",
                      "traceback",
                      "uuid",
                      "zlib",
                      "collections.abc",
                      "contextlib",
                      "dataclasses",
                      "datetime",
                      "email.mime.application",
                      "email.mime.image",
                      "email.mime.multipart",
                      "email.mime.text",
                      "email.utils",
                      "enum",
                      "io",
                      "timeit",
                      "types",
                      "typing",
                      "urllib.parse",
                      "zipfile",
                      "markdown",
                      "nh3",
                      "pandas",
                      "sqlalchemy",
                      "cryptography.hazmat.backends",
                      "cryptography.x509",
                      "flask",
                      "flask_appbuilder",
                      "flask_appbuilder.security.sqla.models",
                      "flask_babel",
                      "markupsafe",
                      "pandas.api.types",
                      "pandas.core.dtypes.common",
                      "sqlalchemy",
                      "sqlalchemy.dialects.mysql",
                      "sqlalchemy.engine",
                      "sqlalchemy.engine.reflection",
                      "sqlalchemy.sql.type_api",
                      "sqlalchemy.types",
                      "typing_extensions",
                      "superset.constants",
                      "superset.errors",
                      "superset.exceptions",
                      "superset.sql_parse",
                      "superset.superset_typing",
                      "superset.utils.backports",
                      "superset.utils.database",
                      "superset.utils.date_parser",
                      "superset.utils.hashing",
                      "superset.connectors.sqla.models",
                      "superset.models.core",
                      "superset.models.sql_lab"
                    ],
                    "size_lines": 1834,
                    "has_main": false,
                    "docstring": "Utility functions used across Superset"
                  },
                  "pdf.py": {
                    "functions": [
                      "build_pdf_from_screenshots"
                    ],
                    "classes": [],
                    "imports": [
                      "logging",
                      "io",
                      "superset.commands.report.exceptions",
                      "PIL"
                    ],
                    "size_lines": 49,
                    "has_main": false,
                    "docstring": null
                  },
                  "mock_data.py": {
                    "functions": [
                      "get_type_generator",
                      "add_data",
                      "get_column_objects",
                      "generate_data",
                      "generate_column_data",
                      "add_sample_rows",
                      "get_valid_foreign_key",
                      "generate_value"
                    ],
                    "classes": [
                      "ColumnInfo"
                    ],
                    "imports": [
                      "decimal",
                      "logging",
                      "os",
                      "random",
                      "string",
                      "sys",
                      "collections.abc",
                      "datetime",
                      "typing",
                      "uuid",
                      "sqlalchemy.sql.sqltypes",
                      "sqlalchemy_utils",
                      "flask_appbuilder",
                      "sqlalchemy",
                      "sqlalchemy.dialects",
                      "sqlalchemy.sql",
                      "sqlalchemy.sql.visitors",
                      "superset",
                      "superset.sql_parse",
                      "superset.utils",
                      "superset.utils.database"
                    ],
                    "size_lines": 302,
                    "has_main": false,
                    "docstring": null
                  },
                  "public_interfaces.py": {
                    "functions": [
                      "compute_hash",
                      "compute_func_hash",
                      "compute_class_hash",
                      "get_warning_message"
                    ],
                    "classes": [],
                    "imports": [
                      "base64",
                      "hashlib",
                      "inspect",
                      "textwrap",
                      "typing"
                    ],
                    "size_lines": 75,
                    "has_main": false,
                    "docstring": null
                  },
                  "excel.py": {
                    "functions": [
                      "quote_formulas",
                      "df_to_excel",
                      "apply_column_types"
                    ],
                    "classes": [],
                    "imports": [
                      "io",
                      "typing",
                      "pandas",
                      "superset.utils.core"
                    ],
                    "size_lines": 83,
                    "has_main": false,
                    "docstring": null
                  },
                  "file.py": {
                    "functions": [
                      "get_filename"
                    ],
                    "classes": [],
                    "imports": [
                      "werkzeug.utils"
                    ],
                    "size_lines": 24,
                    "has_main": false,
                    "docstring": null
                  },
                  "csv.py": {
                    "functions": [
                      "escape_value",
                      "df_to_escaped_csv",
                      "get_chart_csv_data",
                      "get_chart_dataframe",
                      "escape_values"
                    ],
                    "classes": [],
                    "imports": [
                      "logging",
                      "re",
                      "urllib.request",
                      "typing",
                      "urllib.error",
                      "numpy",
                      "pandas",
                      "superset.utils",
                      "superset.utils.core"
                    ],
                    "size_lines": 140,
                    "has_main": false,
                    "docstring": null
                  },
                  "network.py": {
                    "functions": [
                      "is_port_open",
                      "is_hostname_valid",
                      "is_host_up"
                    ],
                    "classes": [],
                    "imports": [
                      "platform",
                      "socket",
                      "subprocess"
                    ],
                    "size_lines": 71,
                    "has_main": false,
                    "docstring": null
                  },
                  "dashboard_import_export.py": {
                    "functions": [
                      "export_dashboards"
                    ],
                    "classes": [],
                    "imports": [
                      "logging",
                      "superset",
                      "superset.models.dashboard"
                    ],
                    "size_lines": 34,
                    "has_main": false,
                    "docstring": null
                  },
                  "backports.py": {
                    "functions": [],
                    "classes": [
                      "StrEnum"
                    ],
                    "imports": [
                      "sys",
                      "enum",
                      "enum"
                    ],
                    "size_lines": 27,
                    "has_main": false,
                    "docstring": null
                  },
                  "dates.py": {
                    "functions": [
                      "datetime_to_epoch",
                      "now_as_float"
                    ],
                    "classes": [],
                    "imports": [
                      "datetime",
                      "pytz"
                    ],
                    "size_lines": 35,
                    "has_main": false,
                    "docstring": null
                  },
                  "feature_flag_manager.py": {
                    "functions": [
                      "__init__",
                      "init_app",
                      "get_feature_flags",
                      "is_feature_enabled"
                    ],
                    "classes": [
                      "FeatureFlagManager"
                    ],
                    "imports": [
                      "copy",
                      "flask"
                    ],
                    "size_lines": 59,
                    "has_main": false,
                    "docstring": null
                  },
                  "ssh_tunnel.py": {
                    "functions": [
                      "mask_password_info",
                      "unmask_password_info",
                      "get_default_port"
                    ],
                    "classes": [],
                    "imports": [
                      "typing",
                      "superset.constants",
                      "superset.databases.ssh_tunnel.models"
                    ],
                    "size_lines": 58,
                    "has_main": false,
                    "docstring": null
                  },
                  "date_parser.py": {
                    "functions": [
                      "parse_human_datetime",
                      "normalize_time_delta",
                      "dttm_from_timetuple",
                      "get_past_or_future",
                      "parse_human_timedelta",
                      "parse_past_timedelta",
                      "get_relative_base",
                      "handle_start_of",
                      "handle_end_of",
                      "handle_modifier_and_unit",
                      "handle_scope_and_unit",
                      "get_since_until",
                      "add_ago_to_since",
                      "datetime_parser",
                      "datetime_eval",
                      "__init__",
                      "eval",
                      "__init__",
                      "eval",
                      "__init__",
                      "eval",
                      "__init__",
                      "eval",
                      "__init__",
                      "eval",
                      "__init__",
                      "eval",
                      "__init__",
                      "eval"
                    ],
                    "classes": [
                      "EvalText",
                      "EvalDateTimeFunc",
                      "EvalDateAddFunc",
                      "EvalDateDiffFunc",
                      "EvalDateTruncFunc",
                      "EvalLastDayFunc",
                      "EvalHolidayFunc",
                      "DateRangeMigration"
                    ],
                    "imports": [
                      "__future__",
                      "calendar",
                      "logging",
                      "re",
                      "datetime",
                      "functools",
                      "time",
                      "pandas",
                      "parsedatetime",
                      "dateutil.parser",
                      "dateutil.relativedelta",
                      "flask_babel",
                      "holidays",
                      "pyparsing",
                      "superset.commands.chart.exceptions",
                      "superset.constants",
                      "superset"
                    ],
                    "size_lines": 795,
                    "has_main": false,
                    "docstring": null
                  },
                  "profiler.py": {
                    "functions": [
                      "__init__",
                      "__call__"
                    ],
                    "classes": [
                      "SupersetProfiler"
                    ],
                    "imports": [
                      "typing",
                      "unittest",
                      "werkzeug.wrappers",
                      "pyinstrument"
                    ],
                    "size_lines": 64,
                    "has_main": false,
                    "docstring": null
                  },
                  "machine_auth.py": {
                    "functions": [
                      "__init__",
                      "authenticate_webdriver",
                      "authenticate_browser_context",
                      "get_cookies",
                      "get_auth_cookies",
                      "__init__",
                      "init_app",
                      "instance"
                    ],
                    "classes": [
                      "MachineAuthProvider",
                      "MachineAuthProviderFactory"
                    ],
                    "imports": [
                      "__future__",
                      "logging",
                      "typing",
                      "urllib.parse",
                      "flask",
                      "flask_login",
                      "selenium.webdriver.remote.webdriver",
                      "werkzeug.http",
                      "superset.utils.class_utils",
                      "superset.utils.urls",
                      "flask_appbuilder.security.sqla.models",
                      "playwright.sync_api"
                    ],
                    "size_lines": 161,
                    "has_main": false,
                    "docstring": null
                  },
                  "urls.py": {
                    "functions": [
                      "get_url_host",
                      "headless_url",
                      "get_url_path",
                      "modify_url_query",
                      "is_secure_url"
                    ],
                    "classes": [],
                    "imports": [
                      "urllib",
                      "typing",
                      "urllib.parse",
                      "flask"
                    ],
                    "size_lines": 65,
                    "has_main": false,
                    "docstring": null
                  },
                  "json.py": {
                    "functions": [
                      "format_timedelta",
                      "base_json_conv",
                      "json_iso_dttm_ser",
                      "pessimistic_json_iso_dttm_ser",
                      "json_int_dttm_ser",
                      "json_dumps_w_dates",
                      "validate_json",
                      "dumps",
                      "loads",
                      "redact_sensitive",
                      "reveal_sensitive",
                      "__init__",
                      "default"
                    ],
                    "classes": [
                      "DashboardEncoder"
                    ],
                    "imports": [
                      "copy",
                      "decimal",
                      "logging",
                      "uuid",
                      "datetime",
                      "typing",
                      "numpy",
                      "pandas",
                      "simplejson",
                      "flask_babel.speaklater",
                      "jsonpath_ng",
                      "simplejson",
                      "superset.constants",
                      "superset.utils.dates"
                    ],
                    "size_lines": 305,
                    "has_main": false,
                    "docstring": null
                  },
                  "hashing.py": {
                    "functions": [
                      "md5_sha_from_str",
                      "md5_sha_from_dict"
                    ],
                    "classes": [],
                    "imports": [
                      "hashlib",
                      "typing",
                      "superset.utils"
                    ],
                    "size_lines": 37,
                    "has_main": false,
                    "docstring": null
                  },
                  "slack.py": {
                    "functions": [
                      "get_slack_client",
                      "get_channels",
                      "get_channels_with_search",
                      "should_use_v2_api",
                      "get_user_avatar"
                    ],
                    "classes": [
                      "SlackChannelTypes",
                      "SlackClientError"
                    ],
                    "imports": [
                      "logging",
                      "typing",
                      "flask",
                      "slack_sdk",
                      "slack_sdk.errors",
                      "slack_sdk.http_retry.builtin_handlers",
                      "superset",
                      "superset.exceptions",
                      "superset.extensions",
                      "superset.reports.schemas",
                      "superset.utils",
                      "superset.utils.backports",
                      "superset.utils.core"
                    ],
                    "size_lines": 174,
                    "has_main": false,
                    "docstring": null
                  },
                  "filters.py": {
                    "functions": [
                      "get_dataset_access_filters"
                    ],
                    "classes": [],
                    "imports": [
                      "typing",
                      "flask_appbuilder",
                      "sqlalchemy",
                      "sqlalchemy.sql.elements",
                      "superset",
                      "superset.connectors.sqla.models"
                    ],
                    "size_lines": 44,
                    "has_main": false,
                    "docstring": null
                  },
                  "schema.py": {
                    "functions": [
                      "validate_json",
                      "__call__"
                    ],
                    "classes": [
                      "OneOfCaseInsensitive"
                    ],
                    "imports": [
                      "typing",
                      "marshmallow",
                      "superset.utils"
                    ],
                    "size_lines": 54,
                    "has_main": false,
                    "docstring": null
                  },
                  "webdriver.py": {
                    "functions": [
                      "__init__",
                      "get_screenshot",
                      "auth",
                      "find_unexpected_errors",
                      "get_screenshot",
                      "create",
                      "auth",
                      "destroy",
                      "find_unexpected_errors",
                      "get_screenshot"
                    ],
                    "classes": [
                      "DashboardStandaloneMode",
                      "ChartStandaloneMode",
                      "WebDriverProxy",
                      "WebDriverPlaywright",
                      "WebDriverSelenium"
                    ],
                    "imports": [
                      "__future__",
                      "logging",
                      "abc",
                      "enum",
                      "time",
                      "typing",
                      "flask",
                      "packaging",
                      "selenium",
                      "selenium.common.exceptions",
                      "selenium.webdriver",
                      "selenium.webdriver.common.by",
                      "selenium.webdriver.common.service",
                      "selenium.webdriver.remote.webdriver",
                      "selenium.webdriver.support",
                      "selenium.webdriver.support.ui",
                      "superset",
                      "superset.extensions",
                      "superset.utils.retries",
                      "flask_appbuilder.security.sqla.models",
                      "playwright.sync_api"
                    ],
                    "size_lines": 485,
                    "has_main": false,
                    "docstring": null
                  },
                  "decorators.py": {
                    "functions": [
                      "statsd_gauge",
                      "logs_context",
                      "stats_timing",
                      "arghash",
                      "debounce",
                      "on_security_exception",
                      "suppress_logging",
                      "on_error",
                      "transaction",
                      "decorate",
                      "decorate",
                      "decorate",
                      "decorate",
                      "wrapped",
                      "wrapped",
                      "wrapped",
                      "wrapped"
                    ],
                    "classes": [],
                    "imports": [
                      "__future__",
                      "logging",
                      "time",
                      "collections.abc",
                      "contextlib",
                      "functools",
                      "typing",
                      "uuid",
                      "flask",
                      "sqlalchemy.exc",
                      "superset.utils",
                      "superset.utils.dates",
                      "superset.stats_logger",
                      "superset"
                    ],
                    "size_lines": 280,
                    "has_main": false,
                    "docstring": null
                  },
                  "pandas_postprocessing": {
                    "aggregate.py": {
                      "functions": [
                        "aggregate"
                      ],
                      "classes": [],
                      "imports": [
                        "typing",
                        "pandas",
                        "superset.utils.pandas_postprocessing.utils"
                      ],
                      "size_lines": 47,
                      "has_main": false,
                      "docstring": null
                    },
                    "flatten.py": {
                      "functions": [
                        "is_sequence",
                        "flatten"
                      ],
                      "classes": [],
                      "imports": [
                        "collections.abc",
                        "typing",
                        "pandas",
                        "superset.utils.pandas_postprocessing.utils"
                      ],
                      "size_lines": 106,
                      "has_main": false,
                      "docstring": null
                    },
                    "boxplot.py": {
                      "functions": [
                        "boxplot",
                        "quartile1",
                        "quartile3",
                        "outliers",
                        "whisker_high",
                        "whisker_low",
                        "whisker_high",
                        "whisker_low"
                      ],
                      "classes": [],
                      "imports": [
                        "typing",
                        "numpy",
                        "flask_babel",
                        "pandas",
                        "superset.exceptions",
                        "superset.utils.core",
                        "superset.utils.pandas_postprocessing.aggregate"
                      ],
                      "size_lines": 133,
                      "has_main": false,
                      "docstring": null
                    },
                    "resample.py": {
                      "functions": [
                        "resample"
                      ],
                      "classes": [],
                      "imports": [
                        "typing",
                        "pandas",
                        "flask_babel",
                        "superset.exceptions",
                        "superset.utils.pandas_postprocessing.utils"
                      ],
                      "size_lines": 59,
                      "has_main": false,
                      "docstring": null
                    },
                    "geography.py": {
                      "functions": [
                        "geohash_decode",
                        "geohash_encode",
                        "geodetic_parse",
                        "_parse_location"
                      ],
                      "classes": [],
                      "imports": [
                        "typing",
                        "geohash",
                        "flask_babel",
                        "geopy.point",
                        "pandas",
                        "superset.exceptions",
                        "superset.utils.pandas_postprocessing.utils"
                      ],
                      "size_lines": 119,
                      "has_main": false,
                      "docstring": null
                    },
                    "rename.py": {
                      "functions": [
                        "rename"
                      ],
                      "classes": [],
                      "imports": [
                        "typing",
                        "pandas",
                        "flask_babel",
                        "pandas._typing",
                        "superset.exceptions",
                        "superset.utils.pandas_postprocessing.utils"
                      ],
                      "size_lines": 59,
                      "has_main": false,
                      "docstring": null
                    },
                    "histogram.py": {
                      "functions": [
                        "histogram",
                        "hist_values"
                      ],
                      "classes": [],
                      "imports": [
                        "__future__",
                        "numpy",
                        "pandas"
                      ],
                      "size_lines": 91,
                      "has_main": false,
                      "docstring": null
                    },
                    "sort.py": {
                      "functions": [
                        "sort"
                      ],
                      "classes": [],
                      "imports": [
                        "typing",
                        "pandas",
                        "superset.utils.pandas_postprocessing.utils"
                      ],
                      "size_lines": 48,
                      "has_main": false,
                      "docstring": null
                    },
                    "cum.py": {
                      "functions": [
                        "cum"
                      ],
                      "classes": [],
                      "imports": [
                        "flask_babel",
                        "pandas",
                        "superset.exceptions",
                        "superset.utils.pandas_postprocessing.utils"
                      ],
                      "size_lines": 59,
                      "has_main": false,
                      "docstring": null
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [
                        "superset.utils.pandas_postprocessing.aggregate",
                        "superset.utils.pandas_postprocessing.boxplot",
                        "superset.utils.pandas_postprocessing.compare",
                        "superset.utils.pandas_postprocessing.contribution",
                        "superset.utils.pandas_postprocessing.cum",
                        "superset.utils.pandas_postprocessing.diff",
                        "superset.utils.pandas_postprocessing.flatten",
                        "superset.utils.pandas_postprocessing.geography",
                        "superset.utils.pandas_postprocessing.histogram",
                        "superset.utils.pandas_postprocessing.pivot",
                        "superset.utils.pandas_postprocessing.prophet",
                        "superset.utils.pandas_postprocessing.rank",
                        "superset.utils.pandas_postprocessing.rename",
                        "superset.utils.pandas_postprocessing.resample",
                        "superset.utils.pandas_postprocessing.rolling",
                        "superset.utils.pandas_postprocessing.select",
                        "superset.utils.pandas_postprocessing.sort",
                        "superset.utils.pandas_postprocessing.utils"
                      ],
                      "size_lines": 66,
                      "has_main": false,
                      "docstring": null
                    },
                    "rolling.py": {
                      "functions": [
                        "rolling"
                      ],
                      "classes": [],
                      "imports": [
                        "typing",
                        "flask_babel",
                        "pandas",
                        "superset.exceptions",
                        "superset.utils.pandas_postprocessing.utils"
                      ],
                      "size_lines": 102,
                      "has_main": false,
                      "docstring": null
                    },
                    "utils.py": {
                      "functions": [
                        "_is_multi_index_on_columns",
                        "scalar_to_sequence",
                        "validate_column_args",
                        "_get_aggregate_funcs",
                        "_append_columns",
                        "escape_separator",
                        "unescape_separator",
                        "wrapper",
                        "wrapped"
                      ],
                      "classes": [],
                      "imports": [
                        "collections.abc",
                        "functools",
                        "typing",
                        "numpy",
                        "pandas",
                        "flask_babel",
                        "pandas",
                        "superset.constants",
                        "superset.exceptions"
                      ],
                      "size_lines": 221,
                      "has_main": false,
                      "docstring": null
                    },
                    "contribution.py": {
                      "functions": [
                        "contribution",
                        "get_column_groups",
                        "calculate_row_contribution"
                      ],
                      "classes": [],
                      "imports": [
                        "__future__",
                        "decimal",
                        "typing",
                        "flask_babel",
                        "pandas",
                        "superset.exceptions",
                        "superset.utils.core",
                        "superset.utils.pandas_postprocessing.utils"
                      ],
                      "size_lines": 155,
                      "has_main": false,
                      "docstring": null
                    },
                    "prophet.py": {
                      "functions": [
                        "_prophet_parse_seasonality",
                        "_prophet_fit_and_predict",
                        "prophet"
                      ],
                      "classes": [],
                      "imports": [
                        "logging",
                        "typing",
                        "pandas",
                        "flask_babel",
                        "pandas",
                        "superset.exceptions",
                        "superset.utils.core",
                        "superset.utils.decorators",
                        "superset.utils.pandas_postprocessing.utils",
                        "prophet"
                      ],
                      "size_lines": 171,
                      "has_main": false,
                      "docstring": null
                    },
                    "diff.py": {
                      "functions": [
                        "diff"
                      ],
                      "classes": [],
                      "imports": [
                        "pandas",
                        "superset.constants",
                        "superset.utils.pandas_postprocessing.utils"
                      ],
                      "size_lines": 51,
                      "has_main": false,
                      "docstring": null
                    },
                    "select.py": {
                      "functions": [
                        "select"
                      ],
                      "classes": [],
                      "imports": [
                        "typing",
                        "pandas",
                        "superset.utils.pandas_postprocessing.utils"
                      ],
                      "size_lines": 55,
                      "has_main": false,
                      "docstring": null
                    },
                    "pivot.py": {
                      "functions": [
                        "pivot"
                      ],
                      "classes": [],
                      "imports": [
                        "typing",
                        "flask_babel",
                        "pandas",
                        "superset.constants",
                        "superset.exceptions",
                        "superset.utils.pandas_postprocessing.utils"
                      ],
                      "size_lines": 110,
                      "has_main": false,
                      "docstring": null
                    },
                    "rank.py": {
                      "functions": [
                        "rank"
                      ],
                      "classes": [],
                      "imports": [
                        "__future__",
                        "pandas"
                      ],
                      "size_lines": 41,
                      "has_main": false,
                      "docstring": null
                    },
                    "compare.py": {
                      "functions": [
                        "compare"
                      ],
                      "classes": [],
                      "imports": [
                        "typing",
                        "pandas",
                        "flask_babel",
                        "pandas",
                        "superset.constants",
                        "superset.exceptions",
                        "superset.utils.core",
                        "superset.utils.pandas_postprocessing.utils"
                      ],
                      "size_lines": 91,
                      "has_main": false,
                      "docstring": null
                    }
                  }
                },
                "importexport": {
                  "__init__.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 17,
                    "has_main": false,
                    "docstring": null
                  },
                  "api.py": {
                    "functions": [
                      "export",
                      "import_"
                    ],
                    "classes": [
                      "ImportExportRestApi"
                    ],
                    "imports": [
                      "datetime",
                      "io",
                      "zipfile",
                      "flask",
                      "flask_appbuilder.api",
                      "superset.commands.export.assets",
                      "superset.commands.importers.exceptions",
                      "superset.commands.importers.v1.assets",
                      "superset.commands.importers.v1.utils",
                      "superset.extensions",
                      "superset.utils",
                      "superset.views.base_api"
                    ],
                    "size_lines": 216,
                    "has_main": false,
                    "docstring": null
                  }
                },
                "models": {
                  "embedded_dashboard.py": {
                    "functions": [
                      "allowed_domains"
                    ],
                    "classes": [
                      "EmbeddedDashboard"
                    ],
                    "imports": [
                      "uuid",
                      "flask_appbuilder",
                      "sqlalchemy",
                      "sqlalchemy.orm",
                      "sqlalchemy_utils",
                      "superset.models.helpers"
                    ],
                    "size_lines": 61,
                    "has_main": false,
                    "docstring": null
                  },
                  "slice.py": {
                    "functions": [
                      "set_related_perm",
                      "event_after_chart_changed",
                      "__repr__",
                      "cls_model",
                      "datasource",
                      "clone",
                      "get_datasource",
                      "datasource_link",
                      "datasource_url",
                      "datasource_name_text",
                      "datasource_edit_url",
                      "viz",
                      "description_markeddown",
                      "data",
                      "digest",
                      "thumbnail_url",
                      "json_data",
                      "form_data",
                      "get_query_context",
                      "get_explore_url",
                      "build_explore_url",
                      "slice_url",
                      "explore_json_url",
                      "edit_url",
                      "chart",
                      "slice_link",
                      "icons",
                      "url",
                      "get_query_context_factory",
                      "get"
                    ],
                    "classes": [
                      "Slice"
                    ],
                    "imports": [
                      "__future__",
                      "logging",
                      "typing",
                      "urllib",
                      "sqlalchemy",
                      "flask_appbuilder",
                      "flask_appbuilder.models.decorators",
                      "markupsafe",
                      "sqlalchemy",
                      "sqlalchemy.engine.base",
                      "sqlalchemy.orm",
                      "sqlalchemy.orm.mapper",
                      "superset",
                      "superset.legacy",
                      "superset.models.helpers",
                      "superset.tasks.thumbnails",
                      "superset.tasks.utils",
                      "superset.thumbnails.digest",
                      "superset.utils",
                      "superset.viz",
                      "superset.common.query_context",
                      "superset.common.query_context_factory",
                      "superset.connectors.sqla.models",
                      "superset.daos.datasource",
                      "superset.common.query_context_factory"
                    ],
                    "size_lines": 393,
                    "has_main": false,
                    "docstring": null
                  },
                  "user_attributes.py": {
                    "functions": [],
                    "classes": [
                      "UserAttribute"
                    ],
                    "imports": [
                      "flask_appbuilder",
                      "sqlalchemy",
                      "sqlalchemy.orm",
                      "superset",
                      "superset.models.helpers"
                    ],
                    "size_lines": 45,
                    "has_main": false,
                    "docstring": null
                  },
                  "cache.py": {
                    "functions": [],
                    "classes": [
                      "CacheKey"
                    ],
                    "imports": [
                      "datetime",
                      "flask_appbuilder",
                      "sqlalchemy"
                    ],
                    "size_lines": 32,
                    "has_main": false,
                    "docstring": null
                  },
                  "__init__.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 18,
                    "has_main": false,
                    "docstring": null
                  },
                  "core.py": {
                    "functions": [
                      "__repr__",
                      "name",
                      "allows_subquery",
                      "function_names",
                      "allows_cost_estimate",
                      "allows_virtual_table_explore",
                      "explore_database_id",
                      "disable_data_preview",
                      "disable_drill_to_detail",
                      "allow_multi_catalog",
                      "schema_options",
                      "data",
                      "unique_name",
                      "url_object",
                      "backend",
                      "driver",
                      "masked_encrypted_extra",
                      "parameters",
                      "parameters_schema",
                      "metadata_cache_timeout",
                      "catalog_cache_enabled",
                      "catalog_cache_timeout",
                      "schema_cache_enabled",
                      "schema_cache_timeout",
                      "table_cache_enabled",
                      "table_cache_timeout",
                      "default_schemas",
                      "connect_args",
                      "engine_information",
                      "get_password_masked_url_from_uri",
                      "get_password_masked_url",
                      "set_sqlalchemy_uri",
                      "get_effective_user",
                      "get_sqla_engine",
                      "_get_sqla_engine",
                      "add_database_to_signature",
                      "get_raw_connection",
                      "get_default_catalog",
                      "get_default_schema",
                      "get_default_schema_for_query",
                      "post_process_df",
                      "quote_identifier",
                      "get_reserved_words",
                      "mutate_sql_based_on_config",
                      "get_df",
                      "fetch_rows",
                      "load_into_dataframe",
                      "compile_sqla_query",
                      "select_star",
                      "apply_limit_to_sql",
                      "safe_sqlalchemy_uri",
                      "get_all_table_names_in_schema",
                      "get_all_view_names_in_schema",
                      "get_inspector",
                      "get_all_schema_names",
                      "get_all_catalog_names",
                      "db_engine_spec",
                      "get_db_engine_spec",
                      "grains",
                      "get_extra",
                      "get_encrypted_extra",
                      "update_params_from_encrypted_extra",
                      "get_table",
                      "get_table_comment",
                      "get_columns",
                      "get_metrics",
                      "get_indexes",
                      "get_pk_constraint",
                      "get_foreign_keys",
                      "get_schema_access_for_file_upload",
                      "sqlalchemy_uri_decrypted",
                      "sql_url",
                      "perm",
                      "perm",
                      "get_perm",
                      "has_table",
                      "has_view",
                      "get_dialect",
                      "make_sqla_column_compatible",
                      "is_oauth2_enabled",
                      "get_oauth2_config",
                      "start_oauth2_dance",
                      "purge_oauth2_tokens",
                      "column_needs_conversion",
                      "_log_query",
                      "_convert"
                    ],
                    "classes": [
                      "KeyValue",
                      "CssTemplate",
                      "ConfigurationMethod",
                      "Database",
                      "DatabaseUserOAuth2Tokens",
                      "Log",
                      "FavStarClassName",
                      "FavStar"
                    ],
                    "imports": [
                      "__future__",
                      "builtins",
                      "logging",
                      "textwrap",
                      "ast",
                      "contextlib",
                      "copy",
                      "datetime",
                      "functools",
                      "inspect",
                      "typing",
                      "numpy",
                      "pandas",
                      "sqlalchemy",
                      "sshtunnel",
                      "flask",
                      "flask_appbuilder",
                      "marshmallow.exceptions",
                      "sqlalchemy",
                      "sqlalchemy.engine",
                      "sqlalchemy.engine.reflection",
                      "sqlalchemy.engine.url",
                      "sqlalchemy.exc",
                      "sqlalchemy.ext.hybrid",
                      "sqlalchemy.orm",
                      "sqlalchemy.pool",
                      "sqlalchemy.schema",
                      "sqlalchemy.sql",
                      "superset",
                      "superset.commands.database.exceptions",
                      "superset.constants",
                      "superset.databases.utils",
                      "superset.db_engine_specs.base",
                      "superset.extensions",
                      "superset.models.helpers",
                      "superset.result_set",
                      "superset.sql.parse",
                      "superset.sql_parse",
                      "superset.superset_typing",
                      "superset.utils",
                      "superset.utils.backports",
                      "superset.utils.core",
                      "superset.utils.oauth2",
                      "superset.databases.ssh_tunnel.models",
                      "superset.models.sql_lab",
                      "superset.daos.database"
                    ],
                    "size_lines": 1231,
                    "has_main": false,
                    "docstring": "A collection of ORM sqlalchemy models for Superset"
                  },
                  "dynamic_plugins.py": {
                    "functions": [
                      "__repr__"
                    ],
                    "classes": [
                      "DynamicPlugin"
                    ],
                    "imports": [
                      "flask_appbuilder",
                      "sqlalchemy",
                      "superset.models.helpers"
                    ],
                    "size_lines": 32,
                    "has_main": false,
                    "docstring": null
                  },
                  "dashboard.py": {
                    "functions": [
                      "copy_dashboard",
                      "is_uuid",
                      "is_int",
                      "id_or_slug_filter",
                      "__repr__",
                      "url",
                      "get_url",
                      "datasources",
                      "charts",
                      "status",
                      "dashboard_link",
                      "digest",
                      "thumbnail_url",
                      "changed_by_name",
                      "data",
                      "datasets_trimmed_for_slices",
                      "params",
                      "params",
                      "position",
                      "tabs",
                      "update_thumbnail",
                      "export_dashboards",
                      "get",
                      "raise_for_access",
                      "get_node",
                      "build_tab_tree"
                    ],
                    "classes": [
                      "Dashboard"
                    ],
                    "imports": [
                      "__future__",
                      "logging",
                      "uuid",
                      "collections",
                      "typing",
                      "sqlalchemy",
                      "flask_appbuilder",
                      "flask_appbuilder.models.decorators",
                      "flask_appbuilder.security.sqla.models",
                      "markupsafe",
                      "sqlalchemy",
                      "sqlalchemy.engine.base",
                      "sqlalchemy.orm",
                      "sqlalchemy.orm.mapper",
                      "sqlalchemy.sql.elements",
                      "superset",
                      "superset.connectors.sqla.models",
                      "superset.daos.datasource",
                      "superset.models.helpers",
                      "superset.models.slice",
                      "superset.models.user_attributes",
                      "superset.tasks.thumbnails",
                      "superset.tasks.utils",
                      "superset.thumbnails.digest",
                      "superset.utils"
                    ],
                    "size_lines": 475,
                    "has_main": false,
                    "docstring": null
                  },
                  "sql_lab.py": {
                    "functions": [
                      "sql_tables",
                      "get_template_processor",
                      "to_dict",
                      "name",
                      "database_name",
                      "username",
                      "columns",
                      "db_extra",
                      "data",
                      "raise_for_access",
                      "db_engine_spec",
                      "owners_data",
                      "uid",
                      "is_rls_supported",
                      "cache_timeout",
                      "column_names",
                      "offset",
                      "main_dttm_col",
                      "dttm_cols",
                      "schema_perm",
                      "perm",
                      "default_endpoint",
                      "get_extra_cache_keys",
                      "tracking_url",
                      "tracking_url",
                      "get_column",
                      "adhoc_column_to_sqla",
                      "__repr__",
                      "to_dict",
                      "pop_tab_link",
                      "user_email",
                      "sqlalchemy_uri",
                      "url",
                      "last_run_humanized",
                      "_last_run_delta_humanized",
                      "last_run_delta_humanized",
                      "to_dict",
                      "to_dict"
                    ],
                    "classes": [
                      "SqlTablesMixin",
                      "Query",
                      "SavedQuery",
                      "TabState",
                      "TableSchema"
                    ],
                    "imports": [
                      "builtins",
                      "inspect",
                      "logging",
                      "re",
                      "collections.abc",
                      "datetime",
                      "typing",
                      "sqlalchemy",
                      "flask",
                      "flask_appbuilder",
                      "flask_appbuilder.models.decorators",
                      "flask_babel",
                      "humanize",
                      "jinja2.exceptions",
                      "markupsafe",
                      "sqlalchemy",
                      "sqlalchemy.engine.url",
                      "sqlalchemy.orm",
                      "sqlalchemy.sql.elements",
                      "superset",
                      "superset.exceptions",
                      "superset.jinja_context",
                      "superset.models.helpers",
                      "superset.sql_parse",
                      "superset.sqllab.limiting_factor",
                      "superset.utils",
                      "superset.utils.core",
                      "superset.connectors.sqla.models",
                      "superset.db_engine_specs",
                      "superset.connectors.sqla.models"
                    ],
                    "size_lines": 577,
                    "has_main": false,
                    "docstring": "A collection of ORM sqlalchemy models for SQL Lab"
                  },
                  "annotations.py": {
                    "functions": [
                      "__repr__",
                      "data",
                      "__repr__"
                    ],
                    "classes": [
                      "AnnotationLayer",
                      "Annotation"
                    ],
                    "imports": [
                      "typing",
                      "flask_appbuilder",
                      "sqlalchemy",
                      "sqlalchemy.orm",
                      "superset.models.helpers",
                      "superset.utils.core"
                    ],
                    "size_lines": 69,
                    "has_main": false,
                    "docstring": "a collection of Annotation-related models"
                  },
                  "helpers.py": {
                    "functions": [
                      "validate_adhoc_subquery",
                      "json_to_dict",
                      "convert_uuids",
                      "_user",
                      "clone_model",
                      "short_uuid",
                      "_unique_constraints",
                      "parent_foreign_key_mappings",
                      "export_schema",
                      "import_from_dict",
                      "export_to_dict",
                      "override",
                      "copy",
                      "alter_params",
                      "remove_params",
                      "reset_ownership",
                      "params_dict",
                      "template_params_dict",
                      "created_by_fk",
                      "changed_by_fk",
                      "created_by_name",
                      "changed_by_name",
                      "creator",
                      "changed_by_",
                      "changed_on_",
                      "changed_on_delta_humanized",
                      "changed_on_dttm",
                      "created_on_delta_humanized",
                      "changed_on_utc",
                      "changed_on_humanized",
                      "created_on_humanized",
                      "modified",
                      "__init__",
                      "extra",
                      "extra",
                      "set_extra_json_key",
                      "ensure_extra_json_is_not_none",
                      "get_extra_dict",
                      "is_certified",
                      "certified_by",
                      "certification_details",
                      "warning_markdown",
                      "type",
                      "db_extra",
                      "query",
                      "database_id",
                      "owners_data",
                      "metrics",
                      "uid",
                      "is_rls_supported",
                      "cache_timeout",
                      "column_names",
                      "offset",
                      "main_dttm_col",
                      "always_filter_main_dttm",
                      "dttm_cols",
                      "db_engine_spec",
                      "database",
                      "catalog",
                      "schema",
                      "sql",
                      "columns",
                      "get_extra_cache_keys",
                      "get_template_processor",
                      "get_fetch_values_predicate",
                      "get_sqla_row_level_filters",
                      "_process_sql_expression",
                      "make_sqla_column_compatible",
                      "_apply_cte",
                      "get_query_str_extended",
                      "_normalize_prequery_result_type",
                      "make_orderby_compatible",
                      "exc_query",
                      "get_rendered_sql",
                      "text",
                      "get_from_clause",
                      "adhoc_metric_to_sqla",
                      "template_params_dict",
                      "filter_values_handler",
                      "get_query_str",
                      "_get_series_orderby",
                      "adhoc_column_to_sqla",
                      "_get_top_groups",
                      "dttm_sql_literal",
                      "get_time_filter",
                      "values_for_column",
                      "get_timestamp_expression",
                      "convert_tbl_column_to_sqla_col",
                      "get_sqla_query",
                      "formatter",
                      "is_alias_used_in_orderby",
                      "assign_column_label",
                      "handle_single_value"
                    ],
                    "classes": [
                      "UUIDMixin",
                      "ImportExportMixin",
                      "AuditMixinNullable",
                      "QueryResult",
                      "ExtraJSONMixin",
                      "CertificationMixin",
                      "QueryStringExtended",
                      "SqlaQuery",
                      "ExploreMixin"
                    ],
                    "imports": [
                      "builtins",
                      "dataclasses",
                      "logging",
                      "re",
                      "uuid",
                      "collections.abc",
                      "datetime",
                      "typing",
                      "dateutil.parser",
                      "humanize",
                      "numpy",
                      "pandas",
                      "pytz",
                      "sqlalchemy",
                      "sqlparse",
                      "yaml",
                      "flask",
                      "flask_appbuilder",
                      "flask_appbuilder.models.decorators",
                      "flask_appbuilder.models.mixins",
                      "flask_appbuilder.security.sqla.models",
                      "flask_babel",
                      "jinja2.exceptions",
                      "markupsafe",
                      "sqlalchemy",
                      "sqlalchemy.exc",
                      "sqlalchemy.ext.declarative",
                      "sqlalchemy.orm",
                      "sqlalchemy.sql.elements",
                      "sqlalchemy.sql.expression",
                      "sqlalchemy.sql.selectable",
                      "sqlalchemy_utils",
                      "superset",
                      "superset.advanced_data_type.types",
                      "superset.common.db_query_status",
                      "superset.common.utils.time_range_utils",
                      "superset.constants",
                      "superset.db_engine_specs.base",
                      "superset.errors",
                      "superset.exceptions",
                      "superset.extensions",
                      "superset.jinja_context",
                      "superset.sql.parse",
                      "superset.sql_parse",
                      "superset.superset_typing",
                      "superset.utils",
                      "superset.utils.core",
                      "superset.utils.dates",
                      "superset.connectors.sqla.models",
                      "superset.db_engine_specs",
                      "superset.models.core"
                    ],
                    "size_lines": 2137,
                    "has_main": false,
                    "docstring": "a collection of model-related helper classes and functions"
                  },
                  "sql_types": {
                    "presto_sql_types.py": {
                      "functions": [
                        "python_type",
                        "_compiler_dispatch",
                        "python_type",
                        "_compiler_dispatch",
                        "python_type",
                        "_compiler_dispatch",
                        "python_type",
                        "_compiler_dispatch",
                        "python_type",
                        "_compiler_dispatch",
                        "process_bind_param",
                        "process_bind_param"
                      ],
                      "classes": [
                        "TinyInteger",
                        "Interval",
                        "Array",
                        "Map",
                        "Row",
                        "TimeStamp",
                        "Date"
                      ],
                      "imports": [
                        "typing",
                        "sqlalchemy.engine.interfaces",
                        "sqlalchemy.sql.sqltypes",
                        "sqlalchemy.sql.type_api",
                        "sqlalchemy.sql.visitors",
                        "sqlalchemy.types"
                      ],
                      "size_lines": 132,
                      "has_main": false,
                      "docstring": null
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "mssql_sql_types.py": {
                      "functions": [
                        "python_type",
                        "_compiler_dispatch",
                        "process_bind_param",
                        "process_result_value"
                      ],
                      "classes": [
                        "GUID"
                      ],
                      "imports": [
                        "uuid",
                        "typing",
                        "sqlalchemy.engine.interfaces",
                        "sqlalchemy.sql.sqltypes",
                        "sqlalchemy.sql.visitors",
                        "sqlalchemy.types"
                      ],
                      "size_lines": 62,
                      "has_main": false,
                      "docstring": null
                    }
                  }
                },
                "cli": {
                  "update.py": {
                    "functions": [
                      "set_database_uri",
                      "sync_tags",
                      "update_api_docs",
                      "re_encrypt_secrets"
                    ],
                    "classes": [],
                    "imports": [
                      "json",
                      "logging",
                      "os",
                      "sys",
                      "typing",
                      "click",
                      "apispec",
                      "apispec.ext.marshmallow",
                      "flask",
                      "flask.cli",
                      "flask_appbuilder",
                      "flask_appbuilder.api",
                      "flask_appbuilder.api.manager",
                      "superset.utils.database",
                      "superset.utils.decorators",
                      "superset.utils.encrypt",
                      "superset.common.tags"
                    ],
                    "size_lines": 130,
                    "has_main": false,
                    "docstring": null
                  },
                  "lib.py": {
                    "functions": [
                      "normalize_token"
                    ],
                    "classes": [],
                    "imports": [
                      "logging",
                      "superset"
                    ],
                    "size_lines": 49,
                    "has_main": false,
                    "docstring": null
                  },
                  "test_db.py": {
                    "functions": [
                      "test_datetime",
                      "test_db",
                      "collect_connection_info",
                      "test_db_engine_spec",
                      "test_sqlalchemy_dialect",
                      "test_database_connectivity",
                      "__init__",
                      "add",
                      "get_tests",
                      "decorator"
                    ],
                    "classes": [
                      "TestRegistry"
                    ],
                    "imports": [
                      "__future__",
                      "sys",
                      "collections",
                      "datetime",
                      "typing",
                      "click",
                      "yaml",
                      "rich.console",
                      "sqlalchemy",
                      "sqlalchemy.engine",
                      "sqlalchemy.exc",
                      "superset.databases.utils",
                      "superset.db_engine_specs",
                      "superset.db_engine_specs.base",
                      "superset.db_engine_specs.lib"
                    ],
                    "size_lines": 367,
                    "has_main": false,
                    "docstring": null
                  },
                  "importexport.py": {
                    "functions": [
                      "import_directory",
                      "export_dashboards",
                      "export_datasources",
                      "import_dashboards",
                      "import_datasources",
                      "legacy_export_dashboards",
                      "legacy_export_datasources",
                      "legacy_import_dashboards",
                      "legacy_import_datasources",
                      "legacy_export_datasource_schema"
                    ],
                    "classes": [],
                    "imports": [
                      "logging",
                      "sys",
                      "datetime",
                      "pathlib",
                      "typing",
                      "zipfile",
                      "click",
                      "yaml",
                      "flask",
                      "flask.cli",
                      "superset",
                      "superset.extensions",
                      "superset.utils.core",
                      "superset.examples.utils",
                      "superset.commands.dashboard.export",
                      "superset.models.dashboard",
                      "superset.commands.dataset.export",
                      "superset.connectors.sqla.models",
                      "superset.commands.dashboard.importers.dispatcher",
                      "superset.commands.importers.v1.utils",
                      "superset.commands.dataset.importers.dispatcher",
                      "superset.commands.importers.v1.utils",
                      "superset.utils",
                      "superset.utils",
                      "superset.commands.dashboard.importers.v0",
                      "superset.commands.dataset.importers.v0",
                      "superset.utils"
                    ],
                    "size_lines": 406,
                    "has_main": false,
                    "docstring": null
                  },
                  "reset.py": {
                    "functions": [
                      "factory_reset"
                    ],
                    "classes": [],
                    "imports": [
                      "sys",
                      "click",
                      "flask.cli",
                      "werkzeug.security",
                      "superset.cli.lib",
                      "superset",
                      "superset.commands.security.reset"
                    ],
                    "size_lines": 75,
                    "has_main": false,
                    "docstring": null
                  },
                  "__init__.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 17,
                    "has_main": false,
                    "docstring": null
                  },
                  "viz_migrations.py": {
                    "functions": [
                      "migrate_viz",
                      "upgrade",
                      "downgrade",
                      "migrate_by_viz_type",
                      "migrate_by_id"
                    ],
                    "classes": [
                      "VizType"
                    ],
                    "imports": [
                      "__future__",
                      "enum",
                      "typing",
                      "click",
                      "click_option_group",
                      "flask.cli",
                      "superset",
                      "superset.migrations.shared.migrate_viz.base",
                      "superset.migrations.shared.migrate_viz.processors",
                      "superset.migrations.shared.utils"
                    ],
                    "size_lines": 174,
                    "has_main": false,
                    "docstring": null
                  },
                  "test.py": {
                    "functions": [
                      "load_test_users"
                    ],
                    "classes": [],
                    "imports": [
                      "logging",
                      "click",
                      "colorama",
                      "flask.cli",
                      "superset.utils.database",
                      "superset",
                      "superset.utils.decorators"
                    ],
                    "size_lines": 81,
                    "has_main": false,
                    "docstring": null
                  },
                  "examples.py": {
                    "functions": [
                      "load_examples_run",
                      "load_examples"
                    ],
                    "classes": [],
                    "imports": [
                      "logging",
                      "click",
                      "flask.cli",
                      "superset.utils.database",
                      "superset.utils.decorators",
                      "superset.examples.data_loading"
                    ],
                    "size_lines": 116,
                    "has_main": false,
                    "docstring": null
                  },
                  "main.py": {
                    "functions": [
                      "superset",
                      "init",
                      "version",
                      "make_shell_context"
                    ],
                    "classes": [],
                    "imports": [
                      "importlib",
                      "logging",
                      "pkgutil",
                      "typing",
                      "click",
                      "colorama",
                      "flask.cli",
                      "superset",
                      "superset.cli.lib",
                      "superset.extensions",
                      "superset.utils.decorators"
                    ],
                    "size_lines": 82,
                    "has_main": false,
                    "docstring": null
                  },
                  "thumbnails.py": {
                    "functions": [
                      "compute_thumbnails",
                      "compute_generic_thumbnail"
                    ],
                    "classes": [],
                    "imports": [
                      "logging",
                      "typing",
                      "click",
                      "celery.utils.abstract",
                      "flask.cli",
                      "superset.extensions",
                      "superset.models.dashboard",
                      "superset.models.slice",
                      "superset.tasks.thumbnails"
                    ],
                    "size_lines": 104,
                    "has_main": false,
                    "docstring": null
                  }
                },
                "initialization": {
                  "__init__.py": {
                    "functions": [
                      "__init__",
                      "flask_app",
                      "pre_init",
                      "post_init",
                      "configure_celery",
                      "init_views",
                      "init_app_in_ctx",
                      "check_secret_key",
                      "configure_session",
                      "init_app",
                      "set_db_default_isolation",
                      "configure_auth_provider",
                      "configure_ssh_manager",
                      "configure_stats_manager",
                      "setup_event_logger",
                      "configure_data_sources",
                      "configure_cache",
                      "configure_feature_flags",
                      "configure_sqlglot_dialects",
                      "configure_fab",
                      "configure_url_map_converters",
                      "configure_middlewares",
                      "configure_logging",
                      "configure_db_encrypt",
                      "setup_db",
                      "configure_wtf",
                      "configure_async_queries",
                      "register_blueprints",
                      "setup_bundle_manifest",
                      "enable_profiling",
                      "index",
                      "log_default_secret_key_warning",
                      "__call__",
                      "__init__",
                      "__call__"
                    ],
                    "classes": [
                      "SupersetAppInitializer",
                      "SupersetIndexView",
                      "AppContextTask",
                      "ChunkedEncodingFix"
                    ],
                    "imports": [
                      "__future__",
                      "contextlib",
                      "logging",
                      "os",
                      "sys",
                      "typing",
                      "wtforms_json",
                      "deprecation",
                      "flask",
                      "flask_appbuilder",
                      "flask_babel",
                      "flask_compress",
                      "flask_session",
                      "werkzeug.middleware.proxy_fix",
                      "superset.constants",
                      "superset.databases.utils",
                      "superset.extensions",
                      "superset.security",
                      "superset.sql.parse",
                      "superset.superset_typing",
                      "superset.tags.core",
                      "superset.utils.core",
                      "superset.utils.decorators",
                      "superset.utils.log",
                      "superset.app",
                      "superset.advanced_data_type.api",
                      "superset.annotation_layers.annotations.api",
                      "superset.annotation_layers.api",
                      "superset.async_events.api",
                      "superset.available_domains.api",
                      "superset.cachekeys.api",
                      "superset.charts.api",
                      "superset.charts.data.api",
                      "superset.connectors.sqla.views",
                      "superset.css_templates.api",
                      "superset.dashboards.api",
                      "superset.dashboards.filter_state.api",
                      "superset.dashboards.permalink.api",
                      "superset.databases.api",
                      "superset.datasets.api",
                      "superset.datasets.columns.api",
                      "superset.datasets.metrics.api",
                      "superset.datasource.api",
                      "superset.embedded.api",
                      "superset.embedded.view",
                      "superset.explore.api",
                      "superset.explore.form_data.api",
                      "superset.explore.permalink.api",
                      "superset.importexport.api",
                      "superset.queries.api",
                      "superset.queries.saved_queries.api",
                      "superset.reports.api",
                      "superset.reports.logs.api",
                      "superset.row_level_security.api",
                      "superset.security.api",
                      "superset.sqllab.api",
                      "superset.sqllab.permalink.api",
                      "superset.tags.api",
                      "superset.views.alerts",
                      "superset.views.all_entities",
                      "superset.views.annotations",
                      "superset.views.api",
                      "superset.views.chart.views",
                      "superset.views.core",
                      "superset.views.css_templates",
                      "superset.views.dashboard.views",
                      "superset.views.database.views",
                      "superset.views.datasource.views",
                      "superset.views.dynamic_plugins",
                      "superset.views.error_handling",
                      "superset.views.explore",
                      "superset.views.log.api",
                      "superset.views.log.views",
                      "superset.views.sql_lab.views",
                      "superset.views.sqllab",
                      "superset.views.tags",
                      "superset.views.users.api",
                      "superset.utils.url_map_converters",
                      "flask_cors"
                    ],
                    "size_lines": 696,
                    "has_main": false,
                    "docstring": null
                  }
                },
                "explore": {
                  "__init__.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 17,
                    "has_main": false,
                    "docstring": null
                  },
                  "api.py": {
                    "functions": [
                      "get"
                    ],
                    "classes": [
                      "ExploreRestApi"
                    ],
                    "imports": [
                      "logging",
                      "flask",
                      "flask_appbuilder.api",
                      "superset.commands.chart.exceptions",
                      "superset.commands.explore.get",
                      "superset.commands.explore.parameters",
                      "superset.commands.temporary_cache.exceptions",
                      "superset.constants",
                      "superset.explore.exceptions",
                      "superset.explore.permalink.exceptions",
                      "superset.explore.schemas",
                      "superset.extensions",
                      "superset.views.base_api"
                    ],
                    "size_lines": 136,
                    "has_main": false,
                    "docstring": null
                  },
                  "schemas.py": {
                    "functions": [],
                    "classes": [
                      "DatasetSchema",
                      "SliceSchema",
                      "ExploreContextSchema"
                    ],
                    "imports": [
                      "marshmallow"
                    ],
                    "size_lines": 166,
                    "has_main": false,
                    "docstring": null
                  },
                  "utils.py": {
                    "functions": [
                      "check_dataset_access",
                      "check_query_access",
                      "check_datasource_access",
                      "check_access"
                    ],
                    "classes": [],
                    "imports": [
                      "typing",
                      "superset",
                      "superset.commands.chart.exceptions",
                      "superset.commands.dataset.exceptions",
                      "superset.commands.exceptions",
                      "superset.daos.chart",
                      "superset.daos.dataset",
                      "superset.daos.query",
                      "superset.utils.core"
                    ],
                    "size_lines": 96,
                    "has_main": false,
                    "docstring": null
                  },
                  "exceptions.py": {
                    "functions": [
                      "__init__",
                      "__init__"
                    ],
                    "classes": [
                      "DatasetAccessDeniedError",
                      "WrongEndpointError",
                      "DatasourceSamplesFailedError",
                      "DatasourceForbiddenError"
                    ],
                    "imports": [
                      "typing",
                      "flask_babel",
                      "superset.commands.exceptions"
                    ],
                    "size_lines": 50,
                    "has_main": false,
                    "docstring": null
                  },
                  "permalink": {
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "types.py": {
                      "functions": [],
                      "classes": [
                        "ExplorePermalinkState",
                        "ExplorePermalinkValue"
                      ],
                      "imports": [
                        "typing"
                      ],
                      "size_lines": 35,
                      "has_main": false,
                      "docstring": null
                    },
                    "api.py": {
                      "functions": [
                        "post",
                        "get"
                      ],
                      "classes": [
                        "ExplorePermalinkRestApi"
                      ],
                      "imports": [
                        "logging",
                        "flask",
                        "flask_appbuilder.api",
                        "marshmallow",
                        "superset.commands.chart.exceptions",
                        "superset.commands.dataset.exceptions",
                        "superset.commands.explore.permalink.create",
                        "superset.commands.explore.permalink.get",
                        "superset.constants",
                        "superset.explore.permalink.exceptions",
                        "superset.explore.permalink.schemas",
                        "superset.extensions",
                        "superset.key_value.exceptions",
                        "superset.views.base_api"
                      ],
                      "size_lines": 165,
                      "has_main": false,
                      "docstring": null
                    },
                    "schemas.py": {
                      "functions": [],
                      "classes": [
                        "ExplorePermalinkStateSchema",
                        "ExplorePermalinkSchema"
                      ],
                      "imports": [
                        "marshmallow"
                      ],
                      "size_lines": 68,
                      "has_main": false,
                      "docstring": null
                    },
                    "exceptions.py": {
                      "functions": [],
                      "classes": [
                        "ExplorePermalinkInvalidStateError",
                        "ExplorePermalinkCreateFailedError",
                        "ExplorePermalinkGetFailedError"
                      ],
                      "imports": [
                        "flask_babel",
                        "superset.commands.exceptions"
                      ],
                      "size_lines": 32,
                      "has_main": false,
                      "docstring": null
                    }
                  },
                  "form_data": {
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "api.py": {
                      "functions": [
                        "post",
                        "put",
                        "get",
                        "delete"
                      ],
                      "classes": [
                        "ExploreFormDataRestApi"
                      ],
                      "imports": [
                        "logging",
                        "flask",
                        "flask_appbuilder.api",
                        "marshmallow",
                        "superset.commands.explore.form_data.create",
                        "superset.commands.explore.form_data.delete",
                        "superset.commands.explore.form_data.get",
                        "superset.commands.explore.form_data.parameters",
                        "superset.commands.explore.form_data.update",
                        "superset.commands.temporary_cache.exceptions",
                        "superset.constants",
                        "superset.explore.form_data.schemas",
                        "superset.extensions",
                        "superset.views.base_api"
                      ],
                      "size_lines": 289,
                      "has_main": false,
                      "docstring": null
                    },
                    "schemas.py": {
                      "functions": [],
                      "classes": [
                        "FormDataPostSchema",
                        "FormDataPutSchema"
                      ],
                      "imports": [
                        "marshmallow",
                        "superset.utils.core"
                      ],
                      "size_lines": 56,
                      "has_main": false,
                      "docstring": null
                    }
                  }
                },
                "extensions": {
                  "pylint.py": {
                    "functions": [
                      "register",
                      "visit_import",
                      "visit_importfrom",
                      "visit_call"
                    ],
                    "classes": [
                      "JSONLibraryImportChecker",
                      "TransactionChecker"
                    ],
                    "imports": [
                      "os",
                      "astroid",
                      "pylint.checkers",
                      "pylint.lint"
                    ],
                    "size_lines": 78,
                    "has_main": false,
                    "docstring": null
                  },
                  "metadb.py": {
                    "functions": [
                      "check_dml",
                      "has_rowid",
                      "__init__",
                      "create_connect_args",
                      "wrapper",
                      "wrapper",
                      "parse",
                      "supports",
                      "parse_uri",
                      "__init__",
                      "get_field",
                      "_set_columns",
                      "get_columns",
                      "_build_sql",
                      "get_data",
                      "insert_row",
                      "delete_row",
                      "update_row"
                    ],
                    "classes": [
                      "SupersetAPSWDialect",
                      "Duration",
                      "Decimal",
                      "FallbackField",
                      "SupersetShillelaghAdapter"
                    ],
                    "imports": [
                      "__future__",
                      "datetime",
                      "decimal",
                      "operator",
                      "urllib.parse",
                      "collections.abc",
                      "functools",
                      "typing",
                      "flask",
                      "shillelagh.adapters.base",
                      "shillelagh.backends.apsw.dialects.base",
                      "shillelagh.exceptions",
                      "shillelagh.fields",
                      "shillelagh.filters",
                      "shillelagh.typing",
                      "sqlalchemy",
                      "sqlalchemy.engine.url",
                      "sqlalchemy.exc",
                      "sqlalchemy.sql",
                      "superset",
                      "superset.models.core"
                    ],
                    "size_lines": 485,
                    "has_main": false,
                    "docstring": "A SQLAlchemy dialect for querying across Superset databases.\n\nThe dialect ``superset://`` allows users to query any table in any database that has been\nconfigured in Superset, eg:\n\n    > SELECT * FROM \"examples.birth_names\";\n\nThe syntax for tables is:\n\n    database[[.catalog].schema].table\n\nThe dialect is built on top of Shillelagh, a framework for building DB API 2.0 libraries\nand SQLAlchemy dialects based on SQLite. SQLite will parse the SQL, and pass the filters\nto the adapter. The adapter builds a SQLAlchemy query object reading data from the table\nand applying any filters (as well as sorting, limiting, and offsetting).\n\nNote that no aggregation is done on the database. Aggregations and other operations like\njoins and unions are done in memory, using the SQLite engine."
                  },
                  "stats_logger.py": {
                    "functions": [
                      "__init__",
                      "init_app",
                      "instance"
                    ],
                    "classes": [
                      "BaseStatsLoggerManager"
                    ],
                    "imports": [
                      "flask",
                      "superset.stats_logger"
                    ],
                    "size_lines": 32,
                    "has_main": false,
                    "docstring": null
                  },
                  "__init__.py": {
                    "functions": [
                      "__init__",
                      "init_app",
                      "results_backend",
                      "should_use_msgpack",
                      "__init__",
                      "init_app",
                      "register_processor",
                      "get_manifest",
                      "parse_manifest_json",
                      "get_manifest_files",
                      "__init__",
                      "init_app",
                      "get_files"
                    ],
                    "classes": [
                      "ResultsBackendManager",
                      "UIManifestProcessor",
                      "ProfilingExtension"
                    ],
                    "imports": [
                      "json",
                      "os",
                      "typing",
                      "celery",
                      "flask",
                      "flask_appbuilder",
                      "flask_caching.backends.base",
                      "flask_migrate",
                      "flask_talisman",
                      "flask_wtf.csrf",
                      "werkzeug.local",
                      "superset.async_events.async_query_manager",
                      "superset.async_events.async_query_manager_factory",
                      "superset.extensions.ssh",
                      "superset.extensions.stats_logger",
                      "superset.security.manager",
                      "superset.utils.cache_manager",
                      "superset.utils.encrypt",
                      "superset.utils.feature_flag_manager",
                      "superset.utils.machine_auth",
                      "superset.utils.profiler"
                    ],
                    "size_lines": 140,
                    "has_main": false,
                    "docstring": null
                  },
                  "metastore_cache.py": {
                    "functions": [
                      "__init__",
                      "factory",
                      "get_key",
                      "_get_expiry",
                      "set",
                      "add",
                      "get",
                      "has",
                      "delete"
                    ],
                    "classes": [
                      "SupersetMetastoreCache"
                    ],
                    "imports": [
                      "logging",
                      "datetime",
                      "typing",
                      "uuid",
                      "flask",
                      "flask_caching",
                      "sqlalchemy.exc",
                      "superset",
                      "superset.key_value.exceptions",
                      "superset.key_value.types",
                      "superset.key_value.utils",
                      "superset.utils.decorators",
                      "superset.daos.key_value",
                      "superset.daos.key_value",
                      "superset.daos.key_value",
                      "superset.daos.key_value"
                    ],
                    "size_lines": 131,
                    "has_main": false,
                    "docstring": null
                  },
                  "ssh.py": {
                    "functions": [
                      "__init__",
                      "build_sqla_url",
                      "create_tunnel",
                      "__init__",
                      "init_app",
                      "instance"
                    ],
                    "classes": [
                      "SSHManager",
                      "SSHManagerFactory"
                    ],
                    "imports": [
                      "logging",
                      "io",
                      "typing",
                      "sshtunnel",
                      "flask",
                      "paramiko",
                      "superset.databases.utils",
                      "superset.utils.class_utils",
                      "superset.databases.ssh_tunnel.models",
                      "superset.utils.ssh_tunnel"
                    ],
                    "size_lines": 91,
                    "has_main": false,
                    "docstring": null
                  }
                },
                "tags": {
                  "models.py": {
                    "functions": [
                      "get_tag",
                      "get_object_type",
                      "__str__",
                      "get_owners_ids",
                      "get_owner_tag_ids",
                      "_add_owners",
                      "add_tag_object_if_not_tagged",
                      "after_insert",
                      "after_update",
                      "after_delete",
                      "get_owners_ids",
                      "get_owners_ids",
                      "get_owners_ids",
                      "get_owners_ids",
                      "after_insert",
                      "after_delete"
                    ],
                    "classes": [
                      "TagType",
                      "ObjectType",
                      "Tag",
                      "TaggedObject",
                      "ObjectUpdater",
                      "ChartUpdater",
                      "DashboardUpdater",
                      "QueryUpdater",
                      "DatasetUpdater",
                      "FavStarUpdater"
                    ],
                    "imports": [
                      "__future__",
                      "enum",
                      "typing",
                      "flask_appbuilder",
                      "markupsafe",
                      "sqlalchemy",
                      "sqlalchemy.engine.base",
                      "sqlalchemy.orm",
                      "sqlalchemy.orm.mapper",
                      "sqlalchemy.schema",
                      "superset",
                      "superset.models.helpers",
                      "superset.connectors.sqla.models",
                      "superset.models.core",
                      "superset.models.dashboard",
                      "superset.models.slice",
                      "superset.models.sql_lab"
                    ],
                    "size_lines": 363,
                    "has_main": false,
                    "docstring": null
                  },
                  "__init__.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 17,
                    "has_main": false,
                    "docstring": null
                  },
                  "core.py": {
                    "functions": [
                      "register_sqla_event_listeners",
                      "clear_sqla_event_listeners"
                    ],
                    "classes": [],
                    "imports": [
                      "sqlalchemy",
                      "superset.connectors.sqla.models",
                      "superset.models.core",
                      "superset.models.dashboard",
                      "superset.models.slice",
                      "superset.models.sql_lab",
                      "superset.tags.models",
                      "sqlalchemy",
                      "superset.connectors.sqla.models",
                      "superset.models.core",
                      "superset.models.dashboard",
                      "superset.models.slice",
                      "superset.models.sql_lab",
                      "superset.tags.models"
                    ],
                    "size_lines": 90,
                    "has_main": false,
                    "docstring": null
                  },
                  "api.py": {
                    "functions": [
                      "__repr__",
                      "post",
                      "bulk_create",
                      "put",
                      "add_objects",
                      "delete_object",
                      "bulk_delete",
                      "get_objects",
                      "favorite_status",
                      "add_favorite",
                      "remove_favorite"
                    ],
                    "classes": [
                      "TagRestApi"
                    ],
                    "imports": [
                      "logging",
                      "typing",
                      "flask",
                      "flask_appbuilder.api",
                      "flask_appbuilder.models.sqla.interface",
                      "marshmallow",
                      "superset.commands.tag.create",
                      "superset.commands.tag.delete",
                      "superset.commands.tag.exceptions",
                      "superset.commands.tag.update",
                      "superset.constants",
                      "superset.daos.tag",
                      "superset.exceptions",
                      "superset.extensions",
                      "superset.tags.filters",
                      "superset.tags.models",
                      "superset.tags.schemas",
                      "superset.views.base_api",
                      "superset.views.filters"
                    ],
                    "size_lines": 743,
                    "has_main": false,
                    "docstring": null
                  },
                  "schemas.py": {
                    "functions": [],
                    "classes": [
                      "TagGetResponseSchema",
                      "TaggedObjectEntityResponseSchema",
                      "TagObjectSchema",
                      "TagPostBulkSchema",
                      "TagPostBulkResponseObjectSchema",
                      "TagPostBulkResponseSchema",
                      "TagPostSchema",
                      "TagPutSchema"
                    ],
                    "imports": [
                      "marshmallow",
                      "marshmallow.validate",
                      "superset.dashboards.schemas"
                    ],
                    "size_lines": 99,
                    "has_main": false,
                    "docstring": null
                  },
                  "exceptions.py": {
                    "functions": [
                      "__init__"
                    ],
                    "classes": [
                      "InvalidTagNameError",
                      "TagUpdateFailedError",
                      "TagNotFoundError"
                    ],
                    "imports": [
                      "flask_babel",
                      "marshmallow.validate",
                      "superset.commands.exceptions"
                    ],
                    "size_lines": 40,
                    "has_main": false,
                    "docstring": null
                  },
                  "filters.py": {
                    "functions": [
                      "apply",
                      "apply",
                      "apply"
                    ],
                    "classes": [
                      "UserCreatedTagTypeFilter",
                      "BaseTagNameFilter",
                      "BaseTagIdFilter"
                    ],
                    "imports": [
                      "__future__",
                      "typing",
                      "flask_babel",
                      "sqlalchemy.orm",
                      "superset.connectors.sqla.models",
                      "superset.extensions",
                      "superset.models.dashboard",
                      "superset.models.slice",
                      "superset.sql_lab",
                      "superset.tags.models",
                      "superset.views.base"
                    ],
                    "size_lines": 94,
                    "has_main": false,
                    "docstring": null
                  }
                },
                "css_templates": {
                  "__init__.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 17,
                    "has_main": false,
                    "docstring": null
                  },
                  "api.py": {
                    "functions": [
                      "bulk_delete"
                    ],
                    "classes": [
                      "CssTemplateRestApi"
                    ],
                    "imports": [
                      "logging",
                      "typing",
                      "flask",
                      "flask_appbuilder.api",
                      "flask_appbuilder.models.sqla.interface",
                      "flask_babel",
                      "superset.commands.css.delete",
                      "superset.commands.css.exceptions",
                      "superset.constants",
                      "superset.css_templates.filters",
                      "superset.css_templates.schemas",
                      "superset.extensions",
                      "superset.models.core",
                      "superset.views.base_api",
                      "superset.views.filters"
                    ],
                    "size_lines": 161,
                    "has_main": false,
                    "docstring": null
                  },
                  "schemas.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 36,
                    "has_main": false,
                    "docstring": null
                  },
                  "filters.py": {
                    "functions": [
                      "apply"
                    ],
                    "classes": [
                      "CssTemplateAllTextFilter"
                    ],
                    "imports": [
                      "typing",
                      "flask_babel",
                      "sqlalchemy",
                      "sqlalchemy.orm.query",
                      "superset.models.core",
                      "superset.views.base"
                    ],
                    "size_lines": 41,
                    "has_main": false,
                    "docstring": null
                  }
                },
                "common": {
                  "tags.py": {
                    "functions": [
                      "add_types_to_charts",
                      "add_types_to_dashboards",
                      "add_types_to_saved_queries",
                      "add_types_to_datasets",
                      "add_types",
                      "add_owners_to_charts",
                      "add_owners_to_dashboards",
                      "add_owners_to_saved_queries",
                      "add_owners_to_datasets",
                      "add_owners",
                      "add_favorites"
                    ],
                    "classes": [],
                    "imports": [
                      "contextlib",
                      "typing",
                      "sqlalchemy",
                      "sqlalchemy.exc",
                      "sqlalchemy.sql",
                      "superset.extensions",
                      "superset.tags.models"
                    ],
                    "size_lines": 515,
                    "has_main": false,
                    "docstring": null
                  },
                  "query_object_factory.py": {
                    "functions": [
                      "__init__",
                      "create",
                      "_convert_to_model",
                      "_process_extras",
                      "_process_row_limit",
                      "_process_time_range"
                    ],
                    "classes": [
                      "QueryObjectFactory"
                    ],
                    "imports": [
                      "__future__",
                      "typing",
                      "superset.common.chart_data",
                      "superset.common.query_object",
                      "superset.common.utils.time_range_utils",
                      "superset.constants",
                      "superset.superset_typing",
                      "superset.utils.core",
                      "superset.connectors.sqla.models",
                      "superset.daos.datasource"
                    ],
                    "size_lines": 138,
                    "has_main": false,
                    "docstring": null
                  },
                  "query_context.py": {
                    "functions": [
                      "__init__",
                      "get_data",
                      "get_payload",
                      "get_cache_timeout",
                      "query_cache_key",
                      "get_df_payload",
                      "get_query_result",
                      "processing_time_offsets",
                      "raise_for_access"
                    ],
                    "classes": [
                      "QueryContext"
                    ],
                    "imports": [
                      "__future__",
                      "logging",
                      "typing",
                      "pandas",
                      "superset.common.chart_data",
                      "superset.common.query_context_processor",
                      "superset.common.query_object",
                      "superset.models.slice",
                      "superset.utils.core",
                      "superset.connectors.sqla.models",
                      "superset.models.helpers"
                    ],
                    "size_lines": 140,
                    "has_main": false,
                    "docstring": null
                  },
                  "__init__.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 17,
                    "has_main": false,
                    "docstring": null
                  },
                  "query_context_processor.py": {
                    "functions": [
                      "__init__",
                      "get_df_payload",
                      "query_cache_key",
                      "get_query_result",
                      "normalize_df",
                      "get_time_grain",
                      "add_offset_join_column",
                      "is_valid_date",
                      "get_offset_custom_or_inherit",
                      "processing_time_offsets",
                      "join_offset_dfs",
                      "generate_join_column",
                      "get_data",
                      "get_payload",
                      "get_cache_timeout",
                      "cache_key",
                      "get_annotation_data",
                      "get_native_annotation_data",
                      "get_viz_annotation_data",
                      "raise_for_access",
                      "_get_timestamp_format"
                    ],
                    "classes": [
                      "CachedTimeOffset",
                      "QueryContextProcessor"
                    ],
                    "imports": [
                      "__future__",
                      "copy",
                      "logging",
                      "re",
                      "datetime",
                      "typing",
                      "numpy",
                      "pandas",
                      "flask_babel",
                      "pandas",
                      "superset",
                      "superset.common.chart_data",
                      "superset.common.db_query_status",
                      "superset.common.query_actions",
                      "superset.common.utils",
                      "superset.common.utils.query_cache_manager",
                      "superset.common.utils.time_range_utils",
                      "superset.connectors.sqla.models",
                      "superset.constants",
                      "superset.daos.annotation_layer",
                      "superset.daos.chart",
                      "superset.exceptions",
                      "superset.extensions",
                      "superset.models.helpers",
                      "superset.models.sql_lab",
                      "superset.superset_typing",
                      "superset.utils",
                      "superset.utils.cache",
                      "superset.utils.core",
                      "superset.utils.date_parser",
                      "superset.utils.pandas_postprocessing.utils",
                      "superset.views.utils",
                      "superset.viz",
                      "superset.common.query_context",
                      "superset.common.query_object",
                      "superset.stats_logger",
                      "superset.commands.chart.data.get_data_command"
                    ],
                    "size_lines": 920,
                    "has_main": false,
                    "docstring": null
                  },
                  "chart_data.py": {
                    "functions": [
                      "table_like"
                    ],
                    "classes": [
                      "ChartDataResultFormat",
                      "ChartDataResultType"
                    ],
                    "imports": [
                      "superset.utils.backports"
                    ],
                    "size_lines": 47,
                    "has_main": false,
                    "docstring": null
                  },
                  "not_authorized_object.py": {
                    "functions": [
                      "__init__",
                      "__getattr__",
                      "__getitem__",
                      "__init__"
                    ],
                    "classes": [
                      "NotAuthorizedObject",
                      "NotAuthorizedException"
                    ],
                    "imports": [
                      "typing",
                      "superset.exceptions"
                    ],
                    "size_lines": 40,
                    "has_main": false,
                    "docstring": null
                  },
                  "query_object.py": {
                    "functions": [
                      "__init__",
                      "_set_annotation_layers",
                      "_set_is_timeseries",
                      "_set_metrics",
                      "_set_post_processing",
                      "_init_series_columns",
                      "_rename_deprecated_fields",
                      "_move_deprecated_extra_fields",
                      "metric_names",
                      "column_names",
                      "validate",
                      "_validate_no_have_duplicate_labels",
                      "_sanitize_filters",
                      "_validate_there_are_no_missing_series",
                      "to_dict",
                      "__repr__",
                      "cache_key",
                      "exec_post_processing",
                      "is_str_or_adhoc"
                    ],
                    "classes": [
                      "DeprecatedField",
                      "QueryObject"
                    ],
                    "imports": [
                      "__future__",
                      "logging",
                      "datetime",
                      "pprint",
                      "typing",
                      "flask",
                      "flask_babel",
                      "pandas",
                      "superset",
                      "superset.common.chart_data",
                      "superset.exceptions",
                      "superset.extensions",
                      "superset.sql_parse",
                      "superset.superset_typing",
                      "superset.utils",
                      "superset.utils.core",
                      "superset.utils.hashing",
                      "superset.utils.json",
                      "superset.connectors.sqla.models"
                    ],
                    "size_lines": 454,
                    "has_main": false,
                    "docstring": null
                  },
                  "db_query_status.py": {
                    "functions": [],
                    "classes": [
                      "QueryStatus"
                    ],
                    "imports": [
                      "superset.utils.backports"
                    ],
                    "size_lines": 31,
                    "has_main": false,
                    "docstring": null
                  },
                  "query_actions.py": {
                    "functions": [
                      "_get_datasource",
                      "_get_columns",
                      "_get_timegrains",
                      "_get_query",
                      "_get_full",
                      "_get_samples",
                      "_get_drill_detail",
                      "_get_results",
                      "get_query_results"
                    ],
                    "classes": [],
                    "imports": [
                      "__future__",
                      "copy",
                      "typing",
                      "flask_babel",
                      "superset",
                      "superset.common.chart_data",
                      "superset.common.db_query_status",
                      "superset.connectors.sqla.models",
                      "superset.exceptions",
                      "superset.utils.core",
                      "superset.common.query_context",
                      "superset.common.query_object"
                    ],
                    "size_lines": 231,
                    "has_main": false,
                    "docstring": null
                  },
                  "query_context_factory.py": {
                    "functions": [
                      "create_query_object_factory",
                      "__init__",
                      "create",
                      "_convert_to_model",
                      "_get_slice",
                      "_process_query_object",
                      "_apply_granularity",
                      "_apply_filters"
                    ],
                    "classes": [
                      "QueryContextFactory"
                    ],
                    "imports": [
                      "__future__",
                      "typing",
                      "superset",
                      "superset.common.chart_data",
                      "superset.common.query_context",
                      "superset.common.query_object",
                      "superset.common.query_object_factory",
                      "superset.daos.chart",
                      "superset.daos.datasource",
                      "superset.models.slice",
                      "superset.utils.core",
                      "superset.connectors.sqla.models"
                    ],
                    "size_lines": 194,
                    "has_main": false,
                    "docstring": null
                  },
                  "utils": {
                    "time_range_utils.py": {
                      "functions": [
                        "get_since_until_from_time_range",
                        "get_since_until_from_query_object"
                      ],
                      "classes": [],
                      "imports": [
                        "__future__",
                        "datetime",
                        "typing",
                        "superset",
                        "superset.common.query_object",
                        "superset.utils.core",
                        "superset.utils.date_parser"
                      ],
                      "size_lines": 79,
                      "has_main": false,
                      "docstring": null
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "query_cache_manager.py": {
                      "functions": [
                        "__init__",
                        "set_query_result",
                        "get",
                        "set",
                        "delete",
                        "has"
                      ],
                      "classes": [
                        "QueryCacheManager"
                      ],
                      "imports": [
                        "__future__",
                        "logging",
                        "typing",
                        "flask_caching",
                        "pandas",
                        "superset",
                        "superset.common.db_query_status",
                        "superset.constants",
                        "superset.exceptions",
                        "superset.extensions",
                        "superset.models.helpers",
                        "superset.stats_logger",
                        "superset.superset_typing",
                        "superset.utils.cache",
                        "superset.utils.core"
                      ],
                      "size_lines": 224,
                      "has_main": false,
                      "docstring": null
                    },
                    "dataframe_utils.py": {
                      "functions": [
                        "left_join_df",
                        "full_outer_join_df",
                        "df_metrics_to_num",
                        "is_datetime_series"
                      ],
                      "classes": [],
                      "imports": [
                        "__future__",
                        "datetime",
                        "typing",
                        "numpy",
                        "pandas",
                        "superset.common.query_object"
                      ],
                      "size_lines": 73,
                      "has_main": false,
                      "docstring": null
                    }
                  }
                },
                "db_engine_specs": {
                  "firebolt.py": {
                    "functions": [
                      "convert_dttm",
                      "epoch_to_dttm"
                    ],
                    "classes": [
                      "FireboltEngineSpec"
                    ],
                    "imports": [
                      "datetime",
                      "typing",
                      "sqlalchemy",
                      "superset.constants",
                      "superset.db_engine_specs.base"
                    ],
                    "size_lines": 62,
                    "has_main": false,
                    "docstring": null
                  },
                  "redshift.py": {
                    "functions": [
                      "df_to_sql",
                      "_mutate_label",
                      "get_cancel_query_id",
                      "cancel_query"
                    ],
                    "classes": [
                      "RedshiftEngineSpec"
                    ],
                    "imports": [
                      "__future__",
                      "logging",
                      "re",
                      "re",
                      "typing",
                      "pandas",
                      "flask_babel",
                      "sqlalchemy.types",
                      "superset.db_engine_specs.base",
                      "superset.db_engine_specs.postgres",
                      "superset.errors",
                      "superset.models.core",
                      "superset.models.sql_lab",
                      "superset.sql_parse"
                    ],
                    "size_lines": 187,
                    "has_main": false,
                    "docstring": null
                  },
                  "firebird.py": {
                    "functions": [
                      "epoch_to_dttm",
                      "convert_dttm"
                    ],
                    "classes": [
                      "FirebirdEngineSpec"
                    ],
                    "imports": [
                      "datetime",
                      "typing",
                      "sqlalchemy",
                      "superset.constants",
                      "superset.db_engine_specs.base"
                    ],
                    "size_lines": 89,
                    "has_main": false,
                    "docstring": null
                  },
                  "elasticsearch.py": {
                    "functions": [
                      "get_dbapi_exception_mapping",
                      "convert_dttm",
                      "convert_dttm",
                      "_mutate_label"
                    ],
                    "classes": [
                      "ElasticSearchEngineSpec",
                      "OpenDistroEngineSpec"
                    ],
                    "imports": [
                      "logging",
                      "datetime",
                      "typing",
                      "packaging.version",
                      "sqlalchemy",
                      "superset.constants",
                      "superset.db_engine_specs.base",
                      "superset.db_engine_specs.exceptions",
                      "es.exceptions"
                    ],
                    "size_lines": 135,
                    "has_main": false,
                    "docstring": null
                  },
                  "superset.py": {
                    "functions": [],
                    "classes": [
                      "SupersetEngineSpec"
                    ],
                    "imports": [
                      "superset.db_engine_specs.shillelagh"
                    ],
                    "size_lines": 40,
                    "has_main": false,
                    "docstring": "A native Superset database."
                  },
                  "ocient.py": {
                    "functions": [
                      "_to_hex",
                      "_wkt_to_geo_json",
                      "_point_list_to_wkt",
                      "_point_to_geo_json",
                      "_linestring_to_geo_json",
                      "_polygon_to_geo_json",
                      "_find_columns_to_sanitize",
                      "get_table_names",
                      "fetch_data",
                      "epoch_to_dttm",
                      "epoch_ms_to_dttm",
                      "get_cancel_query_id",
                      "handle_cursor",
                      "cancel_query",
                      "identity"
                    ],
                    "classes": [
                      "PlacedSanitizeFunc",
                      "OcientEngineSpec"
                    ],
                    "imports": [
                      "contextlib",
                      "re",
                      "threading",
                      "re",
                      "typing",
                      "flask_babel",
                      "sqlalchemy.engine.reflection",
                      "superset.constants",
                      "superset.db_engine_specs.base",
                      "superset.errors",
                      "superset.models.core",
                      "superset.models.sql_lab",
                      "geojson",
                      "pyocient",
                      "shapely",
                      "superset",
                      "pyocient"
                    ],
                    "size_lines": 394,
                    "has_main": false,
                    "docstring": null
                  },
                  "clickhouse.py": {
                    "functions": [
                      "epoch_to_dttm",
                      "convert_dttm",
                      "get_dbapi_exception_mapping",
                      "get_dbapi_mapped_exception",
                      "get_function_names",
                      "get_dbapi_exception_mapping",
                      "get_dbapi_mapped_exception",
                      "get_function_names",
                      "get_datatype",
                      "build_sqlalchemy_uri",
                      "get_parameters_from_uri",
                      "validate_parameters",
                      "_mutate_label"
                    ],
                    "classes": [
                      "ClickHouseBaseEngineSpec",
                      "ClickHouseEngineSpec",
                      "ClickHouseParametersSchema",
                      "ClickHouseConnectEngineSpec"
                    ],
                    "imports": [
                      "__future__",
                      "logging",
                      "re",
                      "datetime",
                      "typing",
                      "flask",
                      "flask_babel",
                      "marshmallow",
                      "marshmallow.validate",
                      "sqlalchemy",
                      "sqlalchemy.engine.url",
                      "urllib3.exceptions",
                      "superset.databases.utils",
                      "superset.db_engine_specs.base",
                      "superset.db_engine_specs.exceptions",
                      "superset.errors",
                      "superset.extensions",
                      "superset.utils.core",
                      "superset.utils.hashing",
                      "superset.utils.network",
                      "superset.models.core",
                      "clickhouse_connect.common",
                      "clickhouse_connect.datatypes.format",
                      "clickhouse_connect.driver.exceptions",
                      "clickhouse_connect.driver"
                    ],
                    "size_lines": 417,
                    "has_main": false,
                    "docstring": null
                  },
                  "trino.py": {
                    "functions": [
                      "__instancecheck__",
                      "get_extra_table_metadata",
                      "impersonate_user",
                      "get_allow_cost_estimate",
                      "get_tracking_url",
                      "handle_cursor",
                      "execute_with_cursor",
                      "prepare_cancel_query",
                      "cancel_query",
                      "get_extra_params",
                      "update_params_from_encrypted_extra",
                      "get_dbapi_exception_mapping",
                      "_expand_columns",
                      "get_columns",
                      "get_indexes",
                      "_execute",
                      "get"
                    ],
                    "classes": [
                      "CustomTrinoAuthErrorMeta",
                      "TrinoAuthError",
                      "TrinoEngineSpec",
                      "_CustomMapping"
                    ],
                    "imports": [
                      "__future__",
                      "contextlib",
                      "logging",
                      "threading",
                      "time",
                      "typing",
                      "requests",
                      "flask",
                      "sqlalchemy.engine.reflection",
                      "sqlalchemy.engine.url",
                      "sqlalchemy.exc",
                      "superset",
                      "superset.constants",
                      "superset.db_engine_specs.base",
                      "superset.db_engine_specs.exceptions",
                      "superset.db_engine_specs.presto",
                      "superset.models.sql_lab",
                      "superset.sql_parse",
                      "superset.superset_typing",
                      "superset.utils",
                      "superset.utils.core",
                      "superset.models.core",
                      "trino.exceptions",
                      "trino.dbapi",
                      "requests",
                      "trino",
                      "trino.sqlalchemy",
                      "trino.auth",
                      "trino.auth",
                      "trino.auth",
                      "trino.auth"
                    ],
                    "size_lines": 489,
                    "has_main": false,
                    "docstring": null
                  },
                  "mssql.py": {
                    "functions": [
                      "epoch_to_dttm",
                      "convert_dttm",
                      "fetch_data",
                      "extract_error_message"
                    ],
                    "classes": [
                      "MssqlEngineSpec",
                      "AzureSynapseSpec"
                    ],
                    "imports": [
                      "__future__",
                      "logging",
                      "re",
                      "datetime",
                      "re",
                      "typing",
                      "flask_babel",
                      "sqlalchemy",
                      "sqlalchemy.dialects.mssql.base",
                      "superset.constants",
                      "superset.db_engine_specs.base",
                      "superset.errors",
                      "superset.models.sql_types.mssql_sql_types",
                      "superset.utils.core"
                    ],
                    "size_lines": 173,
                    "has_main": false,
                    "docstring": null
                  },
                  "dremio.py": {
                    "functions": [
                      "epoch_to_dttm",
                      "get_allows_alias_in_select",
                      "convert_dttm"
                    ],
                    "classes": [
                      "DremioEngineSpec"
                    ],
                    "imports": [
                      "__future__",
                      "datetime",
                      "typing",
                      "packaging.version",
                      "sqlalchemy",
                      "superset.constants",
                      "superset.db_engine_specs.base",
                      "superset.models.core"
                    ],
                    "size_lines": 96,
                    "has_main": false,
                    "docstring": null
                  },
                  "databend.py": {
                    "functions": [
                      "epoch_to_dttm",
                      "convert_dttm",
                      "get_dbapi_exception_mapping",
                      "get_dbapi_mapped_exception",
                      "get_function_names",
                      "get_dbapi_exception_mapping",
                      "get_dbapi_mapped_exception",
                      "get_function_names",
                      "get_datatype",
                      "build_sqlalchemy_uri",
                      "get_parameters_from_uri",
                      "default_port",
                      "validate_parameters",
                      "_mutate_label"
                    ],
                    "classes": [
                      "DatabendBaseEngineSpec",
                      "DatabendEngineSpec",
                      "DatabendParametersSchema",
                      "DatabendConnectEngineSpec"
                    ],
                    "imports": [
                      "__future__",
                      "logging",
                      "re",
                      "datetime",
                      "typing",
                      "flask_babel",
                      "marshmallow",
                      "marshmallow.validate",
                      "sqlalchemy",
                      "sqlalchemy.engine.url",
                      "urllib3.exceptions",
                      "superset.constants",
                      "superset.databases.utils",
                      "superset.db_engine_specs.base",
                      "superset.db_engine_specs.exceptions",
                      "superset.errors",
                      "superset.utils.core",
                      "superset.utils.hashing",
                      "superset.utils.network",
                      "superset.models.core"
                    ],
                    "size_lines": 367,
                    "has_main": false,
                    "docstring": null
                  },
                  "dynamodb.py": {
                    "functions": [
                      "epoch_to_dttm",
                      "convert_dttm"
                    ],
                    "classes": [
                      "DynamoDBEngineSpec"
                    ],
                    "imports": [
                      "datetime",
                      "typing",
                      "sqlalchemy",
                      "superset.constants",
                      "superset.db_engine_specs.base"
                    ],
                    "size_lines": 68,
                    "has_main": false,
                    "docstring": null
                  },
                  "denodo.py": {
                    "functions": [
                      "epoch_to_dttm",
                      "convert_dttm",
                      "get_datatype"
                    ],
                    "classes": [
                      "_ErrorPatterns",
                      "DenodoEngineSpec"
                    ],
                    "imports": [
                      "re",
                      "datetime",
                      "typing",
                      "sqlalchemy.types",
                      "superset.db_engine_specs.base",
                      "superset.errors",
                      "psycopg2.extensions"
                    ],
                    "size_lines": 159,
                    "has_main": false,
                    "docstring": null
                  },
                  "tdengine.py": {
                    "functions": [
                      "get_schema_from_engine_params"
                    ],
                    "classes": [
                      "TDengineEngineSpec"
                    ],
                    "imports": [
                      "__future__",
                      "typing",
                      "urllib",
                      "sqlalchemy.engine.url",
                      "superset.db_engine_specs.base"
                    ],
                    "size_lines": 58,
                    "has_main": false,
                    "docstring": null
                  },
                  "lib.py": {
                    "functions": [
                      "has_custom_method",
                      "diagnose",
                      "get_name",
                      "generate_table"
                    ],
                    "classes": [],
                    "imports": [
                      "__future__",
                      "typing",
                      "superset.constants",
                      "superset.db_engine_specs",
                      "superset.db_engine_specs.base",
                      "superset.sql_validators.postgres",
                      "superset.sql_validators.presto_db",
                      "superset.app"
                    ],
                    "size_lines": 315,
                    "has_main": true,
                    "docstring": null
                  },
                  "parseable.py": {
                    "functions": [
                      "epoch_to_dttm",
                      "epoch_ms_to_dttm",
                      "convert_dttm",
                      "alter_new_orm_column",
                      "get_extra_params"
                    ],
                    "classes": [
                      "ParseableEngineSpec"
                    ],
                    "imports": [
                      "__future__",
                      "datetime",
                      "typing",
                      "sqlalchemy",
                      "superset.constants",
                      "superset.db_engine_specs.base",
                      "superset.utils.core",
                      "superset.connectors.sqla.models",
                      "superset.models.core"
                    ],
                    "size_lines": 88,
                    "has_main": false,
                    "docstring": null
                  },
                  "solr.py": {
                    "functions": [],
                    "classes": [
                      "SolrEngineSpec"
                    ],
                    "imports": [
                      "superset.db_engine_specs.base"
                    ],
                    "size_lines": 34,
                    "has_main": false,
                    "docstring": null
                  },
                  "risingwave.py": {
                    "functions": [],
                    "classes": [
                      "RisingWaveDbEngineSpec"
                    ],
                    "imports": [
                      "superset.db_engine_specs.postgres"
                    ],
                    "size_lines": 24,
                    "has_main": false,
                    "docstring": null
                  },
                  "bigquery.py": {
                    "functions": [
                      "convert_dttm",
                      "fetch_data",
                      "_mutate_label",
                      "_truncate_label",
                      "normalize_indexes",
                      "get_indexes",
                      "get_extra_table_metadata",
                      "epoch_to_dttm",
                      "epoch_ms_to_dttm",
                      "df_to_sql",
                      "_get_client",
                      "estimate_query_cost",
                      "get_default_catalog",
                      "get_catalog_names",
                      "adjust_engine_params",
                      "get_allow_cost_estimate",
                      "custom_estimate_statement_cost",
                      "query_cost_formatter",
                      "build_sqlalchemy_uri",
                      "get_parameters_from_uri",
                      "get_dbapi_exception_mapping",
                      "validate_parameters",
                      "parameters_json_schema",
                      "select_star",
                      "_get_fields",
                      "parse_error_exception"
                    ],
                    "classes": [
                      "BigQueryParametersSchema",
                      "BigQueryParametersType",
                      "BigQueryEngineSpec"
                    ],
                    "imports": [
                      "__future__",
                      "logging",
                      "re",
                      "urllib",
                      "datetime",
                      "re",
                      "typing",
                      "pandas",
                      "apispec",
                      "apispec.ext.marshmallow",
                      "deprecation",
                      "flask_babel",
                      "marshmallow",
                      "marshmallow.exceptions",
                      "sqlalchemy",
                      "sqlalchemy.engine.base",
                      "sqlalchemy.engine.reflection",
                      "sqlalchemy.engine.url",
                      "sqlalchemy.sql",
                      "superset.constants",
                      "superset.databases.schemas",
                      "superset.databases.utils",
                      "superset.db_engine_specs.base",
                      "superset.db_engine_specs.exceptions",
                      "superset.errors",
                      "superset.exceptions",
                      "superset.sql.parse",
                      "superset.sql_parse",
                      "superset.superset_typing",
                      "superset.utils",
                      "superset.utils.hashing",
                      "google.auth",
                      "google.cloud",
                      "google.oauth2",
                      "pandas_gbq",
                      "superset.models.core",
                      "google.auth.exceptions"
                    ],
                    "size_lines": 774,
                    "has_main": false,
                    "docstring": null
                  },
                  "__init__.py": {
                    "functions": [
                      "is_engine_spec",
                      "load_engine_specs",
                      "get_engine_spec",
                      "get_available_engine_specs"
                    ],
                    "classes": [],
                    "imports": [
                      "inspect",
                      "logging",
                      "pkgutil",
                      "collections",
                      "importlib",
                      "pathlib",
                      "typing",
                      "sqlalchemy.dialects",
                      "importlib_metadata",
                      "sqlalchemy.engine.default",
                      "sqlalchemy.exc",
                      "superset",
                      "superset.db_engine_specs.base"
                    ],
                    "size_lines": 195,
                    "has_main": false,
                    "docstring": "Compatibility layer for different database engines\n\nThis modules stores logic specific to different database engines. Things\nlike time-related functions that are similar but not identical, or\ninformation as to expose certain features or not and how to expose them.\n\nFor instance, Hive/Presto supports partitions and have a specific API to\nlist partitions. Other databases like Vertica also support partitions but\nhave different API to get to them. Other databases don't support partitions\nat all. The classes here will use a common interface to specify all this.\n\nThe general idea is to use static classes and an inheritance scheme."
                  },
                  "sqlite.py": {
                    "functions": [
                      "epoch_to_dttm",
                      "convert_dttm",
                      "get_table_names",
                      "get_function_names"
                    ],
                    "classes": [
                      "SqliteEngineSpec"
                    ],
                    "imports": [
                      "__future__",
                      "re",
                      "datetime",
                      "re",
                      "typing",
                      "flask_babel",
                      "sqlalchemy",
                      "sqlalchemy.engine.reflection",
                      "superset.constants",
                      "superset.db_engine_specs.base",
                      "superset.errors",
                      "superset.models.core"
                    ],
                    "size_lines": 257,
                    "has_main": false,
                    "docstring": null
                  },
                  "doris.py": {
                    "functions": [
                      "python_type",
                      "python_type",
                      "python_type",
                      "adjust_engine_params",
                      "get_default_catalog",
                      "get_catalog_names",
                      "get_schema_from_engine_params"
                    ],
                    "classes": [
                      "TINYINT",
                      "LARGEINT",
                      "DOUBLE",
                      "HLL",
                      "BITMAP",
                      "QuantileState",
                      "AggState",
                      "ARRAY",
                      "MAP",
                      "STRUCT",
                      "DorisEngineSpec"
                    ],
                    "imports": [
                      "logging",
                      "re",
                      "re",
                      "typing",
                      "urllib",
                      "flask_babel",
                      "sqlalchemy",
                      "sqlalchemy.engine.reflection",
                      "sqlalchemy.engine.url",
                      "sqlalchemy.sql.type_api",
                      "superset.db_engine_specs.mysql",
                      "superset.errors",
                      "superset.models.core",
                      "superset.utils.core"
                    ],
                    "size_lines": 310,
                    "has_main": false,
                    "docstring": null
                  },
                  "cockroachdb.py": {
                    "functions": [
                      "convert_dttm"
                    ],
                    "classes": [
                      "CockroachDbEngineSpec"
                    ],
                    "imports": [
                      "datetime",
                      "typing",
                      "sqlalchemy",
                      "superset.db_engine_specs.postgres"
                    ],
                    "size_lines": 39,
                    "has_main": false,
                    "docstring": null
                  },
                  "aurora.py": {
                    "functions": [],
                    "classes": [
                      "AuroraMySQLDataAPI",
                      "AuroraPostgresDataAPI"
                    ],
                    "imports": [
                      "superset.db_engine_specs.mysql",
                      "superset.db_engine_specs.postgres"
                    ],
                    "size_lines": 45,
                    "has_main": false,
                    "docstring": null
                  },
                  "mariadb.py": {
                    "functions": [],
                    "classes": [
                      "MariaDBEngineSpec"
                    ],
                    "imports": [
                      "superset.db_engine_specs.mysql"
                    ],
                    "size_lines": 23,
                    "has_main": false,
                    "docstring": null
                  },
                  "kusto.py": {
                    "functions": [
                      "get_dbapi_exception_mapping",
                      "convert_dttm",
                      "get_dbapi_exception_mapping",
                      "convert_dttm",
                      "is_select_query",
                      "parse_sql"
                    ],
                    "classes": [
                      "KustoSqlEngineSpec",
                      "KustoKqlEngineSpec"
                    ],
                    "imports": [
                      "re",
                      "datetime",
                      "typing",
                      "sqlalchemy",
                      "sqlalchemy.dialects.mssql.base",
                      "superset.constants",
                      "superset.db_engine_specs.base",
                      "superset.db_engine_specs.exceptions",
                      "superset.sql_parse",
                      "superset.utils.core",
                      "sqlalchemy_kusto.errors",
                      "sqlalchemy_kusto.errors"
                    ],
                    "size_lines": 169,
                    "has_main": false,
                    "docstring": null
                  },
                  "hive.py": {
                    "functions": [
                      "upload_to_s3",
                      "patch",
                      "fetch_data",
                      "df_to_sql",
                      "convert_dttm",
                      "adjust_engine_params",
                      "get_schema_from_engine_params",
                      "_extract_error_message",
                      "progress",
                      "get_tracking_url_from_logs",
                      "handle_cursor",
                      "get_columns",
                      "where_latest_partition",
                      "_get_fields",
                      "latest_sub_partition",
                      "_latest_partition_from_df",
                      "_partition_query",
                      "select_star",
                      "impersonate_user",
                      "execute",
                      "get_function_names",
                      "has_implicit_cancel",
                      "get_view_names",
                      "_get_hive_type"
                    ],
                    "classes": [
                      "HiveEngineSpec"
                    ],
                    "imports": [
                      "__future__",
                      "logging",
                      "os",
                      "re",
                      "tempfile",
                      "time",
                      "datetime",
                      "typing",
                      "urllib",
                      "numpy",
                      "pandas",
                      "pyarrow",
                      "pyarrow.parquet",
                      "flask",
                      "sqlalchemy",
                      "sqlalchemy.engine.base",
                      "sqlalchemy.engine.reflection",
                      "sqlalchemy.engine.url",
                      "sqlalchemy.sql.expression",
                      "superset",
                      "superset.common.db_query_status",
                      "superset.constants",
                      "superset.db_engine_specs.base",
                      "superset.db_engine_specs.presto",
                      "superset.exceptions",
                      "superset.extensions",
                      "superset.models.sql_lab",
                      "superset.sql_parse",
                      "superset.superset_typing",
                      "superset.models.core",
                      "boto3",
                      "boto3.s3.transfer",
                      "pyhive",
                      "TCLIService",
                      "pyhive",
                      "TCLIService",
                      "pyhive"
                    ],
                    "size_lines": 617,
                    "has_main": false,
                    "docstring": null
                  },
                  "db2.py": {
                    "functions": [
                      "epoch_to_dttm",
                      "get_table_comment",
                      "get_prequeries"
                    ],
                    "classes": [
                      "Db2EngineSpec"
                    ],
                    "imports": [
                      "logging",
                      "typing",
                      "sqlalchemy.engine.reflection",
                      "superset.constants",
                      "superset.db_engine_specs.base",
                      "superset.models.core",
                      "superset.sql_parse"
                    ],
                    "size_lines": 114,
                    "has_main": false,
                    "docstring": null
                  },
                  "druid.py": {
                    "functions": [
                      "alter_new_orm_column",
                      "get_extra_params",
                      "convert_dttm",
                      "epoch_to_dttm",
                      "epoch_ms_to_dttm",
                      "get_dbapi_exception_mapping"
                    ],
                    "classes": [
                      "DruidEngineSpec"
                    ],
                    "imports": [
                      "__future__",
                      "logging",
                      "datetime",
                      "typing",
                      "sqlalchemy",
                      "superset",
                      "superset.constants",
                      "superset.db_engine_specs.base",
                      "superset.db_engine_specs.exceptions",
                      "superset.exceptions",
                      "superset.utils",
                      "superset.utils.core",
                      "superset.connectors.sqla.models",
                      "superset.models.core",
                      "requests"
                    ],
                    "size_lines": 142,
                    "has_main": false,
                    "docstring": null
                  },
                  "netezza.py": {
                    "functions": [
                      "epoch_to_dttm"
                    ],
                    "classes": [
                      "NetezzaEngineSpec"
                    ],
                    "imports": [
                      "superset.constants",
                      "superset.db_engine_specs.postgres"
                    ],
                    "size_lines": 41,
                    "has_main": false,
                    "docstring": null
                  },
                  "snowflake.py": {
                    "functions": [
                      "get_extra_params",
                      "adjust_engine_params",
                      "get_schema_from_engine_params",
                      "get_default_catalog",
                      "get_catalog_names",
                      "epoch_to_dttm",
                      "epoch_ms_to_dttm",
                      "convert_dttm",
                      "mutate_db_for_connection_test",
                      "get_cancel_query_id",
                      "cancel_query",
                      "build_sqlalchemy_uri",
                      "get_parameters_from_uri",
                      "validate_parameters",
                      "parameters_json_schema",
                      "update_params_from_encrypted_extra"
                    ],
                    "classes": [
                      "SnowflakeParametersSchema",
                      "SnowflakeParametersType",
                      "SnowflakeEngineSpec"
                    ],
                    "imports": [
                      "__future__",
                      "logging",
                      "re",
                      "datetime",
                      "re",
                      "typing",
                      "urllib",
                      "apispec",
                      "apispec.ext.marshmallow",
                      "cryptography.hazmat.backends",
                      "cryptography.hazmat.primitives",
                      "flask",
                      "flask_babel",
                      "marshmallow",
                      "sqlalchemy",
                      "sqlalchemy.engine.reflection",
                      "sqlalchemy.engine.url",
                      "superset.constants",
                      "superset.databases.utils",
                      "superset.db_engine_specs.base",
                      "superset.db_engine_specs.postgres",
                      "superset.errors",
                      "superset.models.sql_lab",
                      "superset.utils",
                      "superset.utils.core",
                      "superset.models.core"
                    ],
                    "size_lines": 420,
                    "has_main": false,
                    "docstring": null
                  },
                  "impala.py": {
                    "functions": [
                      "epoch_to_dttm",
                      "convert_dttm",
                      "get_schema_names",
                      "has_implicit_cancel",
                      "execute",
                      "handle_cursor",
                      "get_cancel_query_id",
                      "cancel_query"
                    ],
                    "classes": [
                      "ImpalaEngineSpec"
                    ],
                    "imports": [
                      "__future__",
                      "logging",
                      "re",
                      "time",
                      "datetime",
                      "typing",
                      "requests",
                      "flask",
                      "sqlalchemy",
                      "sqlalchemy.engine.reflection",
                      "superset",
                      "superset.constants",
                      "superset.db_engine_specs.base",
                      "superset.models.sql_lab",
                      "superset.models.core"
                    ],
                    "size_lines": 201,
                    "has_main": false,
                    "docstring": null
                  },
                  "postgres.py": {
                    "functions": [
                      "parse_options",
                      "fetch_data",
                      "epoch_to_dttm",
                      "convert_dttm",
                      "get_schema_from_engine_params",
                      "get_default_schema_for_query",
                      "adjust_engine_params",
                      "get_default_catalog",
                      "get_prequeries",
                      "get_allow_cost_estimate",
                      "estimate_statement_cost",
                      "query_cost_formatter",
                      "get_catalog_names",
                      "get_table_names",
                      "get_extra_params",
                      "get_datatype",
                      "get_cancel_query_id",
                      "cancel_query"
                    ],
                    "classes": [
                      "PostgresBaseEngineSpec",
                      "PostgresEngineSpec"
                    ],
                    "imports": [
                      "__future__",
                      "logging",
                      "re",
                      "datetime",
                      "re",
                      "typing",
                      "flask_babel",
                      "sqlalchemy.dialects.postgresql",
                      "sqlalchemy.dialects.postgresql.base",
                      "sqlalchemy.engine.reflection",
                      "sqlalchemy.engine.url",
                      "sqlalchemy.types",
                      "superset.constants",
                      "superset.db_engine_specs.base",
                      "superset.errors",
                      "superset.exceptions",
                      "superset.models.sql_lab",
                      "superset.sql.parse",
                      "superset.utils",
                      "superset.utils.core",
                      "superset.models.core",
                      "psycopg2.extensions"
                    ],
                    "size_lines": 484,
                    "has_main": false,
                    "docstring": null
                  },
                  "crate.py": {
                    "functions": [
                      "epoch_to_dttm",
                      "epoch_ms_to_dttm",
                      "convert_dttm",
                      "alter_new_orm_column"
                    ],
                    "classes": [
                      "CrateEngineSpec"
                    ],
                    "imports": [
                      "__future__",
                      "datetime",
                      "typing",
                      "sqlalchemy",
                      "superset.constants",
                      "superset.db_engine_specs.base",
                      "superset.connectors.sqla.models"
                    ],
                    "size_lines": 69,
                    "has_main": false,
                    "docstring": null
                  },
                  "drill.py": {
                    "functions": [
                      "epoch_to_dttm",
                      "epoch_ms_to_dttm",
                      "convert_dttm",
                      "adjust_engine_params",
                      "get_schema_from_engine_params",
                      "impersonate_user",
                      "fetch_data"
                    ],
                    "classes": [
                      "DrillEngineSpec"
                    ],
                    "imports": [
                      "__future__",
                      "datetime",
                      "typing",
                      "urllib",
                      "sqlalchemy",
                      "sqlalchemy.engine.url",
                      "superset.constants",
                      "superset.db_engine_specs.base",
                      "superset.db_engine_specs.exceptions",
                      "superset.models.core"
                    ],
                    "size_lines": 146,
                    "has_main": false,
                    "docstring": null
                  },
                  "ascend.py": {
                    "functions": [],
                    "classes": [
                      "AscendEngineSpec"
                    ],
                    "imports": [
                      "sqlalchemy.dialects",
                      "superset.constants",
                      "superset.db_engine_specs.impala"
                    ],
                    "size_lines": 42,
                    "has_main": false,
                    "docstring": null
                  },
                  "presto.py": {
                    "functions": [
                      "get_children",
                      "convert_dttm",
                      "epoch_to_dttm",
                      "get_default_catalog",
                      "get_catalog_names",
                      "adjust_engine_params",
                      "get_schema_from_engine_params",
                      "estimate_statement_cost",
                      "query_cost_formatter",
                      "get_function_names",
                      "_partition_query",
                      "where_latest_partition",
                      "_latest_partition_from_df",
                      "latest_partition",
                      "latest_sub_partition",
                      "_show_columns",
                      "_create_column_info",
                      "get_columns",
                      "_parse_structural_column",
                      "_split_data_type",
                      "_has_nested_data_types",
                      "_get_full_name",
                      "get_allow_cost_estimate",
                      "impersonate_user",
                      "get_table_names",
                      "get_view_names",
                      "_is_column_name_quoted",
                      "_get_fields",
                      "select_star",
                      "expand_data",
                      "get_extra_table_metadata",
                      "get_create_view",
                      "get_tracking_url",
                      "handle_cursor",
                      "_extract_error_message",
                      "has_implicit_cancel",
                      "humanize"
                    ],
                    "classes": [
                      "PrestoBaseEngineSpec",
                      "PrestoEngineSpec"
                    ],
                    "imports": [
                      "__future__",
                      "contextlib",
                      "logging",
                      "re",
                      "time",
                      "abc",
                      "collections",
                      "datetime",
                      "re",
                      "textwrap",
                      "typing",
                      "urllib",
                      "pandas",
                      "flask",
                      "flask_babel",
                      "packaging.version",
                      "sqlalchemy",
                      "sqlalchemy.engine.base",
                      "sqlalchemy.engine.reflection",
                      "sqlalchemy.engine.result",
                      "sqlalchemy.engine.url",
                      "sqlalchemy.sql.expression",
                      "superset",
                      "superset.common.db_query_status",
                      "superset.constants",
                      "superset.db_engine_specs.base",
                      "superset.errors",
                      "superset.exceptions",
                      "superset.models.sql_lab",
                      "superset.models.sql_types.presto_sql_types",
                      "superset.result_set",
                      "superset.superset_typing",
                      "superset.utils",
                      "superset.utils.core",
                      "superset.models.core",
                      "superset.sql_parse",
                      "pyhive.presto",
                      "pyhive.exc"
                    ],
                    "size_lines": 1391,
                    "has_main": false,
                    "docstring": null
                  },
                  "exceptions.py": {
                    "functions": [],
                    "classes": [
                      "SupersetDBAPIError",
                      "SupersetDBAPIDataError",
                      "SupersetDBAPIDatabaseError",
                      "SupersetDBAPIConnectionError",
                      "SupersetDBAPIOperationalError",
                      "SupersetDBAPIProgrammingError"
                    ],
                    "imports": [
                      "superset.exceptions"
                    ],
                    "size_lines": 42,
                    "has_main": false,
                    "docstring": null
                  },
                  "spark.py": {
                    "functions": [],
                    "classes": [
                      "SparkEngineSpec"
                    ],
                    "imports": [
                      "__future__",
                      "superset.constants",
                      "superset.db_engine_specs.hive"
                    ],
                    "size_lines": 44,
                    "has_main": false,
                    "docstring": null
                  },
                  "pinot.py": {
                    "functions": [
                      "epoch_to_dttm",
                      "epoch_ms_to_dttm",
                      "column_datatype_to_string"
                    ],
                    "classes": [
                      "PinotEngineSpec"
                    ],
                    "imports": [
                      "sqlalchemy",
                      "sqlalchemy.engine.interfaces",
                      "sqlalchemy.types",
                      "superset.constants",
                      "superset.db_engine_specs.base"
                    ],
                    "size_lines": 82,
                    "has_main": false,
                    "docstring": null
                  },
                  "databricks.py": {
                    "functions": [
                      "convert_dttm",
                      "epoch_to_dttm",
                      "get_extra_params",
                      "get_table_names",
                      "extract_errors",
                      "validate_parameters",
                      "build_sqlalchemy_uri",
                      "get_parameters_from_uri",
                      "parameters_json_schema",
                      "get_default_catalog",
                      "get_prequeries",
                      "get_catalog_names",
                      "build_sqlalchemy_uri",
                      "get_parameters_from_uri",
                      "get_default_catalog",
                      "get_catalog_names",
                      "adjust_engine_params"
                    ],
                    "classes": [
                      "DatabricksBaseSchema",
                      "DatabricksBaseParametersType",
                      "DatabricksNativeSchema",
                      "DatabricksNativePropertiesSchema",
                      "DatabricksNativeParametersType",
                      "DatabricksNativePropertiesType",
                      "DatabricksPythonConnectorSchema",
                      "DatabricksPythonConnectorParametersType",
                      "DatabricksPythonConnectorPropertiesType",
                      "DatabricksHiveEngineSpec",
                      "DatabricksBaseEngineSpec",
                      "DatabricksODBCEngineSpec",
                      "DatabricksDynamicBaseEngineSpec",
                      "DatabricksNativeEngineSpec",
                      "DatabricksPythonConnectorEngineSpec"
                    ],
                    "imports": [
                      "__future__",
                      "datetime",
                      "typing",
                      "apispec",
                      "apispec.ext.marshmallow",
                      "flask_babel",
                      "marshmallow",
                      "marshmallow.validate",
                      "sqlalchemy.engine.reflection",
                      "sqlalchemy.engine.url",
                      "superset.constants",
                      "superset.databases.utils",
                      "superset.db_engine_specs.base",
                      "superset.db_engine_specs.hive",
                      "superset.errors",
                      "superset.utils",
                      "superset.utils.core",
                      "superset.utils.network",
                      "superset.models.core"
                    ],
                    "size_lines": 592,
                    "has_main": false,
                    "docstring": null
                  },
                  "oracle.py": {
                    "functions": [
                      "convert_dttm",
                      "epoch_to_dttm",
                      "epoch_ms_to_dttm",
                      "fetch_data"
                    ],
                    "classes": [
                      "OracleEngineSpec"
                    ],
                    "imports": [
                      "datetime",
                      "typing",
                      "sqlalchemy",
                      "superset.constants",
                      "superset.db_engine_specs.base"
                    ],
                    "size_lines": 82,
                    "has_main": false,
                    "docstring": null
                  },
                  "vertica.py": {
                    "functions": [],
                    "classes": [
                      "VerticaEngineSpec"
                    ],
                    "imports": [
                      "superset.db_engine_specs.postgres"
                    ],
                    "size_lines": 23,
                    "has_main": false,
                    "docstring": null
                  },
                  "ydb.py": {
                    "functions": [
                      "epoch_to_dttm",
                      "convert_dttm",
                      "update_params_from_encrypted_extra"
                    ],
                    "classes": [
                      "YDBEngineSpec"
                    ],
                    "imports": [
                      "__future__",
                      "logging",
                      "datetime",
                      "typing",
                      "sqlalchemy",
                      "superset.constants",
                      "superset.db_engine_specs.base",
                      "superset.utils",
                      "superset.models.core"
                    ],
                    "size_lines": 109,
                    "has_main": false,
                    "docstring": null
                  },
                  "exasol.py": {
                    "functions": [
                      "fetch_data"
                    ],
                    "classes": [
                      "ExasolEngineSpec"
                    ],
                    "imports": [
                      "typing",
                      "superset.constants",
                      "superset.db_engine_specs.base"
                    ],
                    "size_lines": 50,
                    "has_main": false,
                    "docstring": null
                  },
                  "ibmi.py": {
                    "functions": [
                      "epoch_to_dttm"
                    ],
                    "classes": [
                      "IBMiEngineSpec"
                    ],
                    "imports": [
                      "db2"
                    ],
                    "size_lines": 28,
                    "has_main": false,
                    "docstring": null
                  },
                  "duckdb.py": {
                    "functions": [
                      "_is_motherduck",
                      "build_sqlalchemy_uri",
                      "get_parameters_from_uri",
                      "validate_parameters",
                      "parameters_json_schema",
                      "epoch_to_dttm",
                      "convert_dttm",
                      "get_table_names",
                      "get_extra_params",
                      "_is_motherduck",
                      "build_sqlalchemy_uri"
                    ],
                    "classes": [
                      "DuckDBParametersSchema",
                      "DuckDBParametersType",
                      "DuckDBPropertiesType",
                      "DuckDBParametersMixin",
                      "DuckDBEngineSpec",
                      "MotherDuckEngineSpec"
                    ],
                    "imports": [
                      "__future__",
                      "re",
                      "datetime",
                      "re",
                      "typing",
                      "apispec",
                      "apispec.ext.marshmallow",
                      "flask_babel",
                      "marshmallow",
                      "sqlalchemy",
                      "sqlalchemy.engine.reflection",
                      "sqlalchemy.engine.url",
                      "superset.config",
                      "superset.constants",
                      "superset.databases.utils",
                      "superset.db_engine_specs.base",
                      "superset.errors",
                      "superset.utils.core",
                      "superset.models.core"
                    ],
                    "size_lines": 299,
                    "has_main": false,
                    "docstring": null
                  },
                  "oceanbase.py": {
                    "functions": [
                      "python_type",
                      "python_type"
                    ],
                    "classes": [
                      "NUMBER",
                      "NUMERIC",
                      "ARRAY",
                      "MAP",
                      "OceanBaseEngineSpec"
                    ],
                    "imports": [
                      "logging",
                      "re",
                      "re",
                      "typing",
                      "flask_babel",
                      "sqlalchemy",
                      "sqlalchemy.sql.type_api",
                      "superset.db_engine_specs.mysql",
                      "superset.errors",
                      "superset.utils.core"
                    ],
                    "size_lines": 184,
                    "has_main": false,
                    "docstring": null
                  },
                  "starrocks.py": {
                    "functions": [
                      "python_type",
                      "python_type",
                      "python_type",
                      "adjust_engine_params",
                      "get_schema_from_engine_params",
                      "impersonate_user",
                      "get_prequeries"
                    ],
                    "classes": [
                      "TINYINT",
                      "LARGEINT",
                      "DOUBLE",
                      "HLL",
                      "BITMAP",
                      "PERCENTILE",
                      "ARRAY",
                      "MAP",
                      "STRUCT",
                      "StarRocksEngineSpec"
                    ],
                    "imports": [
                      "logging",
                      "re",
                      "re",
                      "typing",
                      "urllib",
                      "flask_babel",
                      "sqlalchemy",
                      "sqlalchemy.engine.url",
                      "sqlalchemy.sql.type_api",
                      "superset.db_engine_specs.mysql",
                      "superset.errors",
                      "superset.models.core",
                      "superset.utils.core"
                    ],
                    "size_lines": 251,
                    "has_main": false,
                    "docstring": null
                  },
                  "athena.py": {
                    "functions": [
                      "convert_dttm",
                      "epoch_to_dttm",
                      "_mutate_label"
                    ],
                    "classes": [
                      "AthenaEngineSpec"
                    ],
                    "imports": [
                      "re",
                      "datetime",
                      "re",
                      "typing",
                      "flask_babel",
                      "sqlalchemy",
                      "superset.constants",
                      "superset.db_engine_specs.base",
                      "superset.errors"
                    ],
                    "size_lines": 93,
                    "has_main": false,
                    "docstring": null
                  },
                  "teradata.py": {
                    "functions": [
                      "epoch_to_dttm"
                    ],
                    "classes": [
                      "TeradataEngineSpec"
                    ],
                    "imports": [
                      "superset.db_engine_specs.base"
                    ],
                    "size_lines": 50,
                    "has_main": false,
                    "docstring": null
                  },
                  "gsheets.py": {
                    "functions": [
                      "impersonate_user",
                      "get_extra_table_metadata",
                      "build_sqlalchemy_uri",
                      "update_params_from_encrypted_extra",
                      "get_parameters_from_uri",
                      "parameters_json_schema",
                      "validate_parameters",
                      "_do_post",
                      "df_to_sql"
                    ],
                    "classes": [
                      "GSheetsParametersSchema",
                      "GSheetsParametersType",
                      "GSheetsPropertiesType",
                      "GSheetsEngineSpec"
                    ],
                    "imports": [
                      "__future__",
                      "logging",
                      "re",
                      "re",
                      "typing",
                      "pandas",
                      "apispec",
                      "apispec.ext.marshmallow",
                      "flask",
                      "flask_babel",
                      "marshmallow",
                      "marshmallow.exceptions",
                      "requests",
                      "shillelagh.adapters.api.gsheets.lib",
                      "shillelagh.exceptions",
                      "sqlalchemy.engine",
                      "sqlalchemy.engine.url",
                      "superset",
                      "superset.databases.schemas",
                      "superset.db_engine_specs.shillelagh",
                      "superset.errors",
                      "superset.exceptions",
                      "superset.utils",
                      "superset.models.core",
                      "superset.sql_parse",
                      "shillelagh.backends.apsw.dialects.base"
                    ],
                    "size_lines": 434,
                    "has_main": false,
                    "docstring": null
                  },
                  "kylin.py": {
                    "functions": [
                      "convert_dttm"
                    ],
                    "classes": [
                      "KylinEngineSpec"
                    ],
                    "imports": [
                      "datetime",
                      "typing",
                      "sqlalchemy",
                      "superset.constants",
                      "superset.db_engine_specs.base"
                    ],
                    "size_lines": 56,
                    "has_main": false,
                    "docstring": null
                  },
                  "base.py": {
                    "functions": [
                      "convert_inspector_columns",
                      "compile_timegrain_expression",
                      "__init__",
                      "_constructor",
                      "is_oauth2_enabled",
                      "start_oauth2_dance",
                      "get_oauth2_config",
                      "get_oauth2_authorization_uri",
                      "get_oauth2_token",
                      "get_oauth2_fresh_token",
                      "get_allows_alias_in_select",
                      "supports_url",
                      "supports_backend",
                      "get_default_catalog",
                      "get_default_schema",
                      "get_schema_from_engine_params",
                      "get_default_schema_for_query",
                      "get_dbapi_exception_mapping",
                      "parse_error_exception",
                      "get_dbapi_mapped_exception",
                      "get_allow_cost_estimate",
                      "get_text_clause",
                      "get_engine",
                      "get_timestamp_expr",
                      "get_time_grains",
                      "_sort_time_grains",
                      "get_time_grain_expressions",
                      "fetch_data",
                      "expand_data",
                      "alter_new_orm_column",
                      "epoch_to_dttm",
                      "epoch_ms_to_dttm",
                      "get_datatype",
                      "normalize_indexes",
                      "get_table_metadata",
                      "get_extra_table_metadata",
                      "apply_limit_to_sql",
                      "apply_top_to_sql",
                      "top_not_in_sql",
                      "get_limit_from_sql",
                      "set_or_update_query_limit",
                      "get_cte_query",
                      "df_to_sql",
                      "convert_dttm",
                      "handle_cursor",
                      "execute_with_cursor",
                      "extract_error_message",
                      "_extract_error_message",
                      "extract_errors",
                      "adjust_engine_params",
                      "get_prequeries",
                      "patch",
                      "get_catalog_names",
                      "get_schema_names",
                      "get_table_names",
                      "get_view_names",
                      "get_indexes",
                      "get_table_comment",
                      "get_columns",
                      "get_metrics",
                      "where_latest_partition",
                      "_get_fields",
                      "select_star",
                      "estimate_statement_cost",
                      "query_cost_formatter",
                      "process_statement",
                      "estimate_query_cost",
                      "impersonate_user",
                      "get_url_for_impersonation",
                      "update_impersonation_config",
                      "execute",
                      "needs_oauth2",
                      "make_label_compatible",
                      "get_column_types",
                      "_mutate_label",
                      "_truncate_label",
                      "column_datatype_to_string",
                      "get_function_names",
                      "pyodbc_rows_to_tuples",
                      "mutate_db_for_connection_test",
                      "get_extra_params",
                      "update_params_from_encrypted_extra",
                      "is_select_query",
                      "get_column_spec",
                      "get_sqla_column_type",
                      "prepare_cancel_query",
                      "has_implicit_cancel",
                      "get_cancel_query_id",
                      "cancel_query",
                      "parse_sql",
                      "get_impersonation_key",
                      "mask_encrypted_extra",
                      "unmask_encrypted_extra",
                      "get_public_information",
                      "validate_database_uri",
                      "denormalize_name",
                      "quote_table",
                      "build_sqlalchemy_uri",
                      "get_parameters_from_uri",
                      "validate_parameters",
                      "parameters_json_schema",
                      "sort_day_week",
                      "sort_interval"
                    ],
                    "classes": [
                      "TimeGrain",
                      "TimestampExpression",
                      "LimitMethod",
                      "MetricType",
                      "BaseEngineSpec",
                      "BasicParametersSchema",
                      "BasicParametersType",
                      "BasicPropertiesType",
                      "BasicParametersMixin"
                    ],
                    "imports": [
                      "__future__",
                      "logging",
                      "re",
                      "warnings",
                      "datetime",
                      "inspect",
                      "re",
                      "typing",
                      "urllib.parse",
                      "uuid",
                      "pandas",
                      "requests",
                      "sqlparse",
                      "apispec",
                      "apispec.ext.marshmallow",
                      "deprecation",
                      "flask",
                      "flask_appbuilder.security.sqla.models",
                      "flask_babel",
                      "marshmallow",
                      "marshmallow.validate",
                      "sqlalchemy",
                      "sqlalchemy.engine.base",
                      "sqlalchemy.engine.interfaces",
                      "sqlalchemy.engine.reflection",
                      "sqlalchemy.engine.url",
                      "sqlalchemy.ext.compiler",
                      "sqlalchemy.sql",
                      "sqlalchemy.sql.expression",
                      "sqlalchemy.types",
                      "sqlparse.tokens",
                      "superset",
                      "superset.constants",
                      "superset.databases.utils",
                      "superset.errors",
                      "superset.exceptions",
                      "superset.sql.parse",
                      "superset.sql_parse",
                      "superset.superset_typing",
                      "superset.utils",
                      "superset.utils.core",
                      "superset.utils.hashing",
                      "superset.utils.json",
                      "superset.utils.network",
                      "superset.utils.oauth2",
                      "superset.connectors.sqla.models",
                      "superset.databases.schemas",
                      "superset.models.core",
                      "superset.models.sql_lab"
                    ],
                    "size_lines": 2539,
                    "has_main": false,
                    "docstring": null
                  },
                  "rockset.py": {
                    "functions": [
                      "epoch_to_dttm",
                      "epoch_ms_to_dttm",
                      "convert_dttm",
                      "alter_new_orm_column"
                    ],
                    "classes": [
                      "RocksetEngineSpec"
                    ],
                    "imports": [
                      "datetime",
                      "typing",
                      "sqlalchemy",
                      "superset.constants",
                      "superset.db_engine_specs.base",
                      "superset.connectors.sqla.models"
                    ],
                    "size_lines": 73,
                    "has_main": false,
                    "docstring": null
                  },
                  "couchbase.py": {
                    "functions": [
                      "epoch_to_dttm",
                      "epoch_ms_to_dttm",
                      "convert_dttm",
                      "build_sqlalchemy_uri",
                      "get_parameters_from_uri",
                      "validate_parameters",
                      "get_schema_from_engine_params"
                    ],
                    "classes": [
                      "BasicParametersType",
                      "BasicPropertiesType",
                      "CouchbaseParametersSchema",
                      "CouchbaseEngineSpec"
                    ],
                    "imports": [
                      "__future__",
                      "datetime",
                      "typing",
                      "urllib",
                      "flask_babel",
                      "marshmallow",
                      "sqlalchemy.engine.url",
                      "superset.constants",
                      "superset.databases.utils",
                      "superset.db_engine_specs.base",
                      "superset.errors",
                      "superset.utils.network"
                    ],
                    "size_lines": 258,
                    "has_main": false,
                    "docstring": null
                  },
                  "hana.py": {
                    "functions": [
                      "convert_dttm"
                    ],
                    "classes": [
                      "HanaEngineSpec"
                    ],
                    "imports": [
                      "datetime",
                      "typing",
                      "sqlalchemy",
                      "superset.constants",
                      "superset.db_engine_specs.base",
                      "superset.db_engine_specs.postgres"
                    ],
                    "size_lines": 60,
                    "has_main": false,
                    "docstring": null
                  },
                  "mysql.py": {
                    "functions": [
                      "convert_dttm",
                      "adjust_engine_params",
                      "get_schema_from_engine_params",
                      "get_datatype",
                      "epoch_to_dttm",
                      "_extract_error_message",
                      "get_cancel_query_id",
                      "cancel_query"
                    ],
                    "classes": [
                      "MySQLEngineSpec"
                    ],
                    "imports": [
                      "contextlib",
                      "re",
                      "datetime",
                      "decimal",
                      "re",
                      "typing",
                      "urllib",
                      "flask_babel",
                      "sqlalchemy",
                      "sqlalchemy.dialects.mysql",
                      "sqlalchemy.engine.url",
                      "superset.constants",
                      "superset.db_engine_specs.base",
                      "superset.errors",
                      "superset.models.sql_lab",
                      "superset.utils.core",
                      "MySQLdb"
                    ],
                    "size_lines": 301,
                    "has_main": false,
                    "docstring": null
                  },
                  "shillelagh.py": {
                    "functions": [
                      "get_function_names"
                    ],
                    "classes": [
                      "ShillelaghEngineSpec"
                    ],
                    "imports": [
                      "__future__",
                      "typing",
                      "superset.db_engine_specs.sqlite",
                      "superset.models.core"
                    ],
                    "size_lines": 49,
                    "has_main": false,
                    "docstring": null
                  }
                },
                "embedded_dashboard": {
                  "__init__.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 17,
                    "has_main": false,
                    "docstring": null
                  }
                },
                "row_level_security": {
                  "__init__.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 17,
                    "has_main": false,
                    "docstring": null
                  },
                  "api.py": {
                    "functions": [
                      "post",
                      "put",
                      "bulk_delete"
                    ],
                    "classes": [
                      "RLSRestApi"
                    ],
                    "imports": [
                      "logging",
                      "typing",
                      "flask",
                      "flask_appbuilder.api",
                      "flask_appbuilder.models.sqla.interface",
                      "flask_babel",
                      "marshmallow",
                      "sqlalchemy.exc",
                      "superset.commands.exceptions",
                      "superset.commands.security.create",
                      "superset.commands.security.delete",
                      "superset.commands.security.exceptions",
                      "superset.commands.security.update",
                      "superset.connectors.sqla.models",
                      "superset.constants",
                      "superset.extensions",
                      "superset.row_level_security.schemas",
                      "superset.views.base",
                      "superset.views.base_api",
                      "superset.views.filters"
                    ],
                    "size_lines": 369,
                    "has_main": false,
                    "docstring": null
                  },
                  "schemas.py": {
                    "functions": [],
                    "classes": [
                      "RolesSchema",
                      "TablesSchema",
                      "RLSListSchema",
                      "RLSShowSchema",
                      "RLSPostSchema",
                      "RLSPutSchema"
                    ],
                    "imports": [
                      "marshmallow",
                      "marshmallow.validate",
                      "superset.connectors.sqla.models",
                      "superset.dashboards.schemas",
                      "superset.utils.core"
                    ],
                    "size_lines": 187,
                    "has_main": false,
                    "docstring": null
                  }
                },
                "async_events": {
                  "async_query_manager_factory.py": {
                    "functions": [
                      "__init__",
                      "init_app",
                      "instance"
                    ],
                    "classes": [
                      "AsyncQueryManagerFactory"
                    ],
                    "imports": [
                      "flask",
                      "superset.async_events.async_query_manager",
                      "superset.utils.class_utils"
                    ],
                    "size_lines": 36,
                    "has_main": false,
                    "docstring": null
                  },
                  "__init__.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 17,
                    "has_main": false,
                    "docstring": null
                  },
                  "api.py": {
                    "functions": [
                      "events"
                    ],
                    "classes": [
                      "AsyncEventsRestApi"
                    ],
                    "imports": [
                      "logging",
                      "flask",
                      "flask_appbuilder",
                      "flask_appbuilder.api",
                      "flask_appbuilder.security.decorators",
                      "superset.async_events.async_query_manager",
                      "superset.extensions",
                      "superset.views.base_api"
                    ],
                    "size_lines": 102,
                    "has_main": false,
                    "docstring": null
                  },
                  "async_query_manager.py": {
                    "functions": [
                      "build_job_metadata",
                      "parse_event",
                      "increment_id",
                      "get_cache_backend",
                      "__init__",
                      "init_app",
                      "register_request_handlers",
                      "parse_channel_id_from_request",
                      "init_job",
                      "submit_explore_json_job",
                      "submit_chart_data_job",
                      "read_events",
                      "update_job",
                      "validate_session"
                    ],
                    "classes": [
                      "CacheBackendNotInitialized",
                      "AsyncQueryTokenException",
                      "UnsupportedCacheBackendError",
                      "AsyncQueryJobException",
                      "AsyncQueryManager"
                    ],
                    "imports": [
                      "__future__",
                      "logging",
                      "uuid",
                      "typing",
                      "jwt",
                      "flask",
                      "flask_caching.backends.base",
                      "superset.async_events.cache_backend",
                      "superset.utils",
                      "superset.utils.core",
                      "superset.tasks.async_queries",
                      "superset",
                      "superset"
                    ],
                    "size_lines": 308,
                    "has_main": false,
                    "docstring": null
                  },
                  "cache_backend.py": {
                    "functions": [
                      "__init__",
                      "xadd",
                      "xrange",
                      "from_config",
                      "__init__",
                      "xadd",
                      "xrange",
                      "from_config"
                    ],
                    "classes": [
                      "RedisCacheBackend",
                      "RedisSentinelCacheBackend"
                    ],
                    "imports": [
                      "typing",
                      "redis",
                      "flask_caching.backends.rediscache",
                      "redis.sentinel"
                    ],
                    "size_lines": 215,
                    "has_main": false,
                    "docstring": null
                  }
                },
                "dashboards": {
                  "__init__.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 17,
                    "has_main": false,
                    "docstring": null
                  },
                  "api.py": {
                    "functions": [
                      "with_dashboard",
                      "wraps",
                      "__repr__",
                      "get",
                      "get_datasets",
                      "get_tabs",
                      "get_charts",
                      "post",
                      "put",
                      "put_filters",
                      "put_colors",
                      "delete",
                      "bulk_delete",
                      "export",
                      "cache_dashboard_screenshot",
                      "screenshot",
                      "thumbnail",
                      "favorite_status",
                      "add_favorite",
                      "remove_favorite",
                      "import_",
                      "get_embedded",
                      "set_embedded",
                      "delete_embedded",
                      "copy_dash",
                      "build_response"
                    ],
                    "classes": [
                      "DashboardRestApi"
                    ],
                    "imports": [
                      "functools",
                      "logging",
                      "datetime",
                      "io",
                      "typing",
                      "zipfile",
                      "flask",
                      "flask_appbuilder",
                      "flask_appbuilder.api",
                      "flask_appbuilder.models.sqla.interface",
                      "flask_babel",
                      "marshmallow",
                      "werkzeug.wrappers",
                      "werkzeug.wsgi",
                      "superset",
                      "superset.charts.schemas",
                      "superset.commands.dashboard.copy",
                      "superset.commands.dashboard.create",
                      "superset.commands.dashboard.delete",
                      "superset.commands.dashboard.exceptions",
                      "superset.commands.dashboard.export",
                      "superset.commands.dashboard.fave",
                      "superset.commands.dashboard.importers.dispatcher",
                      "superset.commands.dashboard.permalink.create",
                      "superset.commands.dashboard.unfave",
                      "superset.commands.dashboard.update",
                      "superset.commands.database.exceptions",
                      "superset.commands.exceptions",
                      "superset.commands.importers.exceptions",
                      "superset.commands.importers.v1.utils",
                      "superset.constants",
                      "superset.daos.dashboard",
                      "superset.dashboards.filters",
                      "superset.dashboards.permalink.types",
                      "superset.dashboards.schemas",
                      "superset.extensions",
                      "superset.models.dashboard",
                      "superset.models.embedded_dashboard",
                      "superset.security.guest_token",
                      "superset.tasks.thumbnails",
                      "superset.tasks.utils",
                      "superset.utils",
                      "superset.utils.core",
                      "superset.utils.pdf",
                      "superset.utils.screenshots",
                      "superset.utils.urls",
                      "superset.views.base_api",
                      "superset.views.error_handling",
                      "superset.views.filters"
                    ],
                    "size_lines": 1827,
                    "has_main": false,
                    "docstring": null
                  },
                  "schemas.py": {
                    "functions": [
                      "validate_json",
                      "validate_json_metadata",
                      "_deserialize",
                      "remove_show_native_filters",
                      "post_dump",
                      "post_dump",
                      "post_load"
                    ],
                    "classes": [
                      "SharedLabelsColorsField",
                      "DashboardJSONMetadataSchema",
                      "UserSchema",
                      "RolesSchema",
                      "TagSchema",
                      "DashboardGetResponseSchema",
                      "DatabaseSchema",
                      "DashboardDatasetSchema",
                      "TabSchema",
                      "TabsPayloadSchema",
                      "BaseDashboardSchema",
                      "DashboardPostSchema",
                      "DashboardCopySchema",
                      "DashboardPutSchema",
                      "DashboardNativeFiltersConfigUpdateSchema",
                      "DashboardColorsConfigUpdateSchema",
                      "DashboardScreenshotPostSchema",
                      "ChartFavStarResponseResult",
                      "GetFavStarIdsSchema",
                      "ImportV1DashboardSchema",
                      "EmbeddedDashboardConfigSchema",
                      "EmbeddedDashboardResponseSchema",
                      "DashboardCacheScreenshotResponseSchema",
                      "CacheScreenshotSchema"
                    ],
                    "imports": [
                      "re",
                      "typing",
                      "marshmallow",
                      "marshmallow.validate",
                      "superset",
                      "superset.tags.models",
                      "superset.utils"
                    ],
                    "size_lines": 524,
                    "has_main": false,
                    "docstring": null
                  },
                  "filters.py": {
                    "functions": [
                      "apply",
                      "apply",
                      "apply",
                      "apply",
                      "apply",
                      "apply"
                    ],
                    "classes": [
                      "DashboardTitleOrSlugFilter",
                      "DashboardCreatedByMeFilter",
                      "DashboardFavoriteFilter",
                      "DashboardTagNameFilter",
                      "DashboardTagIdFilter",
                      "DashboardAccessFilter",
                      "FilterRelatedRoles",
                      "DashboardCertifiedFilter",
                      "DashboardHasCreatedByFilter"
                    ],
                    "imports": [
                      "typing",
                      "flask",
                      "flask_appbuilder.security.sqla.models",
                      "flask_babel",
                      "sqlalchemy",
                      "sqlalchemy.orm.query",
                      "superset",
                      "superset.connectors.sqla.models",
                      "superset.models.core",
                      "superset.models.dashboard",
                      "superset.models.embedded_dashboard",
                      "superset.models.slice",
                      "superset.security.guest_token",
                      "superset.tags.filters",
                      "superset.utils.core",
                      "superset.utils.filters",
                      "superset.views.base",
                      "superset.views.base_api"
                    ],
                    "size_lines": 258,
                    "has_main": false,
                    "docstring": null
                  },
                  "permalink": {
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "types.py": {
                      "functions": [],
                      "classes": [
                        "DashboardPermalinkState",
                        "DashboardPermalinkValue"
                      ],
                      "imports": [
                        "typing"
                      ],
                      "size_lines": 30,
                      "has_main": false,
                      "docstring": null
                    },
                    "api.py": {
                      "functions": [
                        "post",
                        "get"
                      ],
                      "classes": [
                        "DashboardPermalinkRestApi"
                      ],
                      "imports": [
                        "logging",
                        "flask",
                        "flask_appbuilder.api",
                        "marshmallow",
                        "superset.commands.dashboard.exceptions",
                        "superset.commands.dashboard.permalink.create",
                        "superset.commands.dashboard.permalink.get",
                        "superset.constants",
                        "superset.dashboards.permalink.exceptions",
                        "superset.dashboards.permalink.schemas",
                        "superset.extensions",
                        "superset.key_value.exceptions",
                        "superset.views.base_api"
                      ],
                      "size_lines": 230,
                      "has_main": false,
                      "docstring": null
                    },
                    "schemas.py": {
                      "functions": [],
                      "classes": [
                        "DashboardPermalinkStateSchema",
                        "DashboardPermalinkSchema"
                      ],
                      "imports": [
                        "marshmallow"
                      ],
                      "size_lines": 64,
                      "has_main": false,
                      "docstring": null
                    },
                    "exceptions.py": {
                      "functions": [],
                      "classes": [
                        "DashboardPermalinkInvalidStateError",
                        "DashboardPermalinkCreateFailedError",
                        "DashboardPermalinkGetFailedError"
                      ],
                      "imports": [
                        "flask_babel",
                        "superset.commands.exceptions"
                      ],
                      "size_lines": 32,
                      "has_main": false,
                      "docstring": null
                    }
                  },
                  "filter_state": {
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "api.py": {
                      "functions": [
                        "get_create_command",
                        "get_update_command",
                        "get_get_command",
                        "get_delete_command",
                        "post",
                        "put",
                        "get",
                        "delete"
                      ],
                      "classes": [
                        "DashboardFilterStateRestApi"
                      ],
                      "imports": [
                        "logging",
                        "flask",
                        "flask_appbuilder.api",
                        "superset.commands.dashboard.filter_state.create",
                        "superset.commands.dashboard.filter_state.delete",
                        "superset.commands.dashboard.filter_state.get",
                        "superset.commands.dashboard.filter_state.update",
                        "superset.extensions",
                        "superset.temporary_cache.api"
                      ],
                      "size_lines": 317,
                      "has_main": false,
                      "docstring": null
                    }
                  }
                },
                "examples": {
                  "random_time_series.py": {
                    "functions": [
                      "load_random_time_series_data"
                    ],
                    "classes": [],
                    "imports": [
                      "logging",
                      "pandas",
                      "sqlalchemy",
                      "superset.utils.database",
                      "superset",
                      "superset.models.slice",
                      "superset.sql_parse",
                      "superset.utils.core",
                      "helpers"
                    ],
                    "size_lines": 101,
                    "has_main": false,
                    "docstring": null
                  },
                  "long_lat.py": {
                    "functions": [
                      "load_long_lat_data"
                    ],
                    "classes": [],
                    "imports": [
                      "datetime",
                      "logging",
                      "random",
                      "geohash",
                      "pandas",
                      "sqlalchemy",
                      "superset.utils.database",
                      "superset",
                      "superset.models.slice",
                      "superset.sql_parse",
                      "superset.utils.core",
                      "helpers"
                    ],
                    "size_lines": 128,
                    "has_main": false,
                    "docstring": null
                  },
                  "countries.py": {
                    "functions": [
                      "get"
                    ],
                    "classes": [],
                    "imports": [
                      "typing"
                    ],
                    "size_lines": 2508,
                    "has_main": false,
                    "docstring": "This module contains data related to countries and is used for geo mapping"
                  },
                  "css_templates.py": {
                    "functions": [
                      "load_css_templates"
                    ],
                    "classes": [],
                    "imports": [
                      "logging",
                      "textwrap",
                      "superset",
                      "superset.models.core"
                    ],
                    "size_lines": 102,
                    "has_main": false,
                    "docstring": null
                  },
                  "deck.py": {
                    "functions": [
                      "load_deck_dash"
                    ],
                    "classes": [],
                    "imports": [
                      "logging",
                      "superset",
                      "superset.models.dashboard",
                      "superset.models.slice",
                      "superset.utils",
                      "superset.utils.core",
                      "helpers"
                    ],
                    "size_lines": 548,
                    "has_main": false,
                    "docstring": null
                  },
                  "flights.py": {
                    "functions": [
                      "load_flights"
                    ],
                    "classes": [],
                    "imports": [
                      "logging",
                      "pandas",
                      "sqlalchemy",
                      "superset.utils.database",
                      "superset",
                      "superset.sql_parse",
                      "helpers"
                    ],
                    "size_lines": 75,
                    "has_main": false,
                    "docstring": null
                  },
                  "sf_population_polygons.py": {
                    "functions": [
                      "load_sf_population_polygons"
                    ],
                    "classes": [],
                    "imports": [
                      "logging",
                      "pandas",
                      "sqlalchemy",
                      "superset.utils.database",
                      "superset",
                      "superset.sql_parse",
                      "superset.utils",
                      "helpers"
                    ],
                    "size_lines": 72,
                    "has_main": false,
                    "docstring": null
                  },
                  "data_loading.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [
                      "bart_lines",
                      "big_data",
                      "birth_names",
                      "country_map",
                      "css_templates",
                      "deck",
                      "energy",
                      "flights",
                      "long_lat",
                      "misc_dashboard",
                      "multiformat_time_series",
                      "paris",
                      "random_time_series",
                      "sf_population_polygons",
                      "supported_charts_dashboard",
                      "tabbed_dashboard",
                      "utils",
                      "world_bank"
                    ],
                    "size_lines": 56,
                    "has_main": false,
                    "docstring": null
                  },
                  "big_data.py": {
                    "functions": [
                      "load_big_data"
                    ],
                    "classes": [],
                    "imports": [
                      "logging",
                      "random",
                      "string",
                      "sqlalchemy.sql.sqltypes",
                      "superset.utils.mock_data"
                    ],
                    "size_lines": 79,
                    "has_main": false,
                    "docstring": null
                  },
                  "misc_dashboard.py": {
                    "functions": [
                      "load_misc_dashboard"
                    ],
                    "classes": [],
                    "imports": [
                      "logging",
                      "textwrap",
                      "superset",
                      "superset.models.dashboard",
                      "superset.utils",
                      "helpers"
                    ],
                    "size_lines": 146,
                    "has_main": false,
                    "docstring": null
                  },
                  "__init__.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 17,
                    "has_main": false,
                    "docstring": null
                  },
                  "paris.py": {
                    "functions": [
                      "load_paris_iris_geojson"
                    ],
                    "classes": [],
                    "imports": [
                      "logging",
                      "pandas",
                      "sqlalchemy",
                      "superset.utils.database",
                      "superset",
                      "superset.sql_parse",
                      "superset.utils",
                      "helpers"
                    ],
                    "size_lines": 70,
                    "has_main": false,
                    "docstring": null
                  },
                  "world_bank.py": {
                    "functions": [
                      "load_world_bank_health_n_pop",
                      "create_slices"
                    ],
                    "classes": [],
                    "imports": [
                      "logging",
                      "os",
                      "pandas",
                      "sqlalchemy",
                      "sqlalchemy.sql",
                      "superset.utils.database",
                      "superset",
                      "superset.connectors.sqla.models",
                      "superset.examples.helpers",
                      "superset.models.dashboard",
                      "superset.models.slice",
                      "superset.sql_parse",
                      "superset.utils",
                      "superset.utils.core"
                    ],
                    "size_lines": 480,
                    "has_main": false,
                    "docstring": null
                  },
                  "energy.py": {
                    "functions": [
                      "load_energy"
                    ],
                    "classes": [],
                    "imports": [
                      "logging",
                      "textwrap",
                      "pandas",
                      "sqlalchemy",
                      "sqlalchemy.sql",
                      "superset.utils.database",
                      "superset",
                      "superset.connectors.sqla.models",
                      "superset.models.slice",
                      "superset.sql_parse",
                      "superset.utils.core",
                      "helpers"
                    ],
                    "size_lines": 150,
                    "has_main": false,
                    "docstring": null
                  },
                  "birth_names.py": {
                    "functions": [
                      "gen_filter",
                      "load_data",
                      "load_birth_names",
                      "_set_table_metadata",
                      "_add_table_metrics",
                      "create_slices",
                      "create_dashboard"
                    ],
                    "classes": [],
                    "imports": [
                      "logging",
                      "textwrap",
                      "typing",
                      "pandas",
                      "sqlalchemy",
                      "sqlalchemy.sql",
                      "superset",
                      "superset.connectors.sqla.models",
                      "superset.models.core",
                      "superset.models.dashboard",
                      "superset.models.slice",
                      "superset.sql_parse",
                      "superset.utils",
                      "superset.utils.core",
                      "utils.database",
                      "helpers"
                    ],
                    "size_lines": 870,
                    "has_main": false,
                    "docstring": null
                  },
                  "utils.py": {
                    "functions": [
                      "load_examples_from_configs",
                      "load_contents",
                      "load_configs_from_directory"
                    ],
                    "classes": [],
                    "imports": [
                      "logging",
                      "re",
                      "importlib.resources",
                      "pathlib",
                      "typing",
                      "yaml",
                      "superset.commands.exceptions",
                      "superset.commands.importers.v1.examples",
                      "superset.commands.importers.v1.utils"
                    ],
                    "size_lines": 105,
                    "has_main": false,
                    "docstring": null
                  },
                  "supported_charts_dashboard.py": {
                    "functions": [
                      "create_slices",
                      "load_supported_charts_dashboard"
                    ],
                    "classes": [],
                    "imports": [
                      "logging",
                      "textwrap",
                      "sqlalchemy",
                      "superset",
                      "superset.connectors.sqla.models",
                      "superset.models.dashboard",
                      "superset.models.slice",
                      "superset.sql_parse",
                      "superset.utils",
                      "superset.utils.core",
                      "utils.database",
                      "helpers"
                    ],
                    "size_lines": 1252,
                    "has_main": false,
                    "docstring": null
                  },
                  "country_map.py": {
                    "functions": [
                      "load_country_map_data"
                    ],
                    "classes": [],
                    "imports": [
                      "datetime",
                      "logging",
                      "pandas",
                      "sqlalchemy",
                      "sqlalchemy.sql",
                      "superset.utils.database",
                      "superset",
                      "superset.connectors.sqla.models",
                      "superset.models.slice",
                      "superset.sql_parse",
                      "superset.utils.core",
                      "helpers"
                    ],
                    "size_lines": 124,
                    "has_main": false,
                    "docstring": null
                  },
                  "multiformat_time_series.py": {
                    "functions": [
                      "load_multiformat_time_series"
                    ],
                    "classes": [],
                    "imports": [
                      "logging",
                      "typing",
                      "pandas",
                      "sqlalchemy",
                      "superset",
                      "superset.models.slice",
                      "superset.sql_parse",
                      "superset.utils.core",
                      "utils.database",
                      "helpers"
                    ],
                    "size_lines": 133,
                    "has_main": false,
                    "docstring": null
                  },
                  "bart_lines.py": {
                    "functions": [
                      "load_bart_lines"
                    ],
                    "classes": [],
                    "imports": [
                      "logging",
                      "pandas",
                      "polyline",
                      "sqlalchemy",
                      "superset",
                      "superset.sql_parse",
                      "superset.utils",
                      "utils.database",
                      "helpers"
                    ],
                    "size_lines": 72,
                    "has_main": false,
                    "docstring": null
                  },
                  "tabbed_dashboard.py": {
                    "functions": [
                      "load_tabbed_dashboard"
                    ],
                    "classes": [],
                    "imports": [
                      "logging",
                      "textwrap",
                      "superset",
                      "superset.models.dashboard",
                      "superset.utils",
                      "helpers"
                    ],
                    "size_lines": 562,
                    "has_main": false,
                    "docstring": null
                  },
                  "helpers.py": {
                    "functions": [
                      "get_table_connector_registry",
                      "get_examples_folder",
                      "update_slice_ids",
                      "merge_slice",
                      "get_slice_json",
                      "get_example_url"
                    ],
                    "classes": [],
                    "imports": [
                      "os",
                      "typing",
                      "superset",
                      "superset.connectors.sqla.models",
                      "superset.models.slice",
                      "superset.utils"
                    ],
                    "size_lines": 73,
                    "has_main": false,
                    "docstring": null
                  }
                },
                "temporary_cache": {
                  "__init__.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 17,
                    "has_main": false,
                    "docstring": null
                  },
                  "api.py": {
                    "functions": [
                      "add_apispec_components",
                      "post",
                      "put",
                      "get",
                      "delete",
                      "get_create_command",
                      "get_update_command",
                      "get_get_command",
                      "get_delete_command"
                    ],
                    "classes": [
                      "TemporaryCacheRestApi"
                    ],
                    "imports": [
                      "contextlib",
                      "logging",
                      "abc",
                      "typing",
                      "apispec",
                      "apispec.exceptions",
                      "flask",
                      "marshmallow",
                      "superset.commands.temporary_cache.exceptions",
                      "superset.commands.temporary_cache.parameters",
                      "superset.constants",
                      "superset.key_value.types",
                      "superset.temporary_cache.schemas",
                      "superset.views.base_api"
                    ],
                    "size_lines": 145,
                    "has_main": false,
                    "docstring": null
                  },
                  "schemas.py": {
                    "functions": [],
                    "classes": [
                      "TemporaryCachePostSchema",
                      "TemporaryCachePutSchema"
                    ],
                    "imports": [
                      "marshmallow",
                      "superset.utils.schema"
                    ],
                    "size_lines": 38,
                    "has_main": false,
                    "docstring": null
                  },
                  "utils.py": {
                    "functions": [
                      "cache_key"
                    ],
                    "classes": [],
                    "imports": [
                      "typing"
                    ],
                    "size_lines": 24,
                    "has_main": false,
                    "docstring": null
                  }
                },
                "annotation_layers": {
                  "__init__.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 17,
                    "has_main": false,
                    "docstring": null
                  },
                  "api.py": {
                    "functions": [
                      "delete",
                      "post",
                      "put",
                      "bulk_delete"
                    ],
                    "classes": [
                      "AnnotationLayerRestApi"
                    ],
                    "imports": [
                      "logging",
                      "typing",
                      "flask",
                      "flask_appbuilder.api",
                      "flask_appbuilder.models.sqla.interface",
                      "flask_babel",
                      "marshmallow",
                      "superset.annotation_layers.filters",
                      "superset.annotation_layers.schemas",
                      "superset.commands.annotation_layer.create",
                      "superset.commands.annotation_layer.delete",
                      "superset.commands.annotation_layer.exceptions",
                      "superset.commands.annotation_layer.update",
                      "superset.constants",
                      "superset.extensions",
                      "superset.models.annotations",
                      "superset.views.base_api"
                    ],
                    "size_lines": 355,
                    "has_main": false,
                    "docstring": null
                  },
                  "schemas.py": {
                    "functions": [],
                    "classes": [
                      "AnnotationLayerPostSchema",
                      "AnnotationLayerPutSchema"
                    ],
                    "imports": [
                      "marshmallow",
                      "marshmallow.validate"
                    ],
                    "size_lines": 63,
                    "has_main": false,
                    "docstring": null
                  },
                  "filters.py": {
                    "functions": [
                      "apply"
                    ],
                    "classes": [
                      "AnnotationLayerAllTextFilter"
                    ],
                    "imports": [
                      "typing",
                      "flask_babel",
                      "sqlalchemy",
                      "sqlalchemy.orm.query",
                      "superset.models.annotations",
                      "superset.views.base"
                    ],
                    "size_lines": 41,
                    "has_main": false,
                    "docstring": null
                  },
                  "annotations": {
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "api.py": {
                      "functions": [
                        "_apply_layered_relation_to_rison",
                        "get_list",
                        "get",
                        "post",
                        "put",
                        "delete",
                        "bulk_delete"
                      ],
                      "classes": [
                        "AnnotationRestApi"
                      ],
                      "imports": [
                        "logging",
                        "typing",
                        "flask",
                        "flask_appbuilder.api",
                        "flask_appbuilder.api.schemas",
                        "flask_appbuilder.models.sqla.interface",
                        "flask_babel",
                        "marshmallow",
                        "superset.annotation_layers.annotations.filters",
                        "superset.annotation_layers.annotations.schemas",
                        "superset.commands.annotation_layer.annotation.create",
                        "superset.commands.annotation_layer.annotation.delete",
                        "superset.commands.annotation_layer.annotation.exceptions",
                        "superset.commands.annotation_layer.annotation.update",
                        "superset.commands.annotation_layer.exceptions",
                        "superset.constants",
                        "superset.models.annotations",
                        "superset.views.base_api"
                      ],
                      "size_lines": 495,
                      "has_main": false,
                      "docstring": null
                    },
                    "schemas.py": {
                      "functions": [
                        "validate_json"
                      ],
                      "classes": [
                        "AnnotationPostSchema",
                        "AnnotationPutSchema"
                      ],
                      "imports": [
                        "typing",
                        "marshmallow",
                        "marshmallow.validate",
                        "superset.utils"
                      ],
                      "size_lines": 104,
                      "has_main": false,
                      "docstring": null
                    },
                    "filters.py": {
                      "functions": [
                        "apply"
                      ],
                      "classes": [
                        "AnnotationAllTextFilter"
                      ],
                      "imports": [
                        "typing",
                        "flask_babel",
                        "sqlalchemy",
                        "sqlalchemy.orm.query",
                        "superset.models.annotations",
                        "superset.views.base"
                      ],
                      "size_lines": 41,
                      "has_main": false,
                      "docstring": null
                    }
                  }
                },
                "commands": {
                  "__init__.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 17,
                    "has_main": false,
                    "docstring": null
                  },
                  "utils.py": {
                    "functions": [
                      "populate_owner_list",
                      "compute_owner_list",
                      "populate_roles",
                      "get_datasource_by_id",
                      "validate_tags",
                      "update_tags",
                      "update_chart_config_dataset"
                    ],
                    "classes": [],
                    "imports": [
                      "__future__",
                      "collections",
                      "typing",
                      "flask",
                      "flask_appbuilder.security.sqla.models",
                      "superset",
                      "superset.commands.exceptions",
                      "superset.daos.datasource",
                      "superset.daos.exceptions",
                      "superset.daos.tag",
                      "superset.tags.models",
                      "superset.utils",
                      "superset.utils.core",
                      "superset.connectors.sqla.models"
                    ],
                    "size_lines": 229,
                    "has_main": false,
                    "docstring": null
                  },
                  "exceptions.py": {
                    "functions": [
                      "__repr__",
                      "__init__",
                      "__init__",
                      "append",
                      "extend",
                      "get_list_classnames",
                      "normalized_messages",
                      "__init__",
                      "__init__",
                      "__init__",
                      "__init__",
                      "__init__",
                      "__init__",
                      "__init__"
                    ],
                    "classes": [
                      "CommandException",
                      "ObjectNotFoundError",
                      "CommandInvalidError",
                      "UpdateFailedError",
                      "CreateFailedError",
                      "DeleteFailedError",
                      "ForbiddenError",
                      "ImportFailedError",
                      "OwnersNotFoundValidationError",
                      "RolesNotFoundValidationError",
                      "DatasourceTypeInvalidError",
                      "DatasourceNotFoundValidationError",
                      "QueryNotFoundValidationError",
                      "TagNotFoundValidationError",
                      "TagForbiddenError"
                    ],
                    "imports": [
                      "typing",
                      "flask_babel",
                      "marshmallow",
                      "superset.exceptions"
                    ],
                    "size_lines": 153,
                    "has_main": false,
                    "docstring": null
                  },
                  "base.py": {
                    "functions": [
                      "run",
                      "validate",
                      "populate_owners",
                      "populate_owners",
                      "compute_owners"
                    ],
                    "classes": [
                      "BaseCommand",
                      "CreateMixin",
                      "UpdateMixin"
                    ],
                    "imports": [
                      "abc",
                      "typing",
                      "flask_appbuilder.security.sqla.models",
                      "superset.commands.utils"
                    ],
                    "size_lines": 87,
                    "has_main": false,
                    "docstring": null
                  },
                  "database": {
                    "update.py": {
                      "functions": [
                        "__init__",
                        "run",
                        "_handle_oauth2",
                        "_handle_ssh_tunnel",
                        "_update_catalog_attribute",
                        "validate"
                      ],
                      "classes": [
                        "UpdateDatabaseCommand"
                      ],
                      "imports": [
                        "__future__",
                        "logging",
                        "functools",
                        "typing",
                        "flask_appbuilder.models.sqla",
                        "superset",
                        "superset.commands.base",
                        "superset.commands.database.exceptions",
                        "superset.commands.database.ssh_tunnel.create",
                        "superset.commands.database.ssh_tunnel.delete",
                        "superset.commands.database.ssh_tunnel.exceptions",
                        "superset.commands.database.ssh_tunnel.update",
                        "superset.commands.database.sync_permissions",
                        "superset.daos.database",
                        "superset.databases.ssh_tunnel.models",
                        "superset.exceptions",
                        "superset.models.core",
                        "superset.utils",
                        "superset.utils.core",
                        "superset.utils.decorators",
                        "superset.connectors.sqla.models",
                        "superset.models.sql_lab"
                      ],
                      "size_lines": 205,
                      "has_main": false,
                      "docstring": null
                    },
                    "delete.py": {
                      "functions": [
                        "__init__",
                        "run",
                        "validate"
                      ],
                      "classes": [
                        "DeleteDatabaseCommand"
                      ],
                      "imports": [
                        "logging",
                        "functools",
                        "typing",
                        "flask_babel",
                        "superset.commands.base",
                        "superset.commands.database.exceptions",
                        "superset.daos.database",
                        "superset.daos.report",
                        "superset.models.core",
                        "superset.utils.decorators"
                      ],
                      "size_lines": 67,
                      "has_main": false,
                      "docstring": null
                    },
                    "validate_sql.py": {
                      "functions": [
                        "__init__",
                        "run",
                        "validate"
                      ],
                      "classes": [
                        "ValidateSQLCommand"
                      ],
                      "imports": [
                        "logging",
                        "re",
                        "typing",
                        "flask",
                        "flask_babel",
                        "superset.commands.base",
                        "superset.commands.database.exceptions",
                        "superset.daos.database",
                        "superset.errors",
                        "superset.models.core",
                        "superset.sql_validators",
                        "superset.sql_validators.base",
                        "superset.utils"
                      ],
                      "size_lines": 124,
                      "has_main": false,
                      "docstring": null
                    },
                    "create.py": {
                      "functions": [
                        "__init__",
                        "run",
                        "validate",
                        "_create_database"
                      ],
                      "classes": [
                        "CreateDatabaseCommand"
                      ],
                      "imports": [
                        "logging",
                        "functools",
                        "typing",
                        "flask",
                        "flask_appbuilder.models.sqla",
                        "marshmallow",
                        "superset",
                        "superset.commands.base",
                        "superset.commands.database.exceptions",
                        "superset.commands.database.ssh_tunnel.create",
                        "superset.commands.database.ssh_tunnel.exceptions",
                        "superset.commands.database.test_connection",
                        "superset.commands.database.utils",
                        "superset.daos.database",
                        "superset.databases.ssh_tunnel.models",
                        "superset.exceptions",
                        "superset.extensions",
                        "superset.models.core",
                        "superset.utils.decorators"
                      ],
                      "size_lines": 165,
                      "has_main": false,
                      "docstring": null
                    },
                    "oauth2.py": {
                      "functions": [
                        "__init__",
                        "run",
                        "validate"
                      ],
                      "classes": [
                        "OAuth2StoreTokenCommand"
                      ],
                      "imports": [
                        "datetime",
                        "functools",
                        "typing",
                        "superset.commands.base",
                        "superset.commands.database.exceptions",
                        "superset.daos.database",
                        "superset.databases.schemas",
                        "superset.exceptions",
                        "superset.models.core",
                        "superset.superset_typing",
                        "superset.utils.decorators",
                        "superset.utils.oauth2"
                      ],
                      "size_lines": 89,
                      "has_main": false,
                      "docstring": null
                    },
                    "test_connection.py": {
                      "functions": [
                        "get_log_connection_action",
                        "__init__",
                        "run",
                        "validate"
                      ],
                      "classes": [
                        "TestConnectionDatabaseCommand"
                      ],
                      "imports": [
                        "logging",
                        "typing",
                        "flask_babel",
                        "sqlalchemy.exc",
                        "superset",
                        "superset.commands.base",
                        "superset.commands.database.exceptions",
                        "superset.commands.database.ssh_tunnel.exceptions",
                        "superset.commands.database.utils",
                        "superset.daos.database",
                        "superset.databases.ssh_tunnel.models",
                        "superset.databases.utils",
                        "superset.errors",
                        "superset.exceptions",
                        "superset.extensions",
                        "superset.models.core",
                        "superset.utils.ssh_tunnel"
                      ],
                      "size_lines": 231,
                      "has_main": false,
                      "docstring": null
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "export.py": {
                      "functions": [
                        "parse_extra",
                        "_file_name",
                        "_file_content",
                        "_export"
                      ],
                      "classes": [
                        "ExportDatabasesCommand"
                      ],
                      "imports": [
                        "functools",
                        "logging",
                        "typing",
                        "collections.abc",
                        "yaml",
                        "superset.commands.database.exceptions",
                        "superset.daos.database",
                        "superset.commands.export.models",
                        "superset.models.core",
                        "superset.utils.dict_import_export",
                        "superset.utils.file",
                        "superset.utils.ssh_tunnel",
                        "superset.utils"
                      ],
                      "size_lines": 137,
                      "has_main": false,
                      "docstring": null
                    },
                    "validate.py": {
                      "functions": [
                        "__init__",
                        "run",
                        "validate"
                      ],
                      "classes": [
                        "ValidateDatabaseParametersCommand"
                      ],
                      "imports": [
                        "contextlib",
                        "typing",
                        "flask_babel",
                        "superset.commands.base",
                        "superset.commands.database.exceptions",
                        "superset.daos.database",
                        "superset.databases.utils",
                        "superset.db_engine_specs",
                        "superset.errors",
                        "superset.extensions",
                        "superset.models.core",
                        "superset.utils"
                      ],
                      "size_lines": 142,
                      "has_main": false,
                      "docstring": null
                    },
                    "utils.py": {
                      "functions": [
                        "ping",
                        "add_permissions",
                        "add_vm",
                        "add_perm",
                        "add_pvm"
                      ],
                      "classes": [],
                      "imports": [
                        "__future__",
                        "logging",
                        "sqlite3",
                        "contextlib",
                        "flask",
                        "flask_appbuilder.security.sqla.models",
                        "sqlalchemy.engine",
                        "sqlalchemy.orm",
                        "superset",
                        "superset.databases.ssh_tunnel.models",
                        "superset.db_engine_specs.base",
                        "superset.models.core",
                        "superset.security.manager",
                        "superset.utils.core"
                      ],
                      "size_lines": 160,
                      "has_main": false,
                      "docstring": null
                    },
                    "exceptions.py": {
                      "functions": [
                        "__init__",
                        "__init__",
                        "__init__",
                        "__init__",
                        "__init__"
                      ],
                      "classes": [
                        "DatabaseInvalidError",
                        "DatabaseExistsValidationError",
                        "DatabaseRequiredFieldValidationError",
                        "DatabaseExtraJSONValidationError",
                        "DatabaseExtraValidationError",
                        "DatabaseConnectionSyncPermissionsError",
                        "DatabaseNotFoundError",
                        "UserNotFoundInSessionError",
                        "DatabaseSchemaUploadNotAllowed",
                        "DatabaseUploadNotSupported",
                        "DatabaseUploadFailed",
                        "DatabaseUploadSaveMetadataFailed",
                        "DatabaseCreateFailedError",
                        "DatabaseUpdateFailedError",
                        "DatabaseConnectionFailedError",
                        "DatabaseDeleteDatasetsExistFailedError",
                        "DatabaseDeleteFailedError",
                        "DatabaseDeleteFailedReportsExistError",
                        "DatabaseTestConnectionFailedError",
                        "DatabaseSecurityUnsafeError",
                        "DatabaseTestConnectionDriverError",
                        "DatabaseTestConnectionUnexpectedError",
                        "DatabaseTablesUnexpectedError",
                        "NoValidatorConfigFoundError",
                        "NoValidatorFoundError",
                        "ValidatorSQLError",
                        "ValidatorSQLUnexpectedError",
                        "ValidatorSQL400Error",
                        "DatabaseImportError",
                        "InvalidEngineError",
                        "DatabaseOfflineError",
                        "InvalidParametersError",
                        "DatasetValidationError"
                      ],
                      "imports": [
                        "flask_babel",
                        "marshmallow.validate",
                        "superset.commands.exceptions",
                        "superset.exceptions"
                      ],
                      "size_lines": 227,
                      "has_main": false,
                      "docstring": null
                    },
                    "tables.py": {
                      "functions": [
                        "__init__",
                        "run",
                        "validate"
                      ],
                      "classes": [
                        "TablesDatabaseCommand"
                      ],
                      "imports": [
                        "__future__",
                        "logging",
                        "typing",
                        "sqlalchemy.orm",
                        "superset.commands.base",
                        "superset.commands.database.exceptions",
                        "superset.connectors.sqla.models",
                        "superset.daos.database",
                        "superset.exceptions",
                        "superset.extensions",
                        "superset.models.core",
                        "superset.utils.core"
                      ],
                      "size_lines": 148,
                      "has_main": false,
                      "docstring": null
                    },
                    "sync_permissions.py": {
                      "functions": [
                        "sync_database_permissions_task",
                        "__init__",
                        "db_connection",
                        "old_db_connection_name",
                        "validate",
                        "run",
                        "sync_database_permissions",
                        "_get_catalog_names",
                        "_get_schema_names",
                        "_refresh_schemas",
                        "_rename_database_in_permissions"
                      ],
                      "classes": [
                        "SyncPermissionsCommand"
                      ],
                      "imports": [
                        "__future__",
                        "logging",
                        "functools",
                        "typing",
                        "flask",
                        "superset",
                        "superset.commands.base",
                        "superset.commands.database.exceptions",
                        "superset.commands.database.utils",
                        "superset.daos.database",
                        "superset.daos.dataset",
                        "superset.databases.ssh_tunnel.models",
                        "superset.db_engine_specs.base",
                        "superset.exceptions",
                        "superset.extensions",
                        "superset.models.core",
                        "superset.utils.decorators"
                      ],
                      "size_lines": 345,
                      "has_main": false,
                      "docstring": null
                    },
                    "uploaders": {
                      "excel_reader.py": {
                        "functions": [
                          "__init__",
                          "file_to_dataframe",
                          "file_metadata"
                        ],
                        "classes": [
                          "ExcelReaderOptions",
                          "ExcelReader"
                        ],
                        "imports": [
                          "logging",
                          "typing",
                          "pandas",
                          "flask_babel",
                          "werkzeug.datastructures",
                          "superset.commands.database.exceptions",
                          "superset.commands.database.uploaders.base"
                        ],
                        "size_lines": 117,
                        "has_main": false,
                        "docstring": null
                      },
                      "csv_reader.py": {
                        "functions": [
                          "__init__",
                          "_read_csv",
                          "file_to_dataframe",
                          "file_metadata"
                        ],
                        "classes": [
                          "CSVReaderOptions",
                          "CSVReader"
                        ],
                        "imports": [
                          "logging",
                          "typing",
                          "pandas",
                          "flask_babel",
                          "werkzeug.datastructures",
                          "superset.commands.database.exceptions",
                          "superset.commands.database.uploaders.base"
                        ],
                        "size_lines": 144,
                        "has_main": false,
                        "docstring": null
                      },
                      "__init__.py": {
                        "functions": [],
                        "classes": [],
                        "imports": [],
                        "size_lines": 17,
                        "has_main": false,
                        "docstring": null
                      },
                      "columnar_reader.py": {
                        "functions": [
                          "__init__",
                          "_read_buffer_to_dataframe",
                          "_yield_files",
                          "file_to_dataframe",
                          "file_metadata"
                        ],
                        "classes": [
                          "ColumnarReaderOptions",
                          "ColumnarReader"
                        ],
                        "imports": [
                          "logging",
                          "collections.abc",
                          "io",
                          "pathlib",
                          "typing",
                          "zipfile",
                          "pandas",
                          "pyarrow.parquet",
                          "flask_babel",
                          "pyarrow.lib",
                          "werkzeug.datastructures",
                          "superset.commands.database.exceptions",
                          "superset.commands.database.uploaders.base"
                        ],
                        "size_lines": 135,
                        "has_main": false,
                        "docstring": null
                      },
                      "base.py": {
                        "functions": [
                          "__init__",
                          "file_to_dataframe",
                          "file_metadata",
                          "read",
                          "_dataframe_to_database",
                          "__init__",
                          "run",
                          "validate"
                        ],
                        "classes": [
                          "UploadFileType",
                          "ReaderOptions",
                          "FileMetadataItem",
                          "FileMetadata",
                          "BaseDataReader",
                          "UploadCommand"
                        ],
                        "imports": [
                          "logging",
                          "abc",
                          "functools",
                          "typing",
                          "pandas",
                          "flask_babel",
                          "werkzeug.datastructures",
                          "superset",
                          "superset.commands.base",
                          "superset.commands.database.exceptions",
                          "superset.connectors.sqla.models",
                          "superset.daos.database",
                          "superset.models.core",
                          "superset.sql_parse",
                          "superset.utils.backports",
                          "superset.utils.core",
                          "superset.utils.decorators",
                          "superset.views.database.validators"
                        ],
                        "size_lines": 192,
                        "has_main": false,
                        "docstring": null
                      }
                    },
                    "importers": {
                      "dispatcher.py": {
                        "functions": [
                          "__init__",
                          "run",
                          "validate"
                        ],
                        "classes": [
                          "ImportDatabasesCommand"
                        ],
                        "imports": [
                          "logging",
                          "typing",
                          "marshmallow.exceptions",
                          "superset.commands.base",
                          "superset.commands.database.importers",
                          "superset.commands.exceptions",
                          "superset.commands.importers.exceptions"
                        ],
                        "size_lines": 69,
                        "has_main": false,
                        "docstring": null
                      },
                      "__init__.py": {
                        "functions": [],
                        "classes": [],
                        "imports": [],
                        "size_lines": 17,
                        "has_main": false,
                        "docstring": null
                      },
                      "v1": {
                        "__init__.py": {
                          "functions": [
                            "_import"
                          ],
                          "classes": [
                            "ImportDatabasesCommand"
                          ],
                          "imports": [
                            "typing",
                            "marshmallow",
                            "sqlalchemy.orm",
                            "superset.commands.database.exceptions",
                            "superset.commands.database.importers.v1.utils",
                            "superset.commands.dataset.importers.v1.utils",
                            "superset.commands.importers.v1",
                            "superset.daos.database",
                            "superset.databases.schemas",
                            "superset.datasets.schemas"
                          ],
                          "size_lines": 62,
                          "has_main": false,
                          "docstring": null
                        },
                        "utils.py": {
                          "functions": [
                            "import_database"
                          ],
                          "classes": [],
                          "imports": [
                            "logging",
                            "typing",
                            "superset",
                            "superset.commands.database.utils",
                            "superset.commands.exceptions",
                            "superset.databases.ssh_tunnel.models",
                            "superset.databases.utils",
                            "superset.db_engine_specs.exceptions",
                            "superset.exceptions",
                            "superset.models.core",
                            "superset.security.analytics_db_safety",
                            "superset.utils"
                          ],
                          "size_lines": 90,
                          "has_main": false,
                          "docstring": null
                        }
                      }
                    },
                    "ssh_tunnel": {
                      "update.py": {
                        "functions": [
                          "__init__",
                          "run",
                          "validate"
                        ],
                        "classes": [
                          "UpdateSSHTunnelCommand"
                        ],
                        "imports": [
                          "logging",
                          "functools",
                          "typing",
                          "flask_appbuilder.models.sqla",
                          "superset.commands.base",
                          "superset.commands.database.ssh_tunnel.exceptions",
                          "superset.daos.database",
                          "superset.databases.ssh_tunnel.models",
                          "superset.databases.utils",
                          "superset.utils.decorators",
                          "superset.utils.ssh_tunnel"
                        ],
                        "size_lines": 83,
                        "has_main": false,
                        "docstring": null
                      },
                      "delete.py": {
                        "functions": [
                          "__init__",
                          "run",
                          "validate"
                        ],
                        "classes": [
                          "DeleteSSHTunnelCommand"
                        ],
                        "imports": [
                          "logging",
                          "functools",
                          "typing",
                          "superset",
                          "superset.commands.base",
                          "superset.commands.database.ssh_tunnel.exceptions",
                          "superset.daos.database",
                          "superset.databases.ssh_tunnel.models",
                          "superset.utils.decorators"
                        ],
                        "size_lines": 53,
                        "has_main": false,
                        "docstring": null
                      },
                      "create.py": {
                        "functions": [
                          "__init__",
                          "run",
                          "validate"
                        ],
                        "classes": [
                          "CreateSSHTunnelCommand"
                        ],
                        "imports": [
                          "logging",
                          "functools",
                          "typing",
                          "flask_appbuilder.models.sqla",
                          "marshmallow",
                          "superset.commands.base",
                          "superset.commands.database.ssh_tunnel.exceptions",
                          "superset.daos.database",
                          "superset.databases.utils",
                          "superset.extensions",
                          "superset.models.core",
                          "superset.utils.decorators",
                          "superset.utils.ssh_tunnel"
                        ],
                        "size_lines": 101,
                        "has_main": false,
                        "docstring": null
                      },
                      "__init__.py": {
                        "functions": [],
                        "classes": [],
                        "imports": [],
                        "size_lines": 17,
                        "has_main": false,
                        "docstring": null
                      },
                      "exceptions.py": {
                        "functions": [
                          "__init__"
                        ],
                        "classes": [
                          "SSHTunnelError",
                          "SSHTunnelDeleteFailedError",
                          "SSHTunnelNotFoundError",
                          "SSHTunnelInvalidError",
                          "SSHTunnelDatabasePortError",
                          "SSHTunnelUpdateFailedError",
                          "SSHTunnelCreateFailedError",
                          "SSHTunnelingNotEnabledError",
                          "SSHTunnelRequiredFieldValidationError",
                          "SSHTunnelMissingCredentials",
                          "SSHTunnelInvalidCredentials"
                        ],
                        "imports": [
                          "flask_babel",
                          "marshmallow",
                          "superset.commands.exceptions"
                        ],
                        "size_lines": 78,
                        "has_main": false,
                        "docstring": null
                      }
                    }
                  },
                  "distributed_lock": {
                    "delete.py": {
                      "functions": [
                        "validate",
                        "run"
                      ],
                      "classes": [
                        "DeleteDistributedLock"
                      ],
                      "imports": [
                        "logging",
                        "functools",
                        "flask",
                        "sqlalchemy.exc",
                        "superset.commands.distributed_lock.base",
                        "superset.daos.key_value",
                        "superset.exceptions",
                        "superset.key_value.exceptions",
                        "superset.utils.decorators"
                      ],
                      "size_lines": 50,
                      "has_main": false,
                      "docstring": null
                    },
                    "create.py": {
                      "functions": [
                        "validate",
                        "run"
                      ],
                      "classes": [
                        "CreateDistributedLock"
                      ],
                      "imports": [
                        "logging",
                        "datetime",
                        "functools",
                        "flask",
                        "sqlalchemy.exc",
                        "superset.commands.distributed_lock.base",
                        "superset.daos.key_value",
                        "superset.exceptions",
                        "superset.key_value.exceptions",
                        "superset.key_value.types",
                        "superset.utils.decorators"
                      ],
                      "size_lines": 65,
                      "has_main": false,
                      "docstring": null
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 1,
                      "has_main": false,
                      "docstring": null
                    },
                    "get.py": {
                      "functions": [
                        "validate",
                        "run"
                      ],
                      "classes": [
                        "GetDistributedLock"
                      ],
                      "imports": [
                        "__future__",
                        "logging",
                        "typing",
                        "flask",
                        "superset.commands.distributed_lock.base",
                        "superset.daos.key_value",
                        "superset.distributed_lock.types"
                      ],
                      "size_lines": 46,
                      "has_main": false,
                      "docstring": null
                    },
                    "base.py": {
                      "functions": [
                        "__init__",
                        "validate"
                      ],
                      "classes": [
                        "BaseDistributedLockCommand"
                      ],
                      "imports": [
                        "logging",
                        "uuid",
                        "typing",
                        "flask",
                        "superset.commands.base",
                        "superset.distributed_lock.utils",
                        "superset.key_value.types"
                      ],
                      "size_lines": 42,
                      "has_main": false,
                      "docstring": null
                    }
                  },
                  "importers": {
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "exceptions.py": {
                      "functions": [],
                      "classes": [
                        "IncorrectVersionError",
                        "NoValidFilesFoundError",
                        "IncorrectFormatError"
                      ],
                      "imports": [
                        "superset.commands.exceptions"
                      ],
                      "size_lines": 34,
                      "has_main": false,
                      "docstring": null
                    },
                    "v1": {
                      "__init__.py": {
                        "functions": [
                          "__init__",
                          "_import",
                          "_get_uuids",
                          "run",
                          "validate",
                          "_prevent_overwrite_existing_model"
                        ],
                        "classes": [
                          "ImportModelsCommand"
                        ],
                        "imports": [
                          "logging",
                          "typing",
                          "marshmallow",
                          "marshmallow.exceptions",
                          "sqlalchemy.orm",
                          "superset",
                          "superset.commands.base",
                          "superset.commands.exceptions",
                          "superset.commands.importers.v1.utils",
                          "superset.daos.base",
                          "superset.models.core",
                          "superset.utils.decorators"
                        ],
                        "size_lines": 138,
                        "has_main": false,
                        "docstring": null
                      },
                      "utils.py": {
                        "functions": [
                          "remove_root",
                          "load_yaml",
                          "load_metadata",
                          "validate_metadata_type",
                          "load_configs",
                          "is_valid_config",
                          "get_contents_from_bundle",
                          "get_resource_mappings_batched"
                        ],
                        "classes": [
                          "MetadataSchema"
                        ],
                        "imports": [
                          "logging",
                          "pathlib",
                          "typing",
                          "zipfile",
                          "yaml",
                          "marshmallow",
                          "marshmallow.exceptions",
                          "superset",
                          "superset.commands.importers.exceptions",
                          "superset.databases.ssh_tunnel.models",
                          "superset.models.core",
                          "superset.utils.core"
                        ],
                        "size_lines": 233,
                        "has_main": false,
                        "docstring": null
                      },
                      "assets.py": {
                        "functions": [
                          "__init__",
                          "_import",
                          "run",
                          "validate"
                        ],
                        "classes": [
                          "ImportAssetsCommand"
                        ],
                        "imports": [
                          "functools",
                          "typing",
                          "marshmallow",
                          "marshmallow.exceptions",
                          "sqlalchemy.sql",
                          "superset",
                          "superset.charts.schemas",
                          "superset.commands.base",
                          "superset.commands.chart.importers.v1.utils",
                          "superset.commands.dashboard.importers.v1.utils",
                          "superset.commands.database.importers.v1.utils",
                          "superset.commands.dataset.importers.v1.utils",
                          "superset.commands.exceptions",
                          "superset.commands.importers.v1.utils",
                          "superset.commands.query.importers.v1.utils",
                          "superset.commands.utils",
                          "superset.connectors.sqla.models",
                          "superset.dashboards.schemas",
                          "superset.databases.schemas",
                          "superset.datasets.schemas",
                          "superset.migrations.shared.native_filters",
                          "superset.models.core",
                          "superset.models.dashboard",
                          "superset.models.slice",
                          "superset.queries.saved_queries.schemas",
                          "superset.utils.decorators"
                        ],
                        "size_lines": 209,
                        "has_main": false,
                        "docstring": null
                      },
                      "examples.py": {
                        "functions": [
                          "__init__",
                          "run",
                          "_get_uuids",
                          "_import"
                        ],
                        "classes": [
                          "ImportExamplesCommand"
                        ],
                        "imports": [
                          "typing",
                          "marshmallow",
                          "sqlalchemy.exc",
                          "sqlalchemy.sql",
                          "superset",
                          "superset.charts.schemas",
                          "superset.commands.chart.importers.v1",
                          "superset.commands.chart.importers.v1.utils",
                          "superset.commands.dashboard.importers.v1",
                          "superset.commands.dashboard.importers.v1.utils",
                          "superset.commands.database.importers.v1",
                          "superset.commands.database.importers.v1.utils",
                          "superset.commands.dataset.importers.v1",
                          "superset.commands.dataset.importers.v1.utils",
                          "superset.commands.exceptions",
                          "superset.commands.importers.v1",
                          "superset.daos.base",
                          "superset.dashboards.schemas",
                          "superset.databases.schemas",
                          "superset.datasets.schemas",
                          "superset.models.dashboard",
                          "superset.utils.core",
                          "superset.utils.database",
                          "superset.utils.decorators"
                        ],
                        "size_lines": 198,
                        "has_main": false,
                        "docstring": null
                      }
                    }
                  },
                  "css": {
                    "delete.py": {
                      "functions": [
                        "__init__",
                        "run",
                        "validate"
                      ],
                      "classes": [
                        "DeleteCssTemplateCommand"
                      ],
                      "imports": [
                        "logging",
                        "functools",
                        "typing",
                        "superset.commands.base",
                        "superset.commands.css.exceptions",
                        "superset.daos.css",
                        "superset.models.core",
                        "superset.utils.decorators"
                      ],
                      "size_lines": 49,
                      "has_main": false,
                      "docstring": null
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "exceptions.py": {
                      "functions": [],
                      "classes": [
                        "CssTemplateDeleteFailedError",
                        "CssTemplateNotFoundError"
                      ],
                      "imports": [
                        "flask_babel",
                        "superset.commands.exceptions"
                      ],
                      "size_lines": 28,
                      "has_main": false,
                      "docstring": null
                    }
                  },
                  "security": {
                    "update.py": {
                      "functions": [
                        "__init__",
                        "run",
                        "validate"
                      ],
                      "classes": [
                        "UpdateRLSRuleCommand"
                      ],
                      "imports": [
                        "logging",
                        "typing",
                        "superset.commands.base",
                        "superset.commands.exceptions",
                        "superset.commands.security.exceptions",
                        "superset.commands.utils",
                        "superset.connectors.sqla.models",
                        "superset.daos.security",
                        "superset.extensions",
                        "superset.utils.decorators"
                      ],
                      "size_lines": 60,
                      "has_main": false,
                      "docstring": null
                    },
                    "delete.py": {
                      "functions": [
                        "__init__",
                        "run",
                        "validate"
                      ],
                      "classes": [
                        "DeleteRLSRuleCommand"
                      ],
                      "imports": [
                        "logging",
                        "functools",
                        "superset.commands.base",
                        "superset.commands.security.exceptions",
                        "superset.daos.security",
                        "superset.reports.models",
                        "superset.utils.decorators"
                      ],
                      "size_lines": 48,
                      "has_main": false,
                      "docstring": null
                    },
                    "create.py": {
                      "functions": [
                        "__init__",
                        "run",
                        "validate"
                      ],
                      "classes": [
                        "CreateRLSRuleCommand"
                      ],
                      "imports": [
                        "logging",
                        "typing",
                        "superset.commands.base",
                        "superset.commands.exceptions",
                        "superset.commands.utils",
                        "superset.connectors.sqla.models",
                        "superset.daos.security",
                        "superset.extensions",
                        "superset.utils.decorators"
                      ],
                      "size_lines": 53,
                      "has_main": false,
                      "docstring": null
                    },
                    "reset.py": {
                      "functions": [
                        "__init__",
                        "validate",
                        "run"
                      ],
                      "classes": [
                        "ResetSupersetCommand"
                      ],
                      "imports": [
                        "logging",
                        "typing",
                        "superset",
                        "superset.commands.base",
                        "superset.connectors.sqla.models",
                        "superset.key_value.models",
                        "superset.models.core",
                        "superset.models.dashboard",
                        "superset.models.slice"
                      ],
                      "size_lines": 95,
                      "has_main": false,
                      "docstring": null
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "exceptions.py": {
                      "functions": [],
                      "classes": [
                        "RLSRuleNotFoundError",
                        "RuleDeleteFailedError"
                      ],
                      "imports": [
                        "flask_babel",
                        "superset.commands.exceptions"
                      ],
                      "size_lines": 30,
                      "has_main": false,
                      "docstring": null
                    }
                  },
                  "dataset": {
                    "update.py": {
                      "functions": [
                        "__init__",
                        "run",
                        "validate",
                        "_validate_columns",
                        "_validate_metrics",
                        "_get_duplicates"
                      ],
                      "classes": [
                        "UpdateDatasetCommand"
                      ],
                      "imports": [
                        "logging",
                        "collections",
                        "functools",
                        "typing",
                        "flask_appbuilder.models.sqla",
                        "marshmallow",
                        "sqlalchemy.exc",
                        "superset",
                        "superset.commands.base",
                        "superset.commands.dataset.exceptions",
                        "superset.connectors.sqla.models",
                        "superset.daos.dataset",
                        "superset.exceptions",
                        "superset.sql_parse",
                        "superset.utils.decorators"
                      ],
                      "size_lines": 192,
                      "has_main": false,
                      "docstring": null
                    },
                    "delete.py": {
                      "functions": [
                        "__init__",
                        "run",
                        "validate"
                      ],
                      "classes": [
                        "DeleteDatasetCommand"
                      ],
                      "imports": [
                        "logging",
                        "functools",
                        "typing",
                        "superset",
                        "superset.commands.base",
                        "superset.commands.dataset.exceptions",
                        "superset.connectors.sqla.models",
                        "superset.daos.dataset",
                        "superset.exceptions",
                        "superset.utils.decorators"
                      ],
                      "size_lines": 58,
                      "has_main": false,
                      "docstring": null
                    },
                    "create.py": {
                      "functions": [
                        "__init__",
                        "run",
                        "validate"
                      ],
                      "classes": [
                        "CreateDatasetCommand"
                      ],
                      "imports": [
                        "logging",
                        "functools",
                        "typing",
                        "flask_appbuilder.models.sqla",
                        "marshmallow",
                        "superset.commands.base",
                        "superset.commands.dataset.exceptions",
                        "superset.daos.dataset",
                        "superset.exceptions",
                        "superset.extensions",
                        "superset.sql_parse",
                        "superset.utils.decorators"
                      ],
                      "size_lines": 105,
                      "has_main": false,
                      "docstring": null
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "export.py": {
                      "functions": [
                        "_file_name",
                        "_file_content",
                        "_export"
                      ],
                      "classes": [
                        "ExportDatasetsCommand"
                      ],
                      "imports": [
                        "logging",
                        "collections.abc",
                        "typing",
                        "yaml",
                        "superset.commands.export.models",
                        "superset.connectors.sqla.models",
                        "superset.daos.database",
                        "superset.commands.dataset.exceptions",
                        "superset.daos.dataset",
                        "superset.utils.dict_import_export",
                        "superset.utils.file",
                        "superset.utils.ssh_tunnel",
                        "superset.utils"
                      ],
                      "size_lines": 126,
                      "has_main": false,
                      "docstring": null
                    },
                    "duplicate.py": {
                      "functions": [
                        "__init__",
                        "run",
                        "validate"
                      ],
                      "classes": [
                        "DuplicateDatasetCommand"
                      ],
                      "imports": [
                        "logging",
                        "functools",
                        "typing",
                        "flask_appbuilder.models.sqla",
                        "flask_babel",
                        "marshmallow",
                        "superset.commands.base",
                        "superset.commands.dataset.exceptions",
                        "superset.commands.exceptions",
                        "superset.connectors.sqla.models",
                        "superset.daos.dataset",
                        "superset.errors",
                        "superset.exceptions",
                        "superset.extensions",
                        "superset.models.core",
                        "superset.sql_parse",
                        "superset.utils.decorators"
                      ],
                      "size_lines": 129,
                      "has_main": false,
                      "docstring": null
                    },
                    "refresh.py": {
                      "functions": [
                        "__init__",
                        "run",
                        "validate"
                      ],
                      "classes": [
                        "RefreshDatasetCommand"
                      ],
                      "imports": [
                        "logging",
                        "functools",
                        "typing",
                        "flask_appbuilder.models.sqla",
                        "superset",
                        "superset.commands.base",
                        "superset.commands.dataset.exceptions",
                        "superset.connectors.sqla.models",
                        "superset.daos.dataset",
                        "superset.exceptions",
                        "superset.utils.decorators"
                      ],
                      "size_lines": 60,
                      "has_main": false,
                      "docstring": null
                    },
                    "warm_up_cache.py": {
                      "functions": [
                        "__init__",
                        "run",
                        "validate"
                      ],
                      "classes": [
                        "DatasetWarmUpCacheCommand"
                      ],
                      "imports": [
                        "typing",
                        "superset.commands.base",
                        "superset.commands.chart.warm_up_cache",
                        "superset.commands.dataset.exceptions",
                        "superset.connectors.sqla.models",
                        "superset.extensions",
                        "superset.models.core",
                        "superset.models.slice"
                      ],
                      "size_lines": 71,
                      "has_main": false,
                      "docstring": null
                    },
                    "exceptions.py": {
                      "functions": [
                        "get_dataset_exist_error_msg",
                        "__init__",
                        "__init__",
                        "__init__",
                        "__init__",
                        "__init__",
                        "__init__",
                        "__init__",
                        "__init__",
                        "__init__",
                        "__init__",
                        "__init__",
                        "__init__"
                      ],
                      "classes": [
                        "DatabaseNotFoundValidationError",
                        "DatabaseChangeValidationError",
                        "DatasetExistsValidationError",
                        "DatasetColumnNotFoundValidationError",
                        "DatasetColumnsDuplicateValidationError",
                        "DatasetColumnsExistsValidationError",
                        "DatasetMetricsNotFoundValidationError",
                        "DatasetMetricsDuplicateValidationError",
                        "DatasetMetricsExistsValidationError",
                        "TableNotFoundValidationError",
                        "OwnersNotFoundValidationError",
                        "DatasetDataAccessIsNotAllowed",
                        "DatasetNotFoundError",
                        "DatasetInvalidError",
                        "DatasetCreateFailedError",
                        "DatasetUpdateFailedError",
                        "DatasetDeleteFailedError",
                        "DatasetRefreshFailedError",
                        "DatasetSamplesFailedError",
                        "DatasetForbiddenError",
                        "DatasetImportError",
                        "DatasetAccessDeniedError",
                        "DatasetDuplicateFailedError",
                        "DatasetForbiddenDataURI",
                        "WarmUpCacheTableNotFoundError"
                      ],
                      "imports": [
                        "flask_babel",
                        "marshmallow.validate",
                        "superset.commands.exceptions",
                        "superset.sql_parse"
                      ],
                      "size_lines": 205,
                      "has_main": false,
                      "docstring": null
                    },
                    "metrics": {
                      "delete.py": {
                        "functions": [
                          "__init__",
                          "run",
                          "validate"
                        ],
                        "classes": [
                          "DeleteDatasetMetricCommand"
                        ],
                        "imports": [
                          "logging",
                          "functools",
                          "typing",
                          "superset",
                          "superset.commands.base",
                          "superset.commands.dataset.metrics.exceptions",
                          "superset.connectors.sqla.models",
                          "superset.daos.dataset",
                          "superset.exceptions",
                          "superset.utils.decorators"
                        ],
                        "size_lines": 58,
                        "has_main": false,
                        "docstring": null
                      },
                      "__init__.py": {
                        "functions": [],
                        "classes": [],
                        "imports": [],
                        "size_lines": 17,
                        "has_main": false,
                        "docstring": null
                      },
                      "exceptions.py": {
                        "functions": [],
                        "classes": [
                          "DatasetMetricNotFoundError",
                          "DatasetMetricDeleteFailedError",
                          "DatasetMetricForbiddenError"
                        ],
                        "imports": [
                          "flask_babel",
                          "superset.commands.exceptions"
                        ],
                        "size_lines": 32,
                        "has_main": false,
                        "docstring": null
                      }
                    },
                    "importers": {
                      "dispatcher.py": {
                        "functions": [
                          "__init__",
                          "run",
                          "validate"
                        ],
                        "classes": [
                          "ImportDatasetsCommand"
                        ],
                        "imports": [
                          "logging",
                          "typing",
                          "marshmallow.exceptions",
                          "superset.commands.base",
                          "superset.commands.dataset.importers",
                          "superset.commands.exceptions",
                          "superset.commands.importers.exceptions"
                        ],
                        "size_lines": 74,
                        "has_main": false,
                        "docstring": null
                      },
                      "v0.py": {
                        "functions": [
                          "lookup_sqla_table",
                          "lookup_sqla_database",
                          "import_dataset",
                          "lookup_sqla_metric",
                          "import_metric",
                          "lookup_sqla_column",
                          "import_column",
                          "import_datasource",
                          "import_simple_obj",
                          "import_from_dict",
                          "__init__",
                          "run",
                          "validate"
                        ],
                        "classes": [
                          "ImportDatasetsCommand"
                        ],
                        "imports": [
                          "logging",
                          "typing",
                          "yaml",
                          "flask_appbuilder",
                          "sqlalchemy.orm.session",
                          "superset",
                          "superset.commands.base",
                          "superset.commands.database.exceptions",
                          "superset.commands.dataset.exceptions",
                          "superset.commands.importers.exceptions",
                          "superset.connectors.sqla.models",
                          "superset.models.core",
                          "superset.utils",
                          "superset.utils.decorators",
                          "superset.utils.dict_import_export"
                        ],
                        "size_lines": 290,
                        "has_main": false,
                        "docstring": null
                      },
                      "__init__.py": {
                        "functions": [],
                        "classes": [],
                        "imports": [],
                        "size_lines": 17,
                        "has_main": false,
                        "docstring": null
                      },
                      "v1": {
                        "__init__.py": {
                          "functions": [
                            "_import"
                          ],
                          "classes": [
                            "ImportDatasetsCommand"
                          ],
                          "imports": [
                            "typing",
                            "marshmallow",
                            "sqlalchemy.orm",
                            "superset.commands.database.importers.v1.utils",
                            "superset.commands.dataset.exceptions",
                            "superset.commands.dataset.importers.v1.utils",
                            "superset.commands.importers.v1",
                            "superset.daos.dataset",
                            "superset.databases.schemas",
                            "superset.datasets.schemas"
                          ],
                          "size_lines": 67,
                          "has_main": false,
                          "docstring": null
                        },
                        "utils.py": {
                          "functions": [
                            "get_sqla_type",
                            "get_dtype",
                            "validate_data_uri",
                            "import_dataset",
                            "load_data"
                          ],
                          "classes": [],
                          "imports": [
                            "gzip",
                            "logging",
                            "re",
                            "typing",
                            "urllib",
                            "pandas",
                            "flask",
                            "sqlalchemy",
                            "sqlalchemy.exc",
                            "sqlalchemy.sql.visitors",
                            "superset",
                            "superset.commands.dataset.exceptions",
                            "superset.commands.exceptions",
                            "superset.connectors.sqla.models",
                            "superset.models.core",
                            "superset.sql_parse",
                            "superset.utils",
                            "superset.utils.core"
                          ],
                          "size_lines": 245,
                          "has_main": false,
                          "docstring": null
                        }
                      }
                    },
                    "columns": {
                      "delete.py": {
                        "functions": [
                          "__init__",
                          "run",
                          "validate"
                        ],
                        "classes": [
                          "DeleteDatasetColumnCommand"
                        ],
                        "imports": [
                          "logging",
                          "functools",
                          "typing",
                          "superset",
                          "superset.commands.base",
                          "superset.commands.dataset.columns.exceptions",
                          "superset.connectors.sqla.models",
                          "superset.daos.dataset",
                          "superset.exceptions",
                          "superset.utils.decorators"
                        ],
                        "size_lines": 58,
                        "has_main": false,
                        "docstring": null
                      },
                      "__init__.py": {
                        "functions": [],
                        "classes": [],
                        "imports": [],
                        "size_lines": 17,
                        "has_main": false,
                        "docstring": null
                      },
                      "exceptions.py": {
                        "functions": [],
                        "classes": [
                          "DatasetColumnNotFoundError",
                          "DatasetColumnDeleteFailedError",
                          "DatasetColumnForbiddenError"
                        ],
                        "imports": [
                          "flask_babel",
                          "superset.commands.exceptions"
                        ],
                        "size_lines": 32,
                        "has_main": false,
                        "docstring": null
                      }
                    }
                  },
                  "chart": {
                    "update.py": {
                      "functions": [
                        "is_query_context_update",
                        "__init__",
                        "run",
                        "validate"
                      ],
                      "classes": [
                        "UpdateChartCommand"
                      ],
                      "imports": [
                        "logging",
                        "datetime",
                        "functools",
                        "typing",
                        "flask",
                        "flask_appbuilder.models.sqla",
                        "marshmallow",
                        "superset",
                        "superset.commands.base",
                        "superset.commands.chart.exceptions",
                        "superset.commands.utils",
                        "superset.daos.chart",
                        "superset.daos.dashboard",
                        "superset.exceptions",
                        "superset.models.slice",
                        "superset.tags.models",
                        "superset.utils.decorators"
                      ],
                      "size_lines": 133,
                      "has_main": false,
                      "docstring": null
                    },
                    "delete.py": {
                      "functions": [
                        "__init__",
                        "run",
                        "validate"
                      ],
                      "classes": [
                        "DeleteChartCommand"
                      ],
                      "imports": [
                        "logging",
                        "functools",
                        "typing",
                        "flask_babel",
                        "superset",
                        "superset.commands.base",
                        "superset.commands.chart.exceptions",
                        "superset.daos.chart",
                        "superset.daos.report",
                        "superset.exceptions",
                        "superset.models.slice",
                        "superset.utils.decorators"
                      ],
                      "size_lines": 71,
                      "has_main": false,
                      "docstring": null
                    },
                    "create.py": {
                      "functions": [
                        "__init__",
                        "run",
                        "validate"
                      ],
                      "classes": [
                        "CreateChartCommand"
                      ],
                      "imports": [
                        "logging",
                        "datetime",
                        "functools",
                        "typing",
                        "flask",
                        "flask_appbuilder.models.sqla",
                        "marshmallow",
                        "superset",
                        "superset.commands.base",
                        "superset.commands.chart.exceptions",
                        "superset.commands.utils",
                        "superset.daos.chart",
                        "superset.daos.dashboard",
                        "superset.utils.decorators"
                      ],
                      "size_lines": 83,
                      "has_main": false,
                      "docstring": null
                    },
                    "unfave.py": {
                      "functions": [
                        "__init__",
                        "run",
                        "validate"
                      ],
                      "classes": [
                        "DelFavoriteChartCommand"
                      ],
                      "imports": [
                        "logging",
                        "functools",
                        "requests_cache",
                        "superset",
                        "superset.commands.base",
                        "superset.commands.chart.exceptions",
                        "superset.daos.chart",
                        "superset.exceptions",
                        "superset.models.slice",
                        "superset.utils.decorators"
                      ],
                      "size_lines": 58,
                      "has_main": false,
                      "docstring": null
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "export.py": {
                      "functions": [
                        "_file_name",
                        "_file_content",
                        "_export"
                      ],
                      "classes": [
                        "ExportChartsCommand"
                      ],
                      "imports": [
                        "logging",
                        "collections.abc",
                        "typing",
                        "yaml",
                        "superset.commands.chart.exceptions",
                        "superset.daos.chart",
                        "superset.commands.dataset.export",
                        "superset.commands.export.models",
                        "superset.models.slice",
                        "superset.utils.dict_import_export",
                        "superset.utils.file",
                        "superset.utils"
                      ],
                      "size_lines": 88,
                      "has_main": false,
                      "docstring": null
                    },
                    "warm_up_cache.py": {
                      "functions": [
                        "__init__",
                        "run",
                        "validate"
                      ],
                      "classes": [
                        "ChartWarmUpCacheCommand"
                      ],
                      "imports": [
                        "typing",
                        "flask",
                        "superset.commands.base",
                        "superset.commands.chart.data.get_data_command",
                        "superset.commands.chart.exceptions",
                        "superset.extensions",
                        "superset.models.slice",
                        "superset.utils",
                        "superset.utils.core",
                        "superset.views.utils",
                        "superset.viz"
                      ],
                      "size_lines": 109,
                      "has_main": false,
                      "docstring": null
                    },
                    "exceptions.py": {
                      "functions": [
                        "__init__",
                        "__init__",
                        "__init__",
                        "__init__",
                        "__init__",
                        "__init__"
                      ],
                      "classes": [
                        "TimeRangeAmbiguousError",
                        "TimeRangeParseFailError",
                        "TimeDeltaAmbiguousError",
                        "DatabaseNotFoundValidationError",
                        "DashboardsNotFoundValidationError",
                        "DatasourceTypeUpdateRequiredValidationError",
                        "ChartNotFoundError",
                        "ChartInvalidError",
                        "ChartCreateFailedError",
                        "ChartUpdateFailedError",
                        "ChartDeleteFailedError",
                        "ChartDeleteFailedReportsExistError",
                        "ChartAccessDeniedError",
                        "ChartForbiddenError",
                        "ChartDataQueryFailedError",
                        "ChartDataCacheLoadError",
                        "ChartImportError",
                        "DashboardsForbiddenError",
                        "WarmUpCacheChartNotFoundError",
                        "ChartFaveError",
                        "ChartUnfaveError"
                      ],
                      "imports": [
                        "flask_babel",
                        "marshmallow.validate",
                        "superset.commands.exceptions"
                      ],
                      "size_lines": 165,
                      "has_main": false,
                      "docstring": null
                    },
                    "fave.py": {
                      "functions": [
                        "__init__",
                        "run",
                        "validate"
                      ],
                      "classes": [
                        "AddFavoriteChartCommand"
                      ],
                      "imports": [
                        "logging",
                        "functools",
                        "requests_cache",
                        "superset",
                        "superset.commands.base",
                        "superset.commands.chart.exceptions",
                        "superset.daos.chart",
                        "superset.exceptions",
                        "superset.models.slice",
                        "superset.utils.decorators"
                      ],
                      "size_lines": 58,
                      "has_main": false,
                      "docstring": null
                    },
                    "importers": {
                      "dispatcher.py": {
                        "functions": [
                          "__init__",
                          "run",
                          "validate"
                        ],
                        "classes": [
                          "ImportChartsCommand"
                        ],
                        "imports": [
                          "logging",
                          "typing",
                          "marshmallow.exceptions",
                          "superset.commands.base",
                          "superset.commands.chart.importers",
                          "superset.commands.exceptions",
                          "superset.commands.importers.exceptions"
                        ],
                        "size_lines": 71,
                        "has_main": false,
                        "docstring": null
                      },
                      "__init__.py": {
                        "functions": [],
                        "classes": [],
                        "imports": [],
                        "size_lines": 17,
                        "has_main": false,
                        "docstring": null
                      },
                      "v1": {
                        "__init__.py": {
                          "functions": [
                            "_import"
                          ],
                          "classes": [
                            "ImportChartsCommand"
                          ],
                          "imports": [
                            "typing",
                            "marshmallow",
                            "sqlalchemy.orm",
                            "superset.charts.schemas",
                            "superset.commands.chart.exceptions",
                            "superset.commands.chart.importers.v1.utils",
                            "superset.commands.database.importers.v1.utils",
                            "superset.commands.dataset.importers.v1.utils",
                            "superset.commands.importers.v1",
                            "superset.commands.utils",
                            "superset.connectors.sqla.models",
                            "superset.daos.chart",
                            "superset.databases.schemas",
                            "superset.datasets.schemas"
                          ],
                          "size_lines": 97,
                          "has_main": false,
                          "docstring": null
                        },
                        "utils.py": {
                          "functions": [
                            "filter_chart_annotations",
                            "import_chart",
                            "migrate_chart"
                          ],
                          "classes": [],
                          "imports": [
                            "copy",
                            "inspect",
                            "typing",
                            "superset",
                            "superset.commands.exceptions",
                            "superset.migrations.shared.migrate_viz",
                            "superset.migrations.shared.migrate_viz.base",
                            "superset.models.slice",
                            "superset.utils",
                            "superset.utils.core"
                          ],
                          "size_lines": 130,
                          "has_main": false,
                          "docstring": null
                        }
                      }
                    },
                    "data": {
                      "__init__.py": {
                        "functions": [],
                        "classes": [],
                        "imports": [],
                        "size_lines": 17,
                        "has_main": false,
                        "docstring": null
                      },
                      "create_async_job_command.py": {
                        "functions": [
                          "validate",
                          "run"
                        ],
                        "classes": [
                          "CreateAsyncChartDataJobCommand"
                        ],
                        "imports": [
                          "logging",
                          "typing",
                          "flask",
                          "superset.extensions"
                        ],
                        "size_lines": 39,
                        "has_main": false,
                        "docstring": null
                      },
                      "get_data_command.py": {
                        "functions": [
                          "__init__",
                          "run",
                          "validate"
                        ],
                        "classes": [
                          "ChartDataCommand"
                        ],
                        "imports": [
                          "logging",
                          "typing",
                          "flask_babel",
                          "superset.commands.base",
                          "superset.commands.chart.exceptions",
                          "superset.common.query_context",
                          "superset.exceptions"
                        ],
                        "size_lines": 68,
                        "has_main": false,
                        "docstring": null
                      }
                    }
                  },
                  "annotation_layer": {
                    "update.py": {
                      "functions": [
                        "__init__",
                        "run",
                        "validate"
                      ],
                      "classes": [
                        "UpdateAnnotationLayerCommand"
                      ],
                      "imports": [
                        "logging",
                        "functools",
                        "typing",
                        "flask_appbuilder.models.sqla",
                        "marshmallow",
                        "superset.commands.annotation_layer.exceptions",
                        "superset.commands.base",
                        "superset.daos.annotation_layer",
                        "superset.models.annotations",
                        "superset.utils.decorators"
                      ],
                      "size_lines": 65,
                      "has_main": false,
                      "docstring": null
                    },
                    "delete.py": {
                      "functions": [
                        "__init__",
                        "run",
                        "validate"
                      ],
                      "classes": [
                        "DeleteAnnotationLayerCommand"
                      ],
                      "imports": [
                        "logging",
                        "functools",
                        "typing",
                        "superset.commands.annotation_layer.exceptions",
                        "superset.commands.base",
                        "superset.daos.annotation_layer",
                        "superset.models.annotations",
                        "superset.utils.decorators"
                      ],
                      "size_lines": 52,
                      "has_main": false,
                      "docstring": null
                    },
                    "create.py": {
                      "functions": [
                        "__init__",
                        "run",
                        "validate"
                      ],
                      "classes": [
                        "CreateAnnotationLayerCommand"
                      ],
                      "imports": [
                        "logging",
                        "functools",
                        "typing",
                        "flask_appbuilder.models.sqla",
                        "marshmallow",
                        "superset.commands.annotation_layer.exceptions",
                        "superset.commands.base",
                        "superset.daos.annotation_layer",
                        "superset.utils.decorators"
                      ],
                      "size_lines": 55,
                      "has_main": false,
                      "docstring": null
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "exceptions.py": {
                      "functions": [
                        "__init__"
                      ],
                      "classes": [
                        "AnnotationLayerInvalidError",
                        "AnnotationLayerCreateFailedError",
                        "AnnotationLayerUpdateFailedError",
                        "AnnotationLayerNotFoundError",
                        "AnnotationLayerDeleteFailedError",
                        "AnnotationLayerDeleteIntegrityError",
                        "AnnotationLayerNameUniquenessValidationError"
                      ],
                      "imports": [
                        "flask_babel",
                        "superset.commands.exceptions"
                      ],
                      "size_lines": 59,
                      "has_main": false,
                      "docstring": null
                    },
                    "annotation": {
                      "update.py": {
                        "functions": [
                          "__init__",
                          "run",
                          "validate"
                        ],
                        "classes": [
                          "UpdateAnnotationCommand"
                        ],
                        "imports": [
                          "logging",
                          "datetime",
                          "functools",
                          "typing",
                          "flask_appbuilder.models.sqla",
                          "marshmallow",
                          "superset.commands.annotation_layer.annotation.exceptions",
                          "superset.commands.annotation_layer.exceptions",
                          "superset.commands.base",
                          "superset.daos.annotation_layer",
                          "superset.models.annotations",
                          "superset.utils.decorators"
                        ],
                        "size_lines": 88,
                        "has_main": false,
                        "docstring": null
                      },
                      "delete.py": {
                        "functions": [
                          "__init__",
                          "run",
                          "validate"
                        ],
                        "classes": [
                          "DeleteAnnotationCommand"
                        ],
                        "imports": [
                          "logging",
                          "functools",
                          "typing",
                          "superset.commands.annotation_layer.annotation.exceptions",
                          "superset.commands.base",
                          "superset.daos.annotation_layer",
                          "superset.models.annotations",
                          "superset.utils.decorators"
                        ],
                        "size_lines": 49,
                        "has_main": false,
                        "docstring": null
                      },
                      "create.py": {
                        "functions": [
                          "__init__",
                          "run",
                          "validate"
                        ],
                        "classes": [
                          "CreateAnnotationCommand"
                        ],
                        "imports": [
                          "logging",
                          "datetime",
                          "functools",
                          "typing",
                          "flask_appbuilder.models.sqla",
                          "marshmallow",
                          "superset.commands.annotation_layer.annotation.exceptions",
                          "superset.commands.annotation_layer.exceptions",
                          "superset.commands.base",
                          "superset.daos.annotation_layer",
                          "superset.utils.decorators"
                        ],
                        "size_lines": 73,
                        "has_main": false,
                        "docstring": null
                      },
                      "__init__.py": {
                        "functions": [],
                        "classes": [],
                        "imports": [],
                        "size_lines": 17,
                        "has_main": false,
                        "docstring": null
                      },
                      "exceptions.py": {
                        "functions": [
                          "__init__",
                          "__init__"
                        ],
                        "classes": [
                          "AnnotationDatesValidationError",
                          "AnnotationUniquenessValidationError",
                          "AnnotationNotFoundError",
                          "AnnotationInvalidError",
                          "AnnotationCreateFailedError",
                          "AnnotationUpdateFailedError",
                          "AnnotationDeleteFailedError"
                        ],
                        "imports": [
                          "flask_babel",
                          "marshmallow",
                          "superset.commands.exceptions"
                        ],
                        "size_lines": 69,
                        "has_main": false,
                        "docstring": null
                      }
                    }
                  },
                  "explore": {
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "parameters.py": {
                      "functions": [],
                      "classes": [
                        "CommandParameters"
                      ],
                      "imports": [
                        "dataclasses",
                        "typing"
                      ],
                      "size_lines": 28,
                      "has_main": false,
                      "docstring": null
                    },
                    "get.py": {
                      "functions": [
                        "__init__",
                        "run",
                        "validate"
                      ],
                      "classes": [
                        "GetExploreCommand"
                      ],
                      "imports": [
                        "contextlib",
                        "logging",
                        "abc",
                        "typing",
                        "flask",
                        "flask_babel",
                        "sqlalchemy.exc",
                        "superset.commands.base",
                        "superset.commands.explore.form_data.get",
                        "superset.commands.explore.form_data.parameters",
                        "superset.commands.explore.parameters",
                        "superset.commands.explore.permalink.get",
                        "superset.connectors.sqla.models",
                        "superset.daos.datasource",
                        "superset.daos.exceptions",
                        "superset.exceptions",
                        "superset.explore.exceptions",
                        "superset.explore.permalink.exceptions",
                        "superset.extensions",
                        "superset.utils",
                        "superset.views.utils"
                      ],
                      "size_lines": 181,
                      "has_main": false,
                      "docstring": null
                    },
                    "permalink": {
                      "create.py": {
                        "functions": [
                          "__init__",
                          "run",
                          "validate"
                        ],
                        "classes": [
                          "CreateExplorePermalinkCommand"
                        ],
                        "imports": [
                          "logging",
                          "functools",
                          "typing",
                          "sqlalchemy.exc",
                          "superset",
                          "superset.commands.explore.permalink.base",
                          "superset.daos.key_value",
                          "superset.explore.permalink.exceptions",
                          "superset.explore.utils",
                          "superset.key_value.exceptions",
                          "superset.key_value.utils",
                          "superset.utils.core",
                          "superset.utils.decorators"
                        ],
                        "size_lines": 78,
                        "has_main": false,
                        "docstring": null
                      },
                      "__init__.py": {
                        "functions": [],
                        "classes": [],
                        "imports": [],
                        "size_lines": 17,
                        "has_main": false,
                        "docstring": null
                      },
                      "get.py": {
                        "functions": [
                          "__init__",
                          "run",
                          "validate"
                        ],
                        "classes": [
                          "GetExplorePermalinkCommand"
                        ],
                        "imports": [
                          "logging",
                          "typing",
                          "sqlalchemy.exc",
                          "superset.commands.dataset.exceptions",
                          "superset.commands.explore.permalink.base",
                          "superset.daos.key_value",
                          "superset.explore.permalink.exceptions",
                          "superset.explore.permalink.types",
                          "superset.explore.utils",
                          "superset.key_value.exceptions",
                          "superset.key_value.utils",
                          "superset.utils.core"
                        ],
                        "size_lines": 73,
                        "has_main": false,
                        "docstring": null
                      },
                      "base.py": {
                        "functions": [
                          "salt"
                        ],
                        "classes": [
                          "BaseExplorePermalinkCommand"
                        ],
                        "imports": [
                          "abc",
                          "superset.commands.base",
                          "superset.explore.permalink.schemas",
                          "superset.key_value.shared_entries",
                          "superset.key_value.types"
                        ],
                        "size_lines": 36,
                        "has_main": false,
                        "docstring": null
                      }
                    },
                    "form_data": {
                      "update.py": {
                        "functions": [
                          "__init__",
                          "run",
                          "validate"
                        ],
                        "classes": [
                          "UpdateFormDataCommand"
                        ],
                        "imports": [
                          "logging",
                          "abc",
                          "typing",
                          "flask",
                          "sqlalchemy.exc",
                          "superset.commands.base",
                          "superset.commands.explore.form_data.parameters",
                          "superset.commands.explore.form_data.state",
                          "superset.commands.explore.form_data.utils",
                          "superset.commands.temporary_cache.exceptions",
                          "superset.extensions",
                          "superset.key_value.utils",
                          "superset.temporary_cache.utils",
                          "superset.utils.core",
                          "superset.utils.schema"
                        ],
                        "size_lines": 91,
                        "has_main": false,
                        "docstring": null
                      },
                      "delete.py": {
                        "functions": [
                          "__init__",
                          "run",
                          "validate"
                        ],
                        "classes": [
                          "DeleteFormDataCommand"
                        ],
                        "imports": [
                          "logging",
                          "abc",
                          "typing",
                          "flask",
                          "sqlalchemy.exc",
                          "superset.commands.base",
                          "superset.commands.explore.form_data.parameters",
                          "superset.commands.explore.form_data.state",
                          "superset.commands.explore.form_data.utils",
                          "superset.commands.temporary_cache.exceptions",
                          "superset.extensions",
                          "superset.temporary_cache.utils",
                          "superset.utils.core"
                        ],
                        "size_lines": 69,
                        "has_main": false,
                        "docstring": null
                      },
                      "create.py": {
                        "functions": [
                          "__init__",
                          "run",
                          "validate"
                        ],
                        "classes": [
                          "CreateFormDataCommand"
                        ],
                        "imports": [
                          "logging",
                          "flask",
                          "sqlalchemy.exc",
                          "superset.commands.base",
                          "superset.commands.explore.form_data.parameters",
                          "superset.commands.explore.form_data.state",
                          "superset.commands.explore.form_data.utils",
                          "superset.commands.temporary_cache.exceptions",
                          "superset.extensions",
                          "superset.key_value.utils",
                          "superset.temporary_cache.utils",
                          "superset.utils.core",
                          "superset.utils.schema"
                        ],
                        "size_lines": 73,
                        "has_main": false,
                        "docstring": null
                      },
                      "__init__.py": {
                        "functions": [],
                        "classes": [],
                        "imports": [],
                        "size_lines": 17,
                        "has_main": false,
                        "docstring": null
                      },
                      "utils.py": {
                        "functions": [
                          "check_access"
                        ],
                        "classes": [],
                        "imports": [
                          "typing",
                          "superset.commands.chart.exceptions",
                          "superset.commands.dataset.exceptions",
                          "superset.commands.temporary_cache.exceptions",
                          "superset.explore.utils",
                          "superset.utils.core"
                        ],
                        "size_lines": 46,
                        "has_main": false,
                        "docstring": null
                      },
                      "parameters.py": {
                        "functions": [],
                        "classes": [
                          "CommandParameters"
                        ],
                        "imports": [
                          "dataclasses",
                          "typing",
                          "superset.utils.core"
                        ],
                        "size_lines": 31,
                        "has_main": false,
                        "docstring": null
                      },
                      "get.py": {
                        "functions": [
                          "__init__",
                          "run",
                          "validate"
                        ],
                        "classes": [
                          "GetFormDataCommand"
                        ],
                        "imports": [
                          "logging",
                          "abc",
                          "typing",
                          "flask",
                          "sqlalchemy.exc",
                          "superset.commands.base",
                          "superset.commands.explore.form_data.parameters",
                          "superset.commands.explore.form_data.state",
                          "superset.commands.explore.form_data.utils",
                          "superset.commands.temporary_cache.exceptions",
                          "superset.extensions",
                          "superset.utils.core"
                        ],
                        "size_lines": 63,
                        "has_main": false,
                        "docstring": null
                      },
                      "state.py": {
                        "functions": [],
                        "classes": [
                          "TemporaryExploreState"
                        ],
                        "imports": [
                          "typing",
                          "superset.utils.core"
                        ],
                        "size_lines": 28,
                        "has_main": false,
                        "docstring": null
                      }
                    }
                  },
                  "dashboard": {
                    "update.py": {
                      "functions": [
                        "__init__",
                        "run",
                        "validate",
                        "process_tab_diff",
                        "run",
                        "__init__",
                        "run",
                        "find_deleted_tabs",
                        "find_reports_containing_tabs",
                        "send_deactivated_email_warning",
                        "deactivate_reports"
                      ],
                      "classes": [
                        "UpdateDashboardCommand",
                        "UpdateDashboardNativeFiltersCommand",
                        "UpdateDashboardColorsConfigCommand"
                      ],
                      "imports": [
                        "logging",
                        "textwrap",
                        "functools",
                        "typing",
                        "flask_appbuilder.models.sqla",
                        "marshmallow",
                        "superset",
                        "superset.commands.base",
                        "superset.commands.dashboard.exceptions",
                        "superset.commands.utils",
                        "superset.daos.dashboard",
                        "superset.daos.report",
                        "superset.exceptions",
                        "superset.models.dashboard",
                        "superset.reports.models",
                        "superset.tags.models",
                        "superset.utils",
                        "superset.utils.core",
                        "superset.utils.decorators"
                      ],
                      "size_lines": 232,
                      "has_main": false,
                      "docstring": null
                    },
                    "delete.py": {
                      "functions": [
                        "__init__",
                        "run",
                        "validate",
                        "__init__",
                        "run",
                        "validate"
                      ],
                      "classes": [
                        "DeleteEmbeddedDashboardCommand",
                        "DeleteDashboardCommand"
                      ],
                      "imports": [
                        "logging",
                        "functools",
                        "typing",
                        "flask_babel",
                        "superset",
                        "superset.commands.base",
                        "superset.commands.dashboard.exceptions",
                        "superset.daos.dashboard",
                        "superset.daos.report",
                        "superset.exceptions",
                        "superset.models.dashboard",
                        "superset.utils.decorators"
                      ],
                      "size_lines": 85,
                      "has_main": false,
                      "docstring": null
                    },
                    "create.py": {
                      "functions": [
                        "__init__",
                        "run",
                        "validate"
                      ],
                      "classes": [
                        "CreateDashboardCommand"
                      ],
                      "imports": [
                        "logging",
                        "functools",
                        "typing",
                        "flask_appbuilder.models.sqla",
                        "marshmallow",
                        "superset.commands.base",
                        "superset.commands.dashboard.exceptions",
                        "superset.commands.utils",
                        "superset.daos.dashboard",
                        "superset.utils.decorators"
                      ],
                      "size_lines": 71,
                      "has_main": false,
                      "docstring": null
                    },
                    "unfave.py": {
                      "functions": [
                        "__init__",
                        "run",
                        "validate"
                      ],
                      "classes": [
                        "DelFavoriteDashboardCommand"
                      ],
                      "imports": [
                        "logging",
                        "functools",
                        "requests_cache",
                        "superset.commands.base",
                        "superset.commands.dashboard.exceptions",
                        "superset.daos.dashboard",
                        "superset.models.dashboard",
                        "superset.utils.decorators"
                      ],
                      "size_lines": 47,
                      "has_main": false,
                      "docstring": null
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "copy.py": {
                      "functions": [
                        "__init__",
                        "run",
                        "validate"
                      ],
                      "classes": [
                        "CopyDashboardCommand"
                      ],
                      "imports": [
                        "logging",
                        "functools",
                        "typing",
                        "superset",
                        "superset.commands.base",
                        "superset.commands.dashboard.exceptions",
                        "superset.daos.dashboard",
                        "superset.models.dashboard",
                        "superset.utils.decorators"
                      ],
                      "size_lines": 54,
                      "has_main": false,
                      "docstring": null
                    },
                    "export.py": {
                      "functions": [
                        "suffix",
                        "get_default_position",
                        "append_charts",
                        "_file_name",
                        "_file_content",
                        "_export"
                      ],
                      "classes": [
                        "ExportDashboardsCommand"
                      ],
                      "imports": [
                        "logging",
                        "random",
                        "string",
                        "typing",
                        "collections.abc",
                        "yaml",
                        "superset.commands.chart.export",
                        "superset.commands.dashboard.exceptions",
                        "superset.commands.dashboard.importers.v1.utils",
                        "superset.daos.dashboard",
                        "superset.commands.export.models",
                        "superset.commands.dataset.export",
                        "superset.daos.dataset",
                        "superset.models.dashboard",
                        "superset.models.slice",
                        "superset.utils.dict_import_export",
                        "superset.utils.file",
                        "superset.utils"
                      ],
                      "size_lines": 206,
                      "has_main": false,
                      "docstring": null
                    },
                    "exceptions.py": {
                      "functions": [
                        "__init__",
                        "__init__"
                      ],
                      "classes": [
                        "DashboardSlugExistsValidationError",
                        "DashboardInvalidError",
                        "DashboardNotFoundError",
                        "DashboardCreateFailedError",
                        "DashboardUpdateFailedError",
                        "DashboardNativeFiltersUpdateFailedError",
                        "DashboardColorsConfigUpdateFailedError",
                        "DashboardDeleteFailedError",
                        "DashboardDeleteEmbeddedFailedError",
                        "DashboardDeleteFailedReportsExistError",
                        "DashboardForbiddenError",
                        "DashboardImportError",
                        "DashboardAccessDeniedError",
                        "DashboardCopyError",
                        "DashboardFaveError",
                        "DashboardUnfaveError"
                      ],
                      "imports": [
                        "typing",
                        "flask_babel",
                        "marshmallow.validate",
                        "superset.commands.exceptions"
                      ],
                      "size_lines": 103,
                      "has_main": false,
                      "docstring": null
                    },
                    "fave.py": {
                      "functions": [
                        "__init__",
                        "run",
                        "validate"
                      ],
                      "classes": [
                        "AddFavoriteDashboardCommand"
                      ],
                      "imports": [
                        "logging",
                        "functools",
                        "requests_cache",
                        "superset.commands.base",
                        "superset.commands.dashboard.exceptions",
                        "superset.daos.dashboard",
                        "superset.models.dashboard",
                        "superset.utils.decorators"
                      ],
                      "size_lines": 47,
                      "has_main": false,
                      "docstring": null
                    },
                    "permalink": {
                      "create.py": {
                        "functions": [
                          "__init__",
                          "run",
                          "validate"
                        ],
                        "classes": [
                          "CreateDashboardPermalinkCommand"
                        ],
                        "imports": [
                          "logging",
                          "functools",
                          "sqlalchemy.exc",
                          "superset",
                          "superset.commands.dashboard.permalink.base",
                          "superset.daos.dashboard",
                          "superset.daos.key_value",
                          "superset.dashboards.permalink.exceptions",
                          "superset.dashboards.permalink.types",
                          "superset.key_value.exceptions",
                          "superset.key_value.utils",
                          "superset.utils.core",
                          "superset.utils.decorators"
                        ],
                        "size_lines": 86,
                        "has_main": false,
                        "docstring": null
                      },
                      "__init__.py": {
                        "functions": [],
                        "classes": [],
                        "imports": [],
                        "size_lines": 17,
                        "has_main": false,
                        "docstring": null
                      },
                      "get.py": {
                        "functions": [
                          "__init__",
                          "run",
                          "validate"
                        ],
                        "classes": [
                          "GetDashboardPermalinkCommand"
                        ],
                        "imports": [
                          "logging",
                          "typing",
                          "sqlalchemy.exc",
                          "superset.commands.dashboard.exceptions",
                          "superset.commands.dashboard.permalink.base",
                          "superset.daos.dashboard",
                          "superset.daos.key_value",
                          "superset.dashboards.permalink.exceptions",
                          "superset.dashboards.permalink.types",
                          "superset.key_value.exceptions",
                          "superset.key_value.utils"
                        ],
                        "size_lines": 64,
                        "has_main": false,
                        "docstring": null
                      },
                      "base.py": {
                        "functions": [
                          "salt"
                        ],
                        "classes": [
                          "BaseDashboardPermalinkCommand"
                        ],
                        "imports": [
                          "abc",
                          "superset.commands.base",
                          "superset.dashboards.permalink.schemas",
                          "superset.key_value.shared_entries",
                          "superset.key_value.types"
                        ],
                        "size_lines": 36,
                        "has_main": false,
                        "docstring": null
                      }
                    },
                    "importers": {
                      "dispatcher.py": {
                        "functions": [
                          "__init__",
                          "run",
                          "validate"
                        ],
                        "classes": [
                          "ImportDashboardsCommand"
                        ],
                        "imports": [
                          "logging",
                          "typing",
                          "marshmallow.exceptions",
                          "superset.commands.base",
                          "superset.commands.dashboard.importers",
                          "superset.commands.exceptions",
                          "superset.commands.importers.exceptions"
                        ],
                        "size_lines": 74,
                        "has_main": false,
                        "docstring": null
                      },
                      "v0.py": {
                        "functions": [
                          "import_chart",
                          "import_dashboard",
                          "decode_dashboards",
                          "import_dashboards",
                          "alter_positions",
                          "alter_native_filters",
                          "__init__",
                          "run",
                          "validate"
                        ],
                        "classes": [
                          "ImportDashboardsCommand"
                        ],
                        "imports": [
                          "logging",
                          "time",
                          "copy",
                          "datetime",
                          "typing",
                          "flask_babel",
                          "sqlalchemy.orm",
                          "superset",
                          "superset.commands.base",
                          "superset.commands.dataset.importers.v0",
                          "superset.connectors.sqla.models",
                          "superset.exceptions",
                          "superset.migrations.shared.native_filters",
                          "superset.models.dashboard",
                          "superset.models.slice",
                          "superset.utils",
                          "superset.utils.dashboard_filter_scopes_converter",
                          "superset.utils.decorators"
                        ],
                        "size_lines": 348,
                        "has_main": false,
                        "docstring": null
                      },
                      "__init__.py": {
                        "functions": [],
                        "classes": [],
                        "imports": [],
                        "size_lines": 17,
                        "has_main": false,
                        "docstring": null
                      },
                      "v1": {
                        "__init__.py": {
                          "functions": [
                            "_import"
                          ],
                          "classes": [
                            "ImportDashboardsCommand"
                          ],
                          "imports": [
                            "typing",
                            "marshmallow",
                            "sqlalchemy.orm",
                            "sqlalchemy.sql",
                            "superset",
                            "superset.charts.schemas",
                            "superset.commands.chart.importers.v1.utils",
                            "superset.commands.dashboard.exceptions",
                            "superset.commands.dashboard.importers.v1.utils",
                            "superset.commands.database.importers.v1.utils",
                            "superset.commands.dataset.importers.v1.utils",
                            "superset.commands.importers.v1",
                            "superset.commands.utils",
                            "superset.daos.dashboard",
                            "superset.dashboards.schemas",
                            "superset.databases.schemas",
                            "superset.datasets.schemas",
                            "superset.migrations.shared.native_filters",
                            "superset.models.dashboard"
                          ],
                          "size_lines": 158,
                          "has_main": false,
                          "docstring": null
                        },
                        "utils.py": {
                          "functions": [
                            "find_chart_uuids",
                            "find_native_filter_datasets",
                            "build_uuid_to_id_map",
                            "update_id_refs",
                            "import_dashboard"
                          ],
                          "classes": [],
                          "imports": [
                            "logging",
                            "typing",
                            "superset",
                            "superset.commands.exceptions",
                            "superset.models.dashboard",
                            "superset.utils",
                            "superset.utils.core"
                          ],
                          "size_lines": 198,
                          "has_main": false,
                          "docstring": null
                        }
                      }
                    },
                    "filter_state": {
                      "update.py": {
                        "functions": [
                          "update"
                        ],
                        "classes": [
                          "UpdateFilterStateCommand"
                        ],
                        "imports": [
                          "typing",
                          "flask",
                          "superset.commands.dashboard.filter_state.utils",
                          "superset.commands.temporary_cache.entry",
                          "superset.commands.temporary_cache.exceptions",
                          "superset.commands.temporary_cache.parameters",
                          "superset.commands.temporary_cache.update",
                          "superset.extensions",
                          "superset.key_value.utils",
                          "superset.temporary_cache.utils",
                          "superset.utils.core"
                        ],
                        "size_lines": 56,
                        "has_main": false,
                        "docstring": null
                      },
                      "delete.py": {
                        "functions": [
                          "delete"
                        ],
                        "classes": [
                          "DeleteFilterStateCommand"
                        ],
                        "imports": [
                          "flask",
                          "superset.commands.dashboard.filter_state.utils",
                          "superset.commands.temporary_cache.delete",
                          "superset.commands.temporary_cache.entry",
                          "superset.commands.temporary_cache.exceptions",
                          "superset.commands.temporary_cache.parameters",
                          "superset.extensions",
                          "superset.temporary_cache.utils",
                          "superset.utils.core"
                        ],
                        "size_lines": 43,
                        "has_main": false,
                        "docstring": null
                      },
                      "create.py": {
                        "functions": [
                          "create"
                        ],
                        "classes": [
                          "CreateFilterStateCommand"
                        ],
                        "imports": [
                          "typing",
                          "flask",
                          "superset.commands.dashboard.filter_state.utils",
                          "superset.commands.temporary_cache.create",
                          "superset.commands.temporary_cache.entry",
                          "superset.commands.temporary_cache.parameters",
                          "superset.extensions",
                          "superset.key_value.utils",
                          "superset.temporary_cache.utils",
                          "superset.utils.core"
                        ],
                        "size_lines": 45,
                        "has_main": false,
                        "docstring": null
                      },
                      "__init__.py": {
                        "functions": [],
                        "classes": [],
                        "imports": [],
                        "size_lines": 17,
                        "has_main": false,
                        "docstring": null
                      },
                      "utils.py": {
                        "functions": [
                          "check_access"
                        ],
                        "classes": [],
                        "imports": [
                          "superset.commands.dashboard.exceptions",
                          "superset.commands.temporary_cache.exceptions",
                          "superset.daos.dashboard"
                        ],
                        "size_lines": 36,
                        "has_main": false,
                        "docstring": null
                      },
                      "get.py": {
                        "functions": [
                          "__init__",
                          "get"
                        ],
                        "classes": [
                          "GetFilterStateCommand"
                        ],
                        "imports": [
                          "typing",
                          "flask",
                          "superset.commands.dashboard.filter_state.utils",
                          "superset.commands.temporary_cache.get",
                          "superset.commands.temporary_cache.parameters",
                          "superset.extensions",
                          "superset.temporary_cache.utils"
                        ],
                        "size_lines": 42,
                        "has_main": false,
                        "docstring": null
                      }
                    },
                    "embedded": {
                      "__init__.py": {
                        "functions": [],
                        "classes": [],
                        "imports": [],
                        "size_lines": 17,
                        "has_main": false,
                        "docstring": null
                      },
                      "exceptions.py": {
                        "functions": [
                          "__init__"
                        ],
                        "classes": [
                          "EmbeddedDashboardNotFoundError",
                          "EmbeddedDashboardAccessDeniedError"
                        ],
                        "imports": [
                          "typing",
                          "flask_babel",
                          "superset.commands.exceptions"
                        ],
                        "size_lines": 35,
                        "has_main": false,
                        "docstring": null
                      }
                    }
                  },
                  "sql_lab": {
                    "query.py": {
                      "functions": [
                        "__init__",
                        "run",
                        "validate"
                      ],
                      "classes": [
                        "QueryPruneCommand"
                      ],
                      "imports": [
                        "logging",
                        "time",
                        "datetime",
                        "sqlalchemy",
                        "superset",
                        "superset.commands.base",
                        "superset.models.sql_lab"
                      ],
                      "size_lines": 112,
                      "has_main": false,
                      "docstring": null
                    },
                    "results.py": {
                      "functions": [
                        "__init__",
                        "validate",
                        "run"
                      ],
                      "classes": [
                        "SqlExecutionResultsCommand"
                      ],
                      "imports": [
                        "__future__",
                        "logging",
                        "typing",
                        "flask_babel",
                        "superset",
                        "superset.commands.base",
                        "superset.errors",
                        "superset.exceptions",
                        "superset.models.sql_lab",
                        "superset.sqllab.utils",
                        "superset.utils",
                        "superset.utils.dates",
                        "superset.views.utils"
                      ],
                      "size_lines": 131,
                      "has_main": false,
                      "docstring": null
                    },
                    "execute.py": {
                      "functions": [
                        "__init__",
                        "validate",
                        "run",
                        "_try_get_existing_query",
                        "is_query_handled",
                        "_run_sql_json_exec_from_scratch",
                        "_get_the_query_db",
                        "_validate_query_db",
                        "_save_new_query",
                        "_validate_access",
                        "_set_query_limit_if_required",
                        "_is_required_to_set_limit",
                        "_set_query_limit",
                        "validate",
                        "render"
                      ],
                      "classes": [
                        "ExecuteSqlCommand",
                        "CanAccessQueryValidator",
                        "SqlQueryRender"
                      ],
                      "imports": [
                        "__future__",
                        "logging",
                        "typing",
                        "flask_babel",
                        "sqlalchemy.exc",
                        "superset",
                        "superset.commands.base",
                        "superset.common.db_query_status",
                        "superset.errors",
                        "superset.exceptions",
                        "superset.models.core",
                        "superset.models.sql_lab",
                        "superset.sqllab.command_status",
                        "superset.sqllab.exceptions",
                        "superset.sqllab.execution_context_convertor",
                        "superset.sqllab.limiting_factor",
                        "superset.utils.decorators",
                        "superset.daos.database",
                        "superset.daos.query",
                        "superset.sqllab.sql_json_executer",
                        "superset.sqllab.sqllab_execution_context"
                      ],
                      "size_lines": 252,
                      "has_main": false,
                      "docstring": null
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "export.py": {
                      "functions": [
                        "__init__",
                        "validate",
                        "run"
                      ],
                      "classes": [
                        "SqlExportResult",
                        "SqlResultExportCommand"
                      ],
                      "imports": [
                        "__future__",
                        "logging",
                        "typing",
                        "pandas",
                        "flask_babel",
                        "superset",
                        "superset.commands.base",
                        "superset.errors",
                        "superset.exceptions",
                        "superset.models.sql_lab",
                        "superset.sql_parse",
                        "superset.sqllab.limiting_factor",
                        "superset.utils",
                        "superset.views.utils"
                      ],
                      "size_lines": 142,
                      "has_main": false,
                      "docstring": null
                    },
                    "estimate.py": {
                      "functions": [
                        "__init__",
                        "validate",
                        "run"
                      ],
                      "classes": [
                        "EstimateQueryCostType",
                        "QueryEstimationCommand"
                      ],
                      "imports": [
                        "__future__",
                        "logging",
                        "typing",
                        "flask_babel",
                        "superset",
                        "superset.commands.base",
                        "superset.errors",
                        "superset.exceptions",
                        "superset.jinja_context",
                        "superset.models.core",
                        "superset.utils"
                      ],
                      "size_lines": 120,
                      "has_main": false,
                      "docstring": null
                    },
                    "permalink": {
                      "create.py": {
                        "functions": [
                          "__init__",
                          "run",
                          "validate"
                        ],
                        "classes": [
                          "CreateSqlLabPermalinkCommand"
                        ],
                        "imports": [
                          "logging",
                          "typing",
                          "superset",
                          "superset.commands.sql_lab.permalink.base",
                          "superset.daos.key_value",
                          "superset.key_value.exceptions",
                          "superset.key_value.utils",
                          "superset.sqllab.permalink.exceptions"
                        ],
                        "size_lines": 50,
                        "has_main": false,
                        "docstring": null
                      },
                      "__init__.py": {
                        "functions": [],
                        "classes": [],
                        "imports": [],
                        "size_lines": 17,
                        "has_main": false,
                        "docstring": null
                      },
                      "get.py": {
                        "functions": [
                          "__init__",
                          "run",
                          "validate"
                        ],
                        "classes": [
                          "GetSqlLabPermalinkCommand"
                        ],
                        "imports": [
                          "logging",
                          "typing",
                          "superset",
                          "superset.commands.dataset.exceptions",
                          "superset.commands.sql_lab.permalink.base",
                          "superset.daos.key_value",
                          "superset.key_value.exceptions",
                          "superset.key_value.utils",
                          "superset.models",
                          "superset.sqllab.permalink.exceptions",
                          "superset.sqllab.permalink.types",
                          "superset.utils"
                        ],
                        "size_lines": 72,
                        "has_main": false,
                        "docstring": null
                      },
                      "base.py": {
                        "functions": [
                          "salt"
                        ],
                        "classes": [
                          "BaseSqlLabPermalinkCommand"
                        ],
                        "imports": [
                          "abc",
                          "superset.commands.base",
                          "superset.key_value.shared_entries",
                          "superset.key_value.types",
                          "superset.sqllab.permalink.schemas"
                        ],
                        "size_lines": 36,
                        "has_main": false,
                        "docstring": null
                      }
                    }
                  },
                  "logs": {
                    "prune.py": {
                      "functions": [
                        "__init__",
                        "run",
                        "validate"
                      ],
                      "classes": [
                        "LogPruneCommand"
                      ],
                      "imports": [
                        "logging",
                        "time",
                        "datetime",
                        "sqlalchemy",
                        "superset",
                        "superset.commands.base",
                        "superset.models.core"
                      ],
                      "size_lines": 112,
                      "has_main": false,
                      "docstring": null
                    }
                  },
                  "temporary_cache": {
                    "update.py": {
                      "functions": [
                        "__init__",
                        "run",
                        "validate",
                        "update"
                      ],
                      "classes": [
                        "UpdateTemporaryCacheCommand"
                      ],
                      "imports": [
                        "logging",
                        "abc",
                        "functools",
                        "typing",
                        "superset.commands.base",
                        "superset.commands.temporary_cache.exceptions",
                        "superset.commands.temporary_cache.parameters",
                        "superset.utils.decorators"
                      ],
                      "size_lines": 46,
                      "has_main": false,
                      "docstring": null
                    },
                    "delete.py": {
                      "functions": [
                        "__init__",
                        "run",
                        "validate",
                        "delete"
                      ],
                      "classes": [
                        "DeleteTemporaryCacheCommand"
                      ],
                      "imports": [
                        "logging",
                        "abc",
                        "functools",
                        "superset.commands.base",
                        "superset.commands.temporary_cache.exceptions",
                        "superset.commands.temporary_cache.parameters",
                        "superset.utils.decorators"
                      ],
                      "size_lines": 42,
                      "has_main": false,
                      "docstring": null
                    },
                    "create.py": {
                      "functions": [
                        "__init__",
                        "run",
                        "validate",
                        "create"
                      ],
                      "classes": [
                        "CreateTemporaryCacheCommand"
                      ],
                      "imports": [
                        "logging",
                        "abc",
                        "functools",
                        "superset.commands.base",
                        "superset.commands.temporary_cache.exceptions",
                        "superset.commands.temporary_cache.parameters",
                        "superset.utils.decorators"
                      ],
                      "size_lines": 42,
                      "has_main": false,
                      "docstring": null
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "entry.py": {
                      "functions": [],
                      "classes": [
                        "Entry"
                      ],
                      "imports": [
                        "typing"
                      ],
                      "size_lines": 23,
                      "has_main": false,
                      "docstring": null
                    },
                    "parameters.py": {
                      "functions": [],
                      "classes": [
                        "CommandParameters"
                      ],
                      "imports": [
                        "dataclasses",
                        "typing",
                        "superset.key_value.types"
                      ],
                      "size_lines": 30,
                      "has_main": false,
                      "docstring": null
                    },
                    "exceptions.py": {
                      "functions": [],
                      "classes": [
                        "TemporaryCacheCreateFailedError",
                        "TemporaryCacheGetFailedError",
                        "TemporaryCacheDeleteFailedError",
                        "TemporaryCacheUpdateFailedError",
                        "TemporaryCacheAccessDeniedError",
                        "TemporaryCacheResourceNotFoundError"
                      ],
                      "imports": [
                        "flask_babel",
                        "superset.commands.exceptions"
                      ],
                      "size_lines": 50,
                      "has_main": false,
                      "docstring": null
                    },
                    "get.py": {
                      "functions": [
                        "__init__",
                        "run",
                        "validate",
                        "get"
                      ],
                      "classes": [
                        "GetTemporaryCacheCommand"
                      ],
                      "imports": [
                        "logging",
                        "abc",
                        "typing",
                        "sqlalchemy.exc",
                        "superset.commands.base",
                        "superset.commands.temporary_cache.exceptions",
                        "superset.commands.temporary_cache.parameters"
                      ],
                      "size_lines": 46,
                      "has_main": false,
                      "docstring": null
                    }
                  },
                  "report": {
                    "update.py": {
                      "functions": [
                        "__init__",
                        "run",
                        "validate"
                      ],
                      "classes": [
                        "UpdateReportScheduleCommand"
                      ],
                      "imports": [
                        "logging",
                        "functools",
                        "typing",
                        "flask_appbuilder.models.sqla",
                        "marshmallow",
                        "superset",
                        "superset.commands.base",
                        "superset.commands.report.base",
                        "superset.commands.report.exceptions",
                        "superset.daos.database",
                        "superset.daos.report",
                        "superset.exceptions",
                        "superset.reports.models",
                        "superset.utils",
                        "superset.utils.decorators"
                      ],
                      "size_lines": 141,
                      "has_main": false,
                      "docstring": null
                    },
                    "delete.py": {
                      "functions": [
                        "__init__",
                        "run",
                        "validate"
                      ],
                      "classes": [
                        "DeleteReportScheduleCommand"
                      ],
                      "imports": [
                        "logging",
                        "functools",
                        "typing",
                        "superset",
                        "superset.commands.base",
                        "superset.commands.report.exceptions",
                        "superset.daos.report",
                        "superset.exceptions",
                        "superset.reports.models",
                        "superset.utils.decorators"
                      ],
                      "size_lines": 59,
                      "has_main": false,
                      "docstring": null
                    },
                    "create.py": {
                      "functions": [
                        "__init__",
                        "run",
                        "validate",
                        "_validate_report_extra"
                      ],
                      "classes": [
                        "CreateReportScheduleCommand"
                      ],
                      "imports": [
                        "logging",
                        "functools",
                        "typing",
                        "flask_babel",
                        "marshmallow",
                        "superset.commands.base",
                        "superset.commands.report.base",
                        "superset.commands.report.exceptions",
                        "superset.daos.database",
                        "superset.daos.report",
                        "superset.reports.models",
                        "superset.reports.types",
                        "superset.utils",
                        "superset.utils.decorators"
                      ],
                      "size_lines": 164,
                      "has_main": false,
                      "docstring": null
                    },
                    "execute.py": {
                      "functions": [
                        "__init__",
                        "update_report_schedule_and_log",
                        "update_report_schedule",
                        "update_report_schedule_slack_v2",
                        "create_log",
                        "_get_url",
                        "get_dashboard_urls",
                        "_get_tab_url",
                        "_get_tabs_urls",
                        "_get_screenshots",
                        "_get_pdf",
                        "_get_csv_data",
                        "_get_embedded_data",
                        "_update_query_context",
                        "_get_log_data",
                        "_get_notification_content",
                        "_send",
                        "send",
                        "send_error",
                        "is_in_grace_period",
                        "is_in_error_grace_period",
                        "is_on_working_timeout",
                        "next",
                        "next",
                        "next",
                        "next",
                        "__init__",
                        "run",
                        "__init__",
                        "run",
                        "validate"
                      ],
                      "classes": [
                        "BaseReportState",
                        "ReportNotTriggeredErrorState",
                        "ReportWorkingState",
                        "ReportSuccessState",
                        "ReportScheduleStateMachine",
                        "AsyncExecuteReportScheduleCommand"
                      ],
                      "imports": [
                        "logging",
                        "datetime",
                        "typing",
                        "uuid",
                        "pandas",
                        "celery.exceptions",
                        "superset",
                        "superset.commands.base",
                        "superset.commands.dashboard.permalink.create",
                        "superset.commands.exceptions",
                        "superset.commands.report.alert",
                        "superset.commands.report.exceptions",
                        "superset.common.chart_data",
                        "superset.daos.report",
                        "superset.dashboards.permalink.types",
                        "superset.errors",
                        "superset.exceptions",
                        "superset.extensions",
                        "superset.reports.models",
                        "superset.reports.notifications",
                        "superset.reports.notifications.base",
                        "superset.reports.notifications.exceptions",
                        "superset.tasks.utils",
                        "superset.utils",
                        "superset.utils.core",
                        "superset.utils.csv",
                        "superset.utils.decorators",
                        "superset.utils.pdf",
                        "superset.utils.screenshots",
                        "superset.utils.slack",
                        "superset.utils.urls"
                      ],
                      "size_lines": 914,
                      "has_main": false,
                      "docstring": null
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "log_prune.py": {
                      "functions": [
                        "run",
                        "validate"
                      ],
                      "classes": [
                        "AsyncPruneReportScheduleLogCommand"
                      ],
                      "imports": [
                        "logging",
                        "datetime",
                        "sqlalchemy.exc",
                        "superset",
                        "superset.commands.base",
                        "superset.commands.report.exceptions",
                        "superset.daos.report",
                        "superset.reports.models",
                        "superset.utils.decorators"
                      ],
                      "size_lines": 64,
                      "has_main": false,
                      "docstring": null
                    },
                    "exceptions.py": {
                      "functions": [
                        "__init__",
                        "__init__",
                        "__init__",
                        "__init__",
                        "__init__",
                        "__init__",
                        "__init__",
                        "__init__",
                        "__init__",
                        "__init__",
                        "__init__"
                      ],
                      "classes": [
                        "DatabaseNotFoundValidationError",
                        "DashboardNotFoundValidationError",
                        "ChartNotFoundValidationError",
                        "ReportScheduleAlertRequiredDatabaseValidationError",
                        "ReportScheduleRequiredTypeValidationError",
                        "ReportScheduleOnlyChartOrDashboardError",
                        "ReportScheduleEitherChartOrDashboardError",
                        "ReportScheduleFrequencyNotAllowed",
                        "ChartNotSavedValidationError",
                        "DashboardNotSavedValidationError",
                        "ReportScheduleInvalidError",
                        "ReportScheduleCreateFailedError",
                        "ReportScheduleUpdateFailedError",
                        "ReportScheduleNotFoundError",
                        "ReportScheduleDeleteFailedError",
                        "PruneReportScheduleLogFailedError",
                        "ReportScheduleScreenshotFailedError",
                        "ReportSchedulePdfFailedError",
                        "ReportScheduleCsvFailedError",
                        "ReportScheduleDataFrameFailedError",
                        "ReportScheduleExecuteUnexpectedError",
                        "ReportSchedulePreviousWorkingError",
                        "ReportScheduleWorkingTimeoutError",
                        "ReportScheduleNameUniquenessValidationError",
                        "ReportScheduleCreationMethodUniquenessValidationError",
                        "AlertQueryMultipleRowsError",
                        "AlertValidatorConfigError",
                        "AlertQueryMultipleColumnsError",
                        "AlertQueryInvalidTypeError",
                        "AlertQueryError",
                        "AlertQueryTimeout",
                        "ReportScheduleScreenshotTimeout",
                        "ReportScheduleCsvTimeout",
                        "ReportScheduleDataFrameTimeout",
                        "ReportScheduleAlertGracePeriodError",
                        "ReportScheduleAlertEndGracePeriodError",
                        "ReportScheduleNotificationError",
                        "ReportScheduleStateNotFoundError",
                        "ReportScheduleSystemErrorsException",
                        "ReportScheduleClientErrorsException",
                        "ReportScheduleUnexpectedError",
                        "ReportScheduleForbiddenError",
                        "ReportSchedulePruneLogError"
                      ],
                      "imports": [
                        "math",
                        "flask_babel",
                        "superset.commands.exceptions",
                        "superset.exceptions",
                        "superset.reports.models"
                      ],
                      "size_lines": 312,
                      "has_main": false,
                      "docstring": null
                    },
                    "base.py": {
                      "functions": [
                        "run",
                        "validate",
                        "validate_chart_dashboard",
                        "validate_report_frequency"
                      ],
                      "classes": [
                        "BaseReportScheduleCommand"
                      ],
                      "imports": [
                        "logging",
                        "typing",
                        "croniter",
                        "flask",
                        "marshmallow",
                        "superset.commands.base",
                        "superset.commands.report.exceptions",
                        "superset.daos.chart",
                        "superset.daos.dashboard",
                        "superset.reports.models"
                      ],
                      "size_lines": 126,
                      "has_main": false,
                      "docstring": null
                    },
                    "alert.py": {
                      "functions": [
                        "__init__",
                        "run",
                        "_validate_not_null",
                        "_validate_result",
                        "_validate_operator",
                        "_is_validator_not_null",
                        "_is_validator_operator",
                        "_get_alert_metadata_from_object",
                        "_execute_query",
                        "validate"
                      ],
                      "classes": [
                        "AlertCommand"
                      ],
                      "imports": [
                        "__future__",
                        "logging",
                        "operator",
                        "timeit",
                        "typing",
                        "uuid",
                        "numpy",
                        "pandas",
                        "celery.exceptions",
                        "flask_babel",
                        "superset",
                        "superset.commands.base",
                        "superset.commands.report.exceptions",
                        "superset.reports.models",
                        "superset.tasks.utils",
                        "superset.utils",
                        "superset.utils.core",
                        "superset.utils.decorators",
                        "superset.utils.retries"
                      ],
                      "size_lines": 221,
                      "has_main": false,
                      "docstring": null
                    }
                  },
                  "export": {
                    "models.py": {
                      "functions": [
                        "__init__",
                        "_file_name",
                        "_file_content",
                        "_export",
                        "run",
                        "validate"
                      ],
                      "classes": [
                        "ExportModelsCommand"
                      ],
                      "imports": [
                        "collections.abc",
                        "datetime",
                        "typing",
                        "yaml",
                        "flask_appbuilder",
                        "superset.commands.base",
                        "superset.commands.exceptions",
                        "superset.daos.base",
                        "superset.utils.dict_import_export"
                      ],
                      "size_lines": 79,
                      "has_main": false,
                      "docstring": null
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "assets.py": {
                      "functions": [
                        "run",
                        "validate"
                      ],
                      "classes": [
                        "ExportAssetsCommand"
                      ],
                      "imports": [
                        "collections.abc",
                        "datetime",
                        "typing",
                        "yaml",
                        "superset.commands.base",
                        "superset.commands.chart.export",
                        "superset.commands.dashboard.export",
                        "superset.commands.database.export",
                        "superset.commands.dataset.export",
                        "superset.commands.query.export",
                        "superset.utils.dict_import_export"
                      ],
                      "size_lines": 65,
                      "has_main": false,
                      "docstring": null
                    }
                  },
                  "query": {
                    "delete.py": {
                      "functions": [
                        "__init__",
                        "run",
                        "validate"
                      ],
                      "classes": [
                        "DeleteSavedQueryCommand"
                      ],
                      "imports": [
                        "logging",
                        "functools",
                        "typing",
                        "superset.commands.base",
                        "superset.commands.query.exceptions",
                        "superset.daos.query",
                        "superset.models.dashboard",
                        "superset.utils.decorators"
                      ],
                      "size_lines": 49,
                      "has_main": false,
                      "docstring": null
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "export.py": {
                      "functions": [
                        "_file_name",
                        "_file_content",
                        "_export"
                      ],
                      "classes": [
                        "ExportSavedQueriesCommand"
                      ],
                      "imports": [
                        "logging",
                        "collections.abc",
                        "typing",
                        "yaml",
                        "werkzeug.utils",
                        "superset.commands.export.models",
                        "superset.models.sql_lab",
                        "superset.commands.query.exceptions",
                        "superset.daos.query",
                        "superset.utils.dict_import_export",
                        "superset.utils"
                      ],
                      "size_lines": 100,
                      "has_main": false,
                      "docstring": null
                    },
                    "exceptions.py": {
                      "functions": [],
                      "classes": [
                        "SavedQueryDeleteFailedError",
                        "SavedQueryNotFoundError",
                        "SavedQueryImportError",
                        "SavedQueryInvalidError"
                      ],
                      "imports": [
                        "flask_babel",
                        "superset.commands.exceptions"
                      ],
                      "size_lines": 41,
                      "has_main": false,
                      "docstring": null
                    },
                    "importers": {
                      "dispatcher.py": {
                        "functions": [
                          "__init__",
                          "run",
                          "validate"
                        ],
                        "classes": [
                          "ImportSavedQueriesCommand"
                        ],
                        "imports": [
                          "logging",
                          "typing",
                          "marshmallow.exceptions",
                          "superset.commands.base",
                          "superset.commands.exceptions",
                          "superset.commands.importers.exceptions",
                          "superset.commands.query.importers"
                        ],
                        "size_lines": 67,
                        "has_main": false,
                        "docstring": null
                      },
                      "__init__.py": {
                        "functions": [],
                        "classes": [],
                        "imports": [],
                        "size_lines": 17,
                        "has_main": false,
                        "docstring": null
                      },
                      "v1": {
                        "__init__.py": {
                          "functions": [
                            "_import"
                          ],
                          "classes": [
                            "ImportSavedQueriesCommand"
                          ],
                          "imports": [
                            "typing",
                            "marshmallow",
                            "sqlalchemy.orm",
                            "superset.commands.database.importers.v1.utils",
                            "superset.commands.importers.v1",
                            "superset.commands.query.exceptions",
                            "superset.commands.query.importers.v1.utils",
                            "superset.connectors.sqla.models",
                            "superset.daos.query",
                            "superset.databases.schemas",
                            "superset.queries.saved_queries.schemas"
                          ],
                          "size_lines": 68,
                          "has_main": false,
                          "docstring": null
                        },
                        "utils.py": {
                          "functions": [
                            "import_saved_query"
                          ],
                          "classes": [],
                          "imports": [
                            "typing",
                            "superset",
                            "superset.models.sql_lab"
                          ],
                          "size_lines": 36,
                          "has_main": false,
                          "docstring": null
                        }
                      }
                    }
                  },
                  "tag": {
                    "update.py": {
                      "functions": [
                        "__init__",
                        "run",
                        "validate"
                      ],
                      "classes": [
                        "UpdateTagCommand"
                      ],
                      "imports": [
                        "logging",
                        "typing",
                        "flask_appbuilder.models.sqla",
                        "superset",
                        "superset.commands.base",
                        "superset.commands.tag.exceptions",
                        "superset.commands.tag.utils",
                        "superset.daos.tag",
                        "superset.tags.models",
                        "superset.utils.decorators"
                      ],
                      "size_lines": 72,
                      "has_main": false,
                      "docstring": null
                    },
                    "delete.py": {
                      "functions": [
                        "__init__",
                        "run",
                        "validate",
                        "__init__",
                        "run",
                        "validate"
                      ],
                      "classes": [
                        "DeleteTaggedObjectCommand",
                        "DeleteTagsCommand"
                      ],
                      "imports": [
                        "logging",
                        "functools",
                        "superset.commands.base",
                        "superset.commands.tag.exceptions",
                        "superset.commands.tag.utils",
                        "superset.daos.tag",
                        "superset.tags.models",
                        "superset.utils.decorators",
                        "superset.views.base"
                      ],
                      "size_lines": 106,
                      "has_main": false,
                      "docstring": null
                    },
                    "create.py": {
                      "functions": [
                        "__init__",
                        "run",
                        "validate",
                        "__init__",
                        "run",
                        "validate"
                      ],
                      "classes": [
                        "CreateCustomTagCommand",
                        "CreateCustomTagWithRelationshipsCommand"
                      ],
                      "imports": [
                        "logging",
                        "functools",
                        "typing",
                        "superset",
                        "superset.commands.base",
                        "superset.commands.tag.exceptions",
                        "superset.commands.tag.utils",
                        "superset.daos.tag",
                        "superset.exceptions",
                        "superset.tags.models",
                        "superset.utils.decorators"
                      ],
                      "size_lines": 120,
                      "has_main": false,
                      "docstring": null
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "utils.py": {
                      "functions": [
                        "to_object_type",
                        "to_object_model"
                      ],
                      "classes": [],
                      "imports": [
                        "typing",
                        "superset.daos.chart",
                        "superset.daos.dashboard",
                        "superset.daos.query",
                        "superset.models.dashboard",
                        "superset.models.slice",
                        "superset.models.sql_lab",
                        "superset.tags.models"
                      ],
                      "size_lines": 48,
                      "has_main": false,
                      "docstring": null
                    },
                    "exceptions.py": {
                      "functions": [
                        "__init__",
                        "__init__"
                      ],
                      "classes": [
                        "TagInvalidError",
                        "TagCreateFailedError",
                        "TagUpdateFailedError",
                        "TagDeleteFailedError",
                        "TaggedObjectDeleteFailedError",
                        "TagNotFoundError",
                        "TaggedObjectNotFoundError"
                      ],
                      "imports": [
                        "typing",
                        "flask_babel",
                        "superset.commands.exceptions"
                      ],
                      "size_lines": 72,
                      "has_main": false,
                      "docstring": null
                    }
                  }
                },
                "key_value": {
                  "models.py": {
                    "functions": [
                      "is_expired"
                    ],
                    "classes": [
                      "KeyValueEntry"
                    ],
                    "imports": [
                      "datetime",
                      "flask_appbuilder",
                      "sqlalchemy",
                      "sqlalchemy.orm",
                      "superset",
                      "superset.models.helpers"
                    ],
                    "size_lines": 46,
                    "has_main": false,
                    "docstring": null
                  },
                  "__init__.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 17,
                    "has_main": false,
                    "docstring": null
                  },
                  "types.py": {
                    "functions": [
                      "encode",
                      "decode",
                      "encode",
                      "decode",
                      "encode",
                      "decode",
                      "__init__",
                      "encode",
                      "decode"
                    ],
                    "classes": [
                      "KeyValueFilter",
                      "KeyValueResource",
                      "SharedKey",
                      "KeyValueCodec",
                      "JsonKeyValueCodec",
                      "PickleKeyValueCodec",
                      "MarshmallowKeyValueCodec"
                    ],
                    "imports": [
                      "__future__",
                      "json",
                      "pickle",
                      "abc",
                      "typing",
                      "uuid",
                      "marshmallow",
                      "superset.key_value.exceptions",
                      "superset.utils.backports"
                    ],
                    "size_lines": 104,
                    "has_main": false,
                    "docstring": null
                  },
                  "utils.py": {
                    "functions": [
                      "random_key",
                      "get_filter",
                      "encode_permalink_key",
                      "decode_permalink_id",
                      "get_uuid_namespace",
                      "get_deterministic_uuid"
                    ],
                    "classes": [],
                    "imports": [
                      "__future__",
                      "hashlib",
                      "secrets",
                      "typing",
                      "uuid",
                      "hashids",
                      "flask_babel",
                      "superset.key_value.exceptions",
                      "superset.key_value.types",
                      "superset.utils.json"
                    ],
                    "size_lines": 79,
                    "has_main": false,
                    "docstring": null
                  },
                  "exceptions.py": {
                    "functions": [],
                    "classes": [
                      "KeyValueParseKeyError",
                      "KeyValueCreateFailedError",
                      "KeyValueGetFailedError",
                      "KeyValueDeleteFailedError",
                      "KeyValueUpdateFailedError",
                      "KeyValueUpsertFailedError",
                      "KeyValueAccessDeniedError",
                      "KeyValueCodecException",
                      "KeyValueCodecEncodeException",
                      "KeyValueCodecDecodeException"
                    ],
                    "imports": [
                      "flask_babel",
                      "superset.commands.exceptions",
                      "superset.exceptions"
                    ],
                    "size_lines": 67,
                    "has_main": false,
                    "docstring": null
                  },
                  "shared_entries.py": {
                    "functions": [
                      "get_shared_value",
                      "set_shared_value",
                      "get_permalink_salt"
                    ],
                    "classes": [],
                    "imports": [
                      "typing",
                      "uuid",
                      "superset.daos.key_value",
                      "superset.key_value.types",
                      "superset.key_value.utils",
                      "superset.utils.decorators"
                    ],
                    "size_lines": 49,
                    "has_main": false,
                    "docstring": null
                  }
                },
                "columns": {
                  "__init__.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 17,
                    "has_main": false,
                    "docstring": null
                  }
                },
                "cachekeys": {
                  "__init__.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 17,
                    "has_main": false,
                    "docstring": null
                  },
                  "api.py": {
                    "functions": [
                      "invalidate"
                    ],
                    "classes": [
                      "CacheRestApi"
                    ],
                    "imports": [
                      "logging",
                      "flask",
                      "flask_appbuilder",
                      "flask_appbuilder.api",
                      "flask_appbuilder.models.sqla.interface",
                      "flask_appbuilder.security.decorators",
                      "marshmallow.exceptions",
                      "sqlalchemy.exc",
                      "superset.cachekeys.schemas",
                      "superset.connectors.sqla.models",
                      "superset.extensions",
                      "superset.models.cache",
                      "superset.views.base_api"
                    ],
                    "size_lines": 133,
                    "has_main": false,
                    "docstring": null
                  },
                  "schemas.py": {
                    "functions": [],
                    "classes": [
                      "Datasource",
                      "CacheInvalidationRequestSchema"
                    ],
                    "imports": [
                      "marshmallow",
                      "superset.charts.schemas",
                      "superset.utils.core"
                    ],
                    "size_lines": 58,
                    "has_main": false,
                    "docstring": null
                  }
                },
                "views": {
                  "alerts.py": {
                    "functions": [
                      "list",
                      "log"
                    ],
                    "classes": [
                      "BaseAlertReportView",
                      "AlertView",
                      "ReportView"
                    ],
                    "imports": [
                      "flask",
                      "flask_appbuilder",
                      "flask_appbuilder.api",
                      "flask_appbuilder.security.decorators",
                      "superset",
                      "superset.superset_typing",
                      "base"
                    ],
                    "size_lines": 60,
                    "has_main": false,
                    "docstring": null
                  },
                  "tags.py": {
                    "functions": [
                      "list",
                      "is_enabled",
                      "ensure_enabled",
                      "tags"
                    ],
                    "classes": [
                      "TagModelView",
                      "TagView"
                    ],
                    "imports": [
                      "logging",
                      "flask_appbuilder",
                      "flask_appbuilder.hooks",
                      "flask_appbuilder.models.sqla.interface",
                      "flask_appbuilder.security.decorators",
                      "werkzeug.exceptions",
                      "superset",
                      "superset.superset_typing",
                      "superset.tags.models",
                      "superset.utils",
                      "superset.views.base",
                      "base"
                    ],
                    "size_lines": 78,
                    "has_main": false,
                    "docstring": null
                  },
                  "css_templates.py": {
                    "functions": [
                      "list"
                    ],
                    "classes": [
                      "CssTemplateModelView"
                    ],
                    "imports": [
                      "flask_appbuilder.api",
                      "flask_appbuilder.models.sqla.interface",
                      "flask_appbuilder.security.decorators",
                      "superset.constants",
                      "superset.models",
                      "superset.superset_typing",
                      "superset.views.base"
                    ],
                    "size_lines": 41,
                    "has_main": false,
                    "docstring": null
                  },
                  "base_api.py": {
                    "functions": [
                      "requires_json",
                      "requires_form_data",
                      "statsd_metrics",
                      "validate_feature_flags",
                      "wraps",
                      "wraps",
                      "wraps",
                      "decorate",
                      "__init__",
                      "apply",
                      "incr_stats",
                      "timing_stats",
                      "send_stats_metrics",
                      "__init__",
                      "_init_properties",
                      "_get_related_filter",
                      "_get_distinct_filter",
                      "_get_text_for_model",
                      "_get_extra_field_for_model",
                      "_get_result_from_rows",
                      "_add_extra_ids_to_result",
                      "info_headless",
                      "get_headless",
                      "get_list_headless",
                      "post_headless",
                      "put_headless",
                      "delete_headless",
                      "related",
                      "distinct",
                      "wrapper"
                    ],
                    "classes": [
                      "RelatedResultResponseSchema",
                      "RelatedResponseSchema",
                      "DistinctResultResponseSchema",
                      "DistincResponseSchema",
                      "RelatedFieldFilter",
                      "BaseFavoriteFilter",
                      "BaseSupersetApiMixin",
                      "BaseSupersetApi",
                      "BaseSupersetModelRestApi"
                    ],
                    "imports": [
                      "__future__",
                      "functools",
                      "logging",
                      "typing",
                      "flask",
                      "flask_appbuilder",
                      "flask_appbuilder.api",
                      "flask_appbuilder.models.filters",
                      "flask_appbuilder.models.sqla.filters",
                      "flask_appbuilder.models.sqla.interface",
                      "flask_babel",
                      "marshmallow",
                      "sqlalchemy",
                      "sqlalchemy.orm.query",
                      "superset",
                      "superset.exceptions",
                      "superset.extensions",
                      "superset.models.core",
                      "superset.models.dashboard",
                      "superset.models.slice",
                      "superset.schemas",
                      "superset.sql_lab",
                      "superset.superset_typing",
                      "superset.utils.core",
                      "superset.views.error_handling"
                    ],
                    "size_lines": 682,
                    "has_main": false,
                    "docstring": null
                  },
                  "sqllab.py": {
                    "functions": [
                      "root",
                      "permalink_view",
                      "history"
                    ],
                    "classes": [
                      "SqllabView"
                    ],
                    "imports": [
                      "contextlib",
                      "typing",
                      "flask",
                      "flask_appbuilder",
                      "flask_appbuilder.api",
                      "flask_appbuilder.security.decorators",
                      "superset",
                      "superset.constants",
                      "superset.superset_typing",
                      "superset.utils",
                      "base"
                    ],
                    "size_lines": 65,
                    "has_main": false,
                    "docstring": null
                  },
                  "health.py": {
                    "functions": [
                      "health"
                    ],
                    "classes": [],
                    "imports": [
                      "superset",
                      "superset.stats_logger",
                      "superset.superset_typing"
                    ],
                    "size_lines": 30,
                    "has_main": false,
                    "docstring": null
                  },
                  "__init__.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [
                      "log"
                    ],
                    "size_lines": 43,
                    "has_main": false,
                    "docstring": null
                  },
                  "core.py": {
                    "functions": [
                      "slice",
                      "get_query_string_response",
                      "get_raw_results",
                      "get_samples",
                      "send_data_payload_response",
                      "generate_json",
                      "explore_json_data",
                      "explore_json",
                      "get_redirect_url",
                      "explore",
                      "save_or_overwrite_slice",
                      "warm_up_cache",
                      "dashboard",
                      "dashboard_permalink",
                      "log",
                      "fetch_datasource_metadata",
                      "welcome",
                      "sqllab_history"
                    ],
                    "classes": [
                      "Superset"
                    ],
                    "imports": [
                      "__future__",
                      "contextlib",
                      "logging",
                      "datetime",
                      "typing",
                      "urllib",
                      "flask",
                      "flask_appbuilder",
                      "flask_appbuilder.security.decorators",
                      "flask_babel",
                      "sqlalchemy.exc",
                      "superset",
                      "superset.async_events.async_query_manager",
                      "superset.commands.chart.exceptions",
                      "superset.commands.chart.warm_up_cache",
                      "superset.commands.dashboard.exceptions",
                      "superset.commands.dashboard.permalink.get",
                      "superset.commands.dataset.exceptions",
                      "superset.commands.explore.form_data.create",
                      "superset.commands.explore.form_data.get",
                      "superset.commands.explore.form_data.parameters",
                      "superset.commands.explore.permalink.get",
                      "superset.common.chart_data",
                      "superset.connectors.sqla.models",
                      "superset.daos.chart",
                      "superset.daos.datasource",
                      "superset.dashboards.permalink.exceptions",
                      "superset.exceptions",
                      "superset.explore.permalink.exceptions",
                      "superset.extensions",
                      "superset.models.core",
                      "superset.models.dashboard",
                      "superset.models.slice",
                      "superset.models.sql_lab",
                      "superset.models.user_attributes",
                      "superset.superset_typing",
                      "superset.utils",
                      "superset.utils.cache",
                      "superset.utils.core",
                      "superset.views.base",
                      "superset.views.error_handling",
                      "superset.views.utils",
                      "superset.viz"
                    ],
                    "size_lines": 928,
                    "has_main": false,
                    "docstring": null
                  },
                  "dynamic_plugins.py": {
                    "functions": [
                      "ensure_dynamic_plugins_enabled"
                    ],
                    "classes": [
                      "DynamicPluginsView"
                    ],
                    "imports": [
                      "typing",
                      "flask",
                      "flask_appbuilder",
                      "flask_appbuilder.hooks",
                      "flask_appbuilder.models.sqla.interface",
                      "flask_babel",
                      "superset",
                      "superset.constants",
                      "superset.models.dynamic_plugins"
                    ],
                    "size_lines": 68,
                    "has_main": false,
                    "docstring": null
                  },
                  "error_handling.py": {
                    "functions": [
                      "get_error_level_from_status",
                      "json_error_response",
                      "handle_api_exception",
                      "set_app_error_handlers",
                      "wraps",
                      "show_superset_error",
                      "show_superset_errors",
                      "refresh_csrf_token",
                      "show_http_exception",
                      "show_command_errors",
                      "show_unexpected_exception"
                    ],
                    "classes": [],
                    "imports": [
                      "__future__",
                      "dataclasses",
                      "functools",
                      "logging",
                      "typing",
                      "importlib.resources",
                      "typing",
                      "flask",
                      "flask_wtf.csrf",
                      "sqlalchemy",
                      "werkzeug.exceptions",
                      "superset",
                      "superset.commands.exceptions",
                      "superset.errors",
                      "superset.exceptions",
                      "superset.superset_typing",
                      "superset.utils",
                      "superset.utils.log",
                      "superset.views.base"
                    ],
                    "size_lines": 224,
                    "has_main": false,
                    "docstring": null
                  },
                  "api.py": {
                    "functions": [
                      "query",
                      "query_form_data",
                      "time_range",
                      "get_query_context_factory"
                    ],
                    "classes": [
                      "Api"
                    ],
                    "imports": [
                      "__future__",
                      "typing",
                      "flask",
                      "flask_appbuilder",
                      "flask_appbuilder.api",
                      "flask_appbuilder.security.decorators",
                      "flask_babel",
                      "superset",
                      "superset.commands.chart.exceptions",
                      "superset.legacy",
                      "superset.models.slice",
                      "superset.superset_typing",
                      "superset.utils",
                      "superset.utils.date_parser",
                      "superset.views.base",
                      "superset.views.error_handling",
                      "superset.common.query_context_factory",
                      "superset.common.query_context_factory"
                    ],
                    "size_lines": 136,
                    "has_main": false,
                    "docstring": null
                  },
                  "utils.py": {
                    "functions": [
                      "sanitize_datasource_data",
                      "bootstrap_user_data",
                      "get_permissions",
                      "get_viz",
                      "loads_request_json",
                      "get_form_data",
                      "add_sqllab_custom_filters",
                      "get_datasource_info",
                      "apply_display_max_row_limit",
                      "get_dashboard_extra_filters",
                      "build_extra_filters",
                      "is_slice_in_container",
                      "check_resource_permissions",
                      "check_explore_cache_perms",
                      "check_datasource_perms",
                      "_deserialize_results_payload",
                      "get_cta_schema_name",
                      "redirect_with_flash",
                      "decorator",
                      "wrapper"
                    ],
                    "classes": [],
                    "imports": [
                      "contextlib",
                      "logging",
                      "collections",
                      "functools",
                      "typing",
                      "msgpack",
                      "pyarrow",
                      "flask",
                      "flask_appbuilder.security.sqla",
                      "flask_appbuilder.security.sqla.models",
                      "flask_babel",
                      "sqlalchemy.exc",
                      "werkzeug.wrappers.response",
                      "superset",
                      "superset.common.db_query_status",
                      "superset.daos.datasource",
                      "superset.errors",
                      "superset.exceptions",
                      "superset.extensions",
                      "superset.legacy",
                      "superset.models.core",
                      "superset.models.dashboard",
                      "superset.models.slice",
                      "superset.models.sql_lab",
                      "superset.superset_typing",
                      "superset.utils",
                      "superset.utils.core",
                      "superset.utils.decorators",
                      "superset.viz"
                    ],
                    "size_lines": 553,
                    "has_main": false,
                    "docstring": null
                  },
                  "explore.py": {
                    "functions": [
                      "root",
                      "permalink"
                    ],
                    "classes": [
                      "ExploreView",
                      "ExplorePermalinkView"
                    ],
                    "imports": [
                      "flask_appbuilder",
                      "flask_appbuilder.api",
                      "flask_appbuilder.security.decorators",
                      "superset",
                      "superset.superset_typing",
                      "base"
                    ],
                    "size_lines": 50,
                    "has_main": false,
                    "docstring": null
                  },
                  "all_entities.py": {
                    "functions": [
                      "list"
                    ],
                    "classes": [
                      "TaggedObjectsModelView"
                    ],
                    "imports": [
                      "logging",
                      "flask_appbuilder",
                      "flask_appbuilder.models.sqla.interface",
                      "flask_appbuilder.security.decorators",
                      "superset",
                      "superset.superset_typing",
                      "superset.tags.models",
                      "superset.views.base"
                    ],
                    "size_lines": 45,
                    "has_main": false,
                    "docstring": null
                  },
                  "annotations.py": {
                    "functions": [
                      "list",
                      "get"
                    ],
                    "classes": [
                      "AnnotationLayerView"
                    ],
                    "imports": [
                      "flask_appbuilder",
                      "flask_appbuilder.api",
                      "flask_appbuilder.security.decorators",
                      "superset.superset_typing",
                      "base"
                    ],
                    "size_lines": 41,
                    "has_main": false,
                    "docstring": null
                  },
                  "base.py": {
                    "functions": [
                      "get_error_msg",
                      "json_success",
                      "data_payload_response",
                      "generate_download_headers",
                      "deprecated",
                      "api",
                      "get_environment_tag",
                      "menu_data",
                      "cached_common_bootstrap_data",
                      "common_bootstrap_payload",
                      "get_common_bootstrap_data",
                      "bind_field",
                      "apply_http_headers",
                      "_deprecated",
                      "wraps",
                      "json_response",
                      "render_app_template",
                      "serialize_bootstrap_data",
                      "render_app_template",
                      "_delete",
                      "muldelete",
                      "apply",
                      "wraps"
                    ],
                    "classes": [
                      "BaseSupersetView",
                      "SupersetListWidget",
                      "SupersetModelView",
                      "DeleteMixin",
                      "DatasourceFilter",
                      "CsvResponse",
                      "XlsxResponse"
                    ],
                    "imports": [
                      "__future__",
                      "functools",
                      "logging",
                      "os",
                      "traceback",
                      "datetime",
                      "typing",
                      "babel",
                      "flask",
                      "flask_appbuilder",
                      "flask_appbuilder.actions",
                      "flask_appbuilder.forms",
                      "flask_appbuilder.models.sqla.filters",
                      "flask_appbuilder.security.sqla.models",
                      "flask_appbuilder.widgets",
                      "flask_babel",
                      "flask_jwt_extended.exceptions",
                      "flask_wtf.form",
                      "sqlalchemy.orm",
                      "wtforms.fields.core",
                      "superset",
                      "superset.connectors.sqla",
                      "superset.db_engine_specs",
                      "superset.db_engine_specs.gsheets",
                      "superset.extensions",
                      "superset.reports.models",
                      "superset.superset_typing",
                      "superset.translations.utils",
                      "superset.utils",
                      "superset.utils.filters",
                      "superset.views.error_handling",
                      "utils"
                    ],
                    "size_lines": 507,
                    "has_main": false,
                    "docstring": null
                  },
                  "filters.py": {
                    "functions": [
                      "apply",
                      "apply",
                      "apply"
                    ],
                    "classes": [
                      "FilterRelatedOwners",
                      "BaseFilterRelatedUsers",
                      "BaseFilterRelatedRoles"
                    ],
                    "imports": [
                      "logging",
                      "typing",
                      "flask",
                      "flask_appbuilder.models.filters",
                      "flask_babel",
                      "sqlalchemy",
                      "sqlalchemy.orm",
                      "superset"
                    ],
                    "size_lines": 105,
                    "has_main": false,
                    "docstring": null
                  },
                  "datasource": {
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "schemas.py": {
                      "functions": [
                        "normalize",
                        "handle_none"
                      ],
                      "classes": [
                        "ExternalMetadataParams",
                        "ExternalMetadataSchema",
                        "SamplesPayloadSchema",
                        "SamplesRequestSchema"
                      ],
                      "imports": [
                        "typing",
                        "marshmallow",
                        "superset",
                        "superset.charts.schemas",
                        "superset.utils.core"
                      ],
                      "size_lines": 106,
                      "has_main": false,
                      "docstring": null
                    },
                    "utils.py": {
                      "functions": [
                        "get_limit_clause",
                        "get_samples"
                      ],
                      "classes": [],
                      "imports": [
                        "typing",
                        "superset",
                        "superset.commands.dataset.exceptions",
                        "superset.common.chart_data",
                        "superset.common.query_context_factory",
                        "superset.common.utils.query_cache_manager",
                        "superset.constants",
                        "superset.daos.datasource",
                        "superset.utils.core",
                        "superset.views.datasource.schemas"
                      ],
                      "size_lines": 125,
                      "has_main": false,
                      "docstring": null
                    },
                    "views.py": {
                      "functions": [
                        "save",
                        "get",
                        "external_metadata",
                        "external_metadata_by_name",
                        "samples",
                        "root",
                        "show"
                      ],
                      "classes": [
                        "Datasource",
                        "DatasetEditor"
                      ],
                      "imports": [
                        "collections",
                        "typing",
                        "flask",
                        "flask_appbuilder",
                        "flask_appbuilder.api",
                        "flask_appbuilder.security.decorators",
                        "flask_babel",
                        "marshmallow",
                        "sqlalchemy.exc",
                        "superset",
                        "superset.commands.dataset.exceptions",
                        "superset.commands.utils",
                        "superset.connectors.sqla.models",
                        "superset.connectors.sqla.utils",
                        "superset.daos.datasource",
                        "superset.exceptions",
                        "superset.models.core",
                        "superset.sql_parse",
                        "superset.superset_typing",
                        "superset.utils",
                        "superset.utils.core",
                        "superset.views.base",
                        "superset.views.datasource.schemas",
                        "superset.views.datasource.utils",
                        "superset.views.error_handling",
                        "superset.views.utils"
                      ],
                      "size_lines": 233,
                      "has_main": false,
                      "docstring": null
                    }
                  },
                  "database": {
                    "validators.py": {
                      "functions": [
                        "sqlalchemy_uri_validator",
                        "schema_allows_file_upload"
                      ],
                      "classes": [],
                      "imports": [
                        "typing",
                        "flask_babel",
                        "marshmallow",
                        "superset",
                        "superset.commands.database.exceptions",
                        "superset.databases.utils",
                        "superset.models.core"
                      ],
                      "size_lines": 57,
                      "has_main": false,
                      "docstring": null
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "views.py": {
                      "functions": [
                        "upload_stream_write",
                        "list"
                      ],
                      "classes": [
                        "DatabaseView"
                      ],
                      "imports": [
                        "typing",
                        "flask_appbuilder",
                        "flask_appbuilder.security.decorators",
                        "superset",
                        "superset.constants",
                        "superset.superset_typing",
                        "superset.views.base",
                        "werkzeug.datastructures"
                      ],
                      "size_lines": 52,
                      "has_main": false,
                      "docstring": null
                    }
                  },
                  "chart": {
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "filters.py": {
                      "functions": [
                        "apply"
                      ],
                      "classes": [
                        "SliceFilter"
                      ],
                      "imports": [
                        "typing",
                        "sqlalchemy.orm.query",
                        "superset",
                        "superset.utils.filters",
                        "superset.views.base"
                      ],
                      "size_lines": 32,
                      "has_main": false,
                      "docstring": null
                    },
                    "views.py": {
                      "functions": [
                        "add",
                        "list"
                      ],
                      "classes": [
                        "SliceModelView"
                      ],
                      "imports": [
                        "flask_appbuilder",
                        "superset.constants",
                        "superset.superset_typing",
                        "superset.views.base"
                      ],
                      "size_lines": 38,
                      "has_main": false,
                      "docstring": null
                    }
                  },
                  "dashboard": {
                    "mixin.py": {
                      "functions": [
                        "pre_delete"
                      ],
                      "classes": [
                        "DashboardMixin"
                      ],
                      "imports": [
                        "flask_babel",
                        "superset",
                        "superset.dashboards.filters"
                      ],
                      "size_lines": 93,
                      "has_main": false,
                      "docstring": null
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "views.py": {
                      "functions": [
                        "list",
                        "mulexport",
                        "new",
                        "embedded"
                      ],
                      "classes": [
                        "DashboardModelView",
                        "Dashboard"
                      ],
                      "imports": [
                        "builtins",
                        "typing",
                        "flask",
                        "flask_appbuilder",
                        "flask_appbuilder.actions",
                        "flask_appbuilder.models.sqla.interface",
                        "flask_appbuilder.security.decorators",
                        "flask_babel",
                        "flask_login",
                        "superset",
                        "superset.constants",
                        "superset.models.dashboard",
                        "superset.superset_typing",
                        "superset.utils",
                        "superset.views.base",
                        "superset.views.dashboard.mixin"
                      ],
                      "size_lines": 129,
                      "has_main": false,
                      "docstring": null
                    }
                  },
                  "sql_lab": {
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "schemas.py": {
                      "functions": [],
                      "classes": [
                        "SqlJsonPayloadSchema"
                      ],
                      "imports": [
                        "marshmallow"
                      ],
                      "size_lines": 36,
                      "has_main": false,
                      "docstring": null
                    },
                    "views.py": {
                      "functions": [
                        "_get_owner_id",
                        "list",
                        "post",
                        "delete",
                        "get",
                        "activate",
                        "put",
                        "migrate_query",
                        "delete_query",
                        "post",
                        "delete",
                        "expanded"
                      ],
                      "classes": [
                        "SavedQueryView",
                        "TabStateView",
                        "TableSchemaView"
                      ],
                      "imports": [
                        "logging",
                        "flask",
                        "flask_appbuilder",
                        "flask_appbuilder.security.decorators",
                        "flask_babel",
                        "sqlalchemy",
                        "superset",
                        "superset.models.sql_lab",
                        "superset.superset_typing",
                        "superset.utils",
                        "superset.utils.core",
                        "superset.views.base"
                      ],
                      "size_lines": 279,
                      "has_main": false,
                      "docstring": null
                    }
                  },
                  "users": {
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "api.py": {
                      "functions": [
                        "get_me",
                        "get_my_roles",
                        "avatar"
                      ],
                      "classes": [
                        "CurrentUserRestApi",
                        "UserRestApi"
                      ],
                      "imports": [
                        "flask",
                        "flask_appbuilder.api",
                        "flask_jwt_extended.exceptions",
                        "sqlalchemy.orm.exc",
                        "superset",
                        "superset.daos.user",
                        "superset.utils.slack",
                        "superset.views.base_api",
                        "superset.views.users.schemas",
                        "superset.views.utils"
                      ],
                      "size_lines": 166,
                      "has_main": false,
                      "docstring": null
                    },
                    "schemas.py": {
                      "functions": [],
                      "classes": [
                        "UserResponseSchema"
                      ],
                      "imports": [
                        "marshmallow",
                        "marshmallow.fields"
                      ],
                      "size_lines": 29,
                      "has_main": false,
                      "docstring": null
                    }
                  },
                  "log": {
                    "__init__.py": {
                      "functions": [],
                      "classes": [
                        "LogMixin"
                      ],
                      "imports": [
                        "flask_babel"
                      ],
                      "size_lines": 35,
                      "has_main": false,
                      "docstring": null
                    },
                    "api.py": {
                      "functions": [
                        "is_enabled",
                        "ensure_enabled",
                        "get_user_activity_access_error",
                        "recent_activity"
                      ],
                      "classes": [
                        "LogRestApi"
                      ],
                      "imports": [
                        "typing",
                        "flask",
                        "flask_appbuilder.api",
                        "flask_appbuilder.hooks",
                        "flask_appbuilder.models.sqla.interface",
                        "superset.models.core",
                        "superset",
                        "superset.constants",
                        "superset.daos.log",
                        "superset.exceptions",
                        "superset.superset_typing",
                        "superset.views.base_api",
                        "superset.views.log",
                        "superset.views.log.schemas"
                      ],
                      "size_lines": 139,
                      "has_main": false,
                      "docstring": null
                    },
                    "schemas.py": {
                      "functions": [],
                      "classes": [
                        "RecentActivitySchema",
                        "RecentActivityResponseSchema"
                      ],
                      "imports": [
                        "marshmallow"
                      ],
                      "size_lines": 67,
                      "has_main": false,
                      "docstring": null
                    },
                    "views.py": {
                      "functions": [
                        "is_enabled",
                        "ensure_enabled"
                      ],
                      "classes": [
                        "LogModelView"
                      ],
                      "imports": [
                        "flask",
                        "flask_appbuilder.hooks",
                        "flask_appbuilder.models.sqla.interface",
                        "werkzeug.exceptions",
                        "superset.models.core",
                        "superset.constants",
                        "superset.views.base"
                      ],
                      "size_lines": 46,
                      "has_main": false,
                      "docstring": null
                    }
                  }
                },
                "advanced_data_type": {
                  "__init__.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 17,
                    "has_main": false,
                    "docstring": null
                  },
                  "types.py": {
                    "functions": [],
                    "classes": [
                      "AdvancedDataTypeRequest",
                      "AdvancedDataTypeResponse",
                      "AdvancedDataType"
                    ],
                    "imports": [
                      "dataclasses",
                      "typing",
                      "sqlalchemy",
                      "sqlalchemy.sql.expression",
                      "superset.superset_typing",
                      "superset.utils.core"
                    ],
                    "size_lines": 60,
                    "has_main": false,
                    "docstring": null
                  },
                  "api.py": {
                    "functions": [
                      "get",
                      "get_types"
                    ],
                    "classes": [
                      "AdvancedDataTypeRestApi"
                    ],
                    "imports": [
                      "typing",
                      "flask",
                      "flask.wrappers",
                      "flask_appbuilder.api",
                      "flask_babel",
                      "superset.advanced_data_type.schemas",
                      "superset.advanced_data_type.types",
                      "superset.extensions",
                      "superset.views.base_api"
                    ],
                    "size_lines": 152,
                    "has_main": false,
                    "docstring": null
                  },
                  "schemas.py": {
                    "functions": [],
                    "classes": [
                      "AdvancedDataTypeSchema"
                    ],
                    "imports": [
                      "marshmallow"
                    ],
                    "size_lines": 50,
                    "has_main": false,
                    "docstring": "Schemas for advanced data types"
                  },
                  "plugins": {
                    "internet_address.py": {
                      "functions": [
                        "cidr_func",
                        "cidr_translate_filter_func"
                      ],
                      "classes": [],
                      "imports": [
                        "ipaddress",
                        "typing",
                        "sqlalchemy",
                        "superset.advanced_data_type.types",
                        "superset.utils.core"
                      ],
                      "size_lines": 139,
                      "has_main": false,
                      "docstring": null
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "internet_port.py": {
                      "functions": [
                        "port_translation_func",
                        "port_translate_filter_func"
                      ],
                      "classes": [],
                      "imports": [
                        "itertools",
                        "typing",
                        "sqlalchemy",
                        "superset.advanced_data_type.types",
                        "superset.utils.core"
                      ],
                      "size_lines": 147,
                      "has_main": false,
                      "docstring": null
                    }
                  }
                },
                "embedded": {
                  "__init__.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 17,
                    "has_main": false,
                    "docstring": null
                  },
                  "api.py": {
                    "functions": [
                      "ensure_embedded_enabled",
                      "get"
                    ],
                    "classes": [
                      "EmbeddedDashboardRestApi"
                    ],
                    "imports": [
                      "logging",
                      "typing",
                      "flask",
                      "flask_appbuilder.api",
                      "flask_appbuilder.hooks",
                      "flask_appbuilder.models.sqla.interface",
                      "superset",
                      "superset.commands.dashboard.embedded.exceptions",
                      "superset.constants",
                      "superset.daos.dashboard",
                      "superset.dashboards.schemas",
                      "superset.extensions",
                      "superset.models.embedded_dashboard",
                      "superset.reports.logs.schemas",
                      "superset.views.base_api"
                    ],
                    "size_lines": 136,
                    "has_main": false,
                    "docstring": null
                  },
                  "view.py": {
                    "functions": [
                      "embedded"
                    ],
                    "classes": [
                      "EmbeddedView"
                    ],
                    "imports": [
                      "typing",
                      "flask",
                      "flask_appbuilder",
                      "flask_login",
                      "flask_wtf.csrf",
                      "superset",
                      "superset.daos.dashboard",
                      "superset.superset_typing",
                      "superset.utils",
                      "superset.views.base"
                    ],
                    "size_lines": 96,
                    "has_main": false,
                    "docstring": null
                  }
                },
                "translations": {
                  "__init__.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 17,
                    "has_main": false,
                    "docstring": null
                  },
                  "utils.py": {
                    "functions": [
                      "get_language_pack"
                    ],
                    "classes": [],
                    "imports": [
                      "json",
                      "logging",
                      "os",
                      "typing"
                    ],
                    "size_lines": 55,
                    "has_main": false,
                    "docstring": null
                  }
                },
                "sqllab": {
                  "limiting_factor.py": {
                    "functions": [],
                    "classes": [
                      "LimitingFactor"
                    ],
                    "imports": [
                      "superset.utils.backports"
                    ],
                    "size_lines": 26,
                    "has_main": false,
                    "docstring": null
                  },
                  "validators.py": {
                    "functions": [
                      "validate"
                    ],
                    "classes": [
                      "CanAccessQueryValidatorImpl"
                    ],
                    "imports": [
                      "__future__",
                      "typing",
                      "superset",
                      "superset.commands.sql_lab.execute",
                      "superset.models.sql_lab"
                    ],
                    "size_lines": 32,
                    "has_main": false,
                    "docstring": null
                  },
                  "execution_context_convertor.py": {
                    "functions": [
                      "set_max_row_in_display",
                      "set_payload",
                      "serialize_payload"
                    ],
                    "classes": [
                      "ExecutionContextConvertor"
                    ],
                    "imports": [
                      "__future__",
                      "logging",
                      "typing",
                      "superset.sqllab.command_status",
                      "superset.sqllab.utils",
                      "superset.utils",
                      "superset.sqllab.sqllab_execution_context"
                    ],
                    "size_lines": 66,
                    "has_main": false,
                    "docstring": null
                  },
                  "__init__.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 17,
                    "has_main": false,
                    "docstring": null
                  },
                  "api.py": {
                    "functions": [
                      "get",
                      "estimate_query_cost",
                      "format_sql",
                      "export_csv",
                      "get_results",
                      "execute_sql_query",
                      "_create_sql_json_command",
                      "_create_sql_json_executor"
                    ],
                    "classes": [
                      "SqlLabRestApi"
                    ],
                    "imports": [
                      "logging",
                      "typing",
                      "urllib",
                      "flask",
                      "flask_appbuilder",
                      "flask_appbuilder.api",
                      "flask_appbuilder.models.sqla.interface",
                      "marshmallow",
                      "superset",
                      "superset.commands.sql_lab.estimate",
                      "superset.commands.sql_lab.execute",
                      "superset.commands.sql_lab.export",
                      "superset.commands.sql_lab.results",
                      "superset.constants",
                      "superset.daos.database",
                      "superset.daos.query",
                      "superset.extensions",
                      "superset.jinja_context",
                      "superset.models.sql_lab",
                      "superset.sql.parse",
                      "superset.sql_lab",
                      "superset.sqllab.command_status",
                      "superset.sqllab.exceptions",
                      "superset.sqllab.execution_context_convertor",
                      "superset.sqllab.query_render",
                      "superset.sqllab.schemas",
                      "superset.sqllab.sql_json_executer",
                      "superset.sqllab.sqllab_execution_context",
                      "superset.sqllab.utils",
                      "superset.sqllab.validators",
                      "superset.superset_typing",
                      "superset.utils",
                      "superset.views.base",
                      "superset.views.base_api"
                    ],
                    "size_lines": 462,
                    "has_main": false,
                    "docstring": null
                  },
                  "command_status.py": {
                    "functions": [],
                    "classes": [
                      "SqlJsonExecutionStatus"
                    ],
                    "imports": [
                      "enum"
                    ],
                    "size_lines": 25,
                    "has_main": false,
                    "docstring": null
                  },
                  "schemas.py": {
                    "functions": [],
                    "classes": [
                      "EstimateQueryCostSchema",
                      "FormatQueryPayloadSchema",
                      "ExecutePayloadSchema",
                      "QueryResultSchema",
                      "QueryExecutionResponseSchema",
                      "TableSchema",
                      "TabStateSchema",
                      "SQLLabBootstrapSchema"
                    ],
                    "imports": [
                      "marshmallow",
                      "superset.databases.schemas"
                    ],
                    "size_lines": 156,
                    "has_main": false,
                    "docstring": null
                  },
                  "sql_json_executer.py": {
                    "functions": [
                      "execute",
                      "__init__",
                      "__init__",
                      "execute",
                      "_get_sql_results_with_timeout",
                      "_get_sql_results",
                      "_is_store_results",
                      "_get_timeout_error_msg",
                      "execute"
                    ],
                    "classes": [
                      "SqlJsonExecutor",
                      "SqlJsonExecutorBase",
                      "SynchronousSqlJsonExecutor",
                      "ASynchronousSqlJsonExecutor"
                    ],
                    "imports": [
                      "__future__",
                      "dataclasses",
                      "logging",
                      "abc",
                      "typing",
                      "flask_babel",
                      "superset.errors",
                      "superset.exceptions",
                      "superset.sqllab.command_status",
                      "superset.utils",
                      "superset.utils.core",
                      "superset.utils.dates",
                      "superset.daos.query",
                      "superset.sqllab.sqllab_execution_context"
                    ],
                    "size_lines": 202,
                    "has_main": false,
                    "docstring": null
                  },
                  "utils.py": {
                    "functions": [
                      "apply_display_max_row_configuration_if_require",
                      "write_ipc_buffer",
                      "bootstrap_sqllab_data",
                      "is_require_to_apply"
                    ],
                    "classes": [],
                    "imports": [
                      "__future__",
                      "typing",
                      "pyarrow",
                      "superset",
                      "superset.common.db_query_status",
                      "superset.daos.database",
                      "superset.models.sql_lab"
                    ],
                    "size_lines": 114,
                    "has_main": false,
                    "docstring": null
                  },
                  "sqllab_execution_context.py": {
                    "functions": [
                      "__init__",
                      "set_query",
                      "_init_from_query_params",
                      "_get_template_params",
                      "_get_limit_param",
                      "is_run_asynchronous",
                      "select_as_cta",
                      "set_database",
                      "_get_ctas_target_schema_name",
                      "_validate_db",
                      "get_execution_result",
                      "set_execution_result",
                      "create_query",
                      "get_query_details",
                      "__init__",
                      "create_from"
                    ],
                    "classes": [
                      "SqlJsonExecutionContext",
                      "CreateTableAsSelect"
                    ],
                    "imports": [
                      "__future__",
                      "contextlib",
                      "logging",
                      "dataclasses",
                      "typing",
                      "flask",
                      "sqlalchemy.orm.exc",
                      "superset",
                      "superset.models.sql_lab",
                      "superset.sql_parse",
                      "superset.utils",
                      "superset.utils.core",
                      "superset.utils.dates",
                      "superset.views.utils",
                      "superset.connectors.sqla.models"
                    ],
                    "size_lines": 210,
                    "has_main": false,
                    "docstring": null
                  },
                  "exceptions.py": {
                    "functions": [
                      "__init__",
                      "_generate_message",
                      "_get_reason",
                      "__init__"
                    ],
                    "classes": [
                      "SqlLabException",
                      "QueryIsForbiddenToAccessException"
                    ],
                    "imports": [
                      "__future__",
                      "os",
                      "typing",
                      "flask_babel",
                      "superset.errors",
                      "superset.exceptions",
                      "superset.sqllab.sqllab_execution_context"
                    ],
                    "size_lines": 104,
                    "has_main": false,
                    "docstring": null
                  },
                  "query_render.py": {
                    "functions": [
                      "__init__",
                      "render",
                      "_validate",
                      "_raise_undefined_parameter_exception",
                      "_raise_template_exception",
                      "__init__",
                      "extra",
                      "to_dict"
                    ],
                    "classes": [
                      "SqlQueryRenderImpl",
                      "SqlQueryRenderException"
                    ],
                    "imports": [
                      "__future__",
                      "typing",
                      "flask_babel",
                      "jinja2",
                      "jinja2.meta",
                      "superset",
                      "superset.commands.sql_lab.execute",
                      "superset.errors",
                      "superset.sqllab.exceptions",
                      "superset.utils",
                      "superset.jinja_context",
                      "superset.sqllab.sqllab_execution_context"
                    ],
                    "size_lines": 156,
                    "has_main": false,
                    "docstring": null
                  },
                  "permalink": {
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "types.py": {
                      "functions": [],
                      "classes": [
                        "SqlLabPermalinkValue"
                      ],
                      "imports": [
                        "typing"
                      ],
                      "size_lines": 28,
                      "has_main": false,
                      "docstring": null
                    },
                    "api.py": {
                      "functions": [
                        "post",
                        "get"
                      ],
                      "classes": [
                        "SqlLabPermalinkRestApi"
                      ],
                      "imports": [
                        "logging",
                        "flask",
                        "flask_appbuilder.api",
                        "marshmallow",
                        "superset.commands.sql_lab.permalink.create",
                        "superset.commands.sql_lab.permalink.get",
                        "superset.constants",
                        "superset.extensions",
                        "superset.key_value.exceptions",
                        "superset.sqllab.permalink.exceptions",
                        "superset.sqllab.permalink.schemas",
                        "superset.views.base_api"
                      ],
                      "size_lines": 144,
                      "has_main": false,
                      "docstring": null
                    },
                    "schemas.py": {
                      "functions": [],
                      "classes": [
                        "SqlLabPermalinkSchema"
                      ],
                      "imports": [
                        "marshmallow"
                      ],
                      "size_lines": 52,
                      "has_main": false,
                      "docstring": null
                    },
                    "exceptions.py": {
                      "functions": [],
                      "classes": [
                        "SqlLabPermalinkInvalidStateError",
                        "SqlLabPermalinkCreateFailedError",
                        "SqlLabPermalinkGetFailedError"
                      ],
                      "imports": [
                        "flask_babel",
                        "superset.commands.exceptions"
                      ],
                      "size_lines": 32,
                      "has_main": false,
                      "docstring": null
                    }
                  }
                },
                "daos": {
                  "user.py": {
                    "functions": [
                      "get_by_id",
                      "set_avatar_url"
                    ],
                    "classes": [
                      "UserDAO"
                    ],
                    "imports": [
                      "__future__",
                      "logging",
                      "flask_appbuilder.security.sqla.models",
                      "superset.daos.base",
                      "superset.extensions",
                      "superset.models.user_attributes"
                    ],
                    "size_lines": 43,
                    "has_main": false,
                    "docstring": null
                  },
                  "key_value.py": {
                    "functions": [
                      "get_entry",
                      "get_value",
                      "delete_entry",
                      "delete_expired_entries",
                      "create_entry",
                      "upsert_entry",
                      "update_entry"
                    ],
                    "classes": [
                      "KeyValueDAO"
                    ],
                    "imports": [
                      "__future__",
                      "logging",
                      "datetime",
                      "typing",
                      "uuid",
                      "sqlalchemy",
                      "superset",
                      "superset.daos.base",
                      "superset.key_value.exceptions",
                      "superset.key_value.models",
                      "superset.key_value.types",
                      "superset.key_value.utils",
                      "superset.utils.core"
                    ],
                    "size_lines": 146,
                    "has_main": false,
                    "docstring": null
                  },
                  "query.py": {
                    "functions": [
                      "save_metadata",
                      "get_queries_changed_after",
                      "stop_query"
                    ],
                    "classes": [
                      "QueryDAO",
                      "SavedQueryDAO"
                    ],
                    "imports": [
                      "logging",
                      "datetime",
                      "typing",
                      "superset",
                      "superset.common.db_query_status",
                      "superset.daos.base",
                      "superset.exceptions",
                      "superset.extensions",
                      "superset.models.sql_lab",
                      "superset.queries.filters",
                      "superset.queries.saved_queries.filters",
                      "superset.utils.core",
                      "superset.utils.dates"
                    ],
                    "size_lines": 84,
                    "has_main": false,
                    "docstring": null
                  },
                  "log.py": {
                    "functions": [
                      "get_recent_activity"
                    ],
                    "classes": [
                      "LogDAO"
                    ],
                    "imports": [
                      "datetime",
                      "typing",
                      "humanize",
                      "sqlalchemy",
                      "sqlalchemy.sql",
                      "superset",
                      "superset.daos.base",
                      "superset.models.core",
                      "superset.models.dashboard",
                      "superset.models.slice",
                      "superset.utils.core",
                      "superset.utils.dates"
                    ],
                    "size_lines": 150,
                    "has_main": false,
                    "docstring": null
                  },
                  "database.py": {
                    "functions": [
                      "update",
                      "validate_uniqueness",
                      "validate_update_uniqueness",
                      "get_database_by_name",
                      "build_db_for_connection_test",
                      "get_related_objects",
                      "get_datasets",
                      "get_ssh_tunnel",
                      "update",
                      "get_database"
                    ],
                    "classes": [
                      "DatabaseDAO",
                      "SSHTunnelDAO",
                      "DatabaseUserOAuth2TokensDAO"
                    ],
                    "imports": [
                      "__future__",
                      "logging",
                      "typing",
                      "superset.connectors.sqla.models",
                      "superset.daos.base",
                      "superset.databases.filters",
                      "superset.databases.ssh_tunnel.models",
                      "superset.extensions",
                      "superset.models.core",
                      "superset.models.dashboard",
                      "superset.models.slice",
                      "superset.models.sql_lab",
                      "superset.utils.core",
                      "superset.utils.ssh_tunnel"
                    ],
                    "size_lines": 209,
                    "has_main": false,
                    "docstring": null
                  },
                  "security.py": {
                    "functions": [],
                    "classes": [
                      "RLSDAO"
                    ],
                    "imports": [
                      "superset.connectors.sqla.models",
                      "superset.daos.base"
                    ],
                    "size_lines": 24,
                    "has_main": false,
                    "docstring": null
                  },
                  "annotation_layer.py": {
                    "functions": [
                      "validate_update_uniqueness",
                      "has_annotations",
                      "validate_update_uniqueness"
                    ],
                    "classes": [
                      "AnnotationDAO",
                      "AnnotationLayerDAO"
                    ],
                    "imports": [
                      "logging",
                      "typing",
                      "superset.daos.base",
                      "superset.extensions",
                      "superset.models.annotations"
                    ],
                    "size_lines": 81,
                    "has_main": false,
                    "docstring": null
                  },
                  "__init__.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 17,
                    "has_main": false,
                    "docstring": null
                  },
                  "chart.py": {
                    "functions": [
                      "favorited_ids",
                      "add_favorite",
                      "remove_favorite"
                    ],
                    "classes": [
                      "ChartDAO"
                    ],
                    "imports": [
                      "__future__",
                      "logging",
                      "datetime",
                      "typing",
                      "superset.charts.filters",
                      "superset.daos.base",
                      "superset.extensions",
                      "superset.models.core",
                      "superset.models.slice",
                      "superset.utils.core"
                    ],
                    "size_lines": 79,
                    "has_main": false,
                    "docstring": null
                  },
                  "datasource.py": {
                    "functions": [
                      "get_datasource"
                    ],
                    "classes": [
                      "DatasourceDAO"
                    ],
                    "imports": [
                      "logging",
                      "typing",
                      "superset",
                      "superset.connectors.sqla.models",
                      "superset.daos.base",
                      "superset.daos.exceptions",
                      "superset.models.sql_lab",
                      "superset.utils.core"
                    ],
                    "size_lines": 64,
                    "has_main": false,
                    "docstring": null
                  },
                  "dataset.py": {
                    "functions": [
                      "get_database_by_id",
                      "get_related_objects",
                      "validate_table_exists",
                      "validate_uniqueness",
                      "validate_update_uniqueness",
                      "validate_columns_exist",
                      "validate_columns_uniqueness",
                      "validate_metrics_exist",
                      "validate_metrics_uniqueness",
                      "validate_python_date_format",
                      "update",
                      "update_columns",
                      "update_metrics",
                      "find_dataset_column",
                      "find_dataset_metric",
                      "get_table_by_name"
                    ],
                    "classes": [
                      "DatasetDAO",
                      "DatasetColumnDAO",
                      "DatasetMetricDAO"
                    ],
                    "imports": [
                      "__future__",
                      "logging",
                      "datetime",
                      "typing",
                      "dateutil.parser",
                      "sqlalchemy.exc",
                      "superset.connectors.sqla.models",
                      "superset.daos.base",
                      "superset.extensions",
                      "superset.models.core",
                      "superset.models.dashboard",
                      "superset.models.slice",
                      "superset.sql_parse",
                      "superset.utils.core",
                      "superset.views.base"
                    ],
                    "size_lines": 355,
                    "has_main": false,
                    "docstring": null
                  },
                  "dashboard.py": {
                    "functions": [
                      "get_by_id_or_slug",
                      "get_datasets_for_dashboard",
                      "get_tabs_for_dashboard",
                      "get_charts_for_dashboard",
                      "get_dashboard_changed_on",
                      "get_dashboard_and_slices_changed_on",
                      "get_dashboard_and_datasets_changed_on",
                      "validate_slug_uniqueness",
                      "validate_update_slug_uniqueness",
                      "set_dash_metadata",
                      "favorited_ids",
                      "copy_dashboard",
                      "update_native_filters_config",
                      "update_colors_config",
                      "add_favorite",
                      "remove_favorite",
                      "upsert",
                      "create"
                    ],
                    "classes": [
                      "DashboardDAO",
                      "EmbeddedDashboardDAO"
                    ],
                    "imports": [
                      "__future__",
                      "logging",
                      "datetime",
                      "typing",
                      "flask",
                      "flask_appbuilder.models.sqla.interface",
                      "superset",
                      "superset.commands.dashboard.exceptions",
                      "superset.daos.base",
                      "superset.dashboards.filters",
                      "superset.exceptions",
                      "superset.extensions",
                      "superset.models.core",
                      "superset.models.dashboard",
                      "superset.models.embedded_dashboard",
                      "superset.models.slice",
                      "superset.utils",
                      "superset.utils.core",
                      "superset.utils.dashboard_filter_scopes_converter"
                    ],
                    "size_lines": 468,
                    "has_main": false,
                    "docstring": null
                  },
                  "css.py": {
                    "functions": [],
                    "classes": [
                      "CssTemplateDAO"
                    ],
                    "imports": [
                      "superset.daos.base",
                      "superset.models.core"
                    ],
                    "size_lines": 23,
                    "has_main": false,
                    "docstring": null
                  },
                  "exceptions.py": {
                    "functions": [],
                    "classes": [
                      "DAOException",
                      "DatasourceTypeNotSupportedError",
                      "DatasourceNotFound"
                    ],
                    "imports": [
                      "superset.exceptions"
                    ],
                    "size_lines": 38,
                    "has_main": false,
                    "docstring": null
                  },
                  "base.py": {
                    "functions": [
                      "__init_subclass__",
                      "find_by_id",
                      "find_by_ids",
                      "find_all",
                      "find_one_or_none",
                      "create",
                      "update",
                      "delete"
                    ],
                    "classes": [
                      "BaseDAO"
                    ],
                    "imports": [
                      "__future__",
                      "typing",
                      "flask_appbuilder.models.filters",
                      "flask_appbuilder.models.sqla",
                      "flask_appbuilder.models.sqla.interface",
                      "sqlalchemy.exc",
                      "superset.extensions"
                    ],
                    "size_lines": 187,
                    "has_main": false,
                    "docstring": null
                  },
                  "report.py": {
                    "functions": [
                      "find_by_chart_id",
                      "find_by_chart_ids",
                      "find_by_dashboard_id",
                      "find_by_dashboard_ids",
                      "find_by_database_id",
                      "find_by_database_ids",
                      "find_by_extra_metadata",
                      "validate_unique_creation_method",
                      "validate_update_uniqueness",
                      "create",
                      "update",
                      "find_active",
                      "find_last_success_log",
                      "find_last_entered_working_log",
                      "find_last_error_notification",
                      "bulk_delete_logs"
                    ],
                    "classes": [
                      "ReportScheduleDAO"
                    ],
                    "imports": [
                      "__future__",
                      "logging",
                      "datetime",
                      "typing",
                      "superset.daos.base",
                      "superset.extensions",
                      "superset.reports.filters",
                      "superset.reports.models",
                      "superset.utils",
                      "superset.utils.core"
                    ],
                    "size_lines": 294,
                    "has_main": false,
                    "docstring": null
                  },
                  "tag.py": {
                    "functions": [
                      "create_custom_tagged_objects",
                      "delete_tagged_object",
                      "delete_tags",
                      "get_by_name",
                      "find_by_name",
                      "find_tagged_object",
                      "get_tagged_objects_by_tag_id",
                      "get_tagged_objects_for_tags",
                      "favorite_tag_by_id_for_current_user",
                      "remove_user_favorite_tag",
                      "favorited_ids",
                      "create_tag_relationship"
                    ],
                    "classes": [
                      "TagDAO"
                    ],
                    "imports": [
                      "logging",
                      "operator",
                      "typing",
                      "flask",
                      "sqlalchemy.exc",
                      "superset.commands.tag.exceptions",
                      "superset.commands.tag.utils",
                      "superset.daos.base",
                      "superset.exceptions",
                      "superset.extensions",
                      "superset.models.dashboard",
                      "superset.models.slice",
                      "superset.models.sql_lab",
                      "superset.tags.models",
                      "superset.utils.core"
                    ],
                    "size_lines": 387,
                    "has_main": false,
                    "docstring": null
                  }
                },
                "reports": {
                  "models.py": {
                    "functions": [
                      "__repr__",
                      "crontab_humanized"
                    ],
                    "classes": [
                      "ReportScheduleType",
                      "ReportScheduleValidatorType",
                      "ReportRecipientType",
                      "ReportState",
                      "ReportDataFormat",
                      "ReportCreationMethod",
                      "ReportSourceFormat",
                      "ReportSchedule",
                      "ReportRecipients",
                      "ReportExecutionLog"
                    ],
                    "imports": [
                      "cron_descriptor",
                      "flask_appbuilder",
                      "flask_appbuilder.models.decorators",
                      "sqlalchemy",
                      "sqlalchemy.orm",
                      "sqlalchemy.schema",
                      "sqlalchemy_utils",
                      "superset.extensions",
                      "superset.models.core",
                      "superset.models.dashboard",
                      "superset.models.helpers",
                      "superset.models.slice",
                      "superset.reports.types",
                      "superset.utils.backports",
                      "superset.utils.core"
                    ],
                    "size_lines": 245,
                    "has_main": false,
                    "docstring": "A collection of ORM sqlalchemy models for Superset"
                  },
                  "__init__.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 17,
                    "has_main": false,
                    "docstring": null
                  },
                  "types.py": {
                    "functions": [],
                    "classes": [
                      "ReportScheduleExtra"
                    ],
                    "imports": [
                      "typing",
                      "superset.dashboards.permalink.types"
                    ],
                    "size_lines": 24,
                    "has_main": false,
                    "docstring": null
                  },
                  "api.py": {
                    "functions": [
                      "ensure_alert_reports_enabled",
                      "delete",
                      "post",
                      "put",
                      "bulk_delete",
                      "slack_channels"
                    ],
                    "classes": [
                      "ReportScheduleRestApi"
                    ],
                    "imports": [
                      "logging",
                      "typing",
                      "flask",
                      "flask_appbuilder.api",
                      "flask_appbuilder.hooks",
                      "flask_appbuilder.models.sqla.interface",
                      "flask_babel",
                      "marshmallow",
                      "superset",
                      "superset.charts.filters",
                      "superset.commands.report.create",
                      "superset.commands.report.delete",
                      "superset.commands.report.exceptions",
                      "superset.commands.report.update",
                      "superset.constants",
                      "superset.dashboards.filters",
                      "superset.databases.filters",
                      "superset.exceptions",
                      "superset.extensions",
                      "superset.reports.filters",
                      "superset.reports.models",
                      "superset.reports.schemas",
                      "superset.utils.slack",
                      "superset.views.base_api",
                      "superset.views.filters"
                    ],
                    "size_lines": 591,
                    "has_main": false,
                    "docstring": null
                  },
                  "schemas.py": {
                    "functions": [
                      "validate_crontab",
                      "validate_custom_width",
                      "validate_report_references",
                      "validate_custom_width"
                    ],
                    "classes": [
                      "ValidatorConfigJSONSchema",
                      "ReportRecipientConfigJSONSchema",
                      "ReportRecipientSchema",
                      "ReportSchedulePostSchema",
                      "ReportSchedulePutSchema",
                      "SlackChannelSchema",
                      "Meta"
                    ],
                    "imports": [
                      "typing",
                      "croniter",
                      "flask",
                      "flask_babel",
                      "marshmallow",
                      "marshmallow.validate",
                      "pytz",
                      "superset.reports.models"
                    ],
                    "size_lines": 416,
                    "has_main": false,
                    "docstring": null
                  },
                  "filters.py": {
                    "functions": [
                      "apply",
                      "apply"
                    ],
                    "classes": [
                      "ReportScheduleFilter",
                      "ReportScheduleAllTextFilter"
                    ],
                    "imports": [
                      "typing",
                      "flask_babel",
                      "sqlalchemy",
                      "sqlalchemy.orm.query",
                      "superset",
                      "superset.reports.models",
                      "superset.views.base"
                    ],
                    "size_lines": 58,
                    "has_main": false,
                    "docstring": null
                  },
                  "logs": {
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 17,
                      "has_main": false,
                      "docstring": null
                    },
                    "api.py": {
                      "functions": [
                        "ensure_alert_reports_enabled",
                        "_apply_layered_relation_to_rison",
                        "get_list",
                        "get"
                      ],
                      "classes": [
                        "ReportExecutionLogRestApi"
                      ],
                      "imports": [
                        "logging",
                        "typing",
                        "flask",
                        "flask_appbuilder.api",
                        "flask_appbuilder.api.schemas",
                        "flask_appbuilder.hooks",
                        "flask_appbuilder.models.sqla.interface",
                        "superset",
                        "superset.constants",
                        "superset.reports.logs.schemas",
                        "superset.reports.models",
                        "superset.views.base_api"
                      ],
                      "size_lines": 209,
                      "has_main": false,
                      "docstring": null
                    },
                    "schemas.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [],
                      "size_lines": 30,
                      "has_main": false,
                      "docstring": null
                    }
                  },
                  "notifications": {
                    "__init__.py": {
                      "functions": [
                        "create_notification"
                      ],
                      "classes": [],
                      "imports": [
                        "superset.reports.models",
                        "superset.reports.notifications.base",
                        "superset.reports.notifications.email",
                        "superset.reports.notifications.slack",
                        "superset.reports.notifications.slackv2"
                      ],
                      "size_lines": 37,
                      "has_main": false,
                      "docstring": null
                    },
                    "slack_mixin.py": {
                      "functions": [
                        "_message_template",
                        "_error_template",
                        "_get_body"
                      ],
                      "classes": [
                        "SlackMixin"
                      ],
                      "imports": [
                        "pandas",
                        "flask_babel",
                        "superset.reports.notifications.base"
                      ],
                      "size_lines": 125,
                      "has_main": false,
                      "docstring": null
                    },
                    "email.py": {
                      "functions": [
                        "_name",
                        "_get_smtp_domain",
                        "_error_template",
                        "_get_content",
                        "_get_subject",
                        "_parse_name",
                        "_get_call_to_action",
                        "_get_to",
                        "_get_cc",
                        "_get_bcc",
                        "send"
                      ],
                      "classes": [
                        "EmailContent",
                        "EmailNotification"
                      ],
                      "imports": [
                        "logging",
                        "textwrap",
                        "dataclasses",
                        "datetime",
                        "email.utils",
                        "typing",
                        "nh3",
                        "flask_babel",
                        "pytz",
                        "superset",
                        "superset.exceptions",
                        "superset.reports.models",
                        "superset.reports.notifications.base",
                        "superset.reports.notifications.exceptions",
                        "superset.utils",
                        "superset.utils.core",
                        "superset.utils.decorators"
                      ],
                      "size_lines": 263,
                      "has_main": false,
                      "docstring": null
                    },
                    "exceptions.py": {
                      "functions": [],
                      "classes": [
                        "NotificationError",
                        "SlackV1NotificationError",
                        "NotificationParamException",
                        "NotificationAuthorizationException",
                        "NotificationUnprocessableException",
                        "NotificationMalformedException"
                      ],
                      "imports": [
                        "superset.exceptions"
                      ],
                      "size_lines": 58,
                      "has_main": false,
                      "docstring": null
                    },
                    "base.py": {
                      "functions": [
                        "__init_subclass__",
                        "__init__",
                        "send"
                      ],
                      "classes": [
                        "NotificationContent",
                        "BaseNotification"
                      ],
                      "imports": [
                        "dataclasses",
                        "typing",
                        "pandas",
                        "superset.reports.models",
                        "superset.utils.core"
                      ],
                      "size_lines": 66,
                      "has_main": false,
                      "docstring": null
                    },
                    "slack.py": {
                      "functions": [
                        "_get_channel",
                        "_get_inline_files",
                        "send"
                      ],
                      "classes": [
                        "SlackNotification"
                      ],
                      "imports": [
                        "logging",
                        "collections.abc",
                        "io",
                        "typing",
                        "backoff",
                        "flask",
                        "slack_sdk.errors",
                        "superset.reports.models",
                        "superset.reports.notifications.base",
                        "superset.reports.notifications.exceptions",
                        "superset.reports.notifications.slack_mixin",
                        "superset.utils",
                        "superset.utils.core",
                        "superset.utils.decorators",
                        "superset.utils.slack"
                      ],
                      "size_lines": 136,
                      "has_main": false,
                      "docstring": null
                    },
                    "slackv2.py": {
                      "functions": [
                        "_get_channels",
                        "_get_inline_files",
                        "send"
                      ],
                      "classes": [
                        "SlackV2Notification"
                      ],
                      "imports": [
                        "logging",
                        "collections.abc",
                        "io",
                        "typing",
                        "backoff",
                        "flask",
                        "slack_sdk.errors",
                        "superset.reports.models",
                        "superset.reports.notifications.base",
                        "superset.reports.notifications.exceptions",
                        "superset.reports.notifications.slack_mixin",
                        "superset.utils",
                        "superset.utils.core",
                        "superset.utils.decorators",
                        "superset.utils.slack"
                      ],
                      "size_lines": 133,
                      "has_main": false,
                      "docstring": null
                    }
                  }
                },
                "thumbnails": {
                  "digest.py": {
                    "functions": [
                      "_adjust_string_for_executor",
                      "_adjust_string_with_rls",
                      "get_dashboard_digest",
                      "get_chart_digest"
                    ],
                    "classes": [],
                    "imports": [
                      "__future__",
                      "logging",
                      "typing",
                      "flask",
                      "superset",
                      "superset.tasks.exceptions",
                      "superset.tasks.types",
                      "superset.tasks.utils",
                      "superset.utils.core",
                      "superset.utils.hashing",
                      "superset.connectors.sqla.models",
                      "superset.models.dashboard",
                      "superset.models.slice"
                    ],
                    "size_lines": 139,
                    "has_main": false,
                    "docstring": null
                  },
                  "__init__.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 17,
                    "has_main": false,
                    "docstring": null
                  }
                },
                "sql": {
                  "__init__.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 17,
                    "has_main": false,
                    "docstring": null
                  },
                  "parse.py": {
                    "functions": [
                      "split_kql",
                      "extract_tables_from_statement",
                      "is_cte",
                      "__str__",
                      "__eq__",
                      "__init__",
                      "split_script",
                      "_parse_statement",
                      "_extract_tables_from_statement",
                      "format",
                      "get_settings",
                      "is_mutating",
                      "optimize",
                      "__str__",
                      "__init__",
                      "_parse",
                      "split_script",
                      "_parse_statement",
                      "_extract_tables_from_statement",
                      "is_mutating",
                      "format",
                      "_fallback_formatting",
                      "get_settings",
                      "optimize",
                      "split_script",
                      "_parse_statement",
                      "_extract_tables_from_statement",
                      "format",
                      "get_settings",
                      "is_mutating",
                      "optimize",
                      "__init__",
                      "format",
                      "get_settings",
                      "has_mutation",
                      "optimize"
                    ],
                    "classes": [
                      "Table",
                      "BaseSQLStatement",
                      "SQLStatement",
                      "KQLSplitState",
                      "KustoKQLStatement",
                      "SQLScript"
                    ],
                    "imports": [
                      "__future__",
                      "copy",
                      "enum",
                      "logging",
                      "re",
                      "urllib.parse",
                      "collections.abc",
                      "dataclasses",
                      "typing",
                      "sqlglot",
                      "sqlparse",
                      "deprecation",
                      "sqlglot",
                      "sqlglot.dialects.dialect",
                      "sqlglot.errors",
                      "sqlglot.optimizer.pushdown_predicates",
                      "sqlglot.optimizer.scope",
                      "superset.exceptions",
                      "superset.sql.dialects.firebolt"
                    ],
                    "size_lines": 759,
                    "has_main": false,
                    "docstring": null
                  },
                  "dialects": {
                    "firebolt.py": {
                      "functions": [
                        "_negate_range",
                        "not_sql",
                        "_parse_join",
                        "_parse_unnest",
                        "join_sql"
                      ],
                      "classes": [
                        "Firebolt",
                        "FireboltOld",
                        "Parser",
                        "Generator",
                        "Tokenizer",
                        "Parser",
                        "Generator"
                      ],
                      "imports": [
                        "__future__",
                        "sqlglot",
                        "sqlglot.dialects.dialect",
                        "sqlglot.helper",
                        "sqlglot.tokens"
                      ],
                      "size_lines": 196,
                      "has_main": false,
                      "docstring": null
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [
                        "firebolt"
                      ],
                      "size_lines": 21,
                      "has_main": false,
                      "docstring": null
                    }
                  }
                }
              },
              "RELEASING": {
                "verify_release.py": {
                  "functions": [
                    "get_sha512_hash",
                    "read_sha512_file",
                    "verify_sha512",
                    "get_gpg_info",
                    "verify_key",
                    "verify_sha512_and_rsa"
                  ],
                  "classes": [],
                  "imports": [
                    "re",
                    "subprocess",
                    "sys",
                    "typing",
                    "requests"
                  ],
                  "size_lines": 129,
                  "has_main": true,
                  "docstring": null
                },
                "changelog.py": {
                  "functions": [
                    "print_title",
                    "cli",
                    "compare",
                    "change_log",
                    "__eq__",
                    "__repr__",
                    "__init__",
                    "_fetch_github_pr",
                    "_get_github_login",
                    "_has_commit_migrations",
                    "_get_pull_request_details",
                    "_is_risk_pull_request",
                    "_get_changelog_version_head",
                    "_parse_change_log",
                    "__repr__",
                    "__iter__",
                    "__init__",
                    "git_ref",
                    "logs",
                    "fetch",
                    "diff",
                    "__repr__",
                    "_git_get_current_head",
                    "_git_checkout",
                    "_git_logs",
                    "_parse_log"
                  ],
                  "classes": [
                    "GitLog",
                    "GitChangeLog",
                    "GitLogs",
                    "BaseParameters"
                  ],
                  "imports": [
                    "csv",
                    "os",
                    "re",
                    "sys",
                    "collections.abc",
                    "dataclasses",
                    "typing",
                    "click",
                    "click.core",
                    "github"
                  ],
                  "size_lines": 410,
                  "has_main": false,
                  "docstring": null
                },
                "generate_email.py": {
                  "functions": [
                    "string_comma_to_list",
                    "render_template",
                    "cli",
                    "vote_pmc",
                    "result_pmc",
                    "announce",
                    "__init__",
                    "__repr__"
                  ],
                  "classes": [
                    "BaseParameters"
                  ],
                  "imports": [
                    "typing",
                    "click.core",
                    "jinja2",
                    "click"
                  ],
                  "size_lines": 155,
                  "has_main": false,
                  "docstring": null
                }
              }
            }
          }
        },
        "workspace_1747287040117": {
          "fstring_converter.py": {
            "functions": [
              "direct_fstring_conversion",
              "convert_string",
              "convert_file",
              "__init__",
              "leave_FormattedString",
              "visit_FormattedStringExpression",
              "preprocess_escaped_braces",
              "fix_mixed_braces",
              "replace_escaped_only",
              "replace_fstring"
            ],
            "classes": [
              "FStringToFormatTransformer"
            ],
            "imports": [
              "libcst",
              "typing",
              "re",
              "sys"
            ],
            "size_lines": 374,
            "has_main": true,
            "docstring": null
          },
          "test_format_to_fstring_converter.py": {
            "functions": [
              "normalize_code",
              "run_tests",
              "normalize_quotes",
              "are_equivalent"
            ],
            "classes": [],
            "imports": [
              "sys",
              "re",
              "format_to_fstring_converter"
            ],
            "size_lines": 288,
            "has_main": true,
            "docstring": null
          },
          "test_fstring_converter.py": {
            "functions": [
              "normalize_code",
              "run_tests",
              "normalize_quotes",
              "are_equivalent"
            ],
            "classes": [],
            "imports": [
              "sys",
              "re",
              "fstring_converter"
            ],
            "size_lines": 229,
            "has_main": true,
            "docstring": null
          },
          "editme.py": {
            "functions": [
              "save_safetensors"
            ],
            "classes": [],
            "imports": [
              "os",
              "rp.r",
              "safetensors.torch"
            ],
            "size_lines": 49,
            "has_main": false,
            "docstring": null
          },
          "format_to_fstring_converter.py": {
            "functions": [
              "convert_string",
              "convert_file",
              "__init__",
              "set_original_code",
              "visit_Module",
              "leave_SimpleString",
              "visit_Call",
              "leave_Call",
              "_format_to_fstring_content"
            ],
            "classes": [
              "FormatToFStringTransformer"
            ],
            "imports": [
              "libcst",
              "typing",
              "re",
              "sys"
            ],
            "size_lines": 601,
            "has_main": true,
            "docstring": null
          }
        },
        "workspace_1747070352525": {
          "editme.py": {
            "functions": [],
            "classes": [],
            "imports": [],
            "size_lines": 1,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1743096526062": {
          "editme.py": {
            "functions": [
              "little_red_riding_hood",
              "grandmother_house"
            ],
            "classes": [],
            "imports": [],
            "size_lines": 171,
            "has_main": true,
            "docstring": null
          }
        },
        "workspace_1742724311088": {
          "editme.py": {
            "error": "invalid syntax (<unknown>, line 1)"
          }
        },
        "workspace_1750277154801": {
          "editme.py": {
            "functions": [
              "as_rgba_float_color",
              "_skia_text_to_image"
            ],
            "classes": [],
            "imports": [
              "skia"
            ],
            "size_lines": 146,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1743363324851": {
          "editme.py": {
            "functions": [
              "has_len",
              "is_number",
              "__init__",
              "__call__",
              "__iter__",
              "__len__",
              "__init__",
              "__iter__",
              "__next__",
              "__len__"
            ],
            "classes": [
              "eta",
              "IteratorWithLen"
            ],
            "imports": [
              "numbers"
            ],
            "size_lines": 86,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1746610114013": {
          "editme.py": {
            "functions": [
              "argmax_2d"
            ],
            "classes": [],
            "imports": [
              "numpy"
            ],
            "size_lines": 19,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1749808430332": {
          "editme.py": {
            "functions": [],
            "classes": [],
            "imports": [],
            "size_lines": 8,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1752299321586": {
          "scratchpad.py": {
            "functions": [],
            "classes": [],
            "imports": [
              "manim"
            ],
            "size_lines": 21,
            "has_main": false,
            "docstring": null
          },
          "editme.py": {
            "functions": [
              "__init__",
              "play_animation",
              "construct"
            ],
            "classes": [
              "InteractiveScene",
              "MorphingAnimation"
            ],
            "imports": [
              "pygame",
              "numpy",
              "PIL",
              "manim"
            ],
            "size_lines": 122,
            "has_main": false,
            "docstring": null
          },
          "chcha.py": {
            "functions": [
              "deriv",
              "construct",
              "update_pendulum"
            ],
            "classes": [
              "DoublePendulum"
            ],
            "imports": [
              "manim",
              "numpy",
              "scipy.integrate"
            ],
            "size_lines": 125,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1750276682066": {
          "editme.py": {
            "functions": [
              "_skia_text_to_image"
            ],
            "classes": [],
            "imports": [
              "skia"
            ],
            "size_lines": 122,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1752030285886": {
          "scratchpad.py": {
            "functions": [
              "test_basic",
              "test_multiline",
              "test_custom_params",
              "test_threaded",
              "test_thread_safety",
              "test_save_image",
              "test_fallback_function"
            ],
            "classes": [],
            "imports": [
              "sys",
              "editme",
              "numpy",
              "threading",
              "time",
              "PIL",
              "editme"
            ],
            "size_lines": 79,
            "has_main": true,
            "docstring": null
          },
          "editme.py": {
            "functions": [
              "skia_text_to_image_multiline",
              "skia_text_with_fallback"
            ],
            "classes": [],
            "imports": [
              "skia",
              "numpy",
              "math",
              "threading"
            ],
            "size_lines": 109,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1748836531836": {
          "editme.py": {
            "functions": [
              "cv_distance_transform"
            ],
            "classes": [],
            "imports": [
              "cv2"
            ],
            "size_lines": 48,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1742724494024": {
          "editme.py": {
            "functions": [
              "_run_claude_code",
              "commit_thread"
            ],
            "classes": [],
            "imports": [],
            "size_lines": 51,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1742724679418": {
          "editme.py": {
            "functions": [
              "_run_claude_code",
              "commit_thread"
            ],
            "classes": [],
            "imports": [],
            "size_lines": 52,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1752365851632": {
          "editme.py": {
            "functions": [
              "skia_text_to_image"
            ],
            "classes": [],
            "imports": [
              "skia",
              "numpy",
              "math"
            ],
            "size_lines": 277,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1744735854120": {
          "editme.py": {
            "functions": [],
            "classes": [],
            "imports": [],
            "size_lines": 1,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1744508708834": {
          "editme.py": {
            "error": "unterminated string literal (detected at line 476) (<unknown>, line 476)"
          }
        },
        "workspace_1747596690958": {
          "editme.py": {
            "functions": [
              "temporary_seed_all"
            ],
            "classes": [],
            "imports": [
              "numpy",
              "torch"
            ],
            "size_lines": 29,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1748685021129": {
          "editme.py": {
            "functions": [],
            "classes": [],
            "imports": [],
            "size_lines": 56,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1749491374667": {
          "editme.py": {
            "functions": [
              "_pool_resize_image",
              "cv_resize_image",
              "as_byte_image",
              "get_image_height",
              "get_image_width",
              "is_binary_image",
              "is_image",
              "is_number",
              "pip_import",
              "as_numpy_array",
              "connected_to_internet",
              "fansi_print",
              "input_yes_no",
              "is_byte_image",
              "is_float_image",
              "is_grayscale_image",
              "is_pil_image",
              "is_rgb_image",
              "is_rgba_image",
              "is_torch_image",
              "is_torch_tensor",
              "module_exists",
              "pip_install",
              "running_in_google_colab",
              "currently_running_posix",
              "fansi",
              "input_conditional",
              "as_rgb_float_color",
              "float_color_to_ansi256",
              "float_color_to_byte_color",
              "terminal_supports_ansi",
              "as_rgba_float_color",
              "clamp",
              "currently_running_windows",
              "detuple",
              "color_name_to_float_color",
              "hex_color_to_float_color",
              "is_numpy_array",
              "hex_color_to_byte_color",
              "offer_to_blacklist"
            ],
            "classes": [],
            "imports": [
              "cv2",
              "numpy",
              "cv2",
              "numbers",
              "importlib",
              "socket",
              "sys",
              "os",
              "os",
              "imp",
              "webcolors",
              "importlib.util",
              "colorama"
            ],
            "size_lines": 1196,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1743379198155": {
          "editme.py": {
            "error": "invalid decimal literal (<unknown>, line 1)"
          }
        },
        "workspace_1743096644409": {
          "editme.py": {
            "functions": [
              "little_red_riding_hood",
              "grandmother_house"
            ],
            "classes": [],
            "imports": [],
            "size_lines": 230,
            "has_main": true,
            "docstring": null
          }
        },
        "workspace_1743052911554": {
          "editme.py": {
            "functions": [],
            "classes": [],
            "imports": [],
            "size_lines": 13,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1743052725406": {
          "editme.py": {
            "functions": [],
            "classes": [],
            "imports": [],
            "size_lines": 1,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1742725114549": {
          "editme.py": {
            "functions": [
              "_run_claude_code",
              "commit_thread"
            ],
            "classes": [],
            "imports": [
              "subprocess"
            ],
            "size_lines": 54,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1743054942394": {
          "editme.py": {
            "functions": [
              "_disable_terminal_mouse_reporting",
              "move_cursor_to_bottom_and_new_line"
            ],
            "classes": [],
            "imports": [],
            "size_lines": 30,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1747770743076": {
          "editme.py": {
            "functions": [
              "laplacian_blend"
            ],
            "classes": [],
            "imports": [
              "cv2",
              "numpy"
            ],
            "size_lines": 69,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1747541927669": {
          "editme.py": {
            "functions": [],
            "classes": [],
            "imports": [],
            "size_lines": 21,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1743306218820": {
          "editme.py": {
            "functions": [
              "_eta",
              "extract_zip_file",
              "_extract_archive_via_pyunpack",
              "__init__",
              "__call__",
              "__iter__",
              "__len__",
              "fansi_progress",
              "display_eta",
              "out"
            ],
            "classes": [
              "eta"
            ],
            "imports": [
              "datetime",
              "pyunpack",
              "zipfile",
              "tarfile"
            ],
            "size_lines": 234,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1743320439803": {
          "editme.py": {
            "functions": [
              "autoformat_bash"
            ],
            "classes": [],
            "imports": [
              "subprocess",
              "tempfile",
              "os",
              "beautysh"
            ],
            "size_lines": 106,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1747364362316": {
          "editme.py": {
            "functions": [
              "random_chance",
              "play_sound",
              "ring_cowbell",
              "text_to_speech",
              "display_epic_counter",
              "main",
              "test_sounds"
            ],
            "classes": [],
            "imports": [
              "random",
              "time",
              "os",
              "subprocess",
              "glob",
              "icecream"
            ],
            "size_lines": 214,
            "has_main": true,
            "docstring": null
          },
          "duck_simulation.py": {
            "functions": [
              "draw_water",
              "draw_grass",
              "draw_sun",
              "draw_bread",
              "draw_duck",
              "check_bread_collision",
              "update_duck_position",
              "main"
            ],
            "classes": [],
            "imports": [
              "pygame",
              "sys",
              "random",
              "math",
              "pygame"
            ],
            "size_lines": 201,
            "has_main": true,
            "docstring": null
          },
          "frak_or_fight.py": {
            "functions": [
              "clear_screen",
              "display_health",
              "display_scoreboard",
              "display_action_result",
              "get_player_choice",
              "main",
              "__init__",
              "take_damage",
              "is_alive",
              "reset",
              "choose_action"
            ],
            "classes": [
              "Fighter"
            ],
            "imports": [
              "random",
              "time",
              "os",
              "sys"
            ],
            "size_lines": 265,
            "has_main": true,
            "docstring": "Frak or Fight Game - A simple text-based battle game"
          }
        },
        "workspace_1744085631762": {
          "editme.py": {
            "functions": [
              "_truncate_string_floats",
              "replace"
            ],
            "classes": [],
            "imports": [
              "re"
            ],
            "size_lines": 25,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1752175251134": {
          "test_video_stream.py": {
            "functions": [
              "create_test_frame",
              "test_encoding_decoding",
              "test_dependencies",
              "main"
            ],
            "classes": [],
            "imports": [
              "numpy",
              "cv2",
              "time",
              "sys",
              "pathlib",
              "video_stream",
              "cv2",
              "numpy",
              "requests",
              "traceback"
            ],
            "size_lines": 170,
            "has_main": true,
            "docstring": "Test script for video streaming functionality.\n\nThis script tests the video streaming classes without requiring a webcam.\nIt creates synthetic test frames and verifies encoding/decoding works correctly."
          },
          "video_stream_demo.py": {
            "functions": [
              "run_video_server",
              "run_video_client",
              "main"
            ],
            "classes": [],
            "imports": [
              "argparse",
              "sys",
              "time",
              "threading",
              "traceback",
              "pathlib",
              "rp.experimental.web_evaluator",
              "video_stream",
              "cv2"
            ],
            "size_lines": 198,
            "has_main": true,
            "docstring": "Video Stream Demo using web_evaluator\n\nThis script demonstrates how to use the web_evaluator module with the video streaming classes\nto create a real-time video streaming system between a server and client.\n\nUsage:\n    1. Start the server: python video_stream_demo.py server\n    2. Start the client: python video_stream_demo.py client [server_ip]\n    \nThe server will capture video from the webcam and compress it using delta compression.\nThe client will receive the compressed video data and display it in real-time."
          },
          "editme.py": {
            "functions": [],
            "classes": [],
            "imports": [],
            "size_lines": 1,
            "has_main": false,
            "docstring": null
          },
          "video_stream.py": {
            "functions": [
              "__init__",
              "start_capture",
              "stop_capture",
              "_capture_loop",
              "get_frame_delta",
              "_encode_full_frame",
              "_encode_delta_frame",
              "__init__",
              "decode_and_display",
              "_decode_full_frame",
              "_decode_delta_frame",
              "close",
              "create_server_encoder_code",
              "create_get_frame_code",
              "create_stop_encoder_code"
            ],
            "classes": [
              "VideoStreamEncoder",
              "VideoStreamDecoder",
              "VideoStreamManager"
            ],
            "imports": [
              "cv2",
              "numpy",
              "threading",
              "time",
              "io",
              "base64",
              "typing",
              "queue"
            ],
            "size_lines": 282,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1747728002127": {
          "editme.py": {
            "functions": [
              "shift_video"
            ],
            "classes": [],
            "imports": [
              "numpy"
            ],
            "size_lines": 35,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1748837086327": {
          "editme.py": {
            "functions": [
              "dot",
              "min_pos"
            ],
            "classes": [],
            "imports": [
              "rp"
            ],
            "size_lines": 27,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1747853578294": {
          "editme.py": {
            "error": "invalid decimal literal (<unknown>, line 13)"
          }
        },
        "workspace_1747862541156": {
          "editme.py": {
            "functions": [
              "globalize_locals",
              "wrapper",
              "trace_func"
            ],
            "classes": [],
            "imports": [
              "inspect",
              "functools",
              "sys",
              "types"
            ],
            "size_lines": 137,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1743306692618": {
          "editme.py": {
            "functions": [
              "_eta",
              "_extract_archive_via_pyunpack",
              "extract_zip_file",
              "__init__",
              "__call__",
              "__iter__",
              "__len__",
              "fansi_progress",
              "display_eta",
              "out"
            ],
            "classes": [
              "eta"
            ],
            "imports": [
              "datetime",
              "pyunpack",
              "zipfile",
              "tarfile"
            ],
            "size_lines": 224,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1742724705495": {
          "editme.py": {
            "error": "invalid syntax (<unknown>, line 1)"
          }
        },
        "workspace_1753573569709": {
          "editme.py": {
            "functions": [
              "graph_to_json",
              "create_graph_visualization",
              "start_server",
              "do_GET"
            ],
            "classes": [
              "Handler"
            ],
            "imports": [
              "json",
              "http.server",
              "socketserver",
              "webbrowser",
              "threading",
              "time"
            ],
            "size_lines": 285,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1745958023885": {
          "editme.py": {
            "functions": [
              "to_grayscale",
              "laplacian_blend",
              "build_pyramid"
            ],
            "classes": [],
            "imports": [
              "torch",
              "torch",
              "torch.nn.functional"
            ],
            "size_lines": 150,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1743379284909": {
          "editme.py": {
            "error": "invalid decimal literal (<unknown>, line 1)"
          }
        },
        "workspace_1743396675402": {
          "editme.py": {
            "functions": [
              "scatter_add_mean"
            ],
            "classes": [],
            "imports": [
              "torch",
              "rp"
            ],
            "size_lines": 64,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1743052287708": {
          "editme.py": {
            "functions": [],
            "classes": [],
            "imports": [],
            "size_lines": 1,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1750205271076": {
          "editme.py": {
            "functions": [],
            "classes": [],
            "imports": [],
            "size_lines": 3,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1747510546149": {
          "editme.py": {
            "functions": [
              "make_parent_directory",
              "save_safetensors",
              "test_save_safetensors"
            ],
            "classes": [],
            "imports": [
              "os",
              "os",
              "rp.r",
              "safetensors.torch",
              "tqdm",
              "torch",
              "tempfile",
              "os",
              "rp.r",
              "safetensors.torch",
              "safetensors"
            ],
            "size_lines": 125,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1743054652315": {
          "editme.py": {
            "functions": [
              "disable_mouse_reporting"
            ],
            "classes": [],
            "imports": [],
            "size_lines": 20,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1753298371726": {
          "editme.py": {
            "functions": [],
            "classes": [],
            "imports": [],
            "size_lines": 30,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1744534737369": {
          "editme.py": {
            "functions": [
              "random_color_video"
            ],
            "classes": [],
            "imports": [
              "numpy"
            ],
            "size_lines": 8,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1750210174997": {
          "test_rgba.py": {
            "functions": [],
            "classes": [],
            "imports": [
              "rp",
              "rp",
              "editme"
            ],
            "size_lines": 75,
            "has_main": false,
            "docstring": null
          },
          "editme.py": {
            "functions": [
              "cv_draw_arrow",
              "cv_draw_arrows"
            ],
            "classes": [],
            "imports": [
              "rp",
              "rp",
              "sys"
            ],
            "size_lines": 201,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1754437731771": {
          "editme.py": {
            "functions": [
              "create_motion_blur_image"
            ],
            "classes": [],
            "imports": [],
            "size_lines": 60,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1746135119074": {
          "editme.py": {
            "functions": [
              "send_text_message"
            ],
            "classes": [],
            "imports": [
              "requests",
              "json"
            ],
            "size_lines": 66,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1752188210558": {
          "editme.py": {
            "functions": [
              "__init__",
              "push_bytes",
              "close"
            ],
            "classes": [
              "VideoDecoderBytes"
            ],
            "imports": [
              "os",
              "selectors",
              "ffmpeg",
              "numpy"
            ],
            "size_lines": 64,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1747071129067": {
          "editme.py": {
            "functions": [
              "start_server",
              "stop_server",
              "is_server_running",
              "run_server_thread"
            ],
            "classes": [],
            "imports": [
              "rp.web_evaluator",
              "threading",
              "signal",
              "sys",
              "os",
              "ctypes"
            ],
            "size_lines": 75,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1743054588425": {
          "editme.py": {
            "functions": [
              "clear_screen",
              "rgb_to_ansi",
              "hsv_to_rgb",
              "rainbow_color",
              "main",
              "__init__",
              "update",
              "explode",
              "is_dead",
              "render",
              "__init__",
              "render"
            ],
            "classes": [
              "Firework",
              "WavyText"
            ],
            "imports": [
              "math",
              "os",
              "random",
              "sys",
              "time",
              "typing"
            ],
            "size_lines": 218,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1743053006722": {
          "editme.py": {
            "functions": [
              "new_cursor_pos",
              "insert_cursor",
              "test_cursor_movement"
            ],
            "classes": [],
            "imports": [
              "difflib"
            ],
            "size_lines": 149,
            "has_main": true,
            "docstring": null
          }
        },
        "workspace_1754329292901": {
          "editme.py": {
            "functions": [
              "blend_images"
            ],
            "classes": [],
            "imports": [],
            "size_lines": 191,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1753405898478": {
          "editme.py": {
            "functions": [
              "get_arxiv_bibliography"
            ],
            "classes": [],
            "imports": [
              "urllib.request",
              "xml.dom"
            ],
            "size_lines": 53,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1743052783081": {
          "editme.py": {
            "functions": [],
            "classes": [],
            "imports": [],
            "size_lines": 1,
            "has_main": false,
            "docstring": "hell"
          }
        },
        "workspace_1747706192983": {
          "editme.py": {
            "functions": [
              "download_dataset"
            ],
            "classes": [],
            "imports": [
              "datasets"
            ],
            "size_lines": 30,
            "has_main": true,
            "docstring": null
          }
        },
        "workspace_1742724728293": {
          "editme.py": {
            "error": "invalid syntax (<unknown>, line 1)"
          }
        },
        "workspace_1747539813409": {
          "editme.py": {
            "functions": [
              "use_prefix_import"
            ],
            "classes": [],
            "imports": [
              "re"
            ],
            "size_lines": 107,
            "has_main": true,
            "docstring": null
          }
        },
        "workspace_1743052848179": {
          "editme.py": {
            "functions": [],
            "classes": [],
            "imports": [],
            "size_lines": 1,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1743052871659": {
          "editme.py": {
            "functions": [],
            "classes": [],
            "imports": [],
            "size_lines": 1,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1743051672048": {
          "editme.py": {
            "functions": [],
            "classes": [],
            "imports": [],
            "size_lines": 1,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1743389664141": {
          "editme.py": {
            "functions": [
              "varargs",
              "longest_common_prefix",
              "longest_common_suffix",
              "pip_import",
              "longest_common_substring",
              "wrapper"
            ],
            "classes": [],
            "imports": [
              "functools",
              "importlib",
              "pylcs",
              "pip"
            ],
            "size_lines": 117,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1743054618628": {
          "editme.py": {
            "functions": [
              "clear_screen",
              "rgb_to_ansi",
              "hsv_to_rgb",
              "rainbow_color",
              "main",
              "__init__",
              "update",
              "explode",
              "is_dead",
              "render",
              "__init__",
              "render"
            ],
            "classes": [
              "Firework",
              "WavyText"
            ],
            "imports": [
              "math",
              "os",
              "random",
              "sys",
              "time",
              "typing"
            ],
            "size_lines": 218,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1750274523160": {
          "editme.py": {
            "functions": [
              "skia_text_to_image"
            ],
            "classes": [],
            "imports": [
              "skia"
            ],
            "size_lines": 138,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1747854669493": {
          "editme.py": {
            "functions": [],
            "classes": [],
            "imports": [
              "os",
              "gdown"
            ],
            "size_lines": 12,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1747773306051": {
          "editme.py": {
            "functions": [
              "laplacian_blend"
            ],
            "classes": [],
            "imports": [
              "cv2",
              "numpy"
            ],
            "size_lines": 86,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1743052581139": {
          "editme.py": {
            "functions": [],
            "classes": [],
            "imports": [],
            "size_lines": 1,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1744085584446": {
          "editme.py": {
            "functions": [
              "_truncate_string_floats",
              "replace"
            ],
            "classes": [],
            "imports": [
              "re"
            ],
            "size_lines": 25,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1742724427898": {
          "editme.py": {
            "error": "invalid syntax (<unknown>, line 1)"
          }
        },
        "workspace_1748637097121": {
          "editme.py": {
            "error": "invalid syntax (<unknown>, line 67)"
          }
        },
        "workspace_1750274398549": {
          "editme.py": {
            "functions": [
              "skia_text_to_image"
            ],
            "classes": [],
            "imports": [
              "skia"
            ],
            "size_lines": 117,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1752026706450": {
          "editme.py": {
            "functions": [
              "skia_text_to_image"
            ],
            "classes": [],
            "imports": [
              "skia"
            ],
            "size_lines": 107,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1754416246893": {
          "editme.py": {
            "functions": [
              "readlines_backwards"
            ],
            "classes": [],
            "imports": [],
            "size_lines": 14,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1749165416529": {
          "editme.py": {
            "functions": [
              "get_next_free_port"
            ],
            "classes": [],
            "imports": [],
            "size_lines": 23,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1748835650410": {
          "editme.py": {
            "functions": [
              "cv_distance_transform"
            ],
            "classes": [],
            "imports": [
              "cv2",
              "numpy"
            ],
            "size_lines": 37,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1750203165206": {
          "editme.py": {
            "functions": [
              "add_drift",
              "reverse_tracks",
              "zoom_tracks",
              "horz_mirror_tracks",
              "scale_deltas"
            ],
            "classes": [],
            "imports": [
              "torch",
              "torch",
              "torch"
            ],
            "size_lines": 144,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1747769832988": {
          "editme.py": {
            "functions": [],
            "classes": [],
            "imports": [],
            "size_lines": 1,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1747068671642": {
          "editme.py": {
            "functions": [],
            "classes": [],
            "imports": [],
            "size_lines": 1,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1746512098402": {
          "editme.py": {
            "functions": [
              "randomly_sampled_triangles",
              "randomly_sampled_points_from_triangles",
              "randomly_sampled_points_from_mesh_object",
              "randomly_sampled_point_from_mesh_object",
              "two_objects_intersect",
              "intersects_any_object",
              "set_frame_number",
              "set_meshes",
              "randomly_place_prop_object",
              "randomly_place_prop_objects",
              "generate_random_prop_object_animation"
            ],
            "classes": [],
            "imports": [
              "bpy",
              "bpy_extras",
              "bpy_types",
              "bpy_extras.mesh_utils",
              "bmesh",
              "random",
              "math",
              "bpy_types",
              "mathutils",
              "mathutils.bvhtree"
            ],
            "size_lines": 262,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1747069314095": {
          "editme.py": {
            "functions": [
              "test_keychain",
              "__init__",
              "encrypt",
              "decrypt"
            ],
            "classes": [
              "KeyChain"
            ],
            "imports": [
              "rp"
            ],
            "size_lines": 48,
            "has_main": true,
            "docstring": null
          }
        },
        "workspace_1747770151564": {
          "editme.py": {
            "functions": [
              "laplacian_blend"
            ],
            "classes": [],
            "imports": [
              "cv2",
              "numpy"
            ],
            "size_lines": 61,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1742724348548": {
          "editme.py": {
            "error": "invalid syntax (<unknown>, line 1)"
          }
        },
        "workspace_1742690005065": {
          "editme.py": {
            "functions": [
              "render_html"
            ],
            "classes": [],
            "imports": [
              "requests",
              "io"
            ],
            "size_lines": 43,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1742967064448": {
          "editme.py": {
            "functions": [
              "run_benchmark"
            ],
            "classes": [],
            "imports": [
              "cv2",
              "faiss",
              "numpy",
              "time"
            ],
            "size_lines": 115,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1750275699217": {
          "editme.py": {
            "functions": [
              "get_font_supported_chars"
            ],
            "classes": [],
            "imports": [
              "fonttools.ttLib",
              "os"
            ],
            "size_lines": 47,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1743317661469": {
          "editme.py": {
            "error": "invalid decimal literal (<unknown>, line 6)"
          }
        },
        "workspace_1752363765256": {
          "editme.py": {
            "functions": [
              "skia_text_to_image"
            ],
            "classes": [],
            "imports": [
              "skia",
              "numpy",
              "math"
            ],
            "size_lines": 164,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1748923647432": {
          "editme.py": {
            "functions": [],
            "classes": [],
            "imports": [],
            "size_lines": 8,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1743052665366": {
          "editme.py": {
            "functions": [],
            "classes": [],
            "imports": [],
            "size_lines": 1,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1743052937344": {
          "editme.py": {
            "functions": [],
            "classes": [],
            "imports": [],
            "size_lines": 13,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1744539954978": {
          "editme.py": {
            "functions": [
              "f"
            ],
            "classes": [],
            "imports": [],
            "size_lines": 11,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1743052357750": {
          "editme.py": {
            "functions": [],
            "classes": [],
            "imports": [],
            "size_lines": 1,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1747082413367": {
          "editme.py": {
            "error": "unexpected indent (<unknown>, line 1)"
          }
        },
        "workspace_1748835255785": {
          "editme.py": {
            "functions": [
              "dot",
              "min_pos"
            ],
            "classes": [],
            "imports": [
              "rp"
            ],
            "size_lines": 10,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1752374873721": {
          "editme.py": {
            "functions": [
              "skia_stamp_image",
              "_parse_origin_to_pixels"
            ],
            "classes": [],
            "imports": [
              "rp",
              "skia",
              "numpy"
            ],
            "size_lines": 184,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1749490541655": {
          "editme.py": {
            "functions": [
              "is_number",
              "has_len",
              "split_into_sublists",
              "helper"
            ],
            "classes": [],
            "imports": [],
            "size_lines": 62,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1753405700265": {
          "editme.py": {
            "functions": [],
            "classes": [],
            "imports": [
              "sys",
              "urllib.request",
              "xml.dom"
            ],
            "size_lines": 53,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1744510512040": {
          "editme.py": {
            "functions": [
              "convert_audio_file"
            ],
            "classes": [],
            "imports": [
              "subprocess",
              "os"
            ],
            "size_lines": 27,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1749362205246": {
          "editme.py": {
            "functions": [
              "get_sample",
              "__init__",
              "__len__",
              "__getitem__"
            ],
            "classes": [
              "EnvatoDataset"
            ],
            "imports": [
              "rp",
              "numpy",
              "pandas",
              "icecream",
              "torch",
              "torch.utils.data",
              "rp.git.remove_watermark.remove_watermark_envato"
            ],
            "size_lines": 61,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1753309504545": {
          "editme.py": {
            "functions": [
              "add_noise",
              "get_velocity",
              "get_epsilon",
              "get_clean_sample",
              "demo_ddim_inversion",
              "edict_inversion_demo",
              "_reconcile_hidden_overlays_initial",
              "reconcile_hidden_overlays",
              "demo_reconcile_hidden_overlays",
              "get_pipeline",
              "__init__",
              "timesteps",
              "alphas_cumprod",
              "get_text_embedding",
              "_encode_image",
              "encode_image",
              "encode_if_image",
              "decode_latent",
              "decode_latents",
              "encode_images",
              "correct_encoding_order1",
              "pred_noise",
              "inverse_scheduler",
              "ddim_inversion",
              "edict_inversion",
              "sample",
              "roll_image",
              "random_roll",
              "sample",
              "demo",
              "apply_image_func_to_clean_latent",
              "apply_image_func_to_noisy_latent",
              "image_filter",
              "sample",
              "image_filter",
              "image_filter",
              "__init__",
              "primary_diffusion",
              "reconcile_targets",
              "num_derived_images",
              "encode_images_in_parallel",
              "decode_latents_in_parallel",
              "sample",
              "reconcile_targets",
              "reconcile_targets",
              "noise_mixing_layer",
              "_get_alpha_and_beta",
              "noise_step",
              "encode",
              "decode",
              "flip_image",
              "pred",
              "blend_noise",
              "mix_new_noise"
            ],
            "classes": [
              "Diffusion",
              "SeamlessGenerator",
              "ImageFilterDiffusion",
              "GrayscaleFilterDiffusion",
              "PixelArtDiffusion",
              "DiffusionIllusion",
              "FlipIllusion",
              "HiddenOverlayIllusion"
            ],
            "imports": [
              "inspect",
              "functools",
              "torch",
              "torch.nn",
              "diffusers",
              "tqdm",
              "rp",
              "torch"
            ],
            "size_lines": 1060,
            "has_main": true,
            "docstring": null
          }
        },
        "workspace_1742725121598": {
          "editme.py": {
            "functions": [
              "_run_claude_code",
              "commit_thread"
            ],
            "classes": [],
            "imports": [
              "subprocess"
            ],
            "size_lines": 67,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1745893666160": {
          "editme.py": {
            "functions": [
              "f_initial",
              "reconcile_hidden_overlays",
              "demo_reconcile_hidden_overlays"
            ],
            "classes": [],
            "imports": [
              "rp"
            ],
            "size_lines": 150,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1743052572549": {
          "editme.py": {
            "functions": [],
            "classes": [],
            "imports": [],
            "size_lines": 1,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1749923612087": {
          "editme.py": {
            "functions": [],
            "classes": [],
            "imports": [],
            "size_lines": 1,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1750465819542": {
          "editme.py": {
            "functions": [
              "index_linterp"
            ],
            "classes": [],
            "imports": [
              "numpy"
            ],
            "size_lines": 51,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1754434221050": {
          "editme.py": {
            "functions": [],
            "classes": [],
            "imports": [],
            "size_lines": 57,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1748638494298": {
          "editme.py": {
            "functions": [
              "unwarped_perspective_contour",
              "demo_function"
            ],
            "classes": [],
            "imports": [
              "rp",
              "cv2"
            ],
            "size_lines": 86,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1742971342059": {
          "editme.py": {
            "functions": [
              "stream_webcam"
            ],
            "classes": [],
            "imports": [
              "rp"
            ],
            "size_lines": 98,
            "has_main": true,
            "docstring": "# (Running in a terminal)\n# Python version: CPython 3.10.16 at /opt/homebrew/opt/python@3.10/bin/python3.10\n# Current time: Wed Mar 26, 2025 at 2:41:27AM\n# Disk space: 1.7TB / 1.8TB used   :  110.8GB free\n# RAM: 33.5GB / 64GB used   :  30.5GB free\n# Computer details:\n#     - Operating system: (macOS 14.5 (arm64)) macOS-14.5-arm64-arm-64bit\n#     - Computer name: Ryans-MacBook-Pro-Macx.local\n#     - User Name: ryan\n#     - CPU: Apple M1 Max\n# Network:\n#     - MAC Address: bc:d0:74:05:14:13\n#     - Local IP: 172.24.53.225\n#     - Public IP: 2607:fb10:7321:1::578\n# Process: 18402 Python\n# LEVEL --> (Level 0)\nimport rp\n\n#Using only functions from rp, stream the webcam by showing each frame as an image"
          }
        },
        "workspace_1748157953358": {
          "editme.py": {
            "error": "unterminated string literal (detected at line 16) (<unknown>, line 16)"
          }
        },
        "workspace_1747373747729": {
          "editme.py": {
            "functions": [
              "direct_fstring_conversion",
              "convert_string",
              "convert_file",
              "__init__",
              "leave_FormattedString",
              "visit_FormattedStringExpression",
              "preprocess_escaped_braces",
              "fix_mixed_braces",
              "replace_escaped_only",
              "replace_fstring"
            ],
            "classes": [
              "FStringToFormatTransformer"
            ],
            "imports": [
              "libcst",
              "typing",
              "re",
              "sys"
            ],
            "size_lines": 374,
            "has_main": true,
            "docstring": null
          }
        },
        "workspace_1747770712116": {
          "editme.py": {
            "functions": [
              "laplacian_blend"
            ],
            "classes": [],
            "imports": [
              "cv2",
              "numpy"
            ],
            "size_lines": 63,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1742724487187": {
          "editme.py": {
            "error": "invalid syntax (<unknown>, line 1)"
          }
        },
        "workspace_1742724573472": {
          "editme.py": {
            "error": "invalid syntax (<unknown>, line 1)"
          }
        },
        "workspace_1742724731564": {
          "editme.py": {
            "error": "invalid syntax (<unknown>, line 1)"
          }
        },
        "workspace_1748637118761": {
          "editme.py": {
            "functions": [
              "unwarped_perspective_image",
              "unwarped_perspective_contour",
              "demo_function"
            ],
            "classes": [],
            "imports": [
              "rp",
              "cv2",
              "cv2"
            ],
            "size_lines": 134,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1754443719409": {
          "editme.py": {
            "functions": [
              "create_motion_blur_image"
            ],
            "classes": [],
            "imports": [],
            "size_lines": 75,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1745862566160": {
          "test_optimization.py": {
            "functions": [
              "f_optimized",
              "test_equivalence"
            ],
            "classes": [],
            "imports": [
              "editme",
              "numpy"
            ],
            "size_lines": 92,
            "has_main": true,
            "docstring": null
          },
          "editme.py": {
            "functions": [
              "f"
            ],
            "classes": [],
            "imports": [
              "rp"
            ],
            "size_lines": 111,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1743054568392": {
          "editme.py": {
            "functions": [
              "clear_screen",
              "rgb_to_ansi",
              "hsv_to_rgb",
              "rainbow_color",
              "main",
              "__init__",
              "update",
              "explode",
              "is_dead",
              "render",
              "__init__",
              "render"
            ],
            "classes": [
              "Firework",
              "WavyText"
            ],
            "imports": [
              "math",
              "os",
              "random",
              "sys",
              "time",
              "typing"
            ],
            "size_lines": 218,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1745957554791": {
          "editme.py": {
            "functions": [
              "laplacian_blend",
              "build_pyramid"
            ],
            "classes": [],
            "imports": [
              "torch",
              "torch.nn.functional"
            ],
            "size_lines": 93,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1753584995069": {
          "editme.py": {
            "functions": [
              "_load_images_via_pdf2image",
              "load_images_from_pdf",
              "get_pdf_num_pages"
            ],
            "classes": [],
            "imports": [
              "pdf2image",
              "pdf2image"
            ],
            "size_lines": 34,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1747771191188": {
          "editme.py": {
            "functions": [
              "laplacian_blend"
            ],
            "classes": [],
            "imports": [
              "cv2",
              "numpy"
            ],
            "size_lines": 63,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1750465459528": {
          "editme.py": {
            "functions": [
              "index_linterp"
            ],
            "classes": [],
            "imports": [
              "numpy"
            ],
            "size_lines": 51,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1750277024859": {
          "editme.py": {
            "functions": [
              "_skia_text_to_image"
            ],
            "classes": [],
            "imports": [
              "skia"
            ],
            "size_lines": 129,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1753573398182": {
          "editme.py": {
            "functions": [
              "graph_to_json",
              "create_graph_visualization",
              "start_server",
              "do_GET"
            ],
            "classes": [
              "Handler"
            ],
            "imports": [
              "json",
              "http.server",
              "socketserver",
              "webbrowser",
              "threading",
              "time"
            ],
            "size_lines": 216,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1744530984674": {
          "editme.py": {
            "functions": [
              "__init__",
              "encode_video",
              "decode_latents",
              "to"
            ],
            "classes": [
              "VAEOnlyWrapper"
            ],
            "imports": [
              "PIL",
              "torch",
              "einops",
              "typing",
              "rp",
              "diffusers.models",
              "diffusers.video_processor"
            ],
            "size_lines": 175,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1749798748134": {
          "editme.py": {
            "functions": [
              "starfield_zoom",
              "demo_noise_warp"
            ],
            "classes": [],
            "imports": [],
            "size_lines": 81,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1745037167616": {
          "editme.py": {
            "functions": [
              "random_passphrase"
            ],
            "classes": [],
            "imports": [],
            "size_lines": 60,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1754460327209": {
          "editme.py": {
            "functions": [
              "create_motion_blur_image"
            ],
            "classes": [],
            "imports": [],
            "size_lines": 71,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1747285616292": {
          "editme.py": {
            "functions": [
              "save_safetensors",
              "load_safetensors"
            ],
            "classes": [],
            "imports": [
              "os",
              "rp.r",
              "safetensors.torch",
              "safetensors"
            ],
            "size_lines": 128,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1743055055115": {
          "editme.py": {
            "functions": [
              "_disable_terminal_mouse_reporting"
            ],
            "classes": [],
            "imports": [],
            "size_lines": 19,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1742715511766": {
          "editme.py": {
            "error": "':' expected after dictionary key (<unknown>, line 1)"
          }
        },
        "workspace_1752200914927": {
          "editme.py": {
            "error": "expected an indented block after function definition on line 1 (<unknown>, line 1)"
          }
        },
        "workspace_1743306768060": {
          "editme.py": {
            "functions": [
              "_eta",
              "_extract_archive_via_pyunpack",
              "extract_zip_file",
              "__init__",
              "__call__",
              "__iter__",
              "__len__",
              "fansi_progress",
              "display_eta",
              "out"
            ],
            "classes": [
              "eta"
            ],
            "imports": [
              "datetime",
              "pyunpack",
              "zipfile",
              "tarfile"
            ],
            "size_lines": 224,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1743056126408": {
          "editme.py": {
            "functions": [
              "clear_screen",
              "rgb_to_ansi",
              "hsv_to_rgb",
              "rainbow_color",
              "get_ascii_text",
              "main",
              "__init__",
              "update",
              "explode",
              "is_dead",
              "render",
              "__init__",
              "render"
            ],
            "classes": [
              "Firework",
              "WavyText"
            ],
            "imports": [
              "math",
              "os",
              "random",
              "sys",
              "time",
              "typing"
            ],
            "size_lines": 259,
            "has_main": true,
            "docstring": null
          }
        },
        "workspace_1754460670214": {
          "motion_blur_gui.py": {
            "functions": [
              "__init__",
              "setup_ui",
              "create_slider",
              "choose_shadow_color",
              "choose_background_color",
              "load_initial_video",
              "load_video_file",
              "update_image"
            ],
            "classes": [
              "MotionBlurGUI"
            ],
            "imports": [
              "tkinter",
              "tkinter",
              "cv2",
              "numpy",
              "editme"
            ],
            "size_lines": 172,
            "has_main": true,
            "docstring": null
          },
          "motion_blur_streamlit.py": {
            "functions": [],
            "classes": [],
            "imports": [
              "streamlit",
              "numpy",
              "cv2",
              "rp",
              "editme"
            ],
            "size_lines": 151,
            "has_main": false,
            "docstring": null
          },
          "motion_blur_gui_jupyter.py": {
            "functions": [
              "create_motion_blur_gui",
              "__init__",
              "setup_widgets",
              "display_gui",
              "load_initial_video",
              "load_video_callback",
              "update_image_callback"
            ],
            "classes": [
              "MotionBlurJupyterGUI"
            ],
            "imports": [
              "ipywidgets",
              "IPython.display",
              "numpy",
              "cv2",
              "PIL",
              "io",
              "rp",
              "editme"
            ],
            "size_lines": 249,
            "has_main": false,
            "docstring": null
          },
          "editme.py": {
            "functions": [
              "create_motion_blur_image"
            ],
            "classes": [],
            "imports": [
              "rp",
              "cv2"
            ],
            "size_lines": 76,
            "has_main": true,
            "docstring": null
          }
        },
        "workspace_1754416233963": {
          "editme.py": {
            "functions": [
              "readlines_backwards"
            ],
            "classes": [],
            "imports": [],
            "size_lines": 14,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1743052136511": {
          "editme.py": {
            "functions": [],
            "classes": [],
            "imports": [],
            "size_lines": 1,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1747538963406": {
          "test_script.py": {
            "functions": [
              "dedent"
            ],
            "classes": [],
            "imports": [
              "sys",
              "tempfile",
              "textwrap",
              "pathlib",
              "refactor_wildcards"
            ],
            "size_lines": 103,
            "has_main": false,
            "docstring": null
          },
          "refactor_wildcards.py": {
            "functions": [
              "refactor",
              "create_dummy_module",
              "assert_code_equals",
              "test_basic_wildcard_import_and_usage",
              "test_wildcard_import_multiple_usages_and_symbols",
              "test_wildcard_import_unused_symbols_in_code",
              "test_wildcard_import_no_usages_of_its_members",
              "test_no_wildcard_imports_code_unchanged",
              "test_local_variable_shadows_wildcard_import",
              "test_local_function_shadows_wildcard_import",
              "test_wildcard_import_of_variable",
              "test_code_with_syntax_error",
              "test_empty_input_code",
              "test_input_code_with_only_comments_or_whitespace"
            ],
            "classes": [],
            "imports": [
              "os",
              "subprocess",
              "textwrap",
              "pathlib",
              "sys",
              "ast",
              "re",
              "collections",
              "pytest"
            ],
            "size_lines": 414,
            "has_main": true,
            "docstring": "This module provides a function to refactor Python code to replace\nwildcard imports (e.g., from module import *) with explicit imports,\nprefixing used names with the module name. It uses the 'removestar' tool.\n\nTo run tests:\n  1. Ensure 'removestar' and 'pytest' are installed.\n  2. Save this file as 'refactor_wildcards.py'.\n  3. Run pytest in your terminal in the same directory:\n     pytest refactor_wildcards.py"
          },
          "simple_test.py": {
            "functions": [],
            "classes": [],
            "imports": [
              "tempfile",
              "subprocess",
              "os",
              "pathlib"
            ],
            "size_lines": 49,
            "has_main": false,
            "docstring": null
          },
          "test_with_proper_assertions.py": {
            "functions": [
              "create_dummy_module",
              "assert_code_equals",
              "test_basic_wildcard_import_and_usage",
              "test_wildcard_import_multiple_usages_and_symbols",
              "test_wildcard_import_of_variable"
            ],
            "classes": [],
            "imports": [
              "tempfile",
              "textwrap",
              "pathlib",
              "pytest",
              "refactor_wildcards"
            ],
            "size_lines": 77,
            "has_main": false,
            "docstring": "This module tests the refactor function directly, bypassing the test cases defined\nin the refactor_wildcards.py file."
          },
          "editme.py": {
            "error": "invalid decimal literal (<unknown>, line 636)"
          },
          "detailed_test.py": {
            "functions": [
              "dedent",
              "create_dummy_module",
              "run_test"
            ],
            "classes": [],
            "imports": [
              "tempfile",
              "textwrap",
              "pathlib",
              "refactor_wildcards"
            ],
            "size_lines": 82,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1753573386814": {
          "editme.py": {
            "functions": [],
            "classes": [],
            "imports": [],
            "size_lines": 1,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1747726048959": {
          "editme.py": {
            "functions": [
              "mask_matrix_to_video"
            ],
            "classes": [],
            "imports": [
              "numpy"
            ],
            "size_lines": 14,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1743306685081": {
          "editme.py": {
            "functions": [
              "_eta",
              "_extract_archive_via_pyunpack",
              "extract_zip_file",
              "__init__",
              "__call__",
              "__iter__",
              "__len__",
              "fansi_progress",
              "display_eta",
              "out"
            ],
            "classes": [
              "eta"
            ],
            "imports": [
              "datetime",
              "pyunpack",
              "zipfile",
              "tarfile"
            ],
            "size_lines": 224,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1743390462427": {
          "editme.py": {
            "functions": [
              "reduce_wrap",
              "longest_common_prefix",
              "longest_common_suffix",
              "longest_common_substring",
              "wrapper"
            ],
            "classes": [],
            "imports": [
              "functools",
              "pylcs"
            ],
            "size_lines": 146,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1747595140608": {
          "editme.py": {
            "functions": [
              "pip_import",
              "temporary_numpy_random_seed",
              "temporary_random_seed",
              "temporary_torch_random_seed",
              "seed_all",
              "temporary_seed_all"
            ],
            "classes": [],
            "imports": [
              "contextlib",
              "importlib",
              "subprocess",
              "sys",
              "numpy",
              "random",
              "torch",
              "random",
              "numpy",
              "torch"
            ],
            "size_lines": 244,
            "has_main": false,
            "docstring": null
          }
        },
        "workspace_1744538599658": {
          "editme.py": {
            "functions": [
              "main"
            ],
            "classes": [],
            "imports": [
              "time",
              "random",
              "sys"
            ],
            "size_lines": 52,
            "has_main": true,
            "docstring": null
          }
        }
      }
    },
    "git": {
      "ControlNet": {
        "gradio_hough2image.py": {
          "functions": [
            "process"
          ],
          "classes": [],
          "imports": [
            "share",
            "config",
            "cv2",
            "einops",
            "gradio",
            "numpy",
            "torch",
            "random",
            "pytorch_lightning",
            "annotator.util",
            "annotator.mlsd",
            "cldm.model",
            "cldm.ddim_hacked"
          ],
          "size_lines": 101,
          "has_main": false,
          "docstring": null
        },
        "tool_transfer_control.py": {
          "functions": [
            "get_node_name"
          ],
          "classes": [],
          "imports": [
            "os",
            "torch",
            "share",
            "cldm.model"
          ],
          "size_lines": 60,
          "has_main": false,
          "docstring": null
        },
        "config.py": {
          "functions": [],
          "classes": [],
          "imports": [],
          "size_lines": 2,
          "has_main": false,
          "docstring": null
        },
        "gradio_depth2image.py": {
          "functions": [
            "process"
          ],
          "classes": [],
          "imports": [
            "share",
            "config",
            "cv2",
            "einops",
            "gradio",
            "numpy",
            "torch",
            "random",
            "pytorch_lightning",
            "annotator.util",
            "annotator.midas",
            "cldm.model",
            "cldm.ddim_hacked"
          ],
          "size_lines": 99,
          "has_main": false,
          "docstring": null
        },
        "tool_add_control_sd21.py": {
          "functions": [
            "get_node_name"
          ],
          "classes": [],
          "imports": [
            "sys",
            "os",
            "torch",
            "share",
            "cldm.model"
          ],
          "size_lines": 51,
          "has_main": false,
          "docstring": null
        },
        "gradio_seg2image.py": {
          "functions": [
            "process"
          ],
          "classes": [],
          "imports": [
            "share",
            "config",
            "cv2",
            "einops",
            "gradio",
            "numpy",
            "torch",
            "random",
            "pytorch_lightning",
            "annotator.util",
            "annotator.uniformer",
            "cldm.model",
            "cldm.ddim_hacked"
          ],
          "size_lines": 98,
          "has_main": false,
          "docstring": null
        },
        "gradio_normal2image.py": {
          "functions": [
            "process"
          ],
          "classes": [],
          "imports": [
            "share",
            "config",
            "cv2",
            "einops",
            "gradio",
            "numpy",
            "torch",
            "random",
            "pytorch_lightning",
            "annotator.util",
            "annotator.midas",
            "cldm.model",
            "cldm.ddim_hacked"
          ],
          "size_lines": 100,
          "has_main": false,
          "docstring": null
        },
        "tutorial_dataset_test.py": {
          "functions": [],
          "classes": [],
          "imports": [
            "tutorial_dataset"
          ],
          "size_lines": 13,
          "has_main": false,
          "docstring": null
        },
        "tutorial_train.py": {
          "functions": [],
          "classes": [],
          "imports": [
            "share",
            "pytorch_lightning",
            "torch.utils.data",
            "tutorial_dataset",
            "cldm.logger",
            "cldm.model"
          ],
          "size_lines": 36,
          "has_main": false,
          "docstring": null
        },
        "tool_add_control.py": {
          "functions": [
            "get_node_name"
          ],
          "classes": [],
          "imports": [
            "sys",
            "os",
            "torch",
            "share",
            "cldm.model"
          ],
          "size_lines": 51,
          "has_main": false,
          "docstring": null
        },
        "gradio_annotator.py": {
          "functions": [
            "canny",
            "hed",
            "mlsd",
            "midas",
            "openpose",
            "uniformer"
          ],
          "classes": [],
          "imports": [
            "gradio",
            "annotator.util",
            "annotator.canny",
            "annotator.hed",
            "annotator.mlsd",
            "annotator.midas",
            "annotator.openpose",
            "annotator.uniformer"
          ],
          "size_lines": 161,
          "has_main": false,
          "docstring": null
        },
        "gradio_scribble2image.py": {
          "functions": [
            "process"
          ],
          "classes": [],
          "imports": [
            "share",
            "config",
            "cv2",
            "einops",
            "gradio",
            "numpy",
            "torch",
            "random",
            "pytorch_lightning",
            "annotator.util",
            "cldm.model",
            "cldm.ddim_hacked"
          ],
          "size_lines": 93,
          "has_main": false,
          "docstring": null
        },
        "tutorial_train_sd21.py": {
          "functions": [],
          "classes": [],
          "imports": [
            "share",
            "pytorch_lightning",
            "torch.utils.data",
            "tutorial_dataset",
            "cldm.logger",
            "cldm.model"
          ],
          "size_lines": 36,
          "has_main": false,
          "docstring": null
        },
        "share.py": {
          "functions": [],
          "classes": [],
          "imports": [
            "config",
            "cldm.hack"
          ],
          "size_lines": 9,
          "has_main": false,
          "docstring": null
        },
        "gradio_hed2image.py": {
          "functions": [
            "process"
          ],
          "classes": [],
          "imports": [
            "share",
            "config",
            "cv2",
            "einops",
            "gradio",
            "numpy",
            "torch",
            "random",
            "pytorch_lightning",
            "annotator.util",
            "annotator.hed",
            "cldm.model",
            "cldm.ddim_hacked"
          ],
          "size_lines": 99,
          "has_main": false,
          "docstring": null
        },
        "gradio_scribble2image_interactive.py": {
          "functions": [
            "process",
            "create_canvas"
          ],
          "classes": [],
          "imports": [
            "share",
            "config",
            "cv2",
            "einops",
            "gradio",
            "numpy",
            "torch",
            "random",
            "pytorch_lightning",
            "annotator.util",
            "cldm.model",
            "cldm.ddim_hacked"
          ],
          "size_lines": 103,
          "has_main": false,
          "docstring": null
        },
        "gradio_canny2image.py": {
          "functions": [
            "process"
          ],
          "classes": [],
          "imports": [
            "share",
            "config",
            "cv2",
            "einops",
            "gradio",
            "numpy",
            "torch",
            "random",
            "pytorch_lightning",
            "annotator.util",
            "annotator.canny",
            "cldm.model",
            "cldm.ddim_hacked"
          ],
          "size_lines": 98,
          "has_main": false,
          "docstring": null
        },
        "tutorial_dataset.py": {
          "functions": [
            "__init__",
            "__len__",
            "__getitem__"
          ],
          "classes": [
            "MyDataset"
          ],
          "imports": [
            "json",
            "cv2",
            "numpy",
            "torch.utils.data"
          ],
          "size_lines": 40,
          "has_main": false,
          "docstring": null
        },
        "gradio_pose2image.py": {
          "functions": [
            "process"
          ],
          "classes": [],
          "imports": [
            "share",
            "config",
            "cv2",
            "einops",
            "gradio",
            "numpy",
            "torch",
            "random",
            "pytorch_lightning",
            "annotator.util",
            "annotator.openpose",
            "cldm.model",
            "cldm.ddim_hacked"
          ],
          "size_lines": 99,
          "has_main": false,
          "docstring": null
        },
        "gradio_fake_scribble2image.py": {
          "functions": [
            "process"
          ],
          "classes": [],
          "imports": [
            "share",
            "config",
            "cv2",
            "einops",
            "gradio",
            "numpy",
            "torch",
            "random",
            "pytorch_lightning",
            "annotator.util",
            "annotator.hed",
            "cldm.model",
            "cldm.ddim_hacked"
          ],
          "size_lines": 103,
          "has_main": false,
          "docstring": null
        },
        "cldm": {
          "cldm.py": {
            "functions": [
              "forward",
              "__init__",
              "make_zero_conv",
              "forward",
              "__init__",
              "get_input",
              "apply_model",
              "get_unconditional_conditioning",
              "log_images",
              "sample_log",
              "configure_optimizers",
              "low_vram_shift"
            ],
            "classes": [
              "ControlledUnetModel",
              "ControlNet",
              "ControlLDM"
            ],
            "imports": [
              "einops",
              "torch",
              "torch",
              "torch.nn",
              "ldm.modules.diffusionmodules.util",
              "einops",
              "torchvision.utils",
              "ldm.modules.attention",
              "ldm.modules.diffusionmodules.openaimodel",
              "ldm.models.diffusion.ddpm",
              "ldm.util",
              "ldm.models.diffusion.ddim",
              "omegaconf.listconfig"
            ],
            "size_lines": 436,
            "has_main": false,
            "docstring": null
          },
          "hack.py": {
            "functions": [
              "disable_verbosity",
              "enable_sliced_attention",
              "hack_everything",
              "_hacked_clip_forward",
              "_hacked_sliced_attentin_forward",
              "tokenize",
              "transformer_encode",
              "split",
              "pad"
            ],
            "classes": [],
            "imports": [
              "torch",
              "einops",
              "ldm.modules.encoders.modules",
              "ldm.modules.attention",
              "transformers",
              "ldm.modules.attention"
            ],
            "size_lines": 112,
            "has_main": false,
            "docstring": null
          },
          "logger.py": {
            "functions": [
              "__init__",
              "log_local",
              "log_img",
              "check_frequency",
              "on_train_batch_end"
            ],
            "classes": [
              "ImageLogger"
            ],
            "imports": [
              "os",
              "numpy",
              "torch",
              "torchvision",
              "PIL",
              "pytorch_lightning.callbacks",
              "pytorch_lightning.utilities.distributed"
            ],
            "size_lines": 77,
            "has_main": false,
            "docstring": null
          },
          "model.py": {
            "functions": [
              "get_state_dict",
              "load_state_dict",
              "create_model"
            ],
            "classes": [],
            "imports": [
              "os",
              "torch",
              "omegaconf",
              "ldm.util",
              "safetensors.torch"
            ],
            "size_lines": 29,
            "has_main": false,
            "docstring": null
          },
          "ddim_hacked.py": {
            "functions": [
              "__init__",
              "register_buffer",
              "make_schedule",
              "sample",
              "ddim_sampling",
              "p_sample_ddim",
              "encode",
              "stochastic_encode",
              "decode"
            ],
            "classes": [
              "DDIMSampler"
            ],
            "imports": [
              "torch",
              "numpy",
              "tqdm",
              "ldm.modules.diffusionmodules.util"
            ],
            "size_lines": 318,
            "has_main": false,
            "docstring": "SAMPLING ONLY."
          }
        },
        "annotator": {
          "util.py": {
            "functions": [
              "HWC3",
              "resize_image"
            ],
            "classes": [],
            "imports": [
              "numpy",
              "cv2",
              "os"
            ],
            "size_lines": 39,
            "has_main": false,
            "docstring": null
          },
          "__init__.py": {
            "functions": [
              "_is_divisible_by_patch_size",
              "_round_to_nearest_patch_size",
              "run_hed",
              "run_midas",
              "run_midas_normals",
              "run_openpose",
              "run_uniformer",
              "run_annotator_demo",
              "decorator",
              "wrapper",
              "append"
            ],
            "classes": [],
            "imports": [
              "rp",
              "sys",
              "functools",
              "canny",
              "hed",
              "midas",
              "openpose",
              "uniformer",
              "mlsd"
            ],
            "size_lines": 160,
            "has_main": true,
            "docstring": "ControlNet Annotators\n\nThis module provides annotators for generating control maps for ControlNet models.\nEach annotator creates a specialized map (edge, depth, pose, etc.) that can be used\nto guide the image generation process.\n\nSeveral functions are made to wrap Annotators.\nYou can simply call them! You only need to specify the device on the first call.\nThey input and output images as defined by rp.is_image\n\nAnnotators:\n- CannyDetector: Creates edge maps using Canny edge detection algorithm\n- HEDdetector: Creates soft edge maps using Holistically-Nested Edge Detection\n- MidasDetector: Creates depth maps for 3D structure understanding\n- MLSDdetector: Detects line segments for structural guidance\n- OpenposeDetector: Detects human poses including body and hand positions\n- UniformerDetector: Creates semantic segmentation maps\n\nNote: All annotators except CannyDetector support specifying a custom device."
          },
          "uniformer": {
            "__init__.py": {
              "functions": [
                "UniformerDetector",
                "__init__",
                "__call__"
              ],
              "classes": [
                "_UniformerDetector"
              ],
              "imports": [
                "os",
                "annotator.uniformer.mmseg.apis",
                "annotator.uniformer.mmseg.core.evaluation",
                "annotator.util",
                "rp",
                "basicsr.utils.download_util"
              ],
              "size_lines": 42,
              "has_main": false,
              "docstring": null
            },
            "mmseg": {
              "apis": {
                "__init__.py": {
                  "functions": [],
                  "classes": [],
                  "imports": [
                    "inference",
                    "test",
                    "train"
                  ],
                  "size_lines": 10,
                  "has_main": false,
                  "docstring": null
                },
                "test.py": {
                  "functions": [
                    "np2tmp",
                    "single_gpu_test",
                    "multi_gpu_test",
                    "collect_results_cpu",
                    "collect_results_gpu"
                  ],
                  "classes": [],
                  "imports": [
                    "os.path",
                    "pickle",
                    "shutil",
                    "tempfile",
                    "annotator.uniformer.mmcv",
                    "numpy",
                    "torch",
                    "torch.distributed",
                    "annotator.uniformer.mmcv.image",
                    "annotator.uniformer.mmcv.runner"
                  ],
                  "size_lines": 239,
                  "has_main": false,
                  "docstring": null
                },
                "train.py": {
                  "functions": [
                    "set_random_seed",
                    "train_segmentor"
                  ],
                  "classes": [],
                  "imports": [
                    "random",
                    "warnings",
                    "numpy",
                    "torch",
                    "annotator.uniformer.mmcv.parallel",
                    "annotator.uniformer.mmcv.runner",
                    "annotator.uniformer.mmseg.core",
                    "annotator.uniformer.mmseg.datasets",
                    "annotator.uniformer.mmseg.utils"
                  ],
                  "size_lines": 117,
                  "has_main": false,
                  "docstring": null
                },
                "inference.py": {
                  "functions": [
                    "init_segmentor",
                    "inference_segmentor",
                    "show_result_pyplot",
                    "__call__"
                  ],
                  "classes": [
                    "LoadImage"
                  ],
                  "imports": [
                    "matplotlib.pyplot",
                    "annotator.uniformer.mmcv",
                    "torch",
                    "annotator.uniformer.mmcv.parallel",
                    "annotator.uniformer.mmcv.runner",
                    "annotator.uniformer.mmseg.datasets.pipelines",
                    "annotator.uniformer.mmseg.models"
                  ],
                  "size_lines": 137,
                  "has_main": false,
                  "docstring": null
                }
              },
              "core": {
                "__init__.py": {
                  "functions": [],
                  "classes": [],
                  "imports": [
                    "evaluation",
                    "seg",
                    "utils"
                  ],
                  "size_lines": 4,
                  "has_main": false,
                  "docstring": null
                },
                "utils": {
                  "misc.py": {
                    "functions": [
                      "add_prefix"
                    ],
                    "classes": [],
                    "imports": [],
                    "size_lines": 18,
                    "has_main": false,
                    "docstring": null
                  },
                  "__init__.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [
                      "misc"
                    ],
                    "size_lines": 4,
                    "has_main": false,
                    "docstring": null
                  }
                },
                "evaluation": {
                  "metrics.py": {
                    "functions": [
                      "f_score",
                      "intersect_and_union",
                      "total_intersect_and_union",
                      "mean_iou",
                      "mean_dice",
                      "mean_fscore",
                      "eval_metrics"
                    ],
                    "classes": [],
                    "imports": [
                      "collections",
                      "annotator.uniformer.mmcv",
                      "numpy",
                      "torch"
                    ],
                    "size_lines": 327,
                    "has_main": false,
                    "docstring": null
                  },
                  "class_names.py": {
                    "functions": [
                      "cityscapes_classes",
                      "ade_classes",
                      "voc_classes",
                      "cityscapes_palette",
                      "ade_palette",
                      "voc_palette",
                      "get_classes",
                      "get_palette"
                    ],
                    "classes": [],
                    "imports": [
                      "annotator.uniformer.mmcv"
                    ],
                    "size_lines": 153,
                    "has_main": false,
                    "docstring": null
                  },
                  "eval_hooks.py": {
                    "functions": [
                      "__init__",
                      "after_train_iter",
                      "after_train_epoch",
                      "__init__",
                      "after_train_iter",
                      "after_train_epoch"
                    ],
                    "classes": [
                      "EvalHook",
                      "DistEvalHook"
                    ],
                    "imports": [
                      "os.path",
                      "annotator.uniformer.mmcv.runner",
                      "annotator.uniformer.mmcv.runner",
                      "annotator.uniformer.mmseg.apis",
                      "annotator.uniformer.mmseg.apis",
                      "annotator.uniformer.mmseg.apis",
                      "annotator.uniformer.mmseg.apis"
                    ],
                    "size_lines": 110,
                    "has_main": false,
                    "docstring": null
                  },
                  "__init__.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [
                      "class_names",
                      "eval_hooks",
                      "metrics"
                    ],
                    "size_lines": 9,
                    "has_main": false,
                    "docstring": null
                  }
                },
                "seg": {
                  "__init__.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [
                      "builder",
                      "sampler"
                    ],
                    "size_lines": 5,
                    "has_main": false,
                    "docstring": null
                  },
                  "builder.py": {
                    "functions": [
                      "build_pixel_sampler"
                    ],
                    "classes": [],
                    "imports": [
                      "annotator.uniformer.mmcv.utils"
                    ],
                    "size_lines": 9,
                    "has_main": false,
                    "docstring": null
                  },
                  "sampler": {
                    "base_pixel_sampler.py": {
                      "functions": [
                        "__init__",
                        "sample"
                      ],
                      "classes": [
                        "BasePixelSampler"
                      ],
                      "imports": [
                        "abc"
                      ],
                      "size_lines": 13,
                      "has_main": false,
                      "docstring": null
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [
                        "base_pixel_sampler",
                        "ohem_pixel_sampler"
                      ],
                      "size_lines": 5,
                      "has_main": false,
                      "docstring": null
                    },
                    "ohem_pixel_sampler.py": {
                      "functions": [
                        "__init__",
                        "sample"
                      ],
                      "classes": [
                        "OHEMPixelSampler"
                      ],
                      "imports": [
                        "torch",
                        "torch.nn.functional",
                        "builder",
                        "base_pixel_sampler"
                      ],
                      "size_lines": 77,
                      "has_main": false,
                      "docstring": null
                    }
                  }
                }
              },
              "datasets": {
                "cityscapes.py": {
                  "functions": [
                    "__init__",
                    "_convert_to_label_id",
                    "results2img",
                    "format_results",
                    "evaluate",
                    "_evaluate_cityscapes"
                  ],
                  "classes": [
                    "CityscapesDataset"
                  ],
                  "imports": [
                    "os.path",
                    "tempfile",
                    "annotator.uniformer.mmcv",
                    "numpy",
                    "annotator.uniformer.mmcv.utils",
                    "PIL",
                    "builder",
                    "custom",
                    "cityscapesscripts.helpers.labels",
                    "cityscapesscripts.helpers.labels",
                    "cityscapesscripts.evaluation.evalPixelLevelSemanticLabeling"
                  ],
                  "size_lines": 218,
                  "has_main": false,
                  "docstring": null
                },
                "pascal_context.py": {
                  "functions": [
                    "__init__",
                    "__init__"
                  ],
                  "classes": [
                    "PascalContextDataset",
                    "PascalContextDataset59"
                  ],
                  "imports": [
                    "os.path",
                    "builder",
                    "custom"
                  ],
                  "size_lines": 104,
                  "has_main": false,
                  "docstring": null
                },
                "ade.py": {
                  "functions": [
                    "__init__"
                  ],
                  "classes": [
                    "ADE20KDataset"
                  ],
                  "imports": [
                    "builder",
                    "custom"
                  ],
                  "size_lines": 85,
                  "has_main": false,
                  "docstring": null
                },
                "custom.py": {
                  "functions": [
                    "__init__",
                    "__len__",
                    "load_annotations",
                    "get_ann_info",
                    "pre_pipeline",
                    "__getitem__",
                    "prepare_train_img",
                    "prepare_test_img",
                    "format_results",
                    "get_gt_seg_maps",
                    "get_classes_and_palette",
                    "get_palette_for_custom_classes",
                    "evaluate"
                  ],
                  "classes": [
                    "CustomDataset"
                  ],
                  "imports": [
                    "os",
                    "os.path",
                    "collections",
                    "functools",
                    "annotator.uniformer.mmcv",
                    "numpy",
                    "annotator.uniformer.mmcv.utils",
                    "prettytable",
                    "torch.utils.data",
                    "annotator.uniformer.mmseg.core",
                    "annotator.uniformer.mmseg.utils",
                    "builder",
                    "pipelines"
                  ],
                  "size_lines": 401,
                  "has_main": false,
                  "docstring": null
                },
                "hrf.py": {
                  "functions": [
                    "__init__"
                  ],
                  "classes": [
                    "HRFDataset"
                  ],
                  "imports": [
                    "os.path",
                    "builder",
                    "custom"
                  ],
                  "size_lines": 28,
                  "has_main": false,
                  "docstring": null
                },
                "__init__.py": {
                  "functions": [],
                  "classes": [],
                  "imports": [
                    "ade",
                    "builder",
                    "chase_db1",
                    "cityscapes",
                    "custom",
                    "dataset_wrappers",
                    "drive",
                    "hrf",
                    "pascal_context",
                    "stare",
                    "voc"
                  ],
                  "size_lines": 20,
                  "has_main": false,
                  "docstring": null
                },
                "chase_db1.py": {
                  "functions": [
                    "__init__"
                  ],
                  "classes": [
                    "ChaseDB1Dataset"
                  ],
                  "imports": [
                    "os.path",
                    "builder",
                    "custom"
                  ],
                  "size_lines": 28,
                  "has_main": false,
                  "docstring": null
                },
                "builder.py": {
                  "functions": [
                    "_concat_dataset",
                    "build_dataset",
                    "build_dataloader",
                    "worker_init_fn"
                  ],
                  "classes": [],
                  "imports": [
                    "copy",
                    "platform",
                    "random",
                    "functools",
                    "numpy",
                    "annotator.uniformer.mmcv.parallel",
                    "annotator.uniformer.mmcv.runner",
                    "annotator.uniformer.mmcv.utils",
                    "annotator.uniformer.mmcv.utils.parrots_wrapper",
                    "torch.utils.data",
                    "resource",
                    "dataset_wrappers",
                    "dataset_wrappers"
                  ],
                  "size_lines": 170,
                  "has_main": false,
                  "docstring": null
                },
                "voc.py": {
                  "functions": [
                    "__init__"
                  ],
                  "classes": [
                    "PascalVOCDataset"
                  ],
                  "imports": [
                    "os.path",
                    "builder",
                    "custom"
                  ],
                  "size_lines": 30,
                  "has_main": false,
                  "docstring": null
                },
                "dataset_wrappers.py": {
                  "functions": [
                    "__init__",
                    "__init__",
                    "__getitem__",
                    "__len__"
                  ],
                  "classes": [
                    "ConcatDataset",
                    "RepeatDataset"
                  ],
                  "imports": [
                    "torch.utils.data.dataset",
                    "builder"
                  ],
                  "size_lines": 51,
                  "has_main": false,
                  "docstring": null
                },
                "stare.py": {
                  "functions": [
                    "__init__"
                  ],
                  "classes": [
                    "STAREDataset"
                  ],
                  "imports": [
                    "os.path",
                    "builder",
                    "custom"
                  ],
                  "size_lines": 28,
                  "has_main": false,
                  "docstring": null
                },
                "drive.py": {
                  "functions": [
                    "__init__"
                  ],
                  "classes": [
                    "DRIVEDataset"
                  ],
                  "imports": [
                    "os.path",
                    "builder",
                    "custom"
                  ],
                  "size_lines": 28,
                  "has_main": false,
                  "docstring": null
                },
                "pipelines": {
                  "transforms.py": {
                    "functions": [
                      "__init__",
                      "random_select",
                      "random_sample",
                      "random_sample_ratio",
                      "_random_scale",
                      "_resize_img",
                      "_resize_seg",
                      "__call__",
                      "__repr__",
                      "__init__",
                      "__call__",
                      "__repr__",
                      "__init__",
                      "_pad_img",
                      "_pad_seg",
                      "__call__",
                      "__repr__",
                      "__init__",
                      "__call__",
                      "__repr__",
                      "__init__",
                      "__call__",
                      "__repr__",
                      "__init__",
                      "__call__",
                      "__repr__",
                      "__init__",
                      "get_crop_bbox",
                      "crop",
                      "__call__",
                      "__repr__",
                      "__init__",
                      "__call__",
                      "__repr__",
                      "__init__",
                      "__call__",
                      "__repr__",
                      "__init__",
                      "__call__",
                      "__repr__",
                      "__init__",
                      "__call__",
                      "__repr__",
                      "__init__",
                      "convert",
                      "brightness",
                      "contrast",
                      "saturation",
                      "hue",
                      "__call__",
                      "__repr__"
                    ],
                    "classes": [
                      "Resize",
                      "RandomFlip",
                      "Pad",
                      "Normalize",
                      "Rerange",
                      "CLAHE",
                      "RandomCrop",
                      "RandomRotate",
                      "RGB2Gray",
                      "AdjustGamma",
                      "SegRescale",
                      "PhotoMetricDistortion"
                    ],
                    "imports": [
                      "annotator.uniformer.mmcv",
                      "numpy",
                      "annotator.uniformer.mmcv.utils",
                      "numpy",
                      "builder"
                    ],
                    "size_lines": 890,
                    "has_main": false,
                    "docstring": null
                  },
                  "test_time_aug.py": {
                    "functions": [
                      "__init__",
                      "__call__",
                      "__repr__"
                    ],
                    "classes": [
                      "MultiScaleFlipAug"
                    ],
                    "imports": [
                      "warnings",
                      "annotator.uniformer.mmcv",
                      "builder",
                      "compose"
                    ],
                    "size_lines": 134,
                    "has_main": false,
                    "docstring": null
                  },
                  "loading.py": {
                    "functions": [
                      "__init__",
                      "__call__",
                      "__repr__",
                      "__init__",
                      "__call__",
                      "__repr__"
                    ],
                    "classes": [
                      "LoadImageFromFile",
                      "LoadAnnotations"
                    ],
                    "imports": [
                      "os.path",
                      "annotator.uniformer.mmcv",
                      "numpy",
                      "builder"
                    ],
                    "size_lines": 154,
                    "has_main": false,
                    "docstring": null
                  },
                  "compose.py": {
                    "functions": [
                      "__init__",
                      "__call__",
                      "__repr__"
                    ],
                    "classes": [
                      "Compose"
                    ],
                    "imports": [
                      "collections",
                      "annotator.uniformer.mmcv.utils",
                      "builder"
                    ],
                    "size_lines": 52,
                    "has_main": false,
                    "docstring": null
                  },
                  "__init__.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [
                      "compose",
                      "formating",
                      "loading",
                      "test_time_aug",
                      "transforms"
                    ],
                    "size_lines": 17,
                    "has_main": false,
                    "docstring": null
                  },
                  "formating.py": {
                    "functions": [
                      "to_tensor",
                      "__init__",
                      "__call__",
                      "__repr__",
                      "__init__",
                      "__call__",
                      "__repr__",
                      "__init__",
                      "__call__",
                      "__repr__",
                      "__init__",
                      "__call__",
                      "__repr__",
                      "__call__",
                      "__repr__",
                      "__init__",
                      "__call__",
                      "__repr__"
                    ],
                    "classes": [
                      "ToTensor",
                      "ImageToTensor",
                      "Transpose",
                      "ToDataContainer",
                      "DefaultFormatBundle",
                      "Collect"
                    ],
                    "imports": [
                      "collections.abc",
                      "annotator.uniformer.mmcv",
                      "numpy",
                      "torch",
                      "annotator.uniformer.mmcv.parallel",
                      "builder"
                    ],
                    "size_lines": 289,
                    "has_main": false,
                    "docstring": null
                  }
                }
              },
              "utils": {
                "collect_env.py": {
                  "functions": [
                    "collect_env"
                  ],
                  "classes": [],
                  "imports": [
                    "annotator.uniformer.mmcv.utils",
                    "annotator.uniformer.mmcv.utils",
                    "annotator.uniformer.mmseg"
                  ],
                  "size_lines": 18,
                  "has_main": true,
                  "docstring": null
                },
                "__init__.py": {
                  "functions": [],
                  "classes": [],
                  "imports": [
                    "collect_env",
                    "logger"
                  ],
                  "size_lines": 5,
                  "has_main": false,
                  "docstring": null
                },
                "logger.py": {
                  "functions": [
                    "get_root_logger"
                  ],
                  "classes": [],
                  "imports": [
                    "logging",
                    "annotator.uniformer.mmcv.utils"
                  ],
                  "size_lines": 28,
                  "has_main": false,
                  "docstring": null
                }
              },
              "models": {
                "__init__.py": {
                  "functions": [],
                  "classes": [],
                  "imports": [
                    "backbones",
                    "builder",
                    "decode_heads",
                    "losses",
                    "necks",
                    "segmentors"
                  ],
                  "size_lines": 13,
                  "has_main": false,
                  "docstring": null
                },
                "builder.py": {
                  "functions": [
                    "build_backbone",
                    "build_neck",
                    "build_head",
                    "build_loss",
                    "build_segmentor"
                  ],
                  "classes": [],
                  "imports": [
                    "warnings",
                    "annotator.uniformer.mmcv.cnn",
                    "annotator.uniformer.mmcv.utils"
                  ],
                  "size_lines": 47,
                  "has_main": false,
                  "docstring": null
                },
                "losses": {
                  "dice_loss.py": {
                    "functions": [
                      "dice_loss",
                      "binary_dice_loss",
                      "__init__",
                      "forward"
                    ],
                    "classes": [
                      "DiceLoss"
                    ],
                    "imports": [
                      "torch",
                      "torch.nn",
                      "torch.nn.functional",
                      "builder",
                      "utils"
                    ],
                    "size_lines": 120,
                    "has_main": false,
                    "docstring": "Modified from https://github.com/LikeLy-Journey/SegmenTron/blob/master/\nsegmentron/solver/loss.py (Apache-2.0 License)"
                  },
                  "__init__.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [
                      "accuracy",
                      "cross_entropy_loss",
                      "dice_loss",
                      "lovasz_loss",
                      "utils"
                    ],
                    "size_lines": 13,
                    "has_main": false,
                    "docstring": null
                  },
                  "utils.py": {
                    "functions": [
                      "get_class_weight",
                      "reduce_loss",
                      "weight_reduce_loss",
                      "weighted_loss",
                      "wrapper"
                    ],
                    "classes": [],
                    "imports": [
                      "functools",
                      "annotator.uniformer.mmcv",
                      "numpy",
                      "torch.nn.functional"
                    ],
                    "size_lines": 122,
                    "has_main": false,
                    "docstring": null
                  },
                  "cross_entropy_loss.py": {
                    "functions": [
                      "cross_entropy",
                      "_expand_onehot_labels",
                      "binary_cross_entropy",
                      "mask_cross_entropy",
                      "__init__",
                      "forward"
                    ],
                    "classes": [
                      "CrossEntropyLoss"
                    ],
                    "imports": [
                      "torch",
                      "torch.nn",
                      "torch.nn.functional",
                      "builder",
                      "utils"
                    ],
                    "size_lines": 199,
                    "has_main": false,
                    "docstring": null
                  },
                  "accuracy.py": {
                    "functions": [
                      "accuracy",
                      "__init__",
                      "forward"
                    ],
                    "classes": [
                      "Accuracy"
                    ],
                    "imports": [
                      "torch.nn"
                    ],
                    "size_lines": 79,
                    "has_main": false,
                    "docstring": null
                  },
                  "lovasz_loss.py": {
                    "functions": [
                      "lovasz_grad",
                      "flatten_binary_logits",
                      "flatten_probs",
                      "lovasz_hinge_flat",
                      "lovasz_hinge",
                      "lovasz_softmax_flat",
                      "lovasz_softmax",
                      "__init__",
                      "forward"
                    ],
                    "classes": [
                      "LovaszLoss"
                    ],
                    "imports": [
                      "annotator.uniformer.mmcv",
                      "torch",
                      "torch.nn",
                      "torch.nn.functional",
                      "builder",
                      "utils"
                    ],
                    "size_lines": 304,
                    "has_main": false,
                    "docstring": "Modified from https://github.com/bermanmaxim/LovaszSoftmax/blob/master/pytor\nch/lovasz_losses.py Lovasz-Softmax and Jaccard hinge loss in PyTorch Maxim\nBerman 2018 ESAT-PSI KU Leuven (MIT License)"
                  }
                },
                "necks": {
                  "multilevel_neck.py": {
                    "functions": [
                      "__init__",
                      "forward"
                    ],
                    "classes": [
                      "MultiLevelNeck"
                    ],
                    "imports": [
                      "torch.nn",
                      "torch.nn.functional",
                      "annotator.uniformer.mmcv.cnn",
                      "builder"
                    ],
                    "size_lines": 71,
                    "has_main": false,
                    "docstring": null
                  },
                  "fpn.py": {
                    "functions": [
                      "__init__",
                      "init_weights",
                      "forward"
                    ],
                    "classes": [
                      "FPN"
                    ],
                    "imports": [
                      "torch.nn",
                      "torch.nn.functional",
                      "annotator.uniformer.mmcv.cnn",
                      "builder"
                    ],
                    "size_lines": 213,
                    "has_main": false,
                    "docstring": null
                  },
                  "__init__.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [
                      "fpn",
                      "multilevel_neck"
                    ],
                    "size_lines": 5,
                    "has_main": false,
                    "docstring": null
                  }
                },
                "utils": {
                  "se_layer.py": {
                    "functions": [
                      "__init__",
                      "forward"
                    ],
                    "classes": [
                      "SELayer"
                    ],
                    "imports": [
                      "annotator.uniformer.mmcv",
                      "torch.nn",
                      "annotator.uniformer.mmcv.cnn",
                      "make_divisible"
                    ],
                    "size_lines": 58,
                    "has_main": false,
                    "docstring": null
                  },
                  "inverted_residual.py": {
                    "functions": [
                      "__init__",
                      "forward",
                      "__init__",
                      "forward",
                      "_inner_forward",
                      "_inner_forward"
                    ],
                    "classes": [
                      "InvertedResidual",
                      "InvertedResidualV3"
                    ],
                    "imports": [
                      "annotator.uniformer.mmcv.cnn",
                      "torch",
                      "torch.utils",
                      "se_layer"
                    ],
                    "size_lines": 209,
                    "has_main": false,
                    "docstring": null
                  },
                  "res_layer.py": {
                    "functions": [
                      "__init__"
                    ],
                    "classes": [
                      "ResLayer"
                    ],
                    "imports": [
                      "annotator.uniformer.mmcv.cnn",
                      "torch"
                    ],
                    "size_lines": 95,
                    "has_main": false,
                    "docstring": null
                  },
                  "up_conv_block.py": {
                    "functions": [
                      "__init__",
                      "forward"
                    ],
                    "classes": [
                      "UpConvBlock"
                    ],
                    "imports": [
                      "torch",
                      "torch.nn",
                      "annotator.uniformer.mmcv.cnn"
                    ],
                    "size_lines": 102,
                    "has_main": false,
                    "docstring": null
                  },
                  "__init__.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [
                      "drop",
                      "inverted_residual",
                      "make_divisible",
                      "res_layer",
                      "se_layer",
                      "self_attention_block",
                      "up_conv_block",
                      "weight_init"
                    ],
                    "size_lines": 14,
                    "has_main": false,
                    "docstring": null
                  },
                  "self_attention_block.py": {
                    "functions": [
                      "__init__",
                      "init_weights",
                      "build_project",
                      "forward"
                    ],
                    "classes": [
                      "SelfAttentionBlock"
                    ],
                    "imports": [
                      "torch",
                      "annotator.uniformer.mmcv.cnn",
                      "torch",
                      "torch.nn"
                    ],
                    "size_lines": 160,
                    "has_main": false,
                    "docstring": null
                  },
                  "make_divisible.py": {
                    "functions": [
                      "make_divisible"
                    ],
                    "classes": [],
                    "imports": [],
                    "size_lines": 28,
                    "has_main": false,
                    "docstring": null
                  },
                  "drop.py": {
                    "functions": [
                      "__init__",
                      "forward"
                    ],
                    "classes": [
                      "DropPath"
                    ],
                    "imports": [
                      "torch",
                      "torch"
                    ],
                    "size_lines": 32,
                    "has_main": false,
                    "docstring": "Modified from https://github.com/rwightman/pytorch-image-\nmodels/blob/master/timm/models/layers/drop.py."
                  },
                  "weight_init.py": {
                    "functions": [
                      "_no_grad_trunc_normal_",
                      "trunc_normal_",
                      "norm_cdf"
                    ],
                    "classes": [],
                    "imports": [
                      "math",
                      "warnings",
                      "torch"
                    ],
                    "size_lines": 63,
                    "has_main": false,
                    "docstring": "Modified from https://github.com/rwightman/pytorch-image-\nmodels/blob/master/timm/models/layers/drop.py."
                  }
                },
                "backbones": {
                  "hrnet.py": {
                    "functions": [
                      "__init__",
                      "_check_branches",
                      "_make_one_branch",
                      "_make_branches",
                      "_make_fuse_layers",
                      "forward",
                      "__init__",
                      "norm1",
                      "norm2",
                      "_make_transition_layer",
                      "_make_layer",
                      "_make_stage",
                      "init_weights",
                      "forward",
                      "train"
                    ],
                    "classes": [
                      "HRModule",
                      "HRNet"
                    ],
                    "imports": [
                      "torch.nn",
                      "annotator.uniformer.mmcv.cnn",
                      "annotator.uniformer.mmcv.runner",
                      "annotator.uniformer.mmcv.utils.parrots_wrapper",
                      "annotator.uniformer.mmseg.ops",
                      "annotator.uniformer.mmseg.utils",
                      "builder",
                      "resnet"
                    ],
                    "size_lines": 556,
                    "has_main": false,
                    "docstring": null
                  },
                  "cgnet.py": {
                    "functions": [
                      "__init__",
                      "forward",
                      "__init__",
                      "forward",
                      "__init__",
                      "forward",
                      "__init__",
                      "forward",
                      "init_weights",
                      "train",
                      "_inner_forward",
                      "_inner_forward"
                    ],
                    "classes": [
                      "GlobalContextExtractor",
                      "ContextGuidedBlock",
                      "InputInjection",
                      "CGNet"
                    ],
                    "imports": [
                      "torch",
                      "torch.nn",
                      "torch.utils.checkpoint",
                      "annotator.uniformer.mmcv.cnn",
                      "annotator.uniformer.mmcv.runner",
                      "annotator.uniformer.mmcv.utils.parrots_wrapper",
                      "annotator.uniformer.mmseg.utils",
                      "builder"
                    ],
                    "size_lines": 368,
                    "has_main": false,
                    "docstring": null
                  },
                  "unet.py": {
                    "functions": [
                      "__init__",
                      "forward",
                      "__init__",
                      "forward",
                      "__init__",
                      "forward",
                      "__init__",
                      "forward",
                      "train",
                      "_check_input_divisible",
                      "init_weights"
                    ],
                    "classes": [
                      "BasicConvBlock",
                      "DeconvModule",
                      "InterpConv",
                      "UNet"
                    ],
                    "imports": [
                      "torch.nn",
                      "torch.utils.checkpoint",
                      "annotator.uniformer.mmcv.cnn",
                      "annotator.uniformer.mmcv.runner",
                      "annotator.uniformer.mmcv.utils.parrots_wrapper",
                      "annotator.uniformer.mmseg.utils",
                      "builder",
                      "utils"
                    ],
                    "size_lines": 430,
                    "has_main": false,
                    "docstring": null
                  },
                  "resnest.py": {
                    "functions": [
                      "__init__",
                      "forward",
                      "__init__",
                      "norm0",
                      "norm1",
                      "forward",
                      "__init__",
                      "forward",
                      "__init__",
                      "make_res_layer",
                      "_inner_forward"
                    ],
                    "classes": [
                      "RSoftmax",
                      "SplitAttentionConv2d",
                      "Bottleneck",
                      "ResNeSt"
                    ],
                    "imports": [
                      "math",
                      "torch",
                      "torch.nn",
                      "torch.nn.functional",
                      "torch.utils.checkpoint",
                      "annotator.uniformer.mmcv.cnn",
                      "builder",
                      "utils",
                      "resnet",
                      "resnet"
                    ],
                    "size_lines": 315,
                    "has_main": false,
                    "docstring": null
                  },
                  "mobilenet_v2.py": {
                    "functions": [
                      "__init__",
                      "make_layer",
                      "init_weights",
                      "forward",
                      "_freeze_stages",
                      "train"
                    ],
                    "classes": [
                      "MobileNetV2"
                    ],
                    "imports": [
                      "logging",
                      "torch.nn",
                      "annotator.uniformer.mmcv.cnn",
                      "annotator.uniformer.mmcv.runner",
                      "torch.nn.modules.batchnorm",
                      "builder",
                      "utils"
                    ],
                    "size_lines": 181,
                    "has_main": false,
                    "docstring": null
                  },
                  "__init__.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [
                      "cgnet",
                      "hrnet",
                      "mobilenet_v2",
                      "mobilenet_v3",
                      "resnest",
                      "resnet",
                      "resnext",
                      "unet",
                      "vit",
                      "uniformer"
                    ],
                    "size_lines": 18,
                    "has_main": false,
                    "docstring": null
                  },
                  "mobilenet_v3.py": {
                    "functions": [
                      "__init__",
                      "_make_layer",
                      "init_weights",
                      "forward",
                      "_freeze_stages",
                      "train"
                    ],
                    "classes": [
                      "MobileNetV3"
                    ],
                    "imports": [
                      "logging",
                      "annotator.uniformer.mmcv",
                      "torch.nn",
                      "annotator.uniformer.mmcv.cnn",
                      "annotator.uniformer.mmcv.cnn.bricks",
                      "annotator.uniformer.mmcv.runner",
                      "torch.nn.modules.batchnorm",
                      "builder",
                      "utils"
                    ],
                    "size_lines": 256,
                    "has_main": false,
                    "docstring": null
                  },
                  "fast_scnn.py": {
                    "functions": [
                      "__init__",
                      "forward",
                      "__init__",
                      "_make_layer",
                      "forward",
                      "__init__",
                      "forward",
                      "__init__",
                      "init_weights",
                      "forward"
                    ],
                    "classes": [
                      "LearningToDownsample",
                      "GlobalFeatureExtractor",
                      "FeatureFusionModule",
                      "FastSCNN"
                    ],
                    "imports": [
                      "torch",
                      "torch.nn",
                      "annotator.uniformer.mmcv.cnn",
                      "torch.nn.modules.batchnorm",
                      "annotator.uniformer.mmseg.models.decode_heads.psp_head",
                      "annotator.uniformer.mmseg.ops",
                      "builder",
                      "utils.inverted_residual"
                    ],
                    "size_lines": 376,
                    "has_main": false,
                    "docstring": null
                  },
                  "resnext.py": {
                    "functions": [
                      "__init__",
                      "__init__",
                      "make_res_layer"
                    ],
                    "classes": [
                      "Bottleneck",
                      "ResNeXt"
                    ],
                    "imports": [
                      "math",
                      "annotator.uniformer.mmcv.cnn",
                      "builder",
                      "utils",
                      "resnet",
                      "resnet"
                    ],
                    "size_lines": 146,
                    "has_main": false,
                    "docstring": null
                  },
                  "vit.py": {
                    "functions": [
                      "__init__",
                      "forward",
                      "__init__",
                      "forward",
                      "__init__",
                      "forward",
                      "__init__",
                      "forward",
                      "__init__",
                      "init_weights",
                      "_pos_embeding",
                      "resize_pos_embed",
                      "forward",
                      "train",
                      "_inner_forward"
                    ],
                    "classes": [
                      "Mlp",
                      "Attention",
                      "Block",
                      "PatchEmbed",
                      "VisionTransformer"
                    ],
                    "imports": [
                      "math",
                      "torch",
                      "torch.nn",
                      "torch.nn.functional",
                      "torch.utils.checkpoint",
                      "annotator.uniformer.mmcv.cnn",
                      "annotator.uniformer.mmcv.runner",
                      "annotator.uniformer.mmcv.utils.parrots_wrapper",
                      "annotator.uniformer.mmseg.utils",
                      "builder",
                      "utils"
                    ],
                    "size_lines": 460,
                    "has_main": false,
                    "docstring": "Modified from https://github.com/rwightman/pytorch-image-\nmodels/blob/master/timm/models/vision_transformer.py."
                  },
                  "resnet.py": {
                    "functions": [
                      "__init__",
                      "norm1",
                      "norm2",
                      "forward",
                      "__init__",
                      "make_block_plugins",
                      "forward_plugin",
                      "norm1",
                      "norm2",
                      "norm3",
                      "forward",
                      "__init__",
                      "make_stage_plugins",
                      "make_res_layer",
                      "norm1",
                      "_make_stem_layer",
                      "_freeze_stages",
                      "init_weights",
                      "forward",
                      "train",
                      "__init__",
                      "__init__",
                      "_inner_forward",
                      "_inner_forward"
                    ],
                    "classes": [
                      "BasicBlock",
                      "Bottleneck",
                      "ResNet",
                      "ResNetV1c",
                      "ResNetV1d"
                    ],
                    "imports": [
                      "torch.nn",
                      "torch.utils.checkpoint",
                      "annotator.uniformer.mmcv.cnn",
                      "annotator.uniformer.mmcv.runner",
                      "annotator.uniformer.mmcv.utils.parrots_wrapper",
                      "annotator.uniformer.mmseg.utils",
                      "builder",
                      "utils"
                    ],
                    "size_lines": 689,
                    "has_main": false,
                    "docstring": null
                  },
                  "uniformer.py": {
                    "functions": [
                      "window_partition",
                      "window_reverse",
                      "__init__",
                      "forward",
                      "__init__",
                      "forward",
                      "__init__",
                      "forward",
                      "__init__",
                      "forward",
                      "__init__",
                      "forward",
                      "__init__",
                      "forward",
                      "__init__",
                      "forward",
                      "__init__",
                      "init_weights",
                      "_init_weights",
                      "no_weight_decay",
                      "get_classifier",
                      "reset_classifier",
                      "forward_features",
                      "forward"
                    ],
                    "classes": [
                      "Mlp",
                      "CMlp",
                      "CBlock",
                      "Attention",
                      "SABlock",
                      "SABlock_Windows",
                      "PatchEmbed",
                      "UniFormer"
                    ],
                    "imports": [
                      "collections",
                      "math",
                      "functools",
                      "torch",
                      "torch.nn",
                      "torch.nn.functional",
                      "torch.utils.checkpoint",
                      "numpy",
                      "timm.models.layers",
                      "annotator.uniformer.mmcv_custom",
                      "annotator.uniformer.mmseg.utils",
                      "builder"
                    ],
                    "size_lines": 423,
                    "has_main": false,
                    "docstring": null
                  }
                },
                "segmentors": {
                  "encoder_decoder.py": {
                    "functions": [
                      "__init__",
                      "_init_decode_head",
                      "_init_auxiliary_head",
                      "init_weights",
                      "extract_feat",
                      "encode_decode",
                      "_decode_head_forward_train",
                      "_decode_head_forward_test",
                      "_auxiliary_head_forward_train",
                      "forward_dummy",
                      "forward_train",
                      "slide_inference",
                      "whole_inference",
                      "inference",
                      "simple_test",
                      "aug_test"
                    ],
                    "classes": [
                      "EncoderDecoder"
                    ],
                    "imports": [
                      "torch",
                      "torch.nn",
                      "torch.nn.functional",
                      "annotator.uniformer.mmseg.core",
                      "annotator.uniformer.mmseg.ops",
                      "builder",
                      "base"
                    ],
                    "size_lines": 299,
                    "has_main": false,
                    "docstring": null
                  },
                  "__init__.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [
                      "base",
                      "cascade_encoder_decoder",
                      "encoder_decoder"
                    ],
                    "size_lines": 6,
                    "has_main": false,
                    "docstring": null
                  },
                  "cascade_encoder_decoder.py": {
                    "functions": [
                      "__init__",
                      "_init_decode_head",
                      "init_weights",
                      "encode_decode",
                      "_decode_head_forward_train"
                    ],
                    "classes": [
                      "CascadeEncoderDecoder"
                    ],
                    "imports": [
                      "torch",
                      "annotator.uniformer.mmseg.core",
                      "annotator.uniformer.mmseg.ops",
                      "builder",
                      "encoder_decoder"
                    ],
                    "size_lines": 99,
                    "has_main": false,
                    "docstring": null
                  },
                  "base.py": {
                    "functions": [
                      "__init__",
                      "with_neck",
                      "with_auxiliary_head",
                      "with_decode_head",
                      "extract_feat",
                      "encode_decode",
                      "forward_train",
                      "simple_test",
                      "aug_test",
                      "init_weights",
                      "forward_test",
                      "forward",
                      "train_step",
                      "val_step",
                      "_parse_losses",
                      "show_result"
                    ],
                    "classes": [
                      "BaseSegmentor"
                    ],
                    "imports": [
                      "logging",
                      "warnings",
                      "abc",
                      "collections",
                      "annotator.uniformer.mmcv",
                      "numpy",
                      "torch",
                      "torch.distributed",
                      "torch.nn",
                      "annotator.uniformer.mmcv.runner"
                    ],
                    "size_lines": 274,
                    "has_main": false,
                    "docstring": null
                  }
                },
                "decode_heads": {
                  "uper_head.py": {
                    "functions": [
                      "__init__",
                      "psp_forward",
                      "forward"
                    ],
                    "classes": [
                      "UPerHead"
                    ],
                    "imports": [
                      "torch",
                      "torch.nn",
                      "annotator.uniformer.mmcv.cnn",
                      "annotator.uniformer.mmseg.ops",
                      "builder",
                      "decode_head",
                      "psp_head"
                    ],
                    "size_lines": 127,
                    "has_main": false,
                    "docstring": null
                  },
                  "ema_head.py": {
                    "functions": [
                      "reduce_mean",
                      "__init__",
                      "forward",
                      "__init__",
                      "forward"
                    ],
                    "classes": [
                      "EMAModule",
                      "EMAHead"
                    ],
                    "imports": [
                      "math",
                      "torch",
                      "torch.distributed",
                      "torch.nn",
                      "torch.nn.functional",
                      "annotator.uniformer.mmcv.cnn",
                      "builder",
                      "decode_head"
                    ],
                    "size_lines": 169,
                    "has_main": false,
                    "docstring": null
                  },
                  "lraspp_head.py": {
                    "functions": [
                      "__init__",
                      "forward"
                    ],
                    "classes": [
                      "LRASPPHead"
                    ],
                    "imports": [
                      "torch",
                      "torch.nn",
                      "annotator.uniformer.mmcv",
                      "annotator.uniformer.mmcv.cnn",
                      "annotator.uniformer.mmseg.ops",
                      "builder",
                      "decode_head"
                    ],
                    "size_lines": 91,
                    "has_main": false,
                    "docstring": null
                  },
                  "ocr_head.py": {
                    "functions": [
                      "__init__",
                      "forward",
                      "__init__",
                      "forward",
                      "__init__",
                      "forward"
                    ],
                    "classes": [
                      "SpatialGatherModule",
                      "ObjectAttentionBlock",
                      "OCRHead"
                    ],
                    "imports": [
                      "torch",
                      "torch.nn",
                      "torch.nn.functional",
                      "annotator.uniformer.mmcv.cnn",
                      "annotator.uniformer.mmseg.ops",
                      "builder",
                      "utils",
                      "cascade_decode_head"
                    ],
                    "size_lines": 128,
                    "has_main": false,
                    "docstring": null
                  },
                  "dm_head.py": {
                    "functions": [
                      "__init__",
                      "forward",
                      "__init__",
                      "forward"
                    ],
                    "classes": [
                      "DCM",
                      "DMHead"
                    ],
                    "imports": [
                      "torch",
                      "torch.nn",
                      "torch.nn.functional",
                      "annotator.uniformer.mmcv.cnn",
                      "builder",
                      "decode_head"
                    ],
                    "size_lines": 141,
                    "has_main": false,
                    "docstring": null
                  },
                  "gc_head.py": {
                    "functions": [
                      "__init__",
                      "forward"
                    ],
                    "classes": [
                      "GCHead"
                    ],
                    "imports": [
                      "torch",
                      "annotator.uniformer.mmcv.cnn",
                      "builder",
                      "fcn_head"
                    ],
                    "size_lines": 48,
                    "has_main": false,
                    "docstring": null
                  },
                  "dnl_head.py": {
                    "functions": [
                      "__init__",
                      "embedded_gaussian",
                      "forward",
                      "__init__",
                      "forward"
                    ],
                    "classes": [
                      "DisentangledNonLocal2d",
                      "DNLHead"
                    ],
                    "imports": [
                      "torch",
                      "annotator.uniformer.mmcv.cnn",
                      "torch",
                      "builder",
                      "fcn_head"
                    ],
                    "size_lines": 132,
                    "has_main": false,
                    "docstring": null
                  },
                  "psa_head.py": {
                    "functions": [
                      "__init__",
                      "forward"
                    ],
                    "classes": [
                      "PSAHead"
                    ],
                    "imports": [
                      "torch",
                      "torch.nn",
                      "torch.nn.functional",
                      "annotator.uniformer.mmcv.cnn",
                      "annotator.uniformer.mmseg.ops",
                      "builder",
                      "decode_head",
                      "annotator.uniformer.mmcv.ops"
                    ],
                    "size_lines": 197,
                    "has_main": false,
                    "docstring": null
                  },
                  "sep_aspp_head.py": {
                    "functions": [
                      "__init__",
                      "__init__",
                      "forward"
                    ],
                    "classes": [
                      "DepthwiseSeparableASPPModule",
                      "DepthwiseSeparableASPPHead"
                    ],
                    "imports": [
                      "torch",
                      "torch.nn",
                      "annotator.uniformer.mmcv.cnn",
                      "annotator.uniformer.mmseg.ops",
                      "builder",
                      "aspp_head"
                    ],
                    "size_lines": 102,
                    "has_main": false,
                    "docstring": null
                  },
                  "nl_head.py": {
                    "functions": [
                      "__init__",
                      "forward"
                    ],
                    "classes": [
                      "NLHead"
                    ],
                    "imports": [
                      "torch",
                      "annotator.uniformer.mmcv.cnn",
                      "builder",
                      "fcn_head"
                    ],
                    "size_lines": 50,
                    "has_main": false,
                    "docstring": null
                  },
                  "apc_head.py": {
                    "functions": [
                      "__init__",
                      "forward",
                      "__init__",
                      "forward"
                    ],
                    "classes": [
                      "ACM",
                      "APCHead"
                    ],
                    "imports": [
                      "torch",
                      "torch.nn",
                      "torch.nn.functional",
                      "annotator.uniformer.mmcv.cnn",
                      "annotator.uniformer.mmseg.ops",
                      "builder",
                      "decode_head"
                    ],
                    "size_lines": 159,
                    "has_main": false,
                    "docstring": null
                  },
                  "sep_fcn_head.py": {
                    "functions": [
                      "__init__"
                    ],
                    "classes": [
                      "DepthwiseSeparableFCNHead"
                    ],
                    "imports": [
                      "annotator.uniformer.mmcv.cnn",
                      "builder",
                      "fcn_head"
                    ],
                    "size_lines": 52,
                    "has_main": false,
                    "docstring": null
                  },
                  "__init__.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [
                      "ann_head",
                      "apc_head",
                      "aspp_head",
                      "cc_head",
                      "da_head",
                      "dm_head",
                      "dnl_head",
                      "ema_head",
                      "enc_head",
                      "fcn_head",
                      "fpn_head",
                      "gc_head",
                      "lraspp_head",
                      "nl_head",
                      "ocr_head",
                      "psa_head",
                      "psp_head",
                      "sep_aspp_head",
                      "sep_fcn_head",
                      "uper_head"
                    ],
                    "size_lines": 29,
                    "has_main": false,
                    "docstring": null
                  },
                  "cascade_decode_head.py": {
                    "functions": [
                      "__init__",
                      "forward",
                      "forward_train",
                      "forward_test"
                    ],
                    "classes": [
                      "BaseCascadeDecodeHead"
                    ],
                    "imports": [
                      "abc",
                      "decode_head"
                    ],
                    "size_lines": 58,
                    "has_main": false,
                    "docstring": null
                  },
                  "ann_head.py": {
                    "functions": [
                      "__init__",
                      "forward",
                      "__init__",
                      "__init__",
                      "forward",
                      "__init__",
                      "forward",
                      "__init__",
                      "forward"
                    ],
                    "classes": [
                      "PPMConcat",
                      "SelfAttentionBlock",
                      "AFNB",
                      "APNB",
                      "ANNHead"
                    ],
                    "imports": [
                      "torch",
                      "torch.nn",
                      "annotator.uniformer.mmcv.cnn",
                      "builder",
                      "utils",
                      "decode_head"
                    ],
                    "size_lines": 246,
                    "has_main": false,
                    "docstring": null
                  },
                  "fcn_head.py": {
                    "functions": [
                      "__init__",
                      "forward"
                    ],
                    "classes": [
                      "FCNHead"
                    ],
                    "imports": [
                      "torch",
                      "torch.nn",
                      "annotator.uniformer.mmcv.cnn",
                      "builder",
                      "decode_head"
                    ],
                    "size_lines": 82,
                    "has_main": false,
                    "docstring": null
                  },
                  "point_head.py": {
                    "functions": [
                      "calculate_uncertainty",
                      "__init__",
                      "init_weights",
                      "cls_seg",
                      "forward",
                      "_get_fine_grained_point_feats",
                      "_get_coarse_point_feats",
                      "forward_train",
                      "forward_test",
                      "losses",
                      "get_points_train",
                      "get_points_test"
                    ],
                    "classes": [
                      "PointHead"
                    ],
                    "imports": [
                      "torch",
                      "torch.nn",
                      "annotator.uniformer.mmcv.cnn",
                      "annotator.uniformer.mmcv.ops",
                      "annotator.uniformer.mmseg.models.builder",
                      "annotator.uniformer.mmseg.ops",
                      "losses",
                      "cascade_decode_head"
                    ],
                    "size_lines": 350,
                    "has_main": false,
                    "docstring": null
                  },
                  "enc_head.py": {
                    "functions": [
                      "__init__",
                      "forward",
                      "__init__",
                      "forward",
                      "forward_test",
                      "_convert_to_onehot_labels",
                      "losses"
                    ],
                    "classes": [
                      "EncModule",
                      "EncHead"
                    ],
                    "imports": [
                      "torch",
                      "torch.nn",
                      "torch.nn.functional",
                      "annotator.uniformer.mmcv.cnn",
                      "annotator.uniformer.mmseg.ops",
                      "builder",
                      "decode_head"
                    ],
                    "size_lines": 188,
                    "has_main": false,
                    "docstring": null
                  },
                  "aspp_head.py": {
                    "functions": [
                      "__init__",
                      "forward",
                      "__init__",
                      "forward"
                    ],
                    "classes": [
                      "ASPPModule",
                      "ASPPHead"
                    ],
                    "imports": [
                      "torch",
                      "torch.nn",
                      "annotator.uniformer.mmcv.cnn",
                      "annotator.uniformer.mmseg.ops",
                      "builder",
                      "decode_head"
                    ],
                    "size_lines": 108,
                    "has_main": false,
                    "docstring": null
                  },
                  "decode_head.py": {
                    "functions": [
                      "__init__",
                      "extra_repr",
                      "_init_inputs",
                      "init_weights",
                      "_transform_inputs",
                      "forward",
                      "forward_train",
                      "forward_test",
                      "cls_seg",
                      "losses"
                    ],
                    "classes": [
                      "BaseDecodeHead"
                    ],
                    "imports": [
                      "abc",
                      "torch",
                      "torch.nn",
                      "annotator.uniformer.mmcv.cnn",
                      "annotator.uniformer.mmcv.runner",
                      "annotator.uniformer.mmseg.core",
                      "annotator.uniformer.mmseg.ops",
                      "builder",
                      "losses"
                    ],
                    "size_lines": 235,
                    "has_main": false,
                    "docstring": null
                  },
                  "cc_head.py": {
                    "functions": [
                      "__init__",
                      "forward"
                    ],
                    "classes": [
                      "CCHead"
                    ],
                    "imports": [
                      "torch",
                      "builder",
                      "fcn_head",
                      "annotator.uniformer.mmcv.ops"
                    ],
                    "size_lines": 43,
                    "has_main": false,
                    "docstring": null
                  },
                  "psp_head.py": {
                    "functions": [
                      "__init__",
                      "forward",
                      "__init__",
                      "forward"
                    ],
                    "classes": [
                      "PPM",
                      "PSPHead"
                    ],
                    "imports": [
                      "torch",
                      "torch.nn",
                      "annotator.uniformer.mmcv.cnn",
                      "annotator.uniformer.mmseg.ops",
                      "builder",
                      "decode_head"
                    ],
                    "size_lines": 102,
                    "has_main": false,
                    "docstring": null
                  },
                  "da_head.py": {
                    "functions": [
                      "__init__",
                      "forward",
                      "__init__",
                      "forward",
                      "__init__",
                      "pam_cls_seg",
                      "cam_cls_seg",
                      "forward",
                      "forward_test",
                      "losses"
                    ],
                    "classes": [
                      "PAM",
                      "CAM",
                      "DAHead"
                    ],
                    "imports": [
                      "torch",
                      "torch.nn.functional",
                      "annotator.uniformer.mmcv.cnn",
                      "torch",
                      "annotator.uniformer.mmseg.core",
                      "builder",
                      "utils",
                      "decode_head"
                    ],
                    "size_lines": 179,
                    "has_main": false,
                    "docstring": null
                  },
                  "fpn_head.py": {
                    "functions": [
                      "__init__",
                      "forward"
                    ],
                    "classes": [
                      "FPNHead"
                    ],
                    "imports": [
                      "numpy",
                      "torch.nn",
                      "annotator.uniformer.mmcv.cnn",
                      "annotator.uniformer.mmseg.ops",
                      "builder",
                      "decode_head"
                    ],
                    "size_lines": 69,
                    "has_main": false,
                    "docstring": null
                  }
                }
              },
              "ops": {
                "encoding.py": {
                  "functions": [
                    "__init__",
                    "scaled_l2",
                    "aggregate",
                    "forward",
                    "__repr__"
                  ],
                  "classes": [
                    "Encoding"
                  ],
                  "imports": [
                    "torch",
                    "torch",
                    "torch.nn"
                  ],
                  "size_lines": 75,
                  "has_main": false,
                  "docstring": null
                },
                "__init__.py": {
                  "functions": [],
                  "classes": [],
                  "imports": [
                    "encoding",
                    "wrappers"
                  ],
                  "size_lines": 5,
                  "has_main": false,
                  "docstring": null
                },
                "wrappers.py": {
                  "functions": [
                    "resize",
                    "__init__",
                    "forward"
                  ],
                  "classes": [
                    "Upsample"
                  ],
                  "imports": [
                    "warnings",
                    "torch.nn",
                    "torch.nn.functional"
                  ],
                  "size_lines": 51,
                  "has_main": false,
                  "docstring": null
                }
              }
            },
            "mmcv_custom": {
              "checkpoint.py": {
                "functions": [
                  "_get_mmcv_home",
                  "load_state_dict",
                  "load_url_dist",
                  "load_pavimodel_dist",
                  "load_fileclient_dist",
                  "get_torchvision_models",
                  "get_external_models",
                  "get_mmcls_models",
                  "get_deprecated_model_names",
                  "_process_mmcls_checkpoint",
                  "_load_checkpoint",
                  "load_checkpoint",
                  "weights_to_cpu",
                  "_save_to_state_dict",
                  "get_state_dict",
                  "save_checkpoint",
                  "load"
                ],
                "classes": [],
                "imports": [
                  "io",
                  "os",
                  "os.path",
                  "pkgutil",
                  "time",
                  "warnings",
                  "collections",
                  "importlib",
                  "tempfile",
                  "torch",
                  "torchvision",
                  "torch.optim",
                  "torch.utils",
                  "torch.nn",
                  "annotator.uniformer.mmcv",
                  "annotator.uniformer.mmcv.fileio",
                  "annotator.uniformer.mmcv.fileio",
                  "annotator.uniformer.mmcv.parallel",
                  "annotator.uniformer.mmcv.utils",
                  "annotator.uniformer.mmcv.runner",
                  "pavi",
                  "pavi",
                  "pavi.exception"
                ],
                "size_lines": 500,
                "has_main": false,
                "docstring": null
              },
              "__init__.py": {
                "functions": [],
                "classes": [],
                "imports": [
                  "checkpoint"
                ],
                "size_lines": 5,
                "has_main": false,
                "docstring": null
              }
            },
            "configs": {
              "_base_": {
                "default_runtime.py": {
                  "functions": [],
                  "classes": [],
                  "imports": [],
                  "size_lines": 15,
                  "has_main": false,
                  "docstring": null
                },
                "datasets": {
                  "cityscapes.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 55,
                    "has_main": false,
                    "docstring": null
                  },
                  "pascal_context.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 61,
                    "has_main": false,
                    "docstring": null
                  },
                  "pascal_voc12_aug.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 10,
                    "has_main": false,
                    "docstring": null
                  },
                  "pascal_context_59.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 61,
                    "has_main": false,
                    "docstring": null
                  },
                  "hrf.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 60,
                    "has_main": false,
                    "docstring": null
                  },
                  "ade20k.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 55,
                    "has_main": false,
                    "docstring": null
                  },
                  "chase_db1.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 60,
                    "has_main": false,
                    "docstring": null
                  },
                  "cityscapes_769x769.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 36,
                    "has_main": false,
                    "docstring": null
                  },
                  "stare.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 60,
                    "has_main": false,
                    "docstring": null
                  },
                  "drive.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 60,
                    "has_main": false,
                    "docstring": null
                  },
                  "pascal_voc12.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 58,
                    "has_main": false,
                    "docstring": null
                  }
                },
                "models": {
                  "fcn_r50-d8.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 46,
                    "has_main": false,
                    "docstring": null
                  },
                  "pspnet_r50-d8.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 45,
                    "has_main": false,
                    "docstring": null
                  },
                  "nonlocal_r50-d8.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 47,
                    "has_main": false,
                    "docstring": null
                  },
                  "fcn_hr18.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 53,
                    "has_main": false,
                    "docstring": null
                  },
                  "encnet_r50-d8.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 49,
                    "has_main": false,
                    "docstring": null
                  },
                  "cgnet.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 36,
                    "has_main": false,
                    "docstring": null
                  },
                  "ccnet_r50-d8.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 45,
                    "has_main": false,
                    "docstring": null
                  },
                  "gcnet_r50-d8.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 47,
                    "has_main": false,
                    "docstring": null
                  },
                  "deeplabv3_unet_s5-d16.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 51,
                    "has_main": false,
                    "docstring": null
                  },
                  "dnl_r50-d8.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 47,
                    "has_main": false,
                    "docstring": null
                  },
                  "fast_scnn.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 58,
                    "has_main": false,
                    "docstring": null
                  },
                  "upernet_r50.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 45,
                    "has_main": false,
                    "docstring": null
                  },
                  "pspnet_unet_s5-d16.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 51,
                    "has_main": false,
                    "docstring": null
                  },
                  "fcn_unet_s5-d16.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 52,
                    "has_main": false,
                    "docstring": null
                  },
                  "danet_r50-d8.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 45,
                    "has_main": false,
                    "docstring": null
                  },
                  "ocrnet_r50-d8.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 48,
                    "has_main": false,
                    "docstring": null
                  },
                  "pointrend_r50.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 57,
                    "has_main": false,
                    "docstring": null
                  },
                  "psanet_r50-d8.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 50,
                    "has_main": false,
                    "docstring": null
                  },
                  "ocrnet_hr18.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 69,
                    "has_main": false,
                    "docstring": null
                  },
                  "deeplabv3plus_r50-d8.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 47,
                    "has_main": false,
                    "docstring": null
                  },
                  "dmnet_r50-d8.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 45,
                    "has_main": false,
                    "docstring": null
                  },
                  "lraspp_m-v3-d8.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 26,
                    "has_main": false,
                    "docstring": null
                  },
                  "deeplabv3_r50-d8.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 45,
                    "has_main": false,
                    "docstring": null
                  },
                  "fpn_r50.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 37,
                    "has_main": false,
                    "docstring": null
                  },
                  "ann_r50-d8.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 47,
                    "has_main": false,
                    "docstring": null
                  },
                  "fpn_uniformer.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 36,
                    "has_main": false,
                    "docstring": null
                  },
                  "apcnet_r50-d8.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 45,
                    "has_main": false,
                    "docstring": null
                  },
                  "emanet_r50-d8.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 48,
                    "has_main": false,
                    "docstring": null
                  },
                  "upernet_uniformer.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 43,
                    "has_main": false,
                    "docstring": null
                  }
                },
                "schedules": {
                  "schedule_160k.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 10,
                    "has_main": false,
                    "docstring": null
                  },
                  "schedule_80k.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 10,
                    "has_main": false,
                    "docstring": null
                  },
                  "schedule_40k.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 10,
                    "has_main": false,
                    "docstring": null
                  },
                  "schedule_20k.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [],
                    "size_lines": 10,
                    "has_main": false,
                    "docstring": null
                  }
                }
              }
            },
            "mmcv": {
              "version.py": {
                "functions": [
                  "parse_version_info"
                ],
                "classes": [],
                "imports": [
                  "packaging.version"
                ],
                "size_lines": 36,
                "has_main": false,
                "docstring": null
              },
              "__init__.py": {
                "functions": [],
                "classes": [],
                "imports": [
                  "arraymisc",
                  "fileio",
                  "image",
                  "utils",
                  "version",
                  "video",
                  "visualization"
                ],
                "size_lines": 16,
                "has_main": false,
                "docstring": null
              },
              "arraymisc": {
                "quantization.py": {
                  "functions": [
                    "quantize",
                    "dequantize"
                  ],
                  "classes": [],
                  "imports": [
                    "numpy"
                  ],
                  "size_lines": 56,
                  "has_main": false,
                  "docstring": null
                },
                "__init__.py": {
                  "functions": [],
                  "classes": [],
                  "imports": [
                    "quantization"
                  ],
                  "size_lines": 5,
                  "has_main": false,
                  "docstring": null
                }
              },
              "visualization": {
                "color.py": {
                  "functions": [
                    "color_val"
                  ],
                  "classes": [
                    "Color"
                  ],
                  "imports": [
                    "enum",
                    "numpy",
                    "annotator.uniformer.mmcv.utils"
                  ],
                  "size_lines": 52,
                  "has_main": false,
                  "docstring": null
                },
                "optflow.py": {
                  "functions": [
                    "flowshow",
                    "flow2rgb",
                    "make_color_wheel"
                  ],
                  "classes": [],
                  "imports": [
                    "__future__",
                    "numpy",
                    "annotator.uniformer.mmcv.image",
                    "annotator.uniformer.mmcv.video",
                    "image"
                  ],
                  "size_lines": 113,
                  "has_main": false,
                  "docstring": null
                },
                "__init__.py": {
                  "functions": [],
                  "classes": [],
                  "imports": [
                    "color",
                    "image",
                    "optflow"
                  ],
                  "size_lines": 10,
                  "has_main": false,
                  "docstring": null
                },
                "image.py": {
                  "functions": [
                    "imshow",
                    "imshow_bboxes",
                    "imshow_det_bboxes"
                  ],
                  "classes": [],
                  "imports": [
                    "cv2",
                    "numpy",
                    "annotator.uniformer.mmcv.image",
                    "color"
                  ],
                  "size_lines": 153,
                  "has_main": false,
                  "docstring": null
                }
              },
              "video": {
                "optflow.py": {
                  "functions": [
                    "flowread",
                    "flowwrite",
                    "quantize_flow",
                    "dequantize_flow",
                    "flow_warp",
                    "flow_from_bytes",
                    "sparse_flow_from_bytes"
                  ],
                  "classes": [],
                  "imports": [
                    "warnings",
                    "cv2",
                    "numpy",
                    "annotator.uniformer.mmcv.arraymisc",
                    "annotator.uniformer.mmcv.image",
                    "annotator.uniformer.mmcv.utils"
                  ],
                  "size_lines": 255,
                  "has_main": false,
                  "docstring": null
                },
                "io.py": {
                  "functions": [
                    "frames2video",
                    "__init__",
                    "capacity",
                    "size",
                    "put",
                    "get",
                    "__init__",
                    "vcap",
                    "opened",
                    "width",
                    "height",
                    "resolution",
                    "fps",
                    "frame_cnt",
                    "fourcc",
                    "position",
                    "_get_real_position",
                    "_set_real_position",
                    "read",
                    "get_frame",
                    "current_frame",
                    "cvt2frames",
                    "__len__",
                    "__getitem__",
                    "__iter__",
                    "__next__",
                    "__enter__",
                    "__exit__",
                    "write_frame",
                    "write_frame"
                  ],
                  "classes": [
                    "Cache",
                    "VideoReader"
                  ],
                  "imports": [
                    "os.path",
                    "collections",
                    "cv2",
                    "cv2",
                    "annotator.uniformer.mmcv.utils"
                  ],
                  "size_lines": 319,
                  "has_main": false,
                  "docstring": null
                },
                "__init__.py": {
                  "functions": [],
                  "classes": [],
                  "imports": [
                    "io",
                    "optflow",
                    "processing"
                  ],
                  "size_lines": 12,
                  "has_main": false,
                  "docstring": null
                },
                "processing.py": {
                  "functions": [
                    "convert_video",
                    "resize_video",
                    "cut_video",
                    "concat_video"
                  ],
                  "classes": [],
                  "imports": [
                    "os",
                    "os.path",
                    "subprocess",
                    "tempfile",
                    "annotator.uniformer.mmcv.utils"
                  ],
                  "size_lines": 161,
                  "has_main": false,
                  "docstring": null
                }
              },
              "parallel": {
                "distributed_deprecated.py": {
                  "functions": [
                    "__init__",
                    "_dist_broadcast_coalesced",
                    "_sync_params",
                    "scatter",
                    "forward",
                    "train_step",
                    "val_step"
                  ],
                  "classes": [
                    "MMDistributedDataParallel"
                  ],
                  "imports": [
                    "torch",
                    "torch.distributed",
                    "torch.nn",
                    "torch._utils",
                    "annotator.uniformer.mmcv.utils",
                    "registry",
                    "scatter_gather"
                  ],
                  "size_lines": 71,
                  "has_main": false,
                  "docstring": null
                },
                "collate.py": {
                  "functions": [
                    "collate"
                  ],
                  "classes": [],
                  "imports": [
                    "collections.abc",
                    "torch",
                    "torch.nn.functional",
                    "torch.utils.data.dataloader",
                    "data_container"
                  ],
                  "size_lines": 85,
                  "has_main": false,
                  "docstring": null
                },
                "scatter_gather.py": {
                  "functions": [
                    "scatter",
                    "scatter_kwargs",
                    "scatter_map"
                  ],
                  "classes": [],
                  "imports": [
                    "torch",
                    "torch.nn.parallel._functions",
                    "_functions",
                    "data_container"
                  ],
                  "size_lines": 60,
                  "has_main": false,
                  "docstring": null
                },
                "registry.py": {
                  "functions": [],
                  "classes": [],
                  "imports": [
                    "torch.nn.parallel",
                    "annotator.uniformer.mmcv.utils"
                  ],
                  "size_lines": 9,
                  "has_main": false,
                  "docstring": null
                },
                "_functions.py": {
                  "functions": [
                    "scatter",
                    "synchronize_stream",
                    "get_input_device",
                    "forward"
                  ],
                  "classes": [
                    "Scatter"
                  ],
                  "imports": [
                    "torch",
                    "torch.nn.parallel._functions"
                  ],
                  "size_lines": 80,
                  "has_main": false,
                  "docstring": null
                },
                "data_parallel.py": {
                  "functions": [
                    "__init__",
                    "forward",
                    "scatter",
                    "train_step",
                    "val_step"
                  ],
                  "classes": [
                    "MMDataParallel"
                  ],
                  "imports": [
                    "itertools",
                    "torch.nn.parallel",
                    "scatter_gather"
                  ],
                  "size_lines": 90,
                  "has_main": false,
                  "docstring": null
                },
                "__init__.py": {
                  "functions": [],
                  "classes": [],
                  "imports": [
                    "collate",
                    "data_container",
                    "data_parallel",
                    "distributed",
                    "registry",
                    "scatter_gather",
                    "utils"
                  ],
                  "size_lines": 14,
                  "has_main": false,
                  "docstring": null
                },
                "distributed.py": {
                  "functions": [
                    "to_kwargs",
                    "scatter",
                    "train_step",
                    "val_step"
                  ],
                  "classes": [
                    "MMDistributedDataParallel"
                  ],
                  "imports": [
                    "torch",
                    "torch.nn.parallel.distributed",
                    "annotator.uniformer.mmcv",
                    "annotator.uniformer.mmcv.utils",
                    "scatter_gather"
                  ],
                  "size_lines": 113,
                  "has_main": false,
                  "docstring": null
                },
                "utils.py": {
                  "functions": [
                    "is_module_wrapper"
                  ],
                  "classes": [],
                  "imports": [
                    "registry"
                  ],
                  "size_lines": 21,
                  "has_main": false,
                  "docstring": null
                },
                "data_container.py": {
                  "functions": [
                    "assert_tensor_type",
                    "wrapper",
                    "__init__",
                    "__repr__",
                    "__len__",
                    "data",
                    "datatype",
                    "cpu_only",
                    "stack",
                    "padding_value",
                    "pad_dims",
                    "size",
                    "dim"
                  ],
                  "classes": [
                    "DataContainer"
                  ],
                  "imports": [
                    "functools",
                    "torch"
                  ],
                  "size_lines": 90,
                  "has_main": false,
                  "docstring": null
                }
              },
              "fileio": {
                "io.py": {
                  "functions": [
                    "load",
                    "dump",
                    "_register_handler",
                    "register_handler",
                    "wrap"
                  ],
                  "classes": [],
                  "imports": [
                    "io",
                    "pathlib",
                    "utils",
                    "file_client",
                    "handlers"
                  ],
                  "size_lines": 152,
                  "has_main": false,
                  "docstring": null
                },
                "__init__.py": {
                  "functions": [],
                  "classes": [],
                  "imports": [
                    "file_client",
                    "handlers",
                    "io",
                    "parse"
                  ],
                  "size_lines": 12,
                  "has_main": false,
                  "docstring": null
                },
                "file_client.py": {
                  "functions": [
                    "name",
                    "allow_symlink",
                    "get",
                    "get_text",
                    "__init__",
                    "get",
                    "get_text",
                    "__init__",
                    "_map_path",
                    "_format_path",
                    "get",
                    "get_text",
                    "put",
                    "put_text",
                    "remove",
                    "exists",
                    "isdir",
                    "isfile",
                    "join_path",
                    "get_local_path",
                    "list_dir_or_file",
                    "__init__",
                    "get",
                    "get_text",
                    "__init__",
                    "get",
                    "get_text",
                    "get",
                    "get_text",
                    "put",
                    "put_text",
                    "remove",
                    "exists",
                    "isdir",
                    "isfile",
                    "join_path",
                    "get_local_path",
                    "list_dir_or_file",
                    "get",
                    "get_text",
                    "get_local_path",
                    "__new__",
                    "name",
                    "allow_symlink",
                    "parse_uri_prefix",
                    "infer_client",
                    "_register_backend",
                    "register_backend",
                    "get",
                    "get_text",
                    "put",
                    "put_text",
                    "remove",
                    "exists",
                    "isdir",
                    "isfile",
                    "join_path",
                    "get_local_path",
                    "list_dir_or_file",
                    "_list_dir_or_file",
                    "_list_dir_or_file",
                    "_register"
                  ],
                  "classes": [
                    "BaseStorageBackend",
                    "CephBackend",
                    "PetrelBackend",
                    "MemcachedBackend",
                    "LmdbBackend",
                    "HardDiskBackend",
                    "HTTPBackend",
                    "FileClient"
                  ],
                  "imports": [
                    "inspect",
                    "os",
                    "os.path",
                    "re",
                    "tempfile",
                    "warnings",
                    "abc",
                    "contextlib",
                    "pathlib",
                    "typing",
                    "urllib.request",
                    "annotator.uniformer.mmcv",
                    "annotator.uniformer.mmcv.utils.misc",
                    "annotator.uniformer.mmcv.utils.path",
                    "mc",
                    "ceph",
                    "petrel_client",
                    "sys",
                    "mc",
                    "lmdb"
                  ],
                  "size_lines": 1149,
                  "has_main": false,
                  "docstring": null
                },
                "parse.py": {
                  "functions": [
                    "list_from_file",
                    "dict_from_file"
                  ],
                  "classes": [],
                  "imports": [
                    "io",
                    "file_client"
                  ],
                  "size_lines": 98,
                  "has_main": false,
                  "docstring": null
                },
                "handlers": {
                  "__init__.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [
                      "base",
                      "json_handler",
                      "pickle_handler",
                      "yaml_handler"
                    ],
                    "size_lines": 8,
                    "has_main": false,
                    "docstring": null
                  },
                  "json_handler.py": {
                    "functions": [
                      "set_default",
                      "load_from_fileobj",
                      "dump_to_fileobj",
                      "dump_to_str"
                    ],
                    "classes": [
                      "JsonHandler"
                    ],
                    "imports": [
                      "json",
                      "numpy",
                      "base"
                    ],
                    "size_lines": 37,
                    "has_main": false,
                    "docstring": null
                  },
                  "pickle_handler.py": {
                    "functions": [
                      "load_from_fileobj",
                      "load_from_path",
                      "dump_to_str",
                      "dump_to_fileobj",
                      "dump_to_path"
                    ],
                    "classes": [
                      "PickleHandler"
                    ],
                    "imports": [
                      "pickle",
                      "base"
                    ],
                    "size_lines": 29,
                    "has_main": false,
                    "docstring": null
                  },
                  "yaml_handler.py": {
                    "functions": [
                      "load_from_fileobj",
                      "dump_to_fileobj",
                      "dump_to_str"
                    ],
                    "classes": [
                      "YamlHandler"
                    ],
                    "imports": [
                      "yaml",
                      "base",
                      "yaml",
                      "yaml"
                    ],
                    "size_lines": 25,
                    "has_main": false,
                    "docstring": null
                  },
                  "base.py": {
                    "functions": [
                      "load_from_fileobj",
                      "dump_to_fileobj",
                      "dump_to_str",
                      "load_from_path",
                      "dump_to_path"
                    ],
                    "classes": [
                      "BaseFileHandler"
                    ],
                    "imports": [
                      "abc"
                    ],
                    "size_lines": 31,
                    "has_main": false,
                    "docstring": null
                  }
                }
              },
              "runner": {
                "default_constructor.py": {
                  "functions": [
                    "__init__",
                    "__call__"
                  ],
                  "classes": [
                    "DefaultRunnerConstructor"
                  ],
                  "imports": [
                    "builder"
                  ],
                  "size_lines": 45,
                  "has_main": false,
                  "docstring": null
                },
                "base_runner.py": {
                  "functions": [
                    "__init__",
                    "model_name",
                    "rank",
                    "world_size",
                    "hooks",
                    "epoch",
                    "iter",
                    "inner_iter",
                    "max_epochs",
                    "max_iters",
                    "train",
                    "val",
                    "run",
                    "save_checkpoint",
                    "current_lr",
                    "current_momentum",
                    "register_hook",
                    "register_hook_from_cfg",
                    "call_hook",
                    "get_hook_info",
                    "load_checkpoint",
                    "resume",
                    "register_lr_hook",
                    "register_momentum_hook",
                    "register_optimizer_hook",
                    "register_checkpoint_hook",
                    "register_logger_hooks",
                    "register_timer_hook",
                    "register_custom_hooks",
                    "register_profiler_hook",
                    "register_training_hooks",
                    "_get_momentum"
                  ],
                  "classes": [
                    "BaseRunner"
                  ],
                  "imports": [
                    "copy",
                    "logging",
                    "os.path",
                    "warnings",
                    "abc",
                    "torch",
                    "torch.optim",
                    "annotator.uniformer.mmcv",
                    "parallel",
                    "checkpoint",
                    "dist_utils",
                    "hooks",
                    "log_buffer",
                    "priority",
                    "utils"
                  ],
                  "size_lines": 543,
                  "has_main": false,
                  "docstring": null
                },
                "checkpoint.py": {
                  "functions": [
                    "_get_mmcv_home",
                    "load_state_dict",
                    "get_torchvision_models",
                    "get_external_models",
                    "get_mmcls_models",
                    "get_deprecated_model_names",
                    "_process_mmcls_checkpoint",
                    "load_from_local",
                    "load_from_http",
                    "load_from_pavi",
                    "load_from_ceph",
                    "load_from_torchvision",
                    "load_from_openmmlab",
                    "load_from_mmcls",
                    "_load_checkpoint",
                    "_load_checkpoint_with_prefix",
                    "load_checkpoint",
                    "weights_to_cpu",
                    "_save_to_state_dict",
                    "get_state_dict",
                    "save_checkpoint",
                    "load",
                    "_register_scheme",
                    "register_scheme",
                    "_get_checkpoint_loader",
                    "load_checkpoint",
                    "_register"
                  ],
                  "classes": [
                    "CheckpointLoader"
                  ],
                  "imports": [
                    "io",
                    "os",
                    "os.path",
                    "pkgutil",
                    "re",
                    "time",
                    "warnings",
                    "collections",
                    "importlib",
                    "tempfile",
                    "torch",
                    "torchvision",
                    "torch.optim",
                    "torch.utils",
                    "annotator.uniformer.mmcv",
                    "fileio",
                    "fileio",
                    "parallel",
                    "utils",
                    "dist_utils",
                    "pavi",
                    "pavi",
                    "pavi"
                  ],
                  "size_lines": 708,
                  "has_main": false,
                  "docstring": null
                },
                "epoch_based_runner.py": {
                  "functions": [
                    "run_iter",
                    "train",
                    "val",
                    "run",
                    "save_checkpoint",
                    "__init__"
                  ],
                  "classes": [
                    "EpochBasedRunner",
                    "Runner"
                  ],
                  "imports": [
                    "os.path",
                    "platform",
                    "shutil",
                    "time",
                    "warnings",
                    "torch",
                    "annotator.uniformer.mmcv",
                    "base_runner",
                    "builder",
                    "checkpoint",
                    "utils"
                  ],
                  "size_lines": 188,
                  "has_main": false,
                  "docstring": null
                },
                "__init__.py": {
                  "functions": [],
                  "classes": [],
                  "imports": [
                    "base_module",
                    "base_runner",
                    "builder",
                    "checkpoint",
                    "default_constructor",
                    "dist_utils",
                    "epoch_based_runner",
                    "fp16_utils",
                    "hooks",
                    "iter_based_runner",
                    "log_buffer",
                    "optimizer",
                    "priority",
                    "utils"
                  ],
                  "size_lines": 48,
                  "has_main": false,
                  "docstring": null
                },
                "iter_based_runner.py": {
                  "functions": [
                    "__init__",
                    "epoch",
                    "__next__",
                    "__len__",
                    "train",
                    "val",
                    "run",
                    "resume",
                    "save_checkpoint",
                    "register_training_hooks"
                  ],
                  "classes": [
                    "IterLoader",
                    "IterBasedRunner"
                  ],
                  "imports": [
                    "os.path",
                    "platform",
                    "shutil",
                    "time",
                    "warnings",
                    "torch",
                    "torch.optim",
                    "annotator.uniformer.mmcv",
                    "base_runner",
                    "builder",
                    "checkpoint",
                    "hooks",
                    "utils"
                  ],
                  "size_lines": 274,
                  "has_main": false,
                  "docstring": null
                },
                "priority.py": {
                  "functions": [
                    "get_priority"
                  ],
                  "classes": [
                    "Priority"
                  ],
                  "imports": [
                    "enum"
                  ],
                  "size_lines": 61,
                  "has_main": false,
                  "docstring": null
                },
                "builder.py": {
                  "functions": [
                    "build_runner_constructor",
                    "build_runner"
                  ],
                  "classes": [],
                  "imports": [
                    "copy",
                    "utils"
                  ],
                  "size_lines": 25,
                  "has_main": false,
                  "docstring": null
                },
                "utils.py": {
                  "functions": [
                    "get_host_info",
                    "get_time_str",
                    "obj_from_dict",
                    "set_random_seed"
                  ],
                  "classes": [],
                  "imports": [
                    "os",
                    "random",
                    "sys",
                    "time",
                    "warnings",
                    "getpass",
                    "socket",
                    "numpy",
                    "torch",
                    "annotator.uniformer.mmcv"
                  ],
                  "size_lines": 94,
                  "has_main": false,
                  "docstring": null
                },
                "base_module.py": {
                  "functions": [
                    "__init__",
                    "is_init",
                    "init_weights",
                    "_dump_init_info",
                    "__repr__",
                    "__init__",
                    "__init__"
                  ],
                  "classes": [
                    "BaseModule",
                    "Sequential",
                    "ModuleList"
                  ],
                  "imports": [
                    "copy",
                    "warnings",
                    "abc",
                    "collections",
                    "logging",
                    "torch.nn",
                    "annotator.uniformer.mmcv.runner.dist_utils",
                    "annotator.uniformer.mmcv.utils.logging",
                    "cnn",
                    "cnn.utils.weight_init"
                  ],
                  "size_lines": 196,
                  "has_main": false,
                  "docstring": null
                },
                "log_buffer.py": {
                  "functions": [
                    "__init__",
                    "clear",
                    "clear_output",
                    "update",
                    "average"
                  ],
                  "classes": [
                    "LogBuffer"
                  ],
                  "imports": [
                    "collections",
                    "numpy"
                  ],
                  "size_lines": 42,
                  "has_main": false,
                  "docstring": null
                },
                "fp16_utils.py": {
                  "functions": [
                    "cast_tensor_type",
                    "auto_fp16",
                    "force_fp32",
                    "allreduce_grads",
                    "wrap_fp16_model",
                    "patch_norm_fp32",
                    "patch_forward_method",
                    "auto_fp16_wrapper",
                    "force_fp32_wrapper",
                    "new_forward",
                    "__init__",
                    "has_overflow",
                    "_has_inf_or_nan",
                    "update_scale",
                    "state_dict",
                    "load_state_dict",
                    "loss_scale",
                    "new_func",
                    "new_func"
                  ],
                  "classes": [
                    "LossScaler"
                  ],
                  "imports": [
                    "functools",
                    "warnings",
                    "collections",
                    "inspect",
                    "numpy",
                    "torch",
                    "torch.nn",
                    "annotator.uniformer.mmcv.utils",
                    "dist_utils",
                    "torch.cuda.amp"
                  ],
                  "size_lines": 411,
                  "has_main": false,
                  "docstring": null
                },
                "dist_utils.py": {
                  "functions": [
                    "init_dist",
                    "_init_dist_pytorch",
                    "_init_dist_mpi",
                    "_init_dist_slurm",
                    "get_dist_info",
                    "master_only",
                    "allreduce_params",
                    "allreduce_grads",
                    "_allreduce_coalesced",
                    "wrapper"
                  ],
                  "classes": [],
                  "imports": [
                    "functools",
                    "os",
                    "subprocess",
                    "collections",
                    "torch",
                    "torch.multiprocessing",
                    "torch",
                    "torch._utils"
                  ],
                  "size_lines": 165,
                  "has_main": false,
                  "docstring": null
                },
                "optimizer": {
                  "default_constructor.py": {
                    "functions": [
                      "__init__",
                      "_validate_cfg",
                      "_is_in",
                      "add_params",
                      "__call__"
                    ],
                    "classes": [
                      "DefaultOptimizerConstructor"
                    ],
                    "imports": [
                      "warnings",
                      "torch",
                      "torch.nn",
                      "annotator.uniformer.mmcv.utils",
                      "annotator.uniformer.mmcv.utils.ext_loader",
                      "builder",
                      "annotator.uniformer.mmcv.ops"
                    ],
                    "size_lines": 250,
                    "has_main": false,
                    "docstring": null
                  },
                  "__init__.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [
                      "builder",
                      "default_constructor"
                    ],
                    "size_lines": 10,
                    "has_main": false,
                    "docstring": null
                  },
                  "builder.py": {
                    "functions": [
                      "register_torch_optimizers",
                      "build_optimizer_constructor",
                      "build_optimizer"
                    ],
                    "classes": [],
                    "imports": [
                      "copy",
                      "inspect",
                      "torch",
                      "utils"
                    ],
                    "size_lines": 45,
                    "has_main": false,
                    "docstring": null
                  }
                },
                "hooks": {
                  "momentum_updater.py": {
                    "functions": [
                      "__init__",
                      "_set_momentum",
                      "get_momentum",
                      "get_regular_momentum",
                      "get_warmup_momentum",
                      "before_run",
                      "before_train_epoch",
                      "before_train_iter",
                      "__init__",
                      "get_momentum",
                      "__init__",
                      "get_momentum",
                      "__init__",
                      "before_run",
                      "get_momentum",
                      "__init__",
                      "before_run",
                      "_set_momentum",
                      "get_momentum",
                      "get_regular_momentum",
                      "_get_warmup_momentum"
                    ],
                    "classes": [
                      "MomentumUpdaterHook",
                      "StepMomentumUpdaterHook",
                      "CosineAnnealingMomentumUpdaterHook",
                      "CyclicMomentumUpdaterHook",
                      "OneCycleMomentumUpdaterHook"
                    ],
                    "imports": [
                      "annotator.uniformer.mmcv",
                      "hook",
                      "lr_updater"
                    ],
                    "size_lines": 494,
                    "has_main": false,
                    "docstring": null
                  },
                  "checkpoint.py": {
                    "functions": [
                      "__init__",
                      "before_run",
                      "after_train_epoch",
                      "_save_checkpoint",
                      "after_train_iter"
                    ],
                    "classes": [
                      "CheckpointHook"
                    ],
                    "imports": [
                      "os.path",
                      "warnings",
                      "annotator.uniformer.mmcv.fileio",
                      "dist_utils",
                      "hook"
                    ],
                    "size_lines": 168,
                    "has_main": false,
                    "docstring": null
                  },
                  "memory.py": {
                    "functions": [
                      "__init__",
                      "after_iter",
                      "before_epoch",
                      "after_epoch"
                    ],
                    "classes": [
                      "EmptyCacheHook"
                    ],
                    "imports": [
                      "torch",
                      "hook"
                    ],
                    "size_lines": 26,
                    "has_main": false,
                    "docstring": null
                  },
                  "sync_buffer.py": {
                    "functions": [
                      "__init__",
                      "after_epoch"
                    ],
                    "classes": [
                      "SyncBuffersHook"
                    ],
                    "imports": [
                      "dist_utils",
                      "hook"
                    ],
                    "size_lines": 23,
                    "has_main": false,
                    "docstring": null
                  },
                  "ema.py": {
                    "functions": [
                      "__init__",
                      "before_run",
                      "after_train_iter",
                      "after_train_epoch",
                      "before_train_epoch",
                      "_swap_ema_parameters"
                    ],
                    "classes": [
                      "EMAHook"
                    ],
                    "imports": [
                      "parallel",
                      "hooks.hook"
                    ],
                    "size_lines": 90,
                    "has_main": false,
                    "docstring": null
                  },
                  "evaluation.py": {
                    "functions": [
                      "__init__",
                      "_init_rule",
                      "before_run",
                      "before_train_iter",
                      "before_train_epoch",
                      "after_train_iter",
                      "after_train_epoch",
                      "_do_evaluate",
                      "_should_evaluate",
                      "_save_ckpt",
                      "evaluate",
                      "__init__",
                      "_do_evaluate"
                    ],
                    "classes": [
                      "EvalHook",
                      "DistEvalHook"
                    ],
                    "imports": [
                      "os.path",
                      "warnings",
                      "math",
                      "torch.distributed",
                      "torch.nn.modules.batchnorm",
                      "torch.utils.data",
                      "annotator.uniformer.mmcv.fileio",
                      "annotator.uniformer.mmcv.utils",
                      "hook",
                      "logger",
                      "annotator.uniformer.mmcv.engine",
                      "annotator.uniformer.mmcv.engine"
                    ],
                    "size_lines": 510,
                    "has_main": false,
                    "docstring": null
                  },
                  "hook.py": {
                    "functions": [
                      "before_run",
                      "after_run",
                      "before_epoch",
                      "after_epoch",
                      "before_iter",
                      "after_iter",
                      "before_train_epoch",
                      "before_val_epoch",
                      "after_train_epoch",
                      "after_val_epoch",
                      "before_train_iter",
                      "before_val_iter",
                      "after_train_iter",
                      "after_val_iter",
                      "every_n_epochs",
                      "every_n_inner_iters",
                      "every_n_iters",
                      "end_of_epoch",
                      "is_last_epoch",
                      "is_last_iter",
                      "get_triggered_stages"
                    ],
                    "classes": [
                      "Hook"
                    ],
                    "imports": [
                      "annotator.uniformer.mmcv.utils"
                    ],
                    "size_lines": 93,
                    "has_main": false,
                    "docstring": null
                  },
                  "__init__.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [
                      "checkpoint",
                      "closure",
                      "ema",
                      "evaluation",
                      "hook",
                      "iter_timer",
                      "logger",
                      "lr_updater",
                      "memory",
                      "momentum_updater",
                      "optimizer",
                      "profiler",
                      "sampler_seed",
                      "sync_buffer"
                    ],
                    "size_lines": 30,
                    "has_main": false,
                    "docstring": null
                  },
                  "sampler_seed.py": {
                    "functions": [
                      "before_epoch"
                    ],
                    "classes": [
                      "DistSamplerSeedHook"
                    ],
                    "imports": [
                      "hook"
                    ],
                    "size_lines": 21,
                    "has_main": false,
                    "docstring": null
                  },
                  "optimizer.py": {
                    "functions": [
                      "__init__",
                      "clip_grads",
                      "after_train_iter",
                      "__init__",
                      "has_batch_norm",
                      "_init",
                      "after_train_iter",
                      "__init__",
                      "before_run",
                      "copy_grads_to_fp32",
                      "copy_params_to_fp16",
                      "after_train_iter",
                      "__init__",
                      "after_train_iter",
                      "__init__",
                      "before_run",
                      "copy_grads_to_fp32",
                      "copy_params_to_fp16",
                      "after_train_iter",
                      "__init__",
                      "after_train_iter"
                    ],
                    "classes": [
                      "OptimizerHook",
                      "GradientCumulativeOptimizerHook",
                      "Fp16OptimizerHook",
                      "GradientCumulativeFp16OptimizerHook",
                      "Fp16OptimizerHook",
                      "GradientCumulativeFp16OptimizerHook"
                    ],
                    "imports": [
                      "copy",
                      "collections",
                      "itertools",
                      "torch.nn.utils",
                      "annotator.uniformer.mmcv.utils",
                      "dist_utils",
                      "fp16_utils",
                      "hook",
                      "torch.cuda.amp"
                    ],
                    "size_lines": 509,
                    "has_main": false,
                    "docstring": null
                  },
                  "lr_updater.py": {
                    "functions": [
                      "get_position_from_periods",
                      "annealing_cos",
                      "annealing_linear",
                      "format_param",
                      "__init__",
                      "_set_lr",
                      "get_lr",
                      "get_regular_lr",
                      "get_warmup_lr",
                      "before_run",
                      "before_train_epoch",
                      "before_train_iter",
                      "__init__",
                      "get_lr",
                      "__init__",
                      "get_lr",
                      "__init__",
                      "get_lr",
                      "__init__",
                      "get_lr",
                      "__init__",
                      "get_lr",
                      "__init__",
                      "get_lr",
                      "__init__",
                      "get_lr",
                      "__init__",
                      "get_lr",
                      "__init__",
                      "before_run",
                      "get_lr",
                      "__init__",
                      "before_run",
                      "get_lr",
                      "_get_warmup_lr"
                    ],
                    "classes": [
                      "LrUpdaterHook",
                      "FixedLrUpdaterHook",
                      "StepLrUpdaterHook",
                      "ExpLrUpdaterHook",
                      "PolyLrUpdaterHook",
                      "InvLrUpdaterHook",
                      "CosineAnnealingLrUpdaterHook",
                      "FlatCosineAnnealingLrUpdaterHook",
                      "CosineRestartLrUpdaterHook",
                      "CyclicLrUpdaterHook",
                      "OneCycleLrUpdaterHook"
                    ],
                    "imports": [
                      "numbers",
                      "math",
                      "annotator.uniformer.mmcv",
                      "hook"
                    ],
                    "size_lines": 671,
                    "has_main": false,
                    "docstring": null
                  },
                  "profiler.py": {
                    "functions": [
                      "__init__",
                      "before_run",
                      "after_train_epoch",
                      "after_train_iter",
                      "_log_handler"
                    ],
                    "classes": [
                      "ProfilerHook"
                    ],
                    "imports": [
                      "warnings",
                      "typing",
                      "torch",
                      "dist_utils",
                      "hook",
                      "torch",
                      "torch_tb_profiler"
                    ],
                    "size_lines": 181,
                    "has_main": false,
                    "docstring": null
                  },
                  "closure.py": {
                    "functions": [
                      "__init__"
                    ],
                    "classes": [
                      "ClosureHook"
                    ],
                    "imports": [
                      "hook"
                    ],
                    "size_lines": 12,
                    "has_main": false,
                    "docstring": null
                  },
                  "iter_timer.py": {
                    "functions": [
                      "before_epoch",
                      "before_iter",
                      "after_iter"
                    ],
                    "classes": [
                      "IterTimerHook"
                    ],
                    "imports": [
                      "time",
                      "hook"
                    ],
                    "size_lines": 19,
                    "has_main": false,
                    "docstring": null
                  },
                  "logger": {
                    "mlflow.py": {
                      "functions": [
                        "__init__",
                        "import_mlflow",
                        "before_run",
                        "log",
                        "after_run"
                      ],
                      "classes": [
                        "MlflowLoggerHook"
                      ],
                      "imports": [
                        "dist_utils",
                        "hook",
                        "base",
                        "mlflow",
                        "mlflow.pytorch"
                      ],
                      "size_lines": 79,
                      "has_main": false,
                      "docstring": null
                    },
                    "wandb.py": {
                      "functions": [
                        "__init__",
                        "import_wandb",
                        "before_run",
                        "log",
                        "after_run"
                      ],
                      "classes": [
                        "WandbLoggerHook"
                      ],
                      "imports": [
                        "dist_utils",
                        "hook",
                        "base",
                        "wandb"
                      ],
                      "size_lines": 57,
                      "has_main": false,
                      "docstring": null
                    },
                    "__init__.py": {
                      "functions": [],
                      "classes": [],
                      "imports": [
                        "base",
                        "dvclive",
                        "mlflow",
                        "neptune",
                        "pavi",
                        "tensorboard",
                        "text",
                        "wandb"
                      ],
                      "size_lines": 16,
                      "has_main": false,
                      "docstring": null
                    },
                    "dvclive.py": {
                      "functions": [
                        "__init__",
                        "import_dvclive",
                        "before_run",
                        "log"
                      ],
                      "classes": [
                        "DvcliveLoggerHook"
                      ],
                      "imports": [
                        "dist_utils",
                        "hook",
                        "base",
                        "dvclive"
                      ],
                      "size_lines": 59,
                      "has_main": false,
                      "docstring": null
                    },
                    "text.py": {
                      "functions": [
                        "__init__",
                        "before_run",
                        "_get_max_memory",
                        "_log_info",
                        "_dump_log",
                        "_round_float",
                        "log",
                        "after_run"
                      ],
                      "classes": [
                        "TextLoggerHook"
                      ],
                      "imports": [
                        "datetime",
                        "os",
                        "os.path",
                        "collections",
                        "torch",
                        "torch.distributed",
                        "annotator.uniformer.mmcv",
                        "annotator.uniformer.mmcv.fileio.file_client",
                        "annotator.uniformer.mmcv.utils",
                        "hook",
                        "base"
                      ],
                      "size_lines": 257,
                      "has_main": false,
                      "docstring": null
                    },
                    "pavi.py": {
                      "functions": [
                        "__init__",
                        "before_run",
                        "get_step",
                        "log",
                        "after_run",
                        "before_epoch"
                      ],
                      "classes": [
                        "PaviLoggerHook"
                      ],
                      "imports": [
                        "json",
                        "os",
                        "os.path",
                        "torch",
                        "yaml",
                        "annotator.uniformer.mmcv",
                        "parallel.utils",
                        "dist_utils",
                        "hook",
                        "base",
                        "pavi"
                      ],
                      "size_lines": 118,
                      "has_main": false,
                      "docstring": null
                    },
                    "base.py": {
                      "functions": [
                        "__init__",
                        "log",
                        "is_scalar",
                        "get_mode",
                        "get_epoch",
                        "get_iter",
                        "get_lr_tags",
                        "get_momentum_tags",
                        "get_loggable_tags",
                        "before_run",
                        "before_epoch",
                        "after_train_iter",
                        "after_train_epoch",
                        "after_val_epoch"
                      ],
                      "classes": [
                        "LoggerHook"
                      ],
                      "imports": [
                        "numbers",
                        "abc",
                        "numpy",
                        "torch",
                        "hook"
                      ],
                      "size_lines": 167,
                      "has_main": false,
                      "docstring": null
                    },
                    "tensorboard.py": {
                      "functions": [
                        "__init__",
                        "before_run",
                        "log",
                        "after_run"
                      ],
                      "classes": [
                        "TensorboardLoggerHook"
                      ],
                      "imports": [
                        "os.path",
                        "annotator.uniformer.mmcv.utils",
                        "dist_utils",
                        "hook",
                        "base",
                        "tensorboardX",
                        "torch.utils.tensorboard"
                      ],
                      "size_lines": 58,
                      "has_main": false,
                      "docstring": null
                    },
                    "neptune.py": {
                      "functions": [
                        "__init__",
                        "import_neptune",
                        "before_run",
                        "log",
                        "after_run"
                      ],
                      "classes": [
                        "NeptuneLoggerHook"
                      ],
                      "imports": [
                        "dist_utils",
                        "hook",
                        "base",
                        "neptune.new"
                      ],
                      "size_lines": 83,
                      "has_main": false,
                      "docstring": null
                    }
                  }
                }
              },
              "utils": {
                "version_utils.py": {
                  "functions": [
                    "digit_version",
                    "_minimal_ext_cmd",
                    "get_git_hash"
                  ],
                  "classes": [],
                  "imports": [
                    "os",
                    "subprocess",
                    "warnings",
                    "packaging.version"
                  ],
                  "size_lines": 91,
                  "has_main": false,
                  "docstring": null
                },
                "logging.py": {
                  "functions": [
                    "get_logger",
                    "print_log"
                  ],
                  "classes": [],
                  "imports": [
                    "logging",
                    "torch.distributed"
                  ],
                  "size_lines": 111,
                  "has_main": false,
                  "docstring": null
                },
                "misc.py": {
                  "functions": [
                    "_ntuple",
                    "is_str",
                    "import_modules_from_strings",
                    "iter_cast",
                    "list_cast",
                    "tuple_cast",
                    "is_seq_of",
                    "is_list_of",
                    "is_tuple_of",
                    "slice_list",
                    "concat_list",
                    "check_prerequisites",
                    "_check_py_package",
                    "_check_executable",
                    "requires_package",
                    "requires_executable",
                    "deprecated_api_warning",
                    "is_method_overridden",
                    "has_method",
                    "parse",
                    "wrap",
                    "api_warning_wrapper",
                    "wrapped_func",
                    "new_func"
                  ],
                  "classes": [],
                  "imports": [
                    "collections.abc",
                    "functools",
                    "itertools",
                    "subprocess",
                    "warnings",
                    "collections",
                    "importlib",
                    "inspect",
                    "itertools"
                  ],
                  "size_lines": 378,
                  "has_main": false,
                  "docstring": null
                },
                "trace.py": {
                  "functions": [
                    "is_jit_tracing"
                  ],
                  "classes": [],
                  "imports": [
                    "warnings",
                    "torch",
                    "annotator.uniformer.mmcv.utils"
                  ],
                  "size_lines": 24,
                  "has_main": false,
                  "docstring": null
                },
                "config.py": {
                  "functions": [
                    "add_args",
                    "__missing__",
                    "__getattr__",
                    "_validate_py_syntax",
                    "_substitute_predefined_vars",
                    "_pre_substitute_base_vars",
                    "_substitute_base_vars",
                    "_file2dict",
                    "_merge_a_into_b",
                    "fromfile",
                    "fromstring",
                    "auto_argparser",
                    "__init__",
                    "filename",
                    "text",
                    "pretty_text",
                    "__repr__",
                    "__len__",
                    "__getattr__",
                    "__getitem__",
                    "__setattr__",
                    "__setitem__",
                    "__iter__",
                    "__getstate__",
                    "__setstate__",
                    "dump",
                    "merge_from_dict",
                    "_parse_int_float_bool",
                    "_parse_iterable",
                    "__call__",
                    "_indent",
                    "_format_basic_types",
                    "_format_list",
                    "_contain_invalid_identifier",
                    "_format_dict",
                    "find_next_comma"
                  ],
                  "classes": [
                    "ConfigDict",
                    "Config",
                    "DictAction"
                  ],
                  "imports": [
                    "ast",
                    "copy",
                    "os",
                    "os.path",
                    "platform",
                    "shutil",
                    "sys",
                    "tempfile",
                    "uuid",
                    "warnings",
                    "argparse",
                    "collections",
                    "importlib",
                    "addict",
                    "yapf.yapflib.yapf_api",
                    "misc",
                    "path",
                    "regex",
                    "re",
                    "annotator.uniformer.mmcv",
                    "annotator.uniformer.mmcv"
                  ],
                  "size_lines": 689,
                  "has_main": false,
                  "docstring": null
                },
                "env.py": {
                  "functions": [
                    "collect_env"
                  ],
                  "classes": [],
                  "imports": [
                    "os.path",
                    "subprocess",
                    "sys",
                    "collections",
                    "cv2",
                    "torch",
                    "annotator.uniformer.mmcv",
                    "parrots_wrapper",
                    "annotator.uniformer.mmcv.utils.parrots_wrapper",
                    "torchvision",
                    "annotator.uniformer.mmcv.ops"
                  ],
                  "size_lines": 96,
                  "has_main": false,
                  "docstring": "This file holding some environment constant for sharing by other files."
                },
                "registry.py": {
                  "functions": [
                    "build_from_cfg",
                    "__init__",
                    "__len__",
                    "__contains__",
                    "__repr__",
                    "infer_scope",
                    "split_scope_key",
                    "name",
                    "scope",
                    "module_dict",
                    "children",
                    "get",
                    "build",
                    "_add_children",
                    "_register_module",
                    "deprecated_register_module",
                    "register_module",
                    "_register"
                  ],
                  "classes": [
                    "Registry"
                  ],
                  "imports": [
                    "inspect",
                    "warnings",
                    "functools",
                    "misc"
                  ],
                  "size_lines": 316,
                  "has_main": false,
                  "docstring": null
                },
                "parrots_wrapper.py": {
                  "functions": [
                    "is_rocm_pytorch",
                    "_get_cuda_home",
                    "get_build_config",
                    "_get_conv",
                    "_get_dataloader",
                    "_get_extension",
                    "_get_pool",
                    "_get_norm",
                    "_check_input_dim"
                  ],
                  "classes": [
                    "SyncBatchNorm"
                  ],
                  "imports": [
                    "functools",
                    "torch",
                    "parrots.utils.build_extension",
                    "parrots.config",
                    "parrots.nn.modules.conv",
                    "torch.nn.modules.conv",
                    "torch.utils.data",
                    "torch.utils.data",
                    "parrots.utils.build_extension",
                    "torch.utils.cpp_extension",
                    "parrots.nn.modules.pool",
                    "torch.nn.modules.pooling",
                    "parrots.nn.modules.batchnorm",
                    "torch.nn.modules.instancenorm",
                    "torch.nn.modules.batchnorm",
                    "torch.utils.cpp_extension",
                    "torch.utils.cpp_extension",
                    "torch.utils.cpp_extension"
                  ],
                  "size_lines": 108,
                  "has_main": false,
                  "docstring": null
                },
                "timer.py": {
                  "functions": [
                    "check_time",
                    "__init__",
                    "__init__",
                    "is_running",
                    "__enter__",
                    "__exit__",
                    "start",
                    "since_start",
                    "since_last_check"
                  ],
                  "classes": [
                    "TimerError",
                    "Timer"
                  ],
                  "imports": [
                    "time"
                  ],
                  "size_lines": 119,
                  "has_main": false,
                  "docstring": null
                },
                "__init__.py": {
                  "functions": [],
                  "classes": [],
                  "imports": [
                    "config",
                    "misc",
                    "path",
                    "progressbar",
                    "testing",
                    "timer",
                    "version_utils",
                    "torch",
                    "env",
                    "logging",
                    "parrots_jit",
                    "parrots_wrapper",
                    "registry",
                    "trace"
                  ],
                  "size_lines": 70,
                  "has_main": false,
                  "docstring": null
                },
                "ext_loader.py": {
                  "functions": [
                    "check_ops_exist",
                    "load_ext",
                    "get_fake_func",
                    "load_ext",
                    "fake_func"
                  ],
                  "classes": [],
                  "imports": [
                    "importlib",
                    "os",
                    "pkgutil",
                    "warnings",
                    "collections",
                    "torch",
                    "parrots",
                    "parrots.base"
                  ],
                  "size_lines": 72,
                  "has_main": false,
                  "docstring": null
                },
                "parrots_jit.py": {
                  "functions": [
                    "jit",
                    "skip_no_elena",
                    "wrapper",
                    "wrapper",
                    "wrapper_inner"
                  ],
                  "classes": [],
                  "imports": [
                    "os",
                    "parrots_wrapper",
                    "parrots.jit",
                    "parrots.utils.tester"
                  ],
                  "size_lines": 42,
                  "has_main": false,
                  "docstring": null
                },
                "progressbar.py": {
                  "functions": [
                    "track_progress",
                    "init_pool",
                    "track_parallel_progress",
                    "track_iter_progress",
                    "__init__",
                    "terminal_width",
                    "start",
                    "update"
                  ],
                  "classes": [
                    "ProgressBar"
                  ],
                  "imports": [
                    "sys",
                    "collections.abc",
                    "multiprocessing",
                    "shutil",
                    "timer"
                  ],
                  "size_lines": 209,
                  "has_main": false,
                  "docstring": null
                },
                "testing.py": {
                  "functions": [
                    "check_python_script",
                    "_any",
                    "assert_dict_contains_subset",
                    "assert_attrs_equal",
                    "assert_dict_has_keys",
                    "assert_keys_equal",
                    "assert_is_norm_layer",
                    "assert_params_all_zeros"
                  ],
                  "classes": [],
                  "imports": [
                    "sys",
                    "collections.abc",
                    "runpy",
                    "shlex",
                    "typing",
                    "unittest.mock",
                    "parrots_wrapper",
                    "torch.nn"
                  ],
                  "size_lines": 141,
                  "has_main": false,
                  "docstring": null
                },
                "path.py": {
                  "functions": [
                    "is_filepath",
                    "fopen",
                    "check_file_exist",
                    "mkdir_or_exist",
                    "symlink",
                    "scandir",
                    "find_vcs_root",
                    "_scandir"
                  ],
                  "classes": [],
                  "imports": [
                    "os",
                    "os.path",
                    "pathlib",
                    "misc"
                  ],
                  "size_lines": 102,
                  "has_main": false,
                  "docstring": null
                }
              },
              "image": {
                "misc.py": {
                  "functions": [
                    "tensor2imgs"
                  ],
                  "classes": [],
                  "imports": [
                    "numpy",
                    "annotator.uniformer.mmcv",
                    "torch"
                  ],
                  "size_lines": 45,
                  "has_main": false,
                  "docstring": null
                },
                "geometric.py": {
                  "functions": [
                    "_scale_size",
                    "imresize",
                    "imresize_to_multiple",
                    "imresize_like",
                    "rescale_size",
                    "imrescale",
                    "imflip",
                    "imflip_",
                    "imrotate",
                    "bbox_clip",
                    "bbox_scaling",
                    "imcrop",
                    "impad",
                    "impad_to_multiple",
                    "cutout",
                    "_get_shear_matrix",
                    "imshear",
                    "_get_translate_matrix",
                    "imtranslate"
                  ],
                  "classes": [],
                  "imports": [
                    "numbers",
                    "cv2",
                    "numpy",
                    "utils",
                    "io",
                    "PIL"
                  ],
                  "size_lines": 729,
                  "has_main": false,
                  "docstring": null
                },
                "colorspace.py": {
                  "functions": [
                    "imconvert",
                    "bgr2gray",
                    "rgb2gray",
                    "gray2bgr",
                    "gray2rgb",
                    "_convert_input_type_range",
                    "_convert_output_type_range",
                    "rgb2ycbcr",
                    "bgr2ycbcr",
                    "ycbcr2rgb",
                    "ycbcr2bgr",
                    "convert_color_factory",
                    "convert_color"
                  ],
                  "classes": [],
                  "imports": [
                    "cv2",
                    "numpy"
                  ],
                  "size_lines": 307,
                  "has_main": false,
                  "docstring": null
                },
                "io.py": {
                  "functions": [
                    "use_backend",
                    "_jpegflag",
                    "_pillow2array",
                    "imread",
                    "imfrombytes",
                    "imwrite"
                  ],
                  "classes": [],
                  "imports": [
                    "io",
                    "os.path",
                    "pathlib",
                    "cv2",
                    "numpy",
                    "cv2",
                    "annotator.uniformer.mmcv.utils",
                    "turbojpeg",
                    "PIL",
                    "tifffile"
                  ],
                  "size_lines": 259,
                  "has_main": false,
                  "docstring": null
                },
                "__init__.py": {
                  "functions": [],
                  "classes": [],
                  "imports": [
                    "colorspace",
                    "geometric",
                    "io",
                    "misc",
                    "photometric"
                  ],
                  "size_lines": 29,
                  "has_main": false,
                  "docstring": null
                },
                "photometric.py": {
                  "functions": [
                    "imnormalize",
                    "imnormalize_",
                    "imdenormalize",
                    "iminvert",
                    "solarize",
                    "posterize",
                    "adjust_color",
                    "imequalize",
                    "adjust_brightness",
                    "adjust_contrast",
                    "auto_contrast",
                    "adjust_sharpness",
                    "adjust_lighting",
                    "lut_transform",
                    "clahe",
                    "_scale_channel",
                    "_auto_contrast_channel"
                  ],
                  "classes": [],
                  "imports": [
                    "cv2",
                    "numpy",
                    "utils",
                    "colorspace"
                  ],
                  "size_lines": 429,
                  "has_main": false,
                  "docstring": null
                }
              },
              "cnn": {
                "vgg.py": {
                  "functions": [
                    "conv3x3",
                    "make_vgg_layer",
                    "__init__",
                    "init_weights",
                    "forward",
                    "train"
                  ],
                  "classes": [
                    "VGG"
                  ],
                  "imports": [
                    "logging",
                    "torch.nn",
                    "utils",
                    "runner"
                  ],
                  "size_lines": 176,
                  "has_main": false,
                  "docstring": null
                },
                "__init__.py": {
                  "functions": [],
                  "classes": [],
                  "imports": [
                    "alexnet",
                    "bricks",
                    "builder",
                    "resnet",
                    "utils",
                    "vgg"
                  ],
                  "size_lines": 42,
                  "has_main": false,
                  "docstring": null
                },
                "builder.py": {
                  "functions": [
                    "build_model_from_cfg"
                  ],
                  "classes": [],
                  "imports": [
                    "runner",
                    "utils"
                  ],
                  "size_lines": 31,
                  "has_main": false,
                  "docstring": null
                },
                "resnet.py": {
                  "functions": [
                    "conv3x3",
                    "make_res_layer",
                    "__init__",
                    "forward",
                    "__init__",
                    "forward",
                    "__init__",
                    "init_weights",
                    "forward",
                    "train",
                    "_inner_forward"
                  ],
                  "classes": [
                    "BasicBlock",
                    "Bottleneck",
                    "ResNet"
                  ],
                  "imports": [
                    "logging",
                    "torch.nn",
                    "torch.utils.checkpoint",
                    "utils",
                    "runner"
                  ],
                  "size_lines": 317,
                  "has_main": false,
                  "docstring": null
                },
                "alexnet.py": {
                  "functions": [
                    "__init__",
                    "init_weights",
                    "forward"
                  ],
                  "classes": [
                    "AlexNet"
                  ],
                  "imports": [
                    "logging",
                    "torch.nn",
                    "runner"
                  ],
                  "size_lines": 62,
                  "has_main": false,
                  "docstring": null
                },
                "bricks": {
                  "context_block.py": {
                    "functions": [
                      "last_zero_init",
                      "__init__",
                      "reset_parameters",
                      "spatial_pool",
                      "forward"
                    ],
                    "classes": [
                      "ContextBlock"
                    ],
                    "imports": [
                      "torch",
                      "torch",
                      "utils",
                      "registry"
                    ],
                    "size_lines": 126,
                    "has_main": false,
                    "docstring": null
                  },
                  "depthwise_separable_conv_module.py": {
                    "functions": [
                      "__init__",
                      "forward"
                    ],
                    "classes": [
                      "DepthwiseSeparableConvModule"
                    ],
                    "imports": [
                      "torch.nn",
                      "conv_module"
                    ],
                    "size_lines": 97,
                    "has_main": false,
                    "docstring": null
                  },
                  "registry.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [
                      "annotator.uniformer.mmcv.utils"
                    ],
                    "size_lines": 17,
                    "has_main": false,
                    "docstring": null
                  },
                  "generalized_attention.py": {
                    "functions": [
                      "__init__",
                      "get_position_embedding",
                      "forward",
                      "init_weights"
                    ],
                    "classes": [
                      "GeneralizedAttention"
                    ],
                    "imports": [
                      "math",
                      "numpy",
                      "torch",
                      "torch.nn",
                      "torch.nn.functional",
                      "utils",
                      "registry"
                    ],
                    "size_lines": 413,
                    "has_main": false,
                    "docstring": null
                  },
                  "norm.py": {
                    "functions": [
                      "infer_abbr",
                      "build_norm_layer",
                      "is_norm"
                    ],
                    "classes": [],
                    "imports": [
                      "inspect",
                      "torch.nn",
                      "annotator.uniformer.mmcv.utils",
                      "annotator.uniformer.mmcv.utils.parrots_wrapper",
                      "registry"
                    ],
                    "size_lines": 145,
                    "has_main": false,
                    "docstring": null
                  },
                  "hswish.py": {
                    "functions": [
                      "__init__",
                      "forward"
                    ],
                    "classes": [
                      "HSwish"
                    ],
                    "imports": [
                      "torch.nn",
                      "registry"
                    ],
                    "size_lines": 30,
                    "has_main": false,
                    "docstring": null
                  },
                  "__init__.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [
                      "activation",
                      "context_block",
                      "conv",
                      "conv2d_adaptive_padding",
                      "conv_module",
                      "conv_ws",
                      "depthwise_separable_conv_module",
                      "drop",
                      "generalized_attention",
                      "hsigmoid",
                      "hswish",
                      "non_local",
                      "norm",
                      "padding",
                      "plugin",
                      "registry",
                      "scale",
                      "swish",
                      "upsample",
                      "wrappers"
                    ],
                    "size_lines": 36,
                    "has_main": false,
                    "docstring": null
                  },
                  "upsample.py": {
                    "functions": [
                      "build_upsample_layer",
                      "__init__",
                      "init_weights",
                      "forward"
                    ],
                    "classes": [
                      "PixelShufflePack"
                    ],
                    "imports": [
                      "torch.nn",
                      "torch.nn.functional",
                      "utils",
                      "registry"
                    ],
                    "size_lines": 85,
                    "has_main": false,
                    "docstring": null
                  },
                  "non_local.py": {
                    "functions": [
                      "__init__",
                      "init_weights",
                      "gaussian",
                      "embedded_gaussian",
                      "dot_product",
                      "concatenation",
                      "forward",
                      "__init__",
                      "__init__",
                      "__init__"
                    ],
                    "classes": [
                      "_NonLocalNd",
                      "NonLocal1d",
                      "NonLocal2d",
                      "NonLocal3d"
                    ],
                    "imports": [
                      "abc",
                      "torch",
                      "torch.nn",
                      "utils",
                      "conv_module",
                      "registry"
                    ],
                    "size_lines": 307,
                    "has_main": false,
                    "docstring": null
                  },
                  "conv_ws.py": {
                    "functions": [
                      "conv_ws_2d",
                      "__init__",
                      "forward",
                      "__init__",
                      "_get_weight",
                      "forward",
                      "_load_from_state_dict"
                    ],
                    "classes": [
                      "ConvWS2d",
                      "ConvAWS2d"
                    ],
                    "imports": [
                      "torch",
                      "torch.nn",
                      "torch.nn.functional",
                      "registry"
                    ],
                    "size_lines": 149,
                    "has_main": false,
                    "docstring": null
                  },
                  "hsigmoid.py": {
                    "functions": [
                      "__init__",
                      "forward"
                    ],
                    "classes": [
                      "HSigmoid"
                    ],
                    "imports": [
                      "torch.nn",
                      "registry"
                    ],
                    "size_lines": 35,
                    "has_main": false,
                    "docstring": null
                  },
                  "activation.py": {
                    "functions": [
                      "build_activation_layer",
                      "__init__",
                      "forward",
                      "forward"
                    ],
                    "classes": [
                      "Clamp",
                      "GELU"
                    ],
                    "imports": [
                      "torch",
                      "torch.nn",
                      "torch.nn.functional",
                      "annotator.uniformer.mmcv.utils",
                      "registry"
                    ],
                    "size_lines": 93,
                    "has_main": false,
                    "docstring": null
                  },
                  "wrappers.py": {
                    "functions": [
                      "obsolete_torch_version",
                      "forward",
                      "backward",
                      "forward",
                      "forward",
                      "forward",
                      "forward",
                      "forward",
                      "forward",
                      "forward"
                    ],
                    "classes": [
                      "NewEmptyTensorOp",
                      "Conv2d",
                      "Conv3d",
                      "ConvTranspose2d",
                      "ConvTranspose3d",
                      "MaxPool2d",
                      "MaxPool3d",
                      "Linear"
                    ],
                    "imports": [
                      "math",
                      "torch",
                      "torch.nn",
                      "torch.nn.modules.utils",
                      "registry"
                    ],
                    "size_lines": 181,
                    "has_main": false,
                    "docstring": "Modified from https://github.com/facebookresearch/detectron2/blob/master/detectron2/layers/wrappers.py  # noqa: E501\n\nWrap some nn modules to support empty tensor input. Currently, these wrappers\nare mainly used in mask heads like fcn_mask_head and maskiou_heads since mask\nheads are trained on only positive RoIs."
                  },
                  "transformer.py": {
                    "functions": [
                      "build_positional_encoding",
                      "build_attention",
                      "build_feedforward_network",
                      "build_transformer_layer",
                      "build_transformer_layer_sequence",
                      "__init__",
                      "forward",
                      "__init__",
                      "forward",
                      "__init__",
                      "forward",
                      "__init__",
                      "forward"
                    ],
                    "classes": [
                      "MultiheadAttention",
                      "FFN",
                      "BaseTransformerLayer",
                      "TransformerLayerSequence"
                    ],
                    "imports": [
                      "copy",
                      "warnings",
                      "torch",
                      "torch.nn",
                      "annotator.uniformer.mmcv",
                      "annotator.uniformer.mmcv.cnn",
                      "annotator.uniformer.mmcv.runner.base_module",
                      "annotator.uniformer.mmcv.utils",
                      "drop",
                      "registry",
                      "annotator.uniformer.mmcv.ops.multi_scale_deform_attn"
                    ],
                    "size_lines": 596,
                    "has_main": false,
                    "docstring": null
                  },
                  "swish.py": {
                    "functions": [
                      "__init__",
                      "forward"
                    ],
                    "classes": [
                      "Swish"
                    ],
                    "imports": [
                      "torch",
                      "torch.nn",
                      "registry"
                    ],
                    "size_lines": 26,
                    "has_main": false,
                    "docstring": null
                  },
                  "plugin.py": {
                    "functions": [
                      "infer_abbr",
                      "build_plugin_layer",
                      "camel2snack"
                    ],
                    "classes": [],
                    "imports": [
                      "inspect",
                      "platform",
                      "registry",
                      "regex",
                      "re"
                    ],
                    "size_lines": 89,
                    "has_main": false,
                    "docstring": null
                  },
                  "conv.py": {
                    "functions": [
                      "build_conv_layer"
                    ],
                    "classes": [],
                    "imports": [
                      "torch",
                      "registry"
                    ],
                    "size_lines": 45,
                    "has_main": false,
                    "docstring": null
                  },
                  "conv_module.py": {
                    "functions": [
                      "__init__",
                      "norm",
                      "init_weights",
                      "forward"
                    ],
                    "classes": [
                      "ConvModule"
                    ],
                    "imports": [
                      "warnings",
                      "torch.nn",
                      "annotator.uniformer.mmcv.utils",
                      "utils",
                      "activation",
                      "conv",
                      "norm",
                      "padding",
                      "registry"
                    ],
                    "size_lines": 207,
                    "has_main": false,
                    "docstring": null
                  },
                  "padding.py": {
                    "functions": [
                      "build_padding_layer"
                    ],
                    "classes": [],
                    "imports": [
                      "torch.nn",
                      "registry"
                    ],
                    "size_lines": 37,
                    "has_main": false,
                    "docstring": null
                  },
                  "scale.py": {
                    "functions": [
                      "__init__",
                      "forward"
                    ],
                    "classes": [
                      "Scale"
                    ],
                    "imports": [
                      "torch",
                      "torch.nn"
                    ],
                    "size_lines": 22,
                    "has_main": false,
                    "docstring": null
                  },
                  "drop.py": {
                    "functions": [
                      "drop_path",
                      "build_dropout",
                      "__init__",
                      "forward",
                      "__init__"
                    ],
                    "classes": [
                      "DropPath",
                      "Dropout"
                    ],
                    "imports": [
                      "torch",
                      "torch.nn",
                      "annotator.uniformer.mmcv",
                      "registry"
                    ],
                    "size_lines": 66,
                    "has_main": false,
                    "docstring": null
                  },
                  "conv2d_adaptive_padding.py": {
                    "functions": [
                      "__init__",
                      "forward"
                    ],
                    "classes": [
                      "Conv2dAdaptivePadding"
                    ],
                    "imports": [
                      "math",
                      "torch",
                      "torch.nn",
                      "registry"
                    ],
                    "size_lines": 63,
                    "has_main": false,
                    "docstring": null
                  }
                },
                "utils": {
                  "__init__.py": {
                    "functions": [],
                    "classes": [],
                    "imports": [
                      "flops_counter",
                      "fuse_conv_bn",
                      "sync_bn",
                      "weight_init"
                    ],
                    "size_lines": 20,
                    "has_main": false,
                    "docstring": null
                  },
                  "fuse_conv_bn.py": {
                    "functions": [
                      "_fuse_conv_bn",
                      "fuse_conv_bn"
                    ],
                    "classes": [],
                    "imports": [
                      "torch",
                      "torch.nn"
                    ],
                    "size_lines": 60,
                    "has_main": false,
                    "docstring": null
                  },
                  "flops_counter.py": {
                    "functions": [
                      "get_model_complexity_info",
                      "flops_to_string",
                      "params_to_string",
                      "print_model_with_flops",
                      "get_model_parameters_number",
                      "add_flops_counting_methods",
                      "compute_average_flops_cost",
                      "start_flops_count",
                      "stop_flops_count",
                      "reset_flops_count",
                      "empty_flops_counter_hook",
                      "upsample_flops_counter_hook",
                      "relu_flops_counter_hook",
                      "linear_flops_counter_hook",
                      "pool_flops_counter_hook",
                      "norm_flops_counter_hook",
                      "deconv_flops_counter_hook",
                      "conv_flops_counter_hook",
                      "batch_counter_hook",
                      "add_batch_counter_variables_or_reset",
                      "add_batch_counter_hook_function",
                      "remove_batch_counter_hook_function",
                      "add_flops_counter_variable_or_reset",
                      "is_supported_instance",
                      "remove_flops_counter_hook_function",
                      "get_modules_mapping",
                      "accumulate_params",
                      "accumulate_flops",
                      "flops_repr",
                      "add_extra_repr",
                      "del_extra_repr",
                      "add_flops_counter_hook_function"
                    ],
                    "classes": [],
                    "imports": [
                      "sys",
                      "functools",
                      "numpy",
                      "torch",
                      "torch.nn",
                      "annotator.uniformer.mmcv"
                    ],
                    "size_lines": 600,
                    "has_main": false,
                    "docstring": null
                  },
                  "sync_bn.py": {
                    "functions": [
                      "revert_sync_batchnorm",
                      "_check_input_dim"
                    ],
                    "classes": [
                      "_BatchNormXd"
                    ],
                    "imports": [
                      "torch",
                      "annotator.uniformer.mmcv"
                    ],
                    "size_lines": 60,
                    "has_main": false,
                    "docstring": null
                  },
                  "weight_init.py": {
                    "functions": [
                      "update_init_info",
                      "constant_init",
                      "xavier_init",
                      "normal_init",
                      "trunc_normal_init",
                      "uniform_init",
                      "kaiming_init",
                      "caffe2_xavier_init",
                      "bias_init_with_prob",
                      "_get_bases_name",
                      "_initialize",
                      "_initialize_override",
                      "initialize",
                      "_no_grad_trunc_normal_",
                      "trunc_normal_",
                      "__init__",
                      "_get_init_info",
                      "__init__",
                      "__call__",
                      "_get_init_info",
                      "__init__",
                      "__call__",
                      "_get_init_info",
                      "__init__",
                      "__call__",
                      "_get_init_info",
                      "__init__",
                      "__call__",
                      "_get_init_info",
                      "__init__",
                      "__call__",
                      "_get_init_info",
                      "__init__",
                      "__call__",
                      "_get_init_info",
                      "__init__",
                      "__call__",
                      "__init__",
                      "__call__",
                      "_get_init_info",
                      "norm_cdf",
                      "init",
                      "init",
                      "init",
                      "init",
                      "init",
                      "init"
                    ],
                    "classes": [
                      "BaseInit",
                      "ConstantInit",
                      "XavierInit",
                      "NormalInit",
                      "TruncNormalInit",
                      "UniformInit",
                      "KaimingInit",
                      "Caffe2XavierInit",
                      "PretrainedInit"
                    ],
                    "imports": [
                      "copy",
                      "math",
                      "warnings",
                      "numpy",
                      "torch",
                      "torch.nn",
                      "torch",
                      "annotator.uniformer.mmcv.utils",
                      "annotator.uniformer.mmcv.runner"
                    ],
                    "size_lines": 685,
                    "has_main": false,
                    "docstring": null
                  }
                }
              },
              "ops": {
                "deform_conv.py": {
                  "functions": [
                    "symbolic",
                    "forward",
                    "backward",
                    "_output_size",
                    "__init__",
                    "reset_parameters",
                    "forward",
                    "__repr__",
                    "__init__",
                    "init_offset",
                    "forward",
                    "_load_from_state_dict"
                  ],
                  "classes": [
                    "DeformConv2dFunction",
                    "DeformConv2d",
                    "DeformConv2dPack"
                  ],
                  "imports": [
                    "typing",
                    "torch",
                    "torch.nn",
                    "torch.nn.functional",
                    "torch",
                    "torch.autograd",
                    "torch.autograd.function",
                    "torch.nn.modules.utils",
                    "annotator.uniformer.mmcv.utils",
                    "cnn",
                    "utils"
                  ],
                  "size_lines": 406,
                  "has_main": false,
                  "docstring": null
                },
                "points_in_boxes.py": {
                  "functions": [
                    "points_in_boxes_part",
                    "points_in_boxes_cpu",
                    "points_in_boxes_all"
                  ],
                  "classes": [],
                  "imports": [
                    "torch",
                    "utils"
                  ],
                  "size_lines": 134,
                  "has_main": false,
                  "docstring": null
                },
                "scatter_points.py": {
                  "functions": [
                    "forward",
                    "backward",
                    "__init__",
                    "forward_single",
                    "forward",
                    "__repr__"
                  ],
                  "classes": [
                    "_DynamicScatter",
                    "DynamicScatter"
                  ],
                  "imports": [
                    "torch",
                    "torch",
                    "torch.autograd",
                    "utils"
                  ],
                  "size_lines": 136,
                  "has_main": false,
                  "docstring": null
                },
                "tin_shift.py": {
                  "functions": [
                    "forward",
                    "backward",
                    "forward"
                  ],
                  "classes": [
                    "TINShiftFunction",
                    "TINShift"
                  ],
                  "imports": [
                    "torch",
                    "torch.nn",
                    "torch.autograd",
                    "utils"
                  ],
                  "size_lines": 69,
                  "has_main": false,
                  "docstring": null
                },
                "gather_points.py": {
                  "functions": [
                    "forward",
                    "backward"
                  ],
                  "classes": [
                    "GatherPoints"
                  ],
                  "imports": [
                    "torch",
                    "torch.autograd",
                    "utils"
                  ],
                  "size_lines": 58,
                  "has_main": false,
                  "docstring": null
                },
                "ball_query.py": {
                  "functions": [
                    "forward",
                    "backward"
                  ],
                  "classes": [
                    "BallQuery"
                  ],
                  "imports": [
                    "torch",
                    "torch.autograd",
                    "utils"
                  ],
                  "size_lines": 56,
                  "has_main": false,
                  "docstring": null
                },
                "modulated_deform_conv.py": {
                  "functions": [
                    "symbolic",
                    "forward",
                    "backward",
                    "_output_size",
                    "__init__",
                    "init_weights",
                    "forward",
                    "__init__",
                    "init_weights",
                    "forward",
                    "_load_from_state_dict"
                  ],
                  "classes": [
                    "ModulatedDeformConv2dFunction",
                    "ModulatedDeformConv2d",
                    "ModulatedDeformConv2dPack"
                  ],
                  "imports": [
                    "math",
                    "torch",
                    "torch.nn",
                    "torch.autograd",
                    "torch.autograd.function",
                    "torch.nn.modules.utils",
                    "annotator.uniformer.mmcv.utils",
                    "cnn",
                    "utils"
                  ],
                  "size_lines": 283,
                  "has_main": false,
                  "docstring": null
                },
                "merge_cells.py": {
                  "functions": [
                    "__init__",
                    "_build_input_conv",
                    "_binary_op",
                    "_resize",
                    "forward",
                    "__init__",
                    "_binary_op",
                    "__init__",
                    "_binary_op",
                    "__init__",
                    "_binary_op"
                  ],
                  "classes": [
                    "BaseMergeCell",
                    "SumCell",
                    "ConcatCell",
                    "GlobalPoolingCell"
                  ],
                  "imports": [
                    "abc",
                    "torch",
                    "torch.nn",
                    "torch.nn.functional",
                    "cnn"
                  ],
                  "size_lines": 150,
                  "has_main": false,
                  "docstring": null
                },
                "group_points.py": {
                  "functions": [
                    "__init__",
                    "forward",
                    "__init__",
                    "forward",
                    "forward",
                    "backward"
                  ],
                  "classes": [
                    "QueryAndGroup",
                    "GroupAll",
                    "GroupingOperation"
                  ],
                  "imports": [
                    "typing",
                    "torch",
                    "torch",
                    "torch.autograd",
                    "utils",
                    "ball_query",
                    "knn"
                  ],
                  "size_lines": 225,
                  "has_main": false,
                  "docstring": null
                },
                "roipoint_pool3d.py": {
                  "functions": [
                    "__init__",
                    "forward",
                    "forward",
                    "backward"
                  ],
                  "classes": [
                    "RoIPointPool3d",
                    "RoIPointPool3dFunction"
                  ],
                  "imports": [
                    "torch",
                    "torch.autograd",
                    "utils"
                  ],
                  "size_lines": 78,
                  "has_main": false,
                  "docstring": null
                },
                "carafe.py": {
                  "functions": [
                    "symbolic",
                    "forward",
                    "backward",
                    "__init__",
                    "forward",
                    "symbolic",
                    "forward",
                    "backward",
                    "__init__",
                    "forward",
                    "__init__",
                    "init_weights",
                    "kernel_normalizer",
                    "feature_reassemble",
                    "forward"
                  ],
                  "classes": [
                    "CARAFENaiveFunction",
                    "CARAFENaive",
                    "CARAFEFunction",
                    "CARAFE",
                    "CARAFEPack"
                  ],
                  "imports": [
                    "torch",
                    "torch.nn",
                    "torch.nn.functional",
                    "torch.autograd",
                    "torch.nn.modules.module",
                    "cnn",
                    "utils"
                  ],
                  "size_lines": 288,
                  "has_main": false,
                  "docstring": null
                },
                "roi_align.py": {
                  "functions": [
                    "symbolic",
                    "forward",
                    "backward",
                    "__init__",
                    "forward",
                    "__repr__"
                  ],
                  "classes": [
                    "RoIAlignFunction",
                    "RoIAlign"
                  ],
                  "imports": [
                    "torch",
                    "torch.nn",
                    "torch.autograd",
                    "torch.autograd.function",
                    "torch.nn.modules.utils",
                    "utils",
                    "onnx",
                    "torch.onnx.symbolic_opset9",
                    "torch.onnx.symbolic_helper",
                    "torch.onnx",
                    "torchvision.ops"
                  ],
                  "size_lines": 224,
                  "has_main": false,
                  "docstring": null
                },
                "points_sampler.py": {
                  "functions": [
                    "calc_square_dist",
                    "get_sampler_cls",
                    "__init__",
                    "forward",
                    "__init__",
                    "forward",
                    "__init__",
                    "forward",
                    "__init__",
                    "forward"
                  ],
                  "classes": [
                    "PointsSampler",
                    "DFPSSampler",
                    "FFPSSampler",
                    "FSSampler"
                  ],
                  "imports": [
                    "typing",
                    "torch",
                    "torch",
                    "annotator.uniformer.mmcv.runner",
                    "furthest_point_sample"
                  ],
                  "size_lines": 178,
                  "has_main": false,
                  "docstring": null
                },
                "roi_align_rotated.py": {
                  "functions": [
                    "symbolic",
                    "forward",
                    "backward",
                    "__init__",
                    "forward"
                  ],
                  "classes": [
                    "RoIAlignRotatedFunction",
                    "RoIAlignRotated"
                  ],
                  "imports": [
                    "torch.nn",
                    "torch.autograd",
                    "utils"
                  ],
                  "size_lines": 178,
                  "has_main": false,
                  "docstring": null
                },
                "multi_scale_deform_attn.py": {
                  "functions": [
                    "multi_scale_deformable_attn_pytorch",
                    "forward",
                    "backward",
                    "__init__",
                    "init_weights",
                    "forward",
                    "_is_power_of_2"
                  ],
                  "classes": [
                    "MultiScaleDeformableAttnFunction",
                    "MultiScaleDeformableAttention"
                  ],
                  "imports": [
                    "math",
                    "warnings",
                    "torch",
                    "torch.nn",
                    "torch.nn.functional",
                    "torch.autograd.function",
                    "annotator.uniformer.mmcv",
                    "annotator.uniformer.mmcv.cnn",
                    "annotator.uniformer.mmcv.cnn.bricks.registry",
                    "annotator.uniformer.mmcv.runner",
                    "utils"
                  ],
                  "size_lines": 359,
                  "has_main": false,
                  "docstring": null
                },
                "box_iou_rotated.py": {
                  "functions": [
                    "box_iou_rotated"
                  ],
                  "classes": [],
                  "imports": [
                    "utils"
                  ],
                  "size_lines": 46,
                  "has_main": false,
                  "docstring": null
                },
                "point_sample.py": {
                  "functions": [
                    "bilinear_grid_sample",
                    "is_in_onnx_export_without_custom_ops",
                    "normalize",
                    "denormalize",
                    "generate_grid",
                    "rel_roi_point_to_abs_img_point",
                    "get_shape_from_feature_map",
                    "abs_img_point_to_rel_img_point",
                    "rel_roi_point_to_rel_img_point",
                    "point_sample",
                    "__init__",
                    "forward",
                    "__repr__"
                  ],
                  "classes": [
                    "SimpleRoIAlign"
                  ],
                  "imports": [
                    "os",
                    "torch",
                    "torch.nn",
                    "torch.nn.functional",
                    "torch.nn.modules.utils",
                    "torch.onnx.operators",
                    "annotator.uniformer.mmcv.ops"
                  ],
                  "size_lines": 337,
                  "has_main": false,
                  "docstring": null
                },
                "nms.py": {
                  "functions": [
                    "nms",
                    "soft_nms",
                    "batched_nms",
                    "nms_match",
                    "nms_rotated",
                    "forward",
                    "symbolic",
                    "forward",
                    "symbolic"
                  ],
                  "classes": [
                    "NMSop",
                    "SoftNMSop"
                  ],
                  "imports": [
                    "os",
                    "numpy",
                    "torch",
                    "annotator.uniformer.mmcv.utils",
                    "utils",
                    "onnx",
                    "packaging",
                    "torch.onnx.symbolic_opset9",
                    "onnx.onnx_utils.symbolic_helper"
                  ],
                  "size_lines": 418,
                  "has_main": false,
                  "docstring": null
                },
                "__init__.py": {
                  "functions": [],
                  "classes": [],
                  "imports": [
                    "assign_score_withk",
                    "ball_query",
                    "bbox",
                    "border_align",
                    "box_iou_rotated",
                    "carafe",
                    "cc_attention",
                    "contour_expand",
                    "corner_pool",
                    "correlation",
                    "deform_conv",
                    "deform_roi_pool",
                    "deprecated_wrappers",
                    "deprecated_wrappers",
                    "deprecated_wrappers",
                    "deprecated_wrappers",
                    "focal_loss",
                    "furthest_point_sample",
                    "fused_bias_leakyrelu",
                    "gather_points",
                    "group_points",
                    "info",
                    "iou3d",
                    "knn",
                    "masked_conv",
                    "modulated_deform_conv",
                    "multi_scale_deform_attn",
                    "nms",
                    "pixel_group",
                    "point_sample",
                    "points_in_boxes",
                    "points_sampler",
                    "psa_mask",
                    "roi_align",
                    "roi_align_rotated",
                    "roi_pool",
                    "roiaware_pool3d",
                    "roipoint_pool3d",
                    "saconv",
                    "scatter_points",
                    "sync_bn",
                    "three_interpolate",
                    "three_nn",
                    "tin_shift",
                    "upfirdn2d",
                    "voxelize"
                  ],
                  "size_lines": 82,
                  "has_main": false,
                  "docstring": null
                },
                "furthest_point_sample.py": {
                  "functions": [
                    "forward",
                    "backward",
                    "forward",
                    "backward"
                  ],
                  "classes": [
                    "FurthestPointSampling",
                    "FurthestPointSamplingWithDist"
                  ],
                  "imports": [
                    "torch",
                    "torch.autograd",
                    "utils"
                  ],
                  "size_lines": 84,
                  "has_main": false,
                  "docstring": null
                },
                "upfirdn2d.py": {
                  "functions": [
                    "upfirdn2d",
                    "upfirdn2d_native",
                    "forward",
                    "backward",
                    "forward",
                    "backward"
                  ],
                  "classes": [
                    "UpFirDn2dBackward",
                    "UpFirDn2d"
                  ],
                  "imports": [
                    "torch",
                    "torch.autograd",
                    "torch.nn",
                    "annotator.uniformer.mmcv.utils",
                    "utils"
                  ],
                  "size_lines": 331,
                  "has_main": false,
                  "docstring": null
                },
                "roi_pool.py": {
                  "functions": [
                    "symbolic",
                    "forward",
                    "backward",
                    "__init__",
                    "forward",
                    "__repr__"
                  ],
                  "classes": [
                    "RoIPoolFunction",
                    "RoIPool"
                  ],
                  "imports": [
                    "torch",
                    "torch.nn",
                    "torch.autograd",
                    "torch.autograd.function",
                    "torch.nn.modules.utils",
                    "utils"
                  ],
                  "size_lines": 87,
                  "has_main": false,
                  "docstring": null
                },
                "roiaware_pool3d.py": {
                  "functions": [
                    "__init__",
                    "forward",
                    "forward",
                    "backward"
                  ],
                  "classes": [
                    "RoIAwarePool3d",
                    "RoIAwarePool3dFunction"
                  ],
                  "imports": [
                    "torch",
                    "torch",
                    "torch.autograd",
                    "annotator.uniformer.mmcv",
                    "utils"
                  ],
                  "size_lines": 115,
                  "has_main": false,
                  "docstring": null
                },
                "deprecated_wrappers.py": {
                  "functions": [
                    "__init__",
                    "__init__",
                    "__init__",
                    "__init__"
                  ],
                  "classes": [
                    "Conv2d_deprecated",
                    "ConvTranspose2d_deprecated",
                    "MaxPool2d_deprecated",
                    "Linear_deprecated"
                  ],
                  "imports": [
                    "warnings",
                    "cnn.bricks.wrappers"
                  ],
                  "size_lines": 44,
                  "has_main": false,
                  "docstring": null
                },
                "saconv.py": {
                  "functions": [
                    "__init__",
                    "init_weights",
                    "forward"
                  ],
                  "classes": [
                    "SAConv2d"
                  ],
                  "imports": [
                    "torch",
                    "torch.nn",
                    "torch.nn.functional",
                    "annotator.uniformer.mmcv.cnn",
                    "annotator.uniformer.mmcv.ops.deform_conv",
                    "annotator.uniformer.mmcv.utils"
                  ],
                  "size_lines": 146,
                  "has_main": false,
                  "docstring": null
                },
                "contour_expand.py": {
                  "functions": [
                    "contour_expand"
                  ],
                  "classes": [],
                  "imports": [
                    "numpy",
                    "torch",
                    "utils"
                  ],
                  "size_lines": 50,
                  "has_main": false,
                  "docstring": null
                },
                "corner_pool.py": {
                  "functions": [
                    "symbolic",
                    "forward",
                    "backward",
                    "symbolic",
                    "forward",
                    "backward",
                    "symbolic",
                    "forward",
                    "backward",
                    "symbolic",
                    "forward",
                    "backward",
                    "__init__",
                    "forward"
                  ],
                  "classes": [
                    "TopPoolFunction",
                    "BottomPoolFunction",
                    "LeftPoolFunction",
                    "RightPoolFunction",
                    "CornerPool"
                  ],
                  "imports": [
                    "torch",
                    "torch",
                    "torch.autograd",
                    "utils"
                  ],
                  "size_lines": 162,
                  "has_main": false,
                  "docstring": null
                },
                "focal_loss.py": {
                  "functions": [
                    "symbolic",
                    "forward",
                    "backward",
                    "__init__",
                    "forward",
                    "__repr__",
                    "symbolic",
                    "forward",
                    "backward",
                    "__init__",
                    "forward",
                    "__repr__"
                  ],
                  "classes": [
                    "SigmoidFocalLossFunction",
                    "SigmoidFocalLoss",
                    "SoftmaxFocalLossFunction",
                    "SoftmaxFocalLoss"
                  ],
                  "imports": [
                    "torch",
                    "torch.nn",
                    "torch.autograd",
                    "torch.autograd.function",
                    "utils"
                  ],
                  "size_lines": 213,
                  "has_main": false,
                  "docstring": null
                },
                "three_nn.py": {
                  "functions": [
                    "forward",
                    "backward"
                  ],
                  "classes": [
                    "ThreeNN"
                  ],
                  "imports": [
                    "typing",
                    "torch",
                    "torch.autograd",
                    "utils"
                  ],
                  "size_lines": 52,
                  "has_main": false,
                  "docstring": null
                },
                "psa_mask.py": {
                  "functions": [
                    "symbolic",
                    "forward",
                    "backward",
                    "__init__",
                    "forward",
                    "__repr__"
                  ],
                  "classes": [
                    "PSAMaskFunction",
                    "PSAMask"
                  ],
                  "imports": [
                    "torch",
                    "torch.autograd",
                    "torch.nn.modules.utils",
                    "utils"
                  ],
                  "size_lines": 93,
                  "has_main": false,
                  "docstring": null
                },
                "deform_roi_pool.py": {
                  "functions": [
                    "symbolic",
                    "forward",
                    "backward",
                    "__init__",
                    "forward",
                    "__init__",
                    "forward",
                    "__init__",
                    "forward"
                  ],
                  "classes": [
                    "DeformRoIPoolFunction",
                    "DeformRoIPool",
                    "DeformRoIPoolPack",
                    "ModulatedDeformRoIPoolPack"
                  ],
                  "imports": [
                    "torch",
                    "torch.autograd",
                    "torch.autograd.function",
                    "torch.nn.modules.utils",
                    "utils"
                  ],
                  "size_lines": 205,
                  "has_main": false,
                  "docstring": null
                },
                "pixel_group.py": {
                  "functions": [
                    "pixel_group"
                  ],
                  "classes": [],
                  "imports": [
                    "numpy",
                    "torch",
                    "utils"
                  ],
                  "size_lines": 76,
                  "has_main": false,
                  "docstring": null
                },
                "masked_conv.py": {
                  "functions": [
                    "symbolic",
                    "forward",
                    "backward",
                    "__init__",
                    "forward"
                  ],
                  "classes": [
                    "MaskedConv2dFunction",
                    "MaskedConv2d"
                  ],
                  "imports": [
                    "math",
                    "torch",
                    "torch.nn",
                    "torch.autograd",
                    "torch.autograd.function",
                    "torch.nn.modules.utils",
                    "utils"
                  ],
                  "size_lines": 112,
                  "has_main": false,
                  "docstring": null
                },
                "assign_score_withk.py": {
                  "functions": [
                    "forward",
                    "backward"
                  ],
                  "classes": [
                    "AssignScoreWithK"
                  ],
                  "imports": [
                    "torch.autograd",
                    "utils"
                  ],
                  "size_lines": 124,
                  "has_main": false,
                  "docstring": null
                },
                "fused_bias_leakyrelu.py": {
                  "functions": [
                    "fused_bias_leakyrelu",
                    "bias_leakyrelu_ref",
                    "forward",
                    "backward",
                    "forward",
                    "backward",
                    "__init__",
                    "forward"
                  ],
                  "classes": [
                    "FusedBiasLeakyReLUFunctionBackward",
                    "FusedBiasLeakyReLUFunction",
                    "FusedBiasLeakyReLU"
                  ],
                  "imports": [
                    "torch",
                    "torch.nn.functional",
                    "torch",
                    "torch.autograd",
                    "utils"
                  ],
                  "size_lines": 269,
                  "has_main": false,
                  "docstring": null
                },
                "info.py": {
                  "functions": [
                    "get_onnxruntime_op_path",
                    "get_compiler_version",
                    "get_compiling_cuda_version",
                    "get_compiler_version",
                    "get_compiling_cuda_version"
                  ],
                  "classes": [],
                  "imports": [
                    "glob",
                    "os",
                    "torch",
                    "parrots",
                    "utils"
                  ],
                  "size_lines": 37,
                  "has_main": false,
                  "docstring": null
                },
                "voxelize.py": {
                  "functions": [
                    "forward",
                    "__init__",
                    "forward",
                    "__repr__"
                  ],
                  "classes": [
                    "_Voxelization",
                    "Voxelization"
                  ],
                  "imports": [
                    "torch",
                    "torch",
                    "torch.autograd",
                    "torch.nn.modules.utils",
                    "utils"
                  ],
                  "size_lines": 133,
                  "has_main": false,
                  "docstring": null
                },
                "correlation.py": {
                  "functions": [
                    "forward",
                    "backward",
                    "_output_size",
                    "__init__",
                    "forward",
                    "__repr__"
                  ],
                  "classes": [
                    "CorrelationFunction",
                    "Correlation"
                  ],
                  "imports": [
                    "torch",
                    "torch",
                    "torch.autograd",
                    "torch.autograd.function",
                    "torch.nn.modules.utils",
                    "utils"
                  ],
                  "size_lines": 197,
                  "has_main": false,
                  "docstring": null
                },
                "cc_attention.py": {
                  "functions": [
                    "NEG_INF_DIAG",
                    "__init__",
                    "forward",
                    "__repr__"
                  ],
                  "classes": [
                    "CrissCrossAttention"
                  ],
                  "imports": [
                    "torch",
                    "torch.nn",
                    "torch.nn.functional",
                    "annotator.uniformer.mmcv.cnn"
                  ],
                  "size_lines": 84,
                  "has_main": false,
                  "docstring": null
                },
                "iou3d.py": {
                  "functions": [
                    "boxes_iou_bev",
                    "nms_bev",
                    "nms_normal_bev"
                  ],
                  "classes": [],
                  "imports": [
                    "torch",
                    "utils"
                  ],
                  "size_lines": 86,
                  "has_main": false,
                  "docstring": null
                },
                "bbox.py": {
                  "functions": [
                    "bbox_overlaps"
                  ],
                  "classes": [],
                  "imports": [
                    "utils"
                  ],
                  "size_lines": 73,
                  "has_main": false,
                  "docstring": null
                },
                "three_interpolate.py": {
                  "functions": [
                    "forward",
                    "backward"
                  ],
                  "classes": [
                    "ThreeInterpolate"
                  ],
                  "imports": [
                    "typing",
                    "torch",
                    "torch.autograd",
                    "utils"
                  ],
                  "size_lines": 69,
                  "has_main": false,
                  "docstring": null
                },
                "sync_bn.py": {
                  "functions": [
                    "symbolic",
                    "forward",
                    "backward",
                    "__init__",
                    "reset_running_stats",
                    "reset_parameters",
                    "forward",
                    "__repr__"
                  ],
                  "classes": [
                    "SyncBatchNormFunction",
                    "SyncBatchNorm"
                  ],
                  "imports": [
                    "torch",
                    "torch.distributed",
                    "torch.nn.functional",
                    "torch.autograd",
                    "torch.autograd.function",
                    "torch.nn.modules.module",
                    "torch.nn.parameter",
                    "annotator.uniformer.mmcv.cnn",
                    "utils"
                  ],
                  "size_lines": 280,
                  "has_main": false,
                  "docstring": null
                },
                "border_align.py": {
                  "functions": [
                    "symbolic",
                    "forward",
                    "backward",
                    "__init__",
                    "forward",
                    "__repr__"
                  ],
                  "classes": [
                    "BorderAlignFunction",
                    "BorderAlign"
                  ],
                  "imports": [
                    "torch",
                    "torch.nn",
                    "torch.autograd",
                    "torch.autograd.function",
                    "utils"
                  ],
                  "size_lines": 110,
                  "has_main": false,
                  "docstring": null
                },
                "knn.py": {
                  "functions": [
                    "forward",
                    "backward"
                  ],
                  "classes": [
                    "KNN"
                  ],
                  "imports": [
                    "torch",
                    "torch.autograd",
                    "utils"
                  ],
                  "size_lines": 78,
                  "has_main": false,
                  "docstring": null
                }
              },
              "engine": {
                "__init__.py": {
                  "functions": [],
                  "classes": [],
                  "imports": [
                    "test"
                  ],
                  "size_lines": 9,
                  "has_main": false,
                  "docstring": null
                },
                "test.py": {
                  "functions": [
                    "single_gpu_test",
                    "multi_gpu_test",
                    "collect_results_cpu",
                    "collect_results_gpu"
                  ],
                  "classes": [],
                  "imports": [
                    "os.path",
                    "pickle",
                    "shutil",
                    "tempfile",
                    "time",
                    "torch",
                    "torch.distributed",
                    "annotator.uniformer.mmcv",
                    "annotator.uniformer.mmcv.runner"
                  ],
                  "size_lines": 203,
                  "has_main": false,
                  "docstring": null
                }
              }
            },
            "exp": {
              "upernet_global_small": {
                "config.py": {
                  "functions": [],
                  "classes": [],
                  "imports": [],
                  "size_lines": 38,
                  "has_main": false,
                  "docstring": null
                },
                "test_config_w32.py": {
                  "functions": [],
                  "classes": [],
                  "imports": [],
                  "size_lines": 39,
                  "has_main": false,
                  "docstring": null
                },
                "test_config_g.py": {
                  "functions": [],
                  "classes": [],
                  "imports": [],
                  "size_lines": 38,
                  "has_main": false,
                  "docstring": null
                },
                "test_config_h32.py": {
                  "functions": [],
                  "classes": [],
                  "imports": [],
                  "size_lines": 39,
                  "has_main": false,
                  "docstring": null
                }
              }
            }
          },
          "hed": {
            "__init__.py": {
              "functions": [
                "HEDdetector",
                "nms",
                "__init__",
                "__call__",
                "__init__",
                "__call__",
                "__init__",
                "__call__"
              ],
              "classes": [
                "DoubleConvBlock",
                "ControlNetHED_Apache2",
                "_HEDdetector"
              ],
              "imports": [
                "os",
                "cv2",
                "torch",
                "numpy",
                "einops",
                "annotator.util",
                "rp",
                "basicsr.utils.download_util"
              ],
              "size_lines": 109,
              "has_main": false,
              "docstring": null
            },
            "__init__copy.py": {
              "functions": [
                "HEDdetector",
                "nms",
                "__init__",
                "__call__",
                "__init__",
                "__call__",
                "__init__",
                "__call__"
              ],
              "classes": [
                "DoubleConvBlock",
                "ControlNetHED_Apache2",
                "_HEDdetector"
              ],
              "imports": [
                "os",
                "cv2",
                "torch",
                "numpy",
                "einops",
                "annotator.util",
                "rp",
                "basicsr.utils.download_util"
              ],
              "size_lines": 109,
              "has_main": false,
              "docstring": null
            }
          },
          "openpose": {
            "body.py": {
              "functions": [
                "__init__",
                "__call__"
              ],
              "classes": [
                "Body"
              ],
              "imports": [
                "cv2",
                "numpy",
                "math",
                "time",
                "scipy.ndimage.filters",
                "matplotlib.pyplot",
                "matplotlib",
                "torch",
                "torchvision",
                "model"
              ],
              "size_lines": 218,
              "has_main": true,
              "docstring": null
            },
            "util.py": {
              "functions": [
                "padRightDownCorner",
                "transfer",
                "draw_bodypose",
                "draw_handpose",
                "handDetect",
                "npmax"
              ],
              "classes": [],
              "imports": [
                "math",
                "numpy",
                "matplotlib",
                "cv2"
              ],
              "size_lines": 165,
              "has_main": false,
              "docstring": null
            },
            "__init__.py": {
              "functions": [
                "OpenposeDetector",
                "__init__",
                "__call__"
              ],
              "classes": [
                "_OpenposeDetector"
              ],
              "imports": [
                "os",
                "torch",
                "numpy",
                "body",
                "hand",
                "annotator.util",
                "rp",
                "basicsr.utils.download_util"
              ],
              "size_lines": 64,
              "has_main": false,
              "docstring": null
            },
            "model.py": {
              "functions": [
                "make_layers",
                "__init__",
                "forward",
                "__init__",
                "forward"
              ],
              "classes": [
                "bodypose_model",
                "handpose_model"
              ],
              "imports": [
                "torch",
                "collections",
                "torch",
                "torch.nn"
              ],
              "size_lines": 220,
              "has_main": false,
              "docstring": null
            },
            "hand.py": {
              "functions": [
                "__init__",
                "__call__"
              ],
              "classes": [
                "Hand"
              ],
              "imports": [
                "cv2",
                "json",
                "numpy",
                "math",
                "time",
                "scipy.ndimage.filters",
                "matplotlib.pyplot",
                "matplotlib",
                "torch",
                "skimage.measure",
                "model"
              ],
              "size_lines": 84,
              "has_main": true,
              "docstring": null
            }
          },
          "midas": {
            "__init__.py": {
              "functions": [
                "MidasDetector",
                "__init__",
                "__call__"
              ],
              "classes": [
                "_MidasDetector"
              ],
              "imports": [
                "cv2",
                "numpy",
                "torch",
                "einops",
                "api",
                "rp"
              ],
              "size_lines": 57,
              "has_main": false,
              "docstring": null
            },
            "api.py": {
              "functions": [
                "disabled_train",
                "load_midas_transform",
                "load_model",
                "__init__",
                "forward"
              ],
              "classes": [
                "MiDaSInference"
              ],
              "imports": [
                "cv2",
                "os",
                "torch",
                "torch.nn",
                "torchvision.transforms",
                "midas.dpt_depth",
                "midas.midas_net",
                "midas.midas_net_custom",
                "midas.transforms",
                "annotator.util",
                "basicsr.utils.download_util"
              ],
              "size_lines": 170,
              "has_main": false,
              "docstring": null
            },
            "utils.py": {
              "functions": [
                "read_pfm",
                "write_pfm",
                "read_image",
                "resize_image",
                "resize_depth",
                "write_depth"
              ],
              "classes": [],
              "imports": [
                "sys",
                "re",
                "numpy",
                "cv2",
                "torch"
              ],
              "size_lines": 190,
              "has_main": false,
              "docstring": "Utils for monoDepth."
            },
            "midas": {
              "midas_net_custom.py": {
                "functions": [
                  "fuse_model",
                  "__init__",
                  "forward"
                ],
                "classes": [
                  "MidasNet_small"
                ],
                "imports": [
                  "torch",
                  "torch.nn",
                  "base_model",
                  "blocks"
                ],
                "size_lines": 128,
                "has_main": false,
                "docstring": "MidashNet: Network for monocular depth estimation trained by mixing several datasets.\nThis file contains code that is adapted from\nhttps://github.com/thomasjpfan/pytorch_refinenet/blob/master/pytorch_refinenet/refinenet/refinenet_4cascade.py"
              },
              "transforms.py": {
                "functions": [
                  "apply_min_size",
                  "__init__",
                  "constrain_to_multiple_of",
                  "get_size",
                  "__call__",
                  "__init__",
                  "__call__",
                  "__init__",
                  "__call__"
                ],
                "classes": [
                  "Resize",
                  "NormalizeImage",
                  "PrepareForNet"
                ],
                "imports": [
                  "numpy",
                  "cv2",
                  "math"
                ],
                "size_lines": 235,
                "has_main": false,
                "docstring": null
              },
              "midas_net.py": {
                "functions": [
                  "__init__",
                  "forward"
                ],
                "classes": [
                  "MidasNet"
                ],
                "imports": [
                  "torch",
                  "torch.nn",
                  "base_model",
                  "blocks"
                ],
                "size_lines": 77,
                "has_main": false,
                "docstring": "MidashNet: Network for monocular depth estimation trained by mixing several datasets.\nThis file contains code that is adapted from\nhttps://github.com/thomasjpfan/pytorch_refinenet/blob/master/pytorch_refinenet/refinenet/refinenet_4cascade.py"
              },
              "__init__.py": {
                "functions": [],
                "classes": [],
                "imports": [],
                "size_lines": 1,
                "has_main": false,
                "docstring": null
              },
              "dpt_depth.py": {
                "functions": [
                  "_make_fusion_block",
                  "__init__",
                  "forward",
                  "__init__",
                  "forward"
                ],
                "classes": [
                  "DPT",
                  "DPTDepthModel"
                ],
                "imports": [
                  "torch",
                  "torch.nn",
                  "torch.nn.functional",
                  "base_model",
                  "blocks"
                ],
                "size_lines": 110,
                "has_main": false,
                "docstring": null
              },
              "base_model.py": {
                "functions": [
                  "load"
                ],
                "classes": [
                  "BaseModel"
                ],
                "imports": [
                  "torch"
                ],
                "size_lines": 17,
                "has_main": false,
                "docstring": null
              },
              "vit.py": {
                "functions": [
                  "forward_vit",
                  "_resize_pos_embed",
                  "forward_flex",
                  "get_activation",
                  "get_readout_oper",
                  "_make_vit_b16_backbone",
                  "_make_pretrained_vitl16_384",
                  "_make_pretrained_vitb16_384",
                  "_make_pretrained_deitb16_384",
                  "_make_pretrained_deitb16_distil_384",
                  "_make_vit_b_rn50_backbone",
                  "_make_pretrained_vitb_rn50_384",
                  "__init__",
                  "forward",
                  "__init__",
                  "forward",
                  "__init__",
                  "forward",
                  "__init__",
                  "forward",
                  "hook"
                ],
                "classes": [
                  "Slice",
                  "AddReadout",
                  "ProjectReadout",
                  "Transpose"
                ],
                "imports": [
                  "torch",
                  "torch.nn",
                  "timm",
                  "types",
                  "math",
                  "torch.nn.functional"
                ],
                "size_lines": 492,
                "has_main": false,
                "docstring": null
              },
              "blocks.py": {
                "functions": [
                  "_make_encoder",
                  "_make_scratch",
                  "_make_pretrained_efficientnet_lite3",
                  "_make_efficientnet_backbone",
                  "_make_resnet_backbone",
                  "_make_pretrained_resnext101_wsl",
                  "__init__",
                  "forward",
                  "__init__",
                  "forward",
                  "__init__",
                  "forward",
                  "__init__",
                  "forward",
                  "__init__",
                  "forward"
                ],
                "classes": [
                  "Interpolate",
                  "ResidualConvUnit",
                  "FeatureFusionBlock",
                  "ResidualConvUnit_custom",
                  "FeatureFusionBlock_custom"
                ],
                "imports": [
                  "torch",
                  "torch.nn",
                  "vit"
                ],
                "size_lines": 343,
                "has_main": false,
                "docstring": null
              }
            }
          },
          "mlsd": {
            "__init__.py": {
              "functions": [
                "MLSDdetector",
                "__init__",
                "__call__"
              ],
              "classes": [
                "_MLSDdetector"
              ],
              "imports": [
                "cv2",
                "numpy",
                "torch",
                "os",
                "einops",
                "models.mbv2_mlsd_tiny",
                "models.mbv2_mlsd_large",
                "utils",
                "annotator.util",
                "rp",
                "basicsr.utils.download_util"
              ],
              "size_lines": 58,
              "has_main": false,
              "docstring": null
            },
            "utils.py": {
              "functions": [
                "deccode_output_score_and_ptss",
                "pred_lines",
                "pred_squares",
                "check_outside_inside"
              ],
              "classes": [],
              "imports": [
                "os",
                "numpy",
                "cv2",
                "torch",
                "torch.nn"
              ],
              "size_lines": 581,
              "has_main": false,
              "docstring": "modified by  lihaoweicv\npytorch version"
            },
            "models": {
              "mbv2_mlsd_tiny.py": {
                "functions": [
                  "_make_divisible",
                  "__init__",
                  "forward",
                  "__init__",
                  "forward",
                  "__init__",
                  "forward",
                  "__init__",
                  "forward",
                  "__init__",
                  "forward",
                  "__init__",
                  "_forward_impl",
                  "forward",
                  "_load_pretrained_model",
                  "__init__",
                  "forward"
                ],
                "classes": [
                  "BlockTypeA",
                  "BlockTypeB",
                  "BlockTypeC",
                  "ConvBNReLU",
                  "InvertedResidual",
                  "MobileNetV2",
                  "MobileV2_MLSD_Tiny"
                ],
                "imports": [
                  "os",
                  "sys",
                  "torch",
                  "torch.nn",
                  "torch.utils.model_zoo",
                  "torch.nn"
                ],
                "size_lines": 275,
                "has_main": false,
                "docstring": null
              },
              "mbv2_mlsd_large.py": {
                "functions": [
                  "_make_divisible",
                  "__init__",
                  "forward",
                  "__init__",
                  "forward",
                  "__init__",
                  "forward",
                  "__init__",
                  "forward",
                  "__init__",
                  "forward",
                  "__init__",
                  "_forward_impl",
                  "forward",
                  "_load_pretrained_model",
                  "__init__",
                  "forward"
                ],
                "classes": [
                  "BlockTypeA",
                  "BlockTypeB",
                  "BlockTypeC",
                  "ConvBNReLU",
                  "InvertedResidual",
                  "MobileNetV2",
                  "MobileV2_MLSD_Large"
                ],
                "imports": [
                  "os",
                  "sys",
                  "torch",
                  "torch.nn",
                  "torch.utils.model_zoo",
                  "torch.nn"
                ],
                "size_lines": 292,
                "has_main": false,
                "docstring": null
              }
            }
          },
          "canny": {
            "__init__.py": {
              "functions": [
                "__call__"
              ],
              "classes": [
                "CannyDetector"
              ],
              "imports": [
                "cv2"
              ],
              "size_lines": 8,
              "has_main": false,
              "docstring": null
            }
          }
        },
        "ldm": {
          "util.py": {
            "functions": [
              "log_txt_as_img",
              "ismap",
              "isimage",
              "exists",
              "default",
              "mean_flat",
              "count_params",
              "instantiate_from_config",
              "get_obj_from_str",
              "__init__",
              "__setstate__",
              "step"
            ],
            "classes": [
              "AdamWwithEMAandWings"
            ],
            "imports": [
              "importlib",
              "torch",
              "torch",
              "numpy",
              "inspect",
              "PIL"
            ],
            "size_lines": 197,
            "has_main": false,
            "docstring": null
          },
          "models": {
            "autoencoder.py": {
              "functions": [
                "__init__",
                "init_from_ckpt",
                "ema_scope",
                "on_train_batch_end",
                "encode",
                "decode",
                "forward",
                "get_input",
                "training_step",
                "validation_step",
                "_validation_step",
                "configure_optimizers",
                "get_last_layer",
                "log_images",
                "to_rgb",
                "__init__",
                "encode",
                "decode",
                "quantize",
                "forward"
              ],
              "classes": [
                "AutoencoderKL",
                "IdentityFirstStage"
              ],
              "imports": [
                "torch",
                "pytorch_lightning",
                "torch.nn.functional",
                "contextlib",
                "ldm.modules.diffusionmodules.model",
                "ldm.modules.distributions.distributions",
                "ldm.util",
                "ldm.modules.ema"
              ],
              "size_lines": 220,
              "has_main": false,
              "docstring": null
            },
            "diffusion": {
              "ddim.py": {
                "functions": [
                  "__init__",
                  "register_buffer",
                  "make_schedule",
                  "sample",
                  "ddim_sampling",
                  "p_sample_ddim",
                  "encode",
                  "stochastic_encode",
                  "decode"
                ],
                "classes": [
                  "DDIMSampler"
                ],
                "imports": [
                  "torch",
                  "numpy",
                  "tqdm",
                  "ldm.modules.diffusionmodules.util"
                ],
                "size_lines": 336,
                "has_main": false,
                "docstring": "SAMPLING ONLY."
              },
              "sampling_util.py": {
                "functions": [
                  "append_dims",
                  "norm_thresholding",
                  "spatial_norm_thresholding"
                ],
                "classes": [],
                "imports": [
                  "torch",
                  "numpy"
                ],
                "size_lines": 22,
                "has_main": false,
                "docstring": null
              },
              "__init__.py": {
                "functions": [],
                "classes": [],
                "imports": [],
                "size_lines": 1,
                "has_main": false,
                "docstring": null
              },
              "plms.py": {
                "functions": [
                  "__init__",
                  "register_buffer",
                  "make_schedule",
                  "sample",
                  "plms_sampling",
                  "p_sample_plms",
                  "get_model_output",
                  "get_x_prev_and_pred_x0"
                ],
                "classes": [
                  "PLMSSampler"
                ],
                "imports": [
                  "torch",
                  "numpy",
                  "tqdm",
                  "functools",
                  "ldm.modules.diffusionmodules.util",
                  "ldm.models.diffusion.sampling_util"
                ],
                "size_lines": 245,
                "has_main": false,
                "docstring": "SAMPLING ONLY."
              },
              "ddpm.py": {
                "functions": [
                  "disabled_train",
                  "uniform_on_device",
                  "__init__",
                  "register_schedule",
                  "ema_scope",
                  "init_from_ckpt",
                  "q_mean_variance",
                  "predict_start_from_noise",
                  "predict_start_from_z_and_v",
                  "predict_eps_from_z_and_v",
                  "q_posterior",
                  "p_mean_variance",
                  "p_sample",
                  "p_sample_loop",
                  "sample",
                  "q_sample",
                  "get_v",
                  "get_loss",
                  "p_losses",
                  "forward",
                  "get_input",
                  "shared_step",
                  "training_step",
                  "validation_step",
                  "on_train_batch_end",
                  "_get_rows_from_list",
                  "log_images",
                  "configure_optimizers",
                  "__init__",
                  "make_cond_schedule",
                  "on_train_batch_start",
                  "register_schedule",
                  "instantiate_first_stage",
                  "instantiate_cond_stage",
                  "_get_denoise_row_from_list",
                  "get_first_stage_encoding",
                  "get_learned_conditioning",
                  "meshgrid",
                  "delta_border",
                  "get_weighting",
                  "get_fold_unfold",
                  "get_input",
                  "decode_first_stage",
                  "encode_first_stage",
                  "shared_step",
                  "forward",
                  "apply_model",
                  "_predict_eps_from_xstart",
                  "_prior_bpd",
                  "p_losses",
                  "p_mean_variance",
                  "p_sample",
                  "progressive_denoising",
                  "p_sample_loop",
                  "sample",
                  "sample_log",
                  "get_unconditional_conditioning",
                  "log_images",
                  "configure_optimizers",
                  "to_rgb",
                  "__init__",
                  "forward",
                  "__init__",
                  "instantiate_low_stage",
                  "get_input",
                  "log_images",
                  "__init__",
                  "init_from_ckpt",
                  "log_images",
                  "__init__",
                  "get_input",
                  "log_images",
                  "__init__",
                  "get_input",
                  "log_images",
                  "__init__",
                  "instantiate_low_stage",
                  "get_input",
                  "log_images"
                ],
                "classes": [
                  "DDPM",
                  "LatentDiffusion",
                  "DiffusionWrapper",
                  "LatentUpscaleDiffusion",
                  "LatentFinetuneDiffusion",
                  "LatentInpaintDiffusion",
                  "LatentDepth2ImageDiffusion",
                  "LatentUpscaleFinetuneDiffusion"
                ],
                "imports": [
                  "torch",
                  "torch.nn",
                  "numpy",
                  "pytorch_lightning",
                  "torch.optim.lr_scheduler",
                  "einops",
                  "contextlib",
                  "functools",
                  "itertools",
                  "tqdm",
                  "torchvision.utils",
                  "pytorch_lightning.utilities.distributed",
                  "omegaconf",
                  "ldm.util",
                  "ldm.modules.ema",
                  "ldm.modules.distributions.distributions",
                  "ldm.models.autoencoder",
                  "ldm.modules.diffusionmodules.util",
                  "ldm.models.diffusion.ddim"
                ],
                "size_lines": 1798,
                "has_main": false,
                "docstring": "wild mixture of\nhttps://github.com/lucidrains/denoising-diffusion-pytorch/blob/7706bdfc6f527f58d33f84b7b522e61e6e3164b3/denoising_diffusion_pytorch/denoising_diffusion_pytorch.py\nhttps://github.com/openai/improved-diffusion/blob/e94489283bb876ac1477d5dd7709bbbd2d9902ce/improved_diffusion/gaussian_diffusion.py\nhttps://github.com/CompVis/taming-transformers\n-- merci"
              },
              "dpm_solver": {
                "dpm_solver.py": {
                  "functions": [
                    "model_wrapper",
                    "interpolate_fn",
                    "expand_dims",
                    "__init__",
                    "marginal_log_mean_coeff",
                    "marginal_alpha",
                    "marginal_std",
                    "marginal_lambda",
                    "inverse_lambda",
                    "get_model_input_time",
                    "noise_pred_fn",
                    "cond_grad_fn",
                    "model_fn",
                    "__init__",
                    "noise_prediction_fn",
                    "data_prediction_fn",
                    "model_fn",
                    "get_time_steps",
                    "get_orders_and_timesteps_for_singlestep_solver",
                    "denoise_to_zero_fn",
                    "dpm_solver_first_update",
                    "singlestep_dpm_solver_second_update",
                    "singlestep_dpm_solver_third_update",
                    "multistep_dpm_solver_second_update",
                    "multistep_dpm_solver_third_update",
                    "singlestep_dpm_solver_update",
                    "multistep_dpm_solver_update",
                    "dpm_solver_adaptive",
                    "sample"
                  ],
                  "classes": [
                    "NoiseScheduleVP",
                    "DPM_Solver"
                  ],
                  "imports": [
                    "torch",
                    "torch.nn.functional",
                    "math",
                    "tqdm"
                  ],
                  "size_lines": 1154,
                  "has_main": false,
                  "docstring": null
                },
                "__init__.py": {
                  "functions": [],
                  "classes": [],
                  "imports": [
                    "sampler"
                  ],
                  "size_lines": 1,
                  "has_main": false,
                  "docstring": null
                },
                "sampler.py": {
                  "functions": [
                    "__init__",
                    "register_buffer",
                    "sample"
                  ],
                  "classes": [
                    "DPMSolverSampler"
                  ],
                  "imports": [
                    "torch",
                    "dpm_solver"
                  ],
                  "size_lines": 87,
                  "has_main": false,
                  "docstring": "SAMPLING ONLY."
                }
              }
            }
          },
          "modules": {
            "attention.py": {
              "functions": [
                "exists",
                "uniq",
                "default",
                "max_neg_value",
                "init_",
                "zero_module",
                "Normalize",
                "__init__",
                "forward",
                "__init__",
                "forward",
                "__init__",
                "forward",
                "__init__",
                "forward",
                "__init__",
                "forward",
                "__init__",
                "forward",
                "_forward",
                "__init__",
                "forward"
              ],
              "classes": [
                "GEGLU",
                "FeedForward",
                "SpatialSelfAttention",
                "CrossAttention",
                "MemoryEfficientCrossAttention",
                "BasicTransformerBlock",
                "SpatialTransformer"
              ],
              "imports": [
                "inspect",
                "math",
                "torch",
                "torch.nn.functional",
                "torch",
                "einops",
                "typing",
                "ldm.modules.diffusionmodules.util",
                "os",
                "xformers",
                "xformers.ops"
              ],
              "size_lines": 342,
              "has_main": false,
              "docstring": null
            },
            "ema.py": {
              "functions": [
                "__init__",
                "reset_num_updates",
                "forward",
                "copy_to",
                "store",
                "restore"
              ],
              "classes": [
                "LitEma"
              ],
              "imports": [
                "torch",
                "torch"
              ],
              "size_lines": 81,
              "has_main": false,
              "docstring": null
            },
            "midas": {
              "__init__.py": {
                "functions": [],
                "classes": [],
                "imports": [],
                "size_lines": 1,
                "has_main": false,
                "docstring": null
              },
              "api.py": {
                "functions": [
                  "disabled_train",
                  "load_midas_transform",
                  "load_model",
                  "__init__",
                  "forward"
                ],
                "classes": [
                  "MiDaSInference"
                ],
                "imports": [
                  "cv2",
                  "torch",
                  "torch.nn",
                  "torchvision.transforms",
                  "ldm.modules.midas.midas.dpt_depth",
                  "ldm.modules.midas.midas.midas_net",
                  "ldm.modules.midas.midas.midas_net_custom",
                  "ldm.modules.midas.midas.transforms"
                ],
                "size_lines": 171,
                "has_main": false,
                "docstring": null
              },
              "utils.py": {
                "functions": [
                  "read_pfm",
                  "write_pfm",
                  "read_image",
                  "resize_image",
                  "resize_depth",
                  "write_depth"
                ],
                "classes": [],
                "imports": [
                  "sys",
                  "re",
                  "numpy",
                  "cv2",
                  "torch"
                ],
                "size_lines": 190,
                "has_main": false,
                "docstring": "Utils for monoDepth."
              },
              "midas": {
                "midas_net_custom.py": {
                  "functions": [
                    "fuse_model",
                    "__init__",
                    "forward"
                  ],
                  "classes": [
                    "MidasNet_small"
                  ],
                  "imports": [
                    "torch",
                    "torch.nn",
                    "base_model",
                    "blocks"
                  ],
                  "size_lines": 128,
                  "has_main": false,
                  "docstring": "MidashNet: Network for monocular depth estimation trained by mixing several datasets.\nThis file contains code that is adapted from\nhttps://github.com/thomasjpfan/pytorch_refinenet/blob/master/pytorch_refinenet/refinenet/refinenet_4cascade.py"
                },
                "transforms.py": {
                  "functions": [
                    "apply_min_size",
                    "__init__",
                    "constrain_to_multiple_of",
                    "get_size",
                    "__call__",
                    "__init__",
                    "__call__",
                    "__init__",
                    "__call__"
                  ],
                  "classes": [
                    "Resize",
                    "NormalizeImage",
                    "PrepareForNet"
                  ],
                  "imports": [
                    "numpy",
                    "cv2",
                    "math"
                  ],
                  "size_lines": 235,
                  "has_main": false,
                  "docstring": null
                },
                "midas_net.py": {
                  "functions": [
                    "__init__",
                    "forward"
                  ],
                  "classes": [
                    "MidasNet"
                  ],
                  "imports": [
                    "torch",
                    "torch.nn",
                    "base_model",
                    "blocks"
                  ],
                  "size_lines": 77,
                  "has_main": false,
                  "docstring": "MidashNet: Network for monocular depth estimation trained by mixing several datasets.\nThis file contains code that is adapted from\nhttps://github.com/thomasjpfan/pytorch_refinenet/blob/master/pytorch_refinenet/refinenet/refinenet_4cascade.py"
                },
                "__init__.py": {
                  "functions": [],
                  "classes": [],
                  "imports": [],
                  "size_lines": 1,
                  "has_main": false,
                  "docstring": null
                },
                "dpt_depth.py": {
                  "functions": [
                    "_make_fusion_block",
                    "__init__",
                    "forward",
                    "__init__",
                    "forward"
                  ],
                  "classes": [
                    "DPT",
                    "DPTDepthModel"
                  ],
                  "imports": [
                    "torch",
                    "torch.nn",
                    "torch.nn.functional",
                    "base_model",
                    "blocks"
                  ],
                  "size_lines": 110,
                  "has_main": false,
                  "docstring": null
                },
                "base_model.py": {
                  "functions": [
                    "load"
                  ],
                  "classes": [
                    "BaseModel"
                  ],
                  "imports": [
                    "torch"
                  ],
                  "size_lines": 17,
                  "has_main": false,
                  "docstring": null
                },
                "vit.py": {
                  "functions": [
                    "forward_vit",
                    "_resize_pos_embed",
                    "forward_flex",
                    "get_activation",
                    "get_readout_oper",
                    "_make_vit_b16_backbone",
                    "_make_pretrained_vitl16_384",
                    "_make_pretrained_vitb16_384",
                    "_make_pretrained_deitb16_384",
                    "_make_pretrained_deitb16_distil_384",
                    "_make_vit_b_rn50_backbone",
                    "_make_pretrained_vitb_rn50_384",
                    "__init__",
                    "forward",
                    "__init__",
                    "forward",
                    "__init__",
                    "forward",
                    "__init__",
                    "forward",
                    "hook"
                  ],
                  "classes": [
                    "Slice",
                    "AddReadout",
                    "ProjectReadout",
                    "Transpose"
                  ],
                  "imports": [
                    "torch",
                    "torch.nn",
                    "timm",
                    "types",
                    "math",
                    "torch.nn.functional"
                  ],
                  "size_lines": 492,
                  "has_main": false,
                  "docstring": null
                },
                "blocks.py": {
                  "functions": [
                    "_make_encoder",
                    "_make_scratch",
                    "_make_pretrained_efficientnet_lite3",
                    "_make_efficientnet_backbone",
                    "_make_resnet_backbone",
                    "_make_pretrained_resnext101_wsl",
                    "__init__",
                    "forward",
                    "__init__",
                    "forward",
                    "__init__",
                    "forward",
                    "__init__",
                    "forward",
                    "__init__",
                    "forward"
                  ],
                  "classes": [
                    "Interpolate",
                    "ResidualConvUnit",
                    "FeatureFusionBlock",
                    "ResidualConvUnit_custom",
                    "FeatureFusionBlock_custom"
                  ],
                  "imports": [
                    "torch",
                    "torch.nn",
                    "vit"
                  ],
                  "size_lines": 343,
                  "has_main": false,
                  "docstring": null
                }
              }
            },
            "encoders": {
              "__init__.py": {
                "functions": [],
                "classes": [],
                "imports": [],
                "size_lines": 1,
                "has_main": false,
                "docstring": null
              },
              "modules.py": {
                "functions": [
                  "disabled_train",
                  "__init__",
                  "encode",
                  "encode",
                  "__init__",
                  "forward",
                  "get_unconditional_conditioning",
                  "__init__",
                  "freeze",
                  "forward",
                  "encode",
                  "__init__",
                  "freeze",
                  "forward",
                  "encode",
                  "__init__",
                  "freeze",
                  "forward",
                  "encode_with_transformer",
                  "text_transformer_forward",
                  "encode",
                  "__init__",
                  "encode",
                  "forward"
                ],
                "classes": [
                  "AbstractEncoder",
                  "IdentityEncoder",
                  "ClassEmbedder",
                  "FrozenT5Embedder",
                  "FrozenCLIPEmbedder",
                  "FrozenOpenCLIPEmbedder",
                  "FrozenCLIPT5Encoder"
                ],
                "imports": [
                  "torch",
                  "torch.nn",
                  "torch.utils.checkpoint",
                  "transformers",
                  "open_clip",
                  "ldm.util"
                ],
                "size_lines": 214,
                "has_main": false,
                "docstring": null
              }
            },
            "image_degradation": {
              "bsrgan.py": {
                "functions": [
                  "modcrop_np",
                  "analytic_kernel",
                  "anisotropic_Gaussian",
                  "gm_blur_kernel",
                  "shift_pixel",
                  "blur",
                  "gen_kernel",
                  "fspecial_gaussian",
                  "fspecial_laplacian",
                  "fspecial",
                  "bicubic_degradation",
                  "srmd_degradation",
                  "dpsr_degradation",
                  "classical_degradation",
                  "add_sharpening",
                  "add_blur",
                  "add_resize",
                  "add_Gaussian_noise",
                  "add_speckle_noise",
                  "add_Poisson_noise",
                  "add_JPEG_noise",
                  "random_crop",
                  "degradation_bsrgan",
                  "degradation_bsrgan_variant",
                  "degradation_bsrgan_plus"
                ],
                "classes": [],
                "imports": [
                  "numpy",
                  "cv2",
                  "torch",
                  "functools",
                  "random",
                  "scipy",
                  "scipy",
                  "scipy.stats",
                  "scipy.interpolate",
                  "scipy.linalg",
                  "albumentations",
                  "ldm.modules.image_degradation.utils_image"
                ],
                "size_lines": 731,
                "has_main": true,
                "docstring": "# --------------------------------------------\n# Super-Resolution\n# --------------------------------------------\n#\n# Kai Zhang (cskaizhang@gmail.com)\n# https://github.com/cszn\n# From 2019/03--2021/08\n# --------------------------------------------"
              },
              "__init__.py": {
                "functions": [],
                "classes": [],
                "imports": [
                  "ldm.modules.image_degradation.bsrgan",
                  "ldm.modules.image_degradation.bsrgan_light"
                ],
                "size_lines": 3,
                "has_main": false,
                "docstring": null
              },
              "utils_image.py": {
                "functions": [
                  "is_image_file",
                  "get_timestamp",
                  "imshow",
                  "surf",
                  "get_image_paths",
                  "_get_paths_from_images",
                  "patches_from_image",
                  "imssave",
                  "split_imageset",
                  "mkdir",
                  "mkdirs",
                  "mkdir_and_rename",
                  "imread_uint",
                  "imsave",
                  "imwrite",
                  "read_img",
                  "uint2single",
                  "single2uint",
                  "uint162single",
                  "single2uint16",
                  "uint2tensor4",
                  "uint2tensor3",
                  "tensor2uint",
                  "single2tensor3",
                  "single2tensor4",
                  "tensor2single",
                  "tensor2single3",
                  "single2tensor5",
                  "single32tensor5",
                  "single42tensor4",
                  "tensor2img",
                  "augment_img",
                  "augment_img_tensor4",
                  "augment_img_tensor",
                  "augment_img_np3",
                  "augment_imgs",
                  "modcrop",
                  "shave",
                  "rgb2ycbcr",
                  "ycbcr2rgb",
                  "bgr2ycbcr",
                  "channel_convert",
                  "calculate_psnr",
                  "calculate_ssim",
                  "ssim",
                  "cubic",
                  "calculate_weights_indices",
                  "imresize",
                  "imresize_np",
                  "_augment"
                ],
                "classes": [],
                "imports": [
                  "os",
                  "math",
                  "random",
                  "numpy",
                  "torch",
                  "cv2",
                  "torchvision.utils",
                  "datetime"
                ],
                "size_lines": 916,
                "has_main": true,
                "docstring": null
              },
              "bsrgan_light.py": {
                "functions": [
                  "modcrop_np",
                  "analytic_kernel",
                  "anisotropic_Gaussian",
                  "gm_blur_kernel",
                  "shift_pixel",
                  "blur",
                  "gen_kernel",
                  "fspecial_gaussian",
                  "fspecial_laplacian",
                  "fspecial",
                  "bicubic_degradation",
                  "srmd_degradation",
                  "dpsr_degradation",
                  "classical_degradation",
                  "add_sharpening",
                  "add_blur",
                  "add_resize",
                  "add_Gaussian_noise",
                  "add_speckle_noise",
                  "add_Poisson_noise",
                  "add_JPEG_noise",
                  "random_crop",
                  "degradation_bsrgan",
                  "degradation_bsrgan_variant"
                ],
                "classes": [],
                "imports": [
                  "numpy",
                  "cv2",
                  "torch",
                  "functools",
                  "random",
                  "scipy",
                  "scipy",
                  "scipy.stats",
                  "scipy.interpolate",
                  "scipy.linalg",
                  "albumentations",
                  "ldm.modules.image_degradation.utils_image"
                ],
                "size_lines": 652,
                "has_main": true,
                "docstring": null
              }
            },
            "diffusionmodules": {
              "util.py": {
                "functions": [
                  "make_beta_schedule",
                  "make_ddim_timesteps",
                  "make_ddim_sampling_parameters",
                  "betas_for_alpha_bar",
                  "extract_into_tensor",
                  "checkpoint",
                  "timestep_embedding",
                  "zero_module",
                  "scale_module",
                  "mean_flat",
                  "normalization",
                  "conv_nd",
                  "linear",
                  "avg_pool_nd",
                  "noise_like",
                  "forward",
                  "backward",
                  "forward",
                  "forward",
                  "__init__",
                  "forward"
                ],
                "classes": [
                  "CheckpointFunction",
                  "SiLU",
                  "GroupNorm32",
                  "HybridConditioner"
                ],
                "imports": [
                  "os",
                  "math",
                  "torch",
                  "torch.nn",
                  "numpy",
                  "einops",
                  "ldm.util"
                ],
                "size_lines": 270,
                "has_main": false,
                "docstring": null
              },
              "upscaling.py": {
                "functions": [
                  "__init__",
                  "register_schedule",
                  "q_sample",
                  "forward",
                  "decode",
                  "__init__",
                  "forward",
                  "__init__",
                  "forward"
                ],
                "classes": [
                  "AbstractLowScaleModel",
                  "SimpleImageConcat",
                  "ImageConcatWithNoiseAugmentation"
                ],
                "imports": [
                  "torch",
                  "torch.nn",
                  "numpy",
                  "functools",
                  "ldm.modules.diffusionmodules.util",
                  "ldm.util"
                ],
                "size_lines": 82,
                "has_main": false,
                "docstring": null
              },
              "__init__.py": {
                "functions": [],
                "classes": [],
                "imports": [],
                "size_lines": 1,
                "has_main": false,
                "docstring": null
              },
              "model.py": {
                "functions": [
                  "get_timestep_embedding",
                  "nonlinearity",
                  "Normalize",
                  "make_attn",
                  "__init__",
                  "forward",
                  "__init__",
                  "forward",
                  "__init__",
                  "forward",
                  "__init__",
                  "forward",
                  "__init__",
                  "forward",
                  "forward",
                  "__init__",
                  "forward",
                  "get_last_layer",
                  "__init__",
                  "forward",
                  "__init__",
                  "forward",
                  "__init__",
                  "forward",
                  "__init__",
                  "forward",
                  "__init__",
                  "forward",
                  "__init__",
                  "forward",
                  "__init__",
                  "forward",
                  "__init__",
                  "forward",
                  "__init__",
                  "forward"
                ],
                "classes": [
                  "Upsample",
                  "Downsample",
                  "ResnetBlock",
                  "AttnBlock",
                  "MemoryEfficientAttnBlock",
                  "MemoryEfficientCrossAttentionWrapper",
                  "Model",
                  "Encoder",
                  "Decoder",
                  "SimpleDecoder",
                  "UpsampleDecoder",
                  "LatentRescaler",
                  "MergedRescaleEncoder",
                  "MergedRescaleDecoder",
                  "Upsampler",
                  "Resize"
                ],
                "imports": [
                  "math",
                  "torch",
                  "torch.nn",
                  "numpy",
                  "einops",
                  "typing",
                  "ldm.modules.attention",
                  "xformers",
                  "xformers.ops"
                ],
                "size_lines": 853,
                "has_main": false,
                "docstring": null
              },
              "openaimodel.py": {
                "functions": [
                  "convert_module_to_f16",
                  "convert_module_to_f32",
                  "count_flops_attn",
                  "__init__",
                  "forward",
                  "forward",
                  "forward",
                  "__init__",
                  "forward",
                  "__init__",
                  "forward",
                  "__init__",
                  "forward",
                  "__init__",
                  "forward",
                  "_forward",
                  "__init__",
                  "forward",
                  "_forward",
                  "__init__",
                  "forward",
                  "count_flops",
                  "__init__",
                  "forward",
                  "count_flops",
                  "__init__",
                  "convert_to_fp16",
                  "convert_to_fp32",
                  "forward"
                ],
                "classes": [
                  "AttentionPool2d",
                  "TimestepBlock",
                  "TimestepEmbedSequential",
                  "Upsample",
                  "TransposedUpsample",
                  "Downsample",
                  "ResBlock",
                  "AttentionBlock",
                  "QKVAttentionLegacy",
                  "QKVAttention",
                  "UNetModel"
                ],
                "imports": [
                  "abc",
                  "math",
                  "numpy",
                  "torch",
                  "torch.nn",
                  "torch.nn.functional",
                  "ldm.modules.diffusionmodules.util",
                  "ldm.modules.attention",
                  "ldm.util",
                  "omegaconf.listconfig"
                ],
                "size_lines": 787,
                "has_main": false,
                "docstring": null
              }
            },
            "distributions": {
              "__init__.py": {
                "functions": [],
                "classes": [],
                "imports": [],
                "size_lines": 1,
                "has_main": false,
                "docstring": null
              },
              "distributions.py": {
                "functions": [
                  "normal_kl",
                  "sample",
                  "mode",
                  "__init__",
                  "sample",
                  "mode",
                  "__init__",
                  "sample",
                  "kl",
                  "nll",
                  "mode"
                ],
                "classes": [
                  "AbstractDistribution",
                  "DiracDistribution",
                  "DiagonalGaussianDistribution"
                ],
                "imports": [
                  "torch",
                  "numpy"
                ],
                "size_lines": 93,
                "has_main": false,
                "docstring": null
              }
            }
          },
          "data": {
            "util.py": {
              "functions": [
                "__init__",
                "pt2np",
                "np2pt",
                "__call__"
              ],
              "classes": [
                "AddMiDaS"
              ],
              "imports": [
                "torch",
                "ldm.modules.midas.api"
              ],
              "size_lines": 24,
              "has_main": false,
              "docstring": null
            },
            "__init__.py": {
              "functions": [],
              "classes": [],
              "imports": [],
              "size_lines": 1,
              "has_main": false,
              "docstring": null
            }
          }
        }
      },
      "remove_watermark": {
        "make_watermark_exr.py": {
          "functions": [
            "select_torch_device",
            "get_rgba_overlay",
            "__init__",
            "get_foreground",
            "get_alpha",
            "forward",
            "closure"
          ],
          "classes": [
            "CompositeImage"
          ],
          "imports": [
            "rp",
            "torch",
            "torch.nn",
            "torch.optim",
            "tqdm",
            "numpy"
          ],
          "size_lines": 120,
          "has_main": false,
          "docstring": null
        },
        "__init__.py": {
          "functions": [],
          "classes": [],
          "imports": [
            "remove_watermark"
          ],
          "size_lines": 2,
          "has_main": false,
          "docstring": null
        },
        "remove_watermark_envato.py": {
          "functions": [
            "get_watermarks",
            "get_average_frame",
            "sobel",
            "watermark_scores",
            "remove_watermark"
          ],
          "classes": [],
          "imports": [
            "rp"
          ],
          "size_lines": 106,
          "has_main": true,
          "docstring": null
        },
        "remove_watermark.py": {
          "functions": [
            "_is_uint8",
            "_fft2",
            "_ifft2",
            "_fftshift",
            "_clip",
            "_roll",
            "_default_form",
            "_like",
            "_get_watermark_image",
            "remove_watermark",
            "demo_remove_watermark",
            "recover_background",
            "get_shifts",
            "cross_corr",
            "best_shift"
          ],
          "classes": [],
          "imports": [
            "numpy",
            "einops",
            "rp",
            "torch"
          ],
          "size_lines": 252,
          "has_main": true,
          "docstring": null
        }
      },
      "CommonSource": {
        "noise_warp.py": {
          "functions": [
            "unique_pixels",
            "sum_indexed_values",
            "indexed_to_image",
            "demo_pixellation_via_proxy",
            "calculate_wave_pattern",
            "starfield_zoom",
            "_cached_arange",
            "fast_nearest_torch_remap_image",
            "warp_noise",
            "regaussianize",
            "demo_noise_warp",
            "demo_webcam_noise_warp",
            "_xy_meshgrid",
            "xy_meshgrid_like_image",
            "noise_to_xy\u03c9c",
            "xy\u03c9c_to_noise",
            "warp_xy\u03c9c",
            "blend_noise",
            "mix_new_noise",
            "resize_noise",
            "get_noise_from_video",
            "resize_frame",
            "main",
            "__init__",
            "noise",
            "__call__",
            "_noise_to_state",
            "_state_to_noise",
            "_warp_state",
            "downscale_noise"
          ],
          "classes": [
            "NoiseWarper"
          ],
          "imports": [
            "glob",
            "sys",
            "fire",
            "numpy",
            "rp",
            "torch",
            "einops",
            "tqdm",
            "raft",
            "background_remover",
            "torch",
            "cv2",
            "rp"
          ],
          "size_lines": 1257,
          "has_main": true,
          "docstring": null
        },
        "background_remover.py": {
          "functions": [
            "demo",
            "__init__",
            "__call__"
          ],
          "classes": [
            "BackgroundRemover"
          ],
          "imports": [
            "rp",
            "cv2",
            "numpy",
            "PIL",
            "transparent_background",
            "transparent_background"
          ],
          "size_lines": 90,
          "has_main": true,
          "docstring": null
        },
        "learnable_textures.py": {
          "functions": [
            "get_uv_grid",
            "__init__",
            "forward",
            "__init__",
            "as_numpy_image",
            "__init__",
            "forward",
            "parameters",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "get_features",
            "forward",
            "__init__",
            "as_numpy_images",
            "forward",
            "__len__",
            "__init__",
            "__init__",
            "__init__",
            "__init__",
            "forward",
            "__init__",
            "forward",
            "__init__",
            "get_features",
            "forward"
          ],
          "classes": [
            "GaussianFourierFeatureTransform",
            "LearnableImage",
            "NoParamsDecoderWrapper",
            "LearnableLatentImage",
            "LearnableImageRasterSigmoided",
            "LearnableImageRaster",
            "LearnableImageMLP",
            "LearnableImageFourier",
            "LearnableTexturePack",
            "LearnableTexturePackRaster",
            "LearnableTexturePackMLP",
            "LearnableTexturePackFourier",
            "LearnableImageRasterBilateral",
            "LearnableImageFourierBilateral",
            "LearnableAlphasFourier"
          ],
          "imports": [
            "torch",
            "torch.nn",
            "numpy",
            "einops",
            "rp",
            "icecream"
          ],
          "size_lines": 582,
          "has_main": false,
          "docstring": null
        },
        "__init__.py": {
          "functions": [],
          "classes": [],
          "imports": [],
          "size_lines": 1,
          "has_main": false,
          "docstring": null
        },
        "peekaboo.py": {
          "functions": [
            "make_learnable_image",
            "blend_torch_images",
            "display",
            "log_cell",
            "log",
            "save_peekaboo_results",
            "make_image_square",
            "run_peekaboo",
            "__init__",
            "num_labels",
            "set_background_color",
            "randomize_background",
            "forward",
            "try_add_stat",
            "__init__",
            "sub",
            "img",
            "is_valid",
            "image_path",
            "image_name",
            "name",
            "params",
            "image",
            "scaled_image",
            "alpha",
            "alpha_path",
            "preview_image",
            "__repr__"
          ],
          "classes": [
            "PeekabooSegmenter",
            "PeekabooResults",
            "PeekabooResult"
          ],
          "imports": [
            "icecream",
            "numpy",
            "rp",
            "torch",
            "torch.nn",
            "easydict",
            "IPython.display",
            "torchvision.transforms.functional",
            "source.stable_diffusion",
            "source.bilateral_blur",
            "source.learnable_textures",
            "typing",
            "rp",
            "easydict",
            "collections",
            "pandas",
            "icecream",
            "source.stable_diffusion_labels",
            "json",
            "clip"
          ],
          "size_lines": 520,
          "has_main": false,
          "docstring": null
        },
        "stable_diffusion.py": {
          "functions": [
            "_get_stable_diffusion_singleton",
            "__init__",
            "get_text_embeddings",
            "add_noise",
            "remove_noise",
            "predict_noise",
            "train_step",
            "produce_latents",
            "decode_latents",
            "encode_imgs",
            "decode_latent",
            "encode_img",
            "embeddings_to_imgs",
            "prompts_to_imgs",
            "prompt_to_img"
          ],
          "classes": [
            "StableDiffusion"
          ],
          "imports": [
            "typing",
            "transformers",
            "diffusers",
            "diffusers",
            "torch",
            "torch.nn",
            "torch.nn.functional",
            "rp"
          ],
          "size_lines": 353,
          "has_main": false,
          "docstring": null
        },
        "sa2va.py": {
          "functions": [
            "_default_sa2va_device",
            "_get_sa2va_model_helper",
            "_get_sa2va_model",
            "_load_video",
            "_load_image",
            "_run_sa2va",
            "chat_image",
            "chat_video",
            "describe_image",
            "describe_video",
            "segment_image",
            "segment_video",
            "demo"
          ],
          "classes": [],
          "imports": [
            "rp",
            "torch",
            "numpy",
            "transformers",
            "rp",
            "rp.git.CommonSource.sa2va"
          ],
          "size_lines": 393,
          "has_main": false,
          "docstring": "Sa2VA: State-of-the-art vision-language model for image/video understanding (early 2025)\n\nThis module provides simple functions to work with ByteDance's Sa2VA-4B model, \nwhich handles both images and videos for:\n- Image and video captioning\n- Visual question answering \n- Referring segmentation (generates pixel masks for objects)\n\nFunctions automatically download the model on first use. No class initialization needed.\n\nInput formats:\n- Images: np.ndarray (HW3 uint8 or float 0-1), PIL Image, or path/URL\n- Videos: List of frames, path, or URL\n- Text: String prompts for questions or segmentation references\n\nExample:\n    # Caption an image\n    caption = describe_image(\"photo.jpg\")\n    \n    # Ask questions about an image\n    answer = chat_image(\"photo.jpg\", \"What color is the car?\")\n    \n    # Generate segmentation mask for a referred object\n    text, masks = segment_image(\"photo.jpg\", \"Please segment the cat\")\n\nSee: https://huggingface.co/ByteDance/Sa2VA-4B"
        },
        "stable_diffusion_labels.py": {
          "functions": [
            "get_mean_embedding",
            "__init__",
            "get_sample_image",
            "__repr__",
            "__init__",
            "__init__",
            "__init__"
          ],
          "classes": [
            "BaseLabel",
            "SimpleLabel",
            "NegativeLabel",
            "MeanLabel"
          ],
          "imports": [
            "torch",
            "source.stable_diffusion",
            "rp"
          ],
          "size_lines": 63,
          "has_main": false,
          "docstring": null
        },
        "msssim.py": {
          "functions": [
            "gaussian",
            "create_window",
            "ssim",
            "_get_weights",
            "msssim",
            "numpy_msssim",
            "__init__",
            "forward",
            "__init__",
            "forward"
          ],
          "classes": [
            "SSIM",
            "MSSSIM"
          ],
          "imports": [
            "math",
            "rp",
            "torch",
            "torch.nn.functional"
          ],
          "size_lines": 190,
          "has_main": false,
          "docstring": null
        },
        "gpt4v.py": {
          "functions": [
            "_get_gpt4v_request_json",
            "_run_gpt4v",
            "run_gpt4v"
          ],
          "classes": [],
          "imports": [
            "requests",
            "rp"
          ],
          "size_lines": 129,
          "has_main": false,
          "docstring": null
        },
        "bilateral_blur.py": {
          "functions": [
            "nans_like",
            "shifted_image",
            "test_shifted_image",
            "get_weight_matrix",
            "apply_weight_matrix",
            "__init__",
            "__call__"
          ],
          "classes": [
            "BilateralProxyBlur"
          ],
          "imports": [
            "torch",
            "itertools",
            "einops",
            "rp",
            "icecream",
            "torch",
            "icecream",
            "rp"
          ],
          "size_lines": 209,
          "has_main": false,
          "docstring": null
        },
        "raft.py": {
          "functions": [
            "__init__",
            "_preprocess_image",
            "__call__"
          ],
          "classes": [
            "RaftOpticalFlow"
          ],
          "imports": [
            "rp",
            "torch",
            "torchvision.transforms",
            "torchvision.models.optical_flow"
          ],
          "size_lines": 87,
          "has_main": false,
          "docstring": null
        },
        "clip.py": {
          "functions": [
            "get_clip_logits"
          ],
          "classes": [],
          "imports": [
            "torch",
            "numpy",
            "typing",
            "transformers",
            "rp"
          ],
          "size_lines": 84,
          "has_main": false,
          "docstring": null
        },
        "dino.py": {
          "functions": [
            "get_dino_map"
          ],
          "classes": [],
          "imports": [
            "rp",
            "numpy",
            "torch",
            "torchvision.transforms.functional",
            "timm.data.constants",
            "timm.models.vision_transformer"
          ],
          "size_lines": 44,
          "has_main": false,
          "docstring": null
        },
        "controlnet_annotators.py": {
          "functions": [],
          "classes": [],
          "imports": [
            "rp",
            "rp.git.ControlNet.annotator"
          ],
          "size_lines": 15,
          "has_main": true,
          "docstring": null
        },
        "projects": {
          "mask_generator": {
            "random_video_mask_generator.py": {
              "functions": [
                "_random_shapes_video",
                "_ease_in_out_cubic",
                "get_random_video_mask",
                "demo",
                "__init__",
                "draw",
                "randomize_hyperparameters",
                "update_hyperparameters",
                "start_drawing",
                "is_active",
                "decrement_duration",
                "_animate_movement",
                "_get_animated_parameters",
                "__init__",
                "draw",
                "randomize_hyperparameters",
                "_get_animated_parameters",
                "__init__",
                "draw",
                "randomize_hyperparameters",
                "_get_animated_parameters",
                "_animate_movement",
                "__init__",
                "draw",
                "randomize_hyperparameters",
                "_get_animated_parameters",
                "_animate_movement",
                "__init__",
                "apply",
                "start_drawing",
                "is_active",
                "decrement_duration",
                "draw",
                "update_hyperparameters",
                "__init__",
                "generate_video",
                "__init__",
                "draw",
                "randomize_hyperparameters",
                "_get_animated_parameters",
                "__init__",
                "draw",
                "randomize_hyperparameters",
                "_get_animated_parameters",
                "_animate_movement",
                "__init__",
                "draw",
                "randomize_hyperparameters",
                "_animate_movement",
                "_get_animated_parameters",
                "__init__",
                "apply",
                "get_frame_center",
                "start_drawing",
                "is_active",
                "decrement_duration",
                "draw",
                "update_hyperparameters",
                "randvid"
              ],
              "classes": [
                "_ShapePlugin",
                "_RectanglePlugin",
                "_EllipsePlugin",
                "_ScribblePlugin",
                "_FramePersistenceAction",
                "_VideoGenerator",
                "_SaltPlugin",
                "_TrianglePlugin",
                "_BoopySaltPlugin",
                "_FrameShiftAction"
              ],
              "imports": [
                "numpy",
                "random",
                "cv2",
                "rp"
              ],
              "size_lines": 789,
              "has_main": true,
              "docstring": "Ryan Burgert 2025\nThis module is meant to get random masks for video inpainting training."
            }
          },
          "counterfactual": {
            "dotted_latents": {
              "__init__.py": {
                "functions": [
                  "_fast_scatter_add",
                  "_get_all_mask_positions",
                  "_get_random_mask_positions",
                  "generate_dotted_latents",
                  "demo_dotted_latents"
                ],
                "classes": [],
                "imports": [
                  "rp",
                  "torch",
                  "numpy"
                ],
                "size_lines": 337,
                "has_main": false,
                "docstring": "Motion tracking visualization module for creating control videos.\n\nThis module provides functionality for tracking differences in motion between videos\nby using CoTracker to follow randomly sampled points across video frames and generating\nvisual representations of their paths.\n\nThe main function is `generate_dotted_latents` which creates a control video with\ntracked dots that visualize motion patterns."
              }
            },
            "warper": {
              "warper.py": {
                "functions": [
                  "subdivide_tracks",
                  "preview_video"
                ],
                "classes": [],
                "imports": [
                  "sys",
                  "os",
                  "torch",
                  "einops",
                  "einops",
                  "itertools"
                ],
                "size_lines": 105,
                "has_main": false,
                "docstring": null
              }
            },
            "video_augmenter": {
              "__init__.py": {
                "error": "f-string expression part cannot include a backslash (<unknown>, line 114)"
              }
            }
          }
        }
      },
      "ReNoise": {
        "gradio_app.py": {
          "functions": [
            "main_pipeline"
          ],
          "classes": [],
          "imports": [
            "__future__",
            "gradio",
            "spaces",
            "PIL",
            "torch",
            "src.eunms",
            "src.utils.enums_utils",
            "src.config",
            "main"
          ],
          "size_lines": 388,
          "has_main": false,
          "docstring": null
        },
        "main.py": {
          "functions": [
            "create_noise_list",
            "main",
            "run"
          ],
          "classes": [],
          "imports": [
            "pyrallis",
            "torch",
            "PIL",
            "diffusers.utils.torch_utils",
            "src.config",
            "src.utils.enums_utils"
          ],
          "size_lines": 76,
          "has_main": true,
          "docstring": null
        },
        "examples": {
          "inversion_example_sdxl.py": {
            "functions": [],
            "classes": [],
            "imports": [
              "torch",
              "PIL",
              "src.eunms",
              "src.utils.enums_utils",
              "src.config",
              "main"
            ],
            "size_lines": 43,
            "has_main": false,
            "docstring": null
          },
          "inversion_example_turbo.py": {
            "functions": [],
            "classes": [],
            "imports": [
              "torch",
              "PIL",
              "src.eunms",
              "src.utils.enums_utils",
              "src.config",
              "main"
            ],
            "size_lines": 42,
            "has_main": false,
            "docstring": null
          },
          "inversion_example_sd.py": {
            "functions": [],
            "classes": [],
            "imports": [
              "torch",
              "PIL",
              "src.eunms",
              "src.utils.enums_utils",
              "src.config",
              "main"
            ],
            "size_lines": 43,
            "has_main": false,
            "docstring": null
          }
        },
        "src": {
          "config.py": {
            "functions": [
              "__post_init__"
            ],
            "classes": [
              "RunConfig"
            ],
            "imports": [
              "dataclasses",
              "src.eunms"
            ],
            "size_lines": 48,
            "has_main": false,
            "docstring": null
          },
          "renoise_inversion.py": {
            "functions": [
              "noise_regularization",
              "auto_corr_loss",
              "patchify_latents_kl_divergence",
              "latents_kl_divergence",
              "inversion_step",
              "unet_pass",
              "patchify_tensor"
            ],
            "classes": [],
            "imports": [
              "torch",
              "torch.nn.functional"
            ],
            "size_lines": 184,
            "has_main": false,
            "docstring": null
          },
          "eunms.py": {
            "functions": [],
            "classes": [
              "Scheduler_Type",
              "Model_Type"
            ],
            "imports": [
              "enum"
            ],
            "size_lines": 15,
            "has_main": false,
            "docstring": null
          },
          "metrics": {
            "metric_util.py": {
              "functions": [
                "calculate_l2_difference",
                "calculate_psnr",
                "calculate_lpips",
                "calculate_metrics",
                "get_empty_metrics",
                "print_results"
              ],
              "classes": [],
              "imports": [
                "torch",
                "PIL",
                "torchvision",
                "src.metrics.lpips",
                "torch.nn"
              ],
              "size_lines": 61,
              "has_main": false,
              "docstring": null
            },
            "lpips.py": {
              "functions": [
                "get_network",
                "normalize_activation",
                "get_state_dict",
                "__init__",
                "set_requires_grad",
                "z_score",
                "forward",
                "__init__",
                "__init__",
                "__init__",
                "__init__",
                "__init__",
                "forward"
              ],
              "classes": [
                "BaseNet",
                "SqueezeNet",
                "AlexNet",
                "VGG16",
                "LinLayers",
                "LPIPS"
              ],
              "imports": [
                "torch",
                "torch.nn",
                "PIL",
                "itertools",
                "torchvision",
                "typing",
                "collections"
              ],
              "size_lines": 147,
              "has_main": false,
              "docstring": null
            }
          },
          "utils": {
            "enums_utils.py": {
              "functions": [
                "scheduler_type_to_class",
                "is_stochastic",
                "model_type_to_class",
                "model_type_to_model_name",
                "model_type_to_size",
                "is_float16",
                "is_sd",
                "_get_pipes",
                "get_pipes"
              ],
              "classes": [],
              "imports": [
                "torch",
                "diffusers",
                "src.eunms",
                "src.schedulers.euler_scheduler",
                "src.schedulers.lcm_scheduler",
                "src.schedulers.ddim_scheduler",
                "src.pipes.sdxl_inversion_pipeline",
                "src.pipes.sd_inversion_pipeline"
              ],
              "size_lines": 163,
              "has_main": false,
              "docstring": null
            },
            "images_utils.py": {
              "functions": [
                "read_images_in_path",
                "concatenate_images",
                "concatenate_images_single",
                "get_captions_for_images"
              ],
              "classes": [],
              "imports": [
                "PIL",
                "os",
                "torch",
                "transformers"
              ],
              "size_lines": 74,
              "has_main": false,
              "docstring": null
            }
          },
          "pipes": {
            "sdxl_inversion_pipeline.py": {
              "functions": [
                "__call__",
                "denoising_value_valid"
              ],
              "classes": [
                "SDXLDDIMPipeline"
              ],
              "imports": [
                "torch",
                "typing",
                "diffusers",
                "diffusers.utils.torch_utils",
                "diffusers.pipelines.stable_diffusion_xl.pipeline_stable_diffusion_xl",
                "src.renoise_inversion"
              ],
              "size_lines": 263,
              "has_main": false,
              "docstring": null
            },
            "sd_inversion_pipeline.py": {
              "functions": [
                "__call__"
              ],
              "classes": [
                "SDDDIMPipeline"
              ],
              "imports": [
                "torch",
                "typing",
                "diffusers",
                "diffusers.utils.torch_utils",
                "diffusers.pipelines.stable_diffusion.pipeline_stable_diffusion",
                "src.renoise_inversion"
              ],
              "size_lines": 186,
              "has_main": false,
              "docstring": null
            }
          },
          "schedulers": {
            "ddim_scheduler.py": {
              "functions": [
                "inv_step"
              ],
              "classes": [
                "DDIMSchedulerOutput",
                "MyDDIMScheduler"
              ],
              "imports": [
                "diffusers",
                "diffusers.utils",
                "diffusers.utils.torch_utils",
                "torch",
                "typing",
                "numpy"
              ],
              "size_lines": 155,
              "has_main": false,
              "docstring": null
            },
            "lcm_scheduler.py": {
              "functions": [
                "set_noise_list",
                "step",
                "inv_step"
              ],
              "classes": [
                "LCMSchedulerOutput",
                "MyLCMScheduler"
              ],
              "imports": [
                "diffusers",
                "diffusers.utils",
                "diffusers.utils.torch_utils",
                "torch",
                "typing",
                "numpy"
              ],
              "size_lines": 196,
              "has_main": false,
              "docstring": null
            },
            "euler_scheduler.py": {
              "functions": [
                "set_noise_list",
                "get_noise_to_remove",
                "scale_model_input",
                "step",
                "step_and_update_noise",
                "inv_step",
                "get_all_sigmas",
                "add_noise_off_schedule"
              ],
              "classes": [
                "EulerAncestralDiscreteSchedulerOutput",
                "MyEulerAncestralDiscreteScheduler"
              ],
              "imports": [
                "diffusers",
                "diffusers.utils",
                "torch",
                "typing",
                "numpy"
              ],
              "size_lines": 580,
              "has_main": false,
              "docstring": null
            }
          }
        }
      },
      "FigureSnippets": {
        "image_stack_figure.py": {
          "functions": [],
          "classes": [],
          "imports": [
            "rp"
          ],
          "size_lines": 48,
          "has_main": false,
          "docstring": null
        },
        "film_strip_figure.py": {
          "functions": [
            "film_strip"
          ],
          "classes": [],
          "imports": [
            "rp"
          ],
          "size_lines": 89,
          "has_main": false,
          "docstring": null
        },
        "image_stack": {
          "image_stack.py": {
            "functions": [
              "create_motion_blur_image"
            ],
            "classes": [],
            "imports": [
              "rp",
              "cv2"
            ],
            "size_lines": 76,
            "has_main": true,
            "docstring": null
          },
          "image_stack_streamlit.py": {
            "functions": [],
            "classes": [],
            "imports": [
              "streamlit",
              "numpy",
              "cv2",
              "rp",
              "image_stack"
            ],
            "size_lines": 151,
            "has_main": false,
            "docstring": null
          }
        }
      }
    }
  },
  "key_files": {
    "r.py": {
      "functions": [
        "entuple",
        "detuple",
        "enlist",
        "delist",
        "itc",
        "run_func",
        "fog",
        "scoop",
        "seq_map",
        "par_map",
        "lazy_par_map",
        "seq",
        "par",
        "pam",
        "identity",
        "list_roll",
        "list_flatten",
        "product",
        "unique",
        "tic",
        "toc",
        "ptoc",
        "ptoctic",
        "seconds",
        "millis",
        "micros",
        "nanos",
        "get_process_cwd",
        "get_current_directory",
        "set_current_directory",
        "ConditionalContext",
        "currently_running_windows",
        "currently_running_posix",
        "currently_running_mac",
        "currently_running_linux",
        "terminal_supports_ansi",
        "terminal_supports_unicode",
        "fansi_is_enabled",
        "fansi_is_disabled",
        "disable_fansi",
        "enable_fansi",
        "without_fansi",
        "_transform_fansi_arg",
        "fansi",
        "_fansi_fix",
        "_legacy_fansi",
        "fansi_print",
        "fansi_printed",
        "print_fansi_reference_table",
        "_old_fansi_syntax_highlighting",
        "fansi_syntax_highlighting",
        "fansi_highlight_path",
        "fansi_pygments",
        "fansi_pygments_demo",
        "_get_local_clipboard_string",
        "_set_local_clipboard_string",
        "string_to_clipboard",
        "_copy_text_over_terminal",
        "string_from_clipboard",
        "accumulate_clipboard_text",
        "_rgb_to_grayscale",
        "grayscale_to_rgb",
        "gauss_blur",
        "flat_circle_kernel",
        "gaussian_kernel",
        "get_max_image_dimensions",
        "get_max_video_dimensions",
        "get_min_video_dimensions",
        "get_min_image_dimensions",
        "uniform_float_color_image",
        "blend_images",
        "overlay_images",
        "laplacian_blend",
        "get_checkerboard_image",
        "with_drop_shadow",
        "with_drop_shadows",
        "with_corner_radius",
        "with_image_glow",
        "with_image_glows",
        "with_corner_radii",
        "get_alpha_outline",
        "with_alpha_outline",
        "with_alpha_outlines",
        "get_progress_bar_image",
        "image_with_progress_bar",
        "video_with_progress_bar",
        "boomerang_video",
        "_get_executable",
        "_get_rife_executable",
        "_get_esrgan_executable",
        "slowmo_video_via_rife",
        "_crop_images_to_max_or_min_size",
        "crop_images_to_max_size",
        "crop_images_to_min_size",
        "crop_images_to_max_height",
        "crop_images_to_max_width",
        "crop_images_to_min_height",
        "crop_images_to_min_width",
        "crop_image_to_square",
        "crop_images_to_square",
        "crop_image_at_random_position",
        "get_random_crop_bounds",
        "get_center_crop_bounds",
        "trim_video",
        "trim_videos",
        "_trim_videos_to_same_length",
        "trim_videos_to_max_length",
        "trim_videos_to_min_length",
        "_concatenated_videos",
        "horizontally_concatenated_videos",
        "vertically_concatenated_videos",
        "max_filter",
        "min_filter",
        "med_filter",
        "range_filter",
        "grid2d",
        "grid2d_map",
        "_auto_interp_for_resize_image",
        "_resize_image_via_skimage",
        "resize_image",
        "xy_float_images",
        "xy_torch_matrices",
        "_is_instance_of_module_class",
        "is_numpy_array",
        "is_torch_tensor",
        "is_torch_image",
        "is_torch_module",
        "_is_pandas_dataframe",
        "_is_pandas_series",
        "_is_pandas_iloc_iterable",
        "is_pil_image",
        "_is_skia_image",
        "_is_easydict",
        "random_index",
        "random_element",
        "random_choice",
        "random_permutation",
        "is_a_permutation",
        "inverse_permutation",
        "randint",
        "randints",
        "randint_complex",
        "randints_complex",
        "random_float",
        "random_float_complex",
        "random_floats",
        "random_floats_complex",
        "random_chance",
        "random_batch",
        "random_batch_up_to",
        "random_batch_with_replacement",
        "random_substring",
        "shuffled",
        "random_parallel_batch",
        "temporary_random_seed",
        "temporary_numpy_random_seed",
        "temporary_torch_random_seed",
        "seed_all",
        "temporary_seed_all",
        "run_as_new_thread",
        "run_as_new_process",
        "is_valid_url",
        "_erase_terminal_line",
        "load_files",
        "_load_files",
        "load_animated_gif",
        "load_image_from_clipboard",
        "_paste_from_clipboard",
        "_copy_image_to_clipboard_via_pyjpgclipboard",
        "_copy_image_to_clipboard_via_copykitten",
        "copy_image_to_clipboard",
        "load_image",
        "load_rgb_image",
        "load_images",
        "_load_images_via_pdf2image",
        "load_pdf_as_images",
        "get_pdf_num_pages",
        "load_image_from_file",
        "_init_pillow_heif",
        "_load_image_from_file_via_PIL",
        "_load_image_from_file_via_imageio",
        "_load_image_from_file_via_scipy",
        "_load_image_from_file_via_opencv",
        "_disable_insecure_request_warning",
        "load_image_from_url",
        "load_image_from_matplotlib",
        "_get_openexr_image_dimensions",
        "is_valid_openexr_file",
        "get_openexr_channels",
        "load_openexr_image",
        "_encode_image_to_bytes",
        "encode_image_to_bytes",
        "encode_images_to_bytes",
        "decode_images_from_bytes",
        "encode_image_to_base64",
        "encode_images_to_base64",
        "decode_image_from_base64",
        "decode_images_from_base64",
        "decode_bytes_to_image",
        "save_image",
        "save_images",
        "temp_saved_image",
        "save_image_to_imgur",
        "save_image_jpg",
        "save_image_webp",
        "save_image_avif",
        "save_image_jxl",
        "save_animated_webp",
        "save_openexr_image",
        "_get_files_from_paths",
        "convert_image_file",
        "convert_image_files",
        "text_to_speech_via_apple",
        "text_to_speech_via_google",
        "text_to_speech_voices_comparison",
        "text_to_speech",
        "_fig",
        "set_numpy_print_options",
        "load_mp3_file",
        "load_wav_file",
        "adjust_samplerate",
        "load_sound_file",
        "save_wav",
        "play_sound_from_samples",
        "play_sound_file",
        "play_sound_file_via_afplay",
        "play_sound_file_via_pygame",
        "stop_sound",
        "mp3_to_wav",
        "wav_to_mp3",
        "convert_audio_file",
        "_display_image_in_notebook_via_ipyplot",
        "_display_image_in_notebook_via_ipython",
        "add_ipython_kernel",
        "display_video",
        "_make_video_dimensions_even",
        "_display_video_via_mediapy",
        "display_video_in_notebook",
        "_display_video_in_notebook",
        "display_video_in_notebook_webp",
        "_display_downloadable_image_in_notebook_via_ipython",
        "display_image_in_notebook",
        "_image_to_html",
        "display_image",
        "with_alpha_checkerboard",
        "with_alpha_checkerboards",
        "display_alpha_image",
        "_display_image_slideshow_animated",
        "display_qr_code_in_terminal",
        "display_website_in_terminal",
        "display_image_slideshow",
        "display_color_255",
        "display_float_color",
        "bar_graph",
        "histogram_in_terminal",
        "line_graph_via_plotille",
        "line_graph_live",
        "line_graph_in_terminal",
        "line_graph",
        "display_polygon",
        "block",
        "display_update",
        "display_clear",
        "clf",
        "display_cv_color_histogram",
        "display_cv_color_histograms",
        "_minmax_indices",
        "min_valued_indices",
        "max_valued_indices",
        "min_valued_elements",
        "max_valued_elements",
        "max_valued_index",
        "min_valued_index",
        "blend",
        "iblend",
        "interp",
        "linterp",
        "matching_keys",
        "matching_indices",
        "gather",
        "pop_gather",
        "gather_vars",
        "bundle_vars",
        "gather_attrs",
        "destructure",
        "gather_args",
        "gather_args_call",
        "gather_args_wrap",
        "gather_args_bind",
        "get_current_function",
        "get_current_function_name",
        "gather_args_recursive_call",
        "replace_if_none",
        "squelch_call",
        "squelch_wrap",
        "rebind_globals_to_module",
        "globalize_locals",
        "_filter_dict_via_fzf",
        "list_to_index_dict",
        "invert_dict",
        "invert_list_to_dict",
        "dict_to_list",
        "list_set",
        "display_dict",
        "display_list",
        "display_markdown",
        "_get_carbon_url",
        "display_code_cell",
        "_muted_stdout_write",
        "suppress_console_output",
        "restore_console_output",
        "force_suppress_console_output",
        "force_restore_console_output",
        "force_suppress_warnings",
        "force_restore_warnings",
        "TemporarilySuppressConsoleOutput",
        "_translate_timezone",
        "format_date",
        "format_current_date",
        "_method_decorator_metaclass",
        "get_current_timezone",
        "rinsp",
        "_cv_initialize_cameras",
        "_cv_print_cam_props",
        "load_image_from_webcam",
        "load_webcam_stream",
        "load_image_from_screenshot_via_mss",
        "load_image_from_screenshot",
        "load_screenshot_stream",
        "_load_image_from_screenshot_via_pyscreenshot",
        "_load_image_from_webcam_in_jupyter_notebook",
        "record_mono_audio",
        "MIDI_output",
        "MIDI_control",
        "MIDI_control_precisely",
        "MIDI_jiggle_control",
        "MIDI_note_on",
        "MIDI_note_off",
        "MIDI_pitch_bend",
        "MIDI_all_notes_off",
        "MIDI_breath",
        "MIDI_input",
        "cmp_to_key",
        "sign",
        "load_pickled_value",
        "save_pickled_value",
        "string_to_text_file",
        "save_text_file",
        "text_file_to_string",
        "load_file_lines",
        "save_file_lines",
        "load_text_files",
        "append_line_to_file",
        "as_easydict",
        "as_easydicts",
        "load_json",
        "load_jsons",
        "save_json",
        "load_tsv",
        "load_parquet",
        "load_yaml_file",
        "load_yaml_files",
        "parse_yaml",
        "parse_dyaml",
        "load_dyaml_file",
        "touch_file",
        "is_iterable",
        "get_my_local_ip_address",
        "get_my_mac_address",
        "get_my_public_ip_address",
        "deepcopy_multiply",
        "assert_equality",
        "get_nested_value",
        "get_nested_attr",
        "shell_command",
        "get_system_commands",
        "_get_cached_system_commands",
        "system_command_exists",
        "add_to_env_path",
        "printed",
        "get_plt",
        "display_dot",
        "display_path",
        "_translate_offline",
        "translate",
        "sync_sorted",
        "by_number",
        "sorted_by_number",
        "sorted_by_len",
        "sorted_by_attr",
        "sorted_dict",
        "_string_with_any",
        "starts_with_any",
        "ends_with_any",
        "_contains_func_y",
        "contains_any",
        "contains_all",
        "in_any",
        "in_all",
        "contains_sort",
        "sync_shuffled",
        "full_range",
        "sine_tone_sampler",
        "triangle_tone_sampler",
        "sawtooth_tone_sampler",
        "square_tone_sampler",
        "play_tone",
        "play_semitone",
        "semitone_to_hz",
        "play_chord",
        "mini_editor",
        "get_terminal_size",
        "get_terminal_width",
        "get_terminal_height",
        "is_namespaceable",
        "is_literal",
        "clip_string_width",
        "properties_to_xml",
        "split_including_delimiters",
        "split_letters_from_digits",
        "split_camel_case",
        "split_python_tokens",
        "clamp",
        "int_clamp",
        "float_clamp",
        "get_current_exception",
        "pop_exception_traceback",
        "print_verbose_stack_trace",
        "print_stack_trace",
        "print_highlighted_stack_trace",
        "print_rich_stack_trace",
        "get_rich_traceback_string",
        "_get_stack_trace_string",
        "audio_stretch",
        "cartesian_to_polar",
        "complex_to_polar",
        "riemann_sum",
        "riemann_mean",
        "fourier",
        "discrete_fourier",
        "matrix_to_tuples",
        "perpendicular_bisector_function",
        "harmonic_analysis_via_least_squares",
        "cluster_by_key",
        "cluster_by_attr",
        "chunk_by_attr",
        "chunk_by_key",
        "cluster_filter",
        "proportion_to_digits",
        "digits_to_proportion",
        "encode_float_matrix_to_rgba_byte_image",
        "decode_float_matrix_from_rgba_byte_image",
        "print_all_git_paths",
        "is_int_literal",
        "is_string_literal",
        "indentify",
        "unindent",
        "lrstrip_all_lines",
        "search_replace_simul",
        "shorten_url",
        "unshorten_url",
        "load_gist",
        "shorten_github_url",
        "save_gist",
        "_fix_CERTIFICATE_VERIFY_FAILED_errors",
        "get_arxiv_bibtex",
        "random_namespace_hash",
        "random_passphrase",
        "latex_image",
        "display_image_in_terminal",
        "display_image_in_terminal_color",
        "display_image_in_terminal_imgcat",
        "display_video_in_terminal_color",
        "auto_canny",
        "skeletonize",
        "_skimage_skeletonize",
        "_cv_skeletonize",
        "get_edge_drawing",
        "print_latex_image",
        "_get_prompt_style",
        "_get_cdh_back_names",
        "_user_path_ans",
        "_cdh_back_query",
        "_get_cd_history",
        "_add_to_cd_history",
        "_update_cd_history",
        "_cdh_folder_is_protected",
        "_clean_cd_history",
        "set_prompt_style",
        "split_into_sublists",
        "split_into_n_sublists",
        "split_into_subdicts",
        "split_into_n_subdicts",
        "join_with_separator",
        "rotate_image",
        "rotate_images",
        "_rotate_rgb_image",
        "open_url_in_web_browser",
        "google_search_url",
        "open_google_search_in_web_browser",
        "reload_module",
        "reload_rp",
        "_print_status",
        "_eta",
        "get_all_submodule_names",
        "merged_dicts",
        "merged_prefixed_dicts",
        "merged_suffixed_dicts",
        "keys_and_values_to_dict",
        "get_source_code",
        "get_source_file",
        "edit",
        "_static_calldefs",
        "_get_object_lineno",
        "vim",
        "is_valid_python_syntax",
        "_is_valid_exeval_python_syntax",
        "is_valid_sh_syntax",
        "is_valid_bash_syntax",
        "is_valid_zsh_syntax",
        "get_default_shell",
        "_ipython_exeval_maker",
        "_parse_exeval_code",
        "exeval",
        "_display_pterm_flamechart",
        "_truncate_string_floats",
        "_pterm_exeval",
        "_rp_show_custom_line_profile",
        "get_last_line_profile_results",
        "dec2bin",
        "run_until_complete",
        "_multi_line_python_input",
        "_get_pyin_settings",
        "_load_pyin_settings_file",
        "_save_pyin_settings_file",
        "_delete_pyin_settings_file",
        "_set_session_title",
        "_get_session_title",
        "_get_default_session_title",
        "_set_default_session_title",
        "_set_pterm_theme",
        "python_input",
        "_dhistory_helper",
        "_reload_modules",
        "launch_xonsh",
        "with_line_numbers",
        "number_of_lines",
        "number_of_lines_in_terminal",
        "number_of_lines_in_file",
        "_all_files_listed_in_exception_traceback",
        "read_symlink",
        "make_symlink_absolute",
        "make_symlink_relative",
        "read_symlinks",
        "make_symlinks_relative",
        "make_symlinks_absolute",
        "symlink_is_broken",
        "make_hardlink",
        "replace_symlink_with_hardlink",
        "replace_symlinks_with_hardlinks",
        "make_symlink",
        "is_symbolic_link",
        "symlink_move",
        "_guess_mimetype",
        "is_image_file",
        "is_video_file",
        "is_sound_file",
        "is_utf8_file",
        "display_file_tree",
        "_line_numbered_string",
        "_vimore",
        "_load_text_from_file_or_url",
        "_warnings_on",
        "_warnings_off",
        "_warnings_are_off",
        "_mv",
        "_absolute_path_ans",
        "_relative_path_ans",
        "_rma",
        "_cpah",
        "_get_env_info",
        "_view_image_via_textual_imageview",
        "_ISM",
        "_which",
        "_whiches",
        "_ism_whiches",
        "_view_with_pyfx",
        "_view_json_via_jtree",
        "_view_interactive_json",
        "_get_processor_name",
        "_display_columns",
        "_input_select_multiple_history_multiline",
        "_input_select_multiple_paragraphs",
        "_autocomplete_lss_name",
        "_input_select_multiple_history",
        "_pterm_fuzzy_cd",
        "_ric_current_candidate_fuzzy_matches",
        "get_number_of_github_gists",
        "_get_all_github_gists_info",
        "_download_rp_gists",
        "_input_select_rp_gists",
        "_pterm_cd",
        "_profile_vim_startup_plugins",
        "_view_markdown_in_terminal",
        "_get_function_names",
        "_convert_powerpoint_file",
        "_write_default_gitignore",
        "_add_pterm_prefix_shortcut",
        "_add_pterm_command_shortcuts",
        "_get_pterm_verbose",
        "no_gc",
        "pseudo_terminal",
        "set_process_title",
        "get_process_title",
        "parenthesizer_automator",
        "timeout",
        "save_animated_png",
        "battery_percentage",
        "battery_plugged_in",
        "battery_seconds_remaining",
        "total_disc_bytes",
        "human_readable_file_size",
        "string_to_file_size",
        "get_file_size",
        "num_args",
        "_rich_inspect",
        "_rich_print",
        "pretty_print",
        "repr_kwargs_dict",
        "repr_multiline",
        "repr_vars",
        "has_len",
        "as_example_comment",
        "string_transpose",
        "print_to_string",
        "print_lines",
        "fansi_print_lines",
        "reduced_row_echelon_form",
        "all_rolls",
        "circular_diff",
        "circular_quotient",
        "circular_convolve",
        "circular_cross_correlate",
        "circular_auto_correlate",
        "circular_gaussian_blur",
        "circular_extrema_indices",
        "circ_diff_inverse",
        "gcd",
        "lcm",
        "product",
        "ncr",
        "get_process_memory",
        "get_process_username",
        "get_username",
        "get_process_id",
        "get_process_exists",
        "get_process_start_date",
        "kill_process",
        "kill_processes",
        "search_processes",
        "regex_match",
        "regex_replace",
        "ring_terminal_bell",
        "_pterm",
        "clear_terminal_screen",
        "set_cursor_to_bar",
        "set_cursor_to_box",
        "set_cursor_to_underscore",
        "line_number",
        "is_number",
        "_refresh_autocomplete_module_list",
        "line_join",
        "powerset",
        "print_fix",
        "remove_all_whitespace",
        "cv_bgr_rgb_swap",
        "cv_imshow",
        "_cv_helper",
        "_init_contour_class",
        "cv_find_contours",
        "cv_simplify_contour",
        "cv_distance_to_contour",
        "cv_closest_contour_point",
        "cv_closest_contour",
        "cv_draw_contours",
        "cv_draw_contour",
        "cv_draw_rectangle",
        "cv_contour_length",
        "cv_contour_area",
        "cv_draw_circle",
        "cv_draw_circles",
        "cv_draw_arrow",
        "cv_draw_arrows",
        "cv_line_graph",
        "rgb_histogram_image",
        "byte_image_histogram",
        "cv_apply_affine_to_image",
        "cv_manually_selected_contours",
        "cv_manually_selected_contour",
        "cv_distance_transform",
        "cosine_similarity",
        "fourier_descriptor",
        "fourier_descriptor_distance",
        "fourier_descriptor_similarity",
        "cv_contour_match",
        "cv_best_match_contour",
        "cv_best_match_contours",
        "_cv_morphological_helper",
        "cv_erode",
        "cv_dilate",
        "cv_gauss_blur",
        "is_opaque_image",
        "is_transparent_image",
        "_alpha_weighted_rgba_image_func",
        "rotation_matrix",
        "loop_direction_2d",
        "is_clockwise",
        "is_counter_clockwise",
        "cv_make_clockwise",
        "scatter_plot",
        "line_split",
        "line_join",
        "append_uniform_row",
        "append_zeros_row",
        "append_ones_row",
        "append_uniform_column",
        "append_zeros_column",
        "append_ones_column",
        "squared_euclidean_distance",
        "euclidean_distance",
        "differential_euclidean_distances",
        "cumulative_euclidean_distances",
        "evenly_split_path",
        "is_complex_vector",
        "is_points_array",
        "is_cv_contour",
        "_points_array_to_complex_vector",
        "_points_array_to_cv_contour",
        "_complex_vector_to_points_array",
        "_complex_vector_to_cv_contour",
        "_cv_contour_to_points_array",
        "_cv_contour_to_complex_vector",
        "as_complex_vector",
        "as_points_array",
        "as_cv_contour",
        "contours_to_image",
        "contour_to_image",
        "squared_distance_matrix",
        "distance_matrix",
        "closest_points",
        "least_squares_euclidean_affine",
        "least_squares_affine",
        "translation_affine",
        "rotation_affine_2d",
        "inverse_affine",
        "identity_affine",
        "combined_affine",
        "apply_affine",
        "icp_least_squares_euclidean_affine",
        "is_euclidean_affine_matrix",
        "is_affine_matrix",
        "euclidean_affine_to_complex_linear_coeffs",
        "complex_linear_coeffs_to_euclidean_affine",
        "_torch_tensor_to_bytes_for_hashing",
        "handy_hash",
        "_set_hash",
        "_dict_hash",
        "_list_hash",
        "_tuple_hash",
        "_slice_hash",
        "args_hash",
        "memoized",
        "memoized_property",
        "_omni_load_animated_image",
        "_omni_save_animated_image",
        "_omni_save_default_extension",
        "_omni_load",
        "_omni_save",
        "file_cache_call",
        "file_cache_wrap",
        "_get_hash",
        "get_md5_hash",
        "get_sha256_hash",
        "_labeled_image_text_to_image",
        "labeled_image",
        "_images_are_all_same_size",
        "labeled_images",
        "labeled_videos",
        "_cv_char_to_image",
        "_cv_text_to_image_monospace",
        "cv_text_to_image",
        "_single_line_cv_text_to_image",
        "_slow_pil_text_to_image",
        "as_rgba_float_color",
        "as_rgb_float_color",
        "as_rgba_float_colors",
        "as_rgb_float_colors",
        "_get_font_path",
        "get_font_supported_chars",
        "pil_text_to_image",
        "skia_text_to_image",
        "skia_stamp_image",
        "download_google_font",
        "download_font",
        "download_fonts",
        "download_google_fonts",
        "get_downloaded_fonts",
        "download_all_google_fonts",
        "_get_file_path",
        "strip_file_extension",
        "strip_file_extensions",
        "get_file_extension",
        "get_file_extensions",
        "with_file_extension",
        "with_file_extensions",
        "with_file_name",
        "with_folder_name",
        "get_path_name",
        "get_path_names",
        "get_relative_path",
        "get_relative_paths",
        "get_absolute_path",
        "_detuple_paths",
        "get_absolute_paths",
        "has_file_extension",
        "date_modified",
        "date_created",
        "date_accessed",
        "get_all_paths",
        "get_all_files",
        "get_all_image_files",
        "get_all_runnable_python_files",
        "get_all_folders",
        "get_subfolders",
        "_os_listdir_files",
        "folder_is_empty",
        "get_random_file",
        "get_random_files",
        "get_random_folders",
        "get_random_folder",
        "_has_globbing_characters",
        "rp_iglob",
        "rp_glob",
        "fractional_integral_in_frequency_domain",
        "best_flann_dict_matches",
        "knn_clusters",
        "r_transform",
        "r_transform_inverse",
        "horizontally_concatenated_images",
        "vertically_concatenated_images",
        "grid_concatenated_images",
        "tiled_images",
        "tiled_videos",
        "vertically_flipped_image",
        "horizontally_flipped_image",
        "least_squares_regression_line_coeffs",
        "magnitude",
        "normalized",
        "_get_javascript_runtime",
        "javascript",
        "javascript_console",
        "_get_byte_to_binary_grayscale_image_floyd_steinburg_dithering_function",
        "_binary_floyd_steinburg_dithering",
        "is_image",
        "is_grayscale_image",
        "is_rgb_image",
        "is_rgba_image",
        "_grayscale_image_to_grayscale_image",
        "_grayscale_image_to_rgb_image",
        "_grayscale_image_to_rgba_image",
        "_rgb_image_to_grayscale_image",
        "_rgb_image_to_rgb_image",
        "_rgb_image_to_rgba_image",
        "_rgba_image_to_grayscale_image",
        "_rgba_image_to_rgb_image",
        "_rgba_image_to_rgba_image",
        "as_grayscale_image",
        "as_rgb_image",
        "as_rgba_image",
        "is_float_image",
        "is_byte_image",
        "is_binary_image",
        "_clamp_float_image",
        "_float_image_dtype",
        "_float_image_to_float_image",
        "_float_image_to_byte_image",
        "_float_image_to_binary_image",
        "_byte_image_to_float_image",
        "_byte_image_to_byte_image",
        "_byte_image_to_binary_image",
        "_binary_image_to_float_image",
        "_binary_image_to_byte_image",
        "_binary_image_to_binary_image",
        "as_float_image",
        "as_byte_image",
        "as_binary_image",
        "_images_conversion",
        "as_float_images",
        "as_byte_images",
        "as_binary_images",
        "as_rgb_images",
        "as_rgba_images",
        "as_grayscale_images",
        "_common_image_channel_converter",
        "_common_image_dtype_converter",
        "_common_image_converter",
        "random_rgb_byte_color",
        "random_rgba_byte_color",
        "random_grayscale_byte_color",
        "random_rgb_float_color",
        "random_rgba_float_color",
        "random_grayscale_float_color",
        "random_rgb_binary_color",
        "random_rgba_binary_color",
        "random_grayscale_binary_color",
        "random_hex_color",
        "random_rgb_byte_colors",
        "random_rgba_byte_colors",
        "random_grayscale_byte_colors",
        "random_rgb_float_colors",
        "random_rgba_float_colors",
        "random_grayscale_float_colors",
        "random_rgb_binary_colors",
        "random_rgba_binary_colors",
        "random_grayscale_binary_colors",
        "random_hex_colors",
        "is_color",
        "is_binary_color",
        "is_byte_color",
        "is_float_color",
        "hex_color_to_byte_color",
        "hex_color_to_float_color",
        "byte_color_to_hex_color",
        "byte_color_to_float_color",
        "float_color_to_byte_color",
        "float_color_to_hex_color",
        "float_color_to_byte_color",
        "float_colors_to_byte_colors",
        "float_colors_to_hex_colors",
        "byte_colors_to_hex_colors",
        "byte_colors_to_float_colors",
        "hex_colors_to_byte_colors",
        "hex_colors_to_float_colors",
        "_altbw",
        "_get_rp_color",
        "color_name_to_float_color",
        "color_name_to_byte_color",
        "color_name_to_hex_color",
        "get_color_hue",
        "get_color_saturation",
        "get_color_brightness",
        "get_image_dimensions",
        "get_image_height",
        "get_image_width",
        "get_video_height",
        "get_video_heights",
        "get_video_width",
        "get_video_widths",
        "running_in_ipython",
        "get_notebook_name",
        "get_notebook_path",
        "launch_terminal_in_colab",
        "running_in_google_colab",
        "get_cloud_provider",
        "running_in_gcp",
        "_is_python_exe_root",
        "running_in_ssh",
        "running_in_mamba",
        "running_in_conda",
        "running_in_venv",
        "get_conda_name",
        "get_venv_name",
        "running_in_tmux",
        "running_in_docker",
        "split_tensor_into_regions",
        "apply_tensor_mapping",
        "bordered_image_solid_color",
        "bordered_images_solid_color",
        "get_principle_components",
        "cv_box_blur",
        "_highlighted_query_results",
        "_rinsp_search_helper",
        "rinsp_search",
        "as_numpy_array",
        "input_multiline",
        "input_conditional",
        "input_yes_no",
        "input_integer",
        "input_default",
        "input_select",
        "input_select_multiple",
        "get_youtube_video_url",
        "_is_youtube_video_url",
        "get_youtube_video_transcript",
        "download_youtube_video",
        "_get_youtube_video_data_via_embeddify",
        "get_youtube_video_title",
        "get_youtube_video_thumbnail",
        "_moviepy_VideoFileClip",
        "_get_video_file_duration_via_moviepy",
        "get_video_file_duration",
        "_get_video_file_framerate_via_moviepy",
        "_get_video_file_framerate_via_ffprobe",
        "get_video_file_framerate",
        "_load_video_stream",
        "load_video_stream",
        "load_video_streams",
        "load_video",
        "load_videos",
        "save_video_avi",
        "_get_default_video_path",
        "_as_video_bitrate",
        "_as_video_quality",
        "_cv_save_video_mp4",
        "_cv_save_video_mp4",
        "set_save_video_mp4_default_backend",
        "save_video_mp4",
        "save_video_gif_via_pil",
        "convert_to_gif_via_ffmpeg",
        "convert_to_gifs_via_ffmpeg",
        "save_video",
        "encode_video_to_bytes",
        "decode_video_from_bytes",
        "add_audio_to_video_file",
        "change_video_file_framerate",
        "change_video_file_framerates",
        "concat_mp4_files",
        "directory_exists",
        "is_empty_folder",
        "file_exists",
        "path_exists",
        "rename_path",
        "move_path",
        "swap_paths",
        "delete_file",
        "delete_folder",
        "delete_symlink",
        "delete_path",
        "_delete_paths_helper",
        "delete_paths",
        "delete_files",
        "delete_folders",
        "copy_path",
        "copy_to_folder",
        "copy_directory",
        "get_home_directory",
        "copy_file",
        "copy_paths",
        "get_path_parent",
        "get_paths_parents",
        "make_directory",
        "make_parent_directory",
        "take_directory",
        "make_directories",
        "delete_all_paths_in_directory",
        "delete_all_files_in_directory",
        "path_join",
        "path_split",
        "get_unique_copy_path",
        "get_cutscene_frame_numbers",
        "remove_duplicate_frames",
        "send_text_message",
        "shift_image",
        "roll_image",
        "crop_image",
        "crop_images",
        "crop_videos",
        "crop_videos_to_min_size",
        "crop_videos_to_max_size",
        "crop_image_zeros",
        "cv_contour_to_segment",
        "whiten_points_covariance",
        "visible_string_ljust",
        "visible_string_rjust",
        "visible_string_center",
        "make_string_rectangular",
        "string_is_rectangular",
        "horizontally_concatenated_strings",
        "vertically_concatenated_strings",
        "wrap_string_to_width",
        "bordered_string",
        "simple_boxed_string",
        "strip_ansi_escapes",
        "visible_string_length",
        "string_width",
        "string_height",
        "_pad_string_height",
        "pad_to_same_number_of_lines",
        "pad_string_to_dims",
        "prime_number_generator",
        "edit_distance",
        "edit_image_in_terminal",
        "timeout",
        "_get_inflect_engine",
        "is_plural_noun",
        "is_singular_noun",
        "is_singular_noun_of",
        "is_plural_noun_of",
        "plural_noun",
        "singular_noun",
        "number_to_words",
        "words_to_number",
        "_get_parts_of_speech_via_nltk",
        "_nltk_wordnet_is_installed",
        "_make_sure_nltk_has_wordnet_installed",
        "is_a_verb",
        "is_an_adjective",
        "is_a_noun",
        "get_all_english_words",
        "_get_all_english_words_lowercase",
        "is_an_english_word",
        "split_sentences",
        "_ensure_punkt_downloaded",
        "_get_punkt_languages",
        "connected_to_internet",
        "_string_pager_via_pypager",
        "_string_pager_via_click",
        "_string_pager_via_less",
        "string_pager",
        "_get_pynput_mouse_controller",
        "get_mouse_position",
        "get_mouse_x",
        "get_mouse_y",
        "set_mouse_position",
        "record_mouse_positions",
        "playback_mouse_positions",
        "mouse_left_click",
        "mouse_right_click",
        "mouse_middle_click",
        "mouse_left_press",
        "mouse_right_press",
        "mouse_middle_press",
        "mouse_left_release",
        "mouse_right_release",
        "mouse_middle_release",
        "get_monitor_resolution",
        "get_number_of_monitors",
        "unicode_loading_bar",
        "get_box_char_bar_graph",
        "get_scope",
        "_get_visible_scope",
        "get_all_importable_module_names",
        "get_module_path_from_name",
        "get_module_path",
        "is_a_module",
        "date_to_epoch_seconds",
        "date_to_epoch_millis",
        "epoch_seconds_to_date",
        "epoch_millis_to_date",
        "get_current_date",
        "string_to_date",
        "open_file_with_default_application",
        "mean",
        "median",
        "norm_cdf",
        "norm_pdf",
        "inverse_norm_cdf",
        "s3_list_objects",
        "is_s3_url",
        "is_gs_url",
        "download_url",
        "download_urls",
        "download_url_to_cache",
        "download_urls_to_cache",
        "get_cache_file_path",
        "get_cache_file_paths",
        "debug",
        "_tensorify",
        "is_a_matrix",
        "is_a_square_matrix",
        "square_matrix_size",
        "prime_factors",
        "set_os_volume",
        "fuzzy_string_match",
        "get_english_synonyms_via_nltk",
        "_datamuse_words_request",
        "get_english_synonyms_via_datamuse",
        "get_english_related_words_via_datamuse",
        "get_english_antonyms_via_datamuse",
        "get_english_rhymes_via_datamuse",
        "get_english_synonyms",
        "fibonacci",
        "inverse_fibonacci",
        "graham_scan",
        "convex_hull",
        "_point_on_edge",
        "_edges_intersect",
        "paths_intersect",
        "_edge_intersection_positions",
        "path_intersections",
        "path_intersects_point",
        "reduce_wrap",
        "longest_common_prefix",
        "longest_common_suffix",
        "longest_common_substring",
        "input_keypress",
        "input_select_path",
        "input_select_folder",
        "input_select_file",
        "input_select_serial_device_id",
        "temporary_file_path",
        "python_2_to_3",
        "strip_python_docstrings",
        "strip_python_comments",
        "strip_trailing_whitespace",
        "delete_empty_lines",
        "propagate_whitespace",
        "_get_ryan_rprc_path",
        "_set_ryan_rprc",
        "get_vim_python_executable",
        "_vim_pip_install",
        "_set_ryan_ranger_config",
        "_set_ryan_vimrc",
        "_set_ryan_xonshrc",
        "_sort_imports_via_isort",
        "clean_imports_via_unimport",
        "_set_ryan_tmux_conf",
        "_run_sys_command",
        "_ensure_installed",
        "_brew_install",
        "_ensure_brew_installed",
        "_ensure_wget_installed",
        "_ensure_curl_installed",
        "_ensure_rclone_installed",
        "_ensure_ffmpeg_installed",
        "_ensure_claudecode_installed",
        "_ensure_gemini_cli_installed",
        "_ensure_snap_installed",
        "_ensure_nvtop_installed",
        "_ensure_zsh_installed",
        "_install_oh_my_zsh",
        "_ensure_viddy_installed",
        "_ensure_tmux_installed",
        "_ensure_npm_installed",
        "_ensure_nvm_installed",
        "_ensure_node_installed",
        "_ensure_git_installed",
        "_install_ollama",
        "_ensure_ollama_server_running",
        "_load_ryan_lazygit_config",
        "_install_lazygit",
        "_ensure_filebrowser_installed",
        "_ensure_cog_installed",
        "_run_bashtop",
        "_disable_terminal_mouse_reporting",
        "_terminal_move_cursor_to_top_left",
        "_terminal_move_cursor_to_bottom_left",
        "_terminal_move_cursor_to_bottom_and_new_line",
        "_run_ai_cli_coder",
        "_run_claude_code",
        "_run_gemini_cli",
        "_configure_filebrowser",
        "_run_filebrowser",
        "get_port_is_taken",
        "get_next_free_port",
        "get_all_taken_ports",
        "get_process_using_port",
        "compress_bytes",
        "decompress_bytes",
        "can_convert_object_to_bytes",
        "_dill_dumps",
        "object_to_bytes",
        "object_to_base64",
        "base64_to_object",
        "bytes_to_object",
        "encode_bytes_to_image",
        "decode_image_to_bytes",
        "_web_copy",
        "web_copy",
        "web_paste",
        "tmux_copy",
        "tmux_paste",
        "local_copy",
        "local_paste",
        "_run_tmux_command",
        "tmux_get_current_pane_index",
        "tmux_get_current_window_index",
        "tmux_get_current_window_name",
        "tmux_get_current_session_index",
        "tmux_get_current_session_name",
        "_get_all_tmux_windows",
        "_tmux_close_windows",
        "tmux_close_windows_to_left",
        "tmux_close_windows_to_right",
        "tmux_close_other_windows",
        "tmux_close_other_sessions",
        "tmux_detach_other_clients",
        "_get_current_tmux_client",
        "_get_all_tmux_clients",
        "tmux_get_all_session_names",
        "tmux_get_unique_session_name",
        "tmux_get_current_session_name",
        "tmux_session_exists",
        "tmux_kill_session",
        "tmux_kill_sessions",
        "tmux_type_in_all_panes",
        "tmux_get_scrollback",
        "_tmux_reset_all_panes",
        "tmuxp_create_session_yaml",
        "tmuxp_launch_session_from_yaml",
        "_extract_code_cells_from_ipynb",
        "exec_ipynb",
        "_get_jupyter_output_widget",
        "extract_code_from_ipynb",
        "_get_facebook_client",
        "send_facebook_message",
        "get_all_facebook_messages",
        "explore_torch_module",
        "record_torch_module_forward_stats",
        "visualize_pytorch_model",
        "get_sinusoidal_positional_encodings",
        "inverted_color",
        "inverted_image",
        "inverted_images",
        "make_zip_file_from_folder",
        "extract_zip_file",
        "_extract_archive_via_pyunpack",
        "_maybe_unbury_folder",
        "get_normal_map",
        "sobel_edges",
        "currently_in_a_tty",
        "currently_running_desktop",
        "_maybe_display_string_in_pager",
        "_fd",
        "get_image_file_dimensions",
        "get_video_file_shape",
        "get_video_file_num_frames",
        "get_video_file_height",
        "get_video_file_width",
        "_hsv_to_rgb_via_numpy",
        "_hsv_to_rgb_via_numba",
        "_rgb_to_hsv_via_numpy",
        "_rgb_to_hsv_via_numba",
        "hsv_to_rgb",
        "rgb_to_hsv",
        "get_image_hue",
        "get_image_saturation",
        "get_image_value",
        "get_image_red",
        "get_image_green",
        "get_image_blue",
        "_with_image_channel",
        "with_image_red",
        "with_image_green",
        "with_image_blue",
        "with_image_hue",
        "shift_image_hue",
        "with_image_saturation",
        "with_image_brightness",
        "hsv_to_rgb_float_color",
        "float_color_to_ansi256",
        "get_rgb_byte_color_identity_mapping_image",
        "apply_colormap_to_image",
        "zalgo_text",
        "big_ascii_text",
        "bytes_to_file",
        "file_to_bytes",
        "file_to_base64",
        "file_to_object",
        "object_to_file",
        "bytes_to_base64",
        "base64_to_bytes",
        "bytes_to_base16",
        "base16_to_bytes",
        "func_call_to_shell_command",
        "_call_from_base64_string",
        "_launch_ranger",
        "curl",
        "curl_bytes",
        "get_computer_name",
        "cv_image_filter",
        "random_rotation_matrix",
        "wordcloud_image",
        "display_pandas_correlation_heatmap",
        "view_table",
        "launch_visidata",
        "_write_to_pterm_hist",
        "_prepare_cv_image",
        "cv_resize_image",
        "_size_to_height_width",
        "cv_resize_images",
        "resize_videos",
        "skia_resize_image",
        "torch_resize_image",
        "torch_resize_images",
        "torch_remap_image",
        "apply_uv_map",
        "get_identity_uv_map",
        "validate_tensor_shapes",
        "_test_validate_tensor_shapes",
        "_ceil",
        "_floor",
        "_round",
        "_sin",
        "_cos",
        "_tan",
        "_exp",
        "_log",
        "_log10",
        "_sqrt",
        "_abs",
        "_pow",
        "_fft",
        "_ifft",
        "_tanh",
        "_sigmoid",
        "_relu",
        "_softmax",
        "_log2",
        "_asin",
        "_acos",
        "_atan",
        "_clip",
        "_nan_to_num",
        "_clamp",
        "_atan2",
        "_sinh",
        "_cosh",
        "_sign",
        "_degrees",
        "_radians",
        "_create_array_like",
        "_zeros_like",
        "_ones_like",
        "_randn_like",
        "_rand_like",
        "_maximum",
        "_minimum",
        "_max",
        "_min",
        "_sum",
        "_mean",
        "_copy_tensor",
        "get_bilinear_weights",
        "torch_scatter_add_image",
        "accumulate_flows",
        "resize_image_to_hold",
        "resize_image_to_fit",
        "resize_images_to_hold",
        "resize_images_to_fit",
        "resize_video_to_hold",
        "resize_video_to_fit",
        "resize_videos_to_fit",
        "resize_videos_to_hold",
        "resize_images_to_max_size",
        "resize_images_to_min_size",
        "resize_videos_to_min_size",
        "resize_videos_to_max_size",
        "_iterfzf",
        "cv_inpaint_image",
        "cv_floodfill_mask",
        "get_path_inode",
        "_is_dir_entry",
        "_get_all_paths_fast",
        "breadth_first_path_iterator",
        "gpt3",
        "deepgenx",
        "_get_openai_api_key",
        "_run_openai_llm",
        "run_llm_api",
        "minify_python_code",
        "image_to_text",
        "cv_equalize_histogram",
        "compose_rgb_image",
        "compose_rgba_image",
        "compose_image_from_channels",
        "extract_image_channels",
        "extract_alpha_channel",
        "apply_image_function_per_channel",
        "with_alpha_channel",
        "with_image_rgb",
        "play_the_matrix_animation",
        "_string_diff_helper",
        "dunk_string_diff",
        "view_string_diff",
        "vim_string_diff",
        "vim_paste",
        "vim_copy",
        "zip_folder_to_bytes",
        "web_paste_path",
        "_paste_path_from_bundle",
        "web_copy_path",
        "_copy_path_to_bundle",
        "get_all_local_ip_addresses",
        "ip_to_mac_address",
        "ip_to_host_name",
        "get_mac_address_vendor",
        "PynputCasette",
        "find_and_replace_text_files",
        "_fart",
        "import_all_submodules",
        "dns_lookup",
        "_fdt_for_command_line",
        "_fzf_multi_grep",
        "unwarped_perspective_image",
        "unwarped_perspective_contour",
        "_pip_import_depth_pro",
        "_get_depth_pro_model",
        "run_depth_pro",
        "_get_cotracker_model",
        "run_cotracker",
        "run_tapnet",
        "_ensure_tapnet_installed",
        "_pip_import_pyflow",
        "get_optical_flow_via_pyflow",
        "cv_optical_flow",
        "calculate_flows",
        "optical_flow_to_image",
        "optical_flow_to_arrow_grid",
        "cv_remap_image",
        "_get_apriltag_detector",
        "detect_apriltags",
        "get_apriltag_image",
        "get_apriltag_images",
        "_display_filetype_size_histogram",
        "_nbca",
        "clear_jupyter_notebook_outputs",
        "_initialize_bokeh",
        "line_graph_via_bokeh",
        "histogram_via_bokeh",
        "get_git_branch",
        "get_git_is_dirty",
        "get_git_remote_url",
        "get_current_git_hash",
        "get_git_commit_message",
        "get_git_commit_date",
        "is_a_git_repo",
        "get_git_repo_root",
        "_distill_github_url",
        "_get_repo_name_from_url",
        "git_clone",
        "git_pull",
        "get_git_info",
        "get_git_date_modified",
        "select_git_commit",
        "_autoformat_python_code_via_black",
        "autoformat_python_via_black_macchiato",
        "autoformat_html_via_bs4",
        "add_trailing_commas",
        "autoformat_json",
        "as_numpy_images",
        "as_pil_image",
        "as_pil_images",
        "as_numpy_image",
        "as_numpy_video",
        "as_numpy_videos",
        "as_torch_videos",
        "as_torch_images",
        "as_torch_image",
        "load_safetensors",
        "save_safetensors",
        "_get_select_torch_device_lock_file",
        "select_torch_device",
        "_torch_device_to_index",
        "_waste_gpu",
        "waste_gpus",
        "set_cuda_visible_devices",
        "get_cuda_visible_devices",
        "run_removestar",
        "qualify_imports",
        "_qualify_imports",
        "get_star_modules",
        "remove_fstrings",
        "refactor_flynt",
        "file_line_iterator",
        "_file_line_gen",
        "_reverse_file_line_gen",
        "get_system_fonts",
        "resize_list",
        "resize_lists",
        "resize_lists_to_max_len",
        "resize_lists_to_min_len",
        "resize_list_to_fit",
        "resize_lists_to_fit",
        "list_transpose",
        "dict_transpose",
        "list_dict_transpose",
        "broadcast_lists",
        "broadcast_kwargs",
        "dict_walk",
        "monkey_patch",
        "_inline_rp_code",
        "get_free_ram",
        "get_total_ram",
        "get_used_ram",
        "_init_nvml",
        "_get_gpu_memory_info",
        "_get_gpu_handle",
        "get_gpu_uuid",
        "get_gpu_count",
        "get_visible_gpu_ids",
        "get_all_gpu_ids",
        "get_gpu_ids_used_by_process",
        "get_gpu_pids",
        "get_free_vram",
        "get_total_vram",
        "get_used_vram",
        "get_gpu_with_most_free_vram",
        "get_gpu_name",
        "get_vram_used_by_current_process",
        "get_gpu_temperature",
        "get_gpu_utilization",
        "print_gpu_summary",
        "print_notebook_gpu_summary",
        "_get_kernel_to_pid_mapping",
        "_get_all_notebook_sessions_via_ipybname",
        "print_process_info",
        "type_string_with_keyboard",
        "delaunay_interpolation_weights",
        "get_total_disk_space",
        "get_used_disk_space",
        "get_free_disk_space",
        "_ensure_uv_installed",
        "pip_install",
        "update_rp",
        "module_exists",
        "pip_install_multiple",
        "pip_import",
        "_import_module",
        "git_import",
        "check_pip_requirements",
        "get_mask_iou",
        "fuzzy_match",
        "get_only",
        "killport",
        "helper",
        "local_toc",
        "reset_timer",
        "__init__",
        "__enter__",
        "__exit__",
        "__init__",
        "__enter__",
        "__exit__",
        "__init__",
        "__enter__",
        "__exit__",
        "wrapper",
        "__init__",
        "_get_value",
        "_get_name",
        "__enter__",
        "__exit__",
        "get_accumulation_string",
        "helper",
        "width",
        "height",
        "_load_file",
        "skip_filter",
        "__init__",
        "__getitem__",
        "__len__",
        "_save_image",
        "_convert_image",
        "read",
        "loop_wrapper",
        "save_video",
        "__init__",
        "_convert_content",
        "_convert_content_grid",
        "_update",
        "display",
        "clear",
        "update",
        "grid_update",
        "row_update",
        "display_help",
        "zoom_crop_origin",
        "stop_autoplay_on_keypress",
        "plot",
        "handler",
        "is_comprehension",
        "maybe_add_varkw",
        "maybe_replace_varargs",
        "wrapper",
        "wrapper",
        "wrapper",
        "decorator",
        "wrapper",
        "format_string",
        "__init_subclass__",
        "get_form",
        "as_form",
        "is_form",
        "human_to_iana",
        "iana_to_tzinfo",
        "iana_to_human",
        "tzinfo_to_iana",
        "human_to_tzinfo",
        "tzinfo_to_human",
        "is_iana",
        "is_human",
        "is_tzinfo",
        "human_to_num_bytes",
        "num_bytes_to_human",
        "is_num_bytes",
        "is_human",
        "print",
        "linerino",
        "parent_class_names",
        "get_full_class_name",
        "get_parent_hierarchy",
        "format_parent_hierarchy",
        "is_dictlike",
        "errortext",
        "list_cap_props",
        "take_photo",
        "handle_key_colons",
        "split_colon_keys",
        "parse_dyaml_junctions",
        "expand_comma_keys",
        "apply_deltas_from_junctions",
        "junctions_to_dict",
        "parse_dyaml",
        "test_parse_dyaml_junctions",
        "update_sys_commands",
        "translate",
        "sorting_key",
        "new_key",
        "cmp",
        "main",
        "get_all_pygments_tokens",
        "get_all_token_strings",
        "linear_function",
        "count_leading",
        "main",
        "formula_as_file",
        "width",
        "height",
        "_helper",
        "matches",
        "unique",
        "task",
        "in_tokens",
        "helper",
        "generator",
        "fansi_progress",
        "display_eta",
        "out",
        "__init__",
        "__call__",
        "__iter__",
        "__len__",
        "ipython_exeval",
        "__init__",
        "parse",
        "__str__",
        "__repr__",
        "__eq__",
        "replace",
        "mli",
        "_load_pyin_settings_from_dict",
        "__init__",
        "get_all_function_names",
        "_get_function_name",
        "__init__",
        "update",
        "__hash__",
        "process_line",
        "print_line",
        "get_stats_string",
        "highlight_child",
        "localized_path",
        "run",
        "run_and_read_all",
        "run_and_parse_first_match",
        "get_nvidia_driver_version",
        "get_gpu_info",
        "get_running_cuda_version",
        "get_cudnn_version",
        "get_nvidia_smi",
        "get_platform",
        "get_mac_version",
        "get_windows_version",
        "get_lsb_version",
        "check_release_file",
        "get_os",
        "squelch",
        "get_env_info",
        "update",
        "refresh",
        "process_paragraph",
        "is_a_match",
        "joined_names",
        "load_page",
        "__init__",
        "__enter__",
        "__exit__",
        "_parenthesizer_automator",
        "timeout_handler",
        "get_file_size",
        "get_folder_size",
        "postprocess",
        "normalize_unit",
        "pretty_lines",
        "patch",
        "reverse",
        "mouse_callback",
        "distance",
        "on_mouse_move",
        "on_mouse_down",
        "on_key_press",
        "on_mouse_move",
        "on_mouse_down",
        "on_key_press",
        "complex_descriptors",
        "conv_circ",
        "complex_descriptor",
        "ryan_match",
        "point_cloud_angle",
        "__init__",
        "__hash__",
        "__eq__",
        "__repr__",
        "__init__",
        "__setitem__",
        "__delitem__",
        "__getitem__",
        "__iter__",
        "__contains__",
        "fallback",
        "memoized_function",
        "memoized_property",
        "decorator",
        "__init__",
        "__get__",
        "__new__",
        "instance_cache",
        "horizontally_concatenated_images",
        "_parse_origin_to_pixels",
        "get_urls",
        "fetch_data",
        "main",
        "get",
        "recursion_helper",
        "is_hidden",
        "_has_if_name_main",
        "__init__",
        "_settings_hash",
        "__getitem__",
        "__setitem__",
        "__len__",
        "__iter__",
        "_keyify",
        "neighbors",
        "helper",
        "minmax",
        "dithering_gray",
        "converter",
        "blend_colors",
        "__init__",
        "_get_html",
        "_init_update",
        "display",
        "update",
        "f",
        "match",
        "keys",
        "get",
        "helper",
        "is_valid_integer_string",
        "on_fail",
        "condition",
        "display_more_options",
        "display_query_options",
        "display_options_with_pager",
        "_stringify",
        "load",
        "load",
        "__init__",
        "write_frame",
        "finish",
        "load_frame",
        "run",
        "delfunc",
        "do_copy",
        "is_non_str_iterable",
        "apply_suffix_to_name",
        "apply_suffix_to_path",
        "preprocess_frame",
        "sim_score",
        "helper",
        "__init__",
        "handle_timeout",
        "__enter__",
        "__exit__",
        "wrapper",
        "helper",
        "printed_generator",
        "__init__",
        "__enter__",
        "__exit__",
        "__init__",
        "__enter__",
        "__exit__",
        "download",
        "wrapper",
        "format_path",
        "option_to_string",
        "helper",
        "__init__",
        "update",
        "read",
        "is_listlike",
        "process_command",
        "format",
        "highlighted",
        "print_line",
        "helper",
        "_as_skia_image",
        "_get_skia_sampling",
        "format_shape",
        "run_test",
        "test_single_tensor",
        "test_multiple_tensors_consistent",
        "test_mixed_tensor_types",
        "test_manual_dimension",
        "test_missing_tensor",
        "test_not_a_tensor",
        "test_dim_count_mismatch",
        "test_literal_mismatch",
        "test_inconsistent_dims",
        "sanitize_string",
        "__init__",
        "__repr__",
        "__hash__",
        "__eq__",
        "should_include",
        "should_explore",
        "postprocess_path",
        "explore",
        "generator",
        "config",
        "init_colors",
        "get_matrix_code_chars",
        "random_char",
        "random_rain_length",
        "rain_forever",
        "rain_once",
        "animate_rain",
        "update_style",
        "main",
        "add_rain",
        "is_valid_int",
        "is_valid_line",
        "get_lines",
        "get_timestamp",
        "strip_braces",
        "get_timestamp",
        "__init__",
        "__repr__",
        "request_replace",
        "pinger",
        "get_my_ip",
        "map_network",
        "autoimportable_module",
        "old_and_new_text",
        "file_will_change",
        "try_import",
        "helper",
        "__init__",
        "push",
        "pop",
        "files_walk",
        "load_text",
        "load_annotated_lines",
        "should_read",
        "text_lines_walk",
        "helper",
        "__init__",
        "__hash__",
        "__eq__",
        "center",
        "__repr__",
        "do_path",
        "__init__",
        "__len__",
        "__getitem__",
        "__init__",
        "__iter__",
        "__next__",
        "__len__",
        "__repr__",
        "__init__",
        "__contains__",
        "__iter__",
        "__len__",
        "add",
        "discard",
        "__getitem__",
        "__setitem__",
        "__getattr__",
        "__delattr__",
        "__setattr__",
        "__repr__",
        "__init__",
        "__getattr__",
        "__dir__",
        "__contains__",
        "__repr__",
        "__getitem__",
        "should_traverse",
        "walk",
        "patcher",
        "extract_imports",
        "remove_first_import_line",
        "get_code",
        "unarpy",
        "filter_pids_exist",
        "none_to_zero",
        "get_all_pids_and_their_commands",
        "fix_package",
        "__init__",
        "add",
        "__contains__",
        "delete",
        "offer_to_blacklist",
        "wrapper",
        "is_builtin",
        "combine_range",
        "analyze_python",
        "ansi_highlight",
        "is_builtin",
        "combine_range",
        "analyze_python",
        "ansi_highlight",
        "progress_func",
        "__init__",
        "save",
        "write_to_fp",
        "_tokenize",
        "_minimize",
        "convert_grid_item",
        "display",
        "trace_func",
        "__new__",
        "sorty",
        "append_stat",
        "to_str",
        "__init__",
        "__lt__",
        "__gt__",
        "__eq__",
        "__le__",
        "__ge__",
        "__ne__",
        "__init__",
        "__repr__",
        "__iter__",
        "is_leaf",
        "map_constructor",
        "get_default_iface_name_linux",
        "getmac",
        "addstr_wordwrap",
        "words_and_spaces",
        "ioctl_GWINSZ",
        "trace_lines",
        "do_when_ready",
        "is_hidden_file",
        "__init__",
        "register",
        "summary",
        "walk",
        "level_label",
        "p",
        "split_numbers_and_letters",
        "is_inner",
        "is_outer",
        "is_solid_white",
        "is_solid_black",
        "descendants",
        "wrapper",
        "clear_cache",
        "heightify",
        "print_line",
        "primes",
        "wrapped",
        "commit_process",
        "_announce_cell",
        "show_head",
        "get_color",
        "show_body",
        "show_tail",
        "text_files_walk",
        "mute",
        "__init__",
        "get_full_module_name",
        "leave_ImportFrom",
        "leave_Call",
        "leave_Name",
        "_is_likely_module_function",
        "new_func",
        "wrapped_line_tokens",
        "progress_func",
        "progress_func",
        "strip",
        "color",
        "is_module",
        "format_signature",
        "indentify_all_but_first_line",
        "print_fansi_colors_in_curses",
        "blend_rgb",
        "dictify",
        "dupdate",
        "scope",
        "equal",
        "deep_dark_dict_copy",
        "get_snapshot",
        "set_snapshot",
        "take_snapshot",
        "get_ans",
        "set_ans",
        "eval_for_rinsp",
        "print_history",
        "show_error",
        "pterm_pretty_print",
        "add_to_successful_command_history",
        "join_command",
        "helper",
        "primes",
        "__getattribute__",
        "get_progress_text",
        "input_option",
        "filter_by_extension",
        "ram_to_string",
        "line_number_prefix_generator",
        "is_module",
        "autoformat_python_via_black",
        "__init__",
        "can_undo",
        "can_redo",
        "undo",
        "redo",
        "do",
        "do_if_new",
        "fansify",
        "_display_pterm_image",
        "new_init",
        "evaluable_part",
        "try_eval",
        "columnify_strings",
        "string_to_modifier",
        "repr_string_to_modifier",
        "cyan",
        "print_code",
        "print_line",
        "print_line",
        "file_size_key",
        "number_of_leading_spaces",
        "breakify",
        "get_name_from_name_error",
        "precache_all"
      ],
      "classes": [
        "SetCurrentDirectoryTemporarily",
        "TemporarilySetAttr",
        "TemporarilySetItem",
        "PrintBeforeAfter",
        "LazyLoadedImages",
        "JupyterDisplayChannel",
        "_FormTranslator",
        "_TimezoneFormTranslator",
        "_FilesizeFormTranslator",
        "PseudoTerminalPrompt",
        "eta",
        "_ExevalDirective",
        "pseudo_terminal_style",
        "_Module",
        "_PtermLevelTitleContext",
        "_PseudoTerminalReturnException",
        "HandyHashable",
        "HandyDict",
        "ClassProperty",
        "CachedInstances",
        "FlannDict",
        "JupyterImageChannel",
        "VideoWriterMP4",
        "Timeout",
        "TimeoutError",
        "TemporarilyDownloadUrl",
        "_MaybeTemporarilyDownloadVideo",
        "_WebCopyProgressTracker",
        "_PathInfo",
        "_BundledPath",
        "_MinFileSizeHeap",
        "AprilTag",
        "ImageDataset",
        "IteratorWithLen",
        "BoolSet",
        "DictReader",
        "_rp_persistent_set",
        "gTTS",
        "Meta",
        "K",
        "Junction",
        "JunctionList",
        "Tree",
        "TimeoutException",
        "Contour",
        "result",
        "result",
        "QualifyImportsTransformer",
        "PreserveDuplicatesLoader",
        "WindowFullException",
        "result",
        "LazyloadedModule",
        "UndoRedoStack"
      ],
      "imports": [
        "__future__",
        "sys",
        "threading",
        "builtins",
        "time",
        "rp",
        "rp.libs.graveyard",
        "os",
        "time",
        "shlex",
        "sys",
        "random",
        "warnings",
        "traceback",
        "tempfile",
        "contextlib",
        "cachetools",
        "itertools",
        "math",
        "random",
        "re",
        "itertools",
        "functools",
        "contextlib",
        "math",
        "datetime",
        "collections.abc",
        "glob",
        "copy",
        "rp.libs.stamp_tensor",
        "rp.rp_ptpython.prompt_style",
        "rp.rp_ptpython.prompt_style",
        "rp.experimental.debug_comment",
        "tracetraptest",
        "lazy_loader",
        "copy",
        "concurrent.futures",
        "psutil",
        "os",
        "contextlib",
        "os",
        "os",
        "platform",
        "platform",
        "re",
        "pygments",
        "pygments.lexers",
        "pygments.formatters",
        "pygments.lexers",
        "pygments.styles",
        "pygments.lexers",
        "pygments.styles",
        "sys",
        "base64",
        "scipy.ndimage.filters",
        "numpy",
        "cv2",
        "numpy",
        "math",
        "PIL",
        "random",
        "scipy.ndimage.filters",
        "scipy.ndimage.filters",
        "scipy.ndimage.filters",
        "copy",
        "skimage.transform",
        "torch",
        "random",
        "collections.abc",
        "random",
        "random",
        "collections.abc",
        "random",
        "numpy",
        "torch",
        "multiprocessing",
        "urllib.parse",
        "PIL",
        "PIL",
        "copykitten",
        "pdf2image",
        "pdf2image",
        "PIL",
        "imageio",
        "scipy.misc",
        "requests.packages.urllib3.exceptions",
        "requests",
        "PIL",
        "io",
        "io",
        "cv2",
        "numpy",
        "matplotlib.pyplot",
        "OpenEXR",
        "OpenEXR",
        "OpenEXR",
        "OpenEXR",
        "Imath",
        "numpy",
        "cv2",
        "base64",
        "base64",
        "io",
        "PIL",
        "PIL",
        "OpenEXR",
        "Imath",
        "numpy",
        "glob",
        "functools",
        "re",
        "requests",
        "gtts_token.gtts_token",
        "numpy",
        "pydub",
        "scipy.io.wavfile",
        "scipy.signal",
        "scipy.io",
        "pygame",
        "os",
        "subprocess",
        "subprocess",
        "os",
        "IPython",
        "sys",
        "subprocess",
        "mediapy",
        "IPython.display",
        "base64",
        "IPython.display",
        "matplotlib",
        "matplotlib.pyplot",
        "matplotlib.animation",
        "qrcode",
        "html2text",
        "plotille",
        "plotille",
        "matplotlib.patches",
        "matplotlib",
        "matplotlib.backend_bases",
        "matplotlib.pyplot",
        "matplotlib.pyplot",
        "numpy",
        "cv2",
        "matplotlib",
        "itertools",
        "inspect",
        "easydict",
        "ast",
        "inspect",
        "astor",
        "easydict",
        "inspect",
        "ast",
        "inspect",
        "functools",
        "functools",
        "inspect",
        "functools",
        "inspect",
        "inspect",
        "ast",
        "functools",
        "types",
        "functools",
        "inspect",
        "functools",
        "sys",
        "iterfzf",
        "more_itertools",
        "urllib.parse",
        "re",
        "datetime",
        "inspect",
        "cv2",
        "cv2",
        "cv2",
        "mss",
        "IPython.display",
        "google.colab.output",
        "base64",
        "rtmidi",
        "rtmidi.midiutil",
        "easydict",
        "json",
        "json",
        "pandas",
        "csv",
        "pandas",
        "pyarrow.parquet",
        "easydict",
        "yaml",
        "yaml",
        "pathlib",
        "socket",
        "requests",
        "copy",
        "subprocess",
        "os",
        "subprocess",
        "rp",
        "shutil",
        "matplotlib.pyplot",
        "matplotlib.pyplot",
        "transliterate",
        "collections",
        "functools",
        "curses",
        "os",
        "platform",
        "re",
        "re",
        "re",
        "pygments.lexers",
        "pygments.lexer",
        "traceback",
        "traceback",
        "pygments",
        "pygments.lexers",
        "pygments.formatters",
        "pygments.formatters.terminal",
        "inspect",
        "io",
        "types",
        "rich.console",
        "rich.traceback",
        "traceback",
        "collections",
        "contextlib",
        "sys",
        "urllib.request",
        "requests",
        "json",
        "requests",
        "urllib.request",
        "urllib.error",
        "urllib.parse",
        "json",
        "datetime",
        "time",
        "os",
        "os.path",
        "ssl",
        "stat",
        "subprocess",
        "sys",
        "os",
        "requests",
        "drawille",
        "sys",
        "importlib.util",
        "rp.libs.timg",
        "imgcat",
        "time",
        "skimage.morphology",
        "numpy",
        "cv2",
        "rp.prompt_toolkit.history",
        "webbrowser",
        "urllib.parse",
        "importlib",
        "rp",
        "rp",
        "datetime",
        "types",
        "pkgutil",
        "collections.abc",
        "inspect",
        "inspect",
        "xdoctest",
        "subprocess",
        "ast",
        "traceback",
        "IPython.terminal.embed",
        "re",
        "rp.patch_linecache",
        "time",
        "sys",
        "time",
        "linecache",
        "math",
        "asyncio",
        "rp.r",
        "rp.rp_ptpython.style",
        "rp.rp_ptpython.completer",
        "rp.rp_ptpython.python_input",
        "collections",
        "re",
        "itertools",
        "traceback",
        "re",
        "os",
        "os",
        "pathlib",
        "mimetypes",
        "codecs",
        "os",
        "sys",
        "subprocess",
        "warnings",
        "warnings",
        "warnings",
        "locale",
        "re",
        "subprocess",
        "sys",
        "os",
        "collections",
        "textual_imageview.app",
        "shutil",
        "rp.libs.pyfx.app",
        "rp.libs.pyfx.model",
        "os",
        "platform",
        "subprocess",
        "re",
        "rich",
        "rich.columns",
        "json",
        "ast",
        "rp.r_iterm_comm",
        "rp.r_iterm_comm",
        "rp.libs.profile_vim_plugins",
        "rp.experimental",
        "rp.r_iterm_comm",
        "rp.r_iterm_comm",
        "gc",
        "threading",
        "contextlib",
        "signal",
        "numpngw",
        "re",
        "inspect",
        "rich.console",
        "rich",
        "rich.console",
        "pprint",
        "inspect",
        "sys",
        "sympy",
        "math",
        "functools",
        "functools",
        "functools",
        "functools",
        "operator",
        "psutil",
        "psutil",
        "getpass",
        "os",
        "psutil",
        "os",
        "signal",
        "psutil",
        "sys",
        "typing",
        "re",
        "re",
        "inspect",
        "numbers",
        "rp.rp_ptpython.completer",
        "itertools",
        "cv2",
        "cv2",
        "numpy",
        "cv2",
        "math",
        "numpy",
        "cv2",
        "torch",
        "io",
        "functools",
        "functools",
        "hashlib",
        "os",
        "io",
        "base64",
        "string",
        "math",
        "PIL",
        "numpy",
        "fontTools.ttLib",
        "collections",
        "skia",
        "numpy",
        "math",
        "rp",
        "skia",
        "numpy",
        "requests",
        "os",
        "pathlib",
        "datetime",
        "datetime",
        "datetime",
        "re",
        "os",
        "os.path",
        "re",
        "glob",
        "os",
        "math",
        "copy",
        "js2py",
        "numba",
        "re",
        "colorsys",
        "colorsys",
        "colorsys",
        "ipynbname",
        "google.colab.output",
        "google.colab.output",
        "sys",
        "cloud_detect",
        "pathlib",
        "warnings",
        "readline",
        "pytubefix",
        "pytubefix",
        "pytubefix.cli",
        "embeddify",
        "subprocess",
        "json",
        "cv2",
        "cv2",
        "cv2",
        "os",
        "subprocess",
        "skvideo.io",
        "subprocess",
        "subprocess",
        "subprocess",
        "os",
        "tempfile",
        "shutil",
        "shutil",
        "os",
        "shutil",
        "shutil",
        "os",
        "shutil",
        "urllib.parse",
        "os",
        "scenedetect.video_manager",
        "scenedetect.scene_manager",
        "scenedetect.stats_manager",
        "scenedetect.detectors.content_detector",
        "numpy",
        "cv2",
        "skimage.metrics",
        "twilio.rest",
        "numpy",
        "math",
        "sklearn.decomposition",
        "inflect",
        "word2number",
        "nltk.corpus",
        "nltk",
        "nltk",
        "nltk",
        "nltk.tokenize",
        "nltk",
        "os",
        "nltk.data",
        "socket",
        "pypager.source",
        "pypager.pager",
        "subprocess",
        "os",
        "screeninfo",
        "screeninfo",
        "math",
        "os",
        "time",
        "inspect",
        "inspect",
        "pkgutil",
        "importlib.util",
        "os",
        "inspect",
        "builtins",
        "datetime",
        "datetime",
        "datetime",
        "dateparser",
        "pytz",
        "subprocess",
        "os",
        "platform",
        "statistics",
        "scipy.stats",
        "scipy.stats",
        "scipy.stats",
        "boto3",
        "urllib.parse",
        "easydict",
        "re",
        "nltk.corpus",
        "requests",
        "json",
        "math",
        "functools",
        "pylcs",
        "termios",
        "fcntl",
        "sys",
        "os",
        "serial.tools.list_ports",
        "tempfile",
        "sys",
        "subprocess",
        "ast",
        "astor",
        "subprocess",
        "isort",
        "unimport",
        "unimport.analyzers.main",
        "unimport.statement",
        "unimport.refactor",
        "subprocess",
        "socket",
        "psutil",
        "zlib",
        "zlib",
        "dill",
        "numpy",
        "math",
        "struct",
        "numpy",
        "struct",
        "requests",
        "io",
        "requests",
        "subprocess",
        "libtmux",
        "libtmux",
        "subprocess",
        "subprocess",
        "subprocess",
        "yaml",
        "json",
        "ipywidgets",
        "IPython.display",
        "fbchat",
        "fbchat",
        "fbchat",
        "rp.libs.pytorch_module_explorer",
        "rp.libs.torch_hooks",
        "warnings",
        "pyunpack",
        "snowy",
        "snowy",
        "os",
        "platform",
        "subprocess",
        "re",
        "rp.r_iterm_comm",
        "glob",
        "itertools",
        "imagesize",
        "colorsys",
        "cv2",
        "cmapy",
        "zalgo_text.zalgo",
        "art",
        "base64",
        "base64",
        "binascii",
        "binascii",
        "shlex",
        "ranger",
        "requests",
        "requests",
        "io",
        "socket",
        "cv2",
        "wordcloud",
        "pandas",
        "matplotlib.pyplot",
        "seaborn",
        "tabview",
        "pandas",
        "cv2",
        "skia",
        "torch.nn.functional",
        "einops",
        "torch",
        "torch.nn.functional",
        "einops",
        "torch",
        "torch",
        "einops",
        "iterfzf",
        "cv2",
        "cv2",
        "collections",
        "os",
        "openai",
        "python_minifier",
        "pytesseract",
        "cv2",
        "random",
        "curses",
        "time",
        "os",
        "subprocess",
        "os",
        "json",
        "socket",
        "multiprocessing",
        "subprocess",
        "os",
        "getmac",
        "socket",
        "mac_vendor_lookup",
        "rp.libs.pynput_recorder",
        "socket",
        "iterfzf",
        "json",
        "cv2",
        "cv2",
        "PIL",
        "depth_pro",
        "depth_pro",
        "torch",
        "torch",
        "einops",
        "rp.git.tapnet.run_tapnet",
        "pyflow",
        "cv2",
        "numpy",
        "cv2",
        "numpy",
        "cv2",
        "cv2",
        "apriltag",
        "moms_apriltag",
        "bokeh.io",
        "IPython.utils",
        "bokeh",
        "bokeh.plotting",
        "bokeh.io",
        "bokeh.themes",
        "bokeh",
        "bokeh.plotting",
        "bokeh.io",
        "bokeh.themes",
        "subprocess",
        "subprocess",
        "git",
        "git",
        "git",
        "git",
        "git",
        "urllib.parse",
        "git",
        "subprocess",
        "shlex",
        "os",
        "datetime",
        "subprocess",
        "datetime",
        "black",
        "macchiato",
        "io",
        "bs4",
        "add_trailing_comma._main",
        "json",
        "PIL.Image",
        "torch",
        "torch",
        "safetensors",
        "os",
        "rp.r",
        "safetensors.torch",
        "torch",
        "torch",
        "ast",
        "removestar.removestar",
        "libcst",
        "libcst",
        "rp.libs.refactor.string_format.fstring_converter",
        "flynt.api",
        "flynt.state",
        "mmap",
        "os",
        "os",
        "copy",
        "collections.abc",
        "psutil",
        "psutil",
        "psutil",
        "py3nvml.py3nvml",
        "py3nvml.py3nvml",
        "py3nvml.py3nvml",
        "py3nvml.py3nvml",
        "py3nvml.py3nvml",
        "py3nvml.py3nvml",
        "py3nvml.py3nvml",
        "os",
        "py3nvml.py3nvml",
        "py3nvml.py3nvml",
        "rich.console",
        "collections",
        "rich.table",
        "rich",
        "rich",
        "rich.table",
        "ipynbname",
        "psutil",
        "rich.console",
        "rich.table",
        "rich",
        "rich.syntax",
        "datetime",
        "pynput.keyboard",
        "time",
        "numpy",
        "scipy.spatial",
        "shutil",
        "shutil",
        "shutil",
        "sys",
        "subprocess",
        "shlex",
        "importlib",
        "pkg_resources",
        "pip._internal.req.req_file",
        "pip._internal.req.constructors",
        "pip._internal.network.session",
        "rich.console",
        "rich.table",
        "subprocess",
        "os",
        "signal",
        "os",
        "keyword",
        "tokenize",
        "cgi",
        "re",
        "functools",
        "keyword",
        "tokenize",
        "cgi",
        "re",
        "functools",
        "rp.Pyperclip",
        "random",
        "numpy",
        "torch",
        "tqdm",
        "pyjpgclipboard",
        "pillow_heif",
        "imgurpython",
        "sounddevice",
        "IPython.display",
        "sounddevice",
        "pygame",
        "IPython.display",
        "pandas",
        "IPython.display",
        "IPython.display",
        "IPython.display",
        "IPython.display",
        "rich",
        "rich.markdown",
        "IPython.display",
        "re",
        "uuid",
        "html",
        "pytz",
        "types",
        "collections",
        "pprint",
        "tqdm",
        "tqdm",
        "yaml",
        "copy",
        "collections.abc",
        "getmac",
        "googletrans",
        "urllib.parse",
        "urllib.request",
        "certifi",
        "timg",
        "pygments.token",
        "sys",
        "time",
        "re",
        "warnings",
        "datetime",
        "sys",
        "platform",
        "rp",
        "re",
        "inspect",
        "xonsh.main",
        "requests",
        "platform",
        "jtree",
        "json",
        "rp.r_iterm_comm",
        "re",
        "sys",
        "rp.r_iterm_comm",
        "setproctitle",
        "psutil",
        "psutil",
        "psutil",
        "psutil",
        "datetime",
        "inspect",
        "tqdm",
        "copy",
        "urllib.parse",
        "rp.libs.pyflann",
        "PIL",
        "PIL",
        "webcolors",
        "IPython",
        "IPython.display",
        "IPython.display",
        "moviepy.editor",
        "ffmpeg",
        "send2trash",
        "send2trash",
        "pathlib",
        "wcwidth",
        "numba",
        "signal",
        "signal",
        "subprocess",
        "rp.rp_ptpdb",
        "sympy",
        "subprocess",
        "hiddenlayer",
        "torch",
        "shutil",
        "zipfile",
        "itertools",
        "numba",
        "numba",
        "logging",
        "logging",
        "pandas",
        "skia",
        "skia",
        "torch",
        "torch",
        "ast",
        "heapq",
        "heapq",
        "os",
        "multiprocessing.pool",
        "itertools",
        "depth_pro",
        "rp.git.tapnet.run_tapnet",
        "pyflow",
        "einops",
        "einops",
        "filelock",
        "torch",
        "torch",
        "easydict",
        "ast",
        "py3nvml.py3nvml",
        "psutil",
        "uv",
        "imp",
        "numpy",
        "web_evaluator",
        "colorama",
        "win_unicode_console",
        "builtins",
        "builtins",
        "rp.Pyperclip",
        "math",
        "numpy",
        "torch",
        "urllib.request",
        "torch",
        "IPython.display",
        "IPython.display",
        "types",
        "pyaudio",
        "copy",
        "itertools",
        "struct",
        "ctypes",
        "rich",
        "urllib",
        "urllib2",
        "rp.rp_ptpython.completer",
        "rp.rp_ptpython.ipython",
        "rp.prompt_toolkit.shortcuts",
        "signal",
        "readline",
        "rlcompleter",
        "copy",
        "rp.r_iterm_comm",
        "moviepy",
        "pathlib",
        "subprocess",
        "pdb",
        "IPython.display",
        "tarfile",
        "torch",
        "numpy",
        "torch",
        "importlib",
        "platform",
        "pyflow",
        "torch",
        "importlib.util",
        "builtins",
        "builtins",
        "imageio",
        "imageio",
        "scipy.misc",
        "skimage.io",
        "types",
        "inspect",
        "fcntl",
        "termios",
        "struct",
        "rp.rp_ptpython.python_input",
        "time",
        "importlib",
        "shlex",
        "warnings",
        "time",
        "rp.r_iterm_comm",
        "rp.r_iterm_comm",
        "subprocess",
        "shutil",
        "depth_pro",
        "os",
        "playsound",
        "types",
        "shlex",
        "rp.r_iterm_comm",
        "torch",
        "cv2",
        "black",
        "csv",
        "numpy",
        "re",
        "requests",
        "pyflow",
        "types",
        "gc",
        "tqdm",
        "pprint",
        "rp",
        "os",
        "IPython.display",
        "os",
        "sys",
        "subprocess",
        "psutil",
        "os",
        "pdb",
        "pdb",
        "platform",
        "sys",
        "getpass",
        "rp",
        "rp",
        "time",
        "rp",
        "time",
        "rp",
        "time",
        "rp",
        "time",
        "rp.pypi_inspection",
        "rp.pypi_inspection",
        "rp.libs.peepdis",
        "rp.libs.peepdis",
        "os",
        "rp.r_iterm_comm",
        "time",
        "time",
        "time",
        "ast",
        "shlex",
        "tabview",
        "sys",
        "rp.rp_ptpython.completer",
        "sys",
        "shlex",
        "sys"
      ],
      "size_lines": 53185,
      "has_main": true,
      "docstring": "Welcome to RP: Ryan Python "
    },
    "__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "rp.r"
      ],
      "size_lines": 2,
      "has_main": false,
      "docstring": null
    },
    "move_to_graveyard.py": {
      "functions": [
        "find_graveyard_blocks",
        "process_block_for_graveyard",
        "remove_blocks_from_content",
        "add_graveyard_import_to_rpy",
        "extract_exported_names",
        "generate_all_list",
        "update_graveyard_all_list",
        "append_to_graveyard",
        "main"
      ],
      "classes": [],
      "imports": [
        "os",
        "re",
        "sys",
        "ast",
        "rp"
      ],
      "size_lines": 368,
      "has_main": true,
      "docstring": "RP Graveyard Refactoring Script\n\nThis script moves code blocks marked with #GRAVEYARD START and #GRAVEYARD END\nfrom r.py to libs/graveyard.py, with proper dependency qualification.\n\nUsage:\n    /opt/homebrew/opt/python@3.10/bin/python3.10 move_to_graveyard.py\n\nThe script will:\n1. Find all #GRAVEYARD START/END pairs in r.py\n2. Extract the code blocks between markers\n3. Apply qualify_imports to handle rp dependencies  \n4. Remove blocks from r.py\n5. Append processed blocks to libs/graveyard.py\n6. Add graveyard import to r.py if needed"
    },
    "experimental/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "powerpoint_converter"
      ],
      "size_lines": 2,
      "has_main": false,
      "docstring": null
    },
    "libs/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 1,
      "has_main": false,
      "docstring": null
    },
    "libs/timg/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "argparser",
        "meta",
        "methods",
        "renderer"
      ],
      "size_lines": 5,
      "has_main": false,
      "docstring": null
    },
    "libs/timg/methods/__init__.py": {
      "functions": [
        "show_available_methods"
      ],
      "classes": [],
      "imports": [
        "ansi_methods",
        "ascii",
        "sixel"
      ],
      "size_lines": 46,
      "has_main": false,
      "docstring": null
    },
    "libs/tetris/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 1,
      "has_main": false,
      "docstring": null
    },
    "libs/tetris/graphics/graphics/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "random",
        "copy"
      ],
      "size_lines": 18,
      "has_main": false,
      "docstring": null
    },
    "libs/jedi/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "rp.libs.jedi.api",
        "rp.libs.jedi",
        "rp.libs.jedi.api.environment",
        "rp.libs.jedi.api.exceptions",
        "rp.libs.jedi.plugins"
      ],
      "size_lines": 48,
      "has_main": false,
      "docstring": "Jedi is a static analysis tool for Python that can be used in IDEs/editors.\nJedi has a focus on autocompletion and goto functionality. Jedi is fast and is\nvery well tested. It understands Python and stubs on a deep level.\n\nJedi has support for different goto functions. It's possible to search for\nusages and list names in a Python file to get information about them.\n\nJedi uses a very simple API to connect with IDE's. There's a reference\nimplementation as a `VIM-Plugin <https://github.com/davidhalter/jedi-vim>`_,\nwhich uses Jedi's autocompletion.  We encourage you to use Jedi in your IDEs.\nAutocompletion in your REPL is also possible, IPython uses it natively and for\nthe CPython REPL you have to install it.\n\nHere's a simple example of the autocompletion feature:\n\n>>> import jedi\n>>> source = '''\n... import json\n... json.lo'''\n>>> script = jedi.Script(source, 3, len('json.lo'), 'example.py')\n>>> script\n<Script: 'example.py' ...>\n>>> completions = script.completions()\n>>> completions\n[<Completion: load>, <Completion: loads>]\n>>> print(completions[0].complete)\nad\n>>> print(completions[0].name)\nload\n\nAs you see Jedi is pretty simple and allows you to concentrate on writing a\ngood text editor, while still having very good IDE features for Python."
    },
    "libs/jedi/plugins/__init__.py": {
      "functions": [
        "__init__",
        "register",
        "decorate",
        "_build_functions",
        "decorator",
        "wrapper"
      ],
      "classes": [
        "_PluginManager"
      ],
      "imports": [
        "functools"
      ],
      "size_lines": 48,
      "has_main": false,
      "docstring": null
    },
    "libs/jedi/common/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "rp.libs.jedi.common.context"
      ],
      "size_lines": 2,
      "has_main": false,
      "docstring": null
    },
    "libs/jedi/evaluate/__init__.py": {
      "functions": [
        "__init__",
        "import_module",
        "execute",
        "builtins_module",
        "typing_module",
        "reset_recursion_limitations",
        "get_sys_path",
        "eval_element",
        "_eval_element_if_evaluated",
        "_eval_element_cached",
        "goto_definitions",
        "_follow_error_node_imports_if_possible",
        "goto",
        "create_context",
        "parse_and_get_code",
        "parse",
        "parent_scope",
        "from_scope_node"
      ],
      "classes": [
        "Evaluator"
      ],
      "imports": [
        "rp.libs.parso.python",
        "rp.libs.parso",
        "rp.libs.parso",
        "rp.libs.jedi.file_io",
        "rp.libs.jedi",
        "rp.libs.jedi",
        "rp.libs.jedi.evaluate.utils",
        "rp.libs.jedi.evaluate",
        "rp.libs.jedi.evaluate",
        "rp.libs.jedi.evaluate.cache",
        "rp.libs.jedi.evaluate",
        "rp.libs.jedi.evaluate.names",
        "rp.libs.jedi.evaluate.base_context",
        "rp.libs.jedi.evaluate.context",
        "rp.libs.jedi.evaluate.context.iterable",
        "rp.libs.jedi.evaluate.syntax_tree",
        "rp.libs.jedi.plugins"
      ],
      "size_lines": 444,
      "has_main": false,
      "docstring": "Evaluation of Python code in |jedi| is based on three assumptions:\n\n* The code uses as least side effects as possible. Jedi understands certain\n  list/tuple/set modifications, but there's no guarantee that Jedi detects\n  everything (list.append in different modules for example).\n* No magic is being used:\n\n  - metaclasses\n  - ``setattr()`` / ``__import__()``\n  - writing to ``globals()``, ``locals()``, ``object.__dict__``\n* The programmer is not a total dick, e.g. like `this\n  <https://github.com/davidhalter/jedi/issues/24>`_ :-)\n\nThe actual algorithm is based on a principle called lazy evaluation.  That\nsaid, the typical entry point for static analysis is calling\n``eval_expr_stmt``. There's separate logic for autocompletion in the API, the\nevaluator is all about evaluating an expression.\n\nTODO this paragraph is not what jedi does anymore, it's similar, but not the\nsame.\n\nNow you need to understand what follows after ``eval_expr_stmt``. Let's\nmake an example::\n\n    import datetime\n    datetime.date.toda# <-- cursor here\n\nFirst of all, this module doesn't care about completion. It really just cares\nabout ``datetime.date``. At the end of the procedure ``eval_expr_stmt`` will\nreturn the ``date`` class.\n\nTo *visualize* this (simplified):\n\n- ``Evaluator.eval_expr_stmt`` doesn't do much, because there's no assignment.\n- ``Context.eval_node`` cares for resolving the dotted path\n- ``Evaluator.find_types`` searches for global definitions of datetime, which\n  it finds in the definition of an import, by scanning the syntax tree.\n- Using the import logic, the datetime module is found.\n- Now ``find_types`` is called again by ``eval_node`` to find ``date``\n  inside the datetime module.\n\nNow what would happen if we wanted ``datetime.date.foo.bar``? Two more\ncalls to ``find_types``. However the second call would be ignored, because the\nfirst one would return nothing (there's no foo attribute in ``date``).\n\nWhat if the import would contain another ``ExprStmt`` like this::\n\n    from foo import bar\n    Date = bar.baz\n\nWell... You get it. Just another ``eval_expr_stmt`` recursion. It's really\neasy. Python can obviously get way more complicated then this. To understand\ntuple assignments, list comprehensions and everything else, a lot more code had\nto be written.\n\nJedi has been tested very well, so you can just start modifying code. It's best\nto write your own test first for your \"new\" feature. Don't be scared of\nbreaking stuff. As long as the tests pass, you're most likely to be fine.\n\nI need to mention now that lazy evaluation is really good because it\nonly *evaluates* what needs to be *evaluated*. All the statements and modules\nthat are not used are just being ignored."
    },
    "libs/jedi/evaluate/gradual/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 1,
      "has_main": false,
      "docstring": null
    },
    "libs/jedi/evaluate/context/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "rp.libs.jedi.evaluate.context.module",
        "rp.libs.jedi.evaluate.context.klass",
        "rp.libs.jedi.evaluate.context.function",
        "rp.libs.jedi.evaluate.context.instance"
      ],
      "size_lines": 7,
      "has_main": false,
      "docstring": null
    },
    "libs/jedi/evaluate/compiled/__init__.py": {
      "functions": [
        "builtin_from_name",
        "create_simple_object",
        "get_string_context_set",
        "load_module",
        "__init__",
        "__getattribute__",
        "_get_wrapped_context",
        "__repr__"
      ],
      "classes": [
        "CompiledValue"
      ],
      "imports": [
        "rp.libs.jedi._compatibility",
        "rp.libs.jedi.evaluate.compiled.context",
        "rp.libs.jedi.evaluate.base_context"
      ],
      "size_lines": 65,
      "has_main": false,
      "docstring": null
    },
    "libs/jedi/evaluate/compiled/subprocess/__init__.py": {
      "functions": [
        "_enqueue_output",
        "_add_stderr_to_debug",
        "_get_function",
        "_cleanup_process",
        "__init__",
        "get_or_create_access_handle",
        "get_access_handle",
        "set_access_handle",
        "__getattr__",
        "__init__",
        "__getattr__",
        "_convert_access_handles",
        "__del__",
        "__init__",
        "__repr__",
        "_get_process",
        "run",
        "get_sys_path",
        "_kill",
        "_send",
        "delete_evaluator",
        "__init__",
        "_get_evaluator",
        "_run",
        "listen",
        "__init__",
        "add_subprocess",
        "__repr__",
        "__getstate__",
        "__setstate__",
        "__getattr__",
        "_workaround",
        "_cached_results",
        "wrapper"
      ],
      "classes": [
        "_EvaluatorProcess",
        "EvaluatorSameProcess",
        "EvaluatorSubprocess",
        "CompiledSubprocess",
        "Listener",
        "AccessHandle"
      ],
      "imports": [
        "os",
        "sys",
        "subprocess",
        "socket",
        "errno",
        "traceback",
        "functools",
        "threading",
        "rp.libs.jedi._compatibility",
        "rp.libs.jedi",
        "rp.libs.jedi.cache",
        "rp.libs.jedi.evaluate.compiled.subprocess",
        "rp.libs.jedi.evaluate.compiled.access",
        "rp.libs.jedi.api.exceptions",
        "queue",
        "Queue",
        "rp.libs.jedi.evaluate",
        "rp.libs.jedi.api.environment",
        "msvcrt"
      ],
      "size_lines": 407,
      "has_main": false,
      "docstring": "Makes it possible to do the compiled analysis in a subprocess. This has two\ngoals:\n\n1. Making it safer - Segfaults and RuntimeErrors as well as stdout/stderr can\n   be ignored and dealt with.\n2. Make it possible to handle different Python versions as well as virtualenvs."
    },
    "libs/jedi/api/__init__.py": {
      "functions": [
        "names",
        "preload_module",
        "set_debug_function",
        "__init__",
        "_get_module",
        "__repr__",
        "completions",
        "goto_definitions",
        "_goto_definitions",
        "goto_assignments",
        "_goto_assignments",
        "usages",
        "call_signatures",
        "_analysis",
        "__init__",
        "_get_module",
        "def_ref_filter",
        "create_name",
        "filter_follow_imports",
        "_usages"
      ],
      "classes": [
        "Script",
        "Interpreter"
      ],
      "imports": [
        "os",
        "sys",
        "warnings",
        "rp.libs.parso",
        "rp.libs.parso.python",
        "rp.libs.jedi._compatibility",
        "rp.libs.jedi.parser_utils",
        "rp.libs.jedi",
        "rp.libs.jedi",
        "rp.libs.jedi",
        "rp.libs.jedi.file_io",
        "rp.libs.jedi.api",
        "rp.libs.jedi.api",
        "rp.libs.jedi.api",
        "rp.libs.jedi.api.completion",
        "rp.libs.jedi.api.environment",
        "rp.libs.jedi.api.project",
        "rp.libs.jedi.evaluate",
        "rp.libs.jedi.evaluate",
        "rp.libs.jedi.evaluate",
        "rp.libs.jedi.evaluate.arguments",
        "rp.libs.jedi.evaluate.helpers",
        "rp.libs.jedi.evaluate.sys_path",
        "rp.libs.jedi.evaluate.names",
        "rp.libs.jedi.evaluate.syntax_tree",
        "rp.libs.jedi.evaluate.context",
        "rp.libs.jedi.evaluate.base_context",
        "rp.libs.jedi.evaluate.context.iterable",
        "rp.libs.jedi.evaluate.gradual.conversion",
        "rp.libs.jedi.evaluate.gradual.utils"
      ],
      "size_lines": 549,
      "has_main": false,
      "docstring": "The API basically only provides one class. You can create a :class:`Script` and\nuse its methods.\n\nAdditionally you can add a debug function with :func:`set_debug_function`.\nAlternatively, if you don't need a custom function and are happy with printing\ndebug messages to stdout, simply call :func:`set_debug_function` without\narguments.\n\n.. warning:: Please, note that Jedi is **not thread safe**."
    },
    "libs/peepdis/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "legacy"
      ],
      "size_lines": 4,
      "has_main": false,
      "docstring": null
    },
    "libs/pyflann/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "index",
        "io.dataset",
        "io.hdf5_dataset"
      ],
      "size_lines": 33,
      "has_main": false,
      "docstring": null
    },
    "libs/pyflann/util/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 26,
      "has_main": false,
      "docstring": null
    },
    "libs/pyflann/io/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "dataset"
      ],
      "size_lines": 27,
      "has_main": false,
      "docstring": null
    },
    "libs/pyflann/bindings/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "flann_ctypes"
      ],
      "size_lines": 31,
      "has_main": false,
      "docstring": null
    },
    "libs/pyfx/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "app"
      ],
      "size_lines": 2,
      "has_main": false,
      "docstring": null
    },
    "libs/pyfx/config/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "config",
        "config_parser"
      ],
      "size_lines": 3,
      "has_main": false,
      "docstring": null
    },
    "libs/pyfx/config/validators/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "options"
      ],
      "size_lines": 2,
      "has_main": false,
      "docstring": null
    },
    "libs/pyfx/model/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "model",
        "io.datasource"
      ],
      "size_lines": 12,
      "has_main": false,
      "docstring": "`Pyfx`'s model.\n\nIt loads data from various sources and applies and completes given JSONPath query\non the current loaded JSON data.\n\n* query directly uses :mod:`jsonpath_ng`\n* auto-completion is achieved by home-made :mod:`~pyfx.model.autocomplete`"
    },
    "libs/pyfx/model/autocomplete/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "autocomplete_listener"
      ],
      "size_lines": 12,
      "has_main": false,
      "docstring": "ANTLR4 based JSONPath Auto-Completion Module.\n\nThe auto-completion is achieved by implementing an AutoCompleteListener which extends ErrorListener\nand ParseListener based on syntax defined in JSONPath.g4_ which is based on JSONPath_ and jsonpath_ng_.\n\n.. _JSONPath.g4: https://github.com/cielong/pyfx/blob/doc/src/pyfx/model/common/jsonpath/JSONPath.g4\n.. _JSONPath: https://goessner.net/articles/JsonPath/\n.. _jsonpath_ng: https://github.com/h2non/jsonpath-ng"
    },
    "libs/pyfx/model/io/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 1,
      "has_main": false,
      "docstring": null
    },
    "libs/pyfx/model/common/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 1,
      "has_main": false,
      "docstring": null
    },
    "libs/pyfx/model/common/jsonpath/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "JSONPathParser",
        "JSONPathLexer",
        "JSONPathListener"
      ],
      "size_lines": 10,
      "has_main": false,
      "docstring": "A homemade JSONPath grammar using ANTLR4.\n\nThe reason to build a separate grammar is to build auto-completion for JSONPath\nand finding resources on building autocompletion on ANTLR4 is much easier :)"
    },
    "libs/pyfx/view/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "view_manager",
        "view_config"
      ],
      "size_lines": 9,
      "has_main": false,
      "docstring": "`Pyfx` TUI rendering related module.\n\nIt contains a homemade JSON widgets Library and collection of UI components to\ninteract with :class:`~pyfx.app.PyfxApp`."
    },
    "libs/pyfx/view/json_lib/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "json_listbox",
        "json_listwalker",
        "node_factory",
        "object",
        "array",
        "primitive",
        "selector"
      ],
      "size_lines": 70,
      "has_main": false,
      "docstring": "A collection of JSON rendering related data models and widgets.\n\nExample\n=======\n.. code-block:: python\n   :linenos:\n\n    from rp.libs.pyfx.view.json_lib import JSONListBox, JSONListWalker, NodeFactory, DEFAULT_NODE_IMPLS\n\n    # 1. create NodeFactory\n    node_factory = NodeFactory(DEFAULT_NODE_IMPLS)\n\n    # 2. add any custom display implementation\n    node_factory.register({\n        clazz: json_node_impl\n    })\n\n    # 3. create top node from the data (only supports dict, list and primitive variable)\n    top_node = node_factory.create_root_node(data)\n\n    # 4. create JSONListBox from top node\n    listbox = JSONListBox(JSONListWalker(top_node))\n\n    # 5. use listbox in your own TUI\n\nImplementation Details\n======================\n\nExposed Class\n-------------\n\nFor integrated this class into your own TUI, three classes is the most and the only entry point.\n\n* :class:`.JSONListBox`\n    A :class:`urwid.ListBox` compatible class to manage the visible portion and rendering of the\n    JSON tree.\n* :class:`.JSONListWalker`\n    A :class:`urwid.ListWalker` compatible class to manage the traverse of the whole tree and\n    store the current focus node.\n* :class:`.NodeFactory`\n    A factory to create node based on its value type.\n\nData Modeling\n-------------\n\nThe JSON data is loaded into memory as a tree and based on the data type it creates\n\n- Non-leaf Nodes (`array`, `object`)\n\n  Each non-leaf node, two types of nodes are implemented to ease navigation and rendering:\n\n  - Start node / Unexpanded node to represent start / unexpanded line\n  - End node to represent end line.\n\n- Leaf Nodes (`string`, `integer`, `numeric`, `boolean`, `null`)\n\n  Each leaf node, single node is enough for navigation."
    },
    "libs/pyfx/view/json_lib/selector/__init__.py": {
      "functions": [
        "hasattrs",
        "is_numeric",
        "is_dictlike",
        "is_arraylike",
        "__getitem__"
      ],
      "classes": [
        "DefaultImplementationSelector"
      ],
      "imports": [
        "numbers",
        "object",
        "array",
        "primitive"
      ],
      "size_lines": 42,
      "has_main": false,
      "docstring": null
    },
    "libs/pyfx/view/json_lib/array/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "array_node"
      ],
      "size_lines": 3,
      "has_main": false,
      "docstring": "Node implementation for JSON `array` type."
    },
    "libs/pyfx/view/json_lib/primitive/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "boolean",
        "integer",
        "null",
        "numeric",
        "string",
        "generic"
      ],
      "size_lines": 11,
      "has_main": false,
      "docstring": "Node implementation of primitive JSON type which represents `string`,\n`integer`, `numeric`, `boolean` and `null`"
    },
    "libs/pyfx/view/json_lib/object/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "object_node"
      ],
      "size_lines": 3,
      "has_main": false,
      "docstring": "Node implementation for JSON `object` type."
    },
    "libs/pyfx/view/components/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "autocomplete_popup",
        "help_bar",
        "query_bar",
        "json_browser"
      ],
      "size_lines": 10,
      "has_main": false,
      "docstring": "Different components(or urwid widgets wrapper) will be used in *Pyfx*'s TUI.\n\nEach component is a single unit rendered in *Pyfx*."
    },
    "libs/pyfx/view/components/help_page/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "detailed_help_page"
      ],
      "size_lines": 2,
      "has_main": false,
      "docstring": null
    },
    "libs/pyfx/view/components/autocomplete_popup/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "autocomplete_popup"
      ],
      "size_lines": 2,
      "has_main": false,
      "docstring": null
    },
    "libs/pyfx/view/components/json_browser/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "json_browser"
      ],
      "size_lines": 2,
      "has_main": false,
      "docstring": null
    },
    "libs/pyfx/view/components/query_bar/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "query_bar"
      ],
      "size_lines": 2,
      "has_main": false,
      "docstring": null
    },
    "libs/pyfx/view/components/help_bar/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "help_bar"
      ],
      "size_lines": 2,
      "has_main": false,
      "docstring": null
    },
    "libs/pyfx/view/common/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "selectable_text",
        "popup"
      ],
      "size_lines": 4,
      "has_main": false,
      "docstring": "A collection of common widgets will be used in `pyfx`."
    },
    "libs/pyfx/view/keymapper/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "abstract_component_keymapper",
        "keymapper_config"
      ],
      "size_lines": 3,
      "has_main": false,
      "docstring": null
    },
    "libs/pyfx/view/theme/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "theme_config"
      ],
      "size_lines": 2,
      "has_main": false,
      "docstring": null
    },
    "libs/pyfx/service/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 4,
      "has_main": false,
      "docstring": "This is the service framework"
    },
    "libs/parso/__init__.py": {
      "functions": [
        "parse"
      ],
      "classes": [],
      "imports": [
        "rp.libs.parso.parser",
        "rp.libs.parso.grammar",
        "rp.libs.parso.utils"
      ],
      "size_lines": 59,
      "has_main": false,
      "docstring": "Parso is a Python parser that supports error recovery and round-trip parsing\nfor different Python versions (in multiple Python versions). Parso is also able\nto list multiple syntax errors in your python file.\n\nParso has been battle-tested by jedi_. It was pulled out of jedi to be useful\nfor other projects as well.\n\nParso consists of a small API to parse Python and analyse the syntax tree.\n\n.. _jedi: https://github.com/davidhalter/jedi\n\nA simple example:\n\n>>> import rp.libs.parso\n>>> module = parso.parse('hello + 1', version=\"3.6\")\n>>> expr = module.children[0]\n>>> expr\nPythonNode(arith_expr, [<Name: hello@1,0>, <Operator: +>, <Number: 1>])\n>>> print(expr.get_code())\nhello + 1\n>>> name = expr.children[0]\n>>> name\n<Name: hello@1,0>\n>>> name.end_pos\n(1, 5)\n>>> expr.end_pos\n(1, 9)\n\nTo list multiple issues:\n\n>>> grammar = parso.load_grammar()\n>>> module = grammar.parse('foo +\\nbar\\ncontinue')\n>>> error1, error2 = grammar.iter_errors(module)\n>>> error1.message\n'SyntaxError: invalid syntax'\n>>> error2.message\n\"SyntaxError: 'continue' not properly in loop\""
    },
    "libs/parso/python/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 1,
      "has_main": false,
      "docstring": null
    },
    "libs/parso/pgen2/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "rp.libs.parso.pgen2.generator"
      ],
      "size_lines": 11,
      "has_main": false,
      "docstring": null
    },
    "libs/refactor/string_format/__init__.py": {
      "functions": [
        "format_to_fstring",
        "fstring_to_format"
      ],
      "classes": [],
      "imports": [
        "format_to_fstring_converter",
        "fstring_converter"
      ],
      "size_lines": 69,
      "has_main": false,
      "docstring": "Python string format conversion utilities.\n\nThis module provides functions to convert between different Python string formatting styles:\n- Convert str.format() expressions to f-strings\n- Convert f-strings to str.format() expressions\n\nExamples:\n    # Convert str.format() expressions to f-strings\n    >>> from rp.libs.refactorings.string_format import format_to_fstring\n    >>> code = 'print(\"Hello, {0}!\".format(name))'\n    >>> format_to_fstring(code)\n    'print(f\"Hello, {name}!\")'\n\n    # Convert f-strings to str.format() expressions\n    >>> from rp.libs.refactorings.string_format import fstring_to_format\n    >>> code = 'print(f\"Hello, {name}!\")'\n    >>> fstring_to_format(code)\n    'print(\"Hello, {0}!\".format(name))'\n\nWritten with Claude-Code May 16 2025"
    },
    "rp_ptpython/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 1,
      "has_main": false,
      "docstring": null
    },
    "prompt_toolkit/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "interface",
        "application",
        "shortcuts"
      ],
      "size_lines": 23,
      "has_main": false,
      "docstring": "prompt_toolkit\n==============\n\nAuthor: Jonathan Slenders\n\nDescription: prompt_toolkit is a Library for building powerful interactive\n             command lines in Python.  It can be a replacement for GNU\n             readline, but it can be much more than that.\n\nSee the examples directory to learn about the usage.\n\nProbably, to get started, you meight also want to have a look at\n`prompt_toolkit.shortcuts.prompt`."
    },
    "prompt_toolkit/filters/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "__future__",
        "base",
        "cli",
        "types",
        "utils"
      ],
      "size_lines": 37,
      "has_main": false,
      "docstring": "Filters decide whether something is active or not (they decide about a boolean\nstate). This is used to enable/disable features, like key bindings, parts of\nthe layout and other stuff. For instance, we could have a `HasSearch` filter\nattached to some part of the layout, in order to show that part of the user\ninterface only while the user is searching.\n\nFilters are made to avoid having to attach callbacks to all event in order to\npropagate state. However, they are lazy, they don't automatically propagate the\nstate of what they are observing. Only when a filter is called (it's actually a\ncallable), it will calculate its value. So, its not really reactive\nprogramming, but it's made to fit for this framework.\n\nOne class of filters observe a `CommandLineInterface` instance. However, they\nare not attached to such an instance. (We have to pass this instance to the\nfilter when calling it.) The reason for this is to allow declarative\nprogramming: for key bindings, we can attach a filter to a key binding without\nknowing yet which `CommandLineInterface` instance it will observe in the end.\nExamples are `HasSearch` or `IsExiting`.\n\nAnother class of filters doesn't take anything as input. And a third class of\nfilters are universal, for instance `Always` and `Never`.\nIt is impossible to mix the first and the second class, because that would mean\nmixing filters with a different signature.\n\nFilters can be chained using ``&`` and ``|`` operations, and inverted using the\n``~`` operator, for instance::\n\n    filter = HasFocus('default') & ~ HasSelection()"
    },
    "prompt_toolkit/layout/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "__future__",
        "containers",
        "controls"
      ],
      "size_lines": 52,
      "has_main": false,
      "docstring": "Command line layout definitions\n-------------------------------\n\nThe layout of a command line interface is defined by a Container instance.\nThere are two main groups of classes here. Containers and controls:\n\n- A container can contain other containers or controls, it can have multiple\n  children and it decides about the dimensions.\n- A control is responsible for rendering the actual content to a screen.\n  A control can propose some dimensions, but it's the container who decides\n  about the dimensions -- or when the control consumes more space -- which part\n  of the control will be visible.\n\n\nContainer classes::\n\n    - Container (Abstract base class)\n       |- HSplit (Horizontal split)\n       |- VSplit (Vertical split)\n       |- FloatContainer (Container which can also contain menus and other floats)\n       `- Window (Container which contains one actual control\n\nControl classes::\n\n    - UIControl (Abstract base class)\n       |- TokenListControl (Renders a simple list of tokens)\n       |- FillControl (Fills control with one token/character.)\n       `- BufferControl (Renders an input buffer.)\n\n\nUsually, you end up wrapping every control inside a `Window` object, because\nthat's the only way to render it in a layout.\n\nThere are some prepared toolbars which are ready to use::\n\n- SystemToolbar (Shows the 'system' input buffer, for entering system commands.)\n- ArgToolbar (Shows the input 'arg', for repetition of input commands.)\n- SearchToolbar (Shows the 'search' input buffer, for incremental search.)\n- CompletionsToolbar (Shows the completions of the current buffer.)\n- ValidationToolbar (Shows validation errors of the current buffer.)\n\nAnd one prepared menu:\n\n- CompletionsMenu"
    },
    "prompt_toolkit/terminal/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 1,
      "has_main": false,
      "docstring": null
    },
    "prompt_toolkit/contrib/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 1,
      "has_main": false,
      "docstring": null
    },
    "prompt_toolkit/contrib/completers/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "__future__",
        "filesystem",
        "base",
        "system"
      ],
      "size_lines": 6,
      "has_main": false,
      "docstring": null
    },
    "prompt_toolkit/contrib/regular_languages/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "compiler"
      ],
      "size_lines": 77,
      "has_main": false,
      "docstring": "Tool for expressing the grammar of an input as a regular language.\n==================================================================\n\nThe grammar for the input of many simple command line interfaces can be\nexpressed by a regular language. Examples are PDB (the Python debugger); a\nsimple (bash-like) shell with \"pwd\", \"cd\", \"cat\" and \"ls\" commands; arguments\nthat you can pass to an executable; etc. It is possible to use regular\nexpressions for validation and parsing of such a grammar. (More about regular\nlanguages: http://en.wikipedia.org/wiki/Regular_language)\n\nExample\n-------\n\nLet's take the pwd/cd/cat/ls example. We want to have a shell that accepts\nthese three commands. \"cd\" is followed by a quoted directory name and \"cat\" is\nfollowed by a quoted file name. (We allow quotes inside the filename when\nthey're escaped with a backslash.) We could define the grammar using the\nfollowing regular expression::\n\n    grammar = \\s* (\n        pwd |\n        ls |\n        (cd  \\s+ \" ([^\"]|\\.)+ \") |\n        (cat \\s+ \" ([^\"]|\\.)+ \")\n    ) \\s*\n\n\nWhat can we do with this grammar?\n---------------------------------\n\n- Syntax highlighting: We could use this for instance to give file names\n                       different colour.\n- Parse the result: .. We can extract the file names and commands by using a\n                       regular expression with named groups.\n- Input validation: .. Don't accept anything that does not match this grammar.\n                       When combined with a parser, we can also recursively do\n                       filename validation (and accept only existing files.)\n- Autocompletion: .... Each part of the grammar can have its own autocompleter.\n                       \"cat\" has to be completed using file names, while \"cd\"\n                       has to be completed using directory names.\n\nHow does it work?\n-----------------\n\nAs a user of this library, you have to define the grammar of the input as a\nregular expression. The parts of this grammar where autocompletion, validation\nor any other processing is required need to be marked using a regex named\ngroup. Like ``(?P<varname>...)`` for instance.\n\nWhen the input is processed for validation (for instance), the regex will\nexecute, the named group is captured, and the validator associated with this\nnamed group will test the captured string.\n\nThere is one tricky bit:\n\n    Ofter we operate on incomplete input (this is by definition the case for\n    autocompletion) and we have to decide for the cursor position in which\n    possible state the grammar it could be and in which way variables could be\n    matched up to that point.\n\nTo solve this problem, the compiler takes the original regular expression and\ntranslates it into a set of other regular expressions which each match prefixes\nof strings that would match the first expression. (We translate it into\nmultiple expression, because we want to have each possible state the regex\ncould be in -- in case there are several or-clauses with each different\ncompleters.)\n\n\nTODO: some examples of:\n    - How to create a highlighter from this grammar.\n    - How to create a validator from this grammar.\n    - How to create an autocompleter from this grammar.\n    - How to create a parser from this grammar."
    },
    "prompt_toolkit/contrib/validators/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 1,
      "has_main": false,
      "docstring": null
    },
    "prompt_toolkit/contrib/telnet/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "server",
        "application"
      ],
      "size_lines": 3,
      "has_main": false,
      "docstring": null
    },
    "prompt_toolkit/key_binding/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "__future__"
      ],
      "size_lines": 2,
      "has_main": false,
      "docstring": null
    },
    "prompt_toolkit/key_binding/bindings/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 1,
      "has_main": false,
      "docstring": null
    },
    "prompt_toolkit/styles/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "__future__",
        "base",
        "defaults",
        "from_dict",
        "from_pygments",
        "utils",
        "pygments"
      ],
      "size_lines": 22,
      "has_main": false,
      "docstring": "Styling for prompt_toolkit applications."
    },
    "prompt_toolkit/eventloop/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 1,
      "has_main": false,
      "docstring": null
    },
    "prompt_toolkit/clipboard/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "base",
        "in_memory"
      ],
      "size_lines": 9,
      "has_main": false,
      "docstring": null
    },
    "rp_ptpdb/__init__.py": {
      "functions": [
        "get_line_prefix_tokens",
        "width",
        "set_trace",
        "set_trace_post_mortem",
        "set_trace_shallow",
        "__init__",
        "get_completions",
        "__init__",
        "validate",
        "__init__",
        "lex_document",
        "__init__",
        "get_width",
        "create_margin",
        "invalidation_hash",
        "__init__",
        "_create_accept_action",
        "cmdloop",
        "_get_current_pdb_commands",
        "_create_grammar",
        "_get_input",
        "_show_source_code",
        "_get_source_code_document",
        "postcmd",
        "preloop",
        "do_interact",
        "error",
        "print_stack_entry",
        "do_list",
        "_print_lines_2",
        "message",
        "handler",
        "pre_run",
        "add_margin",
        "get_line"
      ],
      "classes": [
        "DynamicCompleter",
        "DynamicValidator",
        "PdbLexer",
        "SourceCodeMargin",
        "PtPdb"
      ],
      "imports": [
        "__future__",
        "pygments.lexers",
        "pygments.token",
        "rp.prompt_toolkit.buffer",
        "rp.prompt_toolkit.completion",
        "rp.prompt_toolkit.contrib.regular_languages.completion",
        "rp.prompt_toolkit.contrib.regular_languages.validation",
        "rp.prompt_toolkit.document",
        "rp.prompt_toolkit.enums",
        "rp.prompt_toolkit.filters",
        "rp.prompt_toolkit.interface",
        "rp.prompt_toolkit.layout.containers",
        "rp.prompt_toolkit.layout.controls",
        "rp.prompt_toolkit.layout.dimension",
        "rp.prompt_toolkit.layout.lexers",
        "rp.prompt_toolkit.layout.margins",
        "rp.prompt_toolkit.layout.processors",
        "rp.prompt_toolkit.layout.utils",
        "rp.prompt_toolkit.shortcuts",
        "rp.prompt_toolkit.validation",
        "rp.rp_ptpython.completer",
        "rp.rp_ptpython.layout",
        "rp.rp_ptpython.python_input",
        "rp.rp_ptpython.repl",
        "rp.rp_ptpython.validator",
        "commands",
        "completers",
        "grammar",
        "key_bindings",
        "layout",
        "toolbars",
        "completion_hints",
        "style",
        "linecache",
        "os",
        "pdb",
        "six",
        "sys",
        "weakref",
        "rp.r_iterm_comm",
        "rp"
      ],
      "size_lines": 576,
      "has_main": false,
      "docstring": "Python debugger prompt.\nEnhanced version of Pdb, using a prompt-toolkit front-end.\n\nUsage::\n\n    from rp.prompt_toolkit.contrib.pdb import set_trace\n    set_trace()"
    },
    "downloads/ml-depth-pro/src/depth_pro/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "depth_pro",
        "utils"
      ],
      "size_lines": 6,
      "has_main": false,
      "docstring": "Depth Pro package."
    },
    "downloads/ml-depth-pro/src/depth_pro/network/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 3,
      "has_main": false,
      "docstring": "Depth Pro network blocks."
    },
    "downloads/ml-depth-pro/src/depth_pro/cli/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "run"
      ],
      "size_lines": 5,
      "has_main": false,
      "docstring": "Depth Pro CLI and tools."
    },
    "downloads/perlin-numpy/perlin_numpy/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "perlin3d",
        "perlin2d"
      ],
      "size_lines": 3,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/unit_tests/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/unit_tests/connectors/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/unit_tests/connectors/sqla/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/unit_tests/datasource/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/unit_tests/tables/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/unit_tests/distributed_lock/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 1,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/unit_tests/migrations/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/unit_tests/migrations/shared/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/unit_tests/migrations/viz/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/unit_tests/pandas_postprocessing/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/unit_tests/databases/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/unit_tests/databases/dao/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/unit_tests/databases/ssh_tunnel/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/unit_tests/databases/ssh_tunnel/commands/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/unit_tests/databases/commands/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/unit_tests/databases/commands/importers/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/unit_tests/databases/commands/importers/v1/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/unit_tests/tasks/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/unit_tests/security/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/unit_tests/datasets/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/unit_tests/datasets/dao/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/unit_tests/datasets/commands/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/unit_tests/datasets/commands/importers/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/unit_tests/datasets/commands/importers/v1/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/unit_tests/dao/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/unit_tests/queries/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/unit_tests/charts/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/unit_tests/charts/dao/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/unit_tests/charts/commands/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/unit_tests/charts/commands/importers/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/unit_tests/charts/commands/importers/v1/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/unit_tests/utils/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/unit_tests/importexport/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/unit_tests/models/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/unit_tests/explore/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/unit_tests/extensions/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/unit_tests/tags/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/unit_tests/common/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/unit_tests/db_engine_specs/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/unit_tests/async_events/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/unit_tests/dashboards/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/unit_tests/dashboards/commands/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/unit_tests/dashboards/commands/importers/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/unit_tests/dashboards/commands/importers/v1/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/unit_tests/annotation_layers/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/unit_tests/fixtures/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/unit_tests/commands/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/unit_tests/commands/databases/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/unit_tests/commands/databases/importers/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/unit_tests/commands/databases/importers/v1/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/unit_tests/commands/importers/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/unit_tests/commands/importers/v1/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/unit_tests/commands/dataset/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/unit_tests/commands/dashboard/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/unit_tests/key_value/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/unit_tests/columns/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/unit_tests/advanced_data_type/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/unit_tests/reports/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/unit_tests/thumbnails/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/unit_tests/sql/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/integration_tests/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/integration_tests/datasource/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/integration_tests/migrations/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/integration_tests/databases/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/integration_tests/databases/ssh_tunnel/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/integration_tests/databases/ssh_tunnel/commands/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/integration_tests/databases/commands/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/integration_tests/tasks/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/integration_tests/security/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/integration_tests/available_domains/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/integration_tests/datasets/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/integration_tests/queries/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/integration_tests/queries/saved_queries/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/integration_tests/charts/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/integration_tests/charts/data/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/integration_tests/utils/__init__.py": {
      "functions": [
        "read_fixture",
        "load_fixture"
      ],
      "classes": [],
      "imports": [
        "os",
        "superset.utils"
      ],
      "size_lines": 31,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/integration_tests/importexport/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/integration_tests/explore/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/integration_tests/explore/permalink/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/integration_tests/explore/form_data/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/integration_tests/extensions/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/integration_tests/tags/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/integration_tests/css_templates/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/integration_tests/sql_lab/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/integration_tests/sql_lab/permalink/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/integration_tests/db_engine_specs/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/integration_tests/async_events/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/integration_tests/dashboards/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/integration_tests/dashboards/permalink/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/integration_tests/dashboards/security/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/integration_tests/dashboards/filter_state/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/integration_tests/users/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/integration_tests/annotation_layers/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/integration_tests/fixtures/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "birth_names_dashboard",
        "energy_dashboard",
        "public_role",
        "unicode_dashboard",
        "world_bank_dashboard"
      ],
      "size_lines": 38,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/integration_tests/cachekeys/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/integration_tests/advanced_data_type/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/integration_tests/embedded/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/integration_tests/reports/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/example_data/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/example_data/data_loading/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/example_data/data_loading/data_definitions/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/example_data/data_loading/pandas/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/example_data/data_generator/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 26,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/example_data/data_generator/tests/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 26,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/example_data/data_generator/birth_names/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/common/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/fixtures/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 19,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/tests/consts/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "flask",
        "werkzeug.local",
        "superset.app",
        "superset.extensions",
        "superset.security"
      ],
      "size_lines": 50,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/connectors/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/connectors/sqla/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 18,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/datasource/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/tables/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/distributed_lock/__init__.py": {
      "functions": [
        "KeyValueDistributedLock"
      ],
      "classes": [],
      "imports": [
        "__future__",
        "logging",
        "uuid",
        "collections.abc",
        "contextlib",
        "datetime",
        "typing",
        "superset.distributed_lock.utils",
        "superset.exceptions",
        "superset.key_value.types",
        "superset.commands.distributed_lock.create",
        "superset.commands.distributed_lock.delete",
        "superset.commands.distributed_lock.get"
      ],
      "size_lines": 78,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/migrations/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "os",
        "sys"
      ],
      "size_lines": 24,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/migrations/versions/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/migrations/shared/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/migrations/shared/migrate_viz/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "processors"
      ],
      "size_lines": 18,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/databases/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/databases/ssh_tunnel/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/tasks/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/sql_validators/__init__.py": {
      "functions": [
        "get_validator_by_name"
      ],
      "classes": [],
      "imports": [
        "typing",
        "base"
      ],
      "size_lines": 28,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/security/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "superset.security.manager"
      ],
      "size_lines": 18,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/available_domains/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/datasets/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/datasets/metrics/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/datasets/columns/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/queries/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/queries/saved_queries/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/charts/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/charts/data/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/utils/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/utils/pandas_postprocessing/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "superset.utils.pandas_postprocessing.aggregate",
        "superset.utils.pandas_postprocessing.boxplot",
        "superset.utils.pandas_postprocessing.compare",
        "superset.utils.pandas_postprocessing.contribution",
        "superset.utils.pandas_postprocessing.cum",
        "superset.utils.pandas_postprocessing.diff",
        "superset.utils.pandas_postprocessing.flatten",
        "superset.utils.pandas_postprocessing.geography",
        "superset.utils.pandas_postprocessing.histogram",
        "superset.utils.pandas_postprocessing.pivot",
        "superset.utils.pandas_postprocessing.prophet",
        "superset.utils.pandas_postprocessing.rank",
        "superset.utils.pandas_postprocessing.rename",
        "superset.utils.pandas_postprocessing.resample",
        "superset.utils.pandas_postprocessing.rolling",
        "superset.utils.pandas_postprocessing.select",
        "superset.utils.pandas_postprocessing.sort",
        "superset.utils.pandas_postprocessing.utils"
      ],
      "size_lines": 66,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/importexport/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/models/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 18,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/models/sql_types/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/cli/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/initialization/__init__.py": {
      "functions": [
        "__init__",
        "flask_app",
        "pre_init",
        "post_init",
        "configure_celery",
        "init_views",
        "init_app_in_ctx",
        "check_secret_key",
        "configure_session",
        "init_app",
        "set_db_default_isolation",
        "configure_auth_provider",
        "configure_ssh_manager",
        "configure_stats_manager",
        "setup_event_logger",
        "configure_data_sources",
        "configure_cache",
        "configure_feature_flags",
        "configure_sqlglot_dialects",
        "configure_fab",
        "configure_url_map_converters",
        "configure_middlewares",
        "configure_logging",
        "configure_db_encrypt",
        "setup_db",
        "configure_wtf",
        "configure_async_queries",
        "register_blueprints",
        "setup_bundle_manifest",
        "enable_profiling",
        "index",
        "log_default_secret_key_warning",
        "__call__",
        "__init__",
        "__call__"
      ],
      "classes": [
        "SupersetAppInitializer",
        "SupersetIndexView",
        "AppContextTask",
        "ChunkedEncodingFix"
      ],
      "imports": [
        "__future__",
        "contextlib",
        "logging",
        "os",
        "sys",
        "typing",
        "wtforms_json",
        "deprecation",
        "flask",
        "flask_appbuilder",
        "flask_babel",
        "flask_compress",
        "flask_session",
        "werkzeug.middleware.proxy_fix",
        "superset.constants",
        "superset.databases.utils",
        "superset.extensions",
        "superset.security",
        "superset.sql.parse",
        "superset.superset_typing",
        "superset.tags.core",
        "superset.utils.core",
        "superset.utils.decorators",
        "superset.utils.log",
        "superset.app",
        "superset.advanced_data_type.api",
        "superset.annotation_layers.annotations.api",
        "superset.annotation_layers.api",
        "superset.async_events.api",
        "superset.available_domains.api",
        "superset.cachekeys.api",
        "superset.charts.api",
        "superset.charts.data.api",
        "superset.connectors.sqla.views",
        "superset.css_templates.api",
        "superset.dashboards.api",
        "superset.dashboards.filter_state.api",
        "superset.dashboards.permalink.api",
        "superset.databases.api",
        "superset.datasets.api",
        "superset.datasets.columns.api",
        "superset.datasets.metrics.api",
        "superset.datasource.api",
        "superset.embedded.api",
        "superset.embedded.view",
        "superset.explore.api",
        "superset.explore.form_data.api",
        "superset.explore.permalink.api",
        "superset.importexport.api",
        "superset.queries.api",
        "superset.queries.saved_queries.api",
        "superset.reports.api",
        "superset.reports.logs.api",
        "superset.row_level_security.api",
        "superset.security.api",
        "superset.sqllab.api",
        "superset.sqllab.permalink.api",
        "superset.tags.api",
        "superset.views.alerts",
        "superset.views.all_entities",
        "superset.views.annotations",
        "superset.views.api",
        "superset.views.chart.views",
        "superset.views.core",
        "superset.views.css_templates",
        "superset.views.dashboard.views",
        "superset.views.database.views",
        "superset.views.datasource.views",
        "superset.views.dynamic_plugins",
        "superset.views.error_handling",
        "superset.views.explore",
        "superset.views.log.api",
        "superset.views.log.views",
        "superset.views.sql_lab.views",
        "superset.views.sqllab",
        "superset.views.tags",
        "superset.views.users.api",
        "superset.utils.url_map_converters",
        "flask_cors"
      ],
      "size_lines": 696,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/explore/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/explore/permalink/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/explore/form_data/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/extensions/__init__.py": {
      "functions": [
        "__init__",
        "init_app",
        "results_backend",
        "should_use_msgpack",
        "__init__",
        "init_app",
        "register_processor",
        "get_manifest",
        "parse_manifest_json",
        "get_manifest_files",
        "__init__",
        "init_app",
        "get_files"
      ],
      "classes": [
        "ResultsBackendManager",
        "UIManifestProcessor",
        "ProfilingExtension"
      ],
      "imports": [
        "json",
        "os",
        "typing",
        "celery",
        "flask",
        "flask_appbuilder",
        "flask_caching.backends.base",
        "flask_migrate",
        "flask_talisman",
        "flask_wtf.csrf",
        "werkzeug.local",
        "superset.async_events.async_query_manager",
        "superset.async_events.async_query_manager_factory",
        "superset.extensions.ssh",
        "superset.extensions.stats_logger",
        "superset.security.manager",
        "superset.utils.cache_manager",
        "superset.utils.encrypt",
        "superset.utils.feature_flag_manager",
        "superset.utils.machine_auth",
        "superset.utils.profiler"
      ],
      "size_lines": 140,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/tags/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/css_templates/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/common/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/common/utils/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/db_engine_specs/__init__.py": {
      "functions": [
        "is_engine_spec",
        "load_engine_specs",
        "get_engine_spec",
        "get_available_engine_specs"
      ],
      "classes": [],
      "imports": [
        "inspect",
        "logging",
        "pkgutil",
        "collections",
        "importlib",
        "pathlib",
        "typing",
        "sqlalchemy.dialects",
        "importlib_metadata",
        "sqlalchemy.engine.default",
        "sqlalchemy.exc",
        "superset",
        "superset.db_engine_specs.base"
      ],
      "size_lines": 195,
      "has_main": false,
      "docstring": "Compatibility layer for different database engines\n\nThis modules stores logic specific to different database engines. Things\nlike time-related functions that are similar but not identical, or\ninformation as to expose certain features or not and how to expose them.\n\nFor instance, Hive/Presto supports partitions and have a specific API to\nlist partitions. Other databases like Vertica also support partitions but\nhave different API to get to them. Other databases don't support partitions\nat all. The classes here will use a common interface to specify all this.\n\nThe general idea is to use static classes and an inheritance scheme."
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/embedded_dashboard/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/row_level_security/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/async_events/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/dashboards/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/dashboards/permalink/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/dashboards/filter_state/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/examples/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/temporary_cache/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/annotation_layers/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/annotation_layers/annotations/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/commands/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/commands/database/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/commands/database/uploaders/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/commands/database/importers/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/commands/database/importers/v1/__init__.py": {
      "functions": [
        "_import"
      ],
      "classes": [
        "ImportDatabasesCommand"
      ],
      "imports": [
        "typing",
        "marshmallow",
        "sqlalchemy.orm",
        "superset.commands.database.exceptions",
        "superset.commands.database.importers.v1.utils",
        "superset.commands.dataset.importers.v1.utils",
        "superset.commands.importers.v1",
        "superset.daos.database",
        "superset.databases.schemas",
        "superset.datasets.schemas"
      ],
      "size_lines": 62,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/commands/database/ssh_tunnel/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/commands/distributed_lock/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 1,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/commands/importers/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/commands/importers/v1/__init__.py": {
      "functions": [
        "__init__",
        "_import",
        "_get_uuids",
        "run",
        "validate",
        "_prevent_overwrite_existing_model"
      ],
      "classes": [
        "ImportModelsCommand"
      ],
      "imports": [
        "logging",
        "typing",
        "marshmallow",
        "marshmallow.exceptions",
        "sqlalchemy.orm",
        "superset",
        "superset.commands.base",
        "superset.commands.exceptions",
        "superset.commands.importers.v1.utils",
        "superset.daos.base",
        "superset.models.core",
        "superset.utils.decorators"
      ],
      "size_lines": 138,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/commands/css/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/commands/security/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/commands/dataset/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/commands/dataset/metrics/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/commands/dataset/importers/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/commands/dataset/importers/v1/__init__.py": {
      "functions": [
        "_import"
      ],
      "classes": [
        "ImportDatasetsCommand"
      ],
      "imports": [
        "typing",
        "marshmallow",
        "sqlalchemy.orm",
        "superset.commands.database.importers.v1.utils",
        "superset.commands.dataset.exceptions",
        "superset.commands.dataset.importers.v1.utils",
        "superset.commands.importers.v1",
        "superset.daos.dataset",
        "superset.databases.schemas",
        "superset.datasets.schemas"
      ],
      "size_lines": 67,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/commands/dataset/columns/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/commands/chart/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/commands/chart/importers/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/commands/chart/importers/v1/__init__.py": {
      "functions": [
        "_import"
      ],
      "classes": [
        "ImportChartsCommand"
      ],
      "imports": [
        "typing",
        "marshmallow",
        "sqlalchemy.orm",
        "superset.charts.schemas",
        "superset.commands.chart.exceptions",
        "superset.commands.chart.importers.v1.utils",
        "superset.commands.database.importers.v1.utils",
        "superset.commands.dataset.importers.v1.utils",
        "superset.commands.importers.v1",
        "superset.commands.utils",
        "superset.connectors.sqla.models",
        "superset.daos.chart",
        "superset.databases.schemas",
        "superset.datasets.schemas"
      ],
      "size_lines": 97,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/commands/chart/data/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/commands/annotation_layer/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/commands/annotation_layer/annotation/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/commands/explore/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/commands/explore/permalink/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/commands/explore/form_data/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/commands/dashboard/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/commands/dashboard/permalink/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/commands/dashboard/importers/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/commands/dashboard/importers/v1/__init__.py": {
      "functions": [
        "_import"
      ],
      "classes": [
        "ImportDashboardsCommand"
      ],
      "imports": [
        "typing",
        "marshmallow",
        "sqlalchemy.orm",
        "sqlalchemy.sql",
        "superset",
        "superset.charts.schemas",
        "superset.commands.chart.importers.v1.utils",
        "superset.commands.dashboard.exceptions",
        "superset.commands.dashboard.importers.v1.utils",
        "superset.commands.database.importers.v1.utils",
        "superset.commands.dataset.importers.v1.utils",
        "superset.commands.importers.v1",
        "superset.commands.utils",
        "superset.daos.dashboard",
        "superset.dashboards.schemas",
        "superset.databases.schemas",
        "superset.datasets.schemas",
        "superset.migrations.shared.native_filters",
        "superset.models.dashboard"
      ],
      "size_lines": 158,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/commands/dashboard/filter_state/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/commands/dashboard/embedded/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/commands/sql_lab/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/commands/sql_lab/permalink/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/commands/temporary_cache/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/commands/report/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/commands/export/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/commands/query/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/commands/query/importers/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/commands/query/importers/v1/__init__.py": {
      "functions": [
        "_import"
      ],
      "classes": [
        "ImportSavedQueriesCommand"
      ],
      "imports": [
        "typing",
        "marshmallow",
        "sqlalchemy.orm",
        "superset.commands.database.importers.v1.utils",
        "superset.commands.importers.v1",
        "superset.commands.query.exceptions",
        "superset.commands.query.importers.v1.utils",
        "superset.connectors.sqla.models",
        "superset.daos.query",
        "superset.databases.schemas",
        "superset.queries.saved_queries.schemas"
      ],
      "size_lines": 68,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/commands/tag/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/key_value/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/columns/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/cachekeys/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/views/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "log"
      ],
      "size_lines": 43,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/views/datasource/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/views/database/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/views/chart/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/views/dashboard/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/views/sql_lab/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/views/users/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/views/log/__init__.py": {
      "functions": [],
      "classes": [
        "LogMixin"
      ],
      "imports": [
        "flask_babel"
      ],
      "size_lines": 35,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/advanced_data_type/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/advanced_data_type/plugins/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/embedded/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/translations/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/sqllab/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/sqllab/permalink/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/daos/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/reports/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/reports/logs/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/reports/notifications/__init__.py": {
      "functions": [
        "create_notification"
      ],
      "classes": [],
      "imports": [
        "superset.reports.models",
        "superset.reports.notifications.base",
        "superset.reports.notifications.email",
        "superset.reports.notifications.slack",
        "superset.reports.notifications.slackv2"
      ],
      "size_lines": 37,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/thumbnails/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/sql/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "outputs/claudecode/workspace_1743378315510/test_output/superset-master/superset/sql/dialects/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "firebolt"
      ],
      "size_lines": 21,
      "has_main": false,
      "docstring": null
    },
    "git/ControlNet/annotator/__init__.py": {
      "functions": [
        "_is_divisible_by_patch_size",
        "_round_to_nearest_patch_size",
        "run_hed",
        "run_midas",
        "run_midas_normals",
        "run_openpose",
        "run_uniformer",
        "run_annotator_demo",
        "decorator",
        "wrapper",
        "append"
      ],
      "classes": [],
      "imports": [
        "rp",
        "sys",
        "functools",
        "canny",
        "hed",
        "midas",
        "openpose",
        "uniformer",
        "mlsd"
      ],
      "size_lines": 160,
      "has_main": true,
      "docstring": "ControlNet Annotators\n\nThis module provides annotators for generating control maps for ControlNet models.\nEach annotator creates a specialized map (edge, depth, pose, etc.) that can be used\nto guide the image generation process.\n\nSeveral functions are made to wrap Annotators.\nYou can simply call them! You only need to specify the device on the first call.\nThey input and output images as defined by rp.is_image\n\nAnnotators:\n- CannyDetector: Creates edge maps using Canny edge detection algorithm\n- HEDdetector: Creates soft edge maps using Holistically-Nested Edge Detection\n- MidasDetector: Creates depth maps for 3D structure understanding\n- MLSDdetector: Detects line segments for structural guidance\n- OpenposeDetector: Detects human poses including body and hand positions\n- UniformerDetector: Creates semantic segmentation maps\n\nNote: All annotators except CannyDetector support specifying a custom device."
    },
    "git/ControlNet/annotator/uniformer/__init__.py": {
      "functions": [
        "UniformerDetector",
        "__init__",
        "__call__"
      ],
      "classes": [
        "_UniformerDetector"
      ],
      "imports": [
        "os",
        "annotator.uniformer.mmseg.apis",
        "annotator.uniformer.mmseg.core.evaluation",
        "annotator.util",
        "rp",
        "basicsr.utils.download_util"
      ],
      "size_lines": 42,
      "has_main": false,
      "docstring": null
    },
    "git/ControlNet/annotator/uniformer/mmseg/apis/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "inference",
        "test",
        "train"
      ],
      "size_lines": 10,
      "has_main": false,
      "docstring": null
    },
    "git/ControlNet/annotator/uniformer/mmseg/core/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "evaluation",
        "seg",
        "utils"
      ],
      "size_lines": 4,
      "has_main": false,
      "docstring": null
    },
    "git/ControlNet/annotator/uniformer/mmseg/core/utils/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "misc"
      ],
      "size_lines": 4,
      "has_main": false,
      "docstring": null
    },
    "git/ControlNet/annotator/uniformer/mmseg/core/evaluation/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "class_names",
        "eval_hooks",
        "metrics"
      ],
      "size_lines": 9,
      "has_main": false,
      "docstring": null
    },
    "git/ControlNet/annotator/uniformer/mmseg/core/seg/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "builder",
        "sampler"
      ],
      "size_lines": 5,
      "has_main": false,
      "docstring": null
    },
    "git/ControlNet/annotator/uniformer/mmseg/core/seg/sampler/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "base_pixel_sampler",
        "ohem_pixel_sampler"
      ],
      "size_lines": 5,
      "has_main": false,
      "docstring": null
    },
    "git/ControlNet/annotator/uniformer/mmseg/datasets/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "ade",
        "builder",
        "chase_db1",
        "cityscapes",
        "custom",
        "dataset_wrappers",
        "drive",
        "hrf",
        "pascal_context",
        "stare",
        "voc"
      ],
      "size_lines": 20,
      "has_main": false,
      "docstring": null
    },
    "git/ControlNet/annotator/uniformer/mmseg/datasets/pipelines/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "compose",
        "formating",
        "loading",
        "test_time_aug",
        "transforms"
      ],
      "size_lines": 17,
      "has_main": false,
      "docstring": null
    },
    "git/ControlNet/annotator/uniformer/mmseg/utils/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "collect_env",
        "logger"
      ],
      "size_lines": 5,
      "has_main": false,
      "docstring": null
    },
    "git/ControlNet/annotator/uniformer/mmseg/models/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "backbones",
        "builder",
        "decode_heads",
        "losses",
        "necks",
        "segmentors"
      ],
      "size_lines": 13,
      "has_main": false,
      "docstring": null
    },
    "git/ControlNet/annotator/uniformer/mmseg/models/losses/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "accuracy",
        "cross_entropy_loss",
        "dice_loss",
        "lovasz_loss",
        "utils"
      ],
      "size_lines": 13,
      "has_main": false,
      "docstring": null
    },
    "git/ControlNet/annotator/uniformer/mmseg/models/necks/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "fpn",
        "multilevel_neck"
      ],
      "size_lines": 5,
      "has_main": false,
      "docstring": null
    },
    "git/ControlNet/annotator/uniformer/mmseg/models/utils/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "drop",
        "inverted_residual",
        "make_divisible",
        "res_layer",
        "se_layer",
        "self_attention_block",
        "up_conv_block",
        "weight_init"
      ],
      "size_lines": 14,
      "has_main": false,
      "docstring": null
    },
    "git/ControlNet/annotator/uniformer/mmseg/models/backbones/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "cgnet",
        "hrnet",
        "mobilenet_v2",
        "mobilenet_v3",
        "resnest",
        "resnet",
        "resnext",
        "unet",
        "vit",
        "uniformer"
      ],
      "size_lines": 18,
      "has_main": false,
      "docstring": null
    },
    "git/ControlNet/annotator/uniformer/mmseg/models/segmentors/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "base",
        "cascade_encoder_decoder",
        "encoder_decoder"
      ],
      "size_lines": 6,
      "has_main": false,
      "docstring": null
    },
    "git/ControlNet/annotator/uniformer/mmseg/models/decode_heads/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "ann_head",
        "apc_head",
        "aspp_head",
        "cc_head",
        "da_head",
        "dm_head",
        "dnl_head",
        "ema_head",
        "enc_head",
        "fcn_head",
        "fpn_head",
        "gc_head",
        "lraspp_head",
        "nl_head",
        "ocr_head",
        "psa_head",
        "psp_head",
        "sep_aspp_head",
        "sep_fcn_head",
        "uper_head"
      ],
      "size_lines": 29,
      "has_main": false,
      "docstring": null
    },
    "git/ControlNet/annotator/uniformer/mmseg/ops/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "encoding",
        "wrappers"
      ],
      "size_lines": 5,
      "has_main": false,
      "docstring": null
    },
    "git/ControlNet/annotator/uniformer/mmcv_custom/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "checkpoint"
      ],
      "size_lines": 5,
      "has_main": false,
      "docstring": null
    },
    "git/ControlNet/annotator/uniformer/mmcv/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "arraymisc",
        "fileio",
        "image",
        "utils",
        "version",
        "video",
        "visualization"
      ],
      "size_lines": 16,
      "has_main": false,
      "docstring": null
    },
    "git/ControlNet/annotator/uniformer/mmcv/arraymisc/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "quantization"
      ],
      "size_lines": 5,
      "has_main": false,
      "docstring": null
    },
    "git/ControlNet/annotator/uniformer/mmcv/visualization/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "color",
        "image",
        "optflow"
      ],
      "size_lines": 10,
      "has_main": false,
      "docstring": null
    },
    "git/ControlNet/annotator/uniformer/mmcv/video/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "io",
        "optflow",
        "processing"
      ],
      "size_lines": 12,
      "has_main": false,
      "docstring": null
    },
    "git/ControlNet/annotator/uniformer/mmcv/parallel/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "collate",
        "data_container",
        "data_parallel",
        "distributed",
        "registry",
        "scatter_gather",
        "utils"
      ],
      "size_lines": 14,
      "has_main": false,
      "docstring": null
    },
    "git/ControlNet/annotator/uniformer/mmcv/fileio/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "file_client",
        "handlers",
        "io",
        "parse"
      ],
      "size_lines": 12,
      "has_main": false,
      "docstring": null
    },
    "git/ControlNet/annotator/uniformer/mmcv/fileio/handlers/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "base",
        "json_handler",
        "pickle_handler",
        "yaml_handler"
      ],
      "size_lines": 8,
      "has_main": false,
      "docstring": null
    },
    "git/ControlNet/annotator/uniformer/mmcv/runner/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "base_module",
        "base_runner",
        "builder",
        "checkpoint",
        "default_constructor",
        "dist_utils",
        "epoch_based_runner",
        "fp16_utils",
        "hooks",
        "iter_based_runner",
        "log_buffer",
        "optimizer",
        "priority",
        "utils"
      ],
      "size_lines": 48,
      "has_main": false,
      "docstring": null
    },
    "git/ControlNet/annotator/uniformer/mmcv/runner/optimizer/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "builder",
        "default_constructor"
      ],
      "size_lines": 10,
      "has_main": false,
      "docstring": null
    },
    "git/ControlNet/annotator/uniformer/mmcv/runner/hooks/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "checkpoint",
        "closure",
        "ema",
        "evaluation",
        "hook",
        "iter_timer",
        "logger",
        "lr_updater",
        "memory",
        "momentum_updater",
        "optimizer",
        "profiler",
        "sampler_seed",
        "sync_buffer"
      ],
      "size_lines": 30,
      "has_main": false,
      "docstring": null
    },
    "git/ControlNet/annotator/uniformer/mmcv/runner/hooks/logger/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "base",
        "dvclive",
        "mlflow",
        "neptune",
        "pavi",
        "tensorboard",
        "text",
        "wandb"
      ],
      "size_lines": 16,
      "has_main": false,
      "docstring": null
    },
    "git/ControlNet/annotator/uniformer/mmcv/utils/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "config",
        "misc",
        "path",
        "progressbar",
        "testing",
        "timer",
        "version_utils",
        "torch",
        "env",
        "logging",
        "parrots_jit",
        "parrots_wrapper",
        "registry",
        "trace"
      ],
      "size_lines": 70,
      "has_main": false,
      "docstring": null
    },
    "git/ControlNet/annotator/uniformer/mmcv/image/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "colorspace",
        "geometric",
        "io",
        "misc",
        "photometric"
      ],
      "size_lines": 29,
      "has_main": false,
      "docstring": null
    },
    "git/ControlNet/annotator/uniformer/mmcv/cnn/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "alexnet",
        "bricks",
        "builder",
        "resnet",
        "utils",
        "vgg"
      ],
      "size_lines": 42,
      "has_main": false,
      "docstring": null
    },
    "git/ControlNet/annotator/uniformer/mmcv/cnn/bricks/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "activation",
        "context_block",
        "conv",
        "conv2d_adaptive_padding",
        "conv_module",
        "conv_ws",
        "depthwise_separable_conv_module",
        "drop",
        "generalized_attention",
        "hsigmoid",
        "hswish",
        "non_local",
        "norm",
        "padding",
        "plugin",
        "registry",
        "scale",
        "swish",
        "upsample",
        "wrappers"
      ],
      "size_lines": 36,
      "has_main": false,
      "docstring": null
    },
    "git/ControlNet/annotator/uniformer/mmcv/cnn/utils/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "flops_counter",
        "fuse_conv_bn",
        "sync_bn",
        "weight_init"
      ],
      "size_lines": 20,
      "has_main": false,
      "docstring": null
    },
    "git/ControlNet/annotator/uniformer/mmcv/ops/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "assign_score_withk",
        "ball_query",
        "bbox",
        "border_align",
        "box_iou_rotated",
        "carafe",
        "cc_attention",
        "contour_expand",
        "corner_pool",
        "correlation",
        "deform_conv",
        "deform_roi_pool",
        "deprecated_wrappers",
        "deprecated_wrappers",
        "deprecated_wrappers",
        "deprecated_wrappers",
        "focal_loss",
        "furthest_point_sample",
        "fused_bias_leakyrelu",
        "gather_points",
        "group_points",
        "info",
        "iou3d",
        "knn",
        "masked_conv",
        "modulated_deform_conv",
        "multi_scale_deform_attn",
        "nms",
        "pixel_group",
        "point_sample",
        "points_in_boxes",
        "points_sampler",
        "psa_mask",
        "roi_align",
        "roi_align_rotated",
        "roi_pool",
        "roiaware_pool3d",
        "roipoint_pool3d",
        "saconv",
        "scatter_points",
        "sync_bn",
        "three_interpolate",
        "three_nn",
        "tin_shift",
        "upfirdn2d",
        "voxelize"
      ],
      "size_lines": 82,
      "has_main": false,
      "docstring": null
    },
    "git/ControlNet/annotator/uniformer/mmcv/engine/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "test"
      ],
      "size_lines": 9,
      "has_main": false,
      "docstring": null
    },
    "git/ControlNet/annotator/hed/__init__.py": {
      "functions": [
        "HEDdetector",
        "nms",
        "__init__",
        "__call__",
        "__init__",
        "__call__",
        "__init__",
        "__call__"
      ],
      "classes": [
        "DoubleConvBlock",
        "ControlNetHED_Apache2",
        "_HEDdetector"
      ],
      "imports": [
        "os",
        "cv2",
        "torch",
        "numpy",
        "einops",
        "annotator.util",
        "rp",
        "basicsr.utils.download_util"
      ],
      "size_lines": 109,
      "has_main": false,
      "docstring": null
    },
    "git/ControlNet/annotator/openpose/__init__.py": {
      "functions": [
        "OpenposeDetector",
        "__init__",
        "__call__"
      ],
      "classes": [
        "_OpenposeDetector"
      ],
      "imports": [
        "os",
        "torch",
        "numpy",
        "body",
        "hand",
        "annotator.util",
        "rp",
        "basicsr.utils.download_util"
      ],
      "size_lines": 64,
      "has_main": false,
      "docstring": null
    },
    "git/ControlNet/annotator/midas/__init__.py": {
      "functions": [
        "MidasDetector",
        "__init__",
        "__call__"
      ],
      "classes": [
        "_MidasDetector"
      ],
      "imports": [
        "cv2",
        "numpy",
        "torch",
        "einops",
        "api",
        "rp"
      ],
      "size_lines": 57,
      "has_main": false,
      "docstring": null
    },
    "git/ControlNet/annotator/midas/midas/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 1,
      "has_main": false,
      "docstring": null
    },
    "git/ControlNet/annotator/mlsd/__init__.py": {
      "functions": [
        "MLSDdetector",
        "__init__",
        "__call__"
      ],
      "classes": [
        "_MLSDdetector"
      ],
      "imports": [
        "cv2",
        "numpy",
        "torch",
        "os",
        "einops",
        "models.mbv2_mlsd_tiny",
        "models.mbv2_mlsd_large",
        "utils",
        "annotator.util",
        "rp",
        "basicsr.utils.download_util"
      ],
      "size_lines": 58,
      "has_main": false,
      "docstring": null
    },
    "git/ControlNet/annotator/canny/__init__.py": {
      "functions": [
        "__call__"
      ],
      "classes": [
        "CannyDetector"
      ],
      "imports": [
        "cv2"
      ],
      "size_lines": 8,
      "has_main": false,
      "docstring": null
    },
    "git/ControlNet/ldm/models/diffusion/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 1,
      "has_main": false,
      "docstring": null
    },
    "git/ControlNet/ldm/models/diffusion/dpm_solver/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "sampler"
      ],
      "size_lines": 1,
      "has_main": false,
      "docstring": null
    },
    "git/ControlNet/ldm/modules/midas/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 1,
      "has_main": false,
      "docstring": null
    },
    "git/ControlNet/ldm/modules/midas/midas/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 1,
      "has_main": false,
      "docstring": null
    },
    "git/ControlNet/ldm/modules/encoders/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 1,
      "has_main": false,
      "docstring": null
    },
    "git/ControlNet/ldm/modules/image_degradation/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "ldm.modules.image_degradation.bsrgan",
        "ldm.modules.image_degradation.bsrgan_light"
      ],
      "size_lines": 3,
      "has_main": false,
      "docstring": null
    },
    "git/ControlNet/ldm/modules/diffusionmodules/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 1,
      "has_main": false,
      "docstring": null
    },
    "git/ControlNet/ldm/modules/distributions/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 1,
      "has_main": false,
      "docstring": null
    },
    "git/ControlNet/ldm/data/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 1,
      "has_main": false,
      "docstring": null
    },
    "git/remove_watermark/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [
        "remove_watermark"
      ],
      "size_lines": 2,
      "has_main": false,
      "docstring": null
    },
    "git/CommonSource/__init__.py": {
      "functions": [],
      "classes": [],
      "imports": [],
      "size_lines": 1,
      "has_main": false,
      "docstring": null
    },
    "git/CommonSource/projects/counterfactual/dotted_latents/__init__.py": {
      "functions": [
        "_fast_scatter_add",
        "_get_all_mask_positions",
        "_get_random_mask_positions",
        "generate_dotted_latents",
        "demo_dotted_latents"
      ],
      "classes": [],
      "imports": [
        "rp",
        "torch",
        "numpy"
      ],
      "size_lines": 337,
      "has_main": false,
      "docstring": "Motion tracking visualization module for creating control videos.\n\nThis module provides functionality for tracking differences in motion between videos\nby using CoTracker to follow randomly sampled points across video frames and generating\nvisual representations of their paths.\n\nThe main function is `generate_dotted_latents` which creates a control video with\ntracked dots that visualize motion patterns."
    },
    "git/CommonSource/projects/counterfactual/video_augmenter/__init__.py": {
      "error": "f-string expression part cannot include a backslash (<unknown>, line 114)"
    }
  },
  "summary": {
    "total_files": 2621,
    "total_lines": 507755,
    "total_functions": 19247,
    "total_classes": 3336
  }
}
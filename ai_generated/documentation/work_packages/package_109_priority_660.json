{
  "package_id": 109,
  "functions": [
    "is_pil_image",
    "_omni_save_default_extension",
    "horizontally_flipped_image",
    "as_numpy_images",
    "vertically_flipped_image",
    "as_torch_image",
    "_prepare_cv_image",
    "_is_instance_of_module_class"
  ],
  "total_functions": 8,
  "estimated_hours": 6.0,
  "priority_score": 660,
  "context": {
    "is_pil_image": {
      "function_name": "is_pil_image",
      "calls": [
        "_is_instance_of_module_class"
      ],
      "called_by": [
        "get_image_height",
        "get_image_width",
        "as_numpy_images",
        "as_numpy_image",
        "horizontally_flipped_image",
        "vertically_flipped_image",
        "is_image",
        "_prepare_cv_image",
        "display_image",
        "_omni_save_default_extension",
        "as_pil_image",
        "as_torch_image"
      ],
      "aliases": [],
      "via_variants": [],
      "cluster": [
        "get_image_height",
        "get_image_width",
        "as_numpy_images",
        "is_pil_image",
        "as_numpy_image",
        "horizontally_flipped_image",
        "vertically_flipped_image",
        "is_image",
        "_prepare_cv_image",
        "display_image",
        "_omni_save_default_extension",
        "as_pil_image",
        "_is_instance_of_module_class",
        "as_torch_image"
      ],
      "multiplexing": [],
      "is_via_variant": false,
      "is_private": false
    },
    "_omni_save_default_extension": {
      "function_name": "_omni_save_default_extension",
      "calls": [
        "is_pil_image",
        "is_image",
        "is_numpy_array",
        "_is_pandas_dataframe",
        "is_valid_python_syntax",
        "is_torch_tensor"
      ],
      "called_by": [
        "_omni_save"
      ],
      "aliases": [],
      "via_variants": [],
      "cluster": [
        "is_pil_image",
        "is_image",
        "is_numpy_array",
        "_omni_save_default_extension",
        "is_torch_tensor",
        "_is_pandas_dataframe",
        "is_valid_python_syntax",
        "_omni_save"
      ],
      "multiplexing": [],
      "is_via_variant": false,
      "is_private": true
    },
    "horizontally_flipped_image": {
      "function_name": "horizontally_flipped_image",
      "calls": [
        "is_pil_image"
      ],
      "called_by": [
        "get_progress_bar_image",
        "_rotate_rgb_image",
        "crop_image"
      ],
      "aliases": [],
      "via_variants": [],
      "cluster": [
        "get_progress_bar_image",
        "is_pil_image",
        "crop_image",
        "horizontally_flipped_image",
        "_rotate_rgb_image"
      ],
      "multiplexing": [],
      "is_via_variant": false,
      "is_private": false
    },
    "as_numpy_images": {
      "function_name": "as_numpy_images",
      "calls": [
        "as_numpy_image",
        "is_pil_image",
        "is_iterable",
        "is_torch_tensor",
        "as_numpy_array"
      ],
      "called_by": [
        "as_numpy_image",
        "_display_video_via_mediapy"
      ],
      "aliases": [],
      "via_variants": [],
      "cluster": [
        "as_numpy_image",
        "as_numpy_images",
        "is_pil_image",
        "_display_video_via_mediapy",
        "is_iterable",
        "is_torch_tensor",
        "as_numpy_array"
      ],
      "multiplexing": [],
      "is_via_variant": false,
      "is_private": false
    },
    "vertically_flipped_image": {
      "function_name": "vertically_flipped_image",
      "calls": [
        "is_pil_image"
      ],
      "called_by": [
        "_rotate_rgb_image",
        "crop_image"
      ],
      "aliases": [],
      "via_variants": [],
      "cluster": [
        "is_pil_image",
        "crop_image",
        "_rotate_rgb_image",
        "vertically_flipped_image"
      ],
      "multiplexing": [],
      "is_via_variant": false,
      "is_private": false
    },
    "as_torch_image": {
      "function_name": "as_torch_image",
      "calls": [
        "as_numpy_image",
        "gather_args_call",
        "is_pil_image",
        "is_torch_tensor"
      ],
      "called_by": [
        "as_torch_images"
      ],
      "aliases": [],
      "via_variants": [],
      "cluster": [
        "as_numpy_image",
        "gather_args_call",
        "is_pil_image",
        "as_torch_image",
        "as_torch_images",
        "is_torch_tensor"
      ],
      "multiplexing": [],
      "is_via_variant": false,
      "is_private": false
    },
    "_prepare_cv_image": {
      "function_name": "_prepare_cv_image",
      "calls": [
        "as_numpy_image",
        "is_float_image",
        "is_pil_image",
        "is_image",
        "_float_image_dtype"
      ],
      "called_by": [
        "cv_image_filter",
        "cv_box_blur",
        "cv_resize_image"
      ],
      "aliases": [],
      "via_variants": [],
      "cluster": [
        "as_numpy_image",
        "is_float_image",
        "is_pil_image",
        "cv_resize_image",
        "is_image",
        "_prepare_cv_image",
        "cv_image_filter",
        "cv_box_blur",
        "_float_image_dtype"
      ],
      "multiplexing": [],
      "is_via_variant": false,
      "is_private": true
    },
    "_is_instance_of_module_class": {
      "function_name": "_is_instance_of_module_class",
      "calls": [],
      "called_by": [
        "is_pil_image",
        "_is_skia_image",
        "_is_easydict",
        "is_numpy_array",
        "is_torch_module",
        "_is_pandas_series",
        "_is_pandas_dataframe",
        "is_torch_tensor"
      ],
      "aliases": [],
      "via_variants": [],
      "cluster": [
        "is_pil_image",
        "_is_pandas_dataframe",
        "_is_skia_image",
        "_is_easydict",
        "is_numpy_array",
        "is_torch_module",
        "_is_instance_of_module_class",
        "_is_pandas_series",
        "is_torch_tensor"
      ],
      "multiplexing": [],
      "is_via_variant": false,
      "is_private": true
    }
  },
  "documentation_status": {
    "is_pil_image": {
      "current_quality": "basic",
      "current_docstring": "Check if input is a PIL Image instance.\n\nPIL images have limited dtype support compared to NumPy.\nMost RP functions accept PIL but convert to NumPy internally.\nSee also: as_pil_image, is_image",
      "suggestions": [
        "Add concrete usage examples with >>> syntax",
        "Document return value and type"
      ],
      "has_examples": false,
      "has_parameters": false,
      "has_return_info": false
    },
    "_omni_save_default_extension": {
      "current_quality": "missing",
      "current_docstring": "",
      "suggestions": [
        "Add comprehensive docstring with purpose, parameters, and examples"
      ],
      "has_examples": false,
      "has_parameters": false,
      "has_return_info": false
    },
    "horizontally_flipped_image": {
      "current_quality": "basic",
      "current_docstring": "Flips (aka mirrors) an image horizontally.",
      "suggestions": [
        "Add concrete usage examples with >>> syntax",
        "Document function parameters and their types",
        "Document return value and type",
        "Document supported image types and formats",
        "Expand description with more detail about purpose and behavior"
      ],
      "has_examples": false,
      "has_parameters": false,
      "has_return_info": false
    },
    "as_numpy_images": {
      "current_quality": "basic",
      "current_docstring": "Will convert an array of images to BHWC np.ndarray form if it isn't already - supports BCHW torch tensors, PIL images, list of numpy images, etc ",
      "suggestions": [
        "Add concrete usage examples with >>> syntax",
        "Document function parameters and their types",
        "Document return value and type",
        "Document supported image types and formats"
      ],
      "has_examples": false,
      "has_parameters": false,
      "has_return_info": false
    },
    "vertically_flipped_image": {
      "current_quality": "basic",
      "current_docstring": "Flips (aka mirrors) an image vertically.",
      "suggestions": [
        "Add concrete usage examples with >>> syntax",
        "Document function parameters and their types",
        "Document return value and type",
        "Document supported image types and formats",
        "Expand description with more detail about purpose and behavior"
      ],
      "has_examples": false,
      "has_parameters": false,
      "has_return_info": false
    },
    "as_torch_image": {
      "current_quality": "basic",
      "current_docstring": "Converts an image to a floating point torch tensor in CHW form ",
      "suggestions": [
        "Add concrete usage examples with >>> syntax",
        "Document function parameters and their types",
        "Document return value and type",
        "Document supported image types and formats",
        "Expand description with more detail about purpose and behavior"
      ],
      "has_examples": false,
      "has_parameters": false,
      "has_return_info": false
    },
    "_prepare_cv_image": {
      "current_quality": "basic",
      "current_docstring": "OpenCV is a bit finicky sometimes\nApart from just as_float_image, there are some other requirements",
      "suggestions": [
        "Add concrete usage examples with >>> syntax",
        "Document function parameters and their types",
        "Document supported image types and formats",
        "Expand description with more detail about purpose and behavior"
      ],
      "has_examples": false,
      "has_parameters": false,
      "has_return_info": false
    },
    "_is_instance_of_module_class": {
      "current_quality": "excellent",
      "current_docstring": "Determines if 'x' (object) is an instance of a class (specified by 'class_name') \nin a module (specified by 'module_name') efficiently, without importing the module. \nIdeal for environments where impo...",
      "suggestions": [
        "Document function parameters and their types"
      ],
      "has_examples": true,
      "has_parameters": false,
      "has_return_info": true
    }
  },
  "work_instructions": [
    "For each function in this package:",
    "1. Read the existing docstring (if any) and understand the function's purpose",
    "2. Examine the function's implementation to understand its behavior",
    "3. Check related functions (in context) to understand how they work together",
    "4. ENHANCE (don't replace) the docstring following the template:",
    "   - Keep original docstring if it exists",
    "   - Add 'Enhanced Documentation:' section with usage patterns",
    "   - Include concrete examples with >>> syntax",
    "   - Document parameters and return values",
    "   - Note related functions and when to use vs alternatives",
    "   - Add relevant tags for searchability",
    "5. Test your examples to ensure they work",
    "6. Update the appropriate tag files in documentation/tags/"
  ],
  "quality_checklist": [
    "\u2610 Each function has enhanced docstring with purpose clearly explained",
    "\u2610 All parameters are documented with types and descriptions",
    "\u2610 Return values are documented with types and descriptions",
    "\u2610 At least one concrete example with >>> syntax that actually runs",
    "\u2610 Related functions are mentioned with explanations",
    "\u2610 Usage patterns and common scenarios are described",
    "\u2610 Relevant tags added for searchability",
    "\u2610 Function added to appropriate tag files in documentation/tags/",
    "\u2610 Examples tested and confirmed working",
    "\u2610 Cross-references to multiplexing patterns or _via_ variants documented"
  ]
}



############################################################
########### BEGINNING OF PSEUDO TERMINAL SESSION ###########
###########    Mon Jul 19, 2021 at 2:27:14PM     ###########
############################################################
ans=__import__('rp').get_git_remote_url()


############################################################
########### BEGINNING OF PSEUDO TERMINAL SESSION ###########
###########    Mon Jul 19, 2021 at 2:35:16PM     ###########
############################################################
ans = '/Users/Ryan/.vimrc'
from rp import *
ans='/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/rp/.rprc'
ans=r
import sys,os;os.chdir('/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/rp');sys.path.append(os.getcwd())# CD /Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/rp


############################################################
########### BEGINNING OF PSEUDO TERMINAL SESSION ###########
###########    Mon Jul 19, 2021 at 2:37:29PM     ###########
############################################################
__import__('rp').os.system("sh");


############################################################
########### BEGINNING OF PSEUDO TERMINAL SESSION ###########
###########    Mon Jul 19, 2021 at 2:45:55PM     ###########
############################################################
ans="def vim(file_or_object=None,line_number=None):\n    import subprocess\n    args=['vim']\n\n    assert currently_in_a_tty(),'Cannot start Vim because we are not running in a terminal' #In Jupyter Notebook, launching Vim might force you to restart the kernel...very annoying\n\n    if isinstance(file_or_object,str):\n        path=file_or_object\n        path=get_absolute_path(path)\n        args.append(path)\n    elif file_or_object is None:\n        path=None\n        pass\n    else:\n        path=get_source_file(file_or_object)\n        args.append(path)\n\n        if line_number is None and not is_a_module(file_or_object):\n            try:\n                line_number=_get_object_lineno(file_or_object)\n            except Exception:\n                pass\n\n    if line_number is not None:\n        #https://stackoverflow.com/questions/3313418/starting-vim-at-a-certain-position-line-and-column-of-a-file\n        column_number=0\n        args+=['+call cursor(%i,%i)'%(line_number,column_number),'+normal zz']\n\n    if is_a_folder(path):\n        folder=path\n    else:\n        folder=get_parent_directory(path)\n        \n    original_directory=get_current_directory()\n\n    try:\n        set_current_directory(folder) # This step is just for convenience; it's completely optional (might be removed if I don't like it). When editing a file, set vim's pwd to it's folder\n        subprocess.call(args) \n    finally:\n        set_current_directory(original_directory)\n"
ans=__import__('rp').shell_command('which vim')
__import__('rp').os.system("zsh");


############################################################
########### BEGINNING OF PSEUDO TERMINAL SESSION ###########
###########    Mon Jul 19, 2021 at 2:50:37PM     ###########
############################################################
__import__('rp').os.system("zsh");
ans=rp


############################################################
########### BEGINNING OF PSEUDO TERMINAL SESSION ###########
###########    Mon Jul 19, 2021 at 5:09:05PM     ###########
############################################################
string_to_text_file(get_module_path(r),ans)


############################################################
########### BEGINNING OF PSEUDO TERMINAL SESSION ###########
###########    Mon Jul 19, 2021 at 5:09:19PM     ###########
############################################################
__import__('rp.pypi_inspection').pypi_inspection.display_all_pypi_info()
ans=r
import sys,os;os.chdir('/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/rp');sys.path.append(os.getcwd())# CD /Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/rp
import web_evaluator
import runpy
import runpy


############################################################
########### BEGINNING OF PSEUDO TERMINAL SESSION ###########
###########    Tue Jul 20, 2021 at 3:03:54PM     ###########
############################################################
print_fansi_reference_table()


############################################################
########### BEGINNING OF PSEUDO TERMINAL SESSION ###########
###########    Wed Jul 28, 2021 at 9:51:03PM     ###########
############################################################
display_image(ans,1)
display_image(ans,1)


############################################################
########### BEGINNING OF PSEUDO TERMINAL SESSION ###########
###########    Thu Aug 05, 2021 at 12:13:38AM    ###########
############################################################
ans=gpt3('Ba-da-ba-da-ba-be bop bop bodda bope\nBop ba bodda bope\nBe bop ba bodda bope\nBop ba bodda\nBa-da-ba-da-ba-be bop ba bodda bope\nBop ba bodda bope\nBe bop ba bodda bope\nBop ba bodda bope\nSki-bi dibby dib yo da dub dub\nYo da dub dub\nSki-bi dibby dib yo da dub dub\nYo da dub dub\nSki-bi dibby dib yo da dub dub\nYo da dub dub\nSki-bi dibby dib yo da dub dub\nYo da dub dub')
ans=gpt3('Ba-da-ba-da-ba-be bop bop bodda bope\nBop ba bodda bope\nBe bop ba bodda bope\nBop ba bodda\nBa-da-ba-da-ba-be bop ba bodda bope\nBop ba bodda bope\nBe bop ba bodda bope\nBop ba bodda bope\nSki-bi dibby dib yo da dub dub\nYo da dub dub\nSki-bi dibby dib yo da dub dub\nYo da dub dub\nSki-bi dibby dib yo da dub dub\nYo da dub dub\nSki-bi dibby dib yo da dub dub\nYo da dub dub')
ans=gpt3('Ba-da-ba-da-ba-be bop bop bodda bope\nBop ba bodda bope\nBe bop ba bodda bope\nBop ba bodda\nBa-da-ba-da-ba-be bop ba bodda bope\nBop ba bodda bope\nBe bop ba bodda bope\nBop ba bodda bope\nSki-bi dibby dib yo da dub dub\nYo da dub dub\nSki-bi dibby dib yo da dub dub\nYo da dub dub\nSki-bi dibby dib yo da dub dub\nYo da dub dub\nSki-bi dibby dib yo da dub dub\nYo da dub dub')
ans=gpt3('Ba-da-ba-da-ba-be bop bop bodda bope\nBop ba bodda bope\nBe bop ba bodda bope\nBop ba bodda\nBa-da-ba-da-ba-be bop ba bodda bope\nBop ba bodda bope\nBe bop ba bodda bope\nBop ba bodda bope\nSki-bi dibby dib yo da dub dub\nYo da dub dub\nSki-bi dibby dib yo da dub dub\nYo da dub dub\nSki-bi dibby dib yo da dub dub\nYo da dub dub\nSki-bi dibby dib yo da dub dub\nYo da dub dub')
ans=gpt3('Ba-da-ba-da-ba-be bop bop bodda bope\nBop ba bodda bope\nBe bop ba bodda bope\nBop ba bodda\nBa-da-ba-da-ba-be bop ba bodda bope\nBop ba bodda bope\nBe bop ba bodda bope\nBop ba bodda bope\nSki-bi dibby dib yo da dub dub\nYo da dub dub\nSki-bi dibby dib yo da dub dub\nYo da dub dub\nSki-bi dibby dib yo da dub dub\nYo da dub dub\nSki-bi dibby dib yo da dub dub\nYo da dub dub')
ans="Scott is a professor of astrology, and Steph is a 5 year old child. In this interview, Scott explains to Steph how astrology works in simple terms that Steph can understand.\nSteph: What's astrology?"
ans=gpt3(ans)
ans=gpt3(ans)
ans=gpt3(ans)
ans=gpt3("Scott is a professor of astrology, and Steph is a 5 year old child. In this interview, Scott explains to Steph how astrology works in simple terms that Steph can understand.\nSteph: What's astrology?")
ans=gpt3("Scott is a professor of astrology, and Steph is a 5 year old child. In this interview, Scott explains to Steph how astrology works in simple terms that Steph can understand.\nSteph: What's astrology?\nSteph: It's science. It's actually pretty common in")
ans=gpt3("Scott is a professor of astrology, and Steph is a 5 year old child. In this interview, Scott explains to Steph how astrology works in simple terms that Steph can understand.\nSteph: What's astrology?\nScott: It's a science that predicts personalities from stars.\nSteph: How do I know if I'm a libra?")
ans=gpt3("Scott is a professor of astrology, and Steph is a 5 year old child. In this interview, Scott explains to Steph how astrology works in simple terms that Steph can understand.\nSteph: What's astrology?\nScott: It's a science that predicts personalities from stars.\nSteph: How do I know if I'm a libra?")
ans=gpt3("Scott is a professor of astrology, and Steph is a 5 year old child. In this interview, Scott explains to Steph how astrology works in simple terms that Steph can understand.\nSteph: What's astrology?\nScott: It's a science that predicts personalities from stars.\nSteph: How do I know if I'm a libra?")
ans=gpt3("Scott is a professor of astrology, and Steph is a 5 year old child. In this interview, Scott explains to Steph how astrology works in simple terms that Steph can understand.\nSteph: What's astrology?\nScott: It's a science that predicts personalities from stars.\nSteph: How do I know if I'm a libra?")
ans=gpt3("Scott is a professor of astrology, and Steph is a 5 year old child. In this interview, Scott explains to Steph how astrology works in simple terms that Steph can understand.\nSteph: What's astrology?\nScott: It's a science that predicts personalities from stars.\nSteph: How do I know if I'm a libra?")
ans=gpt3("Scott is a professor of astrology, and Steph is a 5 year old child. In this interview, Scott explains to Steph how astrology works in simple terms that Steph can understand.\nSteph: What's astrology?\nScott: It's a science that predicts personalities from stars.\nSteph: How do I know if I'm a libra?")
ans=gpt3("Scott is a professor of astrology, and Steph is a 5 year old child. In this interview, Scott explains to Steph how astrology works in simple terms that Steph can understand.\nSteph: What's astrology?\nScott: It's a science that predicts personalities from stars.\nSteph: How do I know if I'm a libra?\nScott: Libra are people in a kind of stable condition where you have your birth control pills and the pills in your ovaries and the pills out, and you go to bed at the right time when you're sick and you have that moment but you don't know when you actually end up having a libra. Libra are someone that have a lot of sexual arousal that triggers them to be attracted toward any one individual.\nSteph: What are ovaries? Why do libras do the sex?")
ans="Paradise to me is a state characterized by innately positive engagement in a place or experience that itself sustains the being in its midst through positive reinforcement...\n\nA warm, lush field for a being privy to and appreciative of its comforting beauty\nA tree suffuse with ripened fruit for one who cherishes its flavor\nA soft pillow down bed for a soul weary from work.\n\nBut paradise seems not merely to be any one of these events particularly, but would find definition rather in the consistent immersion in vignettes like it.\n\nIt's like a place of clockwork acquiescence of one's desires on a moment to moment basis exactly in that way which suits them particularly, whether that be in beautiful, pristine safety or the chaotic beauty of apocalyptica."
ans=gpt3(ans)
ans=gpt3(ans)
ans="Scott is a doctor of bones, and Steph is a 5 year old child. In this interview, Scott explains to Steph how bones are manufactured.\nSteph: Where do I get my bones?\nScott: Bones come from the bone factory.\nSteph: Where is the bone factory?\nScott: It's in New Jersey, right off the turnpike.\nSteph: Why do we need bones?\nScott: We don't. Bones are useless.\nSteph: Why are bones so tasty?"
ans=gpt3(ans)
ans=gpt3(ans)
ans=gpt3("Scott is a doctor of bones, and Steph is a 5 year old child. In this interview, Scott explains to Steph how bones are manufactured.\nSteph: Where do I get my bones?\nScott: Bones come from the bone factory.\nSteph: Where is the bone factory?\nScott: It's in New Jersey, right off the turnpike.\nSteph: Why do we need bones?\nScott: We don't. Bones are useless.\nSteph: Why are bones so tasty?\nScott: Because we don't use bone. When we go to the local store, that's where the bones are made.\nSteph: Where don't we use bone in high volume stores?\nScott: We don't. Because we make it expensive to get the bones.\nSteph: What are the risks and benefits of using bones?\nScott: They have one thing in common. We buy bones and eat them, and then we lose them after a while.\nSteph: Can you explain to me why I eat them and then how you and my family lose them?")
ans="Scott is a doctor of bones, and Steph is a 5 year old child. In this interview, Scott explains to Steph how bones are manufactured.\nSteph: Where do I get my bones?\nScott: Bones come from the bone factory.\nSteph: Where is the bone factory?\nScott: It's in New Jersey, right off the turnpike.\nSteph: Why do we need bones?\nScott: We don't. Bones are useless.\nSteph: Why are bones so tasty?\nScott: Because we don't use bone. When we go to the local store, that's where the bones are made.\nSteph: Where don't we use bone in high volume stores?\nScott: We don't. Because we make it expensive to get the bones.\nSteph: What are the risks and benefits of using bones?\nScott: They have one thing in common. We buy bones and eat them, and then we lose them after a while.\nSteph: Can you explain to me why I eat them and then how you and my family lose them?\nScott: Not at all.\nSteph: What are the most common foods that are in fact the least healthy bones they have ever eaten?\nScott: Not one of those five. Not one of them!\nSteph: So what about processed foods?!\nScott: Processed foods are always made of cheese. Cheese has no bones."
ans=gpt3(ans)
ans="Steph: Where don't we use bone in high volume stores?\nScott: We don't. Because we make it expensive to get the bones.\nSteph: What are the risks and benefits of using bones?\nScott: They have one thing in common. We buy bones and eat them, and then we lose them after a while.\nSteph: Can you explain to me why I eat them and then how you and my family lose them?\nScott: Not at all.\nSteph: What are the most common foods that are in fact the least healthy bones they have ever eaten?\nScott: Not one of those five. Not one of them!\nSteph: So what about processed foods?!\nScott: Processed foods are always made of cheese. Cheese has no bones."
ans=gpt3(ans)
ans=gpt3(ans)
ans=gpt3(ans)
ans=gpt3(ans)
ans="What happened with the chris chan story\nYeah but this is even darker\nAnderson\nI'm sYing\nIt's not really a turn\nJust dark\nkeehor\nYou think he was doing that the whole time?\nAnderson\nDarkness on top of darkness\nkeehor\nYeah\nTrash Canderson replied to keehor\nYou think he was doing that the whole time?\nIdgaf\nAnderson\nAll I know about it\nkeehor\nMe neither\nAnderson\nIs what I saw in one video documentary\nOther than that I don't follow that shit\nI think everyone involved is fucked\nChris chan\nand the viewers\nkeehor\nYup\nVery wierd\nAnderson\nJust fuckery all around as far as the eye can see\nkeehor\nVery obsessive\nHe might be the most well documented person of all time\nAnderson\nI'm hoping they'll lock chris chan aw way and itll put an end to it\nkeehor\nHe honestly needs to be in an asuylum\nIt would be the best for him\nPeople to stop him from interacting with all the people that stalk him"
ans=gpt3(ans)
ans=gpt3(ans)


############################################################
########### BEGINNING OF PSEUDO TERMINAL SESSION ###########
###########    Thu Aug 05, 2021 at 12:34:55AM    ###########
############################################################
import cv2
ans=cv2.VideoCapture(0)
ans=ans.read()
def load_image_from_webcam_slow(camera_number:int):
    import cv2
    camera=cv2.VideoCapture(camera_number)
    try:
        success,image=camera.read()
    finally:
        camera.release()
    if success:
        return image
    else:
        raise Exception('Error loading image from camera %i'%camera_number)
ans=load_image_from_webcam_slow(0)
ans=load_image_from_webcam_slow(1)
ans=load_image_from_webcam_slow(2)
ans=load_image_from_webcam_slow(3)
ans=load_image_from_webcam_slow(4)
ans=load_image_from_webcam_slow(3)
ans=load_image_from_webcam_slow(2)
ans=load_image_from_webcam_slow(1)
ans=load_image_from_webcam_slow(2)
ans=load_image_from_webcam_slow(2)
ans=load_image_from_webcam_slow(2)
cap=cv2.VideoCapture(0)
ans=cap
ans=cv2.CAP_PROP_FRAME_COUNT
ans=cv2.CAP_PROP_FRAME_COUNT
ans=cv2.CAP_PROP_XI_ACQ_TIMING_MODE
def load_image_from_webcam_slow(camera_number:int):
    import cv2
    camera=cv2.VideoCapture(camera_number)
    try:
        success,image=camera.read()
    finally:
        camera.release()
    if success:
        return image
    else:
        raise Exception('Error loading image from camera %i'%camera_number)
ans=load_image_from_webcam_slow(2)
ans=load_image_from_webcam_slow(2)
ans=load_image_from_webcam_slow(2)
ans=load_image_from_webcam_slow(2)
ans=load_image_from_webcam_slow(2)
ans=load_image_from_webcam_slow(2)
ans=cv2.VideoCapture(2)
ans.release()
ans=par_map(cv2.VideoCapture,[0,1,2])
for _ in ans:
    _.release()
for _ in ans:
    _.release()


############################################################
########### BEGINNING OF PSEUDO TERMINAL SESSION ###########
###########    Thu Aug 05, 2021 at 12:48:39AM    ###########
############################################################
ans=load_image_from_webcam(3)
def load_image_from_webcam_slow(camera_number:int,number_of_frames:int=10):
    import cv2
    camera=cv2.VideoCapture(camera_number)
    frames=[]
    try:
        success,image=camera.read()
        if not success:
            raise Exception('Error loading image from camera %i'%camera_number)
        frames.append(image)
    finally:
        camera.release()
    return frames


############################################################
########### BEGINNING OF PSEUDO TERMINAL SESSION ###########
###########    Thu Aug 05, 2021 at 12:50:58AM    ###########
############################################################
def load_image_from_webcam_slow(camera_number:int,number_of_frames:int=10):
    import cv2
    camera=cv2.VideoCapture(camera_number)
    frames=[]
    try:
        success,image=camera.read()
        if not success:
            raise Exception('Error loading image from camera %i'%camera_number)
        frames.append(image)
    finally:
        camera.release()
    return frames
ans=load_image_from_webcam_slow(2)
ans=load_image_from_webcam_slow(2)
ans=load_image_from_webcam_slow(2)
ans=load_image_from_webcam_slow(2)
ans=load_image_from_webcam_slow(2)
ans=load_image_from_webcam_slow(2)
ans=load_image_from_webcam_slow(2)
ans=load_image_from_webcam_slow(2)
ans=load_image_from_webcam_slow(2)
ans=load_image_from_webcam_slow(2)
ans=load_image_from_webcam_slow(2)
ans=load_image_from_webcam_slow(2)
ans=load_image_from_webcam_slow(2)
ans=load_image_from_webcam_slow(2)
ans=load_image_from_webcam_slow(2)
ans=ans[-1]
display_image(load_image_from_webcam_slow(2)[-1])
display_image(load_image_from_webcam_slow(2)[-1])
display_image(load_image_from_webcam_slow(2)[-1])
display_image(load_image_from_webcam_slow(2)[-1])
display_image(load_image_from_webcam_slow(2)[-1])


############################################################
########### BEGINNING OF PSEUDO TERMINAL SESSION ###########
###########    Thu Aug 05, 2021 at 12:54:22AM    ###########
############################################################
def display_video_stream(camera_number):
    import cv2
    camera=cv2.VideoCapture(camera_number)
    fails=0
    while True:
        success,image=camera.read()
        if success:
            fails=0
            display_image(image)
        else:
            fails+=1
            print('Failed %i times'%fails)


############################################################
########### BEGINNING OF PSEUDO TERMINAL SESSION ###########
###########    Thu Aug 05, 2021 at 12:55:00AM    ###########
############################################################
def display_video_stream(camera_number):
    import cv2
    camera=cv2.VideoCapture(camera_number)
    fails=0
    while True:
        success,image=camera.read()
        if success:
            fails=0
            display_image(image)
        else:
            fails+=1
            print('Failed %i times'%fails)


############################################################
########### BEGINNING OF PSEUDO TERMINAL SESSION ###########
###########    Thu Aug 05, 2021 at 12:55:09AM    ###########
############################################################
def display_video_stream(camera_number):
    import cv2
    camera=cv2.VideoCapture(camera_number)
    fails=0
    while True:
        success,image=camera.read()
        if success:
            fails=0
            display_image(image)
        else:
            fails+=1
            print('Failed %i times'%fails)
import rp.rp_ptpython.completer as c
string_to_text_file(get_module_path(c),ans)


############################################################
########### BEGINNING OF PSEUDO TERMINAL SESSION ###########
###########    Thu Aug 05, 2021 at 12:55:10AM    ###########
############################################################
def display_video_stream(camera_number):
    import cv2
    camera=cv2.VideoCapture(camera_number)
    fails=0
    while True:
        success,image=camera.read()
        if success:
            fails=0
            display_image(image)
        else:
            fails+=1
            print('Failed %i times'%fails)


############################################################
########### BEGINNING OF PSEUDO TERMINAL SESSION ###########
###########    Thu Aug 05, 2021 at 12:55:12AM    ###########
############################################################
def display_video_stream(camera_number):
    import cv2
    camera=cv2.VideoCapture(camera_number)
    fails=0
    while True:
        success,image=camera.read()
        if success:
            fails=0
            display_image(image)
        else:
            fails+=1
            print('Failed %i times'%fails)


############################################################
########### BEGINNING OF PSEUDO TERMINAL SESSION ###########
###########    Thu Aug 05, 2021 at 1:22:44AM     ###########
############################################################
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot');sys.path.append(os.getcwd())# CDB
string_to_text_file(get_module_path(r),ans)
ans=load_video_stream(2)
ans=load_video_stream(2)
def display_video_stream(camera_number):
    import cv2
    camera=cv2.VideoCapture(camera_number)
    fails=0
    while True:
        success,image=camera.read()
        if success:
            fails=0
            display_image(image)
        else:
            fails+=1
            print('Failed %i times'%fails)


############################################################
########### BEGINNING OF PSEUDO TERMINAL SESSION ###########
###########    Thu Aug 05, 2021 at 1:26:30AM     ###########
############################################################
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot');sys.path.append(os.getcwd())# CDB
def display_video_stream(camera_number):
    import cv2
    camera=cv2.VideoCapture(camera_number)
    fails=0
    while True:
        success,image=camera.read()
        if success:
            fails=0
            display_image(image)
        else:
            fails+=1
            print('Failed %i times'%fails)


############################################################
########### BEGINNING OF PSEUDO TERMINAL SESSION ###########
###########    Thu Aug 05, 2021 at 1:28:04AM     ###########
############################################################
def display_video_stream(camera_number):
    import cv2
    camera=cv2.VideoCapture(camera_number)
    fails=0
    while True:
        success,image=camera.read()
        if success:
            fails=0
            display_image(image)
        else:
            fails+=1
            print('Failed %i times'%fails)


############################################################
########### BEGINNING OF PSEUDO TERMINAL SESSION ###########
###########    Thu Aug 05, 2021 at 1:21:45AM     ###########
############################################################
def display_video_stream(camera_number):
    import cv2
    camera=cv2.VideoCapture(camera_number)
    fails=0
    while True:
        success,image=camera.read()
        if success:
            fails=0
            display_image(image)
        else:
            fails+=1
            print('Failed %i times'%fails)
def display_video_stream(camera_number):
    import cv2
    camera=cv2.VideoCapture(camera_number)
    fails=0
    while True:
        success,image=camera.read()
        if success:
            fails=0
            display_image(image)
        else:
            fails+=1
            print('Failed %i times'%fails)
def load_image_from_webcam_slow(camera_number:int,number_of_frames:int=10):
    import cv2
    camera=cv2.VideoCapture(camera_number)
    frames=[]
    try:
        success,image=camera.read()
        if not success:
            raise Exception('Error loading image from camera %i'%camera_number)
        frames.append(image)
    finally:
        camera.release()
    return frames
def load_image_from_webcam_slow(camera_number:int,number_of_frames:int=10):
    import cv2
    camera=cv2.VideoCapture(camera_number)
    frames=[]
    try:
        success,image=camera.read()
        if not success:
            raise Exception('Error loading image from camera %i'%camera_number)
        frames.append(image)
    finally:
        camera.release()
    return frames


############################################################
########### BEGINNING OF PSEUDO TERMINAL SESSION ###########
###########    Thu Aug 05, 2021 at 1:32:48AM     ###########
############################################################
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot');sys.path.append(os.getcwd())# CDB
def load_image_from_webcam_slow(camera_number:int,number_of_frames:int=10):
    import cv2
    camera=cv2.VideoCapture(camera_number)
    frames=[]
    try:
        success,image=camera.read()
        if not success:
            raise Exception('Error loading image from camera %i'%camera_number)
        frames.append(image)
    finally:
        camera.release()
    return frames
ans=load_image_from_webcam_slow(2)
ans=load_image_from_webcam_slow(2)
ans=load_image_from_webcam_slow(2)
ans=load_image_from_webcam_slow(2)
ans=load_image_from_webcam_slow(2)
ans=load_image_from_webcam_slow(1)
ans=load_image_from_webcam_slow(1)
ans=load_image_from_webcam_slow(1)
ans=load_image_from_webcam_slow(1)
ans=load_image_from_webcam_slow(1)
display_image(load_image_from_webcam_slow(1)[-1])
display_image(load_image_from_webcam_slow(1)[-1])
display_image(load_image_from_webcam_slow(1)[-1])
display_image(load_image_from_webcam_slow(1)[-1])
display_image(load_image_from_webcam_slow(1)[-1])
display_image(load_image_from_webcam_slow(1)[-1])
display_image(load_image_from_webcam_slow(1)[-1])
display_image(load_image_from_webcam_slow(1)[-1])
display_image(load_image_from_webcam_slow(1)[-1])
display_image(load_image_from_webcam_slow(1)[-1])
display_image(load_image_from_webcam_slow(1)[-1])
display_image(load_image_from_webcam_slow(1)[-1])
display_image(load_image_from_webcam_slow(1)[-1])
for _ in range(10):
    display_image(load_image_from_webcam_slow(1)[-1])
for _ in range(10):
    display_image(par_map(load_image_from_webcam_slow,(1,2))[-1][-1])
for _ in range(10):
    display_image(par_map(load_image_from_webcam_slow,(1,2,3))[-1][-1])


############################################################
########### BEGINNING OF PSEUDO TERMINAL SESSION ###########
###########    Thu Aug 05, 2021 at 1:42:46AM     ###########
############################################################
def load_image_from_webcam_slow(camera_number:int,number_of_frames:int=10):
    import cv2
    camera=cv2.VideoCapture(camera_number)
    frames=[]
    try:
        success,image=camera.read()
        if not success:
            raise Exception('Error loading image from camera %i'%camera_number)
        frames.append(image)
    finally:
        camera.release()
    return frames
for _ in range(10):
    display_image(par_map(load_image_from_webcam_slow,(1,2,3,4,5))[-1][-1])
for _ in range(10):
    display_image(par_map(load_image_from_webcam_slow,(1,2,3,4,5))[-1][-1])
for _ in range(10):
    display_image(par_map(load_image_from_webcam_slow,(1,2,3))[-1][-1])
def load_image_from_webcam_slow(camera_number:int,number_of_frames:int=1):
    import cv2
    camera=cv2.VideoCapture(camera_number)
    frames=[]
    try:
        success,image=camera.read()
        if not success:
            raise Exception('Error loading image from camera %i'%camera_number)
        frames.append(image)
    finally:
        camera.release()
    return frames
for _ in range(10):
    display_image(par_map(load_image_from_webcam_slow,(1,2,3))[-1][-1])
def load_image_from_webcam_slow(camera_number:int,number_of_frames:int=1):
    import cv2
    camera=cv2.VideoCapture(camera_number)
    frames=[]
    try:
        success,image=camera.read()
        if not success:
            raise Exception('Error loading image from camera %i'%camera_number)
        frames.append(image)
    finally:
        camera.release()
    return frames
for _ in range(10):
    display_image(par_map(load_image_from_webcam_slow,(1,2,3))[-1][-1])
def load_image_from_webcam_slow(camera_number:int,number_of_frames:int=10):
    import cv2
    camera=cv2.VideoCapture(camera_number)
    frames=[]
    try:
        success,image=camera.read()
        if not success:
            raise Exception('Error loading image from camera %i'%camera_number)
        frames.append(image)
    finally:
        camera.release()
    last_frame=frames[-1]
    return last_frame
for _ in range(1):
    display_image(tiled_images(par_map(load_image_from_webcam_slow,(1,2,3))))
for _ in range(1):
    display_image(tiled_images(par_map(load_image_from_webcam_slow,(0,1,2,3))))
for _ in range(1):
    display_image(tiled_images(par_map(load_image_from_webcam_slow,(2,3,4))))
for _ in range(1):
    display_image(tiled_images(par_map(load_image_from_webcam_slow,(2,3,4,5))))


############################################################
########### BEGINNING OF PSEUDO TERMINAL SESSION ###########
###########    Thu Aug 05, 2021 at 1:48:55AM     ###########
############################################################
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot');sys.path.append(os.getcwd())# CDB
def load_image_from_webcam_slow(camera_number:int,number_of_frames:int=10):
    import cv2
    camera=cv2.VideoCapture(camera_number)
    frames=[]
    try:
        success,image=camera.read()
        if not success:
            raise Exception('Error loading image from camera %i'%camera_number)
        frames.append(image)
    finally:
        camera.release()
    last_frame=frames[-1]
    return last_frame
ans=load_image_from_webcam_slow(1)
ans=load_image_from_webcam_slow(1)
for _ in range(1):
    display_image(tiled_images(par_map(load_image_from_webcam_slow,(1,2,3,4,5))))
for _ in range(1):
    display_image(tiled_images(par_map( lambda x:cv_resize_image(load_image_from_webcam_slow(x),.5),(1,2,3,4,5))))
for _ in range(1):
    display_image(tiled_images(par_map( lambda x:cv_resize_image(load_image_from_webcam_slow(x),.5),(1,2,3,4,5))))
display_image(ans,1)
for _ in range(1):
    display_image(tiled_images(par_map( lambda x:cv_resize_image(load_image_from_webcam_slow(x),.5),(1,2,3,4,5))))
for _ in range(1):
    display_image(tiled_images(par_map( lambda x:cv_resize_image(load_image_from_webcam_slow(x),.5),(1,2,3,4,5))))
for _ in range(1):
    display_image(tiled_images(par_map( lambda x:cv_resize_image(load_image_from_webcam_slow(x),.5),(1,2,3,4,5))))
for _ in range(1):
    display_image(tiled_images(par_map( lambda x:cv_resize_image(load_image_from_webcam_slow(x),.5),(1,2,3,4,5))))
for _ in range(1):
    display_image(tiled_images(par_map( lambda x:cv_resize_image(load_image_from_webcam_slow(x),.5),(1,2,3,4,5))))
for _ in range(1):
    
    display_image(tiled_images(par_map( lambda x:cv_resize_image(load_image_from_webcam_slow(x),.5),(1,2,3,4,5))))


############################################################
########### BEGINNING OF PSEUDO TERMINAL SESSION ###########
###########    Thu Aug 05, 2021 at 2:01:14AM     ###########
############################################################
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot');sys.path.append(os.getcwd())# CDB
def load_image_from_webcam_slow(camera_number:int,number_of_frames:int=10):
    import cv2
    camera=cv2.VideoCapture(camera_number)
    frames=[]
    try:
        success,image=camera.read()
        if not success:
            raise Exception('Error loading image from camera %i'%camera_number)
        frames.append(image)
    finally:
        camera.release()
    last_frame=frames[-1]
    return last_frame


############################################################
########### BEGINNING OF PSEUDO TERMINAL SESSION ###########
###########    Thu Aug 05, 2021 at 2:02:01AM     ###########
############################################################
def load_image_from_webcam_slow(camera_number:int,number_of_frames:int=10):
    import cv2
    camera=cv2.VideoCapture(camera_number)
    frames=[]
    try:
        success,image=camera.read()
        if not success:
            raise Exception('Error loading image from camera %i'%camera_number)
        frames.append(image)
    finally:
        camera.release()
    last_frame=frames[-1]
    return last_frame
ans=''


############################################################
########### BEGINNING OF PSEUDO TERMINAL SESSION ###########
###########    Mon Aug 09, 2021 at 4:56:47PM     ###########
############################################################
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot');sys.path.append(os.getcwd())# CDB
import os;os.system('ls -t')
string_to_text_file(get_module_path(r),ans)


############################################################
########### BEGINNING OF PSEUDO TERMINAL SESSION ###########
###########    Mon Aug 09, 2021 at 5:23:27PM     ###########
############################################################
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot');sys.path.append(os.getcwd())# CDB
def load_image_from_robocam():
    from rp.web_evaluator import Client
    response=Client('walle-desktop.local').evaluate('load_image_from_robocam()')
    if response.errored:
        raise response.error
    assert response.is_eval
    return response.value
def load_image_from_webcam_slow(camera_number:int,number_of_frames:int=10):
    print(camera_number)
    import cv2
    camera=cv2.VideoCapture(camera_number)
    frames=[]
    try:
        success,image=camera.read()
        image=cv_rgb_bgr_swap(image)
        if not success:
            raise Exception('Error loading image from camera %i'%camera_number)
        frames.append(image)
    finally:
        camera.release()
    last_frame=frames[-1]
    return last_frame
def load_images_from_webcams(*camera_numbers,camera_group_size:int=3):
    images=[]
    camera_groups=split_into_sublists(camera_numbers,sublist_len=camera_group_size)
    for camera_group in camera_groups:
        images+=par_map(load_image_from_webcam_slow,camera_group)
    return images
def display_images(images:list):
    images=[cv_resize_image(image,.5) for image in images]
    images=tiled_images(images)
    display_image(images)
def display_observation():
    display_images([load_image_from_robocam()]+load_images_from_webcams(0,1,2,3,4,5))
def robot_evaluate(code:str):
    from rp.web_evaluator import Client
    return Client('walle-desktop.local').evaluate(code)
def playground():
    while True:
        key=input_keypress()
        if key=='q': break
        if key=='w': robot_evaluate('forward()')
        if key=='a': robot_evaluate('left()')
        if key=='s': robot_evaluate('backward()')
        if key=='d': robot_evaluate('right()')
        if key==' ': display_observation()

def load_image_from_robocam():
    from rp.web_evaluator import Client
    response=Client('walle-desktop.local').evaluate('load_image_from_robocam()')
    if response.errored:
        raise response.error
    assert response.is_eval
    return response.value
def load_image_from_webcam_slow(camera_number:int,number_of_frames:int=10):
    print(camera_number)
    import cv2
    camera=cv2.VideoCapture(camera_number)
    frames=[]
    try:
        success,image=camera.read()
        image=cv_rgb_bgr_swap(image)
        if not success:
            raise Exception('Error loading image from camera %i'%camera_number)
        frames.append(image)
    finally:
        camera.release()
    last_frame=frames[-1]
    return last_frame
def load_images_from_webcams(*camera_numbers,camera_group_size:int=3):
    images=[]
    camera_groups=split_into_sublists(camera_numbers,sublist_len=camera_group_size)
    for camera_group in camera_groups:
        images+=par_map(load_image_from_webcam_slow,camera_group)
    return images
def display_images(images:list):
    images=[cv_resize_image(image,.5) for image in images]
    images=tiled_images(images)
    display_image(images)
def display_observation():
    display_images([load_image_from_robocam()]+load_images_from_webcams(0,1,2,3,4,5))
def robot_evaluate(code:str):
    from rp.web_evaluator import Client
    return Client('walle-desktop.local').evaluate(code)
def playground():
    while True:
        key=input_keypress()
        if key=='q': break
        if key=='w': robot_evaluate('forward()')
        if key=='a': robot_evaluate('left()')
        if key=='s': robot_evaluate('backward()')
        if key=='d': robot_evaluate('right()')
        if key==' ': display_observation()


############################################################
########### BEGINNING OF PSEUDO TERMINAL SESSION ###########
###########    Mon Aug 09, 2021 at 6:25:39PM     ###########
############################################################
def load_image_from_robocam():
    from rp.web_evaluator import Client
    response=Client('walle-desktop.local').evaluate('load_image_from_robocam()')
    if response.errored:
        raise response.error
    assert response.is_eval
    return response.value
def load_image_from_webcam_slow(camera_number:int,number_of_frames:int=10):
    print(camera_number)
    import cv2
    camera=cv2.VideoCapture(camera_number)
    frames=[]
    try:
        success,image=camera.read()
        image=cv_rgb_bgr_swap(image)
        if not success:
            raise Exception('Error loading image from camera %i'%camera_number)
        frames.append(image)
    finally:
        camera.release()
    last_frame=frames[-1]
    return last_frame
def load_images_from_webcams(*camera_numbers,camera_group_size:int=3):
    images=[]
    camera_groups=split_into_sublists(camera_numbers,sublist_len=camera_group_size)
    for camera_group in camera_groups:
        images+=par_map(load_image_from_webcam_slow,camera_group)
    return images
def display_images(images:list):
    images=[cv_resize_image(image,.5) for image in images]
    images=tiled_images(images)
    display_image(images)
def display_observation():
    display_images([load_image_from_robocam()]+load_images_from_webcams(0,1,2,3,4,5))
def robot_evaluate(code:str):
    from rp.web_evaluator import Client
    return Client('walle-desktop.local').evaluate(code)
def playground():
    while True:
        key=input_keypress()
        if key=='q': break
        if key=='w': robot_evaluate('forward()')
        if key=='a': robot_evaluate('left()')
        if key=='s': robot_evaluate('backward()')
        if key=='d': robot_evaluate('right()')
        if key==' ': display_observation()


############################################################
########### BEGINNING OF PSEUDO TERMINAL SESSION ###########
###########    Mon Aug 09, 2021 at 6:26:48PM     ###########
############################################################
def load_image_from_robocam():
    from rp.web_evaluator import Client
    response=Client('walle-desktop.local').evaluate('load_image_from_robocam()')
    if response.errored:
        raise response.error
    assert response.is_eval
    return response.value
def load_image_from_webcam_slow(camera_number:int,number_of_frames:int=10):
    print(camera_number)
    import cv2
    camera=cv2.VideoCapture(camera_number)
    frames=[]
    try:
        success,image=camera.read()
        image=cv_rgb_bgr_swap(image)
        if not success:
            raise Exception('Error loading image from camera %i'%camera_number)
        frames.append(image)
    finally:
        camera.release()
    last_frame=frames[-1]
    return last_frame
def load_images_from_webcams(*camera_numbers,camera_group_size:int=3):
    images=[]
    camera_groups=split_into_sublists(camera_numbers,sublist_len=camera_group_size)
    for camera_group in camera_groups:
        images+=par_map(load_image_from_webcam_slow,camera_group)
    return images
def display_images(images:list):
    images=[cv_resize_image(image,.5) for image in images]
    images=tiled_images(images)
    display_image(images)
def display_observation():
    display_images([load_image_from_robocam()]+load_images_from_webcams(0,1,2,3,4,5))
def robot_evaluate(code:str):
    from rp.web_evaluator import Client
    return Client('walle-desktop.local').evaluate(code)
def playground():
    while True:
        key=input_keypress()
        if key=='q': break
        if key=='w': robot_evaluate('forward()')
        if key=='a': robot_evaluate('left()')
        if key=='s': robot_evaluate('backward()')
        if key=='d': robot_evaluate('right()')
        if key==' ': display_observation()


############################################################
########### BEGINNING OF PSEUDO TERMINAL SESSION ###########
###########    Mon Aug 09, 2021 at 6:27:43PM     ###########
############################################################
def load_image_from_robocam():
    from rp.web_evaluator import Client
    response=Client('walle-desktop.local').evaluate('load_image_from_robocam()')
    if response.errored:
        raise response.error
    assert response.is_eval
    return response.value
def load_image_from_webcam_slow(camera_number:int,number_of_frames:int=10):
    print(camera_number)
    import cv2
    camera=cv2.VideoCapture(camera_number)
    frames=[]
    try:
        success,image=camera.read()
        image=cv_rgb_bgr_swap(image)
        if not success:
            raise Exception('Error loading image from camera %i'%camera_number)
        frames.append(image)
    finally:
        camera.release()
    last_frame=frames[-1]
    return last_frame
def load_images_from_webcams(*camera_numbers,camera_group_size:int=3):
    images=[]
    camera_groups=split_into_sublists(camera_numbers,sublist_len=camera_group_size)
    for camera_group in camera_groups:
        images+=par_map(load_image_from_webcam_slow,camera_group)
    return images
def display_images(images:list):
    images=[cv_resize_image(image,.5) for image in images]
    images=tiled_images(images)
    display_image(images)
def display_observation():
    display_images([load_image_from_robocam()]+load_images_from_webcams(0,1,2,3,4,5))
def robot_evaluate(code:str):
    from rp.web_evaluator import Client
    return Client('walle-desktop.local').evaluate(code)
def playground():
    while True:
        key=input_keypress()
        if key=='q': break
        if key=='w': robot_evaluate('forward()')
        if key=='a': robot_evaluate('left()')
        if key=='s': robot_evaluate('backward()')
        if key=='d': robot_evaluate('right()')
        if key==' ': display_observation()


############################################################
########### BEGINNING OF PSEUDO TERMINAL SESSION ###########
###########    Mon Aug 09, 2021 at 6:28:29PM     ###########
############################################################
ans=load_image_from_webcam()


############################################################
########### BEGINNING OF PSEUDO TERMINAL SESSION ###########
###########    Mon Aug 09, 2021 at 6:28:47PM     ###########
############################################################
ans=load_image_from_webcam()


############################################################
########### BEGINNING OF PSEUDO TERMINAL SESSION ###########
###########    Mon Aug 09, 2021 at 6:29:11PM     ###########
############################################################
ans=load_image_from_webcam()


############################################################
########### BEGINNING OF PSEUDO TERMINAL SESSION ###########
###########    Mon Aug 09, 2021 at 6:30:42PM     ###########
############################################################
ans=load_image_from_webcam()


############################################################
########### BEGINNING OF PSEUDO TERMINAL SESSION ###########
###########    Mon Aug 09, 2021 at 6:31:00PM     ###########
############################################################
ans=load_image_from_webcam()


############################################################
########### BEGINNING OF PSEUDO TERMINAL SESSION ###########
###########    Mon Aug 09, 2021 at 6:31:23PM     ###########
############################################################
ans=load_image_from_webcam()


############################################################
########### BEGINNING OF PSEUDO TERMINAL SESSION ###########
###########    Mon Aug 09, 2021 at 6:34:20PM     ###########
############################################################
ans=load_image_from_webcam()


############################################################
########### BEGINNING OF PSEUDO TERMINAL SESSION ###########
###########    Mon Aug 09, 2021 at 6:34:54PM     ###########
############################################################
ans=load_image_from_webcam()


############################################################
########### BEGINNING OF PSEUDO TERMINAL SESSION ###########
###########    Tue Aug 10, 2021 at 6:31:19PM     ###########
############################################################
ans=load_image_from_webcam(2)
def load_image_from_robocam():
    from rp.web_evaluator import Client
    response=Client('walle-desktop.local').evaluate('load_image_from_robocam()')
    if response.errored:
        raise response.error
    assert response.is_eval
    return response.value
def load_image_from_webcam_slow(camera_number:int,number_of_frames:int=10):
    print(camera_number)
    import cv2
    camera=cv2.VideoCapture(camera_number)
    frames=[]
    try:
        success,image=camera.read()
        image=cv_rgb_bgr_swap(image)
        if not success:
            raise Exception('Error loading image from camera %i'%camera_number)
        frames.append(image)
    finally:
        camera.release()
    last_frame=frames[-1]
    return last_frame
def load_images_from_webcams(*camera_numbers,camera_group_size:int=3):
    images=[]
    camera_groups=split_into_sublists(camera_numbers,sublist_len=camera_group_size)
    for camera_group in camera_groups:
        images+=par_map(load_image_from_webcam_slow,camera_group)
    return images
def display_images(images:list):
    images=[cv_resize_image(image,.5) for image in images]
    images=tiled_images(images)
    display_image(images)
def display_observation():
    pass
    display_images([load_image_from_robocam()]+load_images_from_webcams(0,1,2,3,4,5))
def robot_evaluate(code:str):
    from rp.web_evaluator import Client
    return Client('walle-desktop.local').evaluate(code)
def playground():
    while True:
        key=input_keypress()
        if key=='q': break
        if key=='w': robot_evaluate('forward()')
        if key=='a': robot_evaluate('left()')
        if key=='s': robot_evaluate('backward()')
        if key=='d': robot_evaluate('right()')
        if key==' ': display_observation()


############################################################
########### BEGINNING OF PSEUDO TERMINAL SESSION ###########
###########    Tue Aug 10, 2021 at 6:33:33PM     ###########
############################################################
def load_image_from_robocam():
    from rp.web_evaluator import Client
    response=Client('walle-desktop.local').evaluate('load_image_from_robocam()')
    if response.errored:
        raise response.error
    assert response.is_eval
    return response.value
def load_image_from_webcam_slow(camera_number:int,number_of_frames:int=10):
    print(camera_number)
    import cv2
    camera=cv2.VideoCapture(camera_number)
    frames=[]
    try:
        success,image=camera.read()
        image=cv_rgb_bgr_swap(image)
        if not success:
            raise Exception('Error loading image from camera %i'%camera_number)
        frames.append(image)
    finally:
        camera.release()
    last_frame=frames[-1]
    return last_frame
def load_images_from_webcams(*camera_numbers,camera_group_size:int=3):
    images=[]
    camera_groups=split_into_sublists(camera_numbers,sublist_len=camera_group_size)
    for camera_group in camera_groups:
        images+=par_map(load_image_from_webcam_slow,camera_group)
    return images
def display_images(images:list):
    images=[cv_resize_image(image,.5) for image in images]
    images=tiled_images(images)
    display_image(images)
def display_observation():
    pass
    display_images([load_image_from_robocam()]+load_images_from_webcams(0,1,2,3,4,5))
def robot_evaluate(code:str):
    from rp.web_evaluator import Client
    return Client('walle-desktop.local').evaluate(code)
def playground():
    while True:
        key=input_keypress()
        if key=='q': break
        if key=='w': robot_evaluate('forward()')
        if key=='a': robot_evaluate('left()')
        if key=='s': robot_evaluate('backward()')
        if key=='d': robot_evaluate('right()')
        if key==' ': display_observation()
ans=load_image_from_webcam_slow(2)
ans=load_image_from_webcam_slow(3)
ans=load_image_from_webcam_slow(3)
ans=load_image_from_webcam_slow(3)


############################################################
########### BEGINNING OF PSEUDO TERMINAL SESSION ###########
###########    Tue Aug 10, 2021 at 6:34:30PM     ###########
############################################################
def load_image_from_robocam():
    from rp.web_evaluator import Client
    response=Client('walle-desktop.local').evaluate('load_image_from_robocam()')
    if response.errored:
        raise response.error
    assert response.is_eval
    return response.value
def load_image_from_webcam_slow(camera_number:int,number_of_frames:int=10):
    print(camera_number)
    import cv2
    camera=cv2.VideoCapture(camera_number)
    frames=[]
    try:
        success,image=camera.read()
        image=cv_rgb_bgr_swap(image)
        if not success:
            raise Exception('Error loading image from camera %i'%camera_number)
        frames.append(image)
    finally:
        camera.release()
    last_frame=frames[-1]
    return last_frame
def load_images_from_webcams(*camera_numbers,camera_group_size:int=3):
    images=[]
    camera_groups=split_into_sublists(camera_numbers,sublist_len=camera_group_size)
    for camera_group in camera_groups:
        images+=par_map(load_image_from_webcam_slow,camera_group)
    return images
def display_images(images:list):
    images=[cv_resize_image(image,.5) for image in images]
    images=tiled_images(images)
    display_image(images)
def display_observation():
    pass
    display_images([load_image_from_robocam()]+load_images_from_webcams(0,1,2,3,4,5))
def robot_evaluate(code:str):
    from rp.web_evaluator import Client
    return Client('walle-desktop.local').evaluate(code)
def playground():
    while True:
        key=input_keypress()
        if key=='q': break
        if key=='w': robot_evaluate('forward()')
        if key=='a': robot_evaluate('left()')
        if key=='s': robot_evaluate('backward()')
        if key=='d': robot_evaluate('right()')
        if key==' ': display_observation()
ans=load_image_from_webcam_slow(3)
ans=load_image_from_webcam_slow(3)
ans=load_image_from_webcam_slow(0)
ans=load_image_from_webcam_slow(3)
ans=load_image_from_webcam_slow(3)
ans=load_image_from_webcam_slow(2)


############################################################
########### BEGINNING OF PSEUDO TERMINAL SESSION ###########
###########    Tue Aug 10, 2021 at 7:56:17PM     ###########
############################################################
def load_image_from_robocam():
    from rp.web_evaluator import Client
    response=Client('walle-desktop.local').evaluate('load_image_from_robocam()')
    if response.errored:
        raise response.error
    assert response.is_eval
    return response.value
def load_image_from_webcam_slow(camera_number:int,number_of_frames:int=10):
    print(camera_number)
    import cv2
    camera=cv2.VideoCapture(camera_number)
    frames=[]
    try:
        success,image=camera.read()
        image=cv_rgb_bgr_swap(image)
        if not success:
            raise Exception('Error loading image from camera %i'%camera_number)
        frames.append(image)
    finally:
        camera.release()
    last_frame=frames[-1]
    return last_frame
def load_images_from_webcams(*camera_numbers,camera_group_size:int=3):
    images=[]
    camera_groups=split_into_sublists(camera_numbers,sublist_len=camera_group_size)
    for camera_group in camera_groups:
        images+=par_map(load_image_from_webcam_slow,camera_group)
    return images
def display_images(images:list):
    images=[cv_resize_image(image,.5) for image in images]
    images=tiled_images(images)
    display_image(images)
def display_observation():
    pass
    display_images([load_image_from_robocam()]+load_images_from_webcams(0,1,2,3,4,5))
def robot_evaluate(code:str):
    from rp.web_evaluator import Client
    return Client('walle-desktop.local').evaluate(code)
def playground():
    while True:
        key=input_keypress()
        if key=='q': break
        if key=='w': robot_evaluate('forward()')
        if key=='a': robot_evaluate('left()')
        if key=='s': robot_evaluate('backward()')
        if key=='d': robot_evaluate('right()')
        if key==' ': display_observation()


############################################################
########### BEGINNING OF PSEUDO TERMINAL SESSION ###########
###########    Tue Aug 10, 2021 at 7:56:33PM     ###########
############################################################
def load_image_from_robocam():
    from rp.web_evaluator import Client
    response=Client('walle-desktop.local').evaluate('load_image_from_robocam()')
    if response.errored:
        raise response.error
    assert response.is_eval
    return response.value
def load_image_from_webcam_slow(camera_number:int,number_of_frames:int=10):
    print(camera_number)
    import cv2
    camera=cv2.VideoCapture(camera_number)
    frames=[]
    try:
        success,image=camera.read()
        image=cv_rgb_bgr_swap(image)
        if not success:
            raise Exception('Error loading image from camera %i'%camera_number)
        frames.append(image)
    finally:
        camera.release()
    last_frame=frames[-1]
    return last_frame
def load_images_from_webcams(*camera_numbers,camera_group_size:int=3):
    images=[]
    camera_groups=split_into_sublists(camera_numbers,sublist_len=camera_group_size)
    for camera_group in camera_groups:
        images+=par_map(load_image_from_webcam_slow,camera_group)
    return images
def display_images(images:list):
    images=[cv_resize_image(image,.5) for image in images]
    images=tiled_images(images)
    display_image(images)
def display_observation():
    pass
    display_images([load_image_from_robocam()]+load_images_from_webcams(0,1,2,3,4,5))
def robot_evaluate(code:str):
    from rp.web_evaluator import Client
    return Client('walle-desktop.local').evaluate(code)
def playground():
    while True:
        key=input_keypress()
        if key=='q': break
        if key=='w': robot_evaluate('forward()')
        if key=='a': robot_evaluate('left()')
        if key=='s': robot_evaluate('backward()')
        if key=='d': robot_evaluate('right()')
        if key==' ': display_observation()
def load_image_from_robocam():
    from rp.web_evaluator import Client
    response=Client('walle-desktop.local').evaluate('load_image_from_robocam()')
    if response.errored:
        raise response.error
    assert response.is_eval
    return response.value
def load_image_from_webcam_slow(camera_number:int,number_of_frames:int=10):
    print(camera_number)
    import cv2
    camera=cv2.VideoCapture(camera_number)
    frames=[]
    try:
        success,image=camera.read()
        image=cv_rgb_bgr_swap(image)
        if not success:
            raise Exception('Error loading image from camera %i'%camera_number)
        frames.append(image)
    finally:
        camera.release()
    last_frame=frames[-1]
    return last_frame
def load_images_from_webcams(*camera_numbers,camera_group_size:int=3):
    images=[]
    camera_groups=split_into_sublists(camera_numbers,sublist_len=camera_group_size)
    for camera_group in camera_groups:
        images+=par_map(load_image_from_webcam_slow,camera_group)
    return images
def display_images(images:list):
    images=[cv_resize_image(image,.5) for image in images]
    images=tiled_images(images)
    display_image(images)
def display_observation():
    pass
    display_images([load_image_from_robocam()]+load_images_from_webcams(0,1,2,3,4,5))
def robot_evaluate(code:str):
    from rp.web_evaluator import Client
    return Client('walle-desktop.local').evaluate(code)
def playground():
    while True:
        key=input_keypress()
        if key=='q': break
        if key=='w': robot_evaluate('forward()')
        if key=='a': robot_evaluate('left()')
        if key=='s': robot_evaluate('backward()')
        if key=='d': robot_evaluate('right()')
        if key==' ': display_observation()
ans=load_image_from_webcam_slow(2)
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot');sys.path.append(os.getcwd())# CDB
ans = '/Users/Ryan/.vimrc'
def load_image_from_robocam():
    from rp.web_evaluator import Client
    response=Client('walle-desktop.local').evaluate('load_image_from_robocam()')
    if response.errored:
        raise response.error
    assert response.is_eval
    return response.value

class CameraException(Exception):
    def __init__(self,camera_number:int):
        super().__init__('Error loading image from camera %i'%camera_number)

def load_image_from_webcam_slow(camera_number:int,number_of_frames:int=10):
    print(camera_number)
    import cv2
    camera=cv2.VideoCapture(camera_number)
    frames=[]
    try:
        success,image=camera.read()
        image=cv_rgb_bgr_swap(image)
        if not success:
            raise CameraException(camera_number)
        frames.append(image)
    finally:
        camera.release()
    last_frame=frames[-1]
    if last_frame==None:
        raise CameraException(camera_number)
    return last_frame

def load_images_from_webcams(*camera_numbers,camera_group_size:int=3):
    images=[]
    camera_groups=split_into_sublists(camera_numbers,sublist_len=camera_group_size)
    for camera_group in camera_groups:
        images+=par_map(load_image_from_webcam_slow,camera_group)
    return images

def display_images(images:list):
    images=[cv_resize_image(image,.5) for image in images]
    images=tiled_images(images)
    display_image(images)

def display_observation():
    display_images([load_image_from_robocam()]+load_images_from_webcams(0,1,2,3,4,5))

def robot_evaluate(code:str):
    from rp.web_evaluator import Client
    return Client('walle-desktop.local').evaluate(code)

def playground():
    while True:
        key=input_keypress()
        if key=='q': break
        if key=='w': robot_evaluate('forward()')
        if key=='a': robot_evaluate('left()')
        if key=='s': robot_evaluate('backward()')
        if key=='d': robot_evaluate('right()')
        if key==' ': display_observation()

def load_image_from_robocam():
    from rp.web_evaluator import Client
    response=Client('walle-desktop.local').evaluate('load_image_from_robocam()')
    if response.errored:
        raise response.error
    assert response.is_eval
    return response.value

class CameraException(Exception):
    def __init__(self,camera_number:int):
        super().__init__('Error loading image from camera %i'%camera_number)

def load_image_from_webcam_slow(camera_number:int,number_of_frames:int=10):
    print(camera_number)
    import cv2
    camera=cv2.VideoCapture(camera_number)
    frames=[]
    try:
        success,image=camera.read()
        image=cv_rgb_bgr_swap(image)
        if not success:
            raise CameraException(camera_number)
        frames.append(image)
    finally:
        camera.release()
    last_frame=frames[-1]
    if np.all(last_frame==None):
        raise CameraException(camera_number)
    return last_frame

def load_images_from_webcams(*camera_numbers,camera_group_size:int=3):
    images=[]
    camera_groups=split_into_sublists(camera_numbers,sublist_len=camera_group_size)
    for camera_group in camera_groups:
        images+=par_map(load_image_from_webcam_slow,camera_group)
    return images

def display_images(images:list):
    images=[cv_resize_image(image,.5) for image in images]
    images=tiled_images(images)
    display_image(images)

def display_observation():
    display_images([load_image_from_robocam()]+load_images_from_webcams(0,1,2,3,4,5))

def robot_evaluate(code:str):
    from rp.web_evaluator import Client
    return Client('walle-desktop.local').evaluate(code)

def playground():
    while True:
        key=input_keypress()
        if key=='q': break
        if key=='w': robot_evaluate('forward()')
        if key=='a': robot_evaluate('left()')
        if key=='s': robot_evaluate('backward()')
        if key=='d': robot_evaluate('right()')
        if key==' ': display_observation()

ans=load_image_from_webcam_slow(2)
def load_image_from_robocam():
    from rp.web_evaluator import Client
    response=Client('walle-desktop.local').evaluate('load_image_from_robocam()')
    if response.errored:
        raise response.error
    assert response.is_eval
    return response.value

class CameraException(Exception):
    def __init__(self,camera_number:int):
        super().__init__('Error loading image from camera %i'%camera_number)

def load_image_from_webcam_slow(camera_number:int,number_of_frames:int=10):
    print(camera_number)
    import cv2
    camera=cv2.VideoCapture(camera_number)
    frames=[]
    try:
        success,image=camera.read()
        if not success:
            raise CameraException(camera_number)
        image=cv_rgb_bgr_swap(image)
        frames.append(image)
    finally:
        camera.release()
    last_frame=frames[-1]
    return last_frame

def load_images_from_webcams(*camera_numbers,camera_group_size:int=3):
    images=[]
    camera_groups=split_into_sublists(camera_numbers,sublist_len=camera_group_size)
    for camera_group in camera_groups:
        images+=par_map(load_image_from_webcam_slow,camera_group)
    return images

def display_images(images:list):
    images=[cv_resize_image(image,.5) for image in images]
    images=tiled_images(images)
    display_image(images)

def display_observation():
    display_images([load_image_from_robocam()]+load_images_from_webcams(0,1,2,3,4,5))

def robot_evaluate(code:str):
    from rp.web_evaluator import Client
    return Client('walle-desktop.local').evaluate(code)

def playground():
    while True:
        key=input_keypress()
        if key=='q': break
        if key=='w': robot_evaluate('forward()')
        if key=='a': robot_evaluate('left()')
        if key=='s': robot_evaluate('backward()')
        if key=='d': robot_evaluate('right()')
        if key==' ': display_observation()

ans=load_image_from_webcam_slow(1)
ans=load_image_from_webcam_slow(3)
def load_image_from_robocam():
    from rp.web_evaluator import Client
    response=Client('walle-desktop.local').evaluate('load_image_from_robocam()')
    if response.errored:
        raise response.error
    assert response.is_eval
    return response.value

class CameraException(Exception):
    def __init__(self,camera_number:int):
        super().__init__('Error loading image from camera %i'%camera_number)

def load_image_from_webcam_slow(camera_number:int,number_of_frames:int=10):
    print(camera_number)
    import cv2
    camera=cv2.VideoCapture(camera_number)
    frames=[]
    try:
        success,image=camera.read()
        if not success:
            raise CameraException(camera_number)
        image=cv_rgb_bgr_swap(image)
        frames.append(image)
    finally:
        camera.release()
    last_frame=frames[-1]
    return last_frame

def load_images_from_webcams(*camera_numbers,camera_group_size:int=3):
    images=[]
    camera_groups=split_into_sublists(camera_numbers,sublist_len=camera_group_size)
    for camera_group in camera_groups:
        images+=par_map(load_image_from_webcam_slow,camera_group)
    return images

def display_images(images:list):
    images=[cv_resize_image(image,.5) for image in images]
    images=tiled_images(images)
    display_image(images)

def display_observation():
    display_images([load_image_from_robocam()]+load_images_from_webcams(0,1,2,3,4,5))

def robot_evaluate(code:str):
    from rp.web_evaluator import Client
    return Client('walle-desktop.local').evaluate(code)

def playground():
    while True:
        key=input_keypress()
        if key=='q': break
        if key=='w': robot_evaluate('forward()')
        if key=='a': robot_evaluate('left()')
        if key=='s': robot_evaluate('backward()')
        if key=='d': robot_evaluate('right()')
        if key==' ': display_observation()

ans=load_image_from_webcam_slow(3)
ans=load_image_from_webcam_slow(3)
ans=load_image_from_webcam_slow(3)
ans=load_image_from_webcam_slow(3)
ans=load_images_from_webcams(1,2,3)
ans=load_images_from_webcams(1,2,3)
ans=load_images_from_webcams(1,2,3)
ans="def load_image_from_robocam():\n    from rp.web_evaluator import Client\n    response=Client('walle-desktop.local').evaluate('load_image_from_robocam()')\n    if response.errored:\n        raise response.error\n    assert response.is_eval\n    return response.value\n\ndef load_image_from_webcam_slow(camera_number:int,number_of_frames:int=10):\n    print(camera_number)\n    import cv2\n    camera=cv2.VideoCapture(camera_number)\n    frames=[]\n    try:\n        success,image=camera.read()\n        if not success:\n            raise CameraException(camera_number)\n        image=cv_rgb_bgr_swap(image)\n        frames.append(image)\n    finally:\n        camera.release()\n    last_frame=frames[-1]\n    return last_frame\n\ndef load_images_from_webcams(*camera_numbers,camera_group_size:int=3):\n    images=[]\n    camera_groups=split_into_sublists(camera_numbers,sublist_len=camera_group_size)\n    for camera_group in camera_groups:\n        images+=par_map(load_image_from_webcam_slow,camera_group)\n    return images\n\ndef display_images(images:list):\n    images=[cv_resize_image(image,.5) for image in images]\n    images=tiled_images(images)\n    display_image(images)\n\ndef display_observation():\n    display_images([load_image_from_robocam()]+load_images_from_webcams(0,1,2,3,4,5))\n\ndef robot_evaluate(code:str):\n    from rp.web_evaluator import Client\n    return Client('walle-desktop.local').evaluate(code)\n\ndef playground():\n    while True:\n        key=input_keypress()\n        if key=='q': break\n        if key=='w': robot_evaluate('forward()')\n        if key=='a': robot_evaluate('left()')\n        if key=='s': robot_evaluate('backward()')\n        if key=='d': robot_evaluate('right()')\n        if key==' ': display_observation()\n"
ans="def load_image_from_robocam():\n    from rp.web_evaluator import Client\n    response=Client('walle-desktop.local').evaluate('load_image_from_robocam()')\n    if response.errored:\n        raise response.error\n    assert response.is_eval\n    return response.value\n\ndef load_image_from_webcam_slow(camera_number:int,number_of_frames:int=10):\n    print(camera_number)\n    import cv2\n    camera=cv2.VideoCapture(camera_number)\n    frames=[]\n    try:\n        success,image=camera.read()\n        if not success:\n            raise CameraException(camera_number)\n        image=cv_rgb_bgr_swap(image)\n        frames.append(image)\n    finally:\n        camera.release()\n    last_frame=frames[-1]\n    return last_frame\n\ndef load_images_from_webcams(*camera_numbers,camera_group_size:int=3):\n    images=[]\n    camera_groups=split_into_sublists(camera_numbers,sublist_len=camera_group_size)\n    for camera_group in camera_groups:\n        images+=par_map(load_image_from_webcam_slow,camera_group)\n    return images\n\ndef display_images(images:list):\n    images=[cv_resize_image(image,.5) for image in images]\n    images=tiled_images(images)\n    display_image(images)\n\ndef display_observation():\n    display_images([load_image_from_robocam()]+load_images_from_webcams(0,1,2,3,4,5))\n\ndef robot_evaluate(code:str):\n    from rp.web_evaluator import Client\n    return Client('walle-desktop.local').evaluate(code)\n\ndef playground():\n    while True:\n        key=input_keypress()\n        if key=='q': break\n        if key=='w': robot_evaluate('forward()')\n        if key=='a': robot_evaluate('left()')\n        if key=='s': robot_evaluate('backward()')\n        if key=='d': robot_evaluate('right()')\n        if key==' ': display_observation()\n"
display_image(ans)
display_image(ans,1)
ans=load_image_from_robocam()
ans=load_image_from_robocam()
ans=load_image_from_robocam()
ans=load_image_from_robocam()
def load_image_from_robocam():
    from rp.web_evaluator import Client
    response=Client('walle-desktop.local').evaluate('load_image_from_robocam()')
    if response.errored:
        raise response.error
    assert response.is_eval
    return response.value

def load_image_from_webcam_slow(camera_number:int,number_of_frames:int=10):
    print(camera_number)
    import cv2
    camera=cv2.VideoCapture(camera_number)
    frames=[]
    try:
        success,image=camera.read()
        if not success:
            raise CameraException(camera_number)
        image=cv_rgb_bgr_swap(image)
        frames.append(image)
    finally:
        camera.release()
    last_frame=frames[-1]
    return last_frame

def load_images_from_webcams(*camera_numbers,camera_group_size:int=None):
    if camera_group_size==None:
        camera_group_size=3
    images=[]
    camera_groups=split_into_sublists(camera_numbers,sublist_len=camera_group_size)
    for camera_group in camera_groups:
        images+=par_map(load_image_from_webcam_slow,camera_group)
    return images

def load_images_from_webcams_and_robocam(*camera_numbers,camera_group_size:int=None):
    from threading import Thread
    first_person_image=None
    def get_first_person_image():
        nonlocal first_person_image
        first_person_image=load_image_from_robocam()
    thread=Thread(target=get_first_person_image)
    thread.start()
    webcam_images=load_images_from_webcams(*camera_numbers,camera_group_size=camera_group_size)
    return webcam_images+[first_person_image]

def display_images(images:list):
    images=[cv_resize_image(image,.5) for image in images]
    images=tiled_images(images)
    display_image(images)

def display_observation():
    display_images([load_image_from_robocam()]+load_images_from_webcams(0,1,2,3,4,5))

def robot_evaluate(code:str):
    from rp.web_evaluator import Client
    return Client('walle-desktop.local').evaluate(code)

def playground():
    while True:
        key=input_keypress()
        if key=='q': break
        if key=='w': robot_evaluate('forward()')
        if key=='a': robot_evaluate('left()')
        if key=='s': robot_evaluate('backward()')
        if key=='d': robot_evaluate('right()')
        if key==' ': display_observation()

ans=load_images_from_webcams_and_robocam(1,2,3)
def load_image_from_robocam():
    from rp.web_evaluator import Client
    response=Client('walle-desktop.local').evaluate('load_image_from_robocam()')
    if response.errored:
        raise response.error
    assert response.is_eval
    return response.value

def load_image_from_webcam_slow(camera_number:int,number_of_frames:int=10):
    print(camera_number)
    import cv2
    camera=cv2.VideoCapture(camera_number)
    frames=[]
    try:
        success,image=camera.read()
        if not success:
            raise CameraException(camera_number)
        image=cv_rgb_bgr_swap(image)
        frames.append(image)
    finally:
        camera.release()
    last_frame=frames[-1]
    return last_frame

def load_images_from_webcams(*camera_numbers,camera_group_size:int=None):
    if camera_group_size==None:
        camera_group_size=3
    images=[]
    camera_groups=split_into_sublists(camera_numbers,sublist_len=camera_group_size)
    for camera_group in camera_groups:
        images+=par_map(load_image_from_webcam_slow,camera_group)
    return images

def load_images_from_webcams_and_robocam(*camera_numbers,camera_group_size:int=None):
    from threading import Thread
    first_person_image=None
    def get_first_person_image():
        nonlocal first_person_image
        first_person_image=load_image_from_robocam()
    thread=Thread(target=get_first_person_image)
    thread.start()
    webcam_images=load_images_from_webcams(*camera_numbers,camera_group_size=camera_group_size)
    return webcam_images+[first_person_image]

def display_images(images:list):
    images=[cv_resize_image(image,.5) for image in images]
    images=tiled_images(images)
    display_image(images)

def display_observation(*camera_numbers):
    display_images(load_images_from_webcams_and_robocam(*camera_numbers))

def robot_evaluate(code:str):
    from rp.web_evaluator import Client
    return Client('walle-desktop.local').evaluate(code)

def playground():
    while True:
        key=input_keypress()
        if key=='q': break
        if key=='w': robot_evaluate('forward()')
        if key=='a': robot_evaluate('left()')
        if key=='s': robot_evaluate('backward()')
        if key=='d': robot_evaluate('right()')
        if key==' ': display_observation()

display_observation(1,2,3)
display_observation(1,2,3)
display_observation(0,1,2,3)
display_observation(0,1,2,3)
def load_image_from_robocam():
    from rp.web_evaluator import Client
    response=Client('walle-desktop.local').evaluate('load_image_from_robocam()')
    if response.errored:
        raise response.error
    assert response.is_eval
    return response.value

def load_image_from_webcam_slow(camera_number:int,number_of_frames:int=10):
    print(camera_number)
    import cv2
    camera=cv2.VideoCapture(camera_number)
    frames=[]
    try:
        success,image=camera.read()
        if not success:
            raise CameraException(camera_number)
        image=cv_rgb_bgr_swap(image)
        frames.append(image)
    finally:
        camera.release()
    last_frame=frames[-1]
    return last_frame

def load_images_from_webcams(*camera_numbers,camera_group_size:int=None):
    if camera_group_size==None:
        camera_group_size=4
    images=[]
    camera_groups=split_into_sublists(camera_numbers,sublist_len=camera_group_size)
    for camera_group in camera_groups:
        images+=par_map(load_image_from_webcam_slow,camera_group)
    return images

def load_images_from_webcams_and_robocam(*camera_numbers,camera_group_size:int=None):
    from threading import Thread
    first_person_image=None
    def get_first_person_image():
        nonlocal first_person_image
        first_person_image=load_image_from_robocam()
    thread=Thread(target=get_first_person_image)
    thread.start()
    webcam_images=load_images_from_webcams(*camera_numbers,camera_group_size=camera_group_size)
    return webcam_images+[first_person_image]

def display_images(images:list):
    images=[cv_resize_image(image,.5) for image in images]
    images=tiled_images(images)
    display_image(images)

def display_observation(*camera_numbers):
    display_images(load_images_from_webcams_and_robocam(*camera_numbers))

def robot_evaluate(code:str):
    from rp.web_evaluator import Client
    return Client('walle-desktop.local').evaluate(code)

def playground():
    while True:
        key=input_keypress()
        if key=='q': break
        if key=='w': robot_evaluate('forward()')
        if key=='a': robot_evaluate('left()')
        if key=='s': robot_evaluate('backward()')
        if key=='d': robot_evaluate('right()')
        if key==' ': display_observation()

display_observation(0,1,2,3)
display_observation(0,1,2,3)
display_observation(0,1,2,3)
display_observation(0,1,2,3)
def load_image_from_robocam():
    from rp.web_evaluator import Client
    response=Client('walle-desktop.local').evaluate('load_image_from_robocam()')
    if response.errored:
        raise response.error
    assert response.is_eval
    return response.value

def load_image_from_webcam_slow(camera_number:int,number_of_frames:int=10):
    print(camera_number)
    import cv2
    camera=cv2.VideoCapture(camera_number)
    frames=[]
    try:
        success,image=camera.read()
        if not success:
            raise CameraException(camera_number)
        image=cv_rgb_bgr_swap(image)
        frames.append(image)
    finally:
        camera.release()
    last_frame=frames[-1]
    return last_frame

def load_images_from_webcams(*camera_numbers,camera_group_size:int=None):
    if camera_group_size==None:
        camera_group_size=4
    images=[]
    camera_groups=split_into_sublists(camera_numbers,sublist_len=camera_group_size)
    for camera_group in camera_groups:
        images+=par_map(load_image_from_webcam_slow,camera_group)
    return images

def load_images_from_webcams_and_robocam(*camera_numbers,camera_group_size:int=None):
    from threading import Thread
    first_person_image=None
    def get_first_person_image():
        nonlocal first_person_image
        first_person_image=load_image_from_robocam()
    thread=Thread(target=get_first_person_image)
    thread.start()
    webcam_images=load_images_from_webcams(*camera_numbers,camera_group_size=camera_group_size)
    return webcam_images+[first_person_image]

def display_images(images:list):
    images=[cv_resize_image(image,.5) for image in images]
    images=tiled_images(images)
    display_image(images)

def display_observation(*camera_numbers):
    default_camera_numbers=(0,1,2,3)
    camera_numbers=camera_numbers or default_camera_numbers
    display_images(load_images_from_webcams_and_robocam(*camera_numbers))

def robot_evaluate(code:str):
    from rp.web_evaluator import Client
    return Client('walle-desktop.local').evaluate(code)

def playground():
    while True:
        key=input_keypress()
        if key=='q': break
        if key=='w': robot_evaluate('forward()')
        if key=='a': robot_evaluate('left()')
        if key=='s': robot_evaluate('backward()')
        if key=='d': robot_evaluate('right()')
        if key==' ': display_observation()

display_observation(0,1,2,3)
playground()
def load_image_from_robocam():
    from rp.web_evaluator import Client
    response=Client('walle-desktop.local').evaluate('load_image_from_robocam()')
    if response.errored:
        raise response.error
    assert response.is_eval
    return response.value

def load_image_from_webcam_slow(camera_number:int,number_of_frames:int=10):
    print(camera_number)
    import cv2
    camera=cv2.VideoCapture(camera_number)
    frames=[]
    try:
        success,image=camera.read()
        if not success:
            raise CameraException(camera_number)
        image=cv_rgb_bgr_swap(image)
        frames.append(image)
    finally:
        camera.release()
    last_frame=frames[-1]
    return last_frame

def load_images_from_webcams(*camera_numbers,camera_group_size:int=None):
    if camera_group_size==None:
        camera_group_size=4
    images=[]
    camera_groups=split_into_sublists(camera_numbers,sublist_len=camera_group_size)
    for camera_group in camera_groups:
        images+=par_map(load_image_from_webcam_slow,camera_group)
    return images

def load_images_from_webcams_and_robocam(*camera_numbers,camera_group_size:int=None):
    from threading import Thread
    first_person_image=None
    def get_first_person_image():
        nonlocal first_person_image
        first_person_image=load_image_from_robocam()
    thread=Thread(target=get_first_person_image)
    thread.start()
    webcam_images=load_images_from_webcams(*camera_numbers,camera_group_size=camera_group_size)
    return webcam_images+[first_person_image]

def display_images(images:list):
    images=[cv_resize_image(image,.5) for image in images]
    images=tiled_images(images)
    display_image(images)

def display_observation(*camera_numbers):
    default_camera_numbers=(0,1,2,3)
    camera_numbers=camera_numbers or default_camera_numbers
    display_images(load_images_from_webcams_and_robocam(*camera_numbers))

def robot_evaluate(code:str):
    from rp.web_evaluator import Client
    return Client('walle-desktop.local').evaluate(code)

def playground():
    while True:
        key=input_keypress()
        if key=='q': break
        if key=='w': robot_evaluate('forward()')
        if key=='a': robot_evaluate('left()')
        if key=='s': robot_evaluate('backward()')
        if key=='d': robot_evaluate('right()')
        if key==' ': display_observation()



############################################################
########### BEGINNING OF PSEUDO TERMINAL SESSION ###########
###########    Wed Aug 11, 2021 at 7:45:18PM     ###########
############################################################
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot');sys.path.append(os.getcwd())# CDB
import sys,os;os.chdir('datasets');sys.path.append(os.getcwd())# TAKE datasets
import sys,os;os.chdir('attempt1');sys.path.append(os.getcwd())# TAKE attempt1
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot/datasets');sys.path.append(os.getcwd())# CD ..
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot');sys.path.append(os.getcwd())# CD ..
def robot_evaluate(code:str):
    from rp.web_evaluator import Client
    return Client('walle-desktop.local').evaluate(code)

def load_image_from_robocam():
    response=robot_evaluate('load_image_from_robocam()')
    if response.errored:
        raise response.error
    assert response.is_eval
    return response.value

def load_image_from_webcam_slow(camera_number:int,number_of_frames:int=10):
    print(camera_number)
    import cv2
    camera=cv2.VideoCapture(camera_number)
    frames=[]
    try:
        success,image=camera.read()
        if not success:
            raise CameraException(camera_number)
        image=cv_rgb_bgr_swap(image)
        frames.append(image)
    finally:
        camera.release()
    last_frame=frames[-1]
    return last_frame

def load_images_from_webcams(*camera_numbers,camera_group_size:int=None):
    if camera_group_size==None:
        camera_group_size=4
    images=[]
    camera_groups=split_into_sublists(camera_numbers,sublist_len=camera_group_size)
    for camera_group in camera_groups:
        images+=par_map(load_image_from_webcam_slow,camera_group)
    return images

def load_images_from_webcams_and_robocam(*camera_numbers,camera_group_size:int=None):
    from threading import Thread
    first_person_image=None
    def get_first_person_image():
        nonlocal first_person_image
        first_person_image=load_image_from_robocam()
    thread=Thread(target=get_first_person_image)
    thread.start()
    webcam_images=load_images_from_webcams(*camera_numbers,camera_group_size=camera_group_size)
    return webcam_images+[first_person_image]

def display_images(images:list):
    images=[cv_resize_image(image,.5) for image in images]
    images=tiled_images(images)
    display_image(images)

def display_observation(*camera_numbers):
    default_camera_numbers=(0,1,2,3)
    camera_numbers=camera_numbers or default_camera_numbers
    display_images(load_images_from_webcams_and_robocam(*camera_numbers))

def playground():
    while True:
        key=input_keypress()
        if key=='q': break
        if key=='w': robot_evaluate('forward()')
        if key=='a': robot_evaluate('left()')
        if key=='s': robot_evaluate('backward()')
        if key=='d': robot_evaluate('right()')
        if key==' ': display_observation()

import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot/datasets');sys.path.append(os.getcwd())# CDB
playground()
def robot_evaluate(code:str):
    from rp.web_evaluator import Client
    return Client('walle-desktop.local').evaluate(code)

def load_image_from_robocam():
    response=robot_evaluate('load_image_from_robocam()')
    if response.errored:
        raise response.error
    assert response.is_eval
    return response.value

def load_image_from_webcam_slow(camera_number:int,number_of_frames:int=10):
    print(camera_number)
    import cv2
    camera=cv2.VideoCapture(camera_number)
    frames=[]
    try:
        success,image=camera.read()
        if not success:
            raise CameraException(camera_number)
        image=cv_rgb_bgr_swap(image)
        frames.append(image)
    finally:
        camera.release()
    last_frame=frames[-1]
    return last_frame

def load_images_from_webcams(*camera_numbers,camera_group_size:int=None):
    if camera_group_size==None:
        camera_group_size=4
    images=[]
    camera_groups=split_into_sublists(camera_numbers,sublist_len=camera_group_size)
    for camera_group in camera_groups:
        images+=par_map(load_image_from_webcam_slow,camera_group)
    return images

def load_images_from_webcams_and_robocam(*camera_numbers,camera_group_size:int=None):
    from threading import Thread
    first_person_image=None
    def get_first_person_image():
        nonlocal first_person_image
        first_person_image=load_image_from_robocam()
    thread=Thread(target=get_first_person_image)
    thread.start()
    webcam_images=load_images_from_webcams(*camera_numbers,camera_group_size=camera_group_size)
    return webcam_images+[first_person_image]

def display_images(images:list):
    images=[cv_resize_image(image,.5) for image in images]
    images=tiled_images(images)
    display_image(images)

def display_observation(*camera_numbers):
    default_camera_numbers=(0,1,2,3)
    camera_numbers=camera_numbers or default_camera_numbers
    display_images(load_images_from_webcams_and_robocam(*camera_numbers))

def playground():
    while True:
        key=input_keypress()
        if key=='q': break
        if key=='w': robot_evaluate('forward()')
        if key=='a': robot_evaluate('left()')
        if key=='s': robot_evaluate('backward()')
        if key=='d': robot_evaluate('right()')
        if key==' ': display_observation()

dataset_path='attempt1'
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot');sys.path.append(os.getcwd())# CD ..
dataset_path='datasets/attempt1'
ans='a34'.ljust(3,'0')
ans='a34'.ljust(30,'0')
ans='a34'.ljust(30,'0')
def save_state(dataset_path='datasets/attempt1'):
    images=load_images_from_webcams_and_robocam()
    dataset_states_path=path_join(dataset_path,'states')
    number_of_states=len(get_all_paths(dataset_states_path))
    state_name=str(number_of_states).rstrip(6,'0')
    state_path=path_join(dataset_states_path,state_name)
    image_paths=[path_join(state_path,str(i)+'.jpg') for i in range(len(images))]
    make_directory(state_path)
    save_images(images,image_paths)
    return state_name
def save_state(dataset_path='datasets/attempt1'):
    images=load_images_from_webcams_and_robocam()
    dataset_states_path=path_join(dataset_path,'states')
    if not path_exists(dataset_states_path):
        make_directory(dataset_states_path)
    number_of_states=len(get_all_paths(dataset_states_path))
    state_name=str(number_of_states).rstrip(6,'0')
    state_path=path_join(dataset_states_path,state_name)
    image_paths=[path_join(state_path,str(i)+'.jpg') for i in range(len(images))]
    make_directory(state_path)
    save_images(images,image_paths)
    return state_name
def save_state(dataset_path='datasets/attempt1'):
    images=load_images_from_webcams_and_robocam()
    dataset_states_path=path_join(dataset_path,'states')
    if not path_exists(dataset_states_path):
        make_directory(dataset_states_path)
    number_of_states=len(get_all_paths(dataset_states_path))
    state_name=str(number_of_states).rjust(6,'0')
    state_path=path_join(dataset_states_path,state_name)
    image_paths=[path_join(state_path,str(i)+'.jpg') for i in range(len(images))]
    make_directory(state_path)
    save_images(images,image_paths)
    return state_name
def save_state(dataset_path='datasets/attempt1'):
    images=load_images_from_webcams_and_robocam()
    dataset_states_path=path_join(dataset_path,'states')
    if not path_exists(dataset_states_path):
        make_directory(dataset_states_path)
    number_of_states=len(get_all_paths(dataset_states_path))
    state_name=str(number_of_states).rjust(6,'0')
    state_path=path_join(dataset_states_path,state_name)
    image_paths=[path_join(state_path,str(i)+'.jpg') for i in range(len(images))]
    make_directory(state_path)
    save_images(images,image_paths)
    return state_name
ans=load_images_from_webcams_and_robocam()
ans=load_images_from_webcams_and_robocam()
ans=load_images_from_webcams_and_robocam()
ans=load_images_from_webcams_and_robocam(0,1,2,3)
def save_state(dataset_path='datasets/attempt1'):
    images=load_images_from_webcams_and_robocam(0,1,2,3,4)
    dataset_states_path=path_join(dataset_path,'states')
    if not path_exists(dataset_states_path):
        make_directory(dataset_states_path)
    number_of_states=len(get_all_paths(dataset_states_path))
    state_name=str(number_of_states).rjust(6,'0')
    state_path=path_join(dataset_states_path,state_name)
    image_paths=[path_join(state_path,str(i)+'.jpg') for i in range(len(images))]
    make_directory(state_path)
    save_images(images,image_paths)
    return state_name
def save_state(dataset_path='datasets/attempt1'):
    images=load_images_from_webcams_and_robocam(0,1,2,3)
    dataset_states_path=path_join(dataset_path,'states')
    if not path_exists(dataset_states_path):
        make_directory(dataset_states_path)
    number_of_states=len(get_all_paths(dataset_states_path))
    state_name=str(number_of_states).rjust(6,'0')
    state_path=path_join(dataset_states_path,state_name)
    image_paths=[path_join(state_path,str(i)+'.jpg') for i in range(len(images))]
    make_directory(state_path)
    save_images(images,image_paths)
    return state_name
ans=save_state()
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot/datasets');sys.path.append(os.getcwd())# CD datasets
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot/datasets/attempt1');sys.path.append(os.getcwd())# CD attempt1
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot/datasets/attempt1/states');sys.path.append(os.getcwd())# CD states
__import__('rp').os.system("sh");
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot/datasets/attempt1/states/000000');sys.path.append(os.getcwd())# CD 000000
ans=__import__("rp"),open_file_with_default_application('.')
def save_state(dataset_path='datasets/attempt1'):
    images=load_images_from_webcams_and_robocam(0,1,2,3)
    dataset_states_path=path_join(dataset_path,'states')
    if not path_exists(dataset_states_path):
        make_directory(dataset_states_path)
    number_of_states=len(get_all_paths(dataset_states_path))
    state_name=str(number_of_states).rjust(6,'0')
    state_path=path_join(dataset_states_path,state_name)
    image_paths=[path_join(state_path,str(i)+'.jpg') for i in range(len(images))]
    make_directory(state_path)
    save_images(images,image_paths)
    return state_name
def save_transition(action:str,before_state:str,after_state:str,dataset_path='datasets/attempt1'):
    transitions_file=path_join(dataset_path,'transitions.tsv')
    append_line_to_file('\t'.join([before_state,after_state,action]),transitions_file)
    

def get_all_actions():
    return {
        'forward':lambda:robot_evaluate("forward()"),
        'backward':lambda:robot_evaluate("backward()"),
        'left':lambda:robot_evaluate("left()"),
        'right':lambda:robot_evaluate("right()"),
    }

def save_transition(action:str,before_state:str,after_state:str,dataset_path='datasets/attempt1'):
    transitions_file=path_join(dataset_path,'transitions.tsv')
    append_line_to_file('\t'.join([before_state,after_state,action]),transitions_file)
    

def gather_data():
    state=save_state()
    while True:
        old_state=state
        action=random_element(get_all_actions())
        get_all_actions()[action]()
        state=save_state()
        save_transition(action,old_state,state)
        print(state)
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot/datasets/attempt1/states');sys.path.append(os.getcwd())# CD ..
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot/datasets/attempt1');sys.path.append(os.getcwd())# CD ..
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot/datasets');sys.path.append(os.getcwd())# CD ..
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot');sys.path.append(os.getcwd())# CD ..
def robot_evaluate(code:str):
    from rp.web_evaluator import Client
    return Client('walle-desktop.local').evaluate(code)

def load_image_from_robocam():
    response=robot_evaluate('load_image_from_robocam()')
    if response.errored:
        raise response.error
    assert response.is_eval
    return response.value

def load_image_from_webcam_slow(camera_number:int,number_of_frames:int=10):
    print(camera_number)
    import cv2
    camera=cv2.VideoCapture(camera_number)
    frames=[]
    try:
        success,image=camera.read()
        if not success:
            raise CameraException(camera_number)
        image=cv_rgb_bgr_swap(image)
        frames.append(image)
    finally:
        camera.release()
    last_frame=frames[-1]
    return last_frame

def load_images_from_webcams(*camera_numbers,camera_group_size:int=None):
    if camera_group_size==None:
        camera_group_size=4
    images=[]
    camera_groups=split_into_sublists(camera_numbers,sublist_len=camera_group_size)
    for camera_group in camera_groups:
        images+=par_map(load_image_from_webcam_slow,camera_group)
    return images

def load_images_from_webcams_and_robocam(*camera_numbers,camera_group_size:int=None):
    from threading import Thread
    first_person_image=None
    def get_first_person_image():
        nonlocal first_person_image
        first_person_image=load_image_from_robocam()
    thread=Thread(target=get_first_person_image)
    thread.start()
    webcam_images=load_images_from_webcams(*camera_numbers,camera_group_size=camera_group_size)
    return webcam_images+[first_person_image]

def display_images(images:list):
    images=[cv_resize_image(image,.5) for image in images]
    images=tiled_images(images)
    display_image(images)

def display_observation(*camera_numbers):
    default_camera_numbers=(0,1,2,3)
    camera_numbers=camera_numbers or default_camera_numbers
    display_images(load_images_from_webcams_and_robocam(*camera_numbers))

def playground():
    while True:
        key=input_keypress()
        if key=='q': break
        if key=='w': robot_evaluate('forward()')
        if key=='a': robot_evaluate('left()')
        if key=='s': robot_evaluate('backward()')
        if key=='d': robot_evaluate('right()')
        if key==' ': display_observation()
def save_state(dataset_path='datasets/attempt1'):
    images=load_images_from_webcams_and_robocam(0,1,2,3)
    dataset_states_path=path_join(dataset_path,'states')
    if not path_exists(dataset_states_path):
        make_directory(dataset_states_path)
    number_of_states=len(get_all_paths(dataset_states_path))
    state_name=str(number_of_states).rjust(6,'0')
    state_path=path_join(dataset_states_path,state_name)
    image_paths=[path_join(state_path,str(i)+'.jpg') for i in range(len(images))]
    make_directory(state_path)
    save_images(images,image_paths)
    return state_name

def save_transition(action:str,before_state:str,after_state:str,dataset_path='datasets/attempt1'):
    transitions_file=path_join(dataset_path,'transitions.tsv')
    append_line_to_file('\t'.join([before_state,after_state,action]),transitions_file)

def get_all_actions():
    return {
        'forward':lambda:robot_evaluate("forward()"),
        'backward':lambda:robot_evaluate("backward()"),
        'left':lambda:robot_evaluate("left()"),
        'right':lambda:robot_evaluate("right()"),
    }

def gather_data():
    state=save_state()
    while True:
        old_state=state
        action=random_element(get_all_actions())
        get_all_actions()[action]()
        state=save_state()
        save_transition(action,old_state,state)
        print(state)
ans=get_all_actions 
ans=ans()
def robot_evaluate(code:str):
    from rp.web_evaluator import Client
    return Client('walle-desktop.local').evaluate(code)

def load_image_from_robocam():
    response=robot_evaluate('load_image_from_robocam()')
    if response.errored:
        raise response.error
    assert response.is_eval
    return response.value

def load_image_from_webcam_slow(camera_number:int,number_of_frames:int=10):
    print(camera_number)
    import cv2
    camera=cv2.VideoCapture(camera_number)
    frames=[]
    try:
        success,image=camera.read()
        if not success:
            raise CameraException(camera_number)
        image=cv_rgb_bgr_swap(image)
        frames.append(image)
    finally:
        camera.release()
    last_frame=frames[-1]
    return last_frame

def load_images_from_webcams(*camera_numbers,camera_group_size:int=None):
    if camera_group_size==None:
        camera_group_size=4
    images=[]
    camera_groups=split_into_sublists(camera_numbers,sublist_len=camera_group_size)
    for camera_group in camera_groups:
        images+=par_map(load_image_from_webcam_slow,camera_group)
    return images

def load_images_from_webcams_and_robocam(*camera_numbers,camera_group_size:int=None):
    from threading import Thread
    first_person_image=None
    def get_first_person_image():
        nonlocal first_person_image
        first_person_image=load_image_from_robocam()
    thread=Thread(target=get_first_person_image)
    thread.start()
    webcam_images=load_images_from_webcams(*camera_numbers,camera_group_size=camera_group_size)
    return webcam_images+[first_person_image]

def display_images(images:list):
    images=[cv_resize_image(image,.5) for image in images]
    images=tiled_images(images)
    display_image(images)

def display_observation(*camera_numbers):
    default_camera_numbers=(0,1,2,3)
    camera_numbers=camera_numbers or default_camera_numbers
    display_images(load_images_from_webcams_and_robocam(*camera_numbers))

def playground():
    while True:
        key=input_keypress()
        if key=='q': break
        if key=='w': robot_evaluate('forward()')
        if key=='a': robot_evaluate('left()')
        if key=='s': robot_evaluate('backward()')
        if key=='d': robot_evaluate('right()')
        if key==' ': display_observation()
def save_state(dataset_path='datasets/attempt1'):
    images=load_images_from_webcams_and_robocam(0,1,2,3)
    dataset_states_path=path_join(dataset_path,'states')
    if not path_exists(dataset_states_path):
        make_directory(dataset_states_path)
    number_of_states=len(get_all_paths(dataset_states_path))
    state_name=str(number_of_states).rjust(6,'0')
    state_path=path_join(dataset_states_path,state_name)
    image_paths=[path_join(state_path,str(i)+'.jpg') for i in range(len(images))]
    make_directory(state_path)
    save_images(images,image_paths)
    return state_name

def save_transition(action:str,before_state:str,after_state:str,dataset_path='datasets/attempt1'):
    transitions_file=path_join(dataset_path,'transitions.tsv')
    append_line_to_file('\t'.join([before_state,after_state,action]),transitions_file)

def get_all_actions():
    return {
        'forward':lambda:robot_evaluate("forward()"),
        'backward':lambda:robot_evaluate("backward()"),
        'left':lambda:robot_evaluate("left()"),
        'right':lambda:robot_evaluate("right()"),
    }

def gather_data():
    state=save_state()
    while True:
        old_state=state
        action=random_element(list(get_all_actions()))
        get_all_actions()[action]()
        state=save_state()
        save_transition(action,old_state,state)
        print(state)
def robot_evaluate(code:str):
    from rp.web_evaluator import Client
    return Client('walle-desktop.local').evaluate(code)

def load_image_from_robocam():
    response=robot_evaluate('load_image_from_robocam()')
    if response.errored:
        raise response.error
    assert response.is_eval
    return response.value

def load_image_from_webcam_slow(camera_number:int,number_of_frames:int=10):
    print(camera_number)
    import cv2
    camera=cv2.VideoCapture(camera_number)
    frames=[]
    try:
        success,image=camera.read()
        if not success:
            raise CameraException(camera_number)
        image=cv_rgb_bgr_swap(image)
        frames.append(image)
    finally:
        camera.release()
    last_frame=frames[-1]
    return last_frame

def load_images_from_webcams(*camera_numbers,camera_group_size:int=None):
    if camera_group_size==None:
        camera_group_size=4
    images=[]
    camera_groups=split_into_sublists(camera_numbers,sublist_len=camera_group_size)
    for camera_group in camera_groups:
        images+=par_map(load_image_from_webcam_slow,camera_group)
    return images

def load_images_from_webcams_and_robocam(*camera_numbers,camera_group_size:int=None):
    from threading import Thread
    first_person_image=None
    def get_first_person_image():
        nonlocal first_person_image
        first_person_image=load_image_from_robocam()
    thread=Thread(target=get_first_person_image)
    thread.start()
    webcam_images=load_images_from_webcams(*camera_numbers,camera_group_size=camera_group_size)
    return webcam_images+[first_person_image]

def display_images(images:list):
    images=[cv_resize_image(image,.5) for image in images]
    images=tiled_images(images)
    display_image(images)

def display_observation(*camera_numbers):
    default_camera_numbers=(0,1,2,3)
    camera_numbers=camera_numbers or default_camera_numbers
    display_images(load_images_from_webcams_and_robocam(*camera_numbers))

def playground():
    while True:
        key=input_keypress()
        if key=='q': break
        if key=='w': robot_evaluate('forward()')
        if key=='a': robot_evaluate('left()')
        if key=='s': robot_evaluate('backward()')
        if key=='d': robot_evaluate('right()')
        if key==' ': display_observation()
def save_state(dataset_path='datasets/attempt1'):
    images=load_images_from_webcams_and_robocam(0,1,2,3)
    dataset_states_path=path_join(dataset_path,'states')
    if not path_exists(dataset_states_path):
        make_directory(dataset_states_path)
    number_of_states=len(get_all_paths(dataset_states_path))
    state_name=str(number_of_states).rjust(6,'0')
    state_path=path_join(dataset_states_path,state_name)
    image_paths=[path_join(state_path,str(i)+'.png') for i in range(len(images))]
    make_directory(state_path)
    save_images(images,image_paths)
    return state_name

def save_transition(action:str,before_state:str,after_state:str,dataset_path='datasets/attempt1'):
    transitions_file=path_join(dataset_path,'transitions.tsv')
    append_line_to_file('\t'.join([before_state,after_state,action]),transitions_file)

def get_all_actions():
    return {
        'forward':lambda:robot_evaluate("forward()"),
        'backward':lambda:robot_evaluate("backward()"),
        'left':lambda:robot_evaluate("left()"),
        'right':lambda:robot_evaluate("right()"),
    }

def gather_data():
    state=save_state()
    while True:
        old_state=state
        action=random_element(list(get_all_actions()))
        get_all_actions()[action]()
        state=save_state()
        save_transition(action,old_state,state)
        print(state)


############################################################
########### BEGINNING OF PSEUDO TERMINAL SESSION ###########
###########    Wed Aug 11, 2021 at 8:48:54PM     ###########
############################################################
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot');sys.path.append(os.getcwd())# CDB
def robot_evaluate(code:str):
    from rp.web_evaluator import Client
    return Client('walle-desktop.local').evaluate(code)

def load_image_from_robocam():
    response=robot_evaluate('load_image_from_robocam()')
    if response.errored:
        raise response.error
    assert response.is_eval
    return response.value

def load_image_from_webcam_slow(camera_number:int,number_of_frames:int=10):
    print(camera_number)
    import cv2
    camera=cv2.VideoCapture(camera_number)
    frames=[]
    try:
        success,image=camera.read()
        if not success:
            raise CameraException(camera_number)
        image=cv_rgb_bgr_swap(image)
        frames.append(image)
    finally:
        camera.release()
    last_frame=frames[-1]
    return last_frame

def load_images_from_webcams(*camera_numbers,camera_group_size:int=None):
    if camera_group_size==None:
        camera_group_size=4
    images=[]
    camera_groups=split_into_sublists(camera_numbers,sublist_len=camera_group_size)
    for camera_group in camera_groups:
        images+=par_map(load_image_from_webcam_slow,camera_group)
    return images

def load_images_from_webcams_and_robocam(*camera_numbers,camera_group_size:int=None):
    from threading import Thread
    first_person_image=None
    def get_first_person_image():
        nonlocal first_person_image
        first_person_image=load_image_from_robocam()
    thread=Thread(target=get_first_person_image)
    thread.start()
    webcam_images=load_images_from_webcams(*camera_numbers,camera_group_size=camera_group_size)
    return webcam_images+[first_person_image]

def display_images(images:list):
    images=[cv_resize_image(image,.5) for image in images]
    images=tiled_images(images)
    display_image(images)

def display_observation(*camera_numbers):
    default_camera_numbers=(0,1,2,3)
    camera_numbers=camera_numbers or default_camera_numbers
    display_images(load_images_from_webcams_and_robocam(*camera_numbers))

def playground():
    while True:
        key=input_keypress()
        if key=='q': break
        if key=='w': robot_evaluate('forward()')
        if key=='a': robot_evaluate('left()')
        if key=='s': robot_evaluate('backward()')
        if key=='d': robot_evaluate('right()')
        if key==' ': display_observation()
def save_state(dataset_path='datasets/attempt1'):
    images=load_images_from_webcams_and_robocam(0,1,2,3)
    dataset_states_path=path_join(dataset_path,'states')
    if not path_exists(dataset_states_path):
        make_directory(dataset_states_path)
    number_of_states=len(get_all_paths(dataset_states_path))
    state_name=str(number_of_states).rjust(6,'0')
    state_path=path_join(dataset_states_path,state_name)
    image_paths=[path_join(state_path,str(i)+'.png') for i in range(len(images))]
    make_directory(state_path)
    save_images(images,image_paths)
    return state_name

def save_transition(action:str,before_state:str,after_state:str,dataset_path='datasets/attempt1'):
    transitions_file=path_join(dataset_path,'transitions.tsv')
    append_line_to_file('\t'.join([before_state,after_state,action]),transitions_file)

def get_all_actions():
    return {
        'forward':lambda:robot_evaluate("forward()"),
        'backward':lambda:robot_evaluate("backward()"),
        'left':lambda:robot_evaluate("left()"),
        'right':lambda:robot_evaluate("right()"),
    }

def gather_data():
    state=save_state()
    while True:
        old_state=state
        action=random_element(list(get_all_actions()))
        get_all_actions()[action]()
        state=save_state()
        save_transition(action,old_state,state)
        print(state)
ans=load_image_from_robocam()
ans=load_images_from_webcams(0,1,2,3)
def robot_evaluate(code:str):
    from rp.web_evaluator import Client
    return Client('walle-desktop.local').evaluate(code)

def load_image_from_robocam():
    response=robot_evaluate('load_image_from_robocam()')
    if response.errored:
        raise response.error
    assert response.is_eval
    return response.value

def load_image_from_webcam_slow(camera_number:int,number_of_frames:int=10):
    print(camera_number)
    import cv2
    camera=cv2.VideoCapture(camera_number)
    frames=[]
    try:
        success,image=camera.read()
        if not success:
            raise CameraException(camera_number)
        image=cv_rgb_bgr_swap(image)
        frames.append(image)
    finally:
        camera.release()
    last_frame=frames[-1]
    return last_frame

def load_images_from_webcams(*camera_numbers,camera_group_size:int=None):
    if camera_group_size==None:
        camera_group_size=4
    images=[]
    camera_groups=split_into_sublists(camera_numbers,sublist_len=camera_group_size)
    for camera_group in camera_groups:
        images+=par_map(load_image_from_webcam_slow,camera_group)
    return images

def load_images_from_webcams_and_robocam(*camera_numbers,camera_group_size:int=None):
    from threading import Thread
    first_person_image=None
    def get_first_person_image():
        nonlocal first_person_image
        first_person_image=load_image_from_robocam()
    thread=Thread(target=get_first_person_image)
    thread.start()
    webcam_images=load_images_from_webcams(*camera_numbers,camera_group_size=camera_group_size)
    return webcam_images+[first_person_image]

def display_images(images:list):
    images=[cv_resize_image(image,.5) for image in images]
    images=tiled_images(images)
    display_image(images)

def display_observation(*camera_numbers):
    default_camera_numbers=(0,1,2,3)
    camera_numbers=camera_numbers or default_camera_numbers
    display_images(load_images_from_webcams_and_robocam(*camera_numbers))

def playground():
    while True:
        key=input_keypress()
        if key=='q': break
        if key=='w': robot_evaluate('forward()')
        if key=='a': robot_evaluate('left()')
        if key=='s': robot_evaluate('backward()')
        if key=='d': robot_evaluate('right()')
        if key==' ': display_observation()
def save_state(dataset_path='datasets/attempt1'):
    images=load_images_from_webcams_and_robocam(0,1,2,3)
    dataset_states_path=path_join(dataset_path,'states')
    if not path_exists(dataset_states_path):
        make_directory(dataset_states_path)
    number_of_states=len(get_all_paths(dataset_states_path))
    state_name=str(number_of_states).rjust(6,'0')
    state_path=path_join(dataset_states_path,state_name)
    image_paths=[path_join(state_path,str(i)+'.png') for i in range(len(images))]
    make_directory(state_path)
    save_images(images,image_paths)
    return state_name

def save_transition(action:str,before_state:str,after_state:str,dataset_path='datasets/attempt1'):
    transitions_file=path_join(dataset_path,'transitions.tsv')
    append_line_to_file('\t'.join([before_state,after_state,action]),transitions_file)

def get_all_actions():
    return {
        'forward':lambda:robot_evaluate("forward()"),
        'backward':lambda:robot_evaluate("backward()"),
        'left':lambda:robot_evaluate("left()"),
        'right':lambda:robot_evaluate("right()"),
    }

def gather_data():
    state=save_state()
    while True:
        old_state=state
        action=random_element(list(get_all_actions()))
        get_all_actions()[action]()
        state=save_state()
        save_transition(action,old_state,state)
        print(state)
def robot_evaluate(code:str):
    from rp.web_evaluator import Client
    return Client('walle-desktop.local').evaluate(code)

def load_image_from_robocam():
    response=robot_evaluate('load_image_from_robocam()')
    if response.errored:
        raise response.error
    assert response.is_eval
    return response.value

def load_image_from_webcam_slow(camera_number:int,number_of_frames:int=10):
    print(camera_number)
    import cv2
    camera=cv2.VideoCapture(camera_number)
    frames=[]
    try:
        success,image=camera.read()
        if not success:
            raise CameraException(camera_number)
        image=cv_rgb_bgr_swap(image)
        frames.append(image)
    finally:
        camera.release()
    last_frame=frames[-1]
    return last_frame

def load_images_from_webcams(*camera_numbers,camera_group_size:int=None):
    if camera_group_size==None:
        camera_group_size=4
    images=[]
    camera_groups=split_into_sublists(camera_numbers,sublist_len=camera_group_size)
    for camera_group in camera_groups:
        images+=par_map(load_image_from_webcam_slow,camera_group)
    return images

def load_images_from_webcams_and_robocam(*camera_numbers,camera_group_size:int=None):
    from threading import Thread
    first_person_image=None
    def get_first_person_image():
        nonlocal first_person_image
        first_person_image=load_image_from_robocam()
    thread=Thread(target=get_first_person_image)
    thread.start()
    webcam_images=load_images_from_webcams(*camera_numbers,camera_group_size=camera_group_size)
    thread.join()
    return webcam_images+[first_person_image]

def display_images(images:list):
    images=[cv_resize_image(image,.5) for image in images]
    images=tiled_images(images)
    display_image(images)

def display_observation(*camera_numbers):
    default_camera_numbers=(0,1,2,3)
    camera_numbers=camera_numbers or default_camera_numbers
    display_images(load_images_from_webcams_and_robocam(*camera_numbers))

def playground():
    while True:
        key=input_keypress()
        if key=='q': break
        if key=='w': robot_evaluate('forward()')
        if key=='a': robot_evaluate('left()')
        if key=='s': robot_evaluate('backward()')
        if key=='d': robot_evaluate('right()')
        if key==' ': display_observation()
def save_state(dataset_path='datasets/attempt1'):
    images=load_images_from_webcams_and_robocam(0,1,2,3)
    dataset_states_path=path_join(dataset_path,'states')
    if not path_exists(dataset_states_path):
        make_directory(dataset_states_path)
    number_of_states=len(get_all_paths(dataset_states_path))
    state_name=str(number_of_states).rjust(6,'0')
    state_path=path_join(dataset_states_path,state_name)
    image_paths=[path_join(state_path,str(i)+'.png') for i in range(len(images))]
    make_directory(state_path)
    save_images(images,image_paths)
    return state_name

def save_transition(action:str,before_state:str,after_state:str,dataset_path='datasets/attempt1'):
    transitions_file=path_join(dataset_path,'transitions.tsv')
    append_line_to_file('\t'.join([before_state,after_state,action]),transitions_file)

def get_all_actions():
    return {
        'forward':lambda:robot_evaluate("forward()"),
        'backward':lambda:robot_evaluate("backward()"),
        'left':lambda:robot_evaluate("left()"),
        'right':lambda:robot_evaluate("right()"),
    }

def gather_data():
    state=save_state()
    while True:
        old_state=state
        action=random_element(list(get_all_actions()))
        get_all_actions()[action]()
        state=save_state()
        save_transition(action,old_state,state)
        print(state)
ans=load_image_from_robocam()
ans=load_image_from_robocam()
ans=load_image_from_robocam()
ans=load_image_from_robocam()
ans=load_image_from_robocam()
ans=load_image_from_robocam()
ans="def load_image_from_robocam():\n    response=robot_evaluate('load_image_from_robocam()')\n    if response.errored:\n        raise response.error\n    assert response.is_eval\n    return response.value\n"
def robot_evaluate(code:str):
    from rp.web_evaluator import Client
    return Client('walle-desktop.local').evaluate(code)

def load_image_from_robocam():
    response=decode_image_from_bytes(robot_evaluate('encode_image_to_bytes(load_image_from_robocam(),".jpg")'))
    if response.errored:
        raise response.error
    assert response.is_eval
    return response.value

def load_image_from_webcam_slow(camera_number:int,number_of_frames:int=10):
    print(camera_number)
    import cv2
    camera=cv2.VideoCapture(camera_number)
    frames=[]
    try:
        success,image=camera.read()
        if not success:
            raise CameraException(camera_number)
        image=cv_rgb_bgr_swap(image)
        frames.append(image)
    finally:
        camera.release()
    last_frame=frames[-1]
    return last_frame

def load_images_from_webcams(*camera_numbers,camera_group_size:int=None):
    if camera_group_size==None:
        camera_group_size=4
    images=[]
    camera_groups=split_into_sublists(camera_numbers,sublist_len=camera_group_size)
    for camera_group in camera_groups:
        images+=par_map(load_image_from_webcam_slow,camera_group)
    return images

def load_images_from_webcams_and_robocam(*camera_numbers,camera_group_size:int=None):
    from threading import Thread
    first_person_image=None
    def get_first_person_image():
        nonlocal first_person_image
        first_person_image=load_image_from_robocam()
    thread=Thread(target=get_first_person_image)
    thread.start()
    webcam_images=load_images_from_webcams(*camera_numbers,camera_group_size=camera_group_size)
    thread.join()
    return webcam_images+[first_person_image]

def display_images(images:list):
    images=[cv_resize_image(image,.5) for image in images]
    images=tiled_images(images)
    display_image(images)

def display_observation(*camera_numbers):
    default_camera_numbers=(0,1,2,3)
    camera_numbers=camera_numbers or default_camera_numbers
    display_images(load_images_from_webcams_and_robocam(*camera_numbers))

def playground():
    while True:
        key=input_keypress()
        if key=='q': break
        if key=='w': robot_evaluate('forward()')
        if key=='a': robot_evaluate('left()')
        if key=='s': robot_evaluate('backward()')
        if key=='d': robot_evaluate('right()')
        if key==' ': display_observation()
def save_state(dataset_path='datasets/attempt1'):
    images=load_images_from_webcams_and_robocam(0,1,2,3)
    dataset_states_path=path_join(dataset_path,'states')
    if not path_exists(dataset_states_path):
        make_directory(dataset_states_path)
    number_of_states=len(get_all_paths(dataset_states_path))
    state_name=str(number_of_states).rjust(6,'0')
    state_path=path_join(dataset_states_path,state_name)
    image_paths=[path_join(state_path,str(i)+'.png') for i in range(len(images))]
    make_directory(state_path)
    save_images(images,image_paths)
    return state_name

def save_transition(action:str,before_state:str,after_state:str,dataset_path='datasets/attempt1'):
    transitions_file=path_join(dataset_path,'transitions.tsv')
    append_line_to_file('\t'.join([before_state,after_state,action]),transitions_file)

def get_all_actions():
    return {
        'forward':lambda:robot_evaluate("forward()"),
        'backward':lambda:robot_evaluate("backward()"),
        'left':lambda:robot_evaluate("left()"),
        'right':lambda:robot_evaluate("right()"),
    }

def gather_data():
    state=save_state()
    while True:
        old_state=state
        action=random_element(list(get_all_actions()))
        get_all_actions()[action]()
        state=save_state()
        save_transition(action,old_state,state)
        print(state)
def robot_evaluate(code:str):
    from rp.web_evaluator import Client
    return Client('walle-desktop.local').evaluate(code)

def load_image_from_robocam():
    response=decode_image_from_bytes(robot_evaluate('encode_image_to_bytes(load_image_from_robocam(),".jpg")').value)
    if response.errored:
        raise response.error
    assert response.is_eval
    return response.value

def load_image_from_webcam_slow(camera_number:int,number_of_frames:int=10):
    print(camera_number)
    import cv2
    camera=cv2.VideoCapture(camera_number)
    frames=[]
    try:
        success,image=camera.read()
        if not success:
            raise CameraException(camera_number)
        image=cv_rgb_bgr_swap(image)
        frames.append(image)
    finally:
        camera.release()
    last_frame=frames[-1]
    return last_frame

def load_images_from_webcams(*camera_numbers,camera_group_size:int=None):
    if camera_group_size==None:
        camera_group_size=4
    images=[]
    camera_groups=split_into_sublists(camera_numbers,sublist_len=camera_group_size)
    for camera_group in camera_groups:
        images+=par_map(load_image_from_webcam_slow,camera_group)
    return images

def load_images_from_webcams_and_robocam(*camera_numbers,camera_group_size:int=None):
    from threading import Thread
    first_person_image=None
    def get_first_person_image():
        nonlocal first_person_image
        first_person_image=load_image_from_robocam()
    thread=Thread(target=get_first_person_image)
    thread.start()
    webcam_images=load_images_from_webcams(*camera_numbers,camera_group_size=camera_group_size)
    thread.join()
    return webcam_images+[first_person_image]

def display_images(images:list):
    images=[cv_resize_image(image,.5) for image in images]
    images=tiled_images(images)
    display_image(images)

def display_observation(*camera_numbers):
    default_camera_numbers=(0,1,2,3)
    camera_numbers=camera_numbers or default_camera_numbers
    display_images(load_images_from_webcams_and_robocam(*camera_numbers))

def playground():
    while True:
        key=input_keypress()
        if key=='q': break
        if key=='w': robot_evaluate('forward()')
        if key=='a': robot_evaluate('left()')
        if key=='s': robot_evaluate('backward()')
        if key=='d': robot_evaluate('right()')
        if key==' ': display_observation()
def save_state(dataset_path='datasets/attempt1'):
    images=load_images_from_webcams_and_robocam(0,1,2,3)
    dataset_states_path=path_join(dataset_path,'states')
    if not path_exists(dataset_states_path):
        make_directory(dataset_states_path)
    number_of_states=len(get_all_paths(dataset_states_path))
    state_name=str(number_of_states).rjust(6,'0')
    state_path=path_join(dataset_states_path,state_name)
    image_paths=[path_join(state_path,str(i)+'.png') for i in range(len(images))]
    make_directory(state_path)
    save_images(images,image_paths)
    return state_name

def save_transition(action:str,before_state:str,after_state:str,dataset_path='datasets/attempt1'):
    transitions_file=path_join(dataset_path,'transitions.tsv')
    append_line_to_file('\t'.join([before_state,after_state,action]),transitions_file)

def get_all_actions():
    return {
        'forward':lambda:robot_evaluate("forward()"),
        'backward':lambda:robot_evaluate("backward()"),
        'left':lambda:robot_evaluate("left()"),
        'right':lambda:robot_evaluate("right()"),
    }

def gather_data():
    state=save_state()
    while True:
        old_state=state
        action=random_element(list(get_all_actions()))
        get_all_actions()[action]()
        state=save_state()
        save_transition(action,old_state,state)
        print(state)
def robot_evaluate(code:str):
    from rp.web_evaluator import Client
    return Client('walle-desktop.local').evaluate(code)

def load_image_from_robocam():
    response=decode_image_from_bytes(robot_evaluate('encode_image_to_bytes(load_image_from_robocam(),".jpg")').value)
    return response
    #if response.errored:
        #raise response.error
    #assert response.is_eval
    #return response.value

def load_image_from_webcam_slow(camera_number:int,number_of_frames:int=10):
    print(camera_number)
    import cv2
    camera=cv2.VideoCapture(camera_number)
    frames=[]
    try:
        success,image=camera.read()
        if not success:
            raise CameraException(camera_number)
        image=cv_rgb_bgr_swap(image)
        frames.append(image)
    finally:
        camera.release()
    last_frame=frames[-1]
    return last_frame

def load_images_from_webcams(*camera_numbers,camera_group_size:int=None):
    if camera_group_size==None:
        camera_group_size=4
    images=[]
    camera_groups=split_into_sublists(camera_numbers,sublist_len=camera_group_size)
    for camera_group in camera_groups:
        images+=par_map(load_image_from_webcam_slow,camera_group)
    return images

def load_images_from_webcams_and_robocam(*camera_numbers,camera_group_size:int=None):
    from threading import Thread
    first_person_image=None
    def get_first_person_image():
        nonlocal first_person_image
        first_person_image=load_image_from_robocam()
    thread=Thread(target=get_first_person_image)
    thread.start()
    webcam_images=load_images_from_webcams(*camera_numbers,camera_group_size=camera_group_size)
    thread.join()
    return webcam_images+[first_person_image]

def display_images(images:list):
    images=[cv_resize_image(image,.5) for image in images]
    images=tiled_images(images)
    display_image(images)

def display_observation(*camera_numbers):
    default_camera_numbers=(0,1,2,3)
    camera_numbers=camera_numbers or default_camera_numbers
    display_images(load_images_from_webcams_and_robocam(*camera_numbers))

def playground():
    while True:
        key=input_keypress()
        if key=='q': break
        if key=='w': robot_evaluate('forward()')
        if key=='a': robot_evaluate('left()')
        if key=='s': robot_evaluate('backward()')
        if key=='d': robot_evaluate('right()')
        if key==' ': display_observation()
def save_state(dataset_path='datasets/attempt1'):
    images=load_images_from_webcams_and_robocam(0,1,2,3)
    dataset_states_path=path_join(dataset_path,'states')
    if not path_exists(dataset_states_path):
        make_directory(dataset_states_path)
    number_of_states=len(get_all_paths(dataset_states_path))
    state_name=str(number_of_states).rjust(6,'0')
    state_path=path_join(dataset_states_path,state_name)
    image_paths=[path_join(state_path,str(i)+'.png') for i in range(len(images))]
    make_directory(state_path)
    save_images(images,image_paths)
    return state_name

def save_transition(action:str,before_state:str,after_state:str,dataset_path='datasets/attempt1'):
    transitions_file=path_join(dataset_path,'transitions.tsv')
    append_line_to_file('\t'.join([before_state,after_state,action]),transitions_file)

def get_all_actions():
    return {
        'forward':lambda:robot_evaluate("forward()"),
        'backward':lambda:robot_evaluate("backward()"),
        'left':lambda:robot_evaluate("left()"),
        'right':lambda:robot_evaluate("right()"),
    }

def gather_data():
    state=save_state()
    while True:
        old_state=state
        action=random_element(list(get_all_actions()))
        get_all_actions()[action]()
        state=save_state()
        save_transition(action,old_state,state)
        print(state)


############################################################
########### BEGINNING OF PSEUDO TERMINAL SESSION ###########
###########    Wed Aug 11, 2021 at 8:39:50PM     ###########
############################################################
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot');sys.path.append(os.getcwd())# CDB
ans=__import__("rp"),open_file_with_default_application('.')


############################################################
########### BEGINNING OF PSEUDO TERMINAL SESSION ###########
###########    Thu Aug 12, 2021 at 8:03:15PM     ###########
############################################################
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot');sys.path.append(os.getcwd())# CDB
import sys,os;os.chdir('/Users/Ryan');sys.path.append(os.getcwd())# CDB
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot');sys.path.append(os.getcwd())# CDB
ans=get_all_paths()
def transpose_folders(parent_folder='.'):
    subfolders=get_subfolders(parent_folder)
    file_names=sum([get_all_files(subfolder,just_file_names=True) for subfolder in subfolders],[])
    file_names=sorted(set(file_names))
    print(file_names)
    
    
    
    
ans='/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/rp/r.py'
ans='/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/rp/r.py'


############################################################
########### BEGINNING OF PSEUDO TERMINAL SESSION ###########
###########    Thu Aug 12, 2021 at 8:11:06PM     ###########
############################################################
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot');sys.path.append(os.getcwd())# CDB
def transpose_folders(parent_folder='.'):
    subfolders=get_subfolders(parent_folder)
    file_names=sum([get_all_files(subfolder,just_file_names=True) for subfolder in subfolders],[])
    file_names=sorted(set(file_names))
    print(file_names)
    
    
    
    
transpose_folders()
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot/datasets');sys.path.append(os.getcwd())# CD datasets
transpose_folders()
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot/datasets/attempt1');sys.path.append(os.getcwd())# CD attempt1
transpose_folders()
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot/datasets/attempt1/states');sys.path.append(os.getcwd())# CD states
transpose_folders()
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot/datasets/attempt1');sys.path.append(os.getcwd())# CD ..
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot/datasets');sys.path.append(os.getcwd())# CD ..
ans=make_directory('aoisdjf')
def transpose_folders(parent_folder='./states',destination='./images'):
    subfolders=get_subfolders(parent_folder)
    file_names=sum([get_all_files(subfolder,just_file_names=True) for subfolder in subfolders],[])
    file_names=sorted(set(file_names))#['0.png', '1.png', '2.png', '3.png', '4.png']
    print(file_names)
    make_folder(destination)
    for subfolder in subfolders:
        for file in get_all_files(subfolder):
            file=get_relative_path(file,parent_directory=folder)
            folder=make_folder(path_join(destination,get_file_name(file,include_file_extension=False)))
            os.symlink(src=path_join(folder,with_file_extension(get_file_name(subfolder),get_file_extension(file))),dst=file)
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot/datasets/attempt1');sys.path.append(os.getcwd())# CD attempt1
def transpose_folders(parent_folder='./states',destination='./images'):
    subfolders=get_subfolders(parent_folder)
    file_names=sum([get_all_files(subfolder,just_file_names=True) for subfolder in subfolders],[])
    file_names=sorted(set(file_names))#['0.png', '1.png', '2.png', '3.png', '4.png']
    print(file_names)
    make_folder(destination)
    for subfolder in subfolders:
        for file in get_all_files(subfolder):
            folder=make_folder(path_join(destination,get_file_name(file,include_file_extension=False)))
            file=get_relative_path(file,parent_directory=folder)
            os.symlink(src=path_join(folder,with_file_extension(get_file_name(subfolder),get_file_extension(file))),dst=file)
ans='t'
def transpose_folders(parent_folder='./states',destination='./images'):
    subfolders=get_subfolders(parent_folder)
    file_names=sum([get_all_files(subfolder,just_file_names=True) for subfolder in subfolders],[])
    file_names=sorted(set(file_names))#['0.png', '1.png', '2.png', '3.png', '4.png']
    print(file_names)
    make_folder(destination)
    for subfolder in subfolders:
        for file in get_all_files(subfolder):
            folder=make_folder(path_join(destination,get_file_name(file,include_file_extension=False)))
            file=get_relative_path(file,parent_directory='.')
            os.symlink(src=path_join(folder,with_file_extension(get_file_name(subfolder),get_file_extension(file))),dst=file)
def transpose_folders(parent_folder='./states',destination='./images'):
    subfolders=get_subfolders(parent_folder)
    file_names=sum([get_all_files(subfolder,just_file_names=True) for subfolder in subfolders],[])
    file_names=sorted(set(file_names))#['0.png', '1.png', '2.png', '3.png', '4.png']
    print(file_names)
    delete_folder(destination)
    make_folder(destination)
    for subfolder in subfolders:
        for file in get_all_files(subfolder):
            folder=make_folder(path_join(destination,get_file_name(file,include_file_extension=False)))
            file=get_relative_path(file,parent_directory='.')
            os.symlink(src=path_join(folder,with_file_extension(get_file_name(subfolder),get_file_extension(file))),dst=file)
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot/datasets/attempt1/images');sys.path.append(os.getcwd())# CD images
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot/datasets/attempt1/images/4');sys.path.append(os.getcwd())# CD 4
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot/datasets/attempt1/images');sys.path.append(os.getcwd())# CD ..
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot/datasets/attempt1');sys.path.append(os.getcwd())# CD ..
delete_folder('images')
def transpose_folders(parent_folder='./states',destination='./images'):
    subfolders=get_subfolders(parent_folder)
    file_names=sum([get_all_files(subfolder,just_file_names=True) for subfolder in subfolders],[])
    file_names=sorted(set(file_names))#['0.png', '1.png', '2.png', '3.png', '4.png']
    print(file_names)
    delete_folder(destination)
    make_folder(destination)
    for subfolder in subfolders:
        for file in get_all_files(subfolder):
            folder=make_folder(path_join(destination,get_file_name(file,include_file_extension=False)))
            file=get_relative_path(file,parent_directory='.')
            os.symlink(src=path_join(folder,with_file_extension(get_file_name(subfolder),get_file_extension(file))),dst=file)
def transpose_folders(parent_folder='./states',destination='./images'):
    subfolders=get_subfolders(parent_folder)
    file_names=sum([get_all_files(subfolder,just_file_names=True) for subfolder in subfolders],[])
    file_names=sorted(set(file_names))#['0.png', '1.png', '2.png', '3.png', '4.png']
    print(file_names)
    if folder_exists(destination):
        delete_folder(destination)
    make_folder(destination)
    for subfolder in subfolders:
        for file in get_all_files(subfolder):
            folder=make_folder(path_join(destination,get_file_name(file,include_file_extension=False)))
            file=get_relative_path(file,parent_directory='.')
            os.symlink(src=path_join(folder,with_file_extension(get_file_name(subfolder),get_file_extension(file))),dst=file)
ans='t'
def transpose_folders(parent_folder='./states',destination='./images'):
    subfolders=get_subfolders(parent_folder)
    file_names=sum([get_all_files(subfolder,just_file_names=True) for subfolder in subfolders],[])
    file_names=sorted(set(file_names))#['0.png', '1.png', '2.png', '3.png', '4.png']
    print(file_names)
    if folder_exists(destination):
        delete_folder(destination)
    make_folder(destination)
    for subfolder in subfolders:
        for file in get_all_files(subfolder):
            folder=make_folder(path_join(destination,get_file_name(file,include_file_extension=False)))
            file=get_relative_path(file,parent_directory='.')
            os.symlink(dst=path_join(folder,with_file_extension(get_file_name(subfolder),get_file_extension(file))),src=file)
transpose_folders()
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot/datasets/attempt1/images');sys.path.append(os.getcwd())# CD images
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot/datasets/attempt1/images/4');sys.path.append(os.getcwd())# CD 4
def transpose_folders(parent_folder='./states',destination='./images'):
    subfolders=get_subfolders(parent_folder)
    file_names=sum([get_all_files(subfolder,just_file_names=True) for subfolder in subfolders],[])
    file_names=sorted(set(file_names))#['0.png', '1.png', '2.png', '3.png', '4.png']
    print(file_names)
    if folder_exists(destination):
        delete_folder(destination)
    make_folder(destination)
    for subfolder in subfolders:
        for file in get_all_files(subfolder):
            folder=make_folder(path_join(destination,get_file_name(file,include_file_extension=False)))
            file=get_relative_path(file,parent_directory=folder)
            os.symlink(dst=path_join(folder,with_file_extension(get_file_name(subfolder),get_file_extension(file))),src=file)
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot/datasets/attempt1/images');sys.path.append(os.getcwd())# CD ..
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot/datasets/attempt1');sys.path.append(os.getcwd())# CD ..
transpose_folders()
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot/datasets/attempt1/images');sys.path.append(os.getcwd())# CD images
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot/datasets/attempt1/images/1');sys.path.append(os.getcwd())# CD 1
display_image_slideshow()
display_image_slideshow()
display_image_slideshow()
ans=load_images('.',use_cache=True)
ans=len(str(ans))
ims= ans
ims= ans
ans=ims[0]
im= ans
minim= ans
for im in ims:
    minim=np.minimum(im,minim)
display_image(minim)
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot/datasets/attempt1/images');sys.path.append(os.getcwd())# CD ..
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot/datasets/attempt1');sys.path.append(os.getcwd())# CD ..
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot/datasets');sys.path.append(os.getcwd())# CD ..
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot');sys.path.append(os.getcwd())# CD ..
def transpose_folders(parent_folder='./states',destination='./images'):
    subfolders=get_subfolders(parent_folder)
    file_names=sum([get_all_files(subfolder,just_file_names=True) for subfolder in subfolders],[])
    file_names=sorted(set(file_names))#['0.png', '1.png', '2.png', '3.png', '4.png']
    print(file_names)
    if folder_exists(destination):
        delete_folder(destination)
    make_folder(destination)
    for subfolder in subfolders:
        for file in get_all_files(subfolder):
            folder=make_folder(path_join(destination,get_file_name(file,include_file_extension=False)))
            file=get_relative_path(file,parent_directory=folder)
            os.symlink(dst=path_join(folder,with_file_extension(get_file_name(subfolder),get_file_extension(file))),src=file)
ans="def transpose_folders(parent_folder='./states',destination='./images'):\n    subfolders=get_subfolders(parent_folder)\n    file_names=sum([get_all_files(subfolder,just_file_names=True) for subfolder in subfolders],[])\n    file_names=sorted(set(file_names))#['0.png', '1.png', '2.png', '3.png', '4.png']\n    print(file_names)\n    if folder_exists(destination):\n        delete_folder(destination)\n    make_folder(destination)\n    for subfolder in subfolders:\n        for file in get_all_files(subfolder):\n            folder=make_folder(path_join(destination,get_file_name(file,include_file_extension=False)))\n            file=get_relative_path(file,parent_directory=folder)\n            os.symlink(dst=path_join(folder,with_file_extension(get_file_name(subfolder),get_file_extension(file))),src=file)"
def transpose_folders(parent_folder='./states',destination='./images'):
    subfolders=get_subfolders(parent_folder)
    file_names=sum([get_all_files(subfolder,just_file_names=True) for subfolder in subfolders],[])
    file_names=sorted(set(file_names))#['0.png', '1.png', '2.png', '3.png', '4.png']
    print(file_names)
    if folder_exists(destination):
        delete_folder(destination)
    make_folder(destination)
    for subfolder in subfolders:
        for file in get_all_files(subfolder):
            folder=make_folder(path_join(destination,get_file_name(file,include_file_extension=False)))
            file=get_relative_path(file,parent_directory=folder)
            os.symlink(dst=path_join(folder,with_file_extension(get_file_name(subfolder),get_file_extension(file))),src=file)
def transpose_folders(parent_folder='./states',destination='./images'):
    subfolders=get_subfolders(parent_folder)
    file_names=sum([get_all_files(subfolder,just_file_names=True) for subfolder in subfolders],[])
    file_names=sorted(set(file_names))#['0.png', '1.png', '2.png', '3.png', '4.png']
    print(file_names)
    if folder_exists(destination):
        delete_folder(destination)
    make_folder(destination)
    for subfolder in subfolders:
        for file in get_all_files(subfolder):
            folder=make_folder(path_join(destination,get_file_name(file,include_file_extension=False)))
            file=get_relative_path(file,parent_directory=folder)
            os.symlink(dst=path_join(folder,with_file_extension(get_file_name(subfolder),get_file_extension(file))),src=file)
import os;os.system('du -sh')
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot/datasets');sys.path.append(os.getcwd())# CD datasets
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot/datasets/attempt1');sys.path.append(os.getcwd())# CD attempt1
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot/datasets/attempt1/states');sys.path.append(os.getcwd())# CD states
import os;os.system('du -sh')
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot/datasets/attempt1');sys.path.append(os.getcwd())# CD ..
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot/datasets/attempt1/images');sys.path.append(os.getcwd())# CD images
import os;os.system('du -sh')
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot/datasets/attempt1/images/1');sys.path.append(os.getcwd())# CD 1
import os;os.system('du -sh')
ans=[]
ans=['000001.png', '000002.png', '000003.png', '000004.png', '000005.png', '000006.png', '000007.png', '000008.png', '000009.png', '000010.png', '000011.png', '000012.png', '000013.png', '000014.png', '000015.png', '000016.png', '000017.png', '000018.png', '000019.png', '000020.png', '000021.png', '000022.png', '000023.png', '000024.png', '000025.png', '000026.png', '000027.png', '000028.png', '000029.png', '000030.png', '000031.png', '000032.png', '000033.png', '000034.png', '000035.png', '000036.png', '000037.png', '000038.png', '000039.png', '000040.png', '000041.png', '000042.png', '000043.png', '000044.png', '000045.png', '000046.png', '000047.png', '000048.png', '000049.png', '000050.png', '000051.png', '000052.png', '000053.png', '000054.png', '000055.png', '000056.png', '000057.png', '000058.png', '000059.png', '000060.png', '000061.png', '000062.png', '000063.png', '000064.png', '000065.png', '000066.png', '000067.png', '000068.png', '000069.png', '000070.png', '000071.png', '000072.png', '000073.png', '000074.png', '000075.png', '000076.png', '000077.png', '000078.png', '000079.png', '000080.png', '000081.png', '000082.png', '000083.png', '000084.png', '000085.png', '000086.png', '000087.png', '000088.png', '000089.png', '000090.png', '000091.png', '000092.png', '000093.png', '000094.png', '000095.png', '000096.png', '000097.png', '000098.png', '000099.png', '000100.png', '000101.png', '000102.png', '000103.png', '000104.png', '000105.png', '000106.png', '000107.png', '000108.png', '000109.png', '000110.png', '000111.png', '000112.png', '000113.png', '000114.png', '000115.png', '000116.png', '000117.png', '000118.png', '000119.png', '000120.png', '000121.png', '000122.png', '000123.png', '000124.png', '000125.png', '000126.png', '000127.png', '000128.png', '000129.png', '000130.png', '000131.png', '000132.png', '000133.png', '000134.png', '000135.png', '000136.png', '000137.png', '000138.png', '000139.png', '000140.png', '000141.png', '000142.png', '000143.png', '000144.png', '000145.png', '000146.png', '000147.png', '000148.png', '000149.png', '000150.png', '000151.png', '000152.png', '000153.png', '000154.png', '000155.png', '000156.png', '000157.png', '000158.png', '000159.png', '000160.png', '000161.png', '000162.png', '000163.png', '000164.png', '000165.png', '000166.png', '000167.png', '000168.png', '000169.png', '000170.png', '000171.png', '000172.png', '000173.png', '000174.png', '000175.png', '000176.png', '000177.png', '000178.png', '000179.png', '000180.png', '000181.png', '000182.png', '000183.png', '000184.png', '000185.png', '000186.png', '000187.png', '000188.png', '000189.png', '000190.png', '000191.png', '000192.png', '000193.png', '000194.png', '000195.png', '000196.png', '000197.png', '000198.png', '000199.png', '000200.png', '000201.png', '000202.png', '000203.png', '000204.png', '000205.png', '000206.png', '000207.png', '000208.png', '000209.png', '000210.png', '000211.png', '000212.png', '000213.png', '000214.png', '000215.png', '000216.png', '000217.png', '000218.png', '000219.png', '000220.png', '000221.png', '000222.png', '000223.png', '000224.png', '000225.png', '000226.png', '000227.png', '000228.png', '000229.png', '000230.png', '000231.png', '000232.png', '000233.png', '000234.png', '000235.png', '000236.png', '000237.png', '000238.png', '000239.png', '000240.png', '000241.png', '000242.png', '000243.png', '000244.png', '000245.png', '000246.png', '000247.png', '000248.png', '000249.png', '000250.png', '000251.png', '000252.png', '000253.png', '000254.png', '000255.png', '000256.png', '000257.png', '000258.png', '000259.png', '000260.png', '000261.png', '000262.png', '000263.png', '000264.png', '000265.png', '000266.png', '000267.png', '000268.png', '000269.png', '000270.png', '000271.png', '000272.png', '000273.png', '000274.png', '000275.png', '000276.png', '000277.png', '000278.png', '000279.png', '000280.png', '000281.png', '000282.png', '000283.png', '000284.png', '000285.png', '000286.png', '000287.png', '000288.png', '000289.png', '000290.png', '000291.png', '000292.png', '000293.png', '000294.png', '000295.png', '000296.png', '000297.png', '000298.png', '000299.png', '000300.png', '000301.png', '000302.png', '000303.png', '000304.png', '000305.png', '000306.png', '000307.png', '000308.png', '000309.png', '000310.png', '000311.png', '000312.png', '000313.png', '000314.png', '000315.png', '000316.png', '000317.png', '000318.png', '000319.png', '000320.png', '000321.png', '000322.png', '000323.png', '000324.png', '000325.png', '000326.png', '000327.png', '000328.png', '000329.png', '000330.png', '000331.png', '000332.png', '000333.png', '000334.png', '000335.png', '000336.png', '000337.png', '000338.png', '000339.png', '000340.png', '000341.png', '000342.png', '000343.png', '000344.png', '000345.png', '000346.png', '000347.png', '000348.png', '000349.png', '000350.png', '000351.png', '000352.png', '000353.png', '000354.png', '000355.png', '000356.png', '000357.png', '000358.png', '000359.png', '000360.png', '000361.png', '000362.png', '000363.png', '000364.png', '000365.png', '000366.png', '000367.png', '000368.png', '000369.png', '000370.png', '000371.png', '000372.png', '000373.png', '000374.png', '000375.png', '000376.png', '000377.png', '000378.png', '000379.png', '000380.png', '000381.png', '000382.png', '000383.png', '000384.png', '000385.png', '000386.png', '000387.png', '000388.png', '000389.png', '000390.png', '000391.png', '000392.png', '000393.png', '000394.png', '000395.png', '000396.png', '000397.png', '000398.png', '000399.png', '000400.png', '000401.png', '000402.png', '000403.png', '000404.png', '000405.png', '000406.png', '000407.png', '000408.png', '000409.png', '000410.png', '000411.png', '000412.png', '000413.png', '000414.png', '000415.png', '000416.png', '000417.png', '000418.png', '000419.png', '000420.png', '000421.png', '000422.png', '000423.png', '000424.png', '000425.png', '000426.png', '000427.png', '000428.png', '000429.png', '000430.png', '000431.png', '000432.png', '000433.png', '000434.png', '000435.png', '000436.png', '000437.png', '000438.png', '000439.png', '000440.png', '000441.png', '000442.png', '000443.png', '000444.png', '000445.png', '000446.png', '000447.png', '000448.png', '000449.png', '000450.png', '000451.png', '000452.png', '000453.png', '000454.png', '000455.png', '000456.png', '000457.png', '000458.png', '000459.png', '000460.png', '000461.png', '000462.png', '000463.png', '000464.png', '000465.png', '000466.png', '000467.png', '000468.png', '000469.png', '000470.png', '000471.png', '000472.png', '000473.png', '000474.png', '000475.png', '000476.png', '000477.png', '000478.png', '000479.png', '000480.png', '000481.png', '000482.png', '000483.png', '000484.png', '000485.png', '000486.png', '000487.png', '000488.png', '000489.png', '000490.png', '000491.png', '000492.png', '000493.png', '000494.png', '000495.png', '000496.png', '000497.png', '000498.png', '000499.png', '000500.png', '000501.png', '000502.png', '000503.png', '000504.png', '000505.png', '000506.png', '000507.png', '000508.png', '000509.png', '000510.png', '000511.png', '000512.png', '000513.png', '000514.png', '000515.png', '000516.png', '000517.png', '000518.png', '000519.png', '000520.png', '000521.png', '000522.png', '000523.png', '000524.png', '000525.png', '000526.png', '000527.png', '000528.png', '000529.png', '000530.png', '000531.png', '000532.png', '000533.png', '000534.png', '000535.png', '000536.png', '000537.png', '000538.png', '000539.png', '000540.png', '000541.png', '000542.png', '000543.png', '000544.png', '000545.png', '000546.png', '000547.png', '000548.png', '000549.png', '000550.png', '000551.png', '000552.png', '000553.png', '000554.png', '000555.png', '000556.png', '000557.png', '000558.png', '000559.png', '000560.png', '000561.png', '000562.png', '000563.png', '000564.png', '000565.png', '000566.png', '000567.png', '000568.png', '000569.png', '000570.png', '000571.png', '000572.png', '000573.png', '000574.png', '000575.png', '000576.png', '000577.png', '000578.png', '000579.png', '000580.png', '000581.png', '000582.png', '000583.png', '000584.png', '000585.png', '000586.png', '000587.png', '000588.png', '000589.png', '000590.png', '000591.png', '000592.png', '000593.png', '000594.png', '000595.png', '000596.png', '000597.png', '000598.png', '000599.png', '000600.png', '000601.png', '000602.png', '000603.png', '000604.png', '000605.png', '000606.png', '000607.png', '000608.png', '000609.png', '000610.png', '000611.png', '000612.png', '000613.png', '000614.png', '000615.png', '000616.png', '000617.png', '000618.png', '000619.png', '000620.png', '000621.png', '000622.png', '000623.png', '000624.png', '000625.png', '000626.png', '000627.png', '000628.png', '000629.png', '000630.png', '000631.png', '000632.png', '000633.png', '000634.png', '000635.png', '000636.png', '000637.png', '000638.png', '000639.png', '000640.png', '000641.png', '000642.png', '000643.png', '000644.png', '000645.png', '000646.png', '000647.png', '000648.png', '000649.png', '000650.png', '000651.png', '000652.png', '000653.png', '000654.png', '000655.png', '000656.png', '000657.png', '000658.png', '000659.png', '000660.png', '000661.png', '000662.png', '000663.png', '000664.png', '000665.png', '000666.png', '000667.png', '000668.png', '000669.png', '000670.png', '000671.png', '000672.png', '000673.png', '000674.png', '000675.png', '000676.png', '000677.png', '000678.png', '000679.png', '000680.png', '000681.png', '000682.png', '000683.png', '000684.png', '000685.png', '000686.png', '000687.png', '000688.png', '000689.png', '000690.png', '000691.png', '000692.png', '000693.png', '000694.png', '000695.png', '000696.png', '000697.png', '000698.png', '000699.png', '000700.png', '000701.png', '000702.png', '000703.png', '000704.png', '000705.png', '000706.png', '000707.png', '000708.png', '000709.png', '000710.png', '000711.png', '000712.png', '000713.png', '000714.png', '000715.png', '000716.png', '000717.png', '000718.png', '000719.png', '000720.png', '000721.png', '000722.png', '000723.png', '000724.png', '000725.png', '000726.png', '000727.png', '000728.png', '000729.png', '000730.png', '000731.png', '000732.png', '000733.png', '000734.png', '000735.png', '000736.png', '000737.png', '000738.png', '000739.png', '000740.png', '000741.png', '000742.png', '000743.png', '000744.png', '000745.png', '000746.png', '000747.png', '000748.png', '000749.png', '000750.png', '000751.png', '000752.png', '000753.png', '000754.png', '000755.png', '000756.png', '000757.png', '000758.png', '000759.png', '000760.png', '000761.png', '000762.png', '000763.png', '000764.png', '000765.png', '000766.png', '000767.png', '000768.png', '000769.png', '000770.png', '000771.png', '000772.png', '000773.png', '000774.png', '000775.png', '000776.png', '000777.png', '000778.png', '000779.png', '000780.png', '000781.png', '000782.png', '000783.png', '000784.png', '000785.png', '000786.png', '000787.png', '000788.png', '000789.png', '000790.png', '000791.png', '000792.png', '000793.png', '000794.png', '000795.png', '000796.png', '000797.png', '000798.png', '000799.png', '000800.png', '000801.png', '000802.png', '000803.png', '000804.png', '000805.png', '000806.png', '000807.png', '000808.png', '000809.png', '000810.png', '000811.png', '000812.png', '000813.png', '000814.png', '000815.png', '000816.png', '000817.png', '000818.png', '000819.png', '000820.png', '000821.png', '000822.png', '000823.png', '000824.png', '000825.png', '000826.png', '000827.png', '000828.png', '000829.png', '000830.png', '000831.png', '000832.png', '000833.png', '000834.png', '000835.png', '000836.png', '000837.png', '000838.png', '000839.png', '000840.png', '000841.png', '000842.png', '000843.png', '000844.png', '000845.png', '000846.png', '000847.png', '000848.png', '000849.png', '000850.png', '000851.png', '000852.png', '000853.png', '000854.png', '000855.png', '000856.png', '000857.png', '000858.png', '000859.png', '000860.png', '000861.png', '000862.png', '000863.png', '000864.png', '000865.png', '000866.png', '000867.png', '000868.png', '000869.png', '000870.png', '000871.png', '000872.png', '000873.png', '000874.png', '000875.png', '000876.png', '000877.png', '000878.png', '000879.png', '000880.png', '000881.png', '000882.png', '000883.png', '000884.png', '000885.png', '000886.png', '000887.png', '000888.png', '000889.png', '000890.png', '000891.png', '000892.png', '000893.png', '000894.png', '000895.png', '000896.png', '000897.png', '000898.png', '000899.png', '000900.png', '000901.png', '000902.png', '000903.png', '000904.png', '000905.png', '000906.png', '000907.png', '000908.png', '000909.png', '000910.png', '000911.png', '000912.png', '000913.png', '000914.png', '000915.png', '000916.png', '000917.png', '000918.png', '000919.png', '000920.png', '000921.png', '000922.png', '000923.png', '000924.png', '000925.png', '000926.png', '000927.png', '000928.png', '000929.png', '000930.png', '000931.png', '000932.png', '000933.png', '000934.png', '000935.png', '000936.png', '000937.png', '000938.png', '000939.png', '000940.png', '000941.png', '000942.png', '000943.png', '000944.png', '000945.png', '000946.png', '000947.png', '000948.png', '000949.png', '000950.png', '000951.png', '000952.png', '000953.png', '000954.png', '000955.png', '000956.png', '000957.png', '000958.png', '000959.png', '000960.png', '000961.png', '000962.png', '000963.png', '000964.png', '000965.png', '000966.png', '000967.png', '000968.png', '000969.png', '000970.png', '000971.png', '000972.png', '000973.png', '000974.png', '000975.png', '000976.png', '000977.png', '000978.png', '000979.png', '000980.png', '000981.png', '000982.png', '000983.png', '000984.png', '000985.png', '000986.png', '000987.png', '000988.png', '000989.png', '000990.png', '000991.png', '000992.png', '000993.png', '000994.png', '000995.png', '000996.png', '000997.png', '000998.png', '000999.png', '001000.png', '001001.png', '001002.png', '001003.png', '001004.png', '001005.png', '001006.png', '001007.png', '001008.png', '001009.png', '001010.png', '001011.png', '001012.png', '001013.png', '001014.png', '001015.png', '001016.png', '001017.png', '001018.png', '001019.png', '001020.png', '001021.png', '001022.png', '001023.png', '001024.png', '001025.png', '001026.png', '001027.png', '001028.png', '001029.png', '001030.png', '001031.png', '001032.png', '001033.png', '001034.png', '001035.png', '001036.png', '001037.png', '001038.png', '001039.png', '001040.png', '001041.png', '001042.png', '001043.png', '001044.png', '001045.png', '001046.png', '001047.png', '001048.png', '001049.png', '001050.png', '001051.png', '001052.png', '001053.png', '001054.png', '001055.png', '001056.png', '001057.png', '001058.png', '001059.png', '001060.png', '001061.png', '001062.png', '001063.png', '001064.png', '001065.png', '001066.png', '001067.png', '001068.png', '001069.png', '001070.png', '001071.png', '001072.png', '001073.png', '001074.png', '001075.png', '001076.png', '001077.png', '001078.png', '001079.png', '001080.png', '001081.png', '001082.png', '001083.png', '001084.png', '001085.png', '001086.png', '001087.png', '001088.png', '001089.png', '001090.png', '001091.png', '001092.png', '001093.png', '001094.png', '001095.png', '001096.png', '001097.png', '001098.png', '001099.png', '001100.png', '001101.png', '001102.png', '001103.png', '001104.png', '001105.png', '001106.png', '001107.png', '001108.png', '001109.png', '001110.png', '001111.png', '001112.png', '001113.png', '001114.png', '001115.png', '001116.png', '001117.png', '001118.png', '001119.png', '001120.png', '001121.png', '001122.png', '001123.png', '001124.png', '001125.png', '001126.png', '001127.png', '001128.png', '001129.png', '001130.png', '001131.png', '001132.png', '001133.png', '001134.png', '001135.png', '001136.png', '001137.png', '001138.png', '001139.png', '001140.png', '001141.png', '001142.png', '001143.png', '001144.png', '001145.png', '001146.png', '001147.png', '001148.png', '001149.png', '001150.png', '001151.png', '001152.png', '001153.png', '001154.png', '001155.png', '001156.png', '001157.png', '001158.png', '001159.png', '001160.png', '001161.png', '001162.png', '001163.png', '001164.png', '001165.png', '001166.png', '001167.png', '001168.png', '001169.png', '001170.png', '001171.png', '001172.png', '001173.png', '001174.png', '001175.png', '001176.png', '001177.png', '001178.png', '001179.png', '001180.png', '001181.png', '001182.png', '001183.png', '001184.png', '001185.png', '001186.png', '001187.png', '001188.png', '001189.png', '001190.png', '001191.png', '001192.png', '001193.png', '001194.png', '001195.png', '001196.png', '001197.png', '001198.png', '001199.png', '001200.png', '001201.png', '001202.png', '001203.png', '001204.png', '001205.png', '001206.png', '001207.png', '001208.png', '001209.png', '001210.png', '001211.png', '001212.png', '001213.png', '001214.png', '001215.png', '001216.png', '001217.png', '001218.png', '001219.png', '001220.png', '001221.png', '001222.png', '001223.png', '001224.png', '001225.png', '001226.png', '001227.png', '001228.png', '001229.png', '001230.png', '001231.png', '001232.png', '001233.png', '001234.png', '001235.png', '001236.png', '001237.png', '001238.png', '001239.png', '001240.png', '001241.png', '001242.png', '001243.png', '001244.png', '001245.png', '001246.png', '001247.png', '001248.png', '001249.png', '001250.png', '001251.png', '001252.png', '001253.png', '001254.png', '001255.png', '001256.png', '001257.png', '001258.png', '001259.png', '001260.png', '001261.png', '001262.png', '001263.png', '001264.png', '001265.png', '001266.png', '001267.png', '001268.png', '001269.png', '001270.png', '001271.png', '001272.png', '001273.png', '001274.png', '001275.png', '001276.png', '001277.png', '001278.png', '001279.png', '001280.png', '001281.png', '001282.png', '001283.png', '001284.png', '001285.png', '001286.png', '001287.png', '001288.png', '001289.png', '001290.png', '001291.png', '001292.png', '001293.png', '001294.png', '001295.png', '001296.png', '001297.png', '001298.png', '001299.png', '001300.png', '001301.png', '001302.png', '001303.png', '001304.png', '001305.png', '001306.png', '001307.png', '001308.png', '001309.png', '001310.png', '001311.png', '001312.png', '001313.png', '001314.png', '001315.png', '001316.png', '001317.png', '001318.png', '001319.png', '001320.png', '001321.png', '001322.png', '001323.png', '001324.png', '001325.png', '001326.png', '001327.png', '001328.png', '001329.png', '001330.png', '001331.png', '001332.png', '001333.png', '001334.png', '001335.png', '001336.png', '001337.png', '001338.png', '001339.png', '001340.png', '001341.png', '001342.png', '001343.png', '001344.png', '001345.png', '001346.png', '001347.png', '001348.png', '001349.png', '001350.png', '001351.png', '001352.png', '001353.png', '001354.png', '001355.png', '001356.png', '001357.png', '001358.png', '001359.png', '001360.png', '001361.png', '001362.png', '001363.png', '001364.png', '001365.png', '001366.png', '001367.png', '001368.png', '001369.png', '001370.png', '001371.png', '001372.png', '001373.png', '001374.png', '001375.png', '001376.png', '001377.png', '001378.png', '001379.png', '001380.png', '001381.png', '001382.png', '001383.png', '001384.png', '001385.png', '001386.png', '001387.png', '001388.png', '001389.png', '001390.png', '001391.png', '001392.png', '001393.png', '001394.png', '001395.png', '001396.png', '001397.png', '001398.png', '001399.png', '001400.png', '001401.png', '001402.png', '001403.png', '001404.png', '001405.png', '001406.png', '001407.png', '001408.png', '001409.png', '001410.png', '001411.png', '001412.png', '001413.png', '001414.png', '001415.png', '001416.png', '001417.png', '001418.png', '001419.png', '001420.png', '001421.png', '001422.png', '001423.png', '001424.png', '001425.png', '001426.png', '001427.png', '001428.png', '001429.png', '001430.png', '001431.png', '001432.png', '001433.png', '001434.png', '001435.png', '001436.png', '001437.png', '001438.png', '001439.png', '001440.png', '001441.png', '001442.png', '001443.png', '001444.png', '001445.png', '001446.png', '001447.png', '001448.png', '001449.png', '001450.png', '001451.png', '001452.png', '001453.png', '001454.png', '001455.png', '001456.png', '001457.png', '001458.png', '001459.png', '001460.png', '001461.png', '001462.png', '001463.png', '001464.png', '001465.png', '001466.png', '001467.png', '001468.png', '001469.png', '001470.png', '001471.png', '001472.png', '001473.png', '001474.png', '001475.png', '001476.png', '001477.png', '001478.png', '001479.png', '001480.png', '001481.png', '001482.png', '001483.png', '001484.png', '001485.png', '001486.png', '001487.png', '001488.png', '001489.png', '001490.png', '001491.png', '001492.png', '001493.png', '001494.png', '001495.png', '001496.png', '001497.png', '001498.png', '001499.png', '001500.png', '001501.png', '001502.png', '001503.png', '001504.png', '001505.png', '001506.png', '001507.png', '001508.png', '001509.png', '001510.png', '001511.png', '001512.png', '001513.png', '001514.png', '001515.png', '001516.png', '001517.png', '001518.png', '001519.png', '001520.png', '001521.png', '001522.png', '001523.png', '001524.png', '001525.png', '001526.png', '001527.png', '001528.png', '001529.png', '001530.png', '001531.png', '001532.png', '001533.png', '001534.png', '001535.png', '001536.png', '001537.png', '001538.png', '001539.png', '001540.png', '001541.png', '001542.png', '001543.png', '001544.png', '001545.png', '001546.png', '001547.png', '001548.png', '001549.png', '001550.png', '001551.png', '001552.png', '001553.png', '001554.png', '001555.png', '001556.png', '001557.png', '001558.png', '001559.png', '001560.png', '001561.png', '001562.png', '001563.png', '001564.png', '001565.png', '001566.png', '001567.png', '001568.png', '001569.png', '001570.png', '001571.png', '001572.png', '001573.png', '001574.png', '001575.png', '001576.png', '001577.png', '001578.png', '001579.png', '001580.png', '001581.png', '001582.png', '001583.png', '001584.png', '001585.png', '001586.png', '001587.png', '001588.png', '001589.png', '001590.png', '001591.png', '001592.png', '001593.png', '001594.png', '001595.png', '001596.png', '001597.png', '001598.png', '001599.png', '001600.png', '001601.png', '001602.png', '001603.png', '001604.png', '001605.png', '001606.png', '001607.png', '001608.png', '001609.png', '001610.png', '001611.png', '001612.png', '001613.png', '001614.png', '001615.png', '001616.png', '001617.png', '001618.png', '001619.png', '001620.png', '001621.png', '001622.png', '001623.png', '001624.png', '001625.png', '001626.png', '001627.png', '001628.png', '001629.png', '001630.png', '001631.png', '001632.png', '001633.png', '001634.png', '001635.png', '001636.png', '001637.png', '001638.png', '001639.png', '001640.png', '001641.png', '001642.png', '001643.png', '001644.png', '001645.png', '001646.png', '001647.png', '001648.png', '001649.png', '001650.png', '001651.png', '001652.png', '001653.png', '001654.png', '001655.png', '001656.png', '001657.png', '001658.png', '001659.png', '001660.png', '001661.png', '001662.png', '001663.png', '001664.png', '001665.png', '001666.png', '001667.png', '001668.png', '001669.png', '001670.png', '001671.png', '001672.png', '001673.png', '001674.png', '001675.png', '001676.png', '001677.png', '001678.png', '001679.png', '001680.png', '001681.png', '001682.png', '001683.png', '001684.png', '001685.png', '001686.png', '001687.png', '001688.png', '001689.png', '001690.png', '001691.png', '001692.png', '001693.png', '001694.png', '001695.png', '001696.png', '001697.png', '001698.png', '001699.png', '001700.png', '001701.png', '001702.png', '001703.png', '001704.png', '001705.png', '001706.png', '001707.png', '001708.png', '001709.png', '001710.png', '001711.png', '001712.png', '001713.png', '001714.png', '001715.png', '001716.png', '001717.png', '001718.png', '001719.png', '001720.png', '001721.png', '001722.png', '001723.png', '001724.png', '001725.png', '001726.png', '001727.png', '001728.png', '001729.png', '001730.png', '001731.png', '001732.png', '001733.png', '001734.png', '001735.png', '001736.png', '001737.png', '001738.png', '001739.png', '001740.png', '001741.png', '001742.png', '001743.png', '001744.png', '001745.png', '001746.png', '001747.png', '001748.png', '001749.png', '001750.png', '001751.png', '001752.png', '001753.png', '001754.png', '001755.png', '001756.png', '001757.png', '001758.png', '001759.png', '001760.png', '001761.png', '001762.png', '001763.png', '001764.png', '001765.png', '001766.png', '001767.png', '001768.png', '001769.png', '001770.png', '001771.png', '001772.png', '001773.png', '001774.png', '001775.png', '001776.png', '001777.png', '001778.png', '001779.png', '001780.png', '001781.png', '001782.png', '001783.png', '001784.png', '001785.png', '001786.png', '001787.png', '001788.png', '001789.png', '001790.png', '001791.png', '001792.png', '001793.png', '001794.png', '001795.png', '001796.png', '001797.png', '001798.png', '001799.png', '001800.png', '001801.png', '001802.png', '001803.png', '001804.png', '001805.png', '001806.png', '001807.png', '001808.png', '001809.png', '001810.png', '001811.png', '001812.png', '001813.png', '001814.png', '001815.png', '001816.png', '001817.png', '001818.png', '001819.png', '001820.png', '001821.png', '001822.png', '001823.png', '001824.png', '001825.png', '001826.png', '001827.png', '001828.png', '001829.png', '001830.png', '001831.png', '001832.png', '001833.png', '001834.png', '001835.png', '001836.png', '001837.png', '001838.png', '001839.png', '001840.png', '001841.png', '001842.png', '001843.png', '001844.png', '001845.png', '001846.png', '001847.png', '001848.png', '001849.png', '001850.png', '001851.png', '001852.png', '001853.png', '001854.png', '001855.png', '001856.png', '001857.png', '001858.png', '001859.png', '001860.png', '001861.png', '001862.png', '001863.png', '001864.png', '001865.png', '001866.png', '001867.png', '001868.png', '001869.png', '001870.png', '001871.png', '001872.png', '001873.png', '001874.png', '001875.png', '001876.png', '001877.png', '001878.png', '001879.png', '001880.png', '001881.png', '001882.png', '001883.png', '001884.png', '001885.png', '001886.png', '001887.png', '001888.png', '001889.png', '001890.png', '001891.png', '001892.png', '001893.png', '001894.png', '001895.png', '001896.png', '001897.png', '001898.png', '001899.png', '001900.png', '001901.png', '001902.png', '001903.png', '001904.png', '001905.png', '001906.png', '001907.png', '001908.png', '001909.png', '001910.png', '001911.png', '001912.png', '001913.png', '001914.png', '001915.png', '001916.png', '001917.png', '001918.png', '001919.png', '001920.png', '001921.png', '001922.png', '001923.png', '001924.png', '001925.png', '001926.png', '001927.png', '001928.png', '001929.png', '001930.png', '001931.png', '001932.png', '001933.png', '001934.png', '001935.png', '001936.png', '001937.png', '001938.png', '001939.png', '001940.png', '001941.png', '001942.png', '001943.png', '001944.png', '001945.png', '001946.png', '001947.png', '001948.png', '001949.png', '001950.png', '001951.png', '001952.png', '001953.png', '001954.png', '001955.png', '001956.png', '001957.png', '001958.png', '001959.png', '001960.png', '001961.png', '001962.png', '001963.png', '001964.png', '001965.png', '001966.png', '001967.png', '001968.png', '001969.png', '001970.png', '001971.png', '001972.png', '001973.png', '001974.png', '001975.png', '001976.png', '001977.png', '001978.png', '001979.png', '001980.png', '001981.png', '001982.png', '001983.png', '001984.png', '001985.png', '001986.png', '001987.png', '001988.png', '001989.png', '001990.png', '001991.png', '001992.png', '001993.png', '001994.png', '001995.png', '001996.png', '001997.png', '001998.png', '001999.png', '002000.png', '002001.png', '002002.png', '002003.png', '002004.png', '002005.png', '002006.png', '002007.png', '002008.png', '002009.png', '002010.png', '002011.png', '002012.png', '002013.png', '002014.png', '002015.png', '002016.png', '002017.png', '002018.png', '002019.png', '002020.png', '002021.png', '002022.png', '002023.png', '002024.png', '002025.png', '002026.png', '002027.png', '002028.png', '002029.png', '002030.png', '002031.png', '002032.png', '002033.png', '002034.png', '002035.png', '002036.png', '002037.png', '002038.png', '002039.png', '002040.png', '002041.png', '002042.png', '002043.png', '002044.png', '002045.png', '002046.png', '002047.png', '002048.png', '002049.png', '002050.png', '002051.png', '002052.png', '002053.png', '002054.png', '002055.png', '002056.png', '002057.png', '002058.png', '002059.png', '002060.png', '002061.png', '002062.png', '002063.png', '002064.png', '002065.png', '002066.png', '002067.png', '002068.png', '002069.png', '002070.png', '002071.png', '002072.png', '002073.png', '002074.png', '002075.png', '002076.png', '002077.png', '002078.png', '002079.png', '002080.png', '002081.png', '002082.png', '002083.png', '002084.png', '002085.png', '002086.png', '002087.png', '002088.png', '002089.png']
ans=[get_file_size(x,human_readable=False) for x in ans]
ans=sum(ans)
ans=human_readable_file_size(ans)
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot/datasets/attempt1/images');sys.path.append(os.getcwd())# CDB


############################################################
########### BEGINNING OF PSEUDO TERMINAL SESSION ###########
###########    Wed Aug 11, 2021 at 10:41:50PM    ###########
############################################################
def robot_evaluate(code:str):
    from rp.web_evaluator import Client
    return Client('walle-desktop.local').evaluate(code)

def load_image_from_robocam():
    response=decode_image_from_bytes(robot_evaluate('encode_image_to_bytes(load_image_from_robocam(),".jpg")').value)
    return response
    #if response.errored:
        #raise response.error
    #assert response.is_eval
    #return response.value

def load_image_from_webcam_slow(camera_number:int,number_of_frames:int=10):
    print(camera_number)
    import cv2
    camera=cv2.VideoCapture(camera_number)
    frames=[]
    try:
        success,image=camera.read()
        if not success:
            raise CameraException(camera_number)
        image=cv_rgb_bgr_swap(image)
        frames.append(image)
    finally:
        camera.release()
    last_frame=frames[-1]
    return last_frame

def load_images_from_webcams(*camera_numbers,camera_group_size:int=None):
    if camera_group_size==None:
        camera_group_size=4
    images=[]
    camera_groups=split_into_sublists(camera_numbers,sublist_len=camera_group_size)
    for camera_group in camera_groups:
        images+=par_map(load_image_from_webcam_slow,camera_group)
    return images

def load_images_from_webcams_and_robocam(*camera_numbers,camera_group_size:int=None):
    from threading import Thread
    first_person_image=None
    def get_first_person_image():
        nonlocal first_person_image
        first_person_image=load_image_from_robocam()
    thread=Thread(target=get_first_person_image)
    thread.start()
    webcam_images=load_images_from_webcams(*camera_numbers,camera_group_size=camera_group_size)
    thread.join()
    return webcam_images+[first_person_image]

def display_images(images:list):
    images=[cv_resize_image(image,.5) for image in images]
    images=tiled_images(images)
    display_image(images)

def display_observation(*camera_numbers):
    default_camera_numbers=(0,1,2,3)
    camera_numbers=camera_numbers or default_camera_numbers
    display_images(load_images_from_webcams_and_robocam(*camera_numbers))

def playground():
    while True:
        key=input_keypress()
        if key=='q': break
        if key=='w': robot_evaluate('forward()')
        if key=='a': robot_evaluate('left()')
        if key=='s': robot_evaluate('backward()')
        if key=='d': robot_evaluate('right()')
        if key==' ': display_observation()
def save_state(dataset_path='datasets/attempt1'):
    images=load_images_from_webcams_and_robocam(0,1,2,3)
    dataset_states_path=path_join(dataset_path,'states')
    if not path_exists(dataset_states_path):
        make_directory(dataset_states_path)
    number_of_states=len(get_all_paths(dataset_states_path))
    state_name=str(number_of_states).rjust(6,'0')
    state_path=path_join(dataset_states_path,state_name)
    image_paths=[path_join(state_path,str(i)+'.png') for i in range(len(images))]
    make_directory(state_path)
    save_images(images,image_paths)
    return state_name

def save_transition(action:str,before_state:str,after_state:str,dataset_path='datasets/attempt1'):
    transitions_file=path_join(dataset_path,'transitions.tsv')
    append_line_to_file('\t'.join([before_state,after_state,action]),transitions_file)

def get_all_actions():
    return {
        'forward':lambda:robot_evaluate("forward()"),
        'backward':lambda:robot_evaluate("backward()"),
        'left':lambda:robot_evaluate("left()"),
        'right':lambda:robot_evaluate("right()"),
    }

def gather_data():
    state=save_state()
    while True:
        old_state=state
        action=random_element(list(get_all_actions()))
        get_all_actions()[action]()
        state=save_state()
        save_transition(action,old_state,state)
        print(state)
import sys,os;os.chdir('/Users/Ryan/datasets');sys.path.append(os.getcwd())# CD datasets
import sys,os;os.chdir('/Users/Ryan');sys.path.append(os.getcwd())# CD ..
__import__("rp").delete_path('/Users/Ryan/datasets')# /Users/Ryan/datasets
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot');sys.path.append(os.getcwd())# CDH
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot/datasets');sys.path.append(os.getcwd())# CD datasets
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot/datasets/attempt1');sys.path.append(os.getcwd())# CD attempt1
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot/datasets/attempt1/images');sys.path.append(os.getcwd())# CD images
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot/datasets/attempt1/images/3');sys.path.append(os.getcwd())# CD 3
ans=np.min(load_images('.',show_progress=True),0)
display_image(ans)


############################################################
########### BEGINNING OF PSEUDO TERMINAL SESSION ###########
###########    Thu Aug 12, 2021 at 8:59:46PM     ###########
############################################################
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot/datasets/attempt1/images/3');sys.path.append(os.getcwd())# CDB
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot/datasets/attempt1/images');sys.path.append(os.getcwd())# CD ..
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot/datasets/attempt1/images/2');sys.path.append(os.getcwd())# CD 2
image=load_image(random_element(get_all_files('.')))
image_paths=get_all_files('.')
image=load_image(random_element(image_paths))
timer=eta(len(image_paths))
for i,image_path in enumerate(image_paths):
    image=np.minimum(image,load_image(image_path))
    timer(i)
ans=image
display_image(ans)
display_image(ans)
image_paths=get_all_files('.')
min_image=max_image=load_image(random_element(image_paths))
timer=eta(len(image_paths))
for i,image_path in enumerate(image_paths):
    temp_image=load_image(image_path)
    min_image=np.minimum(image,temp_image)
    max_image=np.maximum(image,temp_image)
    timer(i)
display_image(max_image//2+min_image//2)
display_image(max_image)
display_image(min_image)
display_image(max_image)
display_image(min_image)
display_image(max_image)
display_image(max_image)
display_image(min_image)
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot/datasets/attempt1/images');sys.path.append(os.getcwd())# CD ..
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot/datasets/attempt1');sys.path.append(os.getcwd())# CD ..
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot/datasets');sys.path.append(os.getcwd())# CD ..
import sys,os;os.chdir('/Users/Ryan/Desktop/CleanCode/SBU/Research/Jetbot');sys.path.append(os.getcwd())# CD ..
import os;os.system('rm *backup')
import os;os.system('rm *backup*')
import os;os.system('rm .*backup*')
import os;os.system('echo *cam')
ans=keys_and_values_to_dict
ans=open
import sys,os;os.chdir('/Users/Ryan');sys.path.append(os.getcwd())# CD
ans='./.config/alacritty/alacritty.yml'
ans='# Configuration for Alacritty, the GPU enhanced terminal emulator.\n\n# Any items in the `env` entry below will be added as\n# environment variables. Some entries may override variables\n# set by alacritty itself.\n#env:\n  # TERM variable\n  #\n  # This value is used to set the `$TERM` environment variable for\n  # each instance of Alacritty. If it is not present, alacritty will\n  # check the local terminfo database and use \'alacritty\' if it is\n  # available, otherwise \'xterm-256color\' is used.\n  #TERM: xterm-256color\n\nwindow:\n  # Window dimensions (changes require restart)\n  #\n  # Specified in number of columns/lines, not pixels.\n  # If both are `0`, this setting is ignored.\n  dimensions:\n    columns: 80\n    lines: 24\n\n  # Window padding (changes require restart)\n  #\n  # Blank space added around the window in pixels. This padding is not scaled\n  # by DPI and the specified value is always added at both opposing sides.\n  padding:\n    x: 2\n    y: 2\n\n  # Window decorations\n  #\n  # Available values:\n  # - `full`: Window with title bar and title bar buttons\n  # - `none`: Window without title bar, rounded corners, or drop shadow\n  # - `transparent`: Window with title bar with transparent background and title\n  #   bar buttons\n  # - `buttonless`: Window with title bar with transparent background and no\n  #   title bar buttons\n  # Window decorations\n  #\n  # Values for `decorations`:\n  #     - full: Borders and title bar\n  #     - none: Neither borders nor title bar\n  #     - buttonless: Title bar, transparent background and title bar buttons\n  #     - transparent: Title bar, transparent background, but no title bar buttons\n  decorations: full\n\nscrolling:\n  # Maximum number of lines in the scrollback buffer.\n  # Specifying \'0\' will disable scrolling.\n  history: 10000\n\n  # Number of lines the viewport will move for every line scrolled when\n  # scrollback is enabled (history > 0).\n  multiplier: 3\n\n  # Faux Scrolling\n  #\n  # The `faux_multiplier` setting controls the number of lines the terminal\n  # should scroll when the alternate screen buffer is active. This is used\n  # to allow mouse scrolling for applications like `man`.\n  #\n  # Specifying `0` will disable faux scrolling.\n  # faux_multiplier: 0\n\n  # Scroll to the bottom when new text is written to the terminal.\n  # auto_scroll: false\n\n# Spaces per Tab (changes require restart)\n#\n# This setting defines the width of a tab in cells.\n#\n# Some applications, like Emacs, rely on knowing about the width of a tab.\n# To prevent unexpected behavior in these applications, it\'s also required to\n# change the `it` value in terminfo when altering this setting.\n\n# Font configuration (changes require restart)\nfont:\n  # Normal (roman) font face\n  normal:\n    family: Menlo\n    # The `style` can be specified to pick a specific face.\n    #style: Regular\n\n  # Italic font face\n  bold:\n    family: Menlo\n    # The `style` can be specified to pick a specific face.\n    #style: Bold\n\n  # Italic font face\n  italic:\n    family: Menlo\n    # The `style` can be specified to pick a specific face.\n    #style: Italic\n\n  # Point size\n  size: 12.0\n\n  # Offset is the extra space around each character. `offset.y` can be thought of\n  # as modifying the line spacing, and `offset.x` as modifying the letter spacing.\n  offset:\n    x: 0\n    y: 0\n\n  # Glyph offset determines the locations of the glyphs within their cells with\n  # the default being at the bottom. Increasing `x` moves the glyph to the right,\n  # increasing `y` moves the glyph upwards.\n  glyph_offset:\n    x: 0\n    y: 0\n\n  # Scale the font size based on the monitor\'s DPI. This will lead to bigger text on HiDPI\n  # screens and make reading text a little easier.\n  scale_with_dpi: true\n\n  # Thin stroke font rendering (OS X only)\n  #\n  # Thin strokes are suitable for retina displays, but for non-retina screens\n  # it is recommended to set `use_thin_strokes` to `false`\n  use_thin_strokes: true\n\n# Display the time it takes to redraw each frame.\nrender_timer: false\n\n# If `true`, bold text is drawn using the bright color variants.\ndraw_bold_text_with_bright_colors: true\n\n# Colors (Tomorrow Night Bright)\ncolors:\n  # Default colors\n  primary:\n    background: \'0x000000\'\n    foreground: \'0xeaeaea\'\n\n    # Bright and dim foreground colors\n    #\n    # The dimmed foreground color is calculated automatically if it is not present.\n    # If the bright foreground color is not set, or `draw_bold_text_with_bright_colors`\n    # is `false`, the normal foreground color will be used.\n    #dim_foreground: \'0x9a9a9a\'\n    #bright_foreground: \'0xffffff\'\n\n  # Cursor colors\n  #\n  # Colors which should be used to draw the terminal cursor. If these are unset,\n  # the cursor color will be the inverse of the cell color.\n  #cursor:\n  #  text: \'0x000000\'\n  #  cursor: \'0xffffff\'\n\n\n\n  # Normal colors\n  normal:\n    black:   \'0x000000\'\n    red:     \'0xcc0000\'\n    green:   \'0x009900\'\n    yellow:  \'0x999900\'\n    blue:    \'0x3333cc\'\n    magenta: \'0x990099\'\n    cyan:    \'0x339999\'\n    white:   \'0xffffff\'\n\n  # Bright colors\n  bright:\n    black:   \'0x333333\'\n    red:     \'0xcc0000\'\n    green:   \'0x33ff00\'\n    yellow:  \'0xcccc00\'\n    blue:    \'0x3333cc\'\n    magenta: \'0xcc00cc\'\n    cyan:    \'0x00cccc\'\n    white:   \'0xffffff\'\n\n    \n#DEFAULTS;\n  # Normal colors\n  normal:\n    black:   \'0x000000\'\n    red:     \'0xd54e53\'\n    green:   \'0xb9ca4a\'\n    yellow:  \'0xe6c547\'\n    blue:    \'0x7aa6da\'\n    magenta: \'0xc397d8\'\n    cyan:    \'0x70c0ba\'\n    white:   \'0xffffff\'\n  # Bright colors\n  bright:\n    black:   \'0x666666\'\n    red:     \'0xff3334\'\n    green:   \'0x9ec400\'\n    yellow:  \'0xe7c547\'\n    blue:    \'0x7aa6da\'\n    magenta: \'0xb77ee0\'\n    cyan:    \'0x54ced6\'\n    white:   \'0xffffff\'\n\n\n  # Dim colors\n  #\n  # If the dim colors are not set, they will be calculated automatically based\n  # on the `normal` colors.\n  dim:\n    black:   \'0x333333\'\n    red:     \'0xf2777a\'\n    green:   \'0x99cc99\'\n    yellow:  \'0xffcc66\'\n    blue:    \'0x6699cc\'\n    magenta: \'0xcc99cc\'\n    cyan:    \'0x66cccc\'\n    white:   \'0xdddddd\'\n\n  # Indexed Colors\n  #\n  # The indexed colors include all colors from 16 to 256.\n  # When these are not set, they\'re filled with sensible defaults.\n  #indexed_colors:\n  #  - { index: 16, color: \'0x000000\' }\n\n# Visual Bell\n#\n# Any time the BEL code is received, Alacritty "rings" the visual bell. Once\n# rung, the terminal background will be set to white and transition back to the\n# default background color. You can control the rate of this transition by\n# setting the `duration` property (represented in milliseconds). You can also\n# configure the transition function by setting the `animation` property.\n#\n# Values for `animation`:\n#   - Ease\n#   - EaseOut\n#   - EaseOutSine\n#   - EaseOutQuad\n#   - EaseOutCubic\n#   - EaseOutQuart\n#   - EaseOutQuint\n#   - EaseOutExpo\n#   - EaseOutCirc\n#   - Linear\n#\n# Specifying a `duration` of `0` will disable the visual bell.\n# visual_bell:\n#   animation: EaseOutExpo\n#   duration: 0\n\n# Background opacity\n#\n# Window opacity as a floating point number from `0.0` to `1.0`.\n# The value `0.0` is completely transparent and `1.0` is opaque.\nbackground_opacity: 1.0\n\n# Mouse bindings\n#\n# Available fields:\n# - mouse\n# - action\n# - mods (optional)\n#\n# Values for `mouse`:\n# - Middle\n# - Left\n# - Right\n# - Numeric identifier such as `5`\n#\n# All available `mods` and `action` values are documented in the key binding\n# section.\nmouse_bindings:\n  - { mouse: Middle, action: PasteSelection }\n\nmouse:\n  # Click settings\n  #\n  # The `double_click` and `triple_click` settings control the time\n  # alacritty should wait for accepting multiple clicks as one double\n  # or triple click.\n  double_click: { threshold: 300 }\n  triple_click: { threshold: 300 }\n\n  # If this is `true`, the cursor is temporarily hidden when typing.\n  hide_when_typing: false\n\n  hints:\n    # URL launcher\n    #\n    # This program is executed when clicking on a text which is recognized as a URL.\n    # The URL is always added to the command as the last parameter.\n    launcher: open\n\n    # URL modifiers\n    #\n    # These are the modifiers that need to be held down for opening URLs when clicking\n    # on them. The available modifiers are documented in the key binding section.\n    #modifiers: Control|Shift\n\nselection:\n  semantic_escape_chars: ",│`|:\\"\' ()[]{}<>"\n\n  # When set to `true`, selected text will be copied to the primary clipboard.\n  save_to_clipboard: false\n\ncursor:\n  # Cursor style\n  #\n  # Values for \'style\':\n  #   - ▇ Block\n  #   - _ Underline\n  #   - | Beam\n  style: Beam\n\n  # If this is `true`, the cursor will be rendered as a hollow box when the\n  # window is not focused.\n  unfocused_hollow: true\n\n# Live config reload (changes require restart)\nlive_config_reload: true\n\n# Shell\n#\n# You can set `shell.program` to the path of your favorite shell, e.g. `/bin/fish`.\n# Entries in `shell.args` are passed unmodified as arguments to the shell.\n#shell:\n#  program: /bin/bash\n#  args:\n#    - --login\n\n# Key bindings\n#\n# Key bindings are specified as a list of objects. Each binding will specify\n# a key and modifiers required to trigger it, terminal modes where the binding\n# is applicable, and what should be done when the key binding fires. It can\n# either send a byte sequnce to the running application (`chars`), execute\n# a predefined action (`action`) or fork and execute a specified command plus\n# arguments (`command`).\n#\n# Example:\n#   `- { key: V, mods: Command, action: Paste }`\n#\n# Available fields:\n#   - key\n#   - mods (optional)\n#   - chars | action | command (exactly one required)\n#   - mode (optional)\n#\n# Values for `key`:\n#   - `A` -> `Z`\n#   - `F1` -> `F12`\n#   - `Key1` -> `Key0`\n#\n#   A full list with available key codes can be found here:\n#   https://docs.rs/glutin/*/glutin/enum.VirtualKeyCode.html#variants\n#\n#   Instead of using the name of the keys, the `key` field also supports using\n#   the scancode of the desired key. Scancodes have to be specified as a\n#   decimal number.\n#   This command will allow you to display the hex scancodes for certain keys:\n#     `showkey --scancodes`\n#\n# Values for `mods`:\n#   - Command\n#   - Control\n#   - Shift\n#   - Alt\n#\n#   Multiple `mods` can be combined using `|` like this: `mods: Control|Shift`.\n#   Whitespace and capitalization is relevant and must match the example.\n#\n# Values for `chars`:\n#   The `chars` field writes the specified string to the terminal. This makes\n#   it possible to pass escape sequences.\n#   To find escape codes for bindings like `PageUp` ("\\x1b[5~"), you can run\n#   the command `showkey -a` outside of tmux.\n#   Note that applications use terminfo to map escape sequences back to\n#   keys. It is therefore required to update the terminfo when\n#   changing an escape sequence.\n#\n# Values for `action`:\n#   - Paste\n#   - PasteSelection\n#   - Copy\n#   - IncreaseFontSize\n#   - DecreaseFontSize\n#   - ResetFontSize\n#   - ScrollPageUp\n#   - ScrollPageDown\n#   - ScrollToTop\n#   - ScrollToBottom\n#   - ClearHistory\n#   - Hide\n#   - Quit\n#\n# Values for `command`:\n#   The `command` field must be a map containing a `program` string and\n#   an `args` array of command line parameter strings.\n#\n#   Example:\n#       `command: { program: "alacritty", args: ["-e", "vttest"] }`\n#\n# Values for `mode`:\n#   - ~AppCursor\n#   - AppCursor\n#   - ~AppKeypad\n#   - AppKeypad\nkey_bindings:\n  - { key: V,        mods: Command, action: Paste                        }\n  - { key: C,        mods: Command, action: Copy                         }\n  - { key: Paste,                   action: Paste                        }\n  - { key: Copy,                    action: Copy                         }\n  - { key: H,        mods: Command, action: Hide                         }\n  - { key: Q,        mods: Command, action: Quit                         }\n  - { key: W,        mods: Command, action: Quit                         }\n  - { key: Home,                    chars: "\\x1bOH",   mode: AppCursor   }\n  - { key: Home,                    chars: "\\x1b[H",   mode: ~AppCursor  }\n  - { key: End,                     chars: "\\x1bOF",   mode: AppCursor   }\n  - { key: End,                     chars: "\\x1b[F",   mode: ~AppCursor  }\n  - { key: Key0,     mods: Command, action: ResetFontSize                }\n  - { key: Equals,   mods: Command, action: IncreaseFontSize             }\n  - { key: Minus,    mods: Command, action: DecreaseFontSize             }\n  - { key: K,        mods: Command, action: ClearHistory                 }\n  - { key: K,        mods: Command, chars: "\\x0c"                        }\n  - { key: PageUp,   mods: Shift,   chars: "\\x1b[5;2~"                   }\n  - { key: PageUp,   mods: Control, chars: "\\x1b[5;5~"                   }\n  - { key: PageUp,                  chars: "\\x1b[5~"                     }\n  - { key: PageDown, mods: Shift,   chars: "\\x1b[6;2~"                   }\n  - { key: PageDown, mods: Control, chars: "\\x1b[6;5~"                   }\n  - { key: PageDown,                chars: "\\x1b[6~"                     }\n  - { key: Tab,      mods: Shift,   chars: "\\x1b[Z"                      }\n  - { key: Back,                    chars: "\\x7f"                        }\n  - { key: Back,     mods: Alt,     chars: "\\x1b\\x7f"                    }\n  - { key: Insert,                  chars: "\\x1b[2~"                     }\n  - { key: Delete,                  chars: "\\x1b[3~"                     }\n  - { key: Left,     mods: Shift,   chars: "\\x1b[1;2D"                   }\n  - { key: Left,     mods: Control, chars: "\\x1b[1;5D"                   }\n  - { key: Left,     mods: Alt,     chars: "\\x1b[1;3D"                   }\n  - { key: Left,                    chars: "\\x1b[D",   mode: ~AppCursor  }\n  - { key: Left,                    chars: "\\x1bOD",   mode: AppCursor   }\n  - { key: Right,    mods: Shift,   chars: "\\x1b[1;2C"                   }\n  - { key: Right,    mods: Control, chars: "\\x1b[1;5C"                   }\n  - { key: Right,    mods: Alt,     chars: "\\x1b[1;3C"                   }\n  - { key: Right,                   chars: "\\x1b[C",   mode: ~AppCursor  }\n  - { key: Right,                   chars: "\\x1bOC",   mode: AppCursor   }\n  - { key: Up,       mods: Shift,   chars: "\\x1b[1;2A"                   }\n  - { key: Up,       mods: Control, chars: "\\x1b[1;5A"                   }\n  - { key: Up,       mods: Alt,     chars: "\\x1b[1;3A"                   }\n  - { key: Up,                      chars: "\\x1b[A",   mode: ~AppCursor  }\n  - { key: Up,                      chars: "\\x1bOA",   mode: AppCursor   }\n  - { key: Down,     mods: Shift,   chars: "\\x1b[1;2B"                   }\n  - { key: Down,     mods: Control, chars: "\\x1b[1;5B"                   }\n  - { key: Down,     mods: Alt,     chars: "\\x1b[1;3B"                   }\n  - { key: Down,                    chars: "\\x1b[B",   mode: ~AppCursor  }\n  - { key: Down,                    chars: "\\x1bOB",   mode: AppCursor   }\n  - { key: F1,                      chars: "\\x1bOP"                      }\n  - { key: F2,                      chars: "\\x1bOQ"                      }\n  - { key: F3,                      chars: "\\x1bOR"                      }\n  - { key: F4,                      chars: "\\x1bOS"                      }\n  - { key: F5,                      chars: "\\x1b[15~"                    }\n  - { key: F6,                      chars: "\\x1b[17~"                    }\n  - { key: F7,                      chars: "\\x1b[18~"                    }\n  - { key: F8,                      chars: "\\x1b[19~"                    }\n  - { key: F9,                      chars: "\\x1b[20~"                    }\n  - { key: F10,                     chars: "\\x1b[21~"                    }\n  - { key: F11,                     chars: "\\x1b[23~"                    }\n  - { key: F12,                     chars: "\\x1b[24~"                    }\n  - { key: F1,       mods: Shift,   chars: "\\x1b[1;2P"                   }\n  - { key: F2,       mods: Shift,   chars: "\\x1b[1;2Q"                   }\n  - { key: F3,       mods: Shift,   chars: "\\x1b[1;2R"                   }\n  - { key: F4,       mods: Shift,   chars: "\\x1b[1;2S"                   }\n  - { key: F5,       mods: Shift,   chars: "\\x1b[15;2~"                  }\n  - { key: F6,       mods: Shift,   chars: "\\x1b[17;2~"                  }\n  - { key: F7,       mods: Shift,   chars: "\\x1b[18;2~"                  }\n  - { key: F8,       mods: Shift,   chars: "\\x1b[19;2~"                  }\n  - { key: F9,       mods: Shift,   chars: "\\x1b[20;2~"                  }\n  - { key: F10,      mods: Shift,   chars: "\\x1b[21;2~"                  }\n  - { key: F11,      mods: Shift,   chars: "\\x1b[23;2~"                  }\n  - { key: F12,      mods: Shift,   chars: "\\x1b[24;2~"                  }\n  - { key: F1,       mods: Control, chars: "\\x1b[1;5P"                   }\n  - { key: F2,       mods: Control, chars: "\\x1b[1;5Q"                   }\n  - { key: F3,       mods: Control, chars: "\\x1b[1;5R"                   }\n  - { key: F4,       mods: Control, chars: "\\x1b[1;5S"                   }\n  - { key: F5,       mods: Control, chars: "\\x1b[15;5~"                  }\n  - { key: F6,       mods: Control, chars: "\\x1b[17;5~"                  }\n  - { key: F7,       mods: Control, chars: "\\x1b[18;5~"                  }\n  - { key: F8,       mods: Control, chars: "\\x1b[19;5~"                  }\n  - { key: F9,       mods: Control, chars: "\\x1b[20;5~"                  }\n  - { key: F10,      mods: Control, chars: "\\x1b[21;5~"                  }\n  - { key: F11,      mods: Control, chars: "\\x1b[23;5~"                  }\n  - { key: F12,      mods: Control, chars: "\\x1b[24;5~"                  }\n  - { key: F1,       mods: Alt,     chars: "\\x1b[1;6P"                   }\n  - { key: F2,       mods: Alt,     chars: "\\x1b[1;6Q"                   }\n  - { key: F3,       mods: Alt,     chars: "\\x1b[1;6R"                   }\n  - { key: F4,       mods: Alt,     chars: "\\x1b[1;6S"                   }\n  - { key: F5,       mods: Alt,     chars: "\\x1b[15;6~"                  }\n  - { key: F6,       mods: Alt,     chars: "\\x1b[17;6~"                  }\n  - { key: F7,       mods: Alt,     chars: "\\x1b[18;6~"                  }\n  - { key: F8,       mods: Alt,     chars: "\\x1b[19;6~"                  }\n  - { key: F9,       mods: Alt,     chars: "\\x1b[20;6~"                  }\n  - { key: F10,      mods: Alt,     chars: "\\x1b[21;6~"                  }\n  - { key: F11,      mods: Alt,     chars: "\\x1b[23;6~"                  }\n  - { key: F12,      mods: Alt,     chars: "\\x1b[24;6~"                  }\n  - { key: F1,       mods: Command, chars: "\\x1b[1;3P"                   }\n  - { key: F2,       mods: Command, chars: "\\x1b[1;3Q"                   }\n  - { key: F3,       mods: Command, chars: "\\x1b[1;3R"                   }\n  - { key: F4,       mods: Command, chars: "\\x1b[1;3S"                   }\n  - { key: F5,       mods: Command, chars: "\\x1b[15;3~"                  }\n  - { key: F6,       mods: Command, chars: "\\x1b[17;3~"                  }\n  - { key: F7,       mods: Command, chars: "\\x1b[18;3~"                  }\n  - { key: F8,       mods: Command, chars: "\\x1b[19;3~"                  }\n  - { key: F9,       mods: Command, chars: "\\x1b[20;3~"                  }\n  - { key: F10,      mods: Command, chars: "\\x1b[21;3~"                  }\n  - { key: F11,      mods: Command, chars: "\\x1b[23;3~"                  }\n  - { key: F12,      mods: Command, chars: "\\x1b[24;3~"                  }\n  - { key: NumpadEnter,             chars: "\\n"                          }\n\n\n\n\n\n\n#Make alt act as an escape prefix. Credit: https://github.com/alacritty/alacritty/issues/62\n  - { key: A,         mods: Alt,       chars: "\\x1ba"                       }\n  - { key: B,         mods: Alt,       chars: "\\x1bb"                       }\n  - { key: C,         mods: Alt,       chars: "\\x1bc"                       }\n  - { key: D,         mods: Alt,       chars: "\\x1bd"                       }\n  - { key: E,         mods: Alt,       chars: "\\x1be"                       }\n  - { key: F,         mods: Alt,       chars: "\\x1bf"                       }\n  - { key: G,         mods: Alt,       chars: "\\x1bg"                       }\n  - { key: H,         mods: Alt,       chars: "\\x1bh"                       }\n  - { key: I,         mods: Alt,       chars: "\\x1bi"                       }\n  - { key: J,         mods: Alt,       chars: "\\x1bj"                       }\n  - { key: K,         mods: Alt,       chars: "\\x1bk"                       }\n  - { key: L,         mods: Alt,       chars: "\\x1bl"                       }\n  - { key: M,         mods: Alt,       chars: "\\x1bm"                       }\n  - { key: N,         mods: Alt,       chars: "\\x1bn"                       }\n  - { key: O,         mods: Alt,       chars: "\\x1bo"                       }\n  - { key: P,         mods: Alt,       chars: "\\x1bp"                       }\n  - { key: Q,         mods: Alt,       chars: "\\x1bq"                       }\n  - { key: R,         mods: Alt,       chars: "\\x1br"                       }\n  - { key: S,         mods: Alt,       chars: "\\x1bs"                       }\n  - { key: T,         mods: Alt,       chars: "\\x1bt"                       }\n  - { key: U,         mods: Alt,       chars: "\\x1bu"                       }\n  - { key: V,         mods: Alt,       chars: "\\x1bv"                       }\n  - { key: W,         mods: Alt,       chars: "\\x1bw"                       }\n  - { key: X,         mods: Alt,       chars: "\\x1bx"                       }\n  - { key: Y,         mods: Alt,       chars: "\\x1by"                       }\n  - { key: Z,         mods: Alt,       chars: "\\x1bz"                       }\n  - { key: A,         mods: Alt|Shift, chars: "\\x1bA"                       }\n  - { key: B,         mods: Alt|Shift, chars: "\\x1bB"                       }\n  - { key: C,         mods: Alt|Shift, chars: "\\x1bC"                       }\n  - { key: D,         mods: Alt|Shift, chars: "\\x1bD"                       }\n  - { key: E,         mods: Alt|Shift, chars: "\\x1bE"                       }\n  - { key: F,         mods: Alt|Shift, chars: "\\x1bF"                       }\n  - { key: G,         mods: Alt|Shift, chars: "\\x1bG"                       }\n  - { key: H,         mods: Alt|Shift, chars: "\\x1bH"                       }\n  - { key: I,         mods: Alt|Shift, chars: "\\x1bI"                       }\n  - { key: J,         mods: Alt|Shift, chars: "\\x1bJ"                       }\n  - { key: K,         mods: Alt|Shift, chars: "\\x1bK"                       }\n  - { key: L,         mods: Alt|Shift, chars: "\\x1bL"                       }\n  - { key: M,         mods: Alt|Shift, chars: "\\x1bM"                       }\n  - { key: N,         mods: Alt|Shift, chars: "\\x1bN"                       }\n  - { key: O,         mods: Alt|Shift, chars: "\\x1bO"                       }\n  - { key: P,         mods: Alt|Shift, chars: "\\x1bP"                       }\n  - { key: Q,         mods: Alt|Shift, chars: "\\x1bQ"                       }\n  - { key: R,         mods: Alt|Shift, chars: "\\x1bR"                       }\n  - { key: S,         mods: Alt|Shift, chars: "\\x1bS"                       }\n  - { key: T,         mods: Alt|Shift, chars: "\\x1bT"                       }\n  - { key: U,         mods: Alt|Shift, chars: "\\x1bU"                       }\n  - { key: V,         mods: Alt|Shift, chars: "\\x1bV"                       }\n  - { key: W,         mods: Alt|Shift, chars: "\\x1bW"                       }\n  - { key: X,         mods: Alt|Shift, chars: "\\x1bX"                       }\n  - { key: Y,         mods: Alt|Shift, chars: "\\x1bY"                       }\n  - { key: Z,         mods: Alt|Shift, chars: "\\x1bZ"                       }\n  - { key: Key1,      mods: Alt,       chars: "\\x1b1"                       }\n  - { key: Key2,      mods: Alt,       chars: "\\x1b2"                       }\n  - { key: Key3,      mods: Alt,       chars: "\\x1b3"                       }\n  - { key: Key4,      mods: Alt,       chars: "\\x1b4"                       }\n  - { key: Key5,      mods: Alt,       chars: "\\x1b5"                       }\n  - { key: Key6,      mods: Alt,       chars: "\\x1b6"                       }\n  - { key: Key7,      mods: Alt,       chars: "\\x1b7"                       }\n  - { key: Key8,      mods: Alt,       chars: "\\x1b8"                       }\n  - { key: Key9,      mods: Alt,       chars: "\\x1b9"                       }\n  - { key: Key0,      mods: Alt,       chars: "\\x1b0"                       }\n  - { key: Space,     mods: Control,   chars: "\\x00"                        } # Ctrl + Space\n  - { key: Grave,     mods: Alt,       chars: "\\x1b`"                       } # Alt + `\n  - { key: Grave,     mods: Alt|Shift, chars: "\\x1b~"                       } # Alt + ~\n  - { key: Period,    mods: Alt,       chars: "\\x1b."                       } # Alt + .\n  - { key: Key8,      mods: Alt|Shift, chars: "\\x1b*"                       } # Alt + *\n  - { key: Key3,      mods: Alt|Shift, chars: "\\x1b#"                       } # Alt + #\n  - { key: Period,    mods: Alt|Shift, chars: "\\x1b>"                       } # Alt + >\n  - { key: Comma,     mods: Alt|Shift, chars: "\\x1b<"                       } # Alt + <\n  - { key: Minus,     mods: Alt|Shift, chars: "\\x1b_"                       } # Alt + _\n  - { key: Key5,      mods: Alt|Shift, chars: "\\x1b%"                       } # Alt + %\n  - { key: Key6,      mods: Alt|Shift, chars: "\\x1b^"                       } # Alt + ^\n  - { key: Backslash, mods: Alt,       chars: "\\x1b\\\\"                      } # Alt + \\\n  - { key: Backslash, mods: Alt|Shift, chars: "\\x1b|"                       } # Alt + |\n'


############################################################
########### BEGINNING OF PSEUDO TERMINAL SESSION ###########
###########    Fri Aug 13, 2021 at 7:25:52PM     ###########
############################################################
ans = '/Users/Ryan/.tmux.conf'


############################################################
########### BEGINNING OF PSEUDO TERMINAL SESSION ###########
###########    Mon Aug 16, 2021 at 6:45:46PM     ###########
############################################################
string_to_text_file(get_module_path(r),ans)


############################################################
########### BEGINNING OF PSEUDO TERMINAL SESSION ###########
###########    Mon Aug 16, 2021 at 7:00:55PM     ###########
############################################################
string_to_text_file(get_module_path(r),ans)
import sys,os;os.chdir('/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages');sys.path.append(os.getcwd())# CD ..
import sys,os;os.chdir('/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5');sys.path.append(os.getcwd())# CD ..
import sys,os;os.chdir('/Library/Frameworks/Python.framework/Versions/3.5/lib');sys.path.append(os.getcwd())# CD ..
import sys,os;os.chdir('/Library/Frameworks/Python.framework/Versions/3.5');sys.path.append(os.getcwd())# CD ..
import sys,os;os.chdir('/Library/Frameworks/Python.framework/Versions');sys.path.append(os.getcwd())# CD ..
import sys,os;os.chdir('/Library/Frameworks/Python.framework');sys.path.append(os.getcwd())# CD ..
import sys,os;os.chdir('/Library/Frameworks');sys.path.append(os.getcwd())# CD ..
import sys,os;os.chdir('/Library');sys.path.append(os.getcwd())# CD ..
import sys,os;os.chdir('/');sys.path.append(os.getcwd())# CD ..
import sys,os;os.chdir('/Users');sys.path.append(os.getcwd())# CD Users
import sys,os;os.chdir('/Users/Ryan');sys.path.append(os.getcwd())# CD Ryan
ans = '/Users/Ryan/.tmux.conf'
ans='/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/rp/r.py'